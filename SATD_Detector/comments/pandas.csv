file path,line #,comment,satd
pandas/versioneer.py,1,Version: 0.15,
pandas/versioneer.py,357,"we require that all commands are run from the project root, i.e. the",
pandas/versioneer.py,358,"directory that contains setup.py, setup.cfg, and versioneer.py .",
pandas/versioneer.py,363,allow 'python path/to/setup.py COMMAND',
pandas/versioneer.py,377,Certain runtime workflows (setup.py install/develop in a setuptools,
pandas/versioneer.py,378,"tree) execute all dependencies in a single python process, so",
pandas/versioneer.py,379,"""versioneer"" may be imported multiple times, and python's shared",
pandas/versioneer.py,380,module-import table will cache the first one. So we can't use,
pandas/versioneer.py,381,"os.path.dirname(__file__), as that will find whichever",
pandas/versioneer.py,382,"versioneer.py was first imported, even in later projects.",
pandas/versioneer.py,395,"This might raise EnvironmentError (if setup.cfg is missing), or",
pandas/versioneer.py,396,"configparser.NoSectionError (if it lacks a [versioneer] section), or",
pandas/versioneer.py,397,"configparser.NoOptionError (if it lacks ""VCS=""). See the docstring at",
pandas/versioneer.py,398,the top of versioneer.py for instructions on writing your setup.cfg .,
pandas/versioneer.py,403,mandatory,
pandas/versioneer.py,425,these dictionaries contain VCS-specific tools,
pandas/versioneer.py,430,decorator,
pandas/versioneer.py,446,"remember shell=False, so use git.cmd on windows, not just git",
pandas/versioneer.py,943,the code embedded in _version.py can just fetch the value of these,
pandas/versioneer.py,944,"keywords. When used from setup.py, we don't want to import _version.py,",
pandas/versioneer.py,945,so we do it with a regexp instead. This function is not used from,
pandas/versioneer.py,946,_version.py.,
pandas/versioneer.py,975,"starting in git-1.8.3, tags are listed as ""tag: foo-1.0"" instead of",
pandas/versioneer.py,976,"just ""foo-1.0"". If we see a ""tag: "" prefix, prefer those.",
pandas/versioneer.py,980,"Either we're using git < 1.8.3, or there really are no tags. We use",
pandas/versioneer.py,981,a heuristic: assume all version tags have a digit. The old git %d,
pandas/versioneer.py,982,expansion behaves like git log --decorate=short and strips out the,
pandas/versioneer.py,983,refs/heads/ and refs/tags/ prefixes that would let us distinguish,
pandas/versioneer.py,984,"between branches and tags. By ignoring refnames without digits, we",
pandas/versioneer.py,985,"filter out many common branch names like ""release"" and",
pandas/versioneer.py,986,"""stabilization"", as well as ""HEAD"" and ""master"".",
pandas/versioneer.py,993,"sorting will prefer e.g. ""2.0"" over ""2.0rc1""",
pandas/versioneer.py,1004,"no suitable tags, so version is ""0+unknown"", but full hex is still there",
pandas/versioneer.py,1017,this runs 'git' from the root of the source tree. This only gets called,
pandas/versioneer.py,1018,"if the git-archive 'subst' keywords were *not* expanded, and",
pandas/versioneer.py,1019,"_version.py hasn't already been rewritten with a short version string,",
pandas/versioneer.py,1020,meaning we're inside a checked out source tree.,
pandas/versioneer.py,1030,"if there is a tag, this yields TAG-NUM-gHEX[-dirty]",
pandas/versioneer.py,1031,"if there are no tags, this yields HEX[-dirty] (no NUM)",
pandas/versioneer.py,1035,--long was added in git-1.5.5,
pandas/versioneer.py,1046,maybe improved later,
pandas/versioneer.py,1049,parse describe_out. It will be like TAG-NUM-gHEX[-dirty] or HEX[-dirty],
pandas/versioneer.py,1050,TAG might have hyphens.,
pandas/versioneer.py,1053,look for -dirty suffix,
pandas/versioneer.py,1059,now we have TAG-NUM-gHEX or HEX,
pandas/versioneer.py,1062,TAG-NUM-gHEX,
pandas/versioneer.py,1065,unparseable. Maybe git-describe is misbehaving?,
pandas/versioneer.py,1069,tag,
pandas/versioneer.py,1082,distance: number of commits since tag,
pandas/versioneer.py,1085,commit: short hex revision ID,
pandas/versioneer.py,1089,HEX: no tags,
pandas/versioneer.py,1092,total number of commits,
pandas/versioneer.py,1131,Source tarballs conventionally unpack into a directory that includes,
pandas/versioneer.py,1132,both the project name and a version string.,
pandas/versioneer.py,1200,"now build up version string, with post-release ""local version",
pandas/versioneer.py,1201,"identifier"". Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you",
pandas/versioneer.py,1202,"get a tagged build and then dirty it, you'll get TAG+0.gHEX.dirty",
pandas/versioneer.py,1204,exceptions:,
pandas/versioneer.py,1205,1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty],
pandas/versioneer.py,1215,exception #1,
pandas/versioneer.py,1223,TAG[.post.devDISTANCE] . No -dirty,
pandas/versioneer.py,1225,exceptions:,
pandas/versioneer.py,1226,1: no tags. 0.post.devDISTANCE,
pandas/versioneer.py,1233,exception #1,
pandas/versioneer.py,1239,"TAG[.postDISTANCE[.dev0]+gHEX] . The "".dev0"" means dirty. Note that",
pandas/versioneer.py,1240,".dev0 sorts backwards (a dirty tree will appear ""older"" than the",
pandas/versioneer.py,1241,"corresponding clean one), but you shouldn't be releasing software with",
pandas/versioneer.py,1242,-dirty anyways.,
pandas/versioneer.py,1244,exceptions:,
pandas/versioneer.py,1245,1: no tags. 0.postDISTANCE[.dev0],
pandas/versioneer.py,1256,exception #1,
pandas/versioneer.py,1265,"TAG[.postDISTANCE[.dev0]] . The "".dev0"" means dirty.",
pandas/versioneer.py,1267,exceptions:,
pandas/versioneer.py,1268,1: no tags. 0.postDISTANCE[.dev0],
pandas/versioneer.py,1277,exception #1,
pandas/versioneer.py,1285,"TAG[-DISTANCE-gHEX][-dirty], like 'git describe --tags --dirty",
pandas/versioneer.py,1286,--always',
pandas/versioneer.py,1288,exceptions:,
pandas/versioneer.py,1289,1: no tags. HEX[-dirty]  (note: no 'g' prefix),
pandas/versioneer.py,1296,exception #1,
pandas/versioneer.py,1304,"TAG-DISTANCE-gHEX[-dirty], like 'git describe --tags --dirty",
pandas/versioneer.py,1305,--always -long'. The distance/hash is unconditional.,
pandas/versioneer.py,1307,exceptions:,
pandas/versioneer.py,1308,1: no tags. HEX[-dirty]  (note: no 'g' prefix),
pandas/versioneer.py,1314,exception #1,
pandas/versioneer.py,1331,the default,
pandas/versioneer.py,1361,returns dict with two keys: 'version' and 'full',
pandas/versioneer.py,1364,see the discussion in cmdclass.py:get_cmdclass(),
pandas/versioneer.py,1381,"extract version from first of: _version.py, VCS command (e.g. 'git",
pandas/versioneer.py,1382,"describe'), parentdir. This is meant to work for developers using a",
pandas/versioneer.py,1383,"source checkout, for users of a tarball created by 'setup.py sdist',",
pandas/versioneer.py,1384,and for users of a tarball/zipball created by 'git archive' or github's,
pandas/versioneer.py,1385,download-from-tag feature or the equivalent in other VCSes.,
pandas/versioneer.py,1445,"this fixes the ""python setup.py develop"" case (also 'install' and",
pandas/versioneer.py,1446,"'easy_install .'), in which subdependencies of the main project are",
pandas/versioneer.py,1447,built (using setup.py bdist_egg) in the same python process. Assume,
pandas/versioneer.py,1448,"a main project A and a dependency B, which use different versions",
pandas/versioneer.py,1449,"of Versioneer. A's setup.py imports A's Versioneer, leaving it in",
pandas/versioneer.py,1450,"sys.modules by the time B's setup.py is executed, causing B to run",
pandas/versioneer.py,1451,with the wrong versioneer. Setuptools wraps the sub-dep builds in a,
pandas/versioneer.py,1452,"sandbox that restores sys.modules to it's pre-build state, so the",
pandas/versioneer.py,1453,"parent is protected against the child's ""import versioneer"". By",
pandas/versioneer.py,1454,"removing ourselves from sys.modules here, before the child build",
pandas/versioneer.py,1455,"happens, we protect the child from the parent's versioneer too.",
pandas/versioneer.py,1456,Also see https://github.com/warner/python-versioneer/issues/52,
pandas/versioneer.py,1460,"we add ""version"" to both distutils and setuptools",
pandas/versioneer.py,1484,"we override ""build_py"" in both distutils and setuptools",
pandas/versioneer.py,1485,,
pandas/versioneer.py,1486,most invocation pathways end up running build_py:,
pandas/versioneer.py,1487,distutils/build -> build_py,
pandas/versioneer.py,1488,distutils/install -> distutils/build ->..,
pandas/versioneer.py,1489,setuptools/bdist_wheel -> distutils/install ->..,
pandas/versioneer.py,1490,setuptools/bdist_egg -> distutils/install_lib -> build_py,
pandas/versioneer.py,1491,setuptools/install -> bdist_egg ->..,
pandas/versioneer.py,1492,setuptools/develop -> ?,
pandas/versioneer.py,1502,now locate _version.py in the new build/ directory and replace,
pandas/versioneer.py,1503,it with an updated value,
pandas/versioneer.py,1511,cx_freeze enabled?,
pandas/versioneer.py,1541,"we override different ""sdist"" commands for both environments",
pandas/versioneer.py,1551,"unless we update this, the command will keep using the old",
pandas/versioneer.py,1552,version,
pandas/versioneer.py,1560,now locate _version.py in the new base_dir directory,
pandas/versioneer.py,1561,(remembering that it may be a hardlink) and replace it with an,
pandas/versioneer.py,1562,updated value,
pandas/versioneer.py,1665,"Make sure both the top-level ""versioneer.py"" and versionfile_source",
pandas/versioneer.py,1666,"(PKG/_version.py, used by runtime code) are in MANIFEST.in, so",
pandas/versioneer.py,1667,they'll be copied into source distributions. Pip won't be able to,
pandas/versioneer.py,1668,install the package without this.,
pandas/versioneer.py,1679,That doesn't cover everything MANIFEST.in can do,
pandas/versioneer.py,1680,"(https://docs.python.org/2/distutils/sourcedist.html#commands), so",
pandas/versioneer.py,1681,it might give some false negatives. Appending redundant 'include',
pandas/versioneer.py,1682,"lines is safe, though.",
pandas/versioneer.py,1699,"Make VCS-specific changes. For git, this means creating/changing",
pandas/versioneer.py,1700,.gitattributes to mark _version.py for export-time keyword,
pandas/versioneer.py,1701,substitution.,
pandas/setup.py,1,!/usr/bin/env python3,
pandas/setup.py,22,versioning,
pandas/setup.py,37,note: sync with pyproject.toml,
pandas/setup.py,49,dummy func,
pandas/setup.py,51,"The import of Extension must be after the import of Cython, otherwise",
pandas/setup.py,52,we do not get the appropriately patched class.,
pandas/setup.py,53,See https://cython.readthedocs.io/en/latest/src/userguide/source_files_and_compilation.html # noqa,
pandas/setup.py,54,noqa: E402 isort:skip,
pandas/setup.py,55,noqa: E402 isort:skip,
pandas/setup.py,91,"build pxifiles first, template extension must be .pxi.in",
pandas/setup.py,99,"if .pxi.in is not updated, no need to output .pxi",
pandas/setup.py,110,"if building from c files, don't need to",
pandas/setup.py,111,generate template output,
pandas/setup.py,260,clean the generated pxi files,
pandas/setup.py,285,we need to inherit from the versioneer,
pandas/setup.py,286,class as it encodes the version info,
pandas/setup.py,341,If we are not running cython then,
pandas/setup.py,342,compile the extensions correctly,
pandas/setup.py,415,----------------------------------------------------------------------,
pandas/setup.py,416,Preparation of compiler arguments,
pandas/setup.py,441,"Build for at least macOS 10.9 when compiling on a 10.9 system or above,",
pandas/setup.py,442,overriding CPython distuitls behaviour which is to target the version that,
pandas/setup.py,443,python was built for. This may be overridden by setting,
pandas/setup.py,444,MACOSX_DEPLOYMENT_TARGET before calling setup.py,
pandas/setup.py,457,GH 33239,
pandas/setup.py,460,enable coverage by building cython files by setting the environment variable,
pandas/setup.py,461,"""PANDAS_CYTHON_COVERAGE"" (with a Truthy value) or by running build_ext",
pandas/setup.py,462,with `--with-cython-coverage`enabled,
pandas/setup.py,468,"Note: if not using `cythonize`, coverage can be enabled by",
pandas/setup.py,469,pinning `ext.cython_directives = directives` to each ext in extensions.,
pandas/setup.py,470,github.com/cython/cython/wiki/enhancements-compilerdirectives#in-setuppy,
pandas/setup.py,474,https://pypkg.com/pypi/pytest-cython/f/tests/example-project/setup.py,
pandas/setup.py,478,"in numpy>=1.16.0, silence build warnings about deprecated API usage",
pandas/setup.py,479,we can't do anything about these warnings because they stem from,
pandas/setup.py,480,cython+numpy version mismatches.,
pandas/setup.py,492,----------------------------------------------------------------------,
pandas/setup.py,493,Specification of Dependencies,
pandas/setup.py,495,TODO: Need to check to see if e.g. `linetrace` has changed and possibly,
pandas/setup.py,496,re-compile.,
pandas/setup.py,505,See https://github.com/cython/cython/issues/1495,
pandas/setup.py,509,GH#28836 raise a helfpul error message,
pandas/setup.py,518,TODO: Is this really necessary here?,
pandas/setup.py,523,reuse any parallel arguments provided for compilation to cythonize,
pandas/setup.py,582,due to tokenizer import,
pandas/setup.py,701,----------------------------------------------------------------------,
pandas/setup.py,702,ujson,
pandas/setup.py,705,undo dumb setuptools bug clobbering .pyx sources back to .c,
pandas/setup.py,744,----------------------------------------------------------------------,
pandas/setup.py,778,sync with setup.cfg minversion & install.rst,
pandas/setup.py,792,Freeze to support parallel compilation when using spawn instead of fork,
pandas/web/,1,!/usr/bin/env python3,
pandas/web/,81,posts from the file system,
pandas/web/,121,posts from rss feeds,
pandas/,21,To prevent import cycles place any internal imports in the branch below,
pandas/,22,and use a string literal forward reference to it in subsequent types,
pandas/,23,https://mypy.readthedocs.io/en/latest/common_issues.html#import-cycles,
pandas/,25,noqa: F401,
pandas/,26,noqa: F401,
pandas/,27,noqa: F401,
pandas/,28,noqa: F401,
pandas/,29,noqa: F401,
pandas/,30,noqa: F401,
pandas/,31,noqa: F401,
pandas/,32,noqa: F401,
pandas/,34,array-like,
pandas/,39,scalars,
pandas/,46,other,
pandas/,54,FrameOrSeriesUnion  means either a DataFrame or a Series. E.g.,
pandas/,55,`def func(a: FrameOrSeriesUnion) -> FrameOrSeriesUnion: ...` means that if a Series,
pandas/,56,"is passed in, either a Series or DataFrame is returned, and if a DataFrame is passed",
pandas/,57,"in, either a DataFrame or a Series is returned.",
pandas/,60,FrameOrSeries is stricter and ensures that the same subclass of NDFrame always is,
pandas/,61,used. E.g. `def func(a: FrameOrSeries) -> FrameOrSeries: ...` means that if a,
pandas/,62,"Series is passed into a function, a Series is always returned and if a DataFrame is",
pandas/,63,"passed in, a DataFrame is always returned.",
pandas/,73,For functions like rename that convert one label to another,
pandas/,76,to maintain type information across generic functions and parametrization,
pandas/,78,used in decorators to preserve the signature of the function it decorates,
pandas/,79,see https://mypy.readthedocs.io/en/stable/generics.html#declaring-decorators,
pandas/,45,----------------------------------------------------------------,
pandas/,46,Configuration / Settings,
pandas/,47,----------------------------------------------------------------,
pandas/,48,pytest,
pandas/,83,Hypothesis,
pandas/,86,"Hypothesis timing checks are tuned for scalars by default, so we bump",
pandas/,87,them from 200ms to 500ms per test case as the global default.  If this,
pandas/,88,"is too short for a specific test, (a) try to make it faster, and (b)",
pandas/,89,"if it really is slow add `@settings(deadline=...)` with a working value,",
pandas/,90,or `deadline=None` to entirely disable timeouts for that test.,
pandas/,96,"Registering these strategies makes them globally available via st.from_type,",
pandas/,97,which is use for offsets in tests/tseries/offsets/test_offsets_properties.py,
pandas/,129,----------------------------------------------------------------,
pandas/,130,Autouse fixtures,
pandas/,131,----------------------------------------------------------------,
pandas/,149,----------------------------------------------------------------,
pandas/,150,Common arguments,
pandas/,151,----------------------------------------------------------------,
pandas/,258,----------------------------------------------------------------,
pandas/,259,Missing values & co.,
pandas/,260,----------------------------------------------------------------,
pandas/,269,Generate cartesian product of nulls_fixture,
pandas/,280,Generate cartesian product of unique_nulls_fixture:,
pandas/,284,----------------------------------------------------------------,
pandas/,285,Classes,
pandas/,286,----------------------------------------------------------------,
pandas/,335,----------------------------------------------------------------,
pandas/,336,Indices,
pandas/,337,----------------------------------------------------------------,
pandas/,346,"use Int64Index, to make sure things work",
pandas/,357,See Also: tests.multi.conftest.idx,
pandas/,377,GH#8367 round trip with pickle,
pandas/,417,"copy to avoid mutation, e.g. setting .name",
pandas/,421,Needed to generate cartesian product of indices,
pandas/,425,----------------------------------------------------------------,
pandas/,426,Series',
pandas/,427,----------------------------------------------------------------,
pandas/,505,"copy to avoid mutation, e.g. setting .name",
pandas/,521,----------------------------------------------------------------,
pandas/,522,DataFrames,
pandas/,523,----------------------------------------------------------------,
pandas/,616,----------------------------------------------------------------,
pandas/,617,Operators & Operations,
pandas/,618,----------------------------------------------------------------,
pandas/,750,----------------------------------------------------------------,
pandas/,751,Data sets/files,
pandas/,752,----------------------------------------------------------------,
pandas/,804,----------------------------------------------------------------,
pandas/,805,Time zones,
pandas/,806,----------------------------------------------------------------,
pandas/,844,Generate cartesian product of tz_aware_fixture:,
pandas/,864,----------------------------------------------------------------,
pandas/,865,Dtypes,
pandas/,866,----------------------------------------------------------------,
pandas/,1099,categoricals are handled separately,
pandas/,1117,The following two dtypes are commented out due to GH 23554,
pandas/,1118,"('complex', [1 + 1j, np.nan, 2 + 2j]),",
pandas/,1119,"('timedelta64', [np.timedelta64(1, 'D'),",
pandas/,1120,"np.nan, np.timedelta64(2, 'D')]),",
pandas/,1126,use inferred type as fixture-id,
pandas/,1171,object dtype to avoid casting,
pandas/,1173,correctness of inference tested in tests/dtypes/test_inference.py,
pandas/,1177,----------------------------------------------------------------,
pandas/,1178,Misc,
pandas/,1179,----------------------------------------------------------------,
pandas/,18,noqa:F401,
pandas/,76,set testing_mode,
pandas/,81,set the testing mode filters,
pandas/,88,reset the testing mode filters,
pandas/,343,Other sequences.,
pandas/,346,"Do not compare numeric classes, like np.float64 and float.",
pandas/,349,"Do not compare bool classes, like np.bool_ and bool.",
pandas/,455,-----------------------------------------------------------------------------,
pandas/,456,contextmanager to ensure the file cleanup,
pandas/,497,Don't generate tempfile if using a path with directory specified.,
pandas/,557,-----------------------------------------------------------------------------,
pandas/,558,Comparators,
pandas/,609,Skip exact dtype checking when `check_categorical` is False,
pandas/,613,allow string-like to have different inferred_types,
pandas/,620,accept level number only,
pandas/,627,instance validation,
pandas/,630,class / dtype comparison,
pandas/,633,level comparison,
pandas/,640,length comparison,
pandas/,647,MultiIndex special comparison for little-friendly error messages,
pandas/,653,cannot use get_level_values here because it can change dtype,
pandas/,667,get_level_values may change dtype,
pandas/,670,skip exact index checking when `check_categorical` is False,
pandas/,687,metadata comparison,
pandas/,708,return Index as it is to include values in the error message,
pandas/,715,allow equivalence of Int64Index/RangeIndex,
pandas/,753,np.nan,
pandas/,759,datetimetz on rhs may raise TypeError,
pandas/,794,sorting does not change precisions,
pandas/,831,e.g. '<' not supported between instances of 'int' and 'str',
pandas/,954,instance validation,
pandas/,955,Show a detailed error message when classes are different,
pandas/,957,both classes must be an np.ndarray,
pandas/,982,count up differences,
pandas/,992,compare shape and values,
pandas/,1032,Avoid slow object-dtype comparisons,
pandas/,1033,np.asarray for case where we have a np.MaskedArray,
pandas/,1055,This could be refactored to use the NDFrame.equals method,
pandas/,1112,instance validation,
pandas/,1118,length comparison,
pandas/,1124,index comparison,
pandas/,1137,We want to skip exact dtype checking when `check_categorical`,
pandas/,1138,"is False. We'll still raise if only one is a `Categorical`,",
pandas/,1139,regardless of `check_categorical`,
pandas/,1163,we want to check only if we have compat dtypes,
pandas/,1164,"e.g. integer and M|m are NOT compat, but we can simply check",
pandas/,1165,the values in that case,
pandas/,1167,datetimelike may have different objects (e.g. datetime.datetime,
pandas/,1168,vs Timestamp) but will compare equal,
pandas/,1188,DatetimeArray or TimedeltaArray,
pandas/,1200,metadata comparison,
pandas/,1214,This could be refactored to use the NDFrame.equals method,
pandas/,1321,instance validation,
pandas/,1326,"assert_class_equal(left, right, obj=obj)",
pandas/,1328,shape comparison,
pandas/,1337,index comparison,
pandas/,1349,column comparison,
pandas/,1361,compare by blocks,
pandas/,1372,compare by columns,
pandas/,1450,"for vector operations, we we need a DataFrame to be a single-row,",
pandas/,1451,"not a single-column, in order to operate against non-DataFrame",
pandas/,1452,vectors of the same length.,
pandas/,1455,the PeriodArray constructor is not as flexible as period_array,
pandas/,1471,temporary implementation until we get pd.array in place,
pandas/,1482,-----------------------------------------------------------------------------,
pandas/,1483,Sparse,
pandas/,1499,SparseIndex comparison,
pandas/,1511,Just ensure a,
pandas/,1519,-----------------------------------------------------------------------------,
pandas/,1520,Others,
pandas/,1550,make index,
pandas/,1727,make series,
pandas/,1770,make frame,
pandas/,1837,build default names,
pandas/,1840,pass None to index constructor for no name,
pandas/,1843,make singleton case uniform,
pandas/,1847,specific 1D index type requested?,
pandas/,1859,but we need to fill in the name,
pandas/,1884,build a list of lists to create the index from,
pandas/,1890,cute Counter trick,
pandas/,1896,convert tuples to index,
pandas/,1898,"we have a single level of tuples, i.e. a regular Index",
pandas/,2006,"by default, generate data based on location",
pandas/,2021,below is cribbed from scipy.sparse,
pandas/,2023,generate a few more to ensure unique values,
pandas/,2077,skip tests on exceptions with this message,
pandas/,2079,"'urlopen error timed out',",
pandas/,2080,"'timeout: timed out',",
pandas/,2081,"'socket.timeout: timed out',",
pandas/,2097,or this e.errno/e.reason.errno,
pandas/,2099,Network is unreachable,
pandas/,2100,Connection refused,
pandas/,2101,Connection timed out,
pandas/,2102,Connection reset Error,
pandas/,2103,Connection reset by peer,
pandas/,2104,urllib.error.URLError: [Errno 60] Connection timed out,
pandas/,2107,Both of the above shouldn't mask real issues such as 404's,
pandas/,2108,or refused connections (changed DNS).,
pandas/,2109,But some tests (test_data yahoo) contact incredibly flakey,
pandas/,2110,servers.,
pandas/,2112,and conditionally raise on exception types in _get_default_network_errors,
pandas/,2116,Lazy import for http.client because it imports many things from the stdlib,
pandas/,1,flake8: noqa,
pandas/,5,Let users know if they're missing any of our hard dependencies,
pandas/,21,numpy compat,
pandas/,33,pragma: no cover,
pandas/,34,hack but overkill to use re,
pandas/,51,let init-time option registration happen,
pandas/,55,dtype,
pandas/,70,missing,
pandas/,76,indexes,
pandas/,89,tseries,
pandas/,101,conversion,
pandas/,105,misc,
pandas/,145,excel,
pandas/,149,parsers,
pandas/,153,pickle,
pandas/,156,pytables,
pandas/,159,sql,
pandas/,163,misc,
pandas/,182,use the closest tagged version if possible,
pandas/,190,GH 27101,
pandas/,191,TODO: remove Panel compat in 1.0,
pandas/,367,module level doc-string,
pandas/,1,This file helps to compute a version number in source trees obtained from,
pandas/,2,git-archive tarball (such as those provided by githubs download-from-tag,
pandas/,3,feature). Distribution tarballs (built by setup.py sdist) and build,
pandas/,4,directories (produced by setup.py build) will contain a much shorter file,
pandas/,5,that just contains the computed version number.,
pandas/,7,This file is released into the public domain. Generated by,
pandas/,8,versioneer-0.15 (https://github.com/warner/python-versioneer),
pandas/,19,these strings will be replaced by git during git-archive.,
pandas/,20,"setup.py/versioneer.py will grep for the variable names, so they must",
pandas/,21,each be defined on a line of their own. _version.py will just call,
pandas/,22,get_keywords().,
pandas/,34,these strings are filled in when 'setup.py versioneer' creates,
pandas/,35,_version.py,
pandas/,53,decorator,
pandas/,69,"remember shell=False, so use git.cmd on windows, not just git",
pandas/,98,Source tarballs conventionally unpack into a directory that includes,
pandas/,99,both the project name and a version string.,
pandas/,118,the code embedded in _version.py can just fetch the value of these,
pandas/,119,"keywords. When used from setup.py, we don't want to import _version.py,",
pandas/,120,so we do it with a regexp instead. This function is not used from,
pandas/,121,_version.py.,
pandas/,150,"starting in git-1.8.3, tags are listed as ""tag: foo-1.0"" instead of",
pandas/,151,"just ""foo-1.0"". If we see a ""tag: "" prefix, prefer those.",
pandas/,155,"Either we're using git < 1.8.3, or there really are no tags. We use",
pandas/,156,a heuristic: assume all version tags have a digit. The old git %d,
pandas/,157,expansion behaves like git log --decorate=short and strips out the,
pandas/,158,refs/heads/ and refs/tags/ prefixes that would let us distinguish,
pandas/,159,"between branches and tags. By ignoring refnames without digits, we",
pandas/,160,"filter out many common branch names like ""release"" and",
pandas/,161,"""stabilization"", as well as ""HEAD"" and ""master"".",
pandas/,168,"sorting will prefer e.g. ""2.0"" over ""2.0rc1""",
pandas/,179,"no suitable tags, so version is ""0+unknown"", but full hex is still there",
pandas/,192,this runs 'git' from the root of the source tree. This only gets called,
pandas/,193,"if the git-archive 'subst' keywords were *not* expanded, and",
pandas/,194,"_version.py hasn't already been rewritten with a short version string,",
pandas/,195,meaning we're inside a checked out source tree.,
pandas/,205,"if there is a tag, this yields TAG-NUM-gHEX[-dirty]",
pandas/,206,"if there are no tags, this yields HEX[-dirty] (no NUM)",
pandas/,210,--long was added in git-1.5.5,
pandas/,221,maybe improved later,
pandas/,224,parse describe_out. It will be like TAG-NUM-gHEX[-dirty] or HEX[-dirty],
pandas/,225,TAG might have hyphens.,
pandas/,228,look for -dirty suffix,
pandas/,234,now we have TAG-NUM-gHEX or HEX,
pandas/,237,TAG-NUM-gHEX,
pandas/,240,unparseable. Maybe git-describe is misbehaving?,
pandas/,244,tag,
pandas/,255,distance: number of commits since tag,
pandas/,258,commit: short hex revision ID,
pandas/,262,HEX: no tags,
pandas/,265,total number of commits,
pandas/,277,"now build up version string, with post-release ""local version",
pandas/,278,"identifier"". Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you",
pandas/,279,"get a tagged build and then dirty it, you'll get TAG+0.gHEX.dirty",
pandas/,281,exceptions:,
pandas/,282,1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty],
pandas/,292,exception #1,
pandas/,300,TAG[.post.devDISTANCE] . No -dirty,
pandas/,302,exceptions:,
pandas/,303,1: no tags. 0.post.devDISTANCE,
pandas/,310,exception #1,
pandas/,316,"TAG[.postDISTANCE[.dev0]+gHEX] . The "".dev0"" means dirty. Note that",
pandas/,317,".dev0 sorts backwards (a dirty tree will appear ""older"" than the",
pandas/,318,"corresponding clean one), but you shouldn't be releasing software with",
pandas/,319,-dirty anyways.,
pandas/,321,exceptions:,
pandas/,322,1: no tags. 0.postDISTANCE[.dev0],
pandas/,333,exception #1,
pandas/,342,"TAG[.postDISTANCE[.dev0]] . The "".dev0"" means dirty.",
pandas/,344,exceptions:,
pandas/,345,1: no tags. 0.postDISTANCE[.dev0],
pandas/,354,exception #1,
pandas/,362,"TAG[-DISTANCE-gHEX][-dirty], like 'git describe --tags --dirty",
pandas/,363,--always',
pandas/,365,exceptions:,
pandas/,366,1: no tags. HEX[-dirty]  (note: no 'g' prefix),
pandas/,373,exception #1,
pandas/,381,"TAG-DISTANCE-gHEX[-dirty], like 'git describe --tags --dirty",
pandas/,382,--always -long'. The distance/hash is unconditional.,
pandas/,384,exceptions:,
pandas/,385,1: no tags. HEX[-dirty]  (note: no 'g' prefix),
pandas/,391,exception #1,
pandas/,408,the default,
pandas/,434,"I am in _version.py, which lives at ROOT/VERSIONFILE_SOURCE. If we have",
pandas/,435,"__file__, we can work backwards from there to the root. Some",
pandas/,436,"py2exe/bbfreeze/non-CPython implementations don't do __file__, in which",
pandas/,437,case we can only use expanded keywords.,
pandas/,449,versionfile_source is the relative path from the top of the source,
pandas/,450,tree (where the .git directory might live) to this file. Invert,
pandas/,451,this to find the root from __file__.,
pandas/,5,flake8: noqa,
pandas/,5,noqa,
pandas/,93,Mon-Fri are 0-4,
pandas/,104,Mon-Fri are 0-4,
pandas/,290,Don't process unnecessary holidays,
pandas/,323,if we are adding a non-vectorized value,
pandas/,324,ignore the PerformanceWarnings:,
pandas/,428,"If we don't have a cache or the dates are outside the prior cache, we",
pandas/,429,get them again,
pandas/,48,---------------------------------------------------------------------,
pandas/,49,"Offset names (""time rules"") and related functions",
pandas/,51,: cache of previously seen offsets,
pandas/,152,the last element must be blank,
pandas/,220,handles case where there's no suffix (and will TypeError if too,
pandas/,221,many '-'),
pandas/,224,bad prefix or suffix,
pandas/,226,cache,
pandas/,232,---------------------------------------------------------------------,
pandas/,233,Period codes,
pandas/,281,Allow TimedeltaIndex and TimedeltaArray,
pandas/,308,"This moves the values, which are implicitly in UTC, to the",
pandas/,309,the timezone so they are in local time,
pandas/,329,NB: we cannot use self.i8values here because we may have converted,
pandas/,330,the tz in __init__,
pandas/,357,"Business hourly, maybe. 17: one day / 65: one weekend",
pandas/,360,Possibly intraday frequency.  Here we use the,
pandas/,361,original .asi8 values as the modified values,
pandas/,362,will not work around DST transitions.  See #8772,
pandas/,368,Hours,
pandas/,371,Minutes,
pandas/,374,Seconds,
pandas/,377,Milliseconds,
pandas/,380,Microseconds,
pandas/,383,Nanoseconds,
pandas/,437,Weekly,
pandas/,479,quick check: cannot be business daily,
pandas/,483,"probably business daily, but need to confirm",
pandas/,494,FIXME: dont leave commented-out,
pandas/,495,wdiffs = unique(np.diff(self.index.week)),
pandas/,496,"We also need -47, -49, -48 to catch index spanning year boundary",
pandas/,497,"if not lib.ismember(wdiffs, set([4, 5, -47, -49, -48])).all():",
pandas/,498,return None,
pandas/,505,Only attempt to infer up to WOM-4. See #9425,
pandas/,510,get which week,
pandas/,522,Weekly,
pandas/,79,convert to/from datetime/timestamp to allow invalid Timestamp ranges to,
pandas/,80,pass thru,
pandas/,99,timedelta path,
pandas/,120,nanosecond may be deleted depending on offset process,
pandas/,124,convert to UTC,
pandas/,139,normalize_date returns normal datetime,
pandas/,152,---------------------------------------------------------------------,
pandas/,153,DateOffset,
pandas/,257,default for prior pickles,
pandas/,278,perform calculation in UTC,
pandas/,289,bring tz back from UTC calculation,
pandas/,327,relativedelta/_offset path only valid for base DateOffset,
pandas/,337,"integer addition on PeriodIndex is deprecated,",
pandas/,338,so we directly use _time_shift instead,
pandas/,353,timedelta,
pandas/,356,relativedelta with other keywords,
pandas/,365,TODO: Does this make sense for the general case?  It would help,
pandas/,366,if there were a canonical docstring for what is_anchored means.,
pandas/,385,TODO: Combine this with BusinessMixin version by defining a whitelisted,
pandas/,386,set of attributes on each object rather than the existing behavior of,
pandas/,387,iterating over internal ``__dict__``,
pandas/,438,"XXX, see #1395",
pandas/,442,Default (slow) method for determining if some date is a member of the,
pandas/,443,date range generated by this offset. Subclasses may have this,
pandas/,444,re-implemented in a nicer way.,
pandas/,449,way to get around weirdness with rule_code,
pandas/,474,TODO: standardize `_offset` vs `offset` naming convention,
pandas/,490,default _from_name calls cls with no args,
pandas/,506,Custom offset instances are identified by the,
pandas/,507,following two attributes. See DateOffset._params(),
pandas/,508,"holidays, weekmask",
pandas/,525,Alias for backward compat,
pandas/,589,avoid slowness below by operating on weeks first,
pandas/,592,roll forward,
pandas/,597,n is always >= 0 at this point,
pandas/,599,roll back,
pandas/,602,roll forward,
pandas/,605,shift by n days without leaving the current week,
pandas/,608,shift by n days plus 2 to get past the weekend,
pandas/,626,to_period rolls forward to next BDay; track and,
pandas/,627,reduce n where it does when rolling forward,
pandas/,633,"Integer-array addition is deprecated, so we use",
pandas/,634,_time_shift directly,
pandas/,638,"Integer addition is deprecated, so we use _time_shift directly",
pandas/,653,must be validated here to equality check,
pandas/,667,Validation of input,
pandas/,672,sort starting and ending time by starting time,
pandas/,675,convert to tuple so that start and end are hashable,
pandas/,706,CustomBusinessHour,
pandas/,743,today is not business day,
pandas/,752,current time is after latest starting time in today,
pandas/,756,find earliest starting time no earlier than current time,
pandas/,763,current time is before earliest starting time in today,
pandas/,767,find latest starting time no later than current time,
pandas/,798,create dummy datetime to calculate businesshours in a day,
pandas/,853,used for detecting edge condition,
pandas/,855,reset timezone and nanosecond,
pandas/,856,"other may be a Timestamp, thus not use replace",
pandas/,868,adjust other to reduce number of cases to handle,
pandas/,874,adjustment to move to previous business day,
pandas/,880,get total business hours by sec in one business day,
pandas/,890,adjust by business days first,
pandas/,892,GH 30593,
pandas/,901,midnight business hour may not on BusinessDay,
pandas/,909,remaining business hours to adjust,
pandas/,914,business hour left in this business time interval,
pandas/,919,finish adjusting if possible,
pandas/,923,go to next business time interval,
pandas/,928,business hour left in this business time interval,
pandas/,935,finish adjusting if possible,
pandas/,939,go to next business time interval,
pandas/,959,Valid BH can be on the different BusinessDay during midnight,
pandas/,960,Distinguish by the time spent from previous opening time,
pandas/,967,if self.normalize and not _is_normalized(dt):,
pandas/,968,return False,
pandas/,969,Valid BH can be on the different BusinessDay during midnight,
pandas/,970,Distinguish by the time spent from previous opening time,
pandas/,1118,---------------------------------------------------------------------,
pandas/,1119,Month-Based Offset Classes,
pandas/,1150,TODO: going through __new__ raises on call to _validate_frequency;,
pandas/,1151,are we passing incorrect freq?,
pandas/,1218,override MonthOffset method,
pandas/,1219,override MonthOffset method,
pandas/,1243,MonthBegin,
pandas/,1246,MonthEnd,
pandas/,1253,MonthBegin,
pandas/,1256,MonthEnd,
pandas/,1266,MonthBegin,
pandas/,1269,MonthEnd,
pandas/,1275,First move to month offset,
pandas/,1278,Find this custom month offset,
pandas/,1299,---------------------------------------------------------------------,
pandas/,1300,Semi-Month Based Offset Classes,
pandas/,1334,"shift `other` to self.day_of_month, incrementing `n` if necessary",
pandas/,1339,For SemiMonthBegin on other.day == 1 and,
pandas/,1340,"SemiMonthEnd on other.day == days_in_month,",
pandas/,1341,shifting `other` to `self.day_of_month` _always_ requires,
pandas/,1342,"incrementing/decrementing `n`, regardless of whether it is",
pandas/,1343,initially positive.,
pandas/,1359,determine how many days away from the 1st of the month we are,
pandas/,1364,get boolean array for each element before the day_of_month,
pandas/,1367,get boolean array for each element after the day_of_month,
pandas/,1370,determine the correct n for each date in i,
pandas/,1373,isolate the time since it will be striped away one the next line,
pandas/,1376,apply the correct number of months,
pandas/,1378,"integer-array addition on PeriodIndex is deprecated,",
pandas/,1379,so we use _addsub_int_array directly,
pandas/,1385,apply the correct day,
pandas/,1521,---------------------------------------------------------------------,
pandas/,1522,Week-Based Offset Classes,
pandas/,1573,"integer addition on PeriodIndex is deprecated,",
pandas/,1574,so we use _time_shift directly,
pandas/,1601,"when adding, dates on end roll to next",
pandas/,1606,"integer-array addition on PeriodIndex is deprecated,",
pandas/,1607,so we use _addsub_int_array directly,
pandas/,1611,"integer addition on PeriodIndex is deprecated,",
pandas/,1612,so we use _time_shift directly,
pandas/,1730,TODO: handle n here...,
pandas/,1731,"only one digit weeks (1 --> week 0, 2 --> week 1, etc.)",
pandas/,1799,TODO: handle n here...,
pandas/,1804,---------------------------------------------------------------------,
pandas/,1805,Quarter-Based Offset Classes,
pandas/,1817,TODO: Consider combining QuarterOffset and YearOffset __init__ at some,
pandas/,1818,"point.  Also apply_index, is_on_offset, rule_code if",
pandas/,1819,startingMonth vs month attr names are resolved,
pandas/,1848,"months_since: find the calendar quarter containing other.month,",
pandas/,1849,"e.g. if other.month == 8, the calendar quarter is [Jul, Aug, Sep].",
pandas/,1850,Then find the month in that quarter containing an is_on_offset date for,
pandas/,1851,self.  `months_since` is the number of months to shift other.month,
pandas/,1852,to get to this on-offset month.,
pandas/,1871,TODO: going through __new__ raises on call to _validate_frequency;,
pandas/,1872,are we passing incorrect freq?,
pandas/,1894,TODO: This is basically the same as BQuarterEnd,
pandas/,1897,I suspect this is wrong for *all* of them.,
pandas/,1927,---------------------------------------------------------------------,
pandas/,1928,Year-Based Offset Classes,
pandas/,1940,override BaseOffset method to use self.month instead of other.month,
pandas/,1941,TODO: there may be a more performant way to do this,
pandas/,1957,TODO: going through __new__ raises on call to _validate_frequency;,
pandas/,1958,are we passing incorrect freq?,
pandas/,2032,---------------------------------------------------------------------,
pandas/,2033,Special Offset Classes,
pandas/,2115,"We have to check the year end of ""this"" cal year AND the previous",
pandas/,2133,"Note: next_year.year == other.year + 1, so we will always",
pandas/,2134,have other < next_year,
pandas/,2156,"GH#14774, error when next_year.year == cur_year.year",
pandas/,2157,"e.g. prev_year == datetime(2004, 1, 3),",
pandas/,2158,"other == datetime(2004, 1, 1)",
pandas/,2183,"year_end is the same for ""last"" and ""nearest"" cases",
pandas/,2189,"days_forward is always negative, so we always end up",
pandas/,2190,in the same year as dt,
pandas/,2193,"variation == ""nearest"":",
pandas/,2196,The upcoming self.weekday is closer than the previous one,
pandas/,2199,The previous self.weekday is closer than the upcoming one,
pandas/,2359,Note: start <= norm and self._offset.is_on_offset(start),
pandas/,2362,roll adjustment,
pandas/,2365,check thet qtr_lens is consistent with self._offset addition,
pandas/,2379,Note: we always have tdelta.value >= 0,
pandas/,2384,Note: self.n == 0 is not allowed.,
pandas/,2393,Possible speedup by handling years first.,
pandas/,2399,Add an extra day to make *sure* we are getting the quarter lengths,
pandas/,2400,"for the upcoming year, not the previous year",
pandas/,2403,Note: we always have 0 <= n < 4,
pandas/,2421,Avoid round-down errors --> normalize to get,
pandas/,2422,e.g. '370D' instead of '360D23H',
pandas/,2486,TODO: Why does this handle the 0 case the opposite of others?,
pandas/,2488,NOTE: easter returns a datetime.date so we have to convert to type of,
pandas/,2489,other,
pandas/,2508,---------------------------------------------------------------------,
pandas/,2509,Ticks,
pandas/,2519,comparing with a non-Tick object,
pandas/,2539,GH#21427,
pandas/,2568,"GH#23524 if to_offset fails, we are dealing with an",
pandas/,2569,incomparable type so == is False and != is True,
pandas/,2572,"e.g. ""infer""",
pandas/,2580,"This is identical to DateOffset.__hash__, but has to be redefined here",
pandas/,2581,"for Python 3, because we've redefined __eq__.",
pandas/,2590,"GH#23524 if to_offset fails, we are dealing with an",
pandas/,2591,incomparable type so == is False and != is True,
pandas/,2594,"e.g. ""infer""",
pandas/,2610,TODO: Should Tick have its own apply_index?,
pandas/,2612,"Timestamp can handle tz and nano sec, thus no need to use apply_wraps",
pandas/,2615,GH 15126,
pandas/,2616,in order to avoid a recursive,
pandas/,2617,call of __add__ and __radd__ if there is,
pandas/,2618,"an exception, when we call using the + operator,",
pandas/,2619,we directly call the known method,
pandas/,2640,nanoseconds only for pd.Timedelta,
pandas/,2657,pragma: no cover,
pandas/,2703,---------------------------------------------------------------------,
pandas/,2761,GH#24252 avoid overflows by not performing the addition,
pandas/,2762,in offset.apply unless we have to,
pandas/,2765,faster than cur + offset,
pandas/,2775,GH#24252 avoid overflows by not performing the addition,
pandas/,2776,in offset.apply unless we have to,
pandas/,2779,faster than cur + offset,
pandas/,2789,'AS',
pandas/,2790,'A',
pandas/,2791,'BAS',
pandas/,2792,'BA',
pandas/,2793,'B',
pandas/,2794,'BMS',
pandas/,2795,'BM',
pandas/,2796,'BQ',
pandas/,2797,'BQS',
pandas/,2798,'BH',
pandas/,2799,'C',
pandas/,2800,'CBM',
pandas/,2801,'CBMS',
pandas/,2802,'CBH',
pandas/,2803,'M',
pandas/,2804,'MS',
pandas/,2805,'N',
pandas/,2806,'SM',
pandas/,2807,'SMS',
pandas/,2808,'W',
pandas/,2809,'S',
pandas/,2810,'T',
pandas/,2811,'U',
pandas/,2812,'Q',
pandas/,2813,'QS',
pandas/,2814,'L',
pandas/,2815,'H',
pandas/,2816,'D',
pandas/,2817,'WOM',
pandas/,1,flake8: noqa,
pandas/,112,"goal is to be able to define the docs close to function, while still being",
pandas/,113,able to share,
pandas/,156,Need alias because NDFrame has def bool:,
pandas/,195,----------------------------------------------------------------------,
pandas/,196,Constructors,
pandas/,204,"copy kwarg is retained for mypy compat, is not used",
pandas/,224,make a copy if explicitly requested,
pandas/,228,avoid further copies if we can,
pandas/,233,----------------------------------------------------------------------,
pandas/,258,a compound dtype,
pandas/,267,----------------------------------------------------------------------,
pandas/,268,Construction,
pandas/,294,----------------------------------------------------------------------,
pandas/,295,Internals,
pandas/,299,"GH#33054 retained because some downstream packages uses this,",
pandas/,300,e.g. fastparquet,
pandas/,303,----------------------------------------------------------------------,
pandas/,304,Axis,
pandas/,338,construct the args,
pandas/,342,look for a argument by position,
pandas/,395,index or columns,
pandas/,404,prefix with 'i' or 'c' depending on the input axis,
pandas/,405,"e.g., you must do ilevel_0 for the 0th level of an unnamed",
pandas/,406,multiiindex,
pandas/,415,put the index/columns itself in the dict,
pandas/,470,"we do it this way because if we have reversed axes, then",
pandas/,471,the block manager shows then reversed,
pandas/,822,----------------------------------------------------------------------,
pandas/,823,Rename,
pandas/,961,use the mapper argument,
pandas/,979,GH 13473,
pandas/,1143,Use v0.23 behavior if a scalar or list,
pandas/,1152,Use new behavior.  Means that index and/or columns,
pandas/,1153,is specified,
pandas/,1230,----------------------------------------------------------------------,
pandas/,1231,Comparison Methods,
pandas/,1325,-------------------------------------------------------------------------,
pandas/,1326,Unary Methods,
pandas/,1358,inv fails with 0 len,
pandas/,1403,-------------------------------------------------------------------------,
pandas/,1404,Label or Level Combination Helpers,
pandas/,1405,,
pandas/,1406,A collection of helper methods for DataFrame/Series operations that,
pandas/,1407,accept a combination of column/index labels and levels.  All such,
pandas/,1408,operations should utilize/extend these methods when possible so that we,
pandas/,1409,have consistent precedence and validation logic throughout the library.,
pandas/,1522,Build an informative and grammatical warning,
pandas/,1582,Check for duplicates,
pandas/,1632,Validate keys,
pandas/,1646,Compute levels and labels to drop,
pandas/,1651,Perform copy upfront and then use inplace operations below.,
pandas/,1652,This ensures that we always perform exactly one copy.,
pandas/,1653,``copy`` and/or ``inplace`` options could be added in the future.,
pandas/,1657,Handle dropping index levels,
pandas/,1661,Handle dropping columns labels,
pandas/,1665,Handle dropping column levels,
pandas/,1668,Drop the specified levels from the MultiIndex,
pandas/,1671,Drop the last level of Index by replacing with,
pandas/,1672,a RangeIndex,
pandas/,1675,Handle dropping index labels,
pandas/,1681,----------------------------------------------------------------------,
pandas/,1682,Iteration,
pandas/,1701,can we get a better explanation of this?,
pandas/,1790,----------------------------------------------------------------------,
pandas/,1791,Array Interface,
pandas/,1793,This is also set in IndexOpsMixin,
pandas/,1794,GH#23114 Ensure ndarray.__op__(DataFrame) returns NotImplemented,
pandas/,1803,e.g. we get here with np.ptp(series),
pandas/,1804,ptp also requires the item_from_zerodim,
pandas/,1811,"ideally we would define this to avoid the getattr checks, but",
pandas/,1812,is slower,
pandas/,1813,@property,
pandas/,1814,def __array_interface__(self):,
pandas/,1815,""""""" provide numpy array interface method """"""",
pandas/,1816,values = self.values,
pandas/,1817,"return dict(typestr=values.dtype.str,shape=values.shape,data=values)",
pandas/,1819,----------------------------------------------------------------------,
pandas/,1820,Picklability,
pandas/,1838,compat for older pickles,
pandas/,1845,set in the order of internal names,
pandas/,1846,to avoid definitional recursion,
pandas/,1847,e.g. say fill_value needing _mgr to be,
pandas/,1848,defined,
pandas/,1866,----------------------------------------------------------------------,
pandas/,1867,Rendering Methods,
pandas/,1870,string representation based upon iterating over self,
pandas/,1871,"(since, by definition, `PandasContainers` are iterable)",
pandas/,1897,----------------------------------------------------------------------,
pandas/,1898,I/O Methods,
pandas/,2983,Get defaults from the pandas config,
pandas/,3199,----------------------------------------------------------------------,
pandas/,3200,Lookup Caching,
pandas/,3252,"we are trying to reference a dead referant, hence",
pandas/,3253,a copy,
pandas/,3257,Note: we need to call ref._maybe_cache_changed even in the,
pandas/,3258,"case where it will raise.  (Uh, not clear why)",
pandas/,3262,ref._mgr.setitem can raise,
pandas/,3263,AssertionError because of shape mismatch,
pandas/,3275,----------------------------------------------------------------------,
pandas/,3276,Indexing Methods,
pandas/,3386,Maybe set copy if we didn't actually change the index.,
pandas/,3495,create the tuple of the indexer,
pandas/,3526,In this case loc should be an integer,
pandas/,3528,if we encounter an array-like and we only have 1 dim,
pandas/,3529,that means that their are list/ndarrays inside the Series!,
pandas/,3530,so just return them (GH 6394),
pandas/,3546,this could be a view,
pandas/,3547,but only in a single-dtyped view sliceable case,
pandas/,3566,for a chain,
pandas/,3584,this could be a view,
pandas/,3585,but only in a single-dtyped view sliceable case,
pandas/,3655,return early if the check is not needed,
pandas/,3663,"see if the copy is not actually referred; if so, then dissolve",
pandas/,3664,the copy weakref,
pandas/,3671,a custom message,
pandas/,3715,Allow shorthand to delete all columns whose first len(key),
pandas/,3716,elements match key:,
pandas/,3724,If the above loop ran and didn't delete anything because,
pandas/,3725,"there was no match, this call should raise the appropriate",
pandas/,3726,exception:,
pandas/,3730,delete from the caches,
pandas/,3736,----------------------------------------------------------------------,
pandas/,3737,Unsorted,
pandas/,3940,Case for non-unique axis,
pandas/,3948,GH 18561 MultiIndex.drop should raise if label is absent,
pandas/,3953,Check if label doesn't exist along axis,
pandas/,3975,NOTE: This does *not* call __finalize__ and that's an explicit,
pandas/,3976,decision that we may revisit in the future.,
pandas/,4039,type: ignore,
pandas/,4098,type: ignore,
pandas/,4402,TODO: Decide if we care about having different examples for different,
pandas/,4403,kinds,
pandas/,4405,construct the args,
pandas/,4414,Series.reindex doesn't use / need the axis kwarg,
pandas/,4415,"We pop and ignore it here, to make writing Series/Frame generic code",
pandas/,4416,easier,
pandas/,4427,"if all axes that are requested to reindex are equal, then only copy",
pandas/,4428,if indicated must have index names equal here as well as values,
pandas/,4438,check if we are a multi reindex,
pandas/,4442,perform the reindex on the axes,
pandas/,4492,reindex doing multiple operations on different axes if indicated,
pandas/,4505,TODO: speed up on homogeneous DataFrame objects,
pandas/,4514,"If we've made a copy once, no need to make another one",
pandas/,4893,Process random_state argument,
pandas/,4896,Check weights for compliance,
pandas/,4899,"If a series, align with frame",
pandas/,4903,Strings acceptable if a dataframe and axis = 0,
pandas/,4938,"If has nan, set to zero.",
pandas/,4941,Renormalize if don't sum to 1,
pandas/,4950,"If no frac or n, default to n=1.",
pandas/,4965,Check for negative sizes,
pandas/,5142,----------------------------------------------------------------------,
pandas/,5143,Attribute access,
pandas/,5167,For subclasses using _metadata.,
pandas/,5178,Note: obj.x will always call obj.__getattribute__('x') prior to,
pandas/,5179,calling obj.__getattr__('x').,
pandas/,5196,"first try regular attribute access via __getattribute__, so that",
pandas/,5197,e.g. ``obj.x`` and ``obj.x = 4`` will always reference/modify,
pandas/,5198,the same attribute.,
pandas/,5206,"if this fails, go on to more involved attribute setting",
pandas/,5207,"(note that this matches __getattr__, above).",
pandas/,5244,----------------------------------------------------------------------,
pandas/,5245,Consolidation of internals,
pandas/,5303,allow an actual np.nan thru,
pandas/,5320,----------------------------------------------------------------------,
pandas/,5321,Internal Interface Methods,
pandas/,5568,i.e. Series,
pandas/,5593,GH 18099/22869: columnwise conversion to extension dtype,
pandas/,5594,GH 24704: use iloc to handle duplicate column names,
pandas/,5601,"else, only a single dtype is given",
pandas/,5605,GH 19920: retain column metadata after concat,
pandas/,5810,numeric=False necessary to only soft convert;,
pandas/,5811,python objects will still be converted to,
pandas/,5812,native numpy numeric types,
pandas/,5954,----------------------------------------------------------------------,
pandas/,5955,Filling NA's,
pandas/,6068,"set the default here, so functions examining the signaure",
pandas/,6069,can detect if something was set (e.g. in groupby) (GH9221),
pandas/,6081,need to downcast here because of all of the transposes,
pandas/,6505,passing a single value that is scalar like,
pandas/,6506,"when value is None (GH5319), for compat",
pandas/,6538,passed a nested dict/Series,
pandas/,6557,need a non-zero len on all axes,
pandas/,6562,{'A' : NA} -> {'A' : 0},
pandas/,6563,Note: Checking below for `in foo.keys()` instead of,
pandas/,6564,`in foo`is needed for when we have a Series and not dict,
pandas/,6572,{'A': NA} -> 0,
pandas/,6574,Operate column-wise,
pandas/,6587,"[NA, ''] -> [0, 'missing']",
pandas/,6602,"[NA, ''] -> 0",
pandas/,6622,dest iterable dict-like,
pandas/,6623,"NA -> {'A' : 0, 'B' : -1}",
pandas/,6624,Operate column-wise,
pandas/,6633,NA -> 0,
pandas/,6867,create/use the index,
pandas/,6869,prior default,
pandas/,6914,----------------------------------------------------------------------,
pandas/,6915,Timeseries methods Methods,
pandas/,7042,It's always much faster to use a *while* loop here for,
pandas/,7043,Series than pre-computing all the NAs. However a,
pandas/,7044,*while* loop is extremely expensive for DataFrame,
pandas/,7045,so we later pre-compute all the NAs and use the same,
pandas/,7046,code path whether *where* is a scalar or list.,
pandas/,7047,See PR: https://github.com/pandas-dev/pandas/pull/14476,
pandas/,7076,mask the missing,
pandas/,7083,----------------------------------------------------------------------,
pandas/,7084,Action Methods,
pandas/,7256,method is self.le for upper bound and self.ge for lower bound,
pandas/,7264,GH #15390,
pandas/,7265,"In order for where method to work, the threshold must",
pandas/,7266,be transformed to NDFrame from other array like structure.,
pandas/,7365,GH 17276,
pandas/,7366,numpy doesn't like NaN as a clip value,
pandas/,7367,so ignore,
pandas/,7368,GH 19992,
pandas/,7369,numpy doesn't drop a list-like bound containing NaN,
pandas/,7375,GH 2747 (arguments were reversed),
pandas/,7380,fast-path for scalars,
pandas/,8071,"Tick-like, e.g. 3 weeks",
pandas/,8250,"if numeric_only is None, and we can't get anything, we try with",
pandas/,8251,numeric_only=True,
pandas/,8328,"this means other is a DataFrame, and we need to broadcast",
pandas/,8329,self,
pandas/,8346,"this means self is a DataFrame, and we need to broadcast",
pandas/,8347,other,
pandas/,8390,pragma: no cover,
pandas/,8405,defaults,
pandas/,8432,other must be always DataFrame,
pandas/,8442,needed for mypy,
pandas/,8446,"if DatetimeIndex have different tz, convert to UTC",
pandas/,8473,"series/series compat, other must always be a Series",
pandas/,8478,equal,
pandas/,8490,one has > 1 ndim,
pandas/,8526,fill,
pandas/,8532,"if DatetimeIndex have different tz, convert to UTC",
pandas/,8561,align the cond to same shape as myself,
pandas/,8572,make sure we are boolean,
pandas/,8579,This is a single-dimensional object.,
pandas/,8587,"GH#21947 we have an empty DataFrame, could be object-dtype",
pandas/,8592,try to align with other,
pandas/,8596,align with me,
pandas/,8603,"if we are NOT aligned, raise as we cannot where index",
pandas/,8609,slice me out of the other,
pandas/,8623,GH 2745 / GH 4192,
pandas/,8624,treat like a scalar,
pandas/,8628,GH 3235,
pandas/,8629,match True cond to other,
pandas/,8632,try to not change dtype at first (if try_quick),
pandas/,8649,"we are the same shape, so create an actual object for alignment",
pandas/,8664,"we may have different type blocks come out of putmask, so",
pandas/,8665,reconstruct the block manager,
pandas/,8853,see gh-21891,
pandas/,9039,for mypy,
pandas/,9177,GH 17935,
pandas/,9178,Check that index is sorted,
pandas/,9182,"if we have a date index, convert to dates, otherwise",
pandas/,9183,treat like a slice,
pandas/,9248,if a level is given it must be a MultiIndex level or,
pandas/,9249,equivalent to the axis name,
pandas/,9417,if a level is given it must be a MultiIndex level or,
pandas/,9418,equivalent to the axis name,
pandas/,9432,----------------------------------------------------------------------,
pandas/,9433,Numeric Methods,
pandas/,9745,explicit conversion of `percentiles` to list,
pandas/,9748,"get them all to be in [0, 1]",
pandas/,9751,median should always be included,
pandas/,9758,sort and check for duplicates,
pandas/,9788,"If the DataFrame is empty, set 'top' and 'freq' to None",
pandas/,9789,to maintain output shape consistency,
pandas/,9798,GH-30164,
pandas/,9822,"when some numerics are found, keep only numerics",
pandas/,9835,set a convenient order for rows,
pandas/,9973,TODO: Not sure if above is correct - need someone to confirm.,
pandas/,9979,needed for mypy,
pandas/,9984,Shift method is implemented differently when freq is not None,
pandas/,9985,We want to restore the original index,
pandas/,10317,----------------------------------------------------------------------,
pandas/,10318,Misc methods,
pandas/,53,noqa: F401,
pandas/,54,noqa: F401,
pandas/,280,this returns None for not-found dtypes.,
pandas/,294,We may have a mixture of frequencies.,
pandas/,295,"We choose to return an ndarray, rather than raising.",
pandas/,301,We may have a mixture of `closed` here.,
pandas/,302,"We choose to return an ndarray, rather than raising.",
pandas/,306,"datetime, datetime64",
pandas/,310,"Mixture of timezones, fall back to PandasArray",
pandas/,314,"timedelta, timedelta64",
pandas/,326,Pandas overrides NumPy for,
pandas/,327,1. datetime64[ns],
pandas/,328,2. timedelta64[ns],
pandas/,329,so that a DatetimeArray is returned.,
pandas/,404,set hardmask False if it was True,
pandas/,409,"extract ndarray or ExtensionArray, ensure we have no PandasArray",
pandas/,412,GH#846,
pandas/,416,possibility of nan -> garbage,
pandas/,425,we will try to copy be-definition here,
pandas/,429,it is already ensured above this is not a PandasArray,
pandas/,447,GH#16804,
pandas/,455,"scalar like, GH",
pandas/,457,pragma: no cover,
pandas/,462,figure out the dtype from the value (upcast if necessary),
pandas/,466,need to possibly convert the value here,
pandas/,474,the result that we want,
pandas/,478,a 1-element ndarray,
pandas/,491,This is to prevent mixed-type Series getting all casted to,
pandas/,492,"NumPy string type, e.g. NaN --> '-1#IND'.",
pandas/,494,GH#16605,
pandas/,495,If not empty convert the data to dtype,
pandas/,496,"GH#19853: If data is a scalar, subarr has already the result",
pandas/,530,perf shortcut as this is the most common case,
pandas/,536,GH#15832: Check if we are requesting a numeric dype and,
pandas/,537,that we can convert the data to the requested dtype.,
pandas/,542,Take care in creating object arrays (but iterators are not,
pandas/,543,supported):,
pandas/,552,in case of out of bound datetime64 -> always raise,
pandas/,556,"We *do* allow casting to categorical, since we know",
pandas/,557,that Categorical is the only array type for 'category'.,
pandas/,563,create an extension array from its dtype,
pandas/,66,---------------,
pandas/,67,dtype access,
pandas/,68,---------------,
pandas/,93,we check some simple dtypes first,
pandas/,101,we are actually coercing to uint64,
pandas/,102,until our algos support uint8 directly (see TODO),
pandas/,112,ignore the fact that we are casting to float,
pandas/,113,which discards complex parts,
pandas/,120,if we are trying to coerce to a dtype,
pandas/,121,and it is incompat this will fall through to here,
pandas/,124,datetimelike,
pandas/,142,Datetime,
pandas/,144,Avoid calling the DatetimeIndex constructor as it is 1D only,
pandas/,145,Note: this is reached by DataFrame.rank calls GH#27027,
pandas/,164,we are actually coercing to int64,
pandas/,165,until our algos support int* directly (not all do),
pandas/,170,"we have failed, return object",
pandas/,194,we only support object dtypes bool Index,
pandas/,283,it's cheaper to use a String Hash Table than Object; we infer,
pandas/,284,including nulls because that is the only difference between,
pandas/,285,StringHashTable and ObjectHashtable,
pandas/,291,---------------,
pandas/,292,top-level algos,
pandas/,293,---------------,
pandas/,377,Dispatch to extension dtype's unique.,
pandas/,422,TODO(extension),
pandas/,423,handle categoricals,
pandas/,424,type: ignore,
pandas/,429,faster for larger cases to use np.in1d,
pandas/,432,GH16012,
pandas/,433,Ensure np.in1d doesn't get object types or it *may* throw an exception,
pandas/,607,Implementation notes: This method is responsible for 3 things,
pandas/,608,"1.) coercing data to array-like (ndarray, Index, extension array)",
pandas/,609,2.) factorizing codes and uniques,
pandas/,610,3.) Maybe boxing the uniques in an Index,
pandas/,611,,
pandas/,612,Step 2 is dispatched to extension types (like Categorical). They are,
pandas/,613,"responsible only for factorization. All data coercion, sorting and boxing",
pandas/,614,should happen here.,
pandas/,642,return original tenor,
pandas/,696,"count, remove nulls (from the index), and but the bins",
pandas/,702,if we are dropna and we have NO values,
pandas/,706,normalizing is by len of all (regardless of dropna),
pandas/,713,"handle Categorical and sparse,",
pandas/,750,"datetime, timedelta, or period",
pandas/,759,ndarray like,
pandas/,761,TODO: handle uint8,
pandas/,823,categorical is a fast-path,
pandas/,931,"For performance reasons, we broadcast 'b' to the new array 'b2'",
pandas/,932,so that it has the same size as 'arr'.,
pandas/,935,We do the same broadcasting for b_mask as well.,
pandas/,940,"For elements that are NaN, regardless of their value, we should",
pandas/,941,ignore whether they overflow or not when doing the checked add.,
pandas/,952,gh-14324: For each element in 'arr' and its corresponding element,
pandas/,953,"in 'b2', we check the sign of the element in 'b2'. If it is positive,",
pandas/,954,we then check whether its sum with the element in 'arr' exceeds,
pandas/,955,"np.iinfo(np.int64).max. If so, we have an overflow error. If it",
pandas/,956,"it is negative, we then check whether its sum with the element in",
pandas/,957,"'arr' exceeds np.iinfo(np.int64).min. If so, we have an overflow",
pandas/,958,error as well.,
pandas/,1063,---------------,
pandas/,1064,select n,
pandas/,1065,---------------,
pandas/,1121,slow method,
pandas/,1128,fast method,
pandas/,1133,GH 21426: ensure reverse ordering at boundaries,
pandas/,1137,GH 26154: ensure False is smaller than True,
pandas/,1154,reverse indices,
pandas/,1209,Below we save and reset the index in case index contains duplicates,
pandas/,1216,For each column we apply method to cur_frame[column].,
pandas/,1217,If it's the last column or if we have the number of,
pandas/,1218,results desired we are done.,
pandas/,1219,Otherwise there are duplicates of the largest/smallest,
pandas/,1220,value and we need to look at the rest of the columns,
pandas/,1221,to determine which of the rows with the largest/smallest,
pandas/,1222,value in the column to keep.,
pandas/,1233,Now find all values which are equal to,
pandas/,1234,the (nsmallest: largest)/(nlarrgest: smallest),
pandas/,1235,from our series.,
pandas/,1238,Some of these values are among the top-n,
pandas/,1239,some aren't.,
pandas/,1242,These values are definitely among the top-n,
pandas/,1246,Go on and separate the unsafe_values on the remaining,
pandas/,1247,columns.,
pandas/,1253,Restore the index on frame,
pandas/,1256,"If there is only one column, the frame is already sorted.",
pandas/,1265,----,
pandas/,1266,take,
pandas/,1267,----,
pandas/,1292,"this is not ideal, performance-wise, but it's better than raising",
pandas/,1293,an exception (best to optimize in Cython to avoid getting here),
pandas/,1549,"Pandas style, -1 means NA",
pandas/,1555,NumPy style,
pandas/,1611,check for promotion based on types only (do this first because,
pandas/,1612,it's faster than computing a mask),
pandas/,1615,check if promotion is actually required based on indexer,
pandas/,1623,"if not, then depromote, set fill_value to dummy",
pandas/,1624,(it won't be used but we don't want the cython code,
pandas/,1625,to crash when trying to cast it to dtype),
pandas/,1639,"at this point, it's guaranteed that dtype can hold both the arr values",
pandas/,1640,and the fill_value,
pandas/,1646,minor tweak that can make an order-of-magnitude difference,
pandas/,1647,for dataframes initialized directly from 2-d ndarrays,
pandas/,1648,(s.t. df.values is c-contiguous and df._mgr.blocks[0] is its,
pandas/,1649,f-contiguous transpose),
pandas/,1671,"This is only called from one place in DataFrame._reindex_multi,",
pandas/,1672,so we know indexer is well-behaved.,
pandas/,1684,check for promotion based on types only (do this first because,
pandas/,1685,it's faster than computing a mask),
pandas/,1688,check if promotion is actually required based on indexer,
pandas/,1696,"if not, then depromote, set fill_value to dummy",
pandas/,1697,(it won't be used but we don't want the cython code,
pandas/,1698,to crash when trying to cast it to dtype),
pandas/,1701,"at this point, it's guaranteed that dtype can hold both the arr values",
pandas/,1702,and the fill_value,
pandas/,1722,------------,
pandas/,1723,searchsorted,
pandas/,1724,------------,
pandas/,1779,"if `arr` and `value` have different dtypes, `arr` would be",
pandas/,1780,"recast by numpy, causing a slow search.",
pandas/,1781,"Before searching below, we therefore try to give `value` the",
pandas/,1782,"same dtype as `arr`, while guarding against integer overflows.",
pandas/,1786,"value within bounds, so no overflow, so can convert value dtype",
pandas/,1787,to dtype of arr,
pandas/,1799,E.g. if `arr` is an array with dtype='datetime64[ns]',
pandas/,1800,"and `value` is a pd.Timestamp, we may need to convert value",
pandas/,1810,----,
pandas/,1811,diff,
pandas/,1812,----,
pandas/,1848,PandasArray cannot necessarily hold shifted versions of itself.,
pandas/,1888,TODO: can diff_2d dtype specialization troubles be fixed by defining,
pandas/,1889,out_arr inside diff_2d?,
pandas/,1892,"To keep mypy happy, _res_indexer is a list while res_indexer is",
pandas/,1893,"a tuple, ditto for lag_indexer.",
pandas/,1902,need to make sure that we account for na for datelike/timedelta,
pandas/,1903,we don't actually want to subtract these i8 numbers,
pandas/,1929,--------------------------------------------------------------------,
pandas/,1930,Helper functions,
pandas/,1932,Note: safe_sort is in algorithms.py instead of sorting.py because it is,
pandas/,1933,"low-dependency, is used in this module, and used private methods from",
pandas/,1934,this module.,
pandas/,1990,don't convert to string types,
pandas/,1995,"order ints before strings, safe in py3",
pandas/,2006,unorderable in py3 if mixed str/int,
pandas/,2013,try this anyway,
pandas/,2016,codes:,
pandas/,2032,mixed types,
pandas/,2039,"take_1d is faster, but only works for na_sentinels of -1",
pandas/,2049,"Out of bound indices will be masked with `na_sentinel` next, so we",
pandas/,2050,may deal with them here without performance loss using `mode='wrap'`,
pandas/,61,to the groupby descriptor,
pandas/,148,upsampling and PeriodIndex resampling do not work,
pandas/,149,"with selection, this state used to catch and raise an error",
pandas/,337,try the key selection,
pandas/,357,Check if the function is reducing or not.,
pandas/,362,we have a non-reducing function; try to evaluate,
pandas/,366,raised in _aggregate_named,
pandas/,369,raised in libgroupby validation,
pandas/,372,raised in concat call,
pandas/,373,In tests this is reached via either,
pandas/,374,_apply_to_column_groupbys (ohlc) or DataFrameGroupBy.nunique,
pandas/,379,we have a non-reducing function,
pandas/,380,try to evaluate,
pandas/,913,downsample methods,
pandas/,924,downsample methods,
pandas/,935,series only methods,
pandas/,957,initialize our GroupByMixin object with,
pandas/,958,the resampler attributes,
pandas/,998,this is how we are actually creating the bins,
pandas/,1018,reset to the new freq,
pandas/,1023,do we have a regular frequency,
pandas/,1028,let's do an asfreq,
pandas/,1031,we are downsampling,
pandas/,1032,we want to call the actual grouper method here,
pandas/,1081,"if we have the same frequency as our axis, then we are equal sampling",
pandas/,1096,we may have a different kind that we were asked originally,
pandas/,1097,convert if needed,
pandas/,1127,"see GH 14008, GH 12871",
pandas/,1136,Cannot apply loffset/timedelta to PeriodIndex -> convert to,
pandas/,1137,timestamps,
pandas/,1140,convert to timestamp,
pandas/,1155,we may need to actually resample as if we are timestamps,
pandas/,1163,Downsampling,
pandas/,1167,GH #13083,
pandas/,1168,"upsampling to subperiods is handled as an asfreq, which works",
pandas/,1169,for pure aggregating/reducing methods,
pandas/,1170,"OHLC reduces along the time dimension, but creates multiple",
pandas/,1171,values for each period -> handle by _groupby_and_aggregate(),
pandas/,1198,we may need to actually resample as if we are timestamps,
pandas/,1207,Start vs. end of period,
pandas/,1210,Get the fill indexer,
pandas/,1272,.resample uses 'on' similar to how .groupby uses 'key',
pandas/,1318,Check for correctness of the keyword arguments which would,
pandas/,1319,otherwise silently use the default if misspelled,
pandas/,1358,always sort time groupers,
pandas/,1399,create the resampler and return our binner,
pandas/,1418,GH #12037,
pandas/,1419,use first/last directly instead of call replace() on them,
pandas/,1420,because replace() will swallow the nanosecond part,
pandas/,1421,thus last bin maybe slightly before the end if the end contains,
pandas/,1422,nanosecond part and lead to `Values falls after last bin` error,
pandas/,1423,"GH 25758: If DST lands at midnight (e.g. 'America/Havana'), user feedback",
pandas/,1424,has noted that ambiguous=True provides the most sensible result,
pandas/,1438,"general version, knowing nothing about relative frequencies",
pandas/,1454,if we end up with more labels than bins,
pandas/,1455,adjust the labels,
pandas/,1456,GH4076,
pandas/,1463,"Some hacks for > daily data, see #1471, #1458, #1483",
pandas/,1467,"GH 21459, GH 9119: Adjust the bins relative to the wall time",
pandas/,1474,intraday values on last day,
pandas/,1501,Addresses GH #10530,
pandas/,1538,NaT handling as in pandas._lib.lib.generate_bins_dt64(),
pandas/,1544,"if index contains no valid (non-NaT) values, return empty index",
pandas/,1555,GH 23882,
pandas/,1557,get base adjusted bin edge labels,
pandas/,1562,Get offset for bin edge (not label edge) adjustment,
pandas/,1573,"when upsampling to subperiods, we need to generate enough bins",
pandas/,1578,adjust bin edge indexes to account for base,
pandas/,1581,Wrap in PeriodArray for PeriodArray.searchsorted,
pandas/,1586,NaT handling as in pandas._lib.lib.generate_bins_dt64(),
pandas/,1587,shift bins by the number of NaT,
pandas/,1638,"_adjust_dates_anchored assumes 'D' means 24H, but first/last",
pandas/,1639,"might contain a DST transition (23H, 24H, or 25H).",
pandas/,1640,"So ""pretend"" the dates are naive when adjusting the endpoints",
pandas/,1692,GH 23882,
pandas/,1708,First and last offsets should be calculated from the start day to fix an,
pandas/,1709,error cause by resampling across multiple days when a one day period is,
pandas/,1710,not a multiple of the frequency.,
pandas/,1711,,
pandas/,1712,See https://github.com/pandas-dev/pandas/issues/8683,
pandas/,1714,"GH 10117 & GH 19375. If first and last contain timezone information,",
pandas/,1715,Perform the calculation in UTC in order to avoid localizing on an,
pandas/,1716,Ambiguous or Nonexistent time.,
pandas/,1733,roll back,
pandas/,1739,roll forward,
pandas/,1742,already the end of the road,
pandas/,1744,closed == 'left',
pandas/,1748,start of the road,
pandas/,1752,roll forward,
pandas/,1807,"This should never be reached, always checked by the caller",
pandas/,1,flake8: noqa,
pandas/,56,DataFrame needs to be imported after NamedAgg to avoid a circular import,
pandas/,57,isort:skip,
pandas/,33,noqa:F401,
pandas/,35,"""null slice""",
pandas/,39,the public IndexSlicerMaker,
pandas/,576,we need to return a copy of ourselves,
pandas/,600,TypeError e.g. passed a bool,
pandas/,616,invalid indexer type vs 'other' indexing errors,
pandas/,634,column only exists in 2-dimensional DataFrame,
pandas/,639,key may be a tuple if we are .loc,
pandas/,640,"in that case, set key to the column part of key",
pandas/,745,"We should never have retval.ndim < self.ndim, as that should",
pandas/,746,be handled by the _getitem_lowerdim call above.,
pandas/,753,we can directly get the axis result since the axis is specified,
pandas/,758,we may have a nested tuples indexer here,
pandas/,762,we maybe be using a tuple to represent multiple dimensions here,
pandas/,764,...but iloc should handle the tuple as simple integer-location,
pandas/,765,instead of checking it as multiindex representation (GH 13797),
pandas/,776,We don't need to check for tuples here because those are,
pandas/,777,caught by the _is_nested_tuple_indexer check above.,
pandas/,780,"We should never have a scalar section here, because",
pandas/,781,_getitem_lowerdim is only called after a check for,
pandas/,782,"is_scalar_access, which that would be.",
pandas/,784,we're in the middle of slicing through a MultiIndex,
pandas/,785,revise the key wrt to `section` by inserting an _NS,
pandas/,789,Note: the section.ndim == self.ndim check above,
pandas/,790,"rules out having DataFrame here, so we dont need to worry",
pandas/,791,about transposing.,
pandas/,797,"Slices should return views, but calling iloc/loc with a null",
pandas/,798,slice returns a new object.,
pandas/,801,This is an elided recursive call to iloc/loc,
pandas/,807,we have a nested tuple so have at least 1 multi-index level,
pandas/,808,we should be able to match up the dimensionality here,
pandas/,810,"we have too many indexers for our dim, but have at least 1",
pandas/,811,"multi-index dimension, try to see if we have something like",
pandas/,812,a tuple passed to a series with a multi-index,
pandas/,815,"This should never be reached, but lets be explicit about it",
pandas/,821,this is a series with a multi-index specified a tuple of,
pandas/,822,selectors,
pandas/,826,handle the multi-axis by taking sections and reducing,
pandas/,827,this is iterative,
pandas/,840,"if we have a scalar, we are done",
pandas/,844,has the dim of the obj changed?,
pandas/,845,GH 7199,
pandas/,861,AttributeError for IntervalTree get_value,
pandas/,865,we by definition only have the 0th axis,
pandas/,884,caller is responsible for ensuring non-None axis,
pandas/,900,-------------------------------------------------------------------,
pandas/,901,Key Checks,
pandas/,906,valid for a collection of labels (we check their presence later),
pandas/,907,slice of labels (where start-end in labels),
pandas/,908,slice of integers (only if in the labels),
pandas/,909,boolean,
pandas/,921,this is a shortcut accessor to both .loc and .iloc,
pandas/,922,that provide the equivalent access of .at and .iat,
pandas/,923,a) avoid getting things via sections and (to minimize dtype changes),
pandas/,924,b) provide a performant path,
pandas/,937,"partial string indexing, df.loc['2000', 'A']",
pandas/,938,should not be considered scalar,
pandas/,946,-------------------------------------------------------------------,
pandas/,947,MultiIndex Handling,
pandas/,970,just too complicated,
pandas/,992,GH 836,
pandas/,999,-------------------------------------------------------------------,
pandas/,1022,"we assume that not com.is_bool_indexer(key), as that is",
pandas/,1023,handled before we get here.,
pandas/,1026,A collection of keys,
pandas/,1038,"no multi-index, so validate all of the indexers",
pandas/,1041,ugly hack for GH #836,
pandas/,1048,GH#5667 this will fail if the label is not present in the axis.,
pandas/,1052,"we have an axis0 multi-index, handle or raise",
pandas/,1055,fast path for series or for tup devoid of slices,
pandas/,1058,slices are unhashable,
pandas/,1061,raise KeyError if number of indexers match,
pandas/,1062,else IndexingError will be raised,
pandas/,1083,convert various list-like indexers,
pandas/,1084,to a list of keys,
pandas/,1085,we will use the *values* of the object,
pandas/,1086,and NOT the index if its a PandasObject,
pandas/,1090,"Series, or 0,1 ndim ndarray",
pandas/,1091,GH 14730,
pandas/,1094,GH 15438,
pandas/,1114,an iterable multi-selection,
pandas/,1122,nested tuple slicing,
pandas/,1129,fall thru to straight lookup,
pandas/,1137,caller is responsible for ensuring non-None axis,
pandas/,1150,DatetimeIndex overrides Index.slice_indexer and may,
pandas/,1151,return a DatetimeIndex instead of a slice object.,
pandas/,1174,see if we are positional in nature,
pandas/,1179,Otherwise get_loc will raise InvalidIndexError,
pandas/,1181,if we are a label return me,
pandas/,1195,a positional,
pandas/,1198,if we are setting and its not a valid location,
pandas/,1199,its an insert which fails by definition,
pandas/,1201,always valid,
pandas/,1214,"When setting, missing keys are not allowed, even with .loc:",
pandas/,1220,allow a not found key only if we are a setter,
pandas/,1255,Have the index compute an indexer or return None,
pandas/,1256,if it cannot handle:,
pandas/,1258,We only act on all found values:,
pandas/,1306,Count missing values:,
pandas/,1314,"We (temporarily) allow for some missing keys with .loc, except in",
pandas/,1315,"some cases (e.g. setting) in which ""raise_missing"" will be False",
pandas/,1320,we skip the warning on Categorical,
pandas/,1321,as this check is actually done (check for,
pandas/,1322,"non-missing values), but a bit later in the",
pandas/,1323,"code, so we want to avoid warning & then",
pandas/,1324,just raising,
pandas/,1329,noqa:E501,
pandas/,1341,-------------------------------------------------------------------,
pandas/,1342,Key Checks,
pandas/,1364,a tuple should already have been caught by this point,
pandas/,1365,so don't treat a tuple as a valid indexer,
pandas/,1371,check that the key has a numeric dtype,
pandas/,1375,check that the key does not exceed the maximum size of the index,
pandas/,1397,should check the stop slice?,
pandas/,1400,should check the elements?,
pandas/,1416,this is a shortcut accessor to both .loc and .iloc,
pandas/,1417,that provide the equivalent access of .at and .iat,
pandas/,1418,a) avoid getting things via sections and (to minimize dtype changes),
pandas/,1419,b) provide a performant path,
pandas/,1449,-------------------------------------------------------------------,
pandas/,1481,re-raise with different error message,
pandas/,1495,a list of integers,
pandas/,1499,a single integer,
pandas/,1505,validate the location,
pandas/,1511,caller is responsible for ensuring non-None axis,
pandas/,1528,GH#32257 Fall through to let numnpy do validation,
pandas/,1531,-------------------------------------------------------------------,
pandas/,1546,also has the side effect of consolidating in-place,
pandas/,1551,maybe partial set,
pandas/,1554,"if there is only one block/type, still have to take split path",
pandas/,1555,unless the block is one-dimensional or it can hold the value,
pandas/,1558,"in case of dict, keys are indices",
pandas/,1562,if we have any multi-indexes that have non-trivial slices,
pandas/,1563,"(not null slices) then we must take the split path, xref",
pandas/,1564,"GH 10360, GH 27841",
pandas/,1578,reindex the axis to the new value,
pandas/,1579,and set inplace,
pandas/,1582,"if this is the items axes, then take the main missing",
pandas/,1583,path first,
pandas/,1584,this correctly sets the dtype and avoids cache issues,
pandas/,1585,essentially this separates out the block that is needed,
pandas/,1586,to possibly be modified,
pandas/,1589,"add the new item, and set the value",
pandas/,1590,must have all defined axes if we have a scalar,
pandas/,1591,or a list-like on the non-info axes if we have a,
pandas/,1592,list-like,
pandas/,1605,add a new item with the dtype setup,
pandas/,1615,reindex the axis,
pandas/,1616,make sure to clear the cache because we are,
pandas/,1617,just replacing the block manager here,
pandas/,1618,so the object is the same,
pandas/,1639,set,
pandas/,1642,align and set the values,
pandas/,1644,Above we only set take_split_path to True for 2D cases,
pandas/,1659,Ensure we have something we can iterate over,
pandas/,1667,lplane_indexer gives the expected length of obj[indexer[0]],
pandas/,1670,We can operate on a single column,
pandas/,1672,require that we are setting the right number of values that,
pandas/,1673,we are indexing,
pandas/,1675,Exclude zero-len for e.g. boolean masking that is all-false,
pandas/,1685,positional setting on column loc,
pandas/,1688,perform the equivalent of a setitem on the info axis,
pandas/,1689,as we have a null slice or a slice with full bounds,
pandas/,1690,which means essentially reassign to the columns of a,
pandas/,1691,multi-dim object,
pandas/,1692,"GH6149 (null slice), GH10408 (full bounds)",
pandas/,1699,"set the item, possibly having a dtype change",
pandas/,1705,reset the sliced object if unique,
pandas/,1708,"we need an iterable, with a ndim of at least 1",
pandas/,1709,eg. don't pass through np.array(0),
pandas/,1712,we have an equal len Frame,
pandas/,1716,TODO: we are implicitly assuming value.columns is unique,
pandas/,1730,we have an equal len ndarray/convertible to our labels,
pandas/,1731,"hasattr first, to avoid coercing to ndarray without reason.",
pandas/,1732,But we may be relying on the ndarray coercion to check ndim.,
pandas/,1733,Why not just convert to an ndarray earlier on if needed?,
pandas/,1736,note that this coerces the dtype if we are mixed,
pandas/,1737,GH 7551,
pandas/,1746,"setting with a list, re-coerces",
pandas/,1754,we have an equal len list/ndarray,
pandas/,1755,We only get here with len(labels) == len(ilocs) == 1,
pandas/,1759,We get here in one case via .loc with a all-False mask,
pandas/,1763,per-label values,
pandas/,1774,scalar value,
pandas/,1781,if we are setting on the info axis ONLY,
pandas/,1782,set using those methods to avoid block-splitting,
pandas/,1783,logic here,
pandas/,1800,TODO(EA): ExtensionBlock.setitem this causes issues with,
pandas/,1801,setting for extensionarrays that store dicts. Need to decide,
pandas/,1802,if it's worth supporting that.,
pandas/,1808,check for chained assignment,
pandas/,1811,actually do the set,
pandas/,1822,reindex the axis to the new value,
pandas/,1823,and set inplace,
pandas/,1828,"we have a coerced indexer, e.g. a float",
pandas/,1829,"that matches in an Int64Index, so",
pandas/,1830,"we will not create a duplicate index, rather",
pandas/,1831,index to that element,
pandas/,1832,e.g. 0.0 -> 0,
pandas/,1833,GH#12246,
pandas/,1839,this preserves dtype of the value,
pandas/,1842,GH#22717 handle casting compatibility that np.concatenate,
pandas/,1843,does incorrectly,
pandas/,1853,no columns and scalar,
pandas/,1857,append a Series,
pandas/,1862,a list-list,
pandas/,1864,must have conforming columns,
pandas/,1895,flatten np.ndarray indexers,
pandas/,1907,are we a single alignable value on a non-primary,
pandas/,1908,"dim (e.g. panel: 1,2, or frame: 0) ?",
pandas/,1909,hence need to align to a single axis dimension,
pandas/,1910,rather that find all valid dims,
pandas/,1912,frame,
pandas/,1916,"we have a frame, with multiple indexers on both axes; and a",
pandas/,1917,"series, so need to broadcast (see GH5206)",
pandas/,1921,single indexer,
pandas/,1931,multiple aligners (or null slices),
pandas/,1945,2 dims,
pandas/,1948,reindex along index,
pandas/,1999,we have a multi-index and are trying to align,
pandas/,2000,"with a particular, level GH3738",
pandas/,2028,we could have a convertible item here (e.g. Timestamp),
pandas/,2041,scalar callable may return tuple,
pandas/,2061,allow arbitrary setting,
pandas/,2069,FIXME: is_scalar check is a kludge,
pandas/,2072,"Like Index.get_value, but we do not allow positional fallback",
pandas/,2122,we are an actual column,
pandas/,2126,We might have a datetimelike string that we can translate to a,
pandas/,2127,slice here via partial string indexing,
pandas/,2175,"key might be object-dtype bool, check_array_indexer needs bool array",
pandas/,2191,a missing key (but not a tuple indexer),
pandas/,2233,check for a compatible nested tuple and multiindexes among the axes,
pandas/,2250,select a label or row,
pandas/,2274,"default to column slice, like DataFrame",
pandas/,2275,"['A', 'B'] -> IndexSlices[:, ['A', 'B']]",
pandas/,2288,"true when slice does *not* reduce, False when part is a tuple,",
pandas/,2289,i.e. MultiIndex slice,
pandas/,2296,"a 1-d slice, like df.loc[1]",
pandas/,2299,"slice(a, b, c)",
pandas/,2300,to tuplize later,
pandas/,64,Should be overwritten by base classes,
pandas/,87,"no memory_usage attribute, so fall back to object's 'sizeof'",
pandas/,109,prevent adding any attribute via s.xxx.new_attribute = ...,
pandas/,111,_cache is used by a decorator,
pandas/,112,"We need to check both 1.) cls.__dict__ and 2.) getattr(self, key)",
pandas/,113,because,
pandas/,114,1.) getattr is false for attributes that raise errors,
pandas/,115,2.) cls.__dict__ doesn't traverse into base classes,
pandas/,266,people may try to aggregate on a non-callable attribute,
pandas/,267,but don't let them think they can pass args to it,
pandas/,275,in particular exclude Window,
pandas/,311,aggregate based on the passed dict,
pandas/,312,pragma: no cover,
pandas/,317,if we have a dict of any non-scalars,
pandas/,318,"eg. {'A' : ['mean']}, normalize all to",
pandas/,319,be list-likes,
pandas/,328,the keys must be in the columns,
pandas/,329,"for ndim=2, or renamers for ndim=1",
pandas/,331,"ok for now, but deprecated",
pandas/,332,{'A': { 'ra': 'mean' }},
pandas/,333,{'A': { 'ra': ['mean'] }},
pandas/,334,{'ra': ['mean']},
pandas/,336,not ok,
pandas/,337,{'ra' : { 'A' : 'mean' }},
pandas/,348,deprecation of renaming keys,
pandas/,349,GH 15931,
pandas/,387,set the final keys,
pandas/,395,"we are a Series like object,",
pandas/,396,but may have multiple aggregations,
pandas/,403,we are selecting the same set as we are aggregating,
pandas/,408,"we are a DataFrame, with possibly multiple aggregations",
pandas/,413,no selection,
pandas/,420,we are aggregating expecting all 1d-returns,
pandas/,421,but we have 2d,
pandas/,424,combine results,
pandas/,427,return a boolean if we have *any* nested series,
pandas/,431,return a boolean if we have *any* nested series,
pandas/,438,we have a dict of DataFrames,
pandas/,439,return a MI DataFrame,
pandas/,445,we have a dict of Series,
pandas/,446,return a MI Series,
pandas/,450,we want to give a nice error here if,
pandas/,451,"we have non-same sized objects, so",
pandas/,452,we don't automatically broadcast,
pandas/,462,fall thru,
pandas/,469,we have a dict of scalars,
pandas/,474,"we require a list, but not an 'str'",
pandas/,483,caller can react,
pandas/,500,degenerate case,
pandas/,512,make sure we find a good name,
pandas/,516,multiples,
pandas/,525,cannot aggregate,
pandas/,527,raised directly in _aggregate_named,
pandas/,530,raised directly in _aggregate_multiple_funcs,
pandas/,538,if we are empty,
pandas/,546,"we are concatting non-NDFrame objects,",
pandas/,547,e.g. a list of scalars,
pandas/,592,ndarray compatibility,
pandas/,595,"tolist is not deprecated, just suppressed in the __dir__",
pandas/,600,must be defined here as a property for mypy,
pandas/,629,We need this defined here for mypy,
pandas/,656,"numpy returns ints instead of datetime64/timedelta64 objects,",
pandas/,657,which we need to wrap in Timestamp/Timedelta/Period regardless.,
pandas/,849,TODO(GH-24345): Avoid potential double copy,
pandas/,1028,check for ndarray instead of dtype to catch DTA/TDA,
pandas/,1046,We are explicitly making element iterators.,
pandas/,1048,Check type instead of dtype to catch DTA/TDA,
pandas/,1100,we can fastpath dict/Series to an efficient map,
pandas/,1101,as we know that we are not going to have to yield,
pandas/,1102,python types,
pandas/,1105,"If a dictionary subclass defines a default value method,",
pandas/,1106,convert mapper to a lookup function (GH #15999).,
pandas/,1110,Dictionary does not have a default. Thus it's safe to,
pandas/,1111,convert to an Series for efficiency.,
pandas/,1112,we specify the keys here to handle the,
pandas/,1113,possibility that they are tuples,
pandas/,1115,The return value of mapping with an empty mapper is,
pandas/,1116,"expected to be pd.Series(np.nan, ...). As np.nan is",
pandas/,1117,of dtype float64 the return value of this method should,
pandas/,1118,be float64 as well,
pandas/,1124,Since values were input this means we came from either,
pandas/,1125,a dict or a series and mapper should be an index,
pandas/,1127,use the built in categorical series mapper which saves,
pandas/,1128,time by mapping the categories instead of all values,
pandas/,1138,we must convert to python types,
pandas/,1140,GH#23179 some EAs do not have `map`,
pandas/,1162,mapper is a function,
pandas/,1265,"GH#31182 Series._values returns EA, unpack for backward-compat",
pandas/,1343,mypy complains if we alias directly,
pandas/,66,"Normalize the aggregation functions as Mapping[column, List[func]],",
pandas/,67,"process normally, then fixup the names.",
pandas/,68,"TODO: aggspec type: typing.Dict[str, List[AggScalar]]",
pandas/,69,May be hitting https://github.com/python/mypy/issues/5958,
pandas/,70,saying it doesn't have an attribute __name__,
pandas/,79,uniquify aggfunc name if duplicated in order list,
pandas/,82,"GH 25719, due to aggspec will change the order of assigned columns in aggregation",
pandas/,83,uniquified_aggspec will store uniquified order list and will compare it with order,
pandas/,84,based on index,
pandas/,92,get the new indice of columns by comparison,
pandas/,117,"TODO: Can't use, because mypy doesn't like us setting __name__",
pandas/,118,"error: ""partial[Any]"" has no attribute ""__name__""",
pandas/,119,the type is:,
pandas/,120,"typing.Sequence[Callable[..., ScalarResult]]",
pandas/,121,"-> typing.Sequence[Callable[..., ScalarResult]]:",
pandas/,143,don't mangle for .agg([lambda x: .]),
pandas/,185,dict or OrderdDict,
pandas/,152,---------------------------------------------------------------------,
pandas/,153,Docstring templates,
pandas/,330,-----------------------------------------------------------------------,
pandas/,331,DataFrame class,
pandas/,427,----------------------------------------------------------------------,
pandas/,428,Constructors,
pandas/,448,GH#33357 fastpath,
pandas/,460,masked recarray,
pandas/,464,a masked array,
pandas/,469,set hardmask False if it was True,
pandas/,487,"For data is list-like, or Iterable (will consume into list)",
pandas/,500,set the index,
pandas/,536,----------------------------------------------------------------------,
pandas/,619,TODO(EA2D) special case would be unnecessary with 2D EAs,
pandas/,623,----------------------------------------------------------------------,
pandas/,624,Rendering Methods,
pandas/,648,exceed max columns,
pandas/,654,used by repr_html under IPython notebook or scripts ignore terminal,
pandas/,655,dims,
pandas/,660,check at least the column row for excessive width,
pandas/,665,"when auto-detecting, so width=None and not in ipython front end",
pandas/,666,check whether repr fits horizontal by actually checking,
pandas/,667,the width of the rendered repr,
pandas/,670,only care about the stuff we'll actually print out,
pandas/,671,and to_string on entire frame may be expensive,
pandas/,674,unlimited rows,
pandas/,675,"min of two, where one may be None",
pandas/,734,"need to escape the <class>, should be the first line.",
pandas/,854,----------------------------------------------------------------------,
pandas/,1056,use integer indexing because of possible duplicate column names,
pandas/,1059,Python versions before 3.7 support at most 255 arguments to constructors,
pandas/,1065,fallback to regular tuples,
pandas/,1181,pragma: no cover,
pandas/,1196,----------------------------------------------------------------------,
pandas/,1197,IO methods (to / from other formats),
pandas/,1267,TODO speed up Series case,
pandas/,1275,pragma: no cover,
pandas/,1428,GH16122,
pandas/,1432,GH32515,
pandas/,1653,Make a copy of the input columns so we can modify it,
pandas/,1728,"raised by get_loc, see GH#29258",
pandas/,1835,array of tuples to numpy cols. copy copy copy,
pandas/,1867,"When the names and arrays are collected, we",
pandas/,1868,"first collect those in the DataFrame's index,",
pandas/,1869,followed by those in its columns.,
pandas/,1870,,
pandas/,1871,"Thus, the total length of the array is:",
pandas/,1872,len(index_names) + len(DataFrame.columns).,
pandas/,1873,,
pandas/,1874,This check allows us to see whether we are,
pandas/,1875,handling a name / array in the index or column.,
pandas/,1884,"We have a dictionary, so we get the data type",
pandas/,1885,associated with the index or column (which can,
pandas/,1886,be denoted by its name in the DataFrame or its,
pandas/,1887,position in DataFrame's array of indices or,
pandas/,1888,"columns, whichever is applicable.",
pandas/,1897,"If no mapping can be found, use the array's",
pandas/,1898,dtype attribute for formatting.,
pandas/,1899,,
pandas/,1900,A valid dtype must either be a type or,
pandas/,1901,string naming a type.,
pandas/,2057,mypy: Name 'statawriter' already defined (possibly by an import),
pandas/,2058,type: ignore,
pandas/,2059,versions 118 and 119,
pandas/,2060,mypy: Name 'statawriter' already defined (possibly by an import),
pandas/,2061,type:ignore,
pandas/,2065,strl conversion is only supported >= 117,
pandas/,2068,Specifying the version is only supported for UTF8 (118 or 119),
pandas/,2071,"mypy: Too many arguments for ""StataWriter""",
pandas/,2072,type: ignore,
pandas/,2131,Help mypy.,
pandas/,2319,TODO: a generic formatter wld b in DataFrameFormatter,
pandas/,2328,----------------------------------------------------------------------,
pandas/,2527,construct the args,
pandas/,2531,We have EAs with the same dtype. We can preserve that dtype in transpose.,
pandas/,2555,----------------------------------------------------------------------,
pandas/,2556,Indexing Methods,
pandas/,2569,irow,
pandas/,2573,"if we are a copy, mark as such",
pandas/,2584,icol,
pandas/,2591,"this is a cached value, mark it so",
pandas/,2616,shortcut if the key is in columns,
pandas/,2622,Do we have a slicer (on rows)?,
pandas/,2625,either we have a slice or we have a string that can be converted,
pandas/,2626,to a slice for partial-string date indexing,
pandas/,2629,Do we have a (boolean) DataFrame?,
pandas/,2633,Do we have a (boolean) 1d indexer?,
pandas/,2637,"We are left with two options: a single key, and a collection of keys,",
pandas/,2638,We interpret tuples as collections only for non-MultiIndex,
pandas/,2652,take() does not accept boolean indexers,
pandas/,2659,What does looking for a single key in a non-unique index return?,
pandas/,2660,"The behavior is inconsistent. It returns a Series, except when",
pandas/,2661,"- the key itself is repeated (test on data.shape, #9519), or",
pandas/,2662,"- we have a MultiIndex on columns (test on self.columns, #21309)",
pandas/,2669,also raises Exception if object array with NA values,
pandas/,2670,warning here just in case -- previously __setitem__ was,
pandas/,2671,reindexing but __getitem__ was not; it seems more reasonable to,
pandas/,2672,go with the __setitem__ behavior since that is more consistent,
pandas/,2673,with all other indexing behavior,
pandas/,2685,check_bool_indexer will throw exception if Series key cannot,
pandas/,2686,be reindexed to match DataFrame rows,
pandas/,2692,self.columns is a MultiIndex,
pandas/,2707,"If there is only one column being returned, and its name is",
pandas/,2708,"either an empty string, or a tuple with an empty string as its",
pandas/,2709,"first element, then treat the empty string as a placeholder",
pandas/,2710,and return the column as if the user had provided that empty,
pandas/,2711,"string in the key. If the result is a Series, exclude the",
pandas/,2712,implied empty string from its name.,
pandas/,2754,GH 20629,
pandas/,2756,partial indexing forbidden,
pandas/,2759,we cannot handle direct indexing,
pandas/,2760,use positional,
pandas/,2768,see if we can slice the rows,
pandas/,2771,either we have a slice or we have a string that can be converted,
pandas/,2772,to a slice for partial-string date indexing,
pandas/,2780,set column,
pandas/,2784,NB: we can't just use self.loc[key] = value because that,
pandas/,2785,operates on labels and we need to operate positional for,
pandas/,2786,"backwards-compat, xref GH#31469",
pandas/,2791,also raises Exception if object array with NA values,
pandas/,2816,"support boolean setting with DataFrame input, e.g.",
pandas/,2817,df[df > df2] = 0,
pandas/,2835,"technically _sanitize_column expects a label, not a position,",
pandas/,2836,but the behavior is the same as long as we pass broadcast=False,
pandas/,2840,check if we are modifying a copy,
pandas/,2841,try to set first as we want an invalid,
pandas/,2842,value exception to occur first,
pandas/,2860,check if we are modifying a copy,
pandas/,2861,try to set first as we want an invalid,
pandas/,2862,value exception to occur first,
pandas/,2889,Note: trying to use series._set_value breaks tests in,
pandas/,2890,tests.frame.indexing.test_indexing and tests.indexing.test_partial,
pandas/,2892,set using a non-recursive method & reset the cache,
pandas/,2904,"GH5632, make sure that we are a Series convertible",
pandas/,2932,----------------------------------------------------------------------,
pandas/,2933,Unsorted,
pandas/,3088,"when res is multi-dimensional loc raises, but this is sometimes a",
pandas/,3089,valid query,
pandas/,3304,convert the myriad valid dtypes object to a single representation,
pandas/,3310,can't both include AND exclude!,
pandas/,3314,We raise when both include and exclude are empty,
pandas/,3315,"Hence, we can just shrink the columns we want to keep",
pandas/,3324,type: ignore,
pandas/,3457,reindex if necessary,
pandas/,3463,GH 4107,
pandas/,3467,"raised in MultiIndex.from_tuples, see test_insert_error_msmgs",
pandas/,3469,duplicate axis,
pandas/,3472,other,
pandas/,3482,align right-hand-side columns if self.columns,
pandas/,3483,is multi-index and self[key] is a sub-frame,
pandas/,3490,now align rows,
pandas/,3494,"Explicitly copy here, instead of in sanitize_index,",
pandas/,3495,"as sanitize_index won't copy an EA, even with copy=True",
pandas/,3501,turn me into an ndarray,
pandas/,3515,possibly infer to datetimelike,
pandas/,3520,cast ignores pandas dtypes. so save the dtype first,
pandas/,3523,upcast,
pandas/,3527,return internal types directly,
pandas/,3531,broadcast across multiple columns if necessary,
pandas/,3570,GH#33041,
pandas/,3594,----------------------------------------------------------------------,
pandas/,3595,Reindexing and alignment,
pandas/,3759,"Pop these, since the values are in `kwargs` under different names",
pandas/,4092,Operate column-wise,
pandas/,4222,arrays are fine as long as they are one-dimensional,
pandas/,4223,iterators get converted to list below,
pandas/,4227,everything else gets tried as a key; see GH 24969,
pandas/,4263,if Index then not MultiIndex (treated above),
pandas/,4272,"from here, col can only be a column label",
pandas/,4280,"check newest element against length of calling frame, since",
pandas/,4281,ensure_index_from_sequences would not raise for append=False.,
pandas/,4293,use set to handle duplicate column names gracefully in case of drop,
pandas/,4297,clear up memory usage,
pandas/,4466,"if we have the labels, extract the values with a mask",
pandas/,4470,"we can have situations where the whole mask is -1,",
pandas/,4471,"meaning there is nothing found in labels, so make all nan's",
pandas/,4478,TODO(https://github.com/pandas-dev/pandas/issues/24206),
pandas/,4479,Push this into maybe_upcast_putmask?,
pandas/,4480,We can't pass EAs there right now. Looks a bit,
pandas/,4481,complicated.,
pandas/,4482,"So we unbox the ndarray_values, op, re-box.",
pandas/,4487,TODO: can we de-kludge yet?,
pandas/,4538,to ndarray and maybe infer different dtype,
pandas/,4548,----------------------------------------------------------------------,
pandas/,4549,Reindex-based selection methods,
pandas/,4673,GH20987,
pandas/,4920,needed for mypy since can't narrow types using np.iterable,
pandas/,4923,Verify all columns in subset exist in the queried dataframe,
pandas/,4924,"Otherwise, raise a KeyError, same as if you try to __getitem__ with a",
pandas/,4925,key that doesn't exist.,
pandas/,4936,----------------------------------------------------------------------,
pandas/,4937,Sorting,
pandas/,5071,TODO: this can be combined with Series.sort_index impl as,
pandas/,5072,almost identical,
pandas/,5079,make sure that the axis is lexsorted to start,
pandas/,5080,if not we need to reconstruct to get the correct indexer,
pandas/,5099,Check monotonic-ness before sort an index,
pandas/,5100,GH11080,
pandas/,5116,reconstruct axis if needed,
pandas/,5216,Force MultiIndex for single column,
pandas/,5455,pragma: no cover,
pandas/,5483,pragma: no cover,
pandas/,5496,----------------------------------------------------------------------,
pandas/,5497,Arithmetic / combination related,
pandas/,5500,at this point we have `self._indexed_same(other)`,
pandas/,5503,"since _arith_op may be called in a loop, avoid function call",
pandas/,5504,overhead if possible by doing this check once,
pandas/,5510,"for the mixed_type case where we iterate over columns,",
pandas/,5511,"_arith_op(left, right) is equivalent to",
pandas/,5512,"left._binop(right, func, fill_value=fill_value)",
pandas/,5517,iterate over columns,
pandas/,5539,Pin columns instead of passing to constructor for compat with,
pandas/,5540,non-unique columns case,
pandas/,5651,save for compare,
pandas/,5662,sorts if possible,
pandas/,5676,don't overwrite columns unnecessarily,
pandas/,5677,DO propagate if this column is not in the intersection,
pandas/,5689,"If self DataFrame does not have col in other DataFrame,",
pandas/,5690,"try to promote series, which is all NaN, as other_dtype.",
pandas/,5695,e.g. new_dtype is integer types,
pandas/,5698,"if we have different dtypes, possibly promote",
pandas/,5710,convert_objects just in case,
pandas/,5758,Does two things:,
pandas/,5759,1. maybe gets the values from the Series / Index,
pandas/,5760,2. convert datelike to i8,
pandas/,5779,"If the column y in other DataFrame is not in first DataFrame,",
pandas/,5780,just return y_values.,
pandas/,5904,TODO: Support other joins,
pandas/,5905,pragma: no cover,
pandas/,5933,don't overwrite columns unnecessarily,
pandas/,5939,----------------------------------------------------------------------,
pandas/,5940,Data reshaping,
pandas/,6562,TODO: use overload to refine return type of reset_index,
pandas/,6563,needed for mypy,
pandas/,6759,----------------------------------------------------------------------,
pandas/,6760,Time series-related,
pandas/,6861,----------------------------------------------------------------------,
pandas/,6862,Function application,
pandas/,6883,is Series,
pandas/,6886,TODO: _shallow_copy(subset)?,
pandas/,6970,"NDFrame.aggregate returns a tuple, and we need to transpose",
pandas/,6971,only result,
pandas/,7191,"if we have a dtype == 'M8[ns]', provide boxed values",
pandas/,7199,----------------------------------------------------------------------,
pandas/,7200,Merging / joining methods,
pandas/,7498,join indexes only using concat,
pandas/,7653,Dispatch to Series.round,
pandas/,7665,----------------------------------------------------------------------,
pandas/,7666,"Statistical methods, etc.",
pandas/,7919,mask missing values,
pandas/,7923,demeaned data,
pandas/,7949,Find non-matching labels along the given axis,
pandas/,7950,and append missing correlations (GH 22375),
pandas/,7960,----------------------------------------------------------------------,
pandas/,7961,ndarray-like stats methods,
pandas/,8048,GH #423,
pandas/,8053,the or any_extension_types is really only hit for single-,
pandas/,8054,column frames with an extension array,
pandas/,8057,GH13407,
pandas/,8078,"Mask NaNs: Mask rows or columns where the index level is NaN, and all",
pandas/,8079,values in the DataFrame that are NaN,
pandas/,8081,"Since we have mixed types, calling notna(frame.values) might",
pandas/,8082,upcast everything to object,
pandas/,8085,But use the speedup when we have homogeneous dtypes,
pandas/,8137,TODO: Make other agg func handle axis=None properly,
pandas/,8150,"GH#25101, GH#24434",
pandas/,8154,pragma: no cover,
pandas/,8174,we can't pass axis=1,
pandas/,8178,"After possibly _get_data and transposing, we are now in the",
pandas/,8179,simple case where we can use BlockManager._reduce,
pandas/,8187,"FIXME: needs_i8_conversion check is kludge, not sure",
pandas/,8188,why it is necessary in this case and this case alone,
pandas/,8193,try to avoid self.values call,
pandas/,8196,operate column-wise,
pandas/,8198,"numeric_only must be None here, as other cases caught above",
pandas/,8199,require len(self) > 0 bc frame_apply messes up empty prod/sum,
pandas/,8201,this can end up with a non-reduction,
pandas/,8202,but not always. if the types are mixed,
pandas/,8203,with datelike then need to make sure a series,
pandas/,8205,we only end up here if we have not specified,
pandas/,8206,numeric_only and yet we have tried a,
pandas/,8207,"column-by-column reduction, where we have mixed type.",
pandas/,8208,So let's just do what we can,
pandas/,8228,e.g. in nanops trying to convert strs to float,
pandas/,8230,TODO: why doesnt axis matter here?,
pandas/,8250,work around https://github.com/numpy/numpy/issues/10489,
pandas/,8251,TODO: can we de-duplicate parts of this with the next blocK?,
pandas/,8260,try to coerce to the original dtypes item by item if we can,
pandas/,8616,GH#23925 _get_numeric_data may have dropped all columns,
pandas/,8790,----------------------------------------------------------------------,
pandas/,8791,Add index and columns,
pandas/,8807,----------------------------------------------------------------------,
pandas/,8808,Add plotting methods to DataFrame,
pandas/,8823,TODO: this should be seriously cythonized,
pandas/,44,GH#29553 prevent numpy deprecation warnings,
pandas/,49,"if x is a string and arr is not, then we get False and we must",
pandas/,50,expand the mask to size arr.shape,
pandas/,55,GH#29553 prevent numpy deprecation warnings,
pandas/,66,GH 21977,
pandas/,74,asfreq is compat for resampling,
pandas/,140,early stop,
pandas/,146,reduce axis 1,
pandas/,180,"Treat the original, non-scipy methods first.",
pandas/,186,have to call np.asarray(xvalues) since xvalues could be an Index,
pandas/,187,which can't be mutated,
pandas/,197,"if not issubclass(xvalues.dtype.type, np.datetime64):",
pandas/,222,default limit is unlimited GH #16282,
pandas/,225,"These are sets of index pointers to invalid values... i.e. {0, 1, etc...",
pandas/,231,"Like the sets above, preserve_nans contains indices of invalid values,",
pandas/,232,"but in this case, it is the final set of indices that need to be",
pandas/,233,preserved as NaN after the interpolation.,
pandas/,235,For example if limit_direction='forward' then preserve_nans will,
pandas/,236,"contain indices of NaNs at the beginning of the series, and NaNs that",
pandas/,237,are more than'limit' away from the prior non-NaN.,
pandas/,239,set preserve_nans based on direction using _interp_limit,
pandas/,245,both directions... just use _interp_limit,
pandas/,248,"if limit_area is set, add either mid or outside indices",
pandas/,249,to preserve_nans GH #16284,
pandas/,251,preserve NaNs on the outside,
pandas/,254,preserve NaNs on the inside,
pandas/,257,sort preserve_nans and covert to list,
pandas/,267,"hack for DatetimeIndex, #1646",
pandas/,274,"np.interp requires sorted X values, #21037",
pandas/,300,"hack for DatetimeIndex, #1646",
pandas/,331,ignores some kwargs that could be passed along.,
pandas/,340,"GH 5975, scipy.interp1d can't handle datetime64s",
pandas/,369,"GH #10633, #24014",
pandas/,377,GH 7295: need to be able to write for some reason,
pandas/,378,in some circumstances: check all three,
pandas/,426,return the method for compat with scipy version & backwards compat,
pandas/,492,reshape a 1 dim if needed,
pandas/,495,pragma: no cover,
pandas/,501,todo create faster fill func without masking,
pandas/,512,reshape back,
pandas/,517,convert float back to datetime64,
pandas/,527,"TODO: for int-dtypes we make a copy, but for everything else this",
pandas/,528,alters the values in-place.  Is this intentional?,
pandas/,538,NB: this check needs to come after the datetime64 check above,
pandas/,545,"boilerplate for pad_1d, backfill_1d, pad_2d, backfill_2d",
pandas/,550,This needs to occur before datetime/timedeltas are cast to int64,
pandas/,577,for test coverage,
pandas/,588,for test coverage,
pandas/,633,handle forward first; the backward direction is the same except,
pandas/,634,1. operate on the reversed array,
pandas/,635,2. subtract the returned indices from N - 1,
pandas/,658,then we don't even need to care about backwards,
pandas/,659,just use forwards,
pandas/,681,https://stackoverflow.com/a/6811241,
pandas/,20,-----------------------------------------------------------,
pandas/,21,Indexer Identification,
pandas/,64,"allow a list_like, but exclude NamedTuples which can be indexers",
pandas/,113,-----------------------------------------------------------,
pandas/,114,Indexer Validation,
pandas/,143,boolean with truth values == len of the value is ok too,
pandas/,157,slice,
pandas/,206,-----------------------------------------------------------,
pandas/,207,Indexer Conversion,
pandas/,239,"If `indices` is empty, np.array will return a float,",
pandas/,240,and will cause indexing errors.,
pandas/,254,-----------------------------------------------------------,
pandas/,255,Unsorted,
pandas/,290,GH#25774,
pandas/,327,"if we don't have a MultiIndex, we may still be able to handle",
pandas/,328,a 1-tuple.  see test_1tuple_without_multiindex,
pandas/,331,GH#31299,
pandas/,344,-----------------------------------------------------------,
pandas/,345,Public indexer validation,
pandas/,444,whathever is not an array-like is returned as-is (possible valid array,
pandas/,445,"indexers that are not array-like: integer, slice, Ellipsis, None)",
pandas/,446,"In this context, tuples are not considered as array-like, as they have",
pandas/,447,a specific meaning in indexing (multi-dimensional indexing),
pandas/,454,convert list-likes to array,
pandas/,458,empty list is converted to float array by pd.array,
pandas/,468,GH26658,
pandas/,76,no need to interleave sep if it is empty,
pandas/,108,if there are any non-string values (wrong dtype or hidden behind,
pandas/,109,"object dtype), np.sum will fail; catch and return with better message",
pandas/,125,just StringDtype,
pandas/,190,i.e. StringDtype,
pandas/,196,This is when the result type is object. We reach this when,
pandas/,197,-> We know the result type is truly object (e.g. .encode returns bytes,
pandas/,198,or .findall returns a list).,
pandas/,199,-> We don't know the result type. E.g. `.get` can return anything.,
pandas/,208,TODO: extract_array?,
pandas/,217,Reraise the exception if callable `f` got wrong number of args.,
pandas/,218,"The user may want to be warned by this, instead of getting NaN",
pandas/,225,FIXME: this should be totally avoidable,
pandas/,688,"Check whether repl is valid (GH 13438, GH 15055)",
pandas/,700,not a compiled regex,
pandas/,701,set default case,
pandas/,705,"add case flag, if provided",
pandas/,903,workaround #27953,
pandas/,904,"ideally we just pass `dtype=arr.dtype` unconditionally, but this fails",
pandas/,905,when the list of values is empty.,
pandas/,1139,the regex must contain capture groups.,
pandas/,1417,pragma: no cover,
pandas/,1437,pragma: no cover,
pandas/,1518,pragma: no cover,
pandas/,1741,pragma: no cover,
pandas/,1907,CPython optimized implementation,
pandas/,1930,CPython optimized implementation,
pandas/,1979,deal with None,
pandas/,2098,._values.categories works for both Series/Index,
pandas/,2100,save orig to blow up categoricals to the right type,
pandas/,2134,see _libs/lib.pyx for list of inferred types,
pandas/,2137,Series / Index,
pandas/,2138,categorical / normal,
pandas/,2140,explicitly allow StringDtype,
pandas/,2147,GH#27571 mostly occurs with ExtensionArray,
pandas/,2185,"for category, we do the stuff on the categories, so blow it up",
pandas/,2186,to the full series again,
pandas/,2187,"But for some operations, we have to do the stuff on the full values,",
pandas/,2188,so make it possible to skip this step as the method already did this,
pandas/,2189,before the transformation...,
pandas/,2191,"if self._orig is a CategoricalIndex, there is no .cat-accessor",
pandas/,2200,"We can be wrapping a string / object / categorical result, in which",
pandas/,2201,case we'll want to return the same dtype as the input.,
pandas/,2202,"Or we can be wrapping a numeric output, in which case we don't want",
pandas/,2203,to return a StringArray.,
pandas/,2210,infer from ndim if expand is not specified,
pandas/,2214,required when expand=True is explicitly specified,
pandas/,2215,not needed when inferred,
pandas/,2225,propagate nan values to match longest sequence (GH 18450),
pandas/,2235,"if expand is False, result should have the same name",
pandas/,2236,as the original otherwise specified,
pandas/,2240,"do not use logical or, _orig may be a DataFrame",
pandas/,2241,"which has ""name"" column",
pandas/,2244,Wait until we are sure result is a Series or Index before,
pandas/,2245,checking attributes (GH 12180),
pandas/,2247,"if result is a boolean np.array, return the np.array",
pandas/,2248,instead of wrapping it into a boolean Index (GH 8875),
pandas/,2256,"We had all tuples of length-one, which are",
pandas/,2257,better represented as a regular Index.,
pandas/,2268,Must be a Series,
pandas/,2291,self._orig is either Series or Index,
pandas/,2294,"Generally speaking, all objects without an index inherit the index",
pandas/,2295,`idx` of the calling Series/Index - i.e. must have matching length.,
pandas/,2296,Objects with an index (i.e. Series/Index/DataFrame) keep their own.,
pandas/,2307,ensure iterators do not get read twice etc,
pandas/,2309,"in case of list-like `others`, all elements must be",
pandas/,2310,either Series/Index/np.ndarray (1-dim)...,
pandas/,2317,iterate through list and append each element,
pandas/,2320,... or just strings,
pandas/,2474,Series,
pandas/,2477,"concatenate Series/Index with itself if no ""others""",
pandas/,2488,"turn anything in ""others"" into lists of Series",
pandas/,2490,do not catch TypeError raised by _get_series_list,
pandas/,2497,align if required,
pandas/,2499,Need to add keys for uniqueness in case of duplicate columns,
pandas/,2509,again list of Series,
pandas/,2516,no na_rep means NaNs for all rows where any column has a NaN,
pandas/,2517,only necessary if there are actually any NaNs,
pandas/,2524,fill NaNs with na_rep in case there are actually any NaNs,
pandas/,2530,no NaNs - can just concatenate,
pandas/,2534,add dtype for case that result is all-NA,
pandas/,2536,Series,
pandas/,2538,We need to infer the new categories.,
pandas/,2966,need to allow bytes here,
pandas/,2968,TODO: Not sure how to handle this.,
pandas/,3071,we need to cast to Series of strings as only that has all,
pandas/,3072,methods available for making the dummies...,
pandas/,3360,_doc_args holds dict of strings to use in substituting casemethod docs,
pandas/,3562,force _noarg_wrapper return type with dtype=bool (GH 29624),
pandas/,63,promote nan values (assigned -1 label in lab array),
pandas/,64,so that all output values are non-negative,
pandas/,74,Iteratively process all the labels in chunks sized so less,
pandas/,75,than _INT64_MAX unique int ids will be required for each chunk,
pandas/,77,how many levels can be done without overflow:,
pandas/,80,compute flat ids for the first `nlev` levels,
pandas/,91,exclude nulls,
pandas/,97,all levels done!,
pandas/,100,compress what has been done so far in order to avoid overflow,
pandas/,101,"to retain lexical ranks, obs_ids should be sorted",
pandas/,138,reconstruct labels,
pandas/,140,"at some point group indices are factorized,",
pandas/,141,and may not be deconstructed here! wrong path!,
pandas/,171,obs ids are deconstructable! take the fast route!,
pandas/,209,we are already a Categorical,
pandas/,213,create the Categorical,
pandas/,224,ascending,
pandas/,229,not order means descending,
pandas/,277,"Finally, place the NaNs at the end or the beginning according to",
pandas/,278,na_position,
pandas/,315,"provide ""flattened"" iterator for multi-group setting",
pandas/,344,----------------------------------------------------------------------,
pandas/,345,sorting levels...cleverly?,
pandas/,363,taking complexities literally; there may be,
pandas/,364,some room for fine-tuning these parameters,
pandas/,384,"note, group labels come out ascending (ie, 1,2,3 etc)",
pandas/,394,sorter is index where elements ought to go,
pandas/,397,reverse_indexer is where elements came from,
pandas/,403,"move labels to right locations (ie, unsort ascending labels)",
pandas/,407,sort observed ids,
pandas/,137,----------------------------------------------------------------------,
pandas/,138,Series class,
pandas/,192,Override cache_readonly bc Series is mutable,
pandas/,200,----------------------------------------------------------------------,
pandas/,201,Constructors,
pandas/,213,GH#33357 called with just the SingleBlockManager,
pandas/,218,"we are called internally, so short-circuit",
pandas/,221,"data is an ndarray, index is defined",
pandas/,234,gh-17261,
pandas/,242,uncomment the line below when removing the DeprecationWarning,
pandas/,243,dtype = np.dtype(object),
pandas/,260,astype copies,
pandas/,263,need to copy to avoid aliasing issues,
pandas/,266,GH#24096 need copy to be deep for datetime64tz case,
pandas/,267,TODO: See if we can avoid these copies,
pandas/,273,"GH#13296 we are dealing with a compound dtype, which",
pandas/,274,should be treated as 2D,
pandas/,294,GH#19275 SingleBlockManager input should only be called,
pandas/,295,internally,
pandas/,315,a scalar numpy array is list-like but doesn't,
pandas/,316,have a proper length,
pandas/,326,create/copy the manager,
pandas/,360,Looking for NaN in dict doesn't work ({np.nan : 1}[float('nan')],
pandas/,361,"raises KeyError), so we iterate the entire dict, and align",
pandas/,366,fastpath for Series(data=None). Just use broadcasting a scalar,
pandas/,367,instead of reindexing.,
pandas/,373,"Input is now list-like, so rely on ""standard"" construction:",
pandas/,375,TODO: passing np.float64 to not break anything yet. See GH-17261,
pandas/,380,"Now we just make sure the order is respected, if any",
pandas/,385,----------------------------------------------------------------------,
pandas/,397,types,
pandas/,419,need to set here because we changed the index,
pandas/,423,"labels may exceeds datetime bounds,",
pandas/,424,or not be a DatetimeIndex,
pandas/,429,The ensure_index call above ensures we have an Index object,
pandas/,432,ndarray compatibility,
pandas/,445,DataFrame compatibility,
pandas/,580,type: ignore,
pandas/,585,ops,
pandas/,677,----------------------------------------------------------------------,
pandas/,678,NDArray Compat,
pandas/,684,TODO: handle DataFrame,
pandas/,687,"for binary ops, use our custom dunder methods",
pandas/,694,Determine if we should defer.,
pandas/,710,align all the inputs.,
pandas/,713,TODO: dataframe,
pandas/,717,This triggers alignment.,
pandas/,718,"At the moment, there aren't any ufuncs with more than two inputs",
pandas/,719,"so this ends up just being x1.index | x2.index, but we write",
pandas/,720,it to handle *args.,
pandas/,740,e.g. np.subtract.outer,
pandas/,742,GH#27198,
pandas/,748,multiple return values,
pandas/,751,no return value,
pandas/,805,----------------------------------------------------------------------,
pandas/,806,Unary Methods,
pandas/,808,coercion,
pandas/,813,----------------------------------------------------------------------,
pandas/,815,indexers,
pandas/,823,----------------------------------------------------------------------,
pandas/,824,Indexing Methods,
pandas/,870,axis kwarg is retained for compat with NDFrame method,
pandas/,871,_slice is *always* positional,
pandas/,895,Otherwise index.get_value will raise InvalidIndexError,
pandas/,902,We still have the corner case where this tuple is a key,
pandas/,903,in the first level of our MultiIndex,
pandas/,917,other: fancy integer or otherwise,
pandas/,919,_convert_slice_indexer to determin if this slice is positional,
pandas/,920,"or label based, and if the latter, convert to positional",
pandas/,932,"e.g. scalars that aren't recognized by lib.is_scalar, GH#32684",
pandas/,943,"Note: The key_type == ""boolean"" case should be caught by the",
pandas/,944,com.is_bool_indexer check in __getitem__,
pandas/,946,We need to decide whether to treat this as a positional indexer,
pandas/,947,(i.e. self.iloc) or label-based (i.e. self.loc),
pandas/,956,handle the dup indexing case GH#4246,
pandas/,962,mpl hackaround,
pandas/,964,suppress warning from slicing the index with a 2d indexer.,
pandas/,965,eventually we'll want Series itself to warn.,
pandas/,975,"If key is contained, would have returned by now",
pandas/,985,"mpl compat if we look up e.g. ser[:, np.newaxis];",
pandas/,986,see tests.series.timeseries.test_mpl_compat_hack,
pandas/,1005,"Similar to Index.get_value, but we do not fall back to positional",
pandas/,1021,positional setter,
pandas/,1024,GH#12862 adding an new key to the Series,
pandas/,1047,fails with AttributeError for IntervalIndex,
pandas/,1053,other: fancy integer or otherwise,
pandas/,1070,"Note: key_type == ""boolean"" should not occur because that",
pandas/,1071,should be caught by the is_bool_indexer check in __setitem__,
pandas/,1118,set using a non-recursive method,
pandas/,1121,----------------------------------------------------------------------,
pandas/,1122,Unsorted,
pandas/,1307,"set name if it was passed, otherwise, keep the previous name",
pandas/,1321,----------------------------------------------------------------------,
pandas/,1322,Rendering Methods,
pandas/,1415,catch contract violations,
pandas/,1452,----------------------------------------------------------------------,
pandas/,1487,----------------------------------------------------------------------,
pandas/,1488,Misc public methods,
pandas/,1530,GH16122,
pandas/,1665,----------------------------------------------------------------------,
pandas/,1666,"Statistics, overridden ndarray methods",
pandas/,1668,TODO: integrate bottleneck,
pandas/,1733,TODO: Add option for bins like value_counts(),
pandas/,2186,We dispatch to DataFrame so that core.internals only has to worry,
pandas/,2187,about 2D cases.,
pandas/,2198,scalar,
pandas/,2484,pragma: no cover,
pandas/,2503,-------------------------------------------------------------------,
pandas/,2504,Combination,
pandas/,2646,produced by divmod or rdivmod,
pandas/,2651,GH#33427 assertions to keep mypy happy,
pandas/,2656,We do not pass dtype to ensure that the Series constructor,
pandas/,2657,does inference in the case where `result` has object-dtype.,
pandas/,2661,Set the result's name after __finalize__ is called because __finalize__,
pandas/,2662,would set it back to self.name,
pandas/,2737,"If other is a Series, result is based on union of Series,",
pandas/,2738,so do this element by element,
pandas/,2748,"Assume that other is a scalar, so apply the function for",
pandas/,2749,each element in the Series,
pandas/,2758,TODO: can we do this for only SparseDtype?,
pandas/,2759,"The function can return something of any type, so check",
pandas/,2760,if the type is compatible with the calling EA.,
pandas/,2856,----------------------------------------------------------------------,
pandas/,2857,"Reindexing, sorting",
pandas/,2977,Validate the axis parameter,
pandas/,2980,GH 5856/5853,
pandas/,2988,easier to ask forgiveness than permission,
pandas/,2990,"if kind==mergesort, it can fail for object dtype",
pandas/,2993,stable sort not available for object dtype,
pandas/,2994,uses the argsort default quicksort,
pandas/,3167,TODO: this can be combined with DataFrame.sort_index impl as,
pandas/,3168,almost identical,
pandas/,3170,Validate the axis parameter,
pandas/,3190,Check monotonic-ness before sort an index,
pandas/,3191,GH11080,
pandas/,3493,pragma: no cover,
pandas/,3600,----------------------------------------------------------------------,
pandas/,3601,function application,
pandas/,3736,Validate the axis parameter,
pandas/,3741,we can be called from an inner function which,
pandas/,3742,passes this meta-data,
pandas/,3746,"try a regular apply, this evaluates lambdas",
pandas/,3747,row-by-row; however if the lambda is expected a Series,
pandas/,3748,"expression, e.g.: lambda x: x-x.quantile(0.25)",
pandas/,3749,"this will fail, so we can try a vectorized evaluation",
pandas/,3751,"we cannot FIRST try the vectorized evaluation, because",
pandas/,3752,then .agg and .apply would have different semantics if the,
pandas/,3753,"operation is actually defined on the Series, e.g. str",
pandas/,3765,Validate the axis parameter,
pandas/,3871,dispatch to agg,
pandas/,3875,"if we are a string, try to dispatch",
pandas/,3879,handle ufuncs and lambdas,
pandas/,3892,row-wise access,
pandas/,3894,GH#23179 some EAs do not have `map`,
pandas/,3901,GH 25959 use pd.array instead of tolist,
pandas/,3902,so extension arrays can be used,
pandas/,3924,dispatch to ExtensionArray interface,
pandas/,3928,dispatch to numpy arrays,
pandas/,4427,----------------------------------------------------------------------,
pandas/,4428,Convert to types that support pd.NA,
pandas/,4543,Validate the axis parameter,
pandas/,4554,do nothing,
pandas/,4559,----------------------------------------------------------------------,
pandas/,4560,Time series-oriented methods,
pandas/,4617,----------------------------------------------------------------------,
pandas/,4618,Add index,
pandas/,4631,----------------------------------------------------------------------,
pandas/,4632,Accessor Methods,
pandas/,4633,----------------------------------------------------------------------,
pandas/,4640,----------------------------------------------------------------------,
pandas/,4641,Add plotting methods to Series,
pandas/,4648,Add arithmetic!,
pandas/,3,noqa:F401,
pandas/,23,noqa:F401,
pandas/,25,GH#30193,
pandas/,58,---------------------------------------------------------------,
pandas/,59,Abstract Methods,
pandas/,83,---------------------------------------------------------------,
pandas/,109,curry if needed,
pandas/,146,dispatch to agg,
pandas/,150,all empty,
pandas/,154,string dispatch,
pandas/,156,Support for `frame.transform('method')`,
pandas/,157,"Some methods (shift, etc.) require the axis argument, others",
pandas/,158,"don't, so inspect and insert if necessary.",
pandas/,165,ufunc,
pandas/,169,_constructor will retain self.index and self.columns,
pandas/,172,broadcasting,
pandas/,176,one axis empty,
pandas/,180,raw,
pandas/,193,we are not asked to reduce or infer reduction,
pandas/,194,so just return a copy of the existing object,
pandas/,198,we may need to infer,
pandas/,227,catch only ValueError raised intentionally in libreduction,
pandas/,229,"We expect np.apply_along_axis to give a two-dimensional result, or",
pandas/,230,also raise.,
pandas/,233,TODO: mixed type case,
pandas/,242,axis which we want to compare compliance,
pandas/,249,must be a scalar or 1d,
pandas/,254,must match return dim,
pandas/,260,we *always* preserve the original index / columns,
pandas/,268,try to reduce first (by default),
pandas/,269,this only matters if the reduction in values is of different dtype,
pandas/,270,"e.g. if we want to apply to a SparseFrame, then can't directly reduce",
pandas/,272,"we cannot reduce using non-numpy dtypes,",
pandas/,273,as demonstrated in gh-12244,
pandas/,277,Disallow dtypes where setting _index_data will break,
pandas/,278,"ExtensionArray values, see GH#31182",
pandas/,280,Disallow complex_internals since libreduction shortcut raises a TypeError,
pandas/,289,Preserve subclass for e.g. test_subclassed_apply,
pandas/,300,catch only ValueError raised intentionally in libreduction,
pandas/,303,e.g. test_apply_ignore_failures we just ignore,
pandas/,307,reached via numexpr; fall back to python implementation,
pandas/,312,compute the result using the series generator,
pandas/,315,wrap results,
pandas/,335,so will work with MultiIndex,
pandas/,351,see if we can infer the results,
pandas/,356,dict of scalars,
pandas/,358,"the default dtype of an empty Series will be `object`, but this",
pandas/,359,code can be hit by df.mean() where the result should have dtype,
pandas/,360,float64 even if it's an empty Series.,
pandas/,436,we have requested to expand,
pandas/,440,we have a non-series and don't want inference,
pandas/,447,we may want to infer results,
pandas/,458,set the index,
pandas/,461,infer dtypes,
pandas/,113,don't overwrite existing methods/properties,
pandas/,153,Ported with modifications from xarray,
pandas/,154,https://github.com/pydata/xarray/blob/master/xarray/core/extensions.py,
pandas/,155,1. We don't need to catch and re-raise AttributeErrors as RuntimeErrors,
pandas/,156,2. We use a UserWarning instead of a custom Warning,
pandas/,185,"we're accessing the attribute of the class, i.e., Dataset.geo",
pandas/,188,Replace the property with the accessor object. Inspired by:,
pandas/,189,https://www.pydanny.com/cached-property.html,
pandas/,190,We need to use object.__setattr__ because we overwrite __setattr__ on,
pandas/,191,NDFrame,
pandas/,25,compute,
pandas/,66,,
pandas/,67,"options from the ""display"" namespace",
pandas/,312,error: Name 'get_ipython' is not defined,
pandas/,313,type: ignore,
pandas/,314,assume standard Python interpreter in a terminal,
pandas/,317,IPython as a Jupyter kernel,
pandas/,319,IPython in a terminal,
pandas/,359,FIXME: change `validator=is_nonnegative_int`,
pandas/,360,in version 1.2,
pandas/,368,automatically determine optimal number of columns,
pandas/,370,cannot determine optimal number of columns,
pandas/,454,We don't want to start importing everything at the global context level,
pandas/,455,or we'll hit circular deps.,
pandas/,475,user warnings,
pandas/,491,Set up the io.excel specific reader configuration.,
pandas/,547,Set up the io.excel specific writer configuration.,
pandas/,585,Set up the io.parquet specific configuration.,
pandas/,600,--------,
pandas/,601,Plotting,
pandas/,602,---------,
pandas/,614,"We defer matplotlib validation, since it's the default",
pandas/,29,noqa,
pandas/,77,turn a datetime like into a Timestamp/timedelta as needed,
pandas/,79,"If we dont have datetime64/timedelta64 dtype, we dont want to",
pandas/,80,box datetimelike scalars,
pandas/,137,pragma: no cover,
pandas/,155,assumes lib.is_scalar(val),
pandas/,227,Avoid building an array of arrays:,
pandas/,253,non-iterable,
pandas/,295,TODO: used only once in indexing; belongs elsewhere?,
pandas/,306,typical case has name,
pandas/,309,some objects don't; could recurse,
pandas/,312,fall back to class name,
pandas/,315,everything failed (probably because the argument,
pandas/,316,wasn't actually callable); we return None,
pandas/,317,instead of the empty string in this case to allow,
pandas/,318,distinguishing between no name and a name of '',
pandas/,43,set/unset to use bottleneck,
pandas/,73,we want to transform an object array,
pandas/,74,ValueError message to the more typical TypeError,
pandas/,75,e.g. this is normally a disallowed function on,
pandas/,76,object arrays that contain strings,
pandas/,94,pragma: no cover,
pandas/,107,"We are empty, returning NA for our type",
pandas/,108,Only applies for the default `min_count` of None,
pandas/,109,since that affects how empty arrays are handled.,
pandas/,110,TODO(GH-18976) update all the nanops methods to,
pandas/,111,correctly handle empty inputs and remove this check.,
pandas/,112,It *may* just be `var`,
pandas/,117,"`mask` is not recognised by bottleneck, would raise",
pandas/,118,TypeError if called,
pandas/,122,"prefer to treat inf/-inf as NA, but must compute the func",
pandas/,123,twice :(,
pandas/,137,"Bottleneck chokes on datetime64, PeriodDtype (or and EA)",
pandas/,140,GH 15507,
pandas/,141,bottleneck does not properly upcast during the sum,
pandas/,142,so can overflow,
pandas/,144,GH 9422,
pandas/,145,further we also want to preserve NaN when all elements,
pandas/,146,"are NaN, unlinke bottleneck/numpy which consider this",
pandas/,147,to be 0,
pandas/,164,"if it doesn't support infs, then it can't have infs",
pandas/,187,need the max int here,
pandas/,228,"Boolean data cannot contain nulls, so signal via mask being None",
pandas/,280,"In _get_values is only called from within nanops, and in all cases",
pandas/,281,with scalar fill_value.  This guarantee is important for the,
pandas/,282,maybe_upcast_putmask call below,
pandas/,291,changing timedelta64/datetime64 to int64 needs to happen after,
pandas/,292,finding `mask` above,
pandas/,297,get our fill value (in case we need to provide an alternative,
pandas/,298,dtype for it),
pandas/,308,promote if needed,
pandas/,312,return a platform independent precision dtype,
pandas/,332,GH#24293,
pandas/,341,"If we have float dtype, taking a view will give the wrong result",
pandas/,348,raise if we have a timedelta64[ns] which is too large,
pandas/,385,we either return np.nan or pd.NaT,
pandas/,393,assertion to make mypy happy,
pandas/,560,suppress division by zero warnings,
pandas/,607,"e.g. ""could not convert string to float: 'a'""",
pandas/,617,an array from a frame,
pandas/,620,there's a non-empty array to apply over otherwise numpy raises,
pandas/,627,fastpath for the skipna case,
pandas/,630,"must return the correct shape, but median is not defined for the",
pandas/,631,"empty set so return nans of shape ""everything but the passed axis""",
pandas/,632,"since ""axis"" is where the reduction would occur if we had a nonempty",
pandas/,633,array,
pandas/,640,otherwise return a scalar value,
pandas/,677,"always return NaN, never inf",
pandas/,774,xref GH10242,
pandas/,775,"Compute variance via two-pass algorithm, which is stable against",
pandas/,776,cancellation errors and relatively accurate for small numbers of,
pandas/,777,observations.,
pandas/,778,,
pandas/,779,See https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance,
pandas/,788,"Return variance as np.float64 (the datatype used in the accumulator),",
pandas/,789,"unless we were dealing with a float array, in which case use the same",
pandas/,790,precision as the original values array.,
pandas/,831,This checks if non-numeric-like data is passed with numeric_only=False,
pandas/,832,and raises a TypeError otherwise,
pandas/,1008,floating point error,
pandas/,1009,,
pandas/,1010,#18044 in _libs/windows.pyx calc_skew follow this behavior,
pandas/,1011,to fix the fperr to treat m2 <1e-14 as zero,
pandas/,1097,floating point error,
pandas/,1098,,
pandas/,1099,#18044 in _libs/windows.pyx calc_kurt follow this behavior,
pandas/,1100,to fix the fperr to treat denom <1e-14 as zero,
pandas/,1105,"if ``denom`` is a scalar, check these corner cases first before",
pandas/,1106,doing division,
pandas/,1168,helper function for nanargmin/nanargmax,
pandas/,1257,"GH12941, use None to auto cast null",
pandas/,1288,"no missing values, only check size",
pandas/,1298,#18044 reference this behavior to fix rolling skew/kurt issue,
pandas/,1391,GH#29941 we get here with object arrays containing strs,
pandas/,1400,"e.g. ""1+1j"" or ""foo""",
pandas/,1404,"e.g. ""foo""",
pandas/,1409,NA-friendly array comparisons,
pandas/,1460,"mask is Union[ExtensionArray, ndarray]",
pandas/,1501,need to cast to integer to avoid rounding errors in numpy,
pandas/,1506,Note: we have to do do `astype` and not view because in general we,
pandas/,1507,"have float result at this point, not i8",
pandas/,1516,"for nonconsolidatable blocks mask is 1D, but values 2D",
pandas/,1553,We will be applying this function to block values,
pandas/,1555,"GH#30460, GH#29058",
pandas/,1556,"numpy 1.18 started sorting NaTs at the end instead of beginning,",
pandas/,1557,so we need to work around to maintain backwards-consistency.,
pandas/,1560,We need to define mask before masking NaTs,
pandas/,1564,"Note: the accum_func comparison fails as an ""is"" comparison",
pandas/,1576,Restore NaTs that we masked previously,
pandas/,1579,everything up to the first non-na entry stays NaT,
pandas/,1583,restore NaT elements,
pandas/,1584,TODO: could try/finally for this?,
pandas/,1589,DatetimeArray,
pandas/,168,partition all AST nodes,
pandas/,202,nodes that we don't support directly but are needed for parsing,
pandas/,222,"these nodes are low priority or won't ever be supported (e.g., AST)",
pandas/,234,we're adding a different assignment in some cases to be equality comparison,
pandas/,235,and we don't want `stmt` and friends in their so get only the class whose,
pandas/,236,names are capitalized,
pandas/,243,"TODO: Python 3.6.2: replace Callable[..., None] with Callable[..., NoReturn]",
pandas/,410,the kind of the operator (is actually an instance),
pandas/,414,must be two terms and the comparison operator must be ==/!=/in/not in,
pandas/,420,if there are any strings or lists in the expression,
pandas/,424,pop the string variable out of locals and replace it with a list,
pandas/,425,"of one string, kind of a hack",
pandas/,453,"right is a float32 array, left is a scalar",
pandas/,462,"left is a float32 array, right is a scalar",
pandas/,469,"eval `in` and `not in` (for now) in ""partial"" python space",
pandas/,470,"things that can be evaluated in ""eval"" space will be turned into",
pandas/,471,"temporary variables. for example,",
pandas/,472,"[1,2] in a + 2 * b",
pandas/,473,"in that case a + 2 * b will be evaluated using numexpr, and the ""in""",
pandas/,474,call will be evaluated using isin (in python space),
pandas/,502,all date ops must be done in python bc numexpr doesn't work,
pandas/,503,well with NaT,
pandas/,507,"""in""/""not in"" ops are always evaluated in python",
pandas/,514,"evaluate ""=="" and ""!="" in python if either of our operands",
pandas/,515,has an object return type,
pandas/,567,a Term instance,
pandas/,570,an Op instance,
pandas/,628,resolve the value,
pandas/,635,something like datetime.datetime where scope is overridden,
pandas/,652,Check if this is a supported function name,
pandas/,656,Raise original error,
pandas/,695,base case: we have something like a CMP b,
pandas/,701,"recursive case: we have a chained comparison, a CMP b CMP c, etc.",
pandas/,72,make sure no names in resolvers and locals/globals clash,
pandas/,108,convert the expression to a valid numexpr expression,
pandas/,28,the set of dtypes that we will allow pass to numexpr,
pandas/,34,the minimum prod shape that we will use numexpr,
pandas/,39,set/unset to use numexpr,
pandas/,44,choose what we are going to do,
pandas/,52,"if we are using numexpr, set the threads to n",
pandas/,53,otherwise reset,
pandas/,74,required min elements (otherwise we are adding overhead),
pandas/,76,check for dtype compatibility,
pandas/,79,"Series implements dtypes, check for dimension count as well",
pandas/,85,ndarray and Series Case,
pandas/,89,allowed are a superset,
pandas/,102,we were originally called by a reversed op method,
pandas/,124,Caller is responsible for extracting ndarray if necessary,
pandas/,129,Caller is responsible for extracting ndarray if necessary,
pandas/,146,turn myself on,
pandas/,1,flake8: noqa,
pandas/,55,single unary operand,
pandas/,61,we don't have any pandas objects,
pandas/,79,initial axes are the axes of the largest-axis'd term,
pandas/,133,"flatten the parse tree (a nested list, really)",
pandas/,136,can't iterate so it must just be a constant or single variable,
pandas/,142,if all resolved variables are numeric scalars,
pandas/,146,perform the main alignment,
pandas/,181,special case for pathological things like ~True/~False,
pandas/,186,The condition is to distinguish 0-dim array (returned in case of,
pandas/,187,scalar) and 1 element array,
pandas/,188,e.g. np.array(0) and np.array([0]),
pandas/,78,"name is a str for Term, but may be something else for subclasses",
pandas/,122,if it's a variable name (otherwise a constant),
pandas/,135,"potentially very slow for large, mixed dtype frames",
pandas/,139,ndarray,
pandas/,142,scalar,
pandas/,189,in python 2 str() of float,
pandas/,190,can truncate shorter than repr(),
pandas/,216,recurse over the operands,
pandas/,222,clobber types to bool if the op is a boolean operator,
pandas/,376,has to be made a list for python3,
pandas/,395,recurse over the left/right nodes,
pandas/,421,recurse over the left/right nodes,
pandas/,439,base cases,
pandas/,520,do not upcast float32s to float64 un-necessarily,
pandas/,11,A token value Python's tokenizer probably will never use.,
pandas/,34,Create a dict with the special characters and their replacement string.,
pandas/,35,EXACT_TOKEN_TYPES contains these special characters,
pandas/,36,toke.tok_name contains a readable description of the replacement string.,
pandas/,39,The ignore here is because of a bug in mypy that is resolved in 0.740,
pandas/,40,type: ignore,
pandas/,49,"Including quotes works, but there are exceptions.",
pandas/,52,Currently not possible. Terminates parser and won't find backtick.,
pandas/,53,"""#"": ""_HASH_"",",
pandas/,180,Loop over all tokens till a backtick (`) is found.,
pandas/,181,"Then, take all tokens till the next backtick to form a backtick quoted string",
pandas/,38,get the hex repr of the binary char and remove 0x and pad by pad_size,
pandas/,39,zeros,
pandas/,43,bytes literals masquerade as ints when iterating in py3,
pandas/,51,interpret as a pointer since that's what really what id returns,
pandas/,115,shallow copy because we don't want to keep filling this up with what,
pandas/,116,was there before if there are multiple calls to Scope/_ensure_scope,
pandas/,129,shallow copy here because we don't want to replace what's in,
pandas/,130,scope when we align terms (alignment accesses the underlying,
pandas/,131,numpy array of pandas objects),
pandas/,138,assumes that resolvers are going from outermost scope to inner,
pandas/,182,only look for locals in outer scope,
pandas/,186,not a local variable so check in resolvers if we have them,
pandas/,190,if we're here that means that we have no locals and we also have,
pandas/,191,no resolvers,
pandas/,196,last ditch effort we look in temporaries,
pandas/,197,these are created when parsing indexing expressions,
pandas/,198,"e.g., df[df > 0]",
pandas/,201,runtime import because ops imports from scope,
pandas/,249,"won't remove it, but DECREF it",
pandas/,250,in Py3 this probably isn't necessary since frame won't be,
pandas/,251,scope after the loop,
pandas/,264,add sl frames to the scope starting with the,
pandas/,265,most distant and overwriting with more current,
pandas/,266,makes sure that we can capture variable scope,
pandas/,290,add to inner most scope,
pandas/,295,only increment if the variable gets put in the scope,
pandas/,52,must be a queryables,
pandas/,54,Note: The behavior of __new__ ensures that self.name is a str here,
pandas/,59,resolve the rhs (and allow it to be None),
pandas/,65,read-only property overwriting read/write property,
pandas/,66,type: ignore,
pandas/,209,result returns 0 if v is first element or if v is not in metadata,
pandas/,210,check that metadata contains v,
pandas/,237,string quoting,
pandas/,276,"if too many values to create the expression, use a filter instead",
pandas/,285,equality conditions,
pandas/,319,if self.condition is not None:,
pandas/,320,"self.condition = ""~(%s)"" % self.condition",
pandas/,321,return self,
pandas/,335,convert values if we are in the table,
pandas/,342,equality conditions,
pandas/,345,too many values to create the expression?,
pandas/,350,use a filter after reading,
pandas/,417,only allow simple subscripts,
pandas/,439,resolve the value,
pandas/,442,try to get the value to see if we are another expression,
pandas/,452,something like datetime.datetime where scope is overridden,
pandas/,539,capture the environment if needed,
pandas/,613,python 2 str(float) is not always,
pandas/,614,round-trippable so use repr(),
pandas/,625,make sure we have an op at least,
pandas/,25,we have > NPY_MAXARGS terms in our expression,
pandas/,52,TODO: validate this in a more general way (thinking of future engines,
pandas/,53,that won't necessarily be import-able),
pandas/,54,Could potentially be done on engine instantiation,
pandas/,332,get our (possibly passed-in) scope,
pandas/,343,construct the engine and evaluate the parsed expression,
pandas/,357,assign if needed,
pandas/,362,"if returning a copy, copy only on the first assignment",
pandas/,371,"TypeError is most commonly raised (e.g. int, list), but you",
pandas/,372,get IndexError if you try to do this assignment on np.ndarray.,
pandas/,373,we will ignore numpy warnings here; e.g. if trying,
pandas/,374,to use a non-numeric indexer,
pandas/,377,TODO: Filter the warnings we actually care about here.,
pandas/,385,existing resolver needs updated to handle,
pandas/,386,case of mutating existing column in copy,
pandas/,397,We want to exclude `inplace=None` as being False.,
pandas/,86,TODO(typing) the return value on this callable should be any *scalar*.,
pandas/,88,TODO: validate types on ScalarResult and move to _typing,
pandas/,89,Blocked from using by https://github.com/python/mypy/issues/1484,
pandas/,90,See note at _mangle_lambda_list,
pandas/,141,don't override anything that was explicitly defined,
pandas/,142,in the base class,
pandas/,255,Catch instances of lists / tuples,
pandas/,256,but not the class list / tuple itself.,
pandas/,272,"TODO: KeyError is raised in _python_agg_general,",
pandas/,273,see see test_groupby.test_basic,
pandas/,281,pragma: no cover,
pandas/,295,"show the deprecation, but only if we",
pandas/,296,have not shown a higher level one,
pandas/,297,GH 15931,
pandas/,306,indicated column order,
pandas/,309,list of functions / function names,
pandas/,320,reset the cache so that we,
pandas/,321,only include the named selection,
pandas/,329,let higher level handle,
pandas/,416,No transformations increase the ndim of the result,
pandas/,422,GH #6265,
pandas/,433,GH #823 #24880,
pandas/,436,"if self.observed is False,",
pandas/,437,keep all-NaN rows created while re-indexing,
pandas/,445,possible that Series -> DataFrame by applied function,
pandas/,448,GH #6265 #24880,
pandas/,476,"cythonized transform or canned ""agg+broadcast""",
pandas/,479,"If func is a reduction, we need to broadcast the",
pandas/,480,result to the whole group. Compute func result,
pandas/,481,and deal with possible broadcasting below.,
pandas/,503,"check for empty ""results"" to avoid concat ValueError",
pandas/,511,we will only try to coerce the result type if,
pandas/,512,"we have a numeric dtype, as these are *always* user-defined funcs",
pandas/,513,the cython take a different path (and casting),
pandas/,568,Interpret np.nan as False.,
pandas/,601,group boundaries are where group ids change,
pandas/,602,unique observations are where sorted values change,
pandas/,606,1st item of each group is a new unique observation,
pandas/,617,"NaN/NaT group exists if the head of ids is -1,",
pandas/,618,so remove it from res and exclude its index from idx,
pandas/,628,we might have duplications among the bins,
pandas/,651,scalar bins cannot be done at top level,
pandas/,652,in a backward compatible way,
pandas/,664,groupby removes null keys from groupings,
pandas/,673,lab is a Categorical with categories an IntervalIndex,
pandas/,680,TODO: should we do this inside II?,
pandas/,687,group boundaries are where group ids change,
pandas/,690,new values are where sorted labels change,
pandas/,693,group boundaries are also new values,
pandas/,694,value counts,
pandas/,696,num. of times each group should be repeated,
pandas/,699,multi-index components,
pandas/,737,for compat. with libgroupby.value_counts need to ensure every,
pandas/,738,"bin is present at every index level, null filled with zeros",
pandas/,756,build the multi-index w/ full levels,
pandas/,800,TODO: Remove this conditional when #23918 is fixed,
pandas/,807,GH30463,
pandas/,925,GH 28426 will raise error if duplicated function names are used and,
pandas/,926,there is no reassigned name,
pandas/,932,nicer error message,
pandas/,943,grouper specific aggregations,
pandas/,950,_aggregate_multiple_funcs does not allow self.axis == 1,
pandas/,955,try to treat as if we are passing a list,
pandas/,960,raised directly by _aggregate_multiple_funcs,
pandas/,964,"select everything except for the last level, which is the one",
pandas/,965,"containing the name of the function(s), see GH 32040",
pandas/,976,used reordered index of columns,
pandas/,990,"Occurs when doing DataFrameGroupBy(...)[""X""]",
pandas/,1010,TODO: the actual managing of mgr_locs is a PITA,
pandas/,1011,"here, it should happen via BlockManager.combine",
pandas/,1021,"Some object-dtype blocks might be split into List[Block[T], Block[U]]",
pandas/,1027,Avoid inheriting result from earlier in the loop,
pandas/,1035,generally if we have numeric_only=False,
pandas/,1036,and non-applicable functions,
pandas/,1037,try to python agg,
pandas/,1040,we cannot perform the operation,
pandas/,1041,"in an alternate way, exclude the block",
pandas/,1046,call our grouper again with only this block,
pandas/,1049,Avoid call to self.values that can occur in DataFrame,
pandas/,1050,reductions; see GH#28949,
pandas/,1057,we may have an exception in trying to aggregate,
pandas/,1058,continue and exclude the block,
pandas/,1063,unwrap DataFrame to get array,
pandas/,1065,We've split an object block! Everything we've assumed,
pandas/,1066,about a single block input returning a single block output,
pandas/,1067,is a lie. To keep the code-path for the typical non-split case,
pandas/,1068,"clean, we choose to clean up this mess later on.",
pandas/,1081,see if we can cast the block to the desired dtype,
pandas/,1082,this may not be the original dtype,
pandas/,1087,e.g. block.values was an IntegerArray,
pandas/,1088,"(1, N) case can occur if block.values was Categorical",
pandas/,1089,and result is ndarray[object],
pandas/,1092,Cast back if feasible,
pandas/,1097,reshape to be valid for non-Extension Block,
pandas/,1109,Clean up the mess left over from split blocks.,
pandas/,1116,reset the locs in the blocks to correspond to our,
pandas/,1117,current ordering,
pandas/,1123,we need to adjust the indexer to account for the,
pandas/,1124,items we have removed,
pandas/,1125,really should be done in internals :<,
pandas/,1162,only for axis==0,
pandas/,1177,"raised in _aggregate_named, handle at higher level",
pandas/,1178,see test_apply_with_mutated_index,
pandas/,1180,otherwise we get here from an AttributeError in _make_wrapper,
pandas/,1200,GH12824,
pandas/,1204,"GH9684. If all values are None, then this will throw an error.",
pandas/,1205,We'd prefer it return an empty dataframe.,
pandas/,1222,reorder the values,
pandas/,1225,update due to the potential reorder,
pandas/,1231,don't use the key indexer,
pandas/,1235,make Nones an empty object,
pandas/,1240,this is to silence a DeprecationWarning,
pandas/,1241,TODO: Remove when default dtype of empty Series is object,
pandas/,1260,GH3596,
pandas/,1261,provide a reduction (Frame -> Series) if groups are,
pandas/,1262,unique,
pandas/,1264,assign the name to this series,
pandas/,1268,GH2893,
pandas/,1269,"we have series in the values array, we want to",
pandas/,1270,produce a series:,
pandas/,1271,if any of the sub-series are not indexed the same,
pandas/,1272,OR we don't have a multi-index and we have only a,
pandas/,1273,single values,
pandas/,1278,still a series,
pandas/,1279,path added as of GH 5545,
pandas/,1286,GH 8467,
pandas/,1290,"GH6124 if the list of Series have a consistent name,",
pandas/,1291,then propagate that name to the result.,
pandas/,1294,Only propagate the series name to the result,
pandas/,1295,if all series have a consistent name.  If the,
pandas/,1296,"series do not have a consistent name, do",
pandas/,1297,nothing.,
pandas/,1302,normally use vstack as its faster than concat,
pandas/,1303,and if we have mi-columns,
pandas/,1314,GH5788 instead of stacking; concat gets the,
pandas/,1315,dtypes correct,
pandas/,1331,GH#1738: values is list of arrays of unequal lengths,
pandas/,1332,fall through to the outer else clause,
pandas/,1333,TODO: sure this is right?  we used to do this,
pandas/,1334,after raising AttributeError above,
pandas/,1337,"if we have date/time like in the original, then coerce dates",
pandas/,1338,as we are stacking can easily have object dtypes here,
pandas/,1347,values are not series or array-like but scalars,
pandas/,1349,self._selection_name not passed through to Series as the,
pandas/,1350,result should not take the name of original selection,
pandas/,1351,of columns,
pandas/,1355,Handle cases like BinGrouper,
pandas/,1371,Try slow path and fast path.,
pandas/,1384,we need to broadcast across the,
pandas/,1385,other dimension; this will preserve dtypes,
pandas/,1386,GH14457,
pandas/,1407,switches between 0 & 1,
pandas/,1416,optimized transforms,
pandas/,1426,"cythonized transformation or canned ""reduction+broadcast""",
pandas/,1429,GH 30918,
pandas/,1430,Use _transform_fast only when we know func is an aggregation,
pandas/,1432,"If func is a reduction, we need to broadcast the",
pandas/,1433,result to the whole group. Compute func result,
pandas/,1434,and deal with possible broadcasting below.,
pandas/,1448,if there were groups with no observations (Categorical only?),
pandas/,1449,try casting data to original dtype,
pandas/,1454,"for each col, reshape to to size of original frame",
pandas/,1455,by take operation,
pandas/,1460,TODO: we have no test cases that get here with EA dtypes;,
pandas/,1461,maybe_cast_result may not be needed if EAs never get here,
pandas/,1485,"if we make it here, test if we can use the fast path",
pandas/,1491,"GH#29631 For user-defined function, we cant predict what may be",
pandas/,1492,raised; see test_transform.test_transform_fastpath_raises,
pandas/,1495,"verify fast path does not change columns (and names), otherwise",
pandas/,1496,its results cannot be joined with those of the slow path,
pandas/,1509,iterate through columns,
pandas/,1516,e.g. trying to call nanmean with string values,
pandas/,1576,"allow e.g., scalars and frames to pass",
pandas/,1579,interpret the result of the filter,
pandas/,1584,non scalars aren't allowed,
pandas/,1593,per GH 23566,
pandas/,1595,"if len == 1, then it becomes a SeriesGroupBy and this is actually",
pandas/,1596,"valid syntax, so don't raise warning",
pandas/,1655,zip in reverse so we can always insert at loc 0,
pandas/,1777,TODO(2DEA): reshape would not be necessary with 2D EAs,
pandas/,1843,TODO: this is duplicative of how GroupBy naturally works,
pandas/,1844,Try to consolidate with normal wrapping functions,
pandas/,1895,See GH#26285,
pandas/,44,we only care about observed values,
pandas/,52,we recode according to the uniques,
pandas/,56,return a new categorical that maps our new codes,
pandas/,57,and categories,
pandas/,61,Already sorted according to c.categories; all is fine,
pandas/,65,sort=False should order groups in as-encountered order (GH-8868),
pandas/,68,"But for groupby to work, all categories should be present,",
pandas/,69,"including those missing from the data (GH-13179), which .unique()",
pandas/,70,above dropped,
pandas/,92,we re-order to the original category orderings,
pandas/,96,"we are not sorting, so add unobserved to the end",
pandas/,30,create a new object to prevent aliasing,
pandas/,34,we need to make a shallow copy of ourselves,
pandas/,35,with the same groupby,
pandas/,38,"Try to select from a DataFrame, falling back to a Series",
pandas/,52,special case to prevent duplicate plots when catching exceptions when,
pandas/,53,forwarding methods from NDFrames,
pandas/,89,"cythonized transformations or canned ""agg+broadcast"", which do not",
pandas/,90,require postprocessing of the result by transform.,
pandas/,95,List of aggregation/reduction functions.,
pandas/,96,These map each group to a single numeric value,
pandas/,116,as long as `quantile`'s signature accepts only,
pandas/,117,"a single quantile value, it's a reduction.",
pandas/,118,GH#27526 might change that.,
pandas/,129,List of transformation functions.,
pandas/,130,"a transformation is a function that, for each group,",
pandas/,131,produces a result that has the same shape as the group.,
pandas/,152,these are all the public methods on Grouper which don't belong,
pandas/,153,in either of the above lists,
pandas/,160,"corr and cov return ngroups*ncolumns rows, so they",
pandas/,161,are neither a transformation nor a reduction,
pandas/,185,Valid values  of `name` for `groupby.transform(name)`,
pandas/,186,NOTE: do NOT edit this directly. New additions should be inserted,
pandas/,187,into the appropriate list above.,
pandas/,148,"provide ""flattened"" iterator for multi-group setting",
pandas/,159,calling splitter.fast_apply will raise TypeError via apply_frame_axis0,
pandas/,160,if we pass EA instead of ndarray,
pandas/,161,TODO: can we have a workaround for EAs backed by ndarray?,
pandas/,168,fast_apply/libreduction doesn't allow non-numpy backed indexes,
pandas/,175,This Exception is raised if `f` triggers an exception,
pandas/,176,but it is preferable to raise the exception in Python.,
pandas/,178,TODO: can we infer anything about whether this is,
pandas/,179,worth-retrying in pure-python?,
pandas/,183,If the fast apply path could be used we can return here.,
pandas/,184,Otherwise we need to fall back to the slow implementation.,
pandas/,191,result_values is None if fast apply path wasn't taken,
pandas/,192,or fast apply aborted with an unexpected exception.,
pandas/,193,"In either case, initialize the result list and perform",
pandas/,194,the slow iteration.,
pandas/,198,If result_values is not None we're in the case that the,
pandas/,199,fast apply loop was broken prematurely but we have,
pandas/,200,already the result for the first group which we can reuse.,
pandas/,204,group might be modified,
pandas/,259,return if my group orderings are monotonic,
pandas/,272,return the codes of items in original grouped axis,
pandas/,323,------------------------------------------------------------,
pandas/,324,Aggregation functions,
pandas/,348,OHLC,
pandas/,364,see if there is a fused-type version of function,
pandas/,365,only valid for numeric,
pandas/,370,"otherwise find dtype-specific version, falling back to object",
pandas/,377,inspect what fused types are implemented,
pandas/,379,disallow this function so we get a NotImplementedError below,
pandas/,380,instead of a TypeError at runtime,
pandas/,442,"Note: it is *not* the case that axis is always 0 for 1-dim values,",
pandas/,443,as we can have 1D ExtensionArrays that we need to treat as 2D,
pandas/,446,can we do this operation with our cython functions,
pandas/,447,if not raise NotImplementedError,
pandas/,449,we raise NotImplemented if this is an invalid operation,
pandas/,450,"entirely, e.g. adding datetimes",
pandas/,452,"categoricals are only 1d, so we",
pandas/,453,are not setup for dim transforming,
pandas/,468,Cast to naive; we'll cast back at the end of the function,
pandas/,469,TODO: possible need to reshape?  kludge can be avoided when,
pandas/,470,2D EA is allowed.,
pandas/,482,we use iNaT for the missing value on ints,
pandas/,483,so pre-convert to guard this condition,
pandas/,534,TODO: min_count,
pandas/,549,We need this to ensure that Series[Int64Dtype].resample().sum(),
pandas/,550,remains int64 dtype.,
pandas/,551,Two options for avoiding this special case,
pandas/,552,1. mask-aware ops and avoid casting to float with NaN above,
pandas/,553,2. specify the result dtype when calling this method,
pandas/,571,We need to use the constructors directly for these dtypes,
pandas/,572,since numpy won't recognize them,
pandas/,573,https://github.com/pandas-dev/pandas/issues/31471,
pandas/,594,different signature from the others,
pandas/,595,TODO: should we be using min_count instead of hard-coding it?,
pandas/,612,Caller is responsible for checking ngroups != 0,
pandas/,616,SeriesGrouper would raise if we were to call _aggregate_series_fast,
pandas/,620,_aggregate_series_fast would raise TypeError when,
pandas/,621,calling libreduction.Slider,
pandas/,622,In the datetime64tz case it would incorrectly cast to tz-naive,
pandas/,623,TODO: can we get a performant workaround for EAs backed by ndarray?,
pandas/,627,Pre-empt TypeError in _aggregate_series_fast,
pandas/,634,raised in libreduction,
pandas/,641,At this point we have already checked that,
pandas/,642,- obj.index is not a MultiIndex,
pandas/,643,"- obj is backed by an ndarray, not ExtensionArray",
pandas/,644,- len(obj) > 0,
pandas/,645,- ngroups != 0,
pandas/,650,avoids object / Series creation overhead,
pandas/,673,e.g. test_agg_lambda_with_timezone lambda e: e.head(1),
pandas/,674,FIXME: are we potentially losing import res.index info?,
pandas/,685,TODO: maybe_cast_to_extension_array?,
pandas/,734,"These lengths must match, otherwise we could call agg_series",
pandas/,735,"with empty self.bins, which would raise in libreduction.",
pandas/,741,this is mainly for compat,
pandas/,742,GH 3881,
pandas/,820,"get unique result indices, and prepend 0 as groupby starts from the first",
pandas/,846,Caller is responsible for checking ngroups != 0,
pandas/,848,otherwise we'd get IndexError in get_result,
pandas/,851,pre-empt SeriesBinGrouper from raising TypeError,
pandas/,870,----------------------------------------------------------------------,
pandas/,871,Splitting / application,
pandas/,885,Sorted labels,
pandas/,890,Counting sort indexer,
pandas/,897,"we are inside a generator, rather than raise StopIteration",
pandas/,898,we merely return signal the end,
pandas/,920,"must return keys::list, values::list, mutated::bool",
pandas/,937,i.e. DataFrame,
pandas/,194,Keep self.grouper value before overriding,
pandas/,198,the key must be a valid info item,
pandas/,201,The 'on' is already defined,
pandas/,216,if a level is given it must be a mi level or,
pandas/,217,equivalent to the axis name,
pandas/,226,possibly sort,
pandas/,228,"use stable sort to support first, last, nth",
pandas/,298,right place for this?,
pandas/,305,"we have a single grouper which may be a myriad of things,",
pandas/,306,some of which are dependent on the passing in level,
pandas/,323,"a passed Grouper like, directly get the grouper in the same way",
pandas/,324,"as single grouper groupby, use the group_info to get codes",
pandas/,326,get the new grouper; we already have disambiguated,
pandas/,327,"what key/level refer to exactly, don't need to",
pandas/,328,check again as we have by this point converted these,
pandas/,329,to an actual value (rather than a pd.Grouper),
pandas/,343,a passed Categorical,
pandas/,351,we make a CategoricalIndex out of the cat grouper,
pandas/,352,preserving the categories / ordered attributes,
pandas/,369,we are done,
pandas/,373,no level passed,
pandas/,390,Try for sanity,
pandas/,393,"if we have a date/time-like grouper, make sure that we have",
pandas/,394,Timestamps like,
pandas/,417,we have a list of groupers,
pandas/,445,we have a list of groupers,
pandas/,494,validate that the passed single level is compatible with the passed,
pandas/,495,axis of the object,
pandas/,497,TODO: These if-block and else-block are almost same.,
pandas/,498,"MultiIndex instance check is removable, but it seems that there are",
pandas/,499,"some processes only for non-MultiIndex in else-block,",
pandas/,500,eg. `obj.index.name != level`. We have to consider carefully whether,
pandas/,501,"these are applicable for MultiIndex. Even if these are applicable,",
pandas/,502,we need to check if it makes no side effect to subsequent processes,
pandas/,503,on the outside of this condition.,
pandas/,504,(GH 17621),
pandas/,510,Get the level values from group_axis,
pandas/,515,allow level to be a length-one list-like object,
pandas/,516,"(e.g., level=[0])",
pandas/,517,GH 13901,
pandas/,536,NOTE: `group_axis` and `group_axis.get_level_values(level)`,
pandas/,537,are same in this section.,
pandas/,541,"a passed-in Grouper, directly convert",
pandas/,549,"already have a BaseGrouper, just return it",
pandas/,560,"what are we after, exactly?",
pandas/,567,is this an index replacement?,
pandas/,596,if the actual grouper should be obj[key],
pandas/,599,"items -> .columns for DataFrame, .index for Series",
pandas/,604,TypeError shows up here if we pass e.g. Int64Index,
pandas/,609,if the grouper is obj[name],
pandas/,620,df.groupby(df['name']),
pandas/,624,df.groupby('name'),
pandas/,635,Add key to exclusions,
pandas/,647,create the Grouping,
pandas/,648,allow us to passing the actual Grouping as the gpr,
pandas/,671,create the internals grouper,
pandas/,424,TODO: Better repr for GroupBy object,
pandas/,462,possibly convert to the actual key types,
pandas/,463,"in the indices, could be a Timestamp or a np.datetime64",
pandas/,477,Dummy sample,
pandas/,486,If the original grouper was a tuple,
pandas/,489,turns out it wasn't a tuple,
pandas/,513,Note: _selected_obj is always just `self.obj` for SeriesGroupBy,
pandas/,530,GH12839 clear cached selection too when changing group selection,
pandas/,555,GH12839 clear selected obj cache when group selection changes,
pandas/,560,set the result index on the passed values object and,
pandas/,561,"return the new object, xref 8046",
pandas/,563,the values/counts are repeated according to the group index,
pandas/,564,shortcut if we have an already ordered grouper,
pandas/,618,need to setup the selection,
pandas/,619,as are not passed directly but in the grouper,
pandas/,628,a little trickery for aggregation functions that need an axis,
pandas/,629,argument,
pandas/,637,"preserve the name so we can detect it when calling plot methods,",
pandas/,638,to avoid duplicates,
pandas/,641,special case otherwise extra plots are created when catching the,
pandas/,642,exception below,
pandas/,652,We don't have a cython implementation,
pandas/,653,TODO: is the above comment accurate?,
pandas/,657,"this can be called recursively, so need to raise ValueError",
pandas/,660,GH#3688 try to operate item-by-item,
pandas/,713,this is needed so we don't try and wrap strings. If we could,
pandas/,714,"resolve functions to their callable functions prior, this",
pandas/,715,wouldn't be needed,
pandas/,725,TODO: should we wrap this in to e.g. _is_builtin_func?,
pandas/,735,ignore SettingWithCopy here in case the user mutates,
pandas/,740,gh-20949,
pandas/,741,"try again, with .apply acting as a filtering",
pandas/,742,"operation, by excluding the grouping column",
pandas/,743,This would normally not be triggered,
pandas/,744,except if the udf is trying an operation that,
pandas/,745,"fails on *some* columns, e.g. a numeric operation",
pandas/,746,on a string grouper column,
pandas/,851,Ideally we would be able to enumerate self._iterate_slices and use,
pandas/,852,"the index from enumeration as the key of output, but ohlc in particular",
pandas/,853,"returns a (n x 4) array. Output requires 1D ndarrays as values, so we",
pandas/,854,need to slice that up into 1D arrays,
pandas/,867,e.g. ohlc,
pandas/,888,"iterate through ""columns"" ex exclusions to populate output dict",
pandas/,894,agg_series below assumes ngroups > 0,
pandas/,898,"if this function is invalid for this dtype, we will ignore it.",
pandas/,915,"since we are masking, make sure that we have a float object",
pandas/,928,reset the identities of the components,
pandas/,929,of the values to prevent aliasing,
pandas/,939,this is a very unfortunate situation,
pandas/,940,we can't use reindex to restore the original order,
pandas/,941,when the ax has duplicates,
pandas/,942,so we resort to this,
pandas/,943,"GH 14776, 30667",
pandas/,956,possible MI return case,
pandas/,971,"GH5610, returns a MI, with the first level being a",
pandas/,972,range index,
pandas/,996,mask fails to broadcast when passed to where; broadcast manually.,
pandas/,998,Fill with NaNs.,
pandas/,1002,"To track operations that expand dimensions, like ohlc",
pandas/,1147,defined here for API doc,
pandas/,1249,TODO: implement at Cython level?,
pandas/,1354,try a cython aggregation if we can,
pandas/,1368,"raised in _get_cython_function, in some cases can",
pandas/,1369,be trimmed by implementing cython funcs for more dtypes,
pandas/,1374,apply a non-cython aggregation,
pandas/,1593,Need int value for Cython,
pandas/,1754,Drop NA values in grouping,
pandas/,1770,dropna is truthy,
pandas/,1775,"Note: when agg-ing picker doesn't raise this, just returns NaN",
pandas/,1782,"old behaviour, but with all and any support for DataFrames.",
pandas/,1783,modified in GH 7559 to have better perf,
pandas/,1787,get a new grouper for our dropped obj,
pandas/,1790,we don't have the grouper info available,
pandas/,1791,(e.g. we have selected out,
pandas/,1792,a column that is not in the current object),
pandas/,1798,"create a grouper with the original parameters, but on dropped",
pandas/,1799,object,
pandas/,1815,set the results which don't meet the criteria,
pandas/,1819,reset/reindex to the original groups,
pandas/,1886,Check for edge case,
pandas/,1923,fix levels to place quantiles on the inside,
pandas/,1924,"TODO(GH-10710): Ideally, we could write this as",
pandas/,1925,">>> result.stack(0).loc[pd.IndexSlice[:, ..., q], :]",
pandas/,1926,but this hits https://github.com/pandas-dev/pandas/issues/10710,
pandas/,1927,which doesn't reorder the list-like `q` on the inner level.,
pandas/,1930,temporarily saves the index names,
pandas/,1933,set index names to positions to avoid confusion,
pandas/,1936,place quantiles on the inside,
pandas/,1939,restore the index names in order,
pandas/,1942,reorder rows to keep things sorted,
pandas/,2281,Call func to modify indexer values in place,
pandas/,2360,GH30463,
pandas/,2468,if we only care about the observed values,
pandas/,2469,we are done,
pandas/,2473,reindexing only applies to a Categorical grouper,
pandas/,2493,GH 13204,
pandas/,2494,"Here, the categorical in-axis groupers, which need to be fully",
pandas/,2495,"expanded, are columns in `output`. An idea is to do:",
pandas/,2496,output = output.set_index(self.grouper.names),
pandas/,2497,.reindex(index).reset_index(),
pandas/,2498,but special care has to be taken because of possible not-in-axis,
pandas/,2499,groupers.,
pandas/,2500,"So, we manually select and drop the in-axis grouper columns,",
pandas/,2501,"reindex `output`, and then reset the in-axis grouper columns.",
pandas/,2503,Select in-axis groupers,
pandas/,2511,Set a temp index and reindex (possibly expanding),
pandas/,2516,Reset in-axis grouper columns,
pandas/,2517,(using level numbers `g_nums` because level names may not be unique),
pandas/,107,array priority higher than numpy scalars,
pandas/,109,ABCPeriodArray,
pandas/,114,Names others delegate to us,
pandas/,138,--------------------------------------------------------------------,
pandas/,139,Constructors,
pandas/,168,alias for PeriodArray.__init__,
pandas/,189,for mypy,
pandas/,245,-----------------------------------------------------------------,
pandas/,246,DatetimeLike Interface,
pandas/,267,--------------------------------------------------------------------,
pandas/,268,Data / Attributes,
pandas/,274,error: Read-only property cannot override read-write property  [misc],
pandas/,275,type: ignore,
pandas/,288,This will raise TypeErorr for non-object dtypes,
pandas/,302,ensure we have the same freq,
pandas/,317,--------------------------------------------------------------------,
pandas/,318,Vectorized analogues of Period properties,
pandas/,440,roll forward to ensure we land on B date,
pandas/,459,--------------------------------------------------------------------,
pandas/,535,mult1 can't be negative or 0,
pandas/,549,------------------------------------------------------------------,
pandas/,550,Rendering Methods,
pandas/,577,------------------------------------------------------------------,
pandas/,580,We handle Period[T] -> Period[U],
pandas/,581,Our parent handles everything else.,
pandas/,588,------------------------------------------------------------------,
pandas/,589,Arithmetic Methods,
pandas/,596,"If the operation is well-defined, we return an object-Index",
pandas/,597,of DateOffsets.  Null entries are filled with pd.NaT,
pandas/,638,"Note: when calling parent class's _add_timedeltalike_scalar,",
pandas/,639,it will call delta_to_nanoseconds(delta).  Because delta here,
pandas/,640,"is an integer, delta_to_nanoseconds will return it unchanged.",
pandas/,655,We cannot add timedelta-like to non-tick PeriodArray,
pandas/,659,"special handling for np.timedelta64(""NaT""), avoid calling",
pandas/,660,_check_timedeltalike_freq_compat as that would raise TypeError,
pandas/,663,"Note: when calling parent class's _add_timedeltalike_scalar,",
pandas/,664,it will call delta_to_nanoseconds(delta).  Because delta here,
pandas/,665,"is an integer, delta_to_nanoseconds will return it unchanged.",
pandas/,679,We cannot add timedelta-like to non-tick PeriodArray,
pandas/,685,all-NaT TimedeltaIndex is equivalent to a single scalar td64 NaT,
pandas/,711,checked by calling function,
pandas/,719,numpy timedelta64 array; all entries must be compatible,
pandas/,722,i.e. non-nano unit,
pandas/,723,TODO: disallow unit-less timedelta64,
pandas/,727,TimedeltaArray/Index,
pandas/,731,nanos being added is an integer multiple of the,
pandas/,732,base-frequency to self.freq,
pandas/,734,delta is the integer (or integer-array) number of periods,
pandas/,735,by which will be added to self.,
pandas/,756,GH#24283 error message format depends on whether right is scalar,
pandas/,770,-------------------------------------------------------------------,
pandas/,771,Constructor Helpers,
pandas/,837,other iterable of some kind,
pandas/,956,pragma: no cover,
pandas/,103,define my properties & methods for delegation,
pandas/,117,Note: ndim must be defined to ensure NaT.__richcmp(TimedeltaArray),
pandas/,118,operates pointwise.,
pandas/,141,----------------------------------------------------------------,
pandas/,142,Constructors,
pandas/,167,"for compat with datetime/timedelta/period shared methods,",
pandas/,168,we can sometimes get here with int64 values.  These represent,
pandas/,169,nanosecond UTC (or tz-naive) unix timestamps,
pandas/,220,this condition precludes `freq_infer`,
pandas/,224,Set _freq directly to bypass duplicative _validate_frequency,
pandas/,225,check.,
pandas/,262,Infer a frequency,
pandas/,273,----------------------------------------------------------------,
pandas/,274,DatetimeLike Interface,
pandas/,286,we don't have anything to validate.,
pandas/,292,----------------------------------------------------------------,
pandas/,293,Array-Like / EA-Interface Methods,
pandas/,296,We handle,
pandas/,297,--> timedelta64[ns],
pandas/,298,--> timedelta64,
pandas/,299,DatetimeLikeArrayMixin super call handles other cases,
pandas/,303,"by pandas convention, converting to non-nano timedelta64",
pandas/,304,returns an int64-dtyped array with ints representing multiples,
pandas/,305,of the desired timedelta unit.  This is essentially division,
pandas/,307,avoid double-copying,
pandas/,321,----------------------------------------------------------------,
pandas/,322,Reductions,
pandas/,380,----------------------------------------------------------------,
pandas/,381,Rendering Methods,
pandas/,394,----------------------------------------------------------------,
pandas/,395,Arithmetic Methods,
pandas/,408,At this point we have already checked that dtype is datetime64,
pandas/,413,defer to implementation in DatetimeArray,
pandas/,417,adding a timedeltaindex to a datetimelike,
pandas/,423,"In this case we specifically interpret NaT as a datetime, not",
pandas/,424,the timedelta interpretation we would get by returning self + NaT,
pandas/,435,Add or subtract Array-like of objects,
pandas/,437,TimedeltaIndex can only operate with a subset of DateOffset,
pandas/,438,"subclasses.  Incompatible classes will raise AttributeError,",
pandas/,439,which we re-raise as TypeError,
pandas/,453,"numpy will accept float and int, raise TypeError for others",
pandas/,461,"list, tuple",
pandas/,464,Exclude timedelta64 here so we correctly raise TypeError,
pandas/,465,for that instead of ValueError,
pandas/,469,this multiplication will succeed only if all elements of other,
pandas/,470,"are int or float scalars, so we will end up with",
pandas/,471,timedelta64[ns]-dtyped result,
pandas/,476,"numpy will accept float or int dtype, raise TypeError for others",
pandas/,483,timedelta / X is well-defined for timedelta-like or numeric X,
pandas/,492,specifically timedelta64-NaT,
pandas/,497,"otherwise, dispatch to Timedelta implementation",
pandas/,501,assume it is numeric,
pandas/,505,"Tick division is not implemented, so operate on Timedelta",
pandas/,510,"e.g. list, tuple",
pandas/,517,let numpy handle it,
pandas/,521,"Note: we do not do type inference on the result, so either",
pandas/,522,an object array or numeric-dtyped (if numpy does inference),
pandas/,523,will be returned.  GH#23829,
pandas/,533,X / timedelta is defined only for timedelta-like X,
pandas/,542,specifically timedelta64-NaT,
pandas/,547,"otherwise, dispatch to Timedelta implementation",
pandas/,556,"e.g. list, tuple",
pandas/,563,let numpy handle it,
pandas/,567,"Note: unlike in __truediv__, we do not _need_ to do type",
pandas/,568,"inference on the result.  It does not raise, a numeric array",
pandas/,569,is returned.  GH#23829,
pandas/,587,treat this specifically as timedelta-NaT,
pandas/,592,dispatch to Timedelta implementation,
pandas/,596,at this point we should only have numeric scalars; anything,
pandas/,597,else will raise,
pandas/,602,"Note: freq gets division, not floor-division",
pandas/,605,e.g. if self.freq is Nano(1) then dividing by 2,
pandas/,606,rounds down to zero,
pandas/,611,"list, tuple",
pandas/,619,"numpy timedelta64 does not natively support floordiv, so operate",
pandas/,620,on the i8 values,
pandas/,653,treat this specifically as timedelta-NaT,
pandas/,658,dispatch to Timedelta implementation,
pandas/,667,"list, tuple",
pandas/,675,"numpy timedelta64 does not natively support floordiv, so operate",
pandas/,676,on the i8 values,
pandas/,694,"Note: This is a naive implementation, can likely be optimized",
pandas/,704,"Note: This is a naive implementation, can likely be optimized",
pandas/,714,"Note: This is a naive implementation, can likely be optimized",
pandas/,727,"Note: This is a naive implementation, can likely be optimized",
pandas/,748,Note: freq is not preserved,
pandas/,751,----------------------------------------------------------------,
pandas/,752,Conversion Methods - Vectorized analogues of Timedelta methods,
pandas/,879,---------------------------------------------------------------------,
pandas/,880,Constructor Helpers,
pandas/,915,Unwrap whatever we have into a np.ndarray,
pandas/,917,"e.g. list, tuple",
pandas/,919,i.e. generator,
pandas/,928,Convert whatever we have into timedelta64[ns] dtype,
pandas/,930,"no need to make a copy, need to convert if string-dtyped",
pandas/,935,treat as multiples of the given unit,
pandas/,940,"cast the unit, multiply base/frace separately",
pandas/,941,to avoid precision issues from float -> int,
pandas/,954,non-nano unit,
pandas/,955,TODO: watch out for overflows,
pandas/,960,"This includes datetime64-dtype, see GH#23539, GH#29794",
pandas/,989,"converting to int64 makes a copy, so we can avoid",
pandas/,990,re-copying later,
pandas/,998,TODO: watch out for overflows when converting from lower-resolution,
pandas/,1000,"the astype conversion makes a copy, so we can avoid re-copying later",
pandas/,1037,"coerce Index to np.ndarray, converting string-dtype if necessary",
pandas/,1047,no precision disallowed GH#24806,
pandas/,29,The value used to fill '_data' to avoid upcasting,
pandas/,33,values is supposed to already be validated in the subclass,
pandas/,151,don't pass copy to astype -> always need a copy since we are mutating,
pandas/,158,higher than ndarray so ops dispatch to us,
pandas/,177,Note: this is expensive right now! The hope is that we can,
pandas/,178,"make this faster by having an optional mask, but not have to change",
pandas/,179,source code using it..,
pandas/,205,we always fill with 1 internally,
pandas/,206,to avoid upcasting,
pandas/,214,if we are filling,
pandas/,215,we only fill where the indexer is null,
pandas/,216,not existing missing values,
pandas/,217,TODO(jreback) what if we have a non-na float as a fill value?,
pandas/,251,compute counts on the data with no nans,
pandas/,255,TODO(extension),
pandas/,256,if we have allow Index to hold an ExtensionArray,
pandas/,257,this is easier,
pandas/,260,"if we want nans, count the mask",
pandas/,76,"exclude object, str, unicode, void.",
pandas/,146,If you're wondering why pd.Series(cls) doesn't put the array in an,
pandas/,147,"ExtensionBlock, search for `ABCPandasArray`. We check for",
pandas/,148,that _typ to ensure that that users don't unnecessarily use EAs inside,
pandas/,149,"pandas internals, which turns off things like block consolidation.",
pandas/,154,------------------------------------------------------------------------,
pandas/,155,Constructors,
pandas/,192,------------------------------------------------------------------------,
pandas/,193,Data,
pandas/,199,------------------------------------------------------------------------,
pandas/,200,NumPy Array Interface,
pandas/,208,Lightly modified version of,
pandas/,209,https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/\,
pandas/,210,numpy.lib.mixins.NDArrayOperatorsMixin.html,
pandas/,211,The primary modification is not boxing scalar return values,
pandas/,212,"in PandasArray, since pandas' ExtensionArrays are 1-d.",
pandas/,215,Only support operations with instances of _HANDLED_TYPES.,
pandas/,216,Use PandasArray instead of type(self) for isinstance to,
pandas/,217,allow subclasses that don't override __array_ufunc__ to,
pandas/,218,handle PandasArray objects.,
pandas/,222,Defer to the implementation of the ufunc on unwrapped values.,
pandas/,231,multiple return values,
pandas/,233,re-box array-like results,
pandas/,236,but not scalar reductions,
pandas/,239,no return value,
pandas/,242,one return value,
pandas/,244,"re-box array-like results, but not scalar reductions",
pandas/,248,------------------------------------------------------------------------,
pandas/,249,Pandas ExtensionArray Interface,
pandas/,286,TODO(_values_for_fillna): remove this,
pandas/,305,fill with value,
pandas/,314,Primarily for subclasses,
pandas/,333,------------------------------------------------------------------------,
pandas/,334,Reductions,
pandas/,436,------------------------------------------------------------------------,
pandas/,437,Additional Methods,
pandas/,456,------------------------------------------------------------------------,
pandas/,457,Ops,
pandas/,95,these return a boolean by-definition,
pandas/,157,define my properties & methods for delegation,
pandas/,201,"ndim is inherited from ExtensionArray, must exist to ensure",
pandas/,202,Timestamp.__richcmp__(DateTimeArray) operates pointwise,
pandas/,204,ensure that operations with numpy arrays defer to our implementation,
pandas/,207,-----------------------------------------------------------------,
pandas/,208,Constructors,
pandas/,220,validation,
pandas/,247,"for compat with datetime/timedelta/period shared methods,",
pandas/,248,we can sometimes get here with int64 values.  These represent,
pandas/,249,nanosecond UTC (or tz-naive) unix timestamps,
pandas/,271,https://github.com/pandas-dev/pandas/issues/18595,
pandas/,272,Ensure that we have a standard timezone for pytz objects.,
pandas/,273,"Without this, things like adding an array of timedeltas and",
pandas/,274,a  tz-aware Timestamp (with a tz specific to its datetime) will,
pandas/,275,be incorrect(ish?) for the array as a whole,
pandas/,329,this condition precludes `freq_infer`,
pandas/,333,Set _freq directly to bypass duplicative _validate_frequency,
pandas/,334,check.,
pandas/,385,Localize the start and end arguments,
pandas/,399,We break Day arithmetic (fixed 24 hour) here and opt for,
pandas/,400,"Day to mean calendar day (23/24/25 hour). Therefore, strip",
pandas/,401,tz info from start and day to avoid DST arithmetic,
pandas/,407,TODO: consider re-implementing _cached_range; GH#17914,
pandas/,418,index is localized datetime64 array -> have to convert,
pandas/,419,start/end as well to compare,
pandas/,425,Create a linearly spaced date_range in local time,
pandas/,426,Nanosecond-granularity timestamps aren't always correctly,
pandas/,427,"representable with doubles, so we limit the range that we",
pandas/,428,pass to np.linspace as much as possible,
pandas/,446,-----------------------------------------------------------------,
pandas/,447,DatetimeLike Interface,
pandas/,464,Stricter check for setitem vs comparison methods,
pandas/,471,-----------------------------------------------------------------,
pandas/,472,Descriptive Properties,
pandas/,510,GH 18595,
pandas/,515,GH 3746: Prevent localizing or converting the index by setting tz,
pandas/,528,NB: override with cache_readonly in immutable subclasses,
pandas/,535,NB: override with cache_readonly in immutable subclasses,
pandas/,542,NB: override with cache_readonly in immutable subclasses,
pandas/,546,----------------------------------------------------------------,
pandas/,547,Array-Like / EA-Interface Methods,
pandas/,551,"The default for tz-aware is object, to preserve tz info",
pandas/,565,convert in chunks of 10k for efficiency,
pandas/,580,We handle,
pandas/,581,--> datetime,
pandas/,582,--> period,
pandas/,583,DatetimeLikeArrayMixin Super handles the rest.,
pandas/,587,GH#18951: datetime64_ns dtype but not equal means different tz,
pandas/,595,Do we want .astype('datetime64[ns]') to be an ndarray.,
pandas/,596,The astype in Block._astype expects this to return an,
pandas/,597,"ndarray, but we could maybe work around it there.",
pandas/,608,-----------------------------------------------------------------,
pandas/,609,Rendering Methods,
pandas/,620,-----------------------------------------------------------------,
pandas/,621,Comparison Methods,
pandas/,626,vzone shouldn't be None if value is non-datetime like,
pandas/,628,convert to Timestamp as np.datetime64 doesn't have tz attr,
pandas/,634,adapted from _Timestamp._assert_tzawareness_compat,
pandas/,637,Get tzinfo from Series dtype,
pandas/,640,pd.NaT quacks both aware and naive,
pandas/,652,-----------------------------------------------------------------,
pandas/,653,Arithmetic Methods,
pandas/,665,require tz compat,
pandas/,698,GH#30336 _from_sequence won't be able to infer self.tz,
pandas/,704,"subtract a datetime from myself, yielding a ndarray[timedelta64[ns]]",
pandas/,712,require tz compat,
pandas/,722,-----------------------------------------------------------------,
pandas/,723,Timezone Conversion and Localization Methods,
pandas/,801,"tz naive, use tz_localize",
pandas/,806,No conversion since timestamps are all UTC to begin with,
pandas/,969,Convert to UTC,
pandas/,978,----------------------------------------------------------------,
pandas/,979,Conversion Methods - Vectorized analogues of Timestamp methods,
pandas/,1103,https://github.com/pandas-dev/pandas/issues/33358,
pandas/,1126,TODO: consider privatizing (discussion in GH#23113),
pandas/,1133,-----------------------------------------------------------------,
pandas/,1134,Properties - Vectorized Timestamp Properties/Methods,
pandas/,1211,"If the Timestamps have a timezone that is not UTC,",
pandas/,1212,convert them into their i8 representation while,
pandas/,1213,keeping their timezone and not using UTC,
pandas/,1235,"If the Timestamps have a timezone that is not UTC,",
pandas/,1236,convert them into their i8 representation while,
pandas/,1237,keeping their timezone and not using UTC,
pandas/,1812,http://mysite.verizon.net/aesir_research/date/jdalg2.htm,
pandas/,1838,-------------------------------------------------------------------,
pandas/,1839,Constructor Helpers,
pandas/,1882,"e.g. list, tuple",
pandas/,1884,i.e. generator,
pandas/,1894,i.e. DatetimeArray/Index,
pandas/,1897,"if dtype has an embedded tz, capture it",
pandas/,1902,"Without this check, data._data below is None",
pandas/,1906,By this point we are assured to have either a numpy array or Index,
pandas/,1910,"TODO: We do not have tests specific to string-dtypes,",
pandas/,1911,also complex or categorical or other extension,
pandas/,1916,data comes back here as either i8 to denote UTC timestamps,
pandas/,1917,or M8[ns] to denote wall times,
pandas/,1923,"`data` may have originally been a Categorical[datetime64[ns, tz]],",
pandas/,1924,so we need to handle these types.,
pandas/,1926,DatetimeArray -> ndarray,
pandas/,1931,tz-naive DatetimeArray or ndarray[datetime64],
pandas/,1937,Convert tz-naive to UTC,
pandas/,1948,must be integer dtype otherwise,
pandas/,1949,assume this data are epoch timestamps,
pandas/,1958,TODO: should this be deepcopy?,
pandas/,1964,We have to call this again after possibly inferring a tz above,
pandas/,2008,"if str-dtype, convert",
pandas/,2023,"If tzaware, these values represent unix timestamps, so we",
pandas/,2024,return them as i8 to distinguish from wall times,
pandas/,2030,We can take a shortcut since the datetime64 numpy array,
pandas/,2031,is in UTC,
pandas/,2032,Return i8 values to denote unix timestamps,
pandas/,2035,returning M8[ns] denotes wall-times; since tz is None,
pandas/,2036,the distinction is a thin one,
pandas/,2039,"GH#23675 when called via `pd.to_datetime`, returning an object-dtype",
pandas/,2040,"array is allowed.  When called via `pd.DatetimeIndex`, we can",
pandas/,2041,"only accept datetime64 dtype, so raise TypeError if object-dtype",
pandas/,2042,"is returned, as that indicates the values can be recognized as",
pandas/,2043,datetimes but they have conflicting timezones/awareness,
pandas/,2047,pragma: no cover,
pandas/,2048,"GH#23675 this TypeError should never be hit, whereas the TypeError",
pandas/,2049,in the object-dtype branch above is reachable.,
pandas/,2073,e.g. collections.deque,
pandas/,2077,Note: we must cast to datetime64[ns] here in order to treat these,
pandas/,2078,as wall-times instead of UTC timestamps.,
pandas/,2081,TODO: deprecate this behavior to instead treat symmetrically,
pandas/,2082,with integer dtypes.  See discussion in GH#23675,
pandas/,2085,GH#29794 enforcing deprecation introduced in GH#23539,
pandas/,2088,"Note: without explicitly raising here, PeriodIndex",
pandas/,2089,test_setops.test_join_does_not_recur fails,
pandas/,2095,GH#18664 preserve tz in going DTI->Categorical->DTI,
pandas/,2096,"TODO: cases where we need to do another pass through this func,",
pandas/,2097,e.g. the categories are timedelta64s,
pandas/,2102,Includes categorical,
pandas/,2103,TODO: We have no tests for these,
pandas/,2110,-------------------------------------------------------------------,
pandas/,2111,Validation and Inference,
pandas/,2169,"no precision, disallowed GH#24806",
pandas/,2210,"Things like `datetime64[ns]`, which is OK for the",
pandas/,2211,"constructors, but also nonsense, which should be validated",
pandas/,2212,but not by us. We *do* allow non-existent tz errors to,
pandas/,2213,go through,
pandas/,2222,We also need to check for the case where the user passed a,
pandas/,2223,tz-naive dtype (i.e. datetime64[ns]),
pandas/,2256,infer_tzinfo raises AssertionError if passed mismatched timezones,
pandas/,2313,Make sure start and end are timezone localized if:,
pandas/,2314,1) freq = a Timedelta-like frequency (Tick),
pandas/,2315,2) freq = None i.e. generating a linspaced range,
pandas/,2317,"Note: We can't ambiguous='infer' a singular ambiguous time; however,",
pandas/,2318,we have historically defaulted ambiguous=False,
pandas/,72,TODO: Could this fail if the categories are listlike objects?,
pandas/,81,Two Categoricals can only be be compared if the categories are,
pandas/,82,"the same (maybe up to ordering, depending on ordered)",
pandas/,97,both unordered and different order,
pandas/,106,"In other series, the leads to False, so do that here too",
pandas/,119,check for NaN needed if we are not equal or larger,
pandas/,135,allow categorical vs object dtype array comparisons for equality,
pandas/,136,these are only positional comparisons,
pandas/,182,get location of key in categories.,
pandas/,183,"If a KeyError, the key isn't in categories, so logically",
pandas/,184,can't be in container either.,
pandas/,190,"loc is the location of key in categories, but also the *value*",
pandas/,191,"for key in container. So, `key` may be in categories,",
pandas/,192,"but still not in `container`. Example ('b' in categories,",
pandas/,193,but not in values):,
pandas/,194,"'b' in Categorical(['a'], categories=['a', 'b'])  # False",
pandas/,198,"if categories is an IntervalIndex, loc is an array.",
pandas/,304,"For comparisons, so that numpy uses our implementation if the compare",
pandas/,305,"ops, which raise",
pandas/,308,"tolist is not actually deprecated, just suppressed in the __dir__",
pandas/,319,"At this point, dtype is always a CategoricalDtype, but",
pandas/,320,"we may have dtype.categories be None, and we need to",
pandas/,321,infer categories in a factorization step further below,
pandas/,328,null_mask indicates missing values we want to exclude from inference.,
pandas/,329,This means: only missing values in list-likes (not arrays/ndframes).,
pandas/,332,sanitize input,
pandas/,337,sanitize_array coerces np.nan to a string under certain versions,
pandas/,338,of numpy,
pandas/,343,"By convention, empty lists result in object dtype:",
pandas/,356,"raise, as we don't have a sortable data structure and so",
pandas/,357,the user should give us one by specifying categories,
pandas/,365,FIXME,
pandas/,370,we're inferring from values,
pandas/,385,Reinsert -1 placeholders for previously removed missing values,
pandas/,459,Defer to CategoricalFormatter's formatter.,
pandas/,485,GH 10696/18593,
pandas/,492,type: ignore # GH 28770,
pandas/,555,Convert to a specialized type with `dtype` if specified.,
pandas/,569,Recode from observation order to dtype.categories order.,
pandas/,573,Sort categories and recode for unknown categories.,
pandas/,641,Avoid the implicit conversion of Int to object,
pandas/,845,remove all _codes which are larger and set to -1/NaN,
pandas/,1069,GH 10156,
pandas/,1107,na sentinel,
pandas/,1195,NA values are represented in self._codes with -1,
pandas/,1196,np.take causes NA values to take final element in new_categories,
pandas/,1208,for Series/ndarray like compat,
pandas/,1239,"since categoricals always have ndim == 1, an axis parameter",
pandas/,1240,doesn't make any sense here.,
pandas/,1277,"When we're a Categorical[ExtensionArray], like Interval,",
pandas/,1278,we need to ensure __array__ get's all the way to an,
pandas/,1279,ndarray.,
pandas/,1284,"for binary ops, use our custom dunder methods",
pandas/,1291,"for all other cases, raise for now (similarly as what happens in",
pandas/,1292,Series.__array_prepare__),
pandas/,1347,searchsorted is very performance sensitive. By converting codes,
pandas/,1348,"to same dtype as self.codes, we get much faster performance.",
pandas/,1463,"if we are a datetime and period index, return Index to keep metadata",
pandas/,1645,reorder the categories (so rank can use the float codes),
pandas/,1646,instead of passing an object array to rank,
pandas/,1717,pad / bfill,
pandas/,1720,TODO: dispatch when self.categories is EA-dtype,
pandas/,1729,If value is a dict or a Series (a dict value has already,
pandas/,1730,been converted to a Series),
pandas/,1732,"We get ndarray or Categorical if called via Series.fillna,",
pandas/,1733,where it will unwrap another aligned Series before getting here,
pandas/,1744,If value is not a dict or Series it should be a scalar,
pandas/,1843,convert user-provided `fill_value` to codes,
pandas/,1858,GH#27745 deprecate alias that other EAs dont have,
pandas/,1882,"if key is a NaN, check if any NaN is in self.",
pandas/,1922,"Strip all leading spaces, which format_array adds for columns...",
pandas/,1936,0 = no breaks,
pandas/,1940,header,
pandas/,1942,remove whitespace,
pandas/,1946,header + a whitespace,
pandas/,1952,replace to simple save space by,
pandas/,2022,require identical categories set,
pandas/,2041,"no assignments of values not in categories, but it's always ok to set",
pandas/,2042,something to np.nan,
pandas/,2049,set by position,
pandas/,2053,tuple of indexers (dataframe),
pandas/,2055,"only allow 1 dimensional slicing, but can",
pandas/,2056,"in a 2-d case be passd (slice(None),....)",
pandas/,2066,slicing in Series or Categorical,
pandas/,2070,else: array of True/False in Series or Categorical,
pandas/,2112,reduction ops,
pandas/,2254,"unlike np.unique, unique1d does not sort",
pandas/,2258,keep nan in codes,
pandas/,2261,exclude nan from indexer for categories,
pandas/,2291,fastpath to avoid re-coding,
pandas/,2345,Implement the ExtensionArray interface,
pandas/,2439,build a dict of (to replace -> value) pairs,
pandas/,2441,if to_replace is list-like and value is scalar,
pandas/,2444,if both to_replace and value are scalar,
pandas/,2447,"other cases, like if both to_replace and value are list-like or if",
pandas/,2448,"to_replace is a dict, are handled separately in NDFrame",
pandas/,2469,The Series.cat accessor,
pandas/,2635,utility routines,
pandas/,2645,Support inferring the correct extension dtype from an array of,
pandas/,2646,scalar objects. e.g.,
pandas/,2647,"Categorical(array[Period, Period], categories=PeriodIndex(...))",
pandas/,2651,exception raised in _from_sequence,
pandas/,2687,"All null anyway, so just retain the nulls",
pandas/,2690,"Same categories, so no need to actually recode",
pandas/,2709,TODO: is this reached?,
pandas/,2736,The Categorical we want to build has the same categories,
pandas/,2737,"as values but its codes are by def [0, ..., len(n_categories) - 1]",
pandas/,2742,"The value of ordered is irrelevant since we don't use cat as such,",
pandas/,2743,"but only the resulting categories, the order of which is independent",
pandas/,2744,from ordered. Set ordered to False as default. See GH #15457,
pandas/,2771,"For consistency, it should return a list of 2 lists.",
pandas/,36,noqa: F401,
pandas/,110,noqa: F811,
pandas/,115,pyarrow.ChunkedArray,
pandas/,120,TODO should optimize this without going through object array,
pandas/,181,"if the values were integer-like, validate it were actually 0/1's",
pandas/,267,The value used to fill '_data' to avoid upcasting,
pandas/,319,"For BooleanArray inputs, we apply the ufunc to ._data",
pandas/,320,and mask the result.,
pandas/,322,Not clear how to handle missing values in reductions. Raise.,
pandas/,330,"for binary ops, use our custom dunder methods",
pandas/,347,"we don't worry about scalar `x` here, since we",
pandas/,348,raise for reduce up above.,
pandas/,408,astype_nansafe converts np.nan to True,
pandas/,419,"for integer, error if there are missing values",
pandas/,423,"for float dtype, ensure we use np.nan before casting (numpy cannot",
pandas/,424,deal with pd.NA),
pandas/,428,coerce,
pandas/,589,Rely on pandas to unbox and dispatch to us.,
pandas/,639,Rely on pandas to unbox and dispatch to us.,
pandas/,658,"numpy does not handle pd.NA well as ""other"" scalar (it returns",
pandas/,659,a scalar False instead of an array),
pandas/,663,numpy will show a DeprecationWarning on invalid elementwise,
pandas/,664,"comparisons, this will raise in the future",
pandas/,670,nans propagate,
pandas/,693,coerce to a nan-aware float if needed,
pandas/,714,if we have a float operand we are by-definition,
pandas/,715,a float result,
pandas/,716,or our op is a divide,
pandas/,741,Rely on pandas to unbox and dispatch to us.,
pandas/,759,nans propagate,
pandas/,768,divmod returns a tuple,
pandas/,162,'_typ' is for pandas.core.dtypes.generic.ABCExtensionArray.,
pandas/,163,Don't override this.,
pandas/,166,------------------------------------------------------------------------,
pandas/,167,Constructors,
pandas/,168,------------------------------------------------------------------------,
pandas/,235,------------------------------------------------------------------------,
pandas/,236,Must be a Sequence,
pandas/,237,------------------------------------------------------------------------,
pandas/,240,type (Any) -> Any,
pandas/,296,Some notes to the ExtensionArray implementor who may have ended up,
pandas/,297,"here. While this method is not required for the interface, if you",
pandas/,298,"*do* choose to implement __setitem__, then some semantics should be",
pandas/,299,observed:,
pandas/,300,,
pandas/,301,* Setting multiple values : ExtensionArrays should support setting,
pandas/,302,"multiple values at once, 'key' will be a sequence of integers and",
pandas/,303,'value' will be a same-length sequence.,
pandas/,304,,
pandas/,305,"* Broadcasting : For a sequence 'key' and a scalar 'value',",
pandas/,306,each position in 'key' should be set to 'value'.,
pandas/,307,,
pandas/,308,* Coercion : Most users will expect basic coercion to work. For,
pandas/,309,"example, a string like '2018-01-01' is coerced to a datetime",
pandas/,310,"when setting on a datetime64ns array. In general, if the",
pandas/,311,"__init__ method coerces that value, then so should __setitem__",
pandas/,312,"Note, also, that Series/DataFrame.where internally use __setitem__",
pandas/,313,on a copy of the data.,
pandas/,330,This needs to be implemented so that pandas recognizes extension,
pandas/,331,arrays as list-like. The default implementation makes successive,
pandas/,332,"calls to ``__getitem__``, which may be slower than necessary.",
pandas/,371,------------------------------------------------------------------------,
pandas/,372,Required attributes,
pandas/,373,------------------------------------------------------------------------,
pandas/,408,"If this is expensive to compute, return an approximate lower bound",
pandas/,409,on the number of bytes needed.,
pandas/,412,------------------------------------------------------------------------,
pandas/,413,Additional Methods,
pandas/,414,------------------------------------------------------------------------,
pandas/,472,Note: this is used in `ExtensionArray.argsort`.,
pandas/,501,Implementor note: You have two places to override the behavior of,
pandas/,502,argsort.,
pandas/,503,1. _values_for_argsort : construct the values passed to np.argsort,
pandas/,504,2. argsort : total control over sorting.,
pandas/,555,fill with value,
pandas/,607,Note: this implementation assumes that `self.dtype.na_value` can be,
pandas/,608,stored in an instance of your ExtensionArray with `self.dtype`.,
pandas/,677,Note: the base tests provided by pandas only test the basics.,
pandas/,678,We do not test,
pandas/,679,1. Values outside the range of the `data_for_sorting` fixture,
pandas/,680,2. Values between the values in the `data_for_sorting` fixture,
pandas/,681,3. Missing values.,
pandas/,740,Implementer note: There are two ways to override the behavior of,
pandas/,741,pandas.factorize,
pandas/,742,1. _values_for_factorize and _from_factorize.,
pandas/,743,Specify the values passed to pandas' internal factorization,
pandas/,744,"routines, and how to convert from those values back to the",
pandas/,745,original ExtensionArray.,
pandas/,746,2. ExtensionArray.factorize.,
pandas/,747,Complete control over factorization.,
pandas/,808,------------------------------------------------------------------------,
pandas/,809,Indexing methods,
pandas/,810,------------------------------------------------------------------------,
pandas/,894,Implementer note: The `fill_value` parameter should be a user-facing,
pandas/,895,"value, an instance of self.dtype.type. When passed `fill_value=None`,",
pandas/,896,the default of `self.dtype.na_value` should be used.,
pandas/,897,This may differ from the physical storage type your ExtensionArray,
pandas/,898,"uses. In this case, your implementation is responsible for casting",
pandas/,899,"the user-facing type to the storage type, before using",
pandas/,900,pandas.api.extensions.take,
pandas/,927,NB:,
pandas/,928,"- This must return a *new* object referencing the same data, not self.",
pandas/,929,"- The only case that *must* be implemented is with dtype=None,",
pandas/,930,giving a view with the same dtype as self.,
pandas/,935,------------------------------------------------------------------------,
pandas/,936,Printing,
pandas/,937,------------------------------------------------------------------------,
pandas/,942,"the short repr has no trailing newline, while the truncated",
pandas/,943,"repr does. So we include a newline in our template, and strip",
pandas/,944,any trailing newlines from format_object_summary,
pandas/,979,------------------------------------------------------------------------,
pandas/,980,Reshaping,
pandas/,981,------------------------------------------------------------------------,
pandas/,1019,The _can_hold_na attribute is set to True so that pandas internals,
pandas/,1020,will use the ExtensionDtype.na_value as the NA value in operations,
pandas/,1021,"such as take(), reindex(), shift(), etc.  In addition, those results",
pandas/,1022,will then be of the ExtensionArray subclass rather than an array,
pandas/,1023,of objects,
pandas/,1175,Assume its an object,
pandas/,1180,rely on pandas to unbox and dispatch to us,
pandas/,1186,"If the operator is not defined for the underlying objects,",
pandas/,1187,a TypeError should be raised,
pandas/,1192,https://github.com/pandas-dev/pandas/issues/22850,
pandas/,1193,"We catch all regular exceptions here, and fall back",
pandas/,1194,to an ndarray.,
pandas/,1197,exception raised in _from_sequence; ensure we have ndarray,
pandas/,68,GH#18435 strings get a pass from tzawareness compat,
pandas/,71,failed to parse as Timestamp/Timedelta/Period,
pandas/,92,TODO: could use pd.Index to do inference?,
pandas/,99,We have to use comp_method_OBJECT_ARRAY instead of numpy,
pandas/,100,comparison otherwise it would fail to raise when,
pandas/,101,comparing tz-aware and tz-naive,
pandas/,112,For PeriodDType this casting is unnecessary,
pandas/,372,round the local times,
pandas/,374,"operate on naive timestamps, then convert back to aware",
pandas/,411,GH#29843,
pandas/,413,Always valid,
pandas/,416,"Always valid.  In the TimedeltaArray case, we assume this",
pandas/,417,is a Tick offset.,
pandas/,420,"As an internal method, we can ensure this assertion always holds",
pandas/,449,Note: we drop any freq,
pandas/,454,Note: we drop any freq,
pandas/,484,do not cache or you'll create a memory leak,
pandas/,487,----------------------------------------------------------------,
pandas/,488,Rendering Methods,
pandas/,501,TODO: Remove Datetime & DatetimeTZ formatters.,
pandas/,504,----------------------------------------------------------------,
pandas/,505,Array-Like / EA-Interface Methods,
pandas/,512,"used for Timedelta/DatetimeArray, overwritten by PeriodArray",
pandas/,542,i.e. self.ndim == 1,
pandas/,547,"first convert to boolean, because check_array_indexer doesn't",
pandas/,548,allow object dtype,
pandas/,555,"see https://github.com/pandas-dev/pandas/issues/31299, need to allow",
pandas/,556,this for now (would otherwise raise in check_array_indexer),
pandas/,572,"GH#21282 indexing with Ellipsis is similar to a full slice,",
pandas/,573,should preserve `freq` attribute,
pandas/,586,"I'm fudging the types a bit here. ""Any"" above really depends",
pandas/,587,"on type(self). For PeriodArray, it's Period (or stuff coercible",
pandas/,588,"to a period in from_sequence). For DatetimeArray, it's Timestamp...",
pandas/,589,"I don't know if mypy can do that, possibly with Generics.",
pandas/,590,https://mypy.readthedocs.io/en/latest/generics.html,
pandas/,632,inplace operations like __setitem__ may invalidate the freq of,
pandas/,633,DatetimeArray and TimedeltaArray,
pandas/,637,Some notes on cases we don't have to handle here in the base class:,
pandas/,638,1. PeriodArray.astype handles period -> period,
pandas/,639,2. DatetimeArray.astype handles conversion between tz.,
pandas/,640,3. DatetimeArray.astype handles datetime -> period,
pandas/,650,we deliberately ignore int32 vs. int64 here.,
pandas/,651,See https://github.com/pandas-dev/pandas/issues/24381 for more.,
pandas/,655,"Again, we ignore int32 vs. int64",
pandas/,665,"disallow conversion between datetime/timedelta,",
pandas/,666,and conversions for any datetimelike to float,
pandas/,679,------------------------------------------------------------------,
pandas/,680,ExtensionArray Interface,
pandas/,728,do not pass tz to set because tzlocal cannot be hashed,
pandas/,741,"GH 3232: If the concat result is evenly spaced, we can retain the",
pandas/,742,original frequency,
pandas/,775,only warn if we're not going to raise,
pandas/,777,kludge for #31971 since Period(integer) tries to cast to str,
pandas/,782,stacklevel here is chosen to be correct when called from,
pandas/,783,DataFrame.shift or Series.shift,
pandas/,799,------------------------------------------------------------------,
pandas/,800,Additional array methods,
pandas/,801,"These are not part of the EA API, but we implement them because",
pandas/,802,pandas assumes they're there.,
pandas/,861,"TODO: Use datetime64 semantics for sorting, xref GH#29844",
pandas/,905,TODO(GH-23179): Add ExtensionArray.map,
pandas/,906,Need to figure out if we want ExtensionArray.map first.,
pandas/,907,"If so, then we can refactor IndexOpsMixin._map_values to",
pandas/,908,a standalone function and call from here..,
pandas/,909,"Else, just rewrite _map_infer_values to do the right thing.",
pandas/,914,------------------------------------------------------------------,
pandas/,915,Null Handling,
pandas/,920,NB: override with cache_readonly in immutable subclasses,
pandas/,927,NB: override with cache_readonly in immutable subclasses,
pandas/,960,TODO(GH-20300): remove this,
pandas/,961,Just overriding to ensure that we avoid an astype(object).,
pandas/,962,Either 20300 or a `_values_for_fillna` would avoid this duplication.,
pandas/,987,"For PeriodArray self._data is i8, which gets copied",
pandas/,988,by `func`.  Otherwise we need to make a copy manually,
pandas/,989,to avoid modifying `self` in-place.,
pandas/,994,we need to pass int64 values to the constructor to avoid,
pandas/,995,re-localizing incorrectly,
pandas/,999,fill with value,
pandas/,1006,------------------------------------------------------------------,
pandas/,1007,Frequency Properties/Methods,
pandas/,1033,NB: override with cache_readonly in immutable subclasses,
pandas/,1047,NB: override with cache_readonly in immutable subclasses,
pandas/,1051,NB: override with cache_readonly in immutable subclasses,
pandas/,1072,Frequency validation is not meaningful for Period Array/Index,
pandas/,1087,non-fixed frequencies are not meaningful for timedelta64;,
pandas/,1088,we retain that error message,
pandas/,1090,GH#11587 the main way this is reached is if the `np.array_equal`,
pandas/,1091,check above is False.  This can also be reached if index[0],
pandas/,1092,"is `NaT`, in which case the call to `cls._generate_range` will",
pandas/,1093,"raise a ValueError, which we re-raise with a more targeted",
pandas/,1094,message.,
pandas/,1100,"monotonicity/uniqueness properties are called via frequencies.infer_freq,",
pandas/,1101,see GH#23789,
pandas/,1115,------------------------------------------------------------------,
pandas/,1116,Arithmetic Methods,
pandas/,1119,pow is invalid for all three subclasses; TimedeltaArray will override,
pandas/,1120,the multiplication and division ops,
pandas/,1135,Overridden by TimedeltaArray,
pandas/,1141,Overridden by DatetimeArray,
pandas/,1148,Overridden by PeriodArray,
pandas/,1163,"i.e np.timedelta64(""NaT""), not recognized by delta_to_nanoseconds",
pandas/,1176,adding a scalar preserves freq,
pandas/,1180,fastpath that doesnt require inference,
pandas/,1192,overridden by PeriodArray,
pandas/,1198,ndarray[timedelta64]; wrap in TimedeltaIndex for op,
pandas/,1223,GH#19124 pd.NaT is treated like a timedelta for both timedelta,
pandas/,1224,and datetime dtypes,
pandas/,1233,GH#19124 Timedelta - datetime is not in general well-defined.,
pandas/,1234,"We make an exception for pd.NaT, which in this case quacks",
pandas/,1235,like a timedelta.,
pandas/,1236,"For datetime64 dtypes by convention we treat NaT as a datetime, so",
pandas/,1237,this subtraction returns a timedelta64 dtype.,
pandas/,1238,"For period dtype, timedelta64 is a close-enough return dtype.",
pandas/,1302,Caller is responsible for broadcasting if necessary,
pandas/,1333,immutable so OK,
pandas/,1342,"Note: in the DatetimeTZ case, _generate_range will infer the",
pandas/,1343,"appropriate timezone from `start` and `end`, so tz does not need",
pandas/,1344,to be passed explicitly.,
pandas/,1350,scalar others,
pandas/,1356,specifically _not_ a Tick,
pandas/,1361,This check must come after the check for np.timedelta64,
pandas/,1362,as is_integer returns True for these,
pandas/,1367,array-like others,
pandas/,1369,"TimedeltaIndex, ndarray[timedelta64]",
pandas/,1372,e.g. Array/Index of DateOffset objects,
pandas/,1375,"DatetimeIndex, ndarray[datetime64]",
pandas/,1382,"Includes Categorical, other ExtensionArrays",
pandas/,1383,"For PeriodDtype, if self is a TimedeltaArray and other is a",
pandas/,1384,"PeriodArray with  a timedelta-like (i.e. Tick) freq, this",
pandas/,1385,operation is valid.  Defer to the PeriodArray implementation.,
pandas/,1386,"In remaining cases, this will end up raising TypeError.",
pandas/,1396,alias for __add__,
pandas/,1402,scalar others,
pandas/,1408,specifically _not_ a Tick,
pandas/,1413,This check must come after the check for np.timedelta64,
pandas/,1414,as is_integer returns True for these,
pandas/,1422,array-like others,
pandas/,1424,"TimedeltaIndex, ndarray[timedelta64]",
pandas/,1427,e.g. Array/Index of DateOffset objects,
pandas/,1430,"DatetimeIndex, ndarray[datetime64]",
pandas/,1433,PeriodIndex,
pandas/,1440,"Includes ExtensionArrays, float_dtype",
pandas/,1451,"ndarray[datetime64] cannot be subtracted from self, so",
pandas/,1452,we need to wrap in DatetimeArray/Index and flip the operation,
pandas/,1454,i.e. np.datetime64 object,
pandas/,1457,Avoid down-casting DatetimeIndex,
pandas/,1467,"GH#19959 datetime - datetime is well-defined as timedelta,",
pandas/,1468,but any other type - datetime is not well-defined.,
pandas/,1473,TODO: Can we simplify/generalize these cases at all?,
pandas/,1477,"need to subtract before negating, since that flips freq",
pandas/,1478,"-self flips self.freq, messing up results",
pandas/,1485,type: ignore,
pandas/,1490,"restore freq, which is invalidated by setitem",
pandas/,1494,type: ignore,
pandas/,1499,"restore freq, which is invalidated by setitem",
pandas/,1503,--------------------------------------------------------------,
pandas/,1504,Reductions,
pandas/,1529,Period._from_ordinal does not handle np.nan gracefully,
pandas/,1544,TODO: skipna is broken with max.,
pandas/,1545,See https://github.com/pandas-dev/pandas/issues/24265,
pandas/,1558,short-circuit for empty max / min,
pandas/,1562,"Don't have to worry about NA `result`, since no NA went in.",
pandas/,1591,See discussion in GH#24757,
pandas/,1607,short-circuit for empty max / min,
pandas/,1611,"Don't have to worry about NA `result`, since no NA went in.",
pandas/,1617,-------------------------------------------------------------------,
pandas/,1618,Shared Constructor Helpers,
pandas/,1733,"if a passed freq is None, don't infer automatically",
pandas/,42,the pyarrow extension types are only available for pyarrow 0.15+,
pandas/,46,attributes need to be set first before calling,
pandas/,47,super init (as that calls serialize),
pandas/,73,register the type with a dummy instance,
pandas/,79,attributes need to be set first before calling,
pandas/,80,super init (as that calls serialize),
pandas/,122,register the type with a dummy instance,
pandas/,23,noqa: F401,
pandas/,57,: StringDtype.na_value uses pandas.NA,
pandas/,84,noqa: F811,
pandas/,89,pyarrow.ChunkedArray,
pandas/,94,using _from_sequence to ensure None is converted to NA,
pandas/,171,undo the PandasArray hack,
pandas/,202,Standardize all missing-like values to NA,
pandas/,203,TODO: it would be nice to do this in _validate / lib.is_string_array,
pandas/,204,We are already doing a scan over the values there.,
pandas/,208,"force a copy now, if we haven't already",
pandas/,240,extract_array doesn't extract PandasArray subclasses,
pandas/,249,validate new items,
pandas/,266,TODO: validate dtype,
pandas/,292,Override parent because we have different return types.,
pandas/,295,Note: this handles both arithmetic and comparison methods.,
pandas/,312,prevent improper broadcasting when other is 2D,
pandas/,326,logical,
pandas/,41,cannot just use e = Timestamp(end) + 1 because arange breaks when,
pandas/,42,"stride is too large, see GH10887",
pandas/,44,end.tz == start.tz by this point due to _generate implementation,
pandas/,61,"If the range is sufficiently large, np.arange may overflow",
pandas/,62,and incorrectly return an empty array if not caught.,
pandas/,73,start and end should have the same timezone by this point,
pandas/,113,GH#14187 raise instead of incorrectly wrapping around,
pandas/,120,"if periods * strides cannot be multiplied within the *uint64* bounds,",
pandas/,121,"we cannot salvage the operation by recursing, so raise",
pandas/,128,relatively easy case without casting concerns,
pandas/,134,no chance of not-overflowing,
pandas/,138,in _generate_regular_range we added `stride` thereby overflowing,
pandas/,139,the bounds.  Adjust to fix this.,
pandas/,144,split into smaller pieces,
pandas/,167,easy case with no overflows,
pandas/,170,with endpoint negative and addend positive we risk,
pandas/,171,FloatingPointError; with reversed signed we risk OverflowError,
pandas/,174,"if stride and endpoint had opposite signs, then endpoint + addend",
pandas/,175,should never overflow.  so they must have the same signs,
pandas/,179,watch out for very special case in which we just slightly,
pandas/,180,"exceed implementation bounds, but when passing the result to",
pandas/,181,np.arange will get a result slightly within the bounds,
pandas/,163,don't allow scalars,
pandas/,171,might need to convert empty or purely na data,
pandas/,198,GH 19262: dtype must be an IntervalDtype to override inferred,
pandas/,207,coerce dtypes to match if needed,
pandas/,220,GH 19016,
pandas/,250,An empty array returns object-dtype here. We can't create,
pandas/,251,"a new IA from an (empty) object-dtype array, so turn it into the",
pandas/,252,correct dtype.,
pandas/,439,ensure that empty data keeps input dtype,
pandas/,448,"need list of length 2 tuples, e.g. [(0, 1), (1, 2), ...]",
pandas/,490,---------,
pandas/,491,Interface,
pandas/,492,---------,
pandas/,504,scalar,
pandas/,509,GH#30588 multi-dimensional indexer disallowed,
pandas/,516,na value: need special casing to set directly on numpy arrays,
pandas/,520,can't set NaN on a numpy integer array,
pandas/,523,need proper NaT to set directly on the numpy array,
pandas/,526,need proper NaT to set directly on the numpy array,
pandas/,530,scalar interval,
pandas/,536,list-like of intervals,
pandas/,541,wrong type: not interval or NA,
pandas/,550,"Need to ensure that left and right are updated atomically, so we're",
pandas/,551,"forced to copy, update the copy, and swap in the new values.",
pandas/,561,ensure pandas array for list-like and eliminate non-interval scalars,
pandas/,567,non-interval scalar -> no matches,
pandas/,570,determine the dtype of the elements we want to compare,
pandas/,576,for categorical defer to categories for dtype,
pandas/,579,extract intervals if we have interval categories with matching closed,
pandas/,585,interval-like -> need same closed and matching endpoints,
pandas/,591,non-interval/non-object dtype -> no matches,
pandas/,595,object dtype -> iteratively check for intervals,
pandas/,598,need object to be an Interval with same closed and endpoints,
pandas/,686,need to cast to different subtype,
pandas/,698,TODO: This try/except will be repeated.,
pandas/,751,TODO: Could skip verify_integrity here.,
pandas/,763,Avoid materializing self.values,
pandas/,773,ExtensionArray.shift doesn't work for two reasons,
pandas/,774,1. IntervalArray.dtype.na_value may not be correct for the dtype.,
pandas/,775,"2. IntervalArray._from_sequence only accepts NaN for missing values,",
pandas/,776,not other values like NaT,
pandas/,882,TODO: implement this is a non-naive way!,
pandas/,885,Formatting,
pandas/,889,TODO: integrate with categorical and make generic,
pandas/,890,name argument is unused here; just for compat with base / categorical,
pandas/,922,"the short repr has no trailing newline, while the truncated",
pandas/,923,"repr does. So we include a newline in our template, and strip",
pandas/,924,any trailing newlines from format_object_summary,
pandas/,1023,"length not defined for some types, e.g. string",
pandas/,1038,datetime safe version,
pandas/,1048,https://github.com/python/mypy/issues/1362,
pandas/,1049,Mypy does not support decorated properties,
pandas/,1050,type: ignore,
pandas/,1055,"must be increasing  (e.g., [0, 1), [1, 2), [2, 3), ... )",
pandas/,1056,"or decreasing (e.g., [-1, 0), [-2, -1), [-3, -2), ...)",
pandas/,1057,we already require left <= right,
pandas/,1059,strict inequality for closed == 'both'; equality implies overlapping,
pandas/,1060,at a point when both sides of intervals are included,
pandas/,1067,non-strict inequality when closed != 'both'; at least one side is,
pandas/,1068,"not included in the intervals, so equality does not imply overlapping",
pandas/,1074,Conversion,
pandas/,1117,"if there are missing values, set validity bitmap also on the array level",
pandas/,1130,ensure we have the same subtype and closed attributes,
pandas/,1169,GH 18756,
pandas/,1300,equality is okay if both endpoints are closed (overlap at a point),
pandas/,1304,overlaps is equivalent negation of two interval being disjoint:,
pandas/,1305,disjoint = (A.left > B.right) or (B.left > A.right),
pandas/,1306,(simplifying the negation allows this to be done in less operations),
pandas/,1327,GH 19016,
pandas/,1328,"empty lists/tuples get object dtype by default, but this is",
pandas/,1329,"prohibited for IntervalArray, so coerce to integer instead",
pandas/,39,noqa: F401,
pandas/,104,noqa: F811,
pandas/,114,pyarrow.ChunkedArray,
pandas/,187,"if values is integer numpy array, preserve it's dtype",
pandas/,196,"Avoid DeprecationWarning from NumPy about np.dtype(""Int64"")",
pandas/,197,https://github.com/numpy/numpy/pull/7476,
pandas/,247,infer dtype if needed,
pandas/,253,"if we are float, let's make sure that we can",
pandas/,254,safely cast,
pandas/,256,we copy as need to coerce here,
pandas/,337,The value used to fill '_data' to avoid upcasting,
pandas/,370,"For IntegerArray inputs, we apply the ufunc to ._data",
pandas/,371,and mask the result.,
pandas/,373,Not clear how to handle missing values in reductions. Raise.,
pandas/,381,"for binary ops, use our custom dunder methods",
pandas/,398,"we don't worry about scalar `x` here, since we",
pandas/,399,raise for reduce up above.,
pandas/,456,if we are astyping to an existing IntegerDtype we can fastpath,
pandas/,464,coerce,
pandas/,466,"In astype, we consider dtype=float to also mean na_value=np.nan",
pandas/,477,TODO: https://github.com/pandas-dev/pandas/issues/30037,
pandas/,478,"use masked algorithms, rather than object-dtype / np.nan.",
pandas/,523,"numpy does not handle pd.NA well as ""other"" scalar (it returns",
pandas/,524,a scalar False instead of an array),
pandas/,525,This may be fixed by NA.__array_ufunc__. Revisit this check,
pandas/,526,once that's implemented.,
pandas/,531,numpy may show a FutureWarning:,
pandas/,532,"elementwise comparison failed; returning scalar instead,",
pandas/,533,but in the future will perform elementwise comparison,
pandas/,534,before returning NotImplemented. We fall back to the correct,
pandas/,535,"behavior today, so that should be fine to ignore.",
pandas/,544,nans propagate,
pandas/,563,coerce to a nan-aware float if needed,
pandas/,564,(we explicitly use NaN within reductions),
pandas/,585,if we have a float operand we are by-definition,
pandas/,586,a float result,
pandas/,587,or our op is a divide,
pandas/,634,1 ** x is 1.,
pandas/,636,x ** 0 is 1.,
pandas/,643,1 ** x is 1.,
pandas/,648,x ** 0 is 1.,
pandas/,657,divmod returns a tuple,
pandas/,692,create the Dtype,
pandas/,54,----------------------------------------------------------------------------,
pandas/,55,Array,
pandas/,105,For lookups in _libs.sparse we need non-dunder op name,
pandas/,108,dtype used to find corresponding sparse method,
pandas/,117,TODO(GH-23092): pass copy=False. Need to fix astype_nansafe,
pandas/,124,dtype the result must have,
pandas/,148,"to make template simple, cast here",
pandas/,180,e.g. __eq__ --> eq,
pandas/,189,fill_value may be np.bool_,
pandas/,271,register ABCSparseArray,
pandas/,290,"disable normal inference on dtype, sparse_index, & fill_value",
pandas/,297,"TODO: make kind=None, and use data.kind?",
pandas/,300,Handle use-provided dtype,
pandas/,302,"Two options: dtype='int', regular numpy dtype",
pandas/,303,"or dtype='Sparse[int]', a sparse dtype",
pandas/,335,TODO: disentangle the fill_value dtype inference from,
pandas/,336,dtype inference,
pandas/,338,XXX: What should the empty dtype be? Object or float?,
pandas/,343,probably shared code in sanitize_series,
pandas/,347,"NumPy may raise a ValueError on data like [1, []]",
pandas/,348,we retry with object dtype here.,
pandas/,356,TODO: avoid double copy when dtype forces cast.,
pandas/,372,EA,
pandas/,440,our sparse index classes require that the positions be strictly,
pandas/,441,"increasing. So we need to sort loc, and arr accordingly.",
pandas/,458,Compat for na dtype and int values.,
pandas/,461,Can NumPy represent this type?,
pandas/,462,"If not, `np.result_type` will raise. We catch that",
pandas/,463,and return object.,
pandas/,465,"However, we *do* special-case the common case of",
pandas/,466,a datetime64 with pandas NaT.,
pandas/,468,Can't put pd.NaT in a datetime64[ns],
pandas/,480,I suppose we could allow setting of non-fill_value elements.,
pandas/,481,TODO(SparseArray.__setitem__): remove special cases in,
pandas/,482,ExtensionBlock.where,
pandas/,494,------------------------------------------------------------------------,
pandas/,495,Data,
pandas/,496,------------------------------------------------------------------------,
pandas/,595,"If null fill value, we want SparseDtype[bool, true]",
pandas/,596,to preserve the same memory usage.,
pandas/,648,This is essentially just updating the dtype.,
pandas/,666,just coerce up front,
pandas/,709,Still override this for hash_pandas_object,
pandas/,713,"Currently, ExtensionArray.factorize -> Tuple[ndarray, EA]",
pandas/,714,The sparsity on this is backwards from what Sparse would want. Want,
pandas/,715,"ExtensionArray.factorize -> Tuple[EA, EA]",
pandas/,716,"Given that we have to return a dense array of codes, why bother",
pandas/,717,implementing an efficient factorize?,
pandas/,759,--------,
pandas/,760,Indexing,
pandas/,761,--------,
pandas/,764,avoid mypy issues when importing at the top-level,
pandas/,777,special case to preserve dtypes,
pandas/,780,TODO: this logic is surely elsewhere,
pandas/,781,TODO: this could be more efficient,
pandas/,785,TODO: I think we can avoid densifying when masking a,
pandas/,786,boolean SparseArray with another. Need to look at the,
pandas/,787,"key's fill_value for True / False, and then do an intersection",
pandas/,788,on the indicies of the sp_values.,
pandas/,855,Empty... Allow taking only if all empty,
pandas/,867,Avoid taking from the empty self.sp_values,
pandas/,876,sp_indexer may be -1 for two reasons,
pandas/,877,1.) we took for an index of -1 (new),
pandas/,878,2.) we took a value that was self.fill_value (old),
pandas/,882,Fill in two steps.,
pandas/,883,Old fill values,
pandas/,884,New fill values,
pandas/,885,potentially coercing to a new dtype at each stage.,
pandas/,920,edge case in take...,
pandas/,921,I think just return,
pandas/,935,TODO: may need to coerce array to fill value,
pandas/,960,"np.nan isn't a singleton, so we may end up with multiple",
pandas/,961,"NaNs here, so we ignore tha all NA case too.",
pandas/,991,TODO: wraparound,
pandas/,1002,"when concatenating block indices, we don't claim that you'll",
pandas/,1003,get an identical index as concating the values and then,
pandas/,1004,creating a new index. We don't want to spend the time trying,
pandas/,1005,"to merge blocks across arrays in `to_concat`, so the resulting",
pandas/,1006,BlockIndex may have more blocs.,
pandas/,1128,this is used in apply.,
pandas/,1129,"We get hit since we're an ""is_extension_type"" but regular extension",
pandas/,1130,types are not hit. This may be worth adding to the interface.,
pandas/,1155,------------------------------------------------------------------------,
pandas/,1156,IO,
pandas/,1157,------------------------------------------------------------------------,
pandas/,1161,Compat for pandas < 0.24.0,
pandas/,1178,------------------------------------------------------------------------,
pandas/,1179,Reductions,
pandas/,1180,------------------------------------------------------------------------,
pandas/,1193,we don't support these kwargs.,
pandas/,1194,"They should only be present when called via pandas, so do it here.",
pandas/,1195,"instead of in `any` / `all` (which will raise if they're present,",
pandas/,1196,thanks to nv.validate,
pandas/,1281,Mimic ndarray behaviour.,
pandas/,1325,------------------------------------------------------------------------,
pandas/,1326,Ufuncs,
pandas/,1327,------------------------------------------------------------------------,
pandas/,1338,"for binary ops, use our custom dunder methods",
pandas/,1346,No alignment necessary.,
pandas/,1351,multiple outputs. e.g. modf,
pandas/,1360,e.g. reductions,
pandas/,1376,no return value,
pandas/,1384,------------------------------------------------------------------------,
pandas/,1385,Ops,
pandas/,1386,------------------------------------------------------------------------,
pandas/,1427,TODO: look into _wrap_result,
pandas/,1452,convert list-like to ndarray,
pandas/,1456,TODO: make this more flexible than just ndarray...,
pandas/,1493,----------,
pandas/,1494,Formatting,
pandas/,1495,-----------,
pandas/,1503,Defer to the formatter from the GenericArrayFormatter calling us.,
pandas/,1504,This will infer the correct formatter from the dtype of the values.,
pandas/,1540,cast to object comparison to be safe,
pandas/,1545,element-wise equality check method in numpy doesn't treat,
pandas/,1546,"each element type, eg. 0, 0.0, and False are treated as",
pandas/,1547,same. So we have to check the both of its type and value.,
pandas/,1554,the arr is a SparseArray,
pandas/,1563,TODO: copy,
pandas/,1574,pragma: no cover,
pandas/,25,index and column levels must be a partition of the index,
pandas/,28,from the sparse Series: get the labels and data for non-null entries,
pandas/,35,TODO: how to do this better? cleanly slice nonnull_labels given the,
pandas/,36,coord,
pandas/,41,# performance issues with groupby,
pandas/,42,TODO: these two lines can replace the code below but,
pandas/,43,groupby is too slow (in some cases at least),
pandas/,44,"labels_to_i = ss.groupby(level=levels, sort=sort_labels).first()",
pandas/,45,labels_to_i[:] = np.arange(labels_to_i.shape[0]),
pandas/,52,squish,
pandas/,74,,
pandas/,75,,
pandas/,103,"to keep things simple, only rely on integer indexing (not labels)",
pandas/,144,is there a better constructor method to use here?,
pandas/,262,"We need to make sure indices are sorted, as we create",
pandas/,263,IntIndex with no input validation (i.e. check_integrity=False ).,
pandas/,264,Indices may already be sorted in scipy in which case this adds,
pandas/,265,a small overhead.,
pandas/,1,flake8: noqa: F401,
pandas/,23,noqa: F401,
pandas/,64,We include `_is_na_fill_value` in the metadata to avoid hash collisions,
pandas/,65,"between SparseDtype(float, 0.0) and SparseDtype(float, nan).",
pandas/,66,"Without is_na_fill_value in the comparison, those would be equal since",
pandas/,67,hash(nan) is (sometimes?) 0.,
pandas/,90,Python3 doesn't inherit __hash__ when a base class overrides,
pandas/,91,"__eq__, so we explicitly do it here.",
pandas/,95,We have to override __eq__ to handle NA values in _metadata.,
pandas/,96,"The base class does simple == checks, which fail for NA.",
pandas/,106,this case is complicated by two things:,
pandas/,107,"SparseDtype(float, float(nan)) == SparseDtype(float, np.nan)",
pandas/,108,"SparseDtype(float, np.nan)     != SparseDtype(float, pd.NaT)",
pandas/,109,"i.e. we want to treat any floating-point NaN as equal, but",
pandas/,110,not a floating-point NaN and a datetime NaT.,
pandas/,181,noqa: F811,
pandas/,53,---------------------------------------------------------------------,
pandas/,54,BlockManager Interface,
pandas/,68,"figure out the index, if necessary",
pandas/,74,don't force copy because getting jammed in an ndarray anyway,
pandas/,82,from BlockManager perspective,
pandas/,92,essentially process a record array then fill it,
pandas/,105,fill if needed,
pandas/,108,"TODO: numpy docs suggest fv must be scalar, but could it be",
pandas/,109,non-scalar for object dtype?,
pandas/,117,create the manager,
pandas/,129,---------------------------------------------------------------------,
pandas/,130,DataFrame Constructor Interface,
pandas/,134,"input must be a ndarray, list, Series, index",
pandas/,145,zero len case (GH #2234),
pandas/,149,we could have a categorical type passed or coerced to 'category',
pandas/,150,recast this to an arrays_to_mgr,
pandas/,164,GH#19157,
pandas/,167,"GH#12513 a EA dtype passed with a 2D array, split into",
pandas/,168,multiple EAs that view the values,
pandas/,178,by definition an array here,
pandas/,179,the dtypes will be coerced to a single dtype,
pandas/,187,e.g. ValueError when trying to cast object dtype to float64,
pandas/,195,"if we don't have a dtype specified, then try to convert objects",
pandas/,196,on the entire block; this is to convert if we have datetimelike's,
pandas/,197,embedded in an object type,
pandas/,201,transpose and separate blocks,
pandas/,210,TODO: What about re-joining object columns?,
pandas/,237,GH10856,
pandas/,238,raise ValueError if only scalars in dict,
pandas/,243,"no obvious ""empty"" int column",
pandas/,246,GH#1783,
pandas/,257,GH#24096 need copy to be deep for datetime64tz case,
pandas/,258,TODO: See if we can avoid these copies,
pandas/,268,---------------------------------------------------------------------,
pandas/,282,we could have a 1-dim or 2-dim list here,
pandas/,283,"this is equiv of np.asarray, but does object conversion",
pandas/,284,and platform dtype preservation,
pandas/,289,GH#21861,
pandas/,298,"drop subclass info, do not copy data",
pandas/,320,Forces alignment. No need to copy data since we,
pandas/,321,are putting it into an ndarray later,
pandas/,397,reorder according to the columns,
pandas/,429,helper to create the axes as indexes,
pandas/,430,return axes or defaults,
pandas/,471,---------------------------------------------------------------------,
pandas/,472,Conversion of Inputs to Arrays,
pandas/,497,columns if columns is not None else [],
pandas/,521,last ditch effort,
pandas/,535,list of lists,
pandas/,537,gh-26429 do not raise user-facing AssertionError,
pandas/,553,We know pass_data is non-empty because data[0] is a Series,
pandas/,616,assure that they are of the base dict class and not of derived,
pandas/,617,classes,
pandas/,656,Add mask for data which is composed of list of lists,
pandas/,661,pragma: no cover,
pandas/,662,caller's responsibility to check for this...,
pandas/,669,"check if nested list column, length of each sub-list should be equal",
pandas/,675,if columns is not empty and length of sublist is not equal to content,
pandas/,700,provide soft conversion of object dtypes,
pandas/,712,---------------------------------------------------------------------,
pandas/,713,Series-Based,
pandas/,726,coerce datetimelike types,
pandas/,221,TODO(2DEA): reshape will be unnecessary with 2D EAs,
pandas/,260,don't want to print out all of the items here,
pandas/,354,See also: split_and_operate,
pandas/,356,"if we get a 2D ExtensionArray, we need to split it into 1D pieces",
pandas/,390,equivalent: _try_coerce_args(value) would not raise,
pandas/,394,"we can't process the value, but nothing to do",
pandas/,398,operate column-by-column,
pandas/,402,slice out our block,
pandas/,404,i.e. self.ndim == 2,
pandas/,437,Put back the dimension that was taken from it and make,
pandas/,438,a block out of the result.,
pandas/,443,ndim == 1,
pandas/,452,ndim > 1,
pandas/,458,need a new block,
pandas/,471,no need to downcast our float,
pandas/,472,unless indicated,
pandas/,482,turn it off completely,
pandas/,488,single block handling,
pandas/,491,try to cast all non-floats here,
pandas/,498,ndim > 1,
pandas/,509,operate column-by-column,
pandas/,510,this is expensive as it splits the blocks items-by-item,
pandas/,550,may need to convert to categorical,
pandas/,554,GH 10696/18593: update an existing categorical efficiently,
pandas/,561,astype processing,
pandas/,567,force the copy here,
pandas/,569,TODO: Should we try/except this astype?,
pandas/,574,use native type formatting for datetime/tz/timedelta,
pandas/,578,astype formatting,
pandas/,580,"Because we have neither is_extension nor is_datelike,",
pandas/,581,self.values already has the correct shape,
pandas/,587,_astype_nansafe works fine with 1-d only,
pandas/,592,e.g. astype_nansafe can fail on object-dtype of strings,
pandas/,593,trying to convert to float,
pandas/,599,TODO(extension),
pandas/,600,should we make this attribute?,
pandas/,662,enlarge for the na_rep,
pandas/,670,block actions,
pandas/,694,"If we cannot replace with own dtype, convert to ObjectBlock and",
pandas/,695,retry,
pandas/,704,GH#28084 avoid costly checks since we can infer,
pandas/,705,that there is nothing to replace in this block,
pandas/,711,_can_hold_element checks have reduced this back to the,
pandas/,712,scalar case and we can avoid a costly object cast,
pandas/,717,"GH 22083, TypeError or ValueError occurred within error handling",
pandas/,718,causes infinite loop. Cast and retry only if not objectblock.,
pandas/,722,try again with a compatible block,
pandas/,734,The only non-DatetimeLike class that also has a non-trivial,
pandas/,735,"try_coerce_args is ObjectBlock, but that overrides replace,",
pandas/,736,so does not get here.,
pandas/,748,Note: it is _not_ the case that self._can_hold_element(value),
pandas/,749,"is always true at this point.  In particular, that can fail",
pandas/,750,for:,
pandas/,751,"""2u"" with bool-dtype, float-dtype",
pandas/,752,0.5 with int64-dtype,
pandas/,753,np.nan with int64-dtype,
pandas/,755,"GH 22083, TypeError or ValueError occurred within error handling",
pandas/,756,causes infinite loop. Cast and retry only if not objectblock.,
pandas/,762,try again with a compatible block,
pandas/,804,"coerce None values, if appropriate",
pandas/,809,coerce if block dtype can store value,
pandas/,812,"We only get here for non-Extension Blocks, so _try_coerce_args",
pandas/,813,is only relevant for DatetimeBlock and TimedeltaBlock,
pandas/,818,"current dtype cannot store value, coerce to common dtype",
pandas/,827,e.g. we are bool dtype and value is nan,
pandas/,828,TODO: watch out for case with listlike value and scalar/empty indexer,
pandas/,834,otherwise should have _can_hold_element,
pandas/,838,value must be storeable at this moment,
pandas/,840,We need to be careful not to allow through strings that,
pandas/,841,can be parsed to EADtypes,
pandas/,849,length checking,
pandas/,857,GH#8669 empty indexers,
pandas/,861,setting a single element for each dim and with a rhs that could,
pandas/,862,be e.g. a list; see GH#6043,
pandas/,866,"GH25495 - If the current dtype is not categorical,",
pandas/,867,we need to create a new categorical block,
pandas/,871,"if we are an exact match (ex-broadcasting),",
pandas/,872,then use the resultant dtype,
pandas/,874,"We are setting _all_ of the array's values, so can cast to new dtype",
pandas/,879,set,
pandas/,916,"if we are passed a scalar None, convert it here",
pandas/,918,FIXME: make sure we have compatible NA,
pandas/,922,"We only get here for non-Extension Blocks, so _try_coerce_args",
pandas/,923,is only relevant for DatetimeBlock and TimedeltaBlock,
pandas/,930,If the default repeat behavior in np.putmask would go in the,
pandas/,931,"wrong direction, then explicitly repeat and reshape new instead",
pandas/,937,we require exact matches between the len of the,
pandas/,938,values we are setting (or is compat). np.putmask,
pandas/,939,doesn't check this and will simply truncate / pad,
pandas/,940,"the output, but we want sane error messages",
pandas/,941,,
pandas/,942,TODO: this prob needs some better checking,
pandas/,943,for 2D cases,
pandas/,950,GH 30567,
pandas/,951,"If length of ``new`` is less than the length of ``new_values``,",
pandas/,952,`np.putmask` would first repeat the ``new`` array and then,
pandas/,953,assign the masked values hence produces incorrect result.,
pandas/,954,`np.place` on the other hand uses the ``new`` values at it is,
pandas/,955,to place in the masked locations of ``new_values``,
pandas/,964,maybe upcast me,
pandas/,972,Pseudo-broadcast,
pandas/,979,operate column-by-column,
pandas/,983,ndim==1 case.,
pandas/,992,type of the new block,
pandas/,995,we need to explicitly astype here to make a copy,
pandas/,1020,if we cannot then coerce to object,
pandas/,1027,we don't upcast to bool,
pandas/,1033,don't coerce float/complex to int,
pandas/,1042,not a datetime,
pandas/,1049,don't upcast timezone with different timezone or no timezone,
pandas/,1062,not a timedelta,
pandas/,1093,Only FloatBlocks will contain NaNs.,
pandas/,1094,timedelta subclasses IntBlock,
pandas/,1101,a fill na type method,
pandas/,1120,validate the interp method,
pandas/,1152,"if we are coercing, then don't force the conversion",
pandas/,1153,if the block can't hold the type,
pandas/,1163,We only get here for non-ExtensionBlock,
pandas/,1195,only deal with floats,
pandas/,1209,process 1-d slices in the axis direction,
pandas/,1213,"process a 1-d slice, returning it",
pandas/,1214,should the axis argument be handled below in apply_along_axis?,
pandas/,1215,i.e. not an arg to missing.interpolate_1d,
pandas/,1228,interp each column independently,
pandas/,1239,"algos.take_nd dispatches for DatetimeTZBlock, CategoricalBlock",
pandas/,1240,so need to preserve types,
pandas/,1241,"sparse is treated like an ndarray, but needs .get_values() shaping",
pandas/,1255,"Called from three places in managers, all of which satisfy",
pandas/,1256,this assertion,
pandas/,1273,convert integer to float if necessary. need to do a lot more than,
pandas/,1274,"that, handle boolean etc also",
pandas/,1313,"If the default broadcasting would go in the wrong direction, then",
pandas/,1314,explicitly reshape other instead,
pandas/,1331,np.where will cast integer array to floats in this case,
pandas/,1335,"convert datetime to datetime64, timedelta to timedelta64",
pandas/,1338,"By the time we get here, we should have all Series/Index",
pandas/,1339,args extracted to  ndarray,
pandas/,1346,"see if we can operate on the entire block, or need item-by-item",
pandas/,1347,or if we are a single block (ndim == 1),
pandas/,1352,"we cannot coerce, return a compat dtype",
pandas/,1353,we are explicitly ignoring errors,
pandas/,1367,might need to separate out blocks,
pandas/,1409,TODO: in all tests we have mask.all(); can we rely on that?,
pandas/,1431,We should always have ndim == 2 because Series dispatches to DataFrame,
pandas/,1439,"make list-like, unpack later",
pandas/,1443,create the array of na_values,
pandas/,1444,2d len(values) * len(qs),
pandas/,1449,"asarray needed for Sparse, see GH#24600",
pandas/,1465,result could be scalar in case with is_empty and self.ndim == 1,
pandas/,1549,Placement must be converted to BlockPlacement so that we can check,
pandas/,1550,its length,
pandas/,1554,Maybe infer ndim from placement,
pandas/,1563,TODO(2DEA): check unnecessary with 2D EAs,
pandas/,1637,"For extension blocks, the holder is values-dependent.",
pandas/,1642,Used in reindex_indexer,
pandas/,1647,The default ExtensionArray._can_hold_na is True,
pandas/,1683,we are always 1-D,
pandas/,1691,"ExtensionArrays must be iterable, so this works.",
pandas/,1705,we are expected to return a 2-d ndarray,
pandas/,1717,axis doesn't matter; we are really a single-dim object,
pandas/,1718,but are passed the axis depending on the calling routing,
pandas/,1719,"if its REALLY axis 0, then this will be a reindex and not a take",
pandas/,1722,"Called from three places in managers, all of which satisfy",
pandas/,1723,this assertion,
pandas/,1731,XXX: We may need to think about pushing this onto the array.,
pandas/,1732,We're doing the same as CategoricalBlock here.,
pandas/,1748,return same dims as we currently have,
pandas/,1750,reached via getitem_block via _slice_take_blocks_ax0,
pandas/,1751,TODO(EA2D): wont be necessary with 2D EAs,
pandas/,1760,GH#32959 only full-slicers along fake-dim0 are valid,
pandas/,1761,TODO(EA2D): wont be necessary with 2D EAs,
pandas/,1764,effectively slice(None),
pandas/,1802,n==0 case will be a no-op so let is fall through,
pandas/,1803,"Since we only have one column, the result will be all-NA.",
pandas/,1804,Create this result by shifting along axis=0 past the length of,
pandas/,1805,our values.,
pandas/,1808,TODO(EA2D): unnecessary with 2D EAs,
pandas/,1809,we are by definition 1D.,
pandas/,1838,TODO(EA2D): unnecessary with 2D EAs,
pandas/,1843,TODO(EA2D): unnecessary with 2D EAs,
pandas/,1848,The default `other` for Series / Frame is np.nan,
pandas/,1849,we want to replace that with the correct NA value,
pandas/,1850,for the type,
pandas/,1854,TODO(SparseArray.__setitem__): remove this if condition,
pandas/,1855,We need to re-infer the type of the data after doing the,
pandas/,1856,"where, for cases where the subtypes don't match",
pandas/,1870,NotImplementedError for class not implementing `__setitem__`,
pandas/,1871,"TypeError for SparseArray, which implements just to raise",
pandas/,1872,a TypeError,
pandas/,1880,ExtensionArray-safe unstack.,
pandas/,1881,"We override ObjectBlock._unstack, which unstacks directly on the",
pandas/,1882,"values of the array. For EA-backed blocks, this would require",
pandas/,1883,converting to a 2-D ndarray of objects.,
pandas/,1884,"Instead, we unstack an ndarray of integer positions, followed by",
pandas/,1885,a `take` on the actual values.,
pandas/,1891,TODO: in all tests we have mask.all(); can we rely on that?,
pandas/,1954,see gh-13418: no special formatting is desired at the,
pandas/,1955,"output (important for appropriate 'quoting' behaviour),",
pandas/,1956,so do not pass it through the FloatArrayFormatter,
pandas/,2029,DTA/TDA constructor and astype can handle 2D,
pandas/,2034,Override to return DatetimeArray and TimedeltaArray,
pandas/,2041,GH#31649 we need to wrap scalars in Timestamp/Timedelta,
pandas/,2042,TODO(EA2D): this can be removed if we ever have 2D EA,
pandas/,2046,TODO(EA2D) this is unnecessary if these blocks are backed by 2D EAs,
pandas/,2096,"if we are passed a datetime64[ns, tz]",
pandas/,2100,this should be the only copy,
pandas/,2107,delegate,
pandas/,2114,"require exact match, since non-nano does not exist",
pandas/,2119,GH#27419 if we get a non-nano datetime64 object,
pandas/,2191,check the ndarray values of the DatetimeIndex values,
pandas/,2219,TODO(EA2D): reshape unnecessary with 2D EAs,
pandas/,2220,Ensure that our shape is correct for DataFrame.,
pandas/,2221,"ExtensionArrays are always 1-D, even in a DataFrame when",
pandas/,2222,the analogous NumPy-backed column would be a 2-D ndarray.,
pandas/,2226,"NB: this is different from np.asarray(self.values), since that",
pandas/,2227,return an object-dtype ndarray of Timestamps.,
pandas/,2251,Cannot currently calculate diff across multiple blocks since this,
pandas/,2252,function is invoked via apply,
pandas/,2256,Reshape the new_values like how algos.diff does for timedelta data,
pandas/,2262,"need to handle concat([tz1, tz2]) here, since DatetimeArray",
pandas/,2263,only handles cases where all the tzs are the same.,
pandas/,2264,"Instead of placing the condition here, it could also go into the",
pandas/,2265,"is_uniform_join_units check, but I'm not sure what is better.",
pandas/,2276,We support filling a DatetimeTZ with a `value` whose timezone,
pandas/,2277,is different by coercing to object.,
pandas/,2281,"different timezones, or a non-tz",
pandas/,2287,https://github.com/pandas-dev/pandas/issues/24020,
pandas/,2288,Need a dedicated setitem until #24020 (type promotion in setitem,
pandas/,2289,for extension arrays) is designed and implemented.,
pandas/,2302,override for significant performance improvement,
pandas/,2310,kludge for 2D block with 1D values,
pandas/,2316,"ravel is kludge for 2D block with 1D values, assumes column-like",
pandas/,2352,allow filling with integers to be,
pandas/,2353,interpreted as nanoseconds,
pandas/,2355,"Deprecation GH#24694, GH#19233",
pandas/,2423,operate column-by-column,
pandas/,2435,TODO: allow EA once reshape is supported,
pandas/,2453,split and convert the blocks,
pandas/,2529,to_replace is regex compilable,
pandas/,2532,regex is regex compilable,
pandas/,2535,only one will survive,
pandas/,2541,if regex was passed as something that can be a regex (rather than a,
pandas/,2542,boolean),
pandas/,2548,try to get the pattern attribute (compiled re) or it's a string,
pandas/,2554,if the pattern is not empty and to_replace is either a string or a,
pandas/,2555,regex,
pandas/,2559,if the thing to replace is not a string or compiled regex call,
pandas/,2560,the superclass method -> to_replace is some kind of object,
pandas/,2565,deal with replacing values with objects (strings) that match but,
pandas/,2566,"whose replacement is not a string (numeric, nan, object)",
pandas/,2576,"value is guaranteed to be a string here, s can be either a string",
pandas/,2577,or null if it's null it gets returned,
pandas/,2591,convert,
pandas/,2650,coerce to categorical if we can,
pandas/,2676,not using self.make_block_same_class as values can be object dtype,
pandas/,2694,-----------------------------------------------------------------,
pandas/,2695,Constructor Helpers,
pandas/,2715,Need this first(ish) so that Sparse[datetime] is sparse,
pandas/,2745,Ensure that we don't allow PandasArray / PandasDtype in internals.,
pandas/,2746,"For now, blocks should be backed by ndarrays when possible.",
pandas/,2760,TODO: This is no longer hit internally; does it need to be retained,
pandas/,2761,for e.g. pyarrow?,
pandas/,2767,-----------------------------------------------------------------,
pandas/,2791,TODO(EA2D): https://github.com/pandas-dev/pandas/issues/23023,
pandas/,2792,"block.shape is incorrect for ""2D"" ExtensionArrays",
pandas/,2793,"We can't, and don't need to, reshape.",
pandas/,2794,type: ignore,
pandas/,2841,we cannot use np.asarray() here as we cannot have conversions,
pandas/,2842,that numpy does when numeric are mixed with strings,
pandas/,2844,n should be the length of the mask or a scalar here,
pandas/,2848,see if we are only masking values that if putted,
pandas/,2849,will work in the current dtype,
pandas/,2853,TypeError: only integer scalar arrays can be converted to a scalar index,
pandas/,2856,make sure that we have a nullable type,
pandas/,2857,if we have nulls,
pandas/,2861,only compare integers/floats,
pandas/,2864,only compare integers/floats,
pandas/,2868,we ignore ComplexWarning here,
pandas/,2888,preserves dtype if possible,
pandas/,2892,change the dtype if needed,
pandas/,2905,"We could have BooleanArray, Sparse[bool], ...",
pandas/,51,TODO: flexible with index=None and/or items=None,
pandas/,139,"Populate known_consolidate, blknos, and blklocs lazily",
pandas/,162,Note: these can be altered by other BlockManager methods.,
pandas/,173,Note: these can be altered by other BlockManager methods.,
pandas/,183,preserve dtype if possible,
pandas/,185,for mypy,
pandas/,197,Python3 compat,
pandas/,209,Caller is responsible for ensuring we have an Index object.,
pandas/,249,TODO: can we avoid this?  it isn't cheap,
pandas/,290,First three elements of the state are to maintain forward,
pandas/,291,compatibility with 0.13.1.,
pandas/,343,"If 2D, we assume that we're operating column-wise",
pandas/,345,we'll be returning a scalar,
pandas/,354,EA,
pandas/,385,fillna: Series/DataFrame is responsible for making sure value is aligned,
pandas/,448,"Series dispatches to DataFrame for quantile, which allows us to",
pandas/,449,simplify some of the code here and in the blocks,
pandas/,456,"Because Series dispatches to DataFrame, we will always have",
pandas/,457,block.ndim == 2,
pandas/,475,"note that some DatetimeTZ, Categorical are always ndim==1",
pandas/,483,multiple blocks that are reduced,
pandas/,487,reset the placement to the original,
pandas/,503,"single block, i.e. ndim == {1}",
pandas/,506,compute the orderings of our original data,
pandas/,617,figure out our mask a-priori to avoid repeated replacements,
pandas/,637,its possible to get multiple result blocks here,
pandas/,638,replace ALWAYS will return a list,
pandas/,644,only convert once at the end,
pandas/,679,"Warning, consolidation needs to get checked upstairs",
pandas/,685,"Warning, consolidation needs to get checked upstairs",
pandas/,700,It is technically possible to figure out which blocks are views,
pandas/,701,e.g. [ b.values.base is not None for b in self.blocks ],
pandas/,702,but then we have the case of possibly some blocks being a view,
pandas/,703,and some blocks not. setting in theory is possible on the non-view,
pandas/,704,blocks w/o causing a SettingWithCopy raise/warn. But this is a bit,
pandas/,705,complicated,
pandas/,734,FIXME: optimization potential,
pandas/,783,this preserves the notion of view copying of axes,
pandas/,785,hit in e.g. tests.io.json.test_pandas,
pandas/,816,TODO(Block.get_values): Make DatetimeTZBlock.get_values,
pandas/,817,always be object dtype. Some callers seem to want the,
pandas/,818,DatetimeArray (previously DTI),
pandas/,834,TODO: https://github.com/pandas-dev/pandas/issues/22791,
pandas/,835,Give EAs some input on what happens here. Sparse needs this.,
pandas/,877,TODO(EA2D): the combine will be unnecessary with 2D EAs,
pandas/,899,we'll eventually construct an ExtensionArray.,
pandas/,905,Such assignment may incorrectly coerce NaT to None,
pandas/,906,"result[blk.mgr_locs] = blk._slice((slice(None), loc))",
pandas/,949,allow a single nan location indexer,
pandas/,974,shortcut for select a single-dim from a 2-dim BM,
pandas/,1019,FIXME: use Index.delete as soon as it uses fastpath=True,
pandas/,1038,"This item wasn't present, just insert at end",
pandas/,1049,"FIXME: refactor, clearly separate broadcasting & zip-like assignment",
pandas/,1050,can prob also fix the various if tests for sparse/categorical,
pandas/,1056,categorical/sparse/datetimetz,
pandas/,1080,We have 6 tests where loc is _not_ an int.,
pandas/,1081,"In this case, get_blkno_placements will yield only one tuple,",
pandas/,1082,"containing (self._blknos[loc], BlockPlacement(slice(0, 1, 1)))",
pandas/,1085,Accessing public blknos ensures the public versions are initialized,
pandas/,1101,"If all block items are unfit, schedule the block for removal.",
pandas/,1109,Remove blocks & update blknos accordingly,
pandas/,1127,This code (ab-)uses the fact that EA blocks contain only,
pandas/,1128,one item.,
pandas/,1129,TODO(EA2D): special casing unnecessary with 2D EAs,
pandas/,1143,unfit_val_locs contains BlockPlacement objects,
pandas/,1159,Newly created block's dtype may already be present.,
pandas/,1176,Should this be a different kind of error??,
pandas/,1182,insert to the axis; this could possibly raise a TypeError,
pandas/,1199,Accessing public blklocs ensures the public versions are initialized,
pandas/,1201,"np.append is a lot faster, let's use it if we can.",
pandas/,1270,some axes don't allow reindexing with dups,
pandas/,1316,GH#32959 EABlock would fail since we cant make 0-width,
pandas/,1317,TODO(EA2D): special casing unnecessary with 2D EAs,
pandas/,1345,"When filling blknos, make sure blknos is updated before appending to",
pandas/,1346,"blocks list, that way new blkno is exactly len(blocks).",
pandas/,1347,,
pandas/,1348,"FIXME: mgr_groupby_blknos must return mgr_locs in ascending order,",
pandas/,1349,pytables serialization will break otherwise.,
pandas/,1353,"If we've got here, fill_value was not lib.no_default",
pandas/,1361,"Otherwise, slicing along items axis is necessary.",
pandas/,1363,"A non-consolidatable block, it's easy, because there's",
pandas/,1364,only one item and each mgr loc is a copy of that single,
pandas/,1365,item.,
pandas/,1427,"canonicalize block order, using a tuple combining the mgr_locs",
pandas/,1428,then type name because there might be unconsolidated,
pandas/,1429,"blocks (say, Categorical) which can only be distinguished by",
pandas/,1430,the iteration order,
pandas/,1604,--------------------------------------------------------------------,
pandas/,1605,Constructor Helpers,
pandas/,1611,"if blocks[0] is of length 0, return empty blocks",
pandas/,1615,"It's OK if a single block is passed as values, its placement",
pandas/,1616,"is basically ""all items"", but if there're many, don't bother",
pandas/,1617,"converting, it's an error anyway.",
pandas/,1651,Correcting the user facing error message during dataframe construction,
pandas/,1656,Correcting the user facing error message during dataframe construction,
pandas/,1660,We return the exception object instead of raising it so that we,
pandas/,1661,can raise it in the caller; mypy plays better with that,
pandas/,1669,-----------------------------------------------------------------------,
pandas/,1673,"put ""leftover"" items in float bucket, where else?",
pandas/,1674,generalize?,
pandas/,1759,empty items -> dtype object,
pandas/,1776,TODO: CHECK DTYPE?,
pandas/,1777,pragma: no cover,
pandas/,1786,group by dtype,
pandas/,1802,fml,
pandas/,1850,"sort by _can_consolidate, dtype",
pandas/,1876,TODO: optimization potential in case all mgrs contain slices and,
pandas/,1877,"combination of those slices is a slice, too.",
pandas/,1887,can't consolidate --> no merge,
pandas/,1945,GH#32621 use mask to avoid comparing to NAs,
pandas/,1958,GH#29553 avoid deprecation warnings from numpy,
pandas/,1964,The shape of the mask can differ to that of the result,
pandas/,1965,since we may compare only a subset of a's or b's elements,
pandas/,1,"TODO: Needs a better name; too many modules are already called ""concat""",
pandas/,90,"Calculate post-reindex shape , save for item axis which will be separate",
pandas/,91,for each block anyway.,
pandas/,131,Fastpath detection of join unit not,
pandas/,132,needing to reindex its block: no ax0,
pandas/,133,reindexing took place and block,
pandas/,134,placement was sequential before.,
pandas/,142,Slow-ish detection: all indexer locs,
pandas/,143,are sequential (and length match is,
pandas/,144,checked above).,
pandas/,149,Omit indexer if no item reindexing is required.,
pandas/,164,Passing shape explicitly is required for cases when block is None.,
pandas/,177,FIXME: cache results of indexer == -1 checks.,
pandas/,201,Usually it's enough to check but a small fraction of values to see if,
pandas/,202,"a block is NOT null, chunks should help in such cases.  1000 value",
pandas/,203,was chosen rather arbitrarily.,
pandas/,223,No upcasting is necessary,
pandas/,231,we want to avoid filling with np.nan if we are,
pandas/,232,using None; we already know that we are all,
pandas/,233,nulls,
pandas/,256,preserve these for validation in concat_compat,
pandas/,260,"External code requested filling/upcasting, bool values must",
pandas/,261,be upcasted to object to avoid being upcasted to numeric.,
pandas/,266,"No dtype upcasting is done here, it will be performed during",
pandas/,267,concatenation itself.,
pandas/,271,"If there's no indexing to be done, we want to signal outside",
pandas/,272,code that this array must be copied explicitly.  This is done,
pandas/,273,by returning a view and checking `retval.base`.,
pandas/,288,Concatenating join units along ax0 is handled in _merge_blocks.,
pandas/,299,"Only one block, nothing to concatenate.",
pandas/,303,non-reindexed (=not yet copied) arrays are made into a view,
pandas/,304,in JoinUnit.get_reindexed_values,
pandas/,332,FIXME: integrate property,
pandas/,372,"Null blocks should not influence upcast class selection, unless there",
pandas/,373,"are only null blocks, when same upcasting rules must be applied to",
pandas/,374,null upcast classes.,
pandas/,383,TODO: de-duplicate with maybe_promote?,
pandas/,384,create the result,
pandas/,395,"GH-25014. We use NaT instead of iNaT, since this eventually",
pandas/,396,"ends up in DatetimeArray.take, which does not allow iNaT.",
pandas/,403,pragma,
pandas/,407,At least one is an ExtensionArray,
pandas/,430,all blocks need to have the same type,
pandas/,432,noqa,
pandas/,433,no blocks that would get missing values (can lead to type upcasts),
pandas/,434,unless we're an extension dtype.,
pandas/,437,no blocks with indexers (as then the dimensions do not fit),
pandas/,440,only use this path when there is something to concatenate,
pandas/,447,TODO: should this be ju.block._can_hold_na?,
pandas/,532,"_trim_join_unit updates unit in place, so only",
pandas/,533,placement needs to be sliced to skip min_len.,
pandas/,1,"io.pytables, io.packers",
pandas/,84,"min/max with empty array raise in numpy, pandas returns NA",
pandas/,93,"min/max with empty array raise in numpy, pandas returns NA",
pandas/,13,make sure array sent to np.roll is c_contiguous,
pandas/,29,restore original order,
pandas/,36,"To reduce the number of cases, we ensure that `left` & `left_mask`",
pandas/,37,"always come from an array, not a scalar. This is safe, since because",
pandas/,38,A | B == B | A,
pandas/,52,"output is unknown where (False & NA), (NA & False), (NA & NA)",
pandas/,66,False,
pandas/,143,"To reduce the number of cases, we ensure that `left` & `left_mask`",
pandas/,144,"always come from an array, not a scalar. This is safe, since because",
pandas/,145,A | B == B | A,
pandas/,158,Scalar `right`,
pandas/,165,unmask everything,
pandas/,168,unmask where either left or right is False,
pandas/,52,TODO: GH references for what this fixes,
pandas/,53,Note: this check must come before the check for nonempty columns.,
pandas/,57,"operating with Series, short-circuit checks that would fail",
pandas/,58,with AttributeError.,
pandas/,62,ensure obj.dtypes[0] exists for each obj,
pandas/,71,numpy integer dtypes as timedelta64 dtypes in this scenario,
pandas/,75,in particular case where right is an array of DateOffsets,
pandas/,42,Note: these checks can be for ABCIndex and not ABCIndexClass,
pandas/,43,because that is the only object-dtype class.,
pandas/,69,For Series `x` is 1D so ravel() is a no-op; calling it anyway makes,
pandas/,70,the logic valid for both Series and DataFrame ops.,
pandas/,81,Call notna on pre-broadcasted y for performance,
pandas/,89,NB: ravel() is only safe since y is ndarray; for e.g. PeriodIndex,
pandas/,90,"we would get int64 dtype, see GH#19956",
pandas/,95,"FIXME: GH#5284, GH#5035, GH#19448",
pandas/,96,Without specifically raising here we get mismatched,
pandas/,97,errors in Py3 (TypeError) vs Py2 (ValueError),
pandas/,98,Note: Only = an issue in DataFrame case,
pandas/,111,mask is only meaningful for x,
pandas/,115,1 ** np.nan is 1. So we have to unmask those.,
pandas/,126,2D compat,
pandas/,165,"numexpr failed on comparison op, e.g. ndarray[float] > datetime",
pandas/,166,"In this case we do not fall back to the masked op, as that",
pandas/,167,"will handle complex numbers incorrectly, see GH#32047",
pandas/,172,numpy returned a scalar instead of operating element-wise,
pandas/,173,e.g. numeric array vs str,
pandas/,198,NB: We assume that extract_array has already been called,
pandas/,199,on `left` and `right`.,
pandas/,204,"Timedelta is included because numexpr will fail on it, see GH#31457",
pandas/,250,We assume that lengths dont match,
pandas/,252,See if we can broadcast unambiguously,
pandas/,276,NB: We assume extract_array has already been called on left and right,
pandas/,282,TODO: same for tuples?,
pandas/,286,TODO: make this treatment consistent across ops and classes.,
pandas/,287,"We are not catching all listlikes here (e.g. frozenset, tuple)",
pandas/,288,The ambiguous case is object-dtype.  See GH#27803,
pandas/,297,Call the method on lvalues,
pandas/,301,numpy does not like comparisons vs None,
pandas/,319,"For exposition, write:",
pandas/,320,"yarr = isinstance(y, np.ndarray)",
pandas/,321,"yint = is_integer(y) or (yarr and y.dtype.kind == ""i"")",
pandas/,322,"ybool = is_bool(y) or (yarr and y.dtype.kind == ""b"")",
pandas/,323,"xint = x.dtype.kind == ""i""",
pandas/,324,"xbool = x.dtype.kind == ""b""",
pandas/,325,Then Cases where this goes through without raising include:,
pandas/,326,(xint or xbool) and (yint or bool),
pandas/,330,"bool-bool dtype operations should be OK, should not get here",
pandas/,336,let null fall thru,
pandas/,377,"if `left` is specifically not-boolean, we do not cast to bool",
pandas/,379,dtypes that can hold NA,
pandas/,393,"e.g. list, tuple",
pandas/,396,NB: We assume extract_array has already been called on left and right,
pandas/,401,Call the method on lvalues,
pandas/,410,i.e. scalar,
pandas/,413,"For int vs int `^`, `|`, `&` are bitwise operators and return",
pandas/,414,integer dtypes.  Otherwise these are boolean ops,
pandas/,418,type: ignore,
pandas/,494,GH#22390  cast up to Timedelta to rely on Timedelta,
pandas/,495,implementation; otherwise operation against numeric-dtype,
pandas/,496,raises TypeError,
pandas/,499,GH#28080 numpy casts integer-dtype to datetime64 when doing,
pandas/,500,"array[int] + datetime64, which we do not allow",
pandas/,502,Avoid possible ambiguities with pd.NaT,
pandas/,511,"wrapping timedelta64(""NaT"") in Timedelta returns NaT,",
pandas/,512,"which would incorrectly be treated as a datetime-NaT, so",
pandas/,513,we broadcast and wrap in a TimedeltaArray,
pandas/,518,In particular non-nanosecond timedelta64 needs to be cast to,
pandas/,519,"nanoseconds, or else we get undesired behavior like",
pandas/,520,"np.timedelta64(3, 'D') / 2 == np.timedelta64(1, 'D')",
pandas/,524,GH#22390 Unfortunately we need to special-case right-hand,
pandas/,525,timedelta64 dtypes because numpy casts integer dtypes to,
pandas/,526,timedelta64 when operating with timedelta64,
pandas/,59,"GH#7325, mask and nans must be broadcastable (also: GH#9308)",
pandas/,60,Raveling and then reshaping makes np.putmask faster,
pandas/,102,FIXME: SparseArray would raise TypeError with np.putmask,
pandas/,111,"FIXME: numpy did not evaluate pointwise, seen in docs build",
pandas/,116,Flip sign if necessary for -0.0,
pandas/,126,"Fill negative/0 with -inf, positive/0 with +inf, 0/0 with NaN",
pandas/,168,Note: no need to do this for truediv; in py3 numpy behaves the way,
pandas/,169,we want.,
pandas/,172,Note: no need to do this for rtruediv; in py3 numpy behaves the way,
pandas/,173,we want.,
pandas/,33,check if right is a string as % is the string,
pandas/,34,formatting operation; this is a TypeError,
pandas/,35,otherwise perform the op,
pandas/,12,noqa:F401,
pandas/,28,noqa:F401,
pandas/,37,noqa:F401,
pandas/,38,noqa: F401,
pandas/,39,noqa:F401,
pandas/,43,noqa:F401,
pandas/,59,noqa:F401,
pandas/,61,-----------------------------------------------------------------------------,
pandas/,62,constants,
pandas/,92,-----------------------------------------------------------------------------,
pandas/,93,Ops Wrapping Utilities,
pandas/,111,`left` is always a Series when called from within ops,
pandas/,145,TODO: what if they both have np.nan for their names?,
pandas/,154,-----------------------------------------------------------------------------,
pandas/,172,bool methods,
pandas/,175,"__add__, __mul__, ...",
pandas/,178,"add, mul, ...",
pandas/,247,-----------------------------------------------------------------------------,
pandas/,248,Masking NA values and fallbacks for operations numpy does not support,
pandas/,276,one but not both,
pandas/,280,Avoid making a copy if we can,
pandas/,285,Avoid making a copy if we can,
pandas/,292,-----------------------------------------------------------------------------,
pandas/,293,Dispatch logic,
pandas/,313,Note: we use iloc to access columns for compat with cases,
pandas/,314,with non-unique columns.,
pandas/,320,Get the appropriate array-op to apply to each block's values.,
pandas/,332,"We only get here if called via _combine_series_frame,",
pandas/,333,in which case we specifically want to operate row-by-row,
pandas/,337,ensure we treat NaT values as the correct dtype,
pandas/,338,Note: we do not do this unconditionally as it may be lossy or,
pandas/,339,expensive for EA dtypes.,
pandas/,351,Handle other cases later,
pandas/,357,Remaining cases have less-obvious dispatch rules,
pandas/,364,-----------------------------------------------------------------------------,
pandas/,365,Series,
pandas/,370,"ToDo: Different from _align_method_FRAME, list, tuple and ndarray",
pandas/,371,are not coerced here,
pandas/,372,because Series has inconsistencies described in #13637,
pandas/,375,avoid repeated alignment,
pandas/,379,to keep original value's dtype for bool ops,
pandas/,467,validate axis,
pandas/,488,-----------------------------------------------------------------------------,
pandas/,489,DataFrame,
pandas/,509,"We assume that self.align(other, ...) has already been called",
pandas/,513,We can operate block-wise,
pandas/,576,Broadcast across columns,
pandas/,581,Broadcast along rows,
pandas/,597,GH17901,
pandas/,609,axis=1 is default for DataFrame-with-Series op,
pandas/,627,GH#32685 pow has special semantics for operating with null values,
pandas/,634,TODO: any other cases we should handle here?,
pandas/,659,"GH#31623, only operate on shared columns",
pandas/,666,Do the join on the columns instead of using _align_method_FRAME,
pandas/,667,to avoid constructing two potentially large/sparse DataFrames,
pandas/,683,"i.e. include ""add"" but not ""__add__""",
pandas/,699,Another DataFrame,
pandas/,707,"For these values of `axis`, we end up dispatching to Series op,",
pandas/,708,so do not want the masked op.,
pandas/,720,in this case we always have `np.ndim(other) == 0`,
pandas/,747,Another DataFrame,
pandas/,755,in this case we always have `np.ndim(other) == 0`,
pandas/,776,Another DataFrame,
pandas/,786,straight boolean comparisons we want to allow all columns,
pandas/,787,(regardless of dtype to pass thru) See #4537 for discussion.,
pandas/,52,"For comparison ops, Index does *not* defer to Series",
pandas/,44,TODO: make these non-runtime imports once the relevant functions,
pandas/,45,are no longer in __init__,
pandas/,57,Just Series,
pandas/,86,inplace operators (I feel like these should get passed an `inplace=True`,
pandas/,87,or just be removed,
pandas/,96,Delete cacher,
pandas/,98,this makes sure that we are aligned like the input,
pandas/,99,we are updating inplace so we want to ignore is_copy,
pandas/,154,opt out of bool flex methods for now,
pandas/,161,"creates actual methods based upon arithmetic, comp and bool method",
pandas/,162,constructors.,
pandas/,165,divmod is available for Series,
pandas/,174,"Causes a floating point exception in the tests when numexpr enabled,",
pandas/,175,so for now no speedup,
pandas/,178,"not entirely sure why this is necessary, but previously was included",
pandas/,179,so it's here to maintain compatibility,
pandas/,190,divmod doesn't have an op that is supported by numexpr,
pandas/,210,For some reason ``^`` wasn't used in original.,
pandas/,228,"For most methods, if we find that the class already has a method",
pandas/,229,"of the same name, it is OK to over-write it.  The exception is",
pandas/,230,"inplace methods (__iadd__, __isub__, ...) for SparseArray, which",
pandas/,231,retain the np.ndarray versions.,
pandas/,274,Arithmetic Operators,
pandas/,336,Comparison Operators,
pandas/,98,extract array scalar and process below,
pandas/,107,...so it must be a scalar value. Return scalar.,
pandas/,121,coerce,
pandas/,130,This is needed only to ensure that in the case where we end up,
pandas/,131,"returning arg (errors == ""ignore""), and where the input is a",
pandas/,132,"generator, we return a useful list-like instead of a",
pandas/,133,used-up generator,
pandas/,142,This else-block accounts for the cases when errors='raise',
pandas/,143,"and errors='coerce'. If errors == 'raise', these errors",
pandas/,144,"should be raised. If errors == 'coerce', we shouldn't",
pandas/,145,"expect any errors to be raised, since all parsing errors",
pandas/,146,"cause coercion to pd.NaT. However, if an error / bug is",
pandas/,147,"introduced that causes an Exception to be raised, we would",
pandas/,148,like to surface it.,
pandas/,11,noqa,
pandas/,45,---------------------------------------------------------------------,
pandas/,46,types used in annotations,
pandas/,56,---------------------------------------------------------------------,
pandas/,60,Try to guess the format based on the first non-NaN element,
pandas/,97,default realization,
pandas/,99,"in this case, the gain from caching is negligible",
pandas/,146,Perform a quicker unique check,
pandas/,236,Convert to the same tz,
pandas/,293,these are shortcutable,
pandas/,298,"error: Item ""DatetimeIndex"" of ""Union[DatetimeArray, DatetimeIndex]"" has",
pandas/,299,"no attribute ""tz_convert""",
pandas/,300,type: ignore,
pandas/,310,"DatetimeArray, DatetimeIndex",
pandas/,311,"error: Item ""DatetimeIndex"" of ""Union[DatetimeArray, DatetimeIndex]"" has",
pandas/,312,"no attribute ""tz_localize""",
pandas/,313,type: ignore,
pandas/,322,GH 30050 pass an ndarray to tslib.array_with_unit_to_datetime,
pandas/,323,because it expects an ndarray argument,
pandas/,339,GH 23758: We may still need to localize the result with tz,
pandas/,340,"GH 25546: Apply tz_parsed first (from arg), then tz (from caller)",
pandas/,341,result will be naive but in UTC,
pandas/,345,Regular Index from 'ignore' path,
pandas/,358,"warn if passing timedelta64, raise for PeriodDtype",
pandas/,359,NB: this must come after unit transformation,
pandas/,381,There is a special fast-path for iso8601 formatted,
pandas/,382,"datetime strings, so in those cases don't use the inferred",
pandas/,383,format because this path makes process slower in this,
pandas/,384,special case,
pandas/,395,shortcut formatting here,
pandas/,398,pass orig_arg as float-dtype may have been converted to,
pandas/,399,datetime64[ns],
pandas/,407,fallback,
pandas/,427,"if format was inferred, try falling back",
pandas/,428,to array_to_datetime - terminate here,
pandas/,429,for specified formats,
pandas/,440,Fallback to try to convert datetime objects if timezone-aware,
pandas/,441,datetime objects are found without passing `utc=True`,
pandas/,463,We can take a shortcut since the datetime64 numpy array,
pandas/,464,is in UTC,
pandas/,502,preemptively check this for a nice range,
pandas/,510,arg must be numeric,
pandas/,520,we are going to offset back to unix / epoch time,
pandas/,536,convert the offset to the unit of the arg,
pandas/,537,this should be lossless in terms of precision,
pandas/,540,scalars & ndarray-like can handle the addition,
pandas/,762,"caching attempts to create a DatetimeIndex, which may raise",
pandas/,763,"an OOB. If that's the desired behavior, then just reraise...",
pandas/,766,"... otherwise, continue without the cache.",
pandas/,769,just an empty array,
pandas/,780,mappings for assembling units,
pandas/,831,replace passed unit with _unit_map,
pandas/,836,m is case significant,
pandas/,845,we require at least Ymd,
pandas/,855,keys we don't recognize,
pandas/,864,we allow coercion to if errors allows,
pandas/,867,prevent overflow in case of int8 or int16,
pandas/,907,calculate the actual result,
pandas/,923,try intlike / strings that are ints,
pandas/,929,a float with actual np.nan,
pandas/,936,string with NaN-like,
pandas/,946,Fixed time formats for time parsing,
pandas/,960,Try to guess the format based on the first non-NaN element,
pandas/,1042,Put the found format in front,
pandas/,158,attempt downcast only if the data has been successfully converted,
pandas/,159,to a numerical dtype and if a downcast method has been specified,
pandas/,170,"pandas support goes only to np.float32,",
pandas/,171,as float dtypes smaller than that are,
pandas/,172,extremely rare and not well supported,
pandas/,178,from smallest to largest,
pandas/,183,successful conversion,
pandas/,190,"because we want to coerce to numeric if possible,",
pandas/,191,do not use _shallow_copy_with_infer,
pandas/,1,flake8: noqa,
pandas/,48,"if any factor is empty, the cartesian product is empty",
pandas/,65,Otherwise we have an Index,
pandas/,33,TODO: what about the existing index?,
pandas/,34,"If multiindex, gather names of columns on all level for checking presence",
pandas/,35,of `id_vars` and `value_vars`,
pandas/,49,Check that `id_vars` are in frame,
pandas/,71,Check that `value_vars` are in frame,
pandas/,82,allow list or other?,
pandas/,83,frame is a copy,
pandas/,115,asanyarray will keep the columns as an Index,
pandas/,433,GH17627 Cast numerics suffixes to int/float,
pandas/,97,"when index includes `nan`, need to lift levels/strides by 1",
pandas/,100,"Note: the ""pop"" below alters these in-place.",
pandas/,108,Bug fix GH 20601,
pandas/,109,"If the data frame is too big, the number of unique index combination",
pandas/,110,will cause int32 overflow on windows environments.,
pandas/,111,We want to check and raise an error before this happens,
pandas/,115,GH20601: This forces an overflow if the number of cells is too high.,
pandas/,154,make the mask,
pandas/,182,pragma: no cover,
pandas/,198,place the values,
pandas/,206,we can simply reshape if we don't have a mask,
pandas/,208,TODO: Under what circumstances can we rely on sorted_values,
pandas/,209,"matching values?  When that holds, we can slice instead",
pandas/,210,of take (in particular for EAs),
pandas/,219,"if our mask is all True, then we can use our existing dtype",
pandas/,232,we need to convert to a basic dtype,
pandas/,233,and possibly coerce an input to our output dtype,
pandas/,234,e.g. ints -> floats,
pandas/,244,fill in our values & mask,
pandas/,255,reconstruct dtype if needed,
pandas/,282,The two indices differ only if the unstacked level had unused items:,
pandas/,284,"In this case, we remap the new codes to the original level:",
pandas/,289,"Otherwise, we just use each level item exactly once:",
pandas/,292,The entire level is then just a repetition of the single chunk:,
pandas/,300,Does not depend on values or value_columns,
pandas/,303,construct the new index,
pandas/,322,NOTE: This doesn't deal with hierarchical columns yet,
pandas/,326,"GH 19966 Make sure if MultiIndexed index has tuple name, they will be",
pandas/,327,recognised as a whole,
pandas/,348,"Everything is in clocs, so the dummy df has a regular index",
pandas/,384,for mypy,
pandas/,407,"_unstack_multiple only handles MultiIndexes,",
pandas/,408,and isn't needed for a single level,
pandas/,413,Prioritize integer interpretation (GH #21677):,
pandas/,467,Defer to the logic in ExtensionBlock._unstack,
pandas/,491,Will also convert negative level numbers and check if out of bounds.,
pandas/,520,"For homogeneous EAs, frame._values will coerce to object. So",
pandas/,521,we concatenate instead.,
pandas/,532,"homogeneous, non-EA",
pandas/,536,non-homogeneous,
pandas/,548,"If all passed levels match up to column names, no",
pandas/,549,ambiguity about what to do,
pandas/,555,"Otherwise, level numbers may change as each successive level is stacked",
pandas/,557,"As each stack is done, the level numbers decrease, so we need",
pandas/,558,to account for that when level is a sequence of ints,
pandas/,560,_get_level_number() checks level numbers are in range and converts,
pandas/,561,negative numbers to positive,
pandas/,564,Can't iterate directly through level as we might need to change,
pandas/,565,values as we go,
pandas/,569,"Decrement all level numbers greater than current, as these",
pandas/,570,have now shifted down by one,
pandas/,608,this makes life much simpler,
pandas/,610,roll levels to put selected level at end,
pandas/,613,Need to check if the ints conflict with level names,
pandas/,620,"Workaround the edge case where 0 is one of the column names,",
pandas/,621,which interferes with trying to sort based on the first,
pandas/,622,level,
pandas/,626,tuple list excluding level for grouping columns,
pandas/,645,time to ravel the values,
pandas/,659,can make more efficient?,
pandas/,660,we almost always return a slice,
pandas/,661,but if unsorted can get a boolean,
pandas/,662,indexer,
pandas/,692,i.e. not extension,
pandas/,710,something better?,
pandas/,722,more efficient way to go about this? can do the whole masking biz but,
pandas/,723,will only save a small amount of time...,
pandas/,842,determine columns being encoded,
pandas/,850,validate prefixes and separator to avoid silently dropping cols,
pandas/,873,validate separators,
pandas/,881,"Encoding the entire df, do not prepend any dropped columns",
pandas/,884,Encoding only cols specified in columns. Get all cols not in,
pandas/,885,columns to prepend to result.,
pandas/,888,Encoding only object and category dtype columns. Get remaining,
pandas/,889,columns to prepend to result.,
pandas/,893,"col is (column_name, column), use just column data here",
pandas/,929,Series avoids inconsistent NaN handling,
pandas/,946,if all NaN,
pandas/,955,"if dummy_na, we just fake a nan level. drop_first will drop it again",
pandas/,993,remove first categorical level to avoid perfect collinearity,
pandas/,994,GH12042,
pandas/,1013,reset NaN GH4446,
pandas/,1017,remove first GH12042,
pandas/,1050,final take to get the order correct.,
pandas/,1051,idx is an indexer like,
pandas/,1052,"[c0r0, c1r0, c2r0, ...,",
pandas/,1053,"c0r1, c1r1, c2r1, ...]",
pandas/,31,---------------------------------------------------------------------,
pandas/,32,Concatenate DataFrame objects,
pandas/,315,pragma: no cover,
pandas/,333,#1649,
pandas/,348,consolidate data & figure out what our result ndim is going to be,
pandas/,358,consolidate,
pandas/,362,get the sample,
pandas/,363,"want the highest ndim that we have, and must be non-empty",
pandas/,364,unless all objs are empty,
pandas/,374,filter out the empties if we have not multi-index possibilities,
pandas/,375,note to keep empty Series as it affect to result columns / name,
pandas/,390,Standardize axis parameter to int,
pandas/,396,Need to flip BlockManager axis in the DataFrame special case,
pandas/,407,"if we have mixed ndims, then convert to highest ndim",
pandas/,408,creating column numbers as needed,
pandas/,431,doing a row-wise concatenation so need everything,
pandas/,432,to line up,
pandas/,439,note: this is the BlockManager axis (since DataFrame is transposed),
pandas/,455,series only,
pandas/,458,stack blocks,
pandas/,469,combine as columns in a frame,
pandas/,479,combine block managers,
pandas/,485,::-1 to convert BlockManager ax to DataFrame ax,
pandas/,487,Suppress reindexing on concat axis,
pandas/,490,1-ax to convert BlockManager axis to DataFrame axis,
pandas/,616,"things are potentially different sizes, so compute the exact codes",
pandas/,617,for each level and pass those to MultiIndex.from_arrays,
pandas/,632,these go at the end,
pandas/,644,make sure that all of the passed indices have the same nlevels,
pandas/,650,also copies,
pandas/,661,also copies,
pandas/,665,construct codes,
pandas/,668,do something a bit more speedy,
pandas/,205,NOTE: this binning code is changed a bit from histogram for var(x) == 0,
pandas/,215,for array-like,
pandas/,228,GH 24314,
pandas/,232,adjust end points before binning,
pandas/,236,adjust end points after binning,
pandas/,238,0.1% of the range,
pandas/,255,GH 26045: cast to float64 to avoid an overflow,
pandas/,373,we have a fast-path here,
pandas/,447,GH 20303,
pandas/,449,To support cut and qcut for IntegerArray we convert to float dtype.,
pandas/,450,Will properly support in the future.,
pandas/,451,https://github.com/pandas-dev/pandas/pull/31290,
pandas/,452,https://github.com/pandas-dev/pandas/issues/31389,
pandas/,457,GH 19768: force NaT to NaN during integer conversion,
pandas/,536,adjust lhs of first interval by precision to account for being right closed,
pandas/,548,Check that the passed array is a Pandas or Numpy object,
pandas/,549,We don't want to strip away a Pandas data-type here (e.g. datetimetz),
pandas/,599,default,
pandas/,54,noqa:F401,
pandas/,115,if we can groupby the rhs,
pandas/,116,then we can get vastly better perf,
pandas/,131,key doesn't exist in left,
pandas/,141,make sure join keys are in the merged,
pandas/,142,"TODO, should merge_pieces do this?",
pandas/,149,preserve the original order,
pandas/,150,if we have a missing piece this can be reset,
pandas/,263,perform the ordered merge operation,
pandas/,566,TODO: transformations??,
pandas/,567,TODO: only copy DataFrames when modification necessary,
pandas/,599,bm_axis -> the axis on the BlockManager,
pandas/,601,axis --> the axis on the Series/DataFrame,
pandas/,636,warn user when merging between different levels,
pandas/,647,note this function has side effects,
pandas/,654,validate the merge keys dtypes. We may need to coerce,
pandas/,655,to avoid incompat dtypes,
pandas/,658,"If argument passed to validate,",
pandas/,659,check if columns specified as unique,
pandas/,660,are in fact unique.,
pandas/,836,if we have an all missing left_indexer,
pandas/,837,make sure to just use the right values,
pandas/,942,if final index requires values in other_index but not target,
pandas/,943,"index, indexer may hold missing (-1) values, causing Index.take",
pandas/,944,"to take the final value in target index. So, we set the last",
pandas/,945,element to be the desired fill value. We do not use allow_fill,
pandas/,946,and fill_value because it throws a ValueError on integer indices,
pandas/,978,Note that pd.merge_asof() has separate 'on' and 'by' parameters. A,
pandas/,979,"user could, for example, request 'left_index' and 'left_by'. In a",
pandas/,980,"regular pd.merge(), users cannot specify both 'left_index' and",
pandas/,981,"'left_on'. (Instead, users have a MultiIndex). That means the",
pandas/,982,"self.left_on in this function is always empty in a pd.merge(), but",
pandas/,983,"a pd.merge_asof(left_index=True, left_by=...) will result in a",
pandas/,984,self.left_on array with a None in the middle of it. This requires,
pandas/,985,a work-around as designated in the code below.,
pandas/,986,See _validate_specification() for where this happens.,
pandas/,988,"ugh, spaghetti re #733",
pandas/,995,what to do?,
pandas/,1001,work-around for merge_asof(right_index=True),
pandas/,1009,work-around for merge_asof(right_index=True),
pandas/,1012,avoid key upcast in corner case (length-0),
pandas/,1023,work-around for merge_asof(left_index=True),
pandas/,1070,we have valid mergees but we may have to further,
pandas/,1071,coerce these if they are originally incompatible types,
pandas/,1072,,
pandas/,1073,"for example if these are categorical, but are not dtype_equal",
pandas/,1074,or if we have object and integer dtypes,
pandas/,1087,if either left or right is a categorical,
pandas/,1088,then the must match exactly in categories & ordered,
pandas/,1104,"if we are numeric, then allow differing",
pandas/,1105,"kinds to proceed, eg. int64 and int8, int and float",
pandas/,1106,"further if we are object, but we infer to",
pandas/,1107,"the same, then proceed",
pandas/,1112,check whether ints and floats,
pandas/,1133,let's infer and see if we are ok,
pandas/,1139,Check if we are trying to merge on obviously,
pandas/,1140,"incompatible dtypes GH 9780, GH 15800",
pandas/,1142,bool values are coerced to object,
pandas/,1148,object values are allowed to be merged,
pandas/,1157,inferred bool,
pandas/,1161,unless we are merging non-string-like with string-like,
pandas/,1169,datetimelikes must match exactly,
pandas/,1182,"Houston, we have a problem!",
pandas/,1183,let's coerce to object if the dtypes aren't,
pandas/,1184,"categorical, otherwise coerce to the category",
pandas/,1185,"dtype. If we coerced categories to object,",
pandas/,1186,then we would lose type information on some,
pandas/,1187,"columns, and end up trying to merge",
pandas/,1188,incompatible dtypes. See GH 16900.,
pandas/,1197,"Hm, any way to make this logic less complicated??",
pandas/,1209,use the common columns,
pandas/,1252,Check uniqueness of each,
pandas/,1263,Check data integrity,
pandas/,1321,get left & right join labels and num. of levels at each location,
pandas/,1329,get flat i8 keys from label lists,
pandas/,1332,factorize keys to a dense i8 space,
pandas/,1333,`count` is the num. of unique keys,
pandas/,1334,set(lkey) | set(rkey) == range(count),
pandas/,1337,preserve left frame order if how == 'left' and sort == False,
pandas/,1401,"For multi-multi joins with one overlapping level,",
pandas/,1402,the returned index if of type Index,
pandas/,1403,Assure that join_index is of type MultiIndex,
pandas/,1404,so that dropped levels can be appended,
pandas/,1411,lindexer and rindexer hold the indexes where the join occurred,
pandas/,1412,for left and right respectively. If left/right is None then,
pandas/,1413,the join occurred on all indices of left/right,
pandas/,1420,Iterate through the levels that must be restored,
pandas/,1429,The index of the level name to be restored,
pandas/,1433,Inject -1 in the codes list where a join was not possible,
pandas/,1434,IOW indexer[i]=-1,
pandas/,1477,factorize sorts,
pandas/,1591,we only allow on to be a single item for on,
pandas/,1604,set 'by' columns,
pandas/,1614,add 'by' to our key-list so we can have it in the,
pandas/,1615,output as a key,
pandas/,1628,check 'direction' is valid,
pandas/,1634,note this function has side effects,
pandas/,1637,validate index types are the same,
pandas/,1641,The generic error message is confusing for categoricals.,
pandas/,1642,,
pandas/,1643,"In this function, the join keys include both the original",
pandas/,1644,"ones of the merge_asof() call, and also the keys passed",
pandas/,1645,to its by= argument. Unordered but equal categories,
pandas/,1646,"are not supported for the former, but will fail",
pandas/,1647,"later with a ValueError, so we don't *need* to check",
pandas/,1648,for them here.,
pandas/,1660,validate tolerance; datetime.timedelta or Timedelta if we have a DTI,
pandas/,1694,validate allow_exact_matches,
pandas/,1720,values to compare,
pandas/,1729,we require sortedness and non-null values in the join keys,
pandas/,1745,initial type conversion as needed,
pandas/,1753,"a ""by"" parameter requires special handling",
pandas/,1755,remove 'on' parameter from values if one existed,
pandas/,1763,get tuple representation of values if more than one,
pandas/,1771,upcast 'by' parameter because HashTable is limited,
pandas/,1777,choose appropriate function by type,
pandas/,1788,choose appropriate function by type,
pandas/,1795,left & right join labels and num. of levels at each location,
pandas/,1808,fix right labels if there were any nulls,
pandas/,1812,check if there already was any nulls at this location,
pandas/,1813,"if there was, it is factorized to `shape[i] - 1`",
pandas/,1820,get flat i8 join keys,
pandas/,1823,factorize keys to a dense i8 space,
pandas/,1859,if asked to sort or there are 1-to-many matches,
pandas/,1863,left frame preserves order & length of its index,
pandas/,1925,Some pre-processing for non-ndarray lk / rk,
pandas/,1930,Extract the ndarray (UTC-localized) values,
pandas/,1931,"Note: we dont need the dtypes to match, as these can still be compared",
pandas/,1941,"if we exactly match in categories, allow us to factorize on codes",
pandas/,1944,Same categories in different orders -> recode,
pandas/,1955,GH#23917 TODO: needs tests for case where lk is integer-dtype,
pandas/,1956,and rk is datetime-dtype,
pandas/,1962,GH#23917 TODO: Needs tests for non-matching dtypes,
pandas/,1983,NA group,
pandas/,2015,how many levels can be done without overflow,
pandas/,2019,get keys for the first `nlev` levels,
pandas/,2030,all done!,
pandas/,2033,densify current keys to avoid overflow,
pandas/,23,"Note: We need to make sure `frame` is imported before `pivot`, otherwise",
pandas/,24,_shared_docs['pivot_table'] will not yet exist.  TODO: Fix this dependency,
pandas/,74,GH14938 Make sure value labels are in data,
pandas/,105,gh-21133,
pandas/,106,we want to down cast if,
pandas/,107,the original values are ints,
pandas/,108,as we grouped with a NaN value,
pandas/,109,"and then dropped, coercing to floats",
pandas/,121,"GH17038, this check should only happen if index is defined (not None)",
pandas/,123,Related GH #17123,
pandas/,124,"If index_names are integers, determine whether the integers refer",
pandas/,125,to the level position or name.,
pandas/,154,needed for mypy,
pandas/,172,discard the top level,
pandas/,184,GH 15193 Make sure empty columns are removed if dropna=True,
pandas/,213,i.e. DataFramae,
pandas/,225,"If there are no values and the table is a series, then there is only",
pandas/,226,one column in the data. Compute grand margin and return it.,
pandas/,237,"no values, and table is a DataFrame",
pandas/,247,populate grand margin,
pandas/,260,check the result column and leave floats,
pandas/,269,"we cannot reshape, so coerce the axis",
pandas/,303,"need to ""interleave"" the margins",
pandas/,317,"we are going to mutate this, so need to copy!",
pandas/,323,"we cannot reshape, so coerce the axis",
pandas/,343,"GH31016 this is to calculate margin for each group, and assign",
pandas/,344,corresponded key as index,
pandas/,348,append piece for margin into table_piece,
pandas/,364,slight hack,
pandas/,377,"need to ""interleave"" the margins",
pandas/,457,Exclude tuple because it is seen as a single column name,
pandas/,612,"GH18321, after pivoting, an extra top level of column index of `__dummy__` is",
pandas/,613,"created, and this extra level should not be included in the further steps",
pandas/,618,Post-process,
pandas/,638,Actual Normalizations,
pandas/,656,keep index and column of pivoted table,
pandas/,660,check if margin name is in (for MI cases) or equal to last,
pandas/,661,index/column and save the column and index margin,
pandas/,669,keep the core table,
pandas/,672,Normalize core,
pandas/,675,Fix Margins,
pandas/,40,Don't jit a user passed jitted function,
pandas/,26,16 byte long hashing key,
pandas/,129,noqa,
pandas/,134,keep `hashes` specifically a generator to keep mypy happy,
pandas/,171,create a list-of-Categoricals,
pandas/,177,hash the list-of-ndarrays,
pandas/,225,Convert ExtensionArrays to ndarrays,
pandas/,229,"we have uint64, as we don't directly support missing values",
pandas/,230,we don't want to use take_nd which will coerce to float,
pandas/,231,"instead, directly construct the result with a",
pandas/,232,max(np.uint64) as the missing value indicator,
pandas/,233,,
pandas/,234,TODO: GH 15362,
pandas/,276,"For categoricals, we hash the categories, then remap the codes to the",
pandas/,277,hash values. (This check is above the complex check so that we don't ask,
pandas/,278,"numpy if categorical is a subdtype of complex, as it will choke).",
pandas/,285,"we'll be working with everything as 64-bit values, so handle this",
pandas/,286,128-bit value early,
pandas/,290,"First, turn whatever array this is into unsigned 64-bit ints, if we can",
pandas/,291,manage it.,
pandas/,299,"With repeated values, its MUCH faster to categorize object dtypes,",
pandas/,300,then hash and rename categories. We allow skipping the categorization,
pandas/,301,when the values are known/likely to be unique.,
pandas/,312,we have mixed types,
pandas/,317,"Then, redistribute these 64-bit ints within the space of 64-bit ints",
pandas/,343,this is to be consistent with the _hash_categorical implementation,
pandas/,347,"for tz-aware datetimes, we need the underlying naive UTC value and",
pandas/,348,not the tz aware object or pd extension type (as,
pandas/,349,infer_dtype_from_scalar would do),
pandas/,55,--- Period index sketch,
pandas/,59,GH13277 for unpickling,
pandas/,149,define my properties & methods for delegation,
pandas/,159,------------------------------------------------------------------------,
pandas/,160,Index Constructors,
pandas/,191,range-based.,
pandas/,193,PeriodArray._generate range does validation that fields is,
pandas/,194,empty when really using the range-based constructor.,
pandas/,201,"PeriodIndex allow PeriodIndex(period_index, freq=different)",
pandas/,202,Let's not encourage that kind of behavior in PeriodArray.,
pandas/,205,TODO: We can do some of these with no-copy / coercion?,
pandas/,206,e.g. D -> 2D seems to be OK,
pandas/,210,we strangely ignore `ordinal` if data is passed.,
pandas/,214,"don't pass copy here, since we copy later.",
pandas/,237,For groupby perf. See note in indexes/base about _index_data,
pandas/,244,------------------------------------------------------------------------,
pandas/,245,Data,
pandas/,253,"used to avoid libreduction code paths, which raise or require conversion",
pandas/,286,_check_timedeltalike_freq_compat will raise if incompatible,
pandas/,297,integer is passed to .shift via,
pandas/,298,_add_datetimelike_methods basically,
pandas/,299,but ufunc may pass integer to _add_delta,
pandas/,302,raise when input doesn't have freq,
pandas/,313,------------------------------------------------------------------------,
pandas/,314,Rendering Methods,
pandas/,317,how to represent ourselves to matplotlib,
pandas/,324,------------------------------------------------------------------------,
pandas/,325,Indexing,
pandas/,329,"To avoid a reference cycle, pass a weakref of self._values to _engine_type.",
pandas/,352,------------------------------------------------------------------------,
pandas/,353,Index Methods,
pandas/,378,"This should be TypeError, but TypeError cannot be raised",
pandas/,379,from here because numpy catches.,
pandas/,384,the result is object dtype array of Period,
pandas/,385,cannot pass _simple_new as it is,
pandas/,416,"'how' is index-specific, isn't part of the EA interface.",
pandas/,420,"TODO: should probably raise on `how` here, so we don't ignore it.",
pandas/,438,b/c data is represented as ints make sure we can't have ambiguous,
pandas/,439,indexing,
pandas/,448,No matches,
pandas/,460,convert tolerance to i8,
pandas/,514,A string with invalid format,
pandas/,520,_get_string_slice will handle cases where grp < freqn,
pandas/,533,"Period constructor will cast to string, which we dont want",
pandas/,539,we cannot construct the Period,
pandas/,577,string cannot be parsed as datetime-like,
pandas/,578,TODO: we need tests for this case,
pandas/,598,TODO: we used to also check for,
pandas/,599,"reso in [""day"", ""hour"", ""minute"", ""second""]",
pandas/,600,why is that check not needed?,
pandas/,604,TODO: Check for non-True use_lhs/use_rhs,
pandas/,647,------------------------------------------------------------------------,
pandas/,648,Set Operation Methods,
pandas/,653,*Can't* use PeriodIndexes of different freqs,
pandas/,654,*Can* use PeriodIndex/DatetimeIndex,
pandas/,684,TODO: fastpath for if we have a different PeriodDtype,
pandas/,697,pass an empty PeriodArray with the appropriate dtype,
pandas/,712,"We are called by `union`, which is responsible for this validation",
pandas/,722,------------------------------------------------------------------------,
pandas/,74,"just a normal attribute, no wrapping",
pandas/,122,the arrays defer to Series for comparison ops but the indexes,
pandas/,123,"don't, so we have to unwrap here.",
pandas/,142,We return NotImplemented for object-dtype index *subclasses* so they have,
pandas/,143,a chance to implement ops before we unwrap them.,
pandas/,144,See https://github.com/pandas-dev/pandas/issues/31109,
pandas/,159,"divmod, rdivmod",
pandas/,167,Index.__new__ will choose appropriate subclass for dtype,
pandas/,199,The base class already passes through to _data:,
pandas/,200,"size, __len__, dtype",
pandas/,211,---------------------------------------------------------------------,
pandas/,212,NDarray-Like Methods,
pandas/,219,Unpack to ndarray for MPL compat,
pandas/,222,Includes cases where we get a 2D ndarray back for MPL compat,
pandas/,229,---------------------------------------------------------------------,
pandas/,252,ExtensionIndex subclasses must override Index.insert,
pandas/,291,"Try to run function on index first, and then on elements of index",
pandas/,292,Especially important for group-by functionality,
pandas/,296,Try to use this result if we can,
pandas/,309,Ensure that self.astype(self.dtype) is self,
pandas/,314,pass copy=False because any copying will be done in the,
pandas/,315,_data.astype call above,
pandas/,128,-------------------------------------------------------------------,
pandas/,129,Constructors,
pandas/,166,- Cases checked above all return/raise before reaching here -,
pandas/,181,For groupby perf. See note in indexes/base about _index_data,
pandas/,187,-------------------------------------------------------------------,
pandas/,188,Rendering Methods,
pandas/,196,-------------------------------------------------------------------,
pandas/,202,Have to repeat the check for 'timedelta64' (not ns) dtype,
pandas/,203,"so that we can return a numeric index, since pandas will return",
pandas/,204,a TimedeltaIndex when dtype='timedelta',
pandas/,134,TODO: handle index names!,
pandas/,154,GH 29879,
pandas/,213,DatetimeIndex,
pandas/,229,kind='list',
pandas/,288,"find the non-none names, need to tupleify to make",
pandas/,289,"the set hashable, then reverse on return",
pandas/,41,Avoid need to verify integrity by calling simple_new directly,
pandas/,44,"For backward compat with older pickles, we may need to construct",
pandas/,45,a DatetimeArray to adapt to the newer _simple_new signature,
pandas/,52,These are already stored in our DatetimeArray; if they are,
pandas/,53,"also in the pickle and don't match, we have a problem.",
pandas/,59,"TODO: If we knew what was going in to **d, we might be able to",
pandas/,60,go through _simple_new instead,
pandas/,222,--------------------------------------------------------------------,
pandas/,223,Constructors,
pandas/,246,- Cases checked above all return/raise before reaching here -,
pandas/,273,For groupby perf. See note in indexes/base about _index_data,
pandas/,278,--------------------------------------------------------------------,
pandas/,295,we use a special reduce here because we need,
pandas/,296,to simply set the .tz (and not reinterpret it),
pandas/,317,"If we have tz, we can compare to tzaware",
pandas/,319,"if we dont have tz, we can only compare to tznaive",
pandas/,322,--------------------------------------------------------------------,
pandas/,323,Rendering Methods,
pandas/,326,how to represent ourselves to matplotlib,
pandas/,336,--------------------------------------------------------------------,
pandas/,337,Set Operation Methods,
pandas/,364,--------------------------------------------------------------------,
pandas/,440,preserve the tz & copy,
pandas/,455,"Superdumb, punting on any optimizing",
pandas/,508,GH 24076,
pandas/,509,"If an incoming date string contained a UTC offset, need to localize",
pandas/,510,the parsed date to this offset first before aligning with the index's,
pandas/,511,timezone,
pandas/,531,"These resolution/monotonicity validations came from GH3931,",
pandas/,532,GH3452 and GH2369.,
pandas/,534,See also GH14826,
pandas/,538,"_partial_date_slice doesn't allow microsecond resolution, but",
pandas/,539,_parsed_string_to_bounds allows it.,
pandas/,563,needed to localize naive datetimes,
pandas/,578,GH#20464,
pandas/,591,unrecognized type,
pandas/,600,needed to localize naive datetimes,
pandas/,635,"lower, upper form the half-open interval:",
pandas/,636,"[parsed, parsed + 1 freq)",
pandas/,637,because label may be passed to searchsorted,
pandas/,638,the bounds need swapped if index is reverse sorted and has a,
pandas/,639,length > 1 (is_monotonic_decreasing gives True for empty,
pandas/,640,and length 1 index),
pandas/,667,For historical reasons DatetimeIndex supports slices between two,
pandas/,668,instances of datetime.time as if it were applying a slice mask to,
pandas/,669,"an array of (self.hour, self.minute, self.seconds, self.microsecond).",
pandas/,678,"Pandas supports slicing with dates, treated as datetimes at midnight.",
pandas/,679,https://github.com/pandas-dev/pandas/issues/31501,
pandas/,688,For historical reasons DatetimeIndex by default supports,
pandas/,689,"value-based partial (aka string) slices on non-monotonic arrays,",
pandas/,690,let's try that.,
pandas/,711,--------------------------------------------------------------------,
pandas/,718,"b/c datetime is represented as microseconds since the epoch, make",
pandas/,719,sure we can't have ambiguous indexing,
pandas/,24,"Side note: This has to be of type list. Otherwise,",
pandas/,25,it messes up PyTables type checks.,
pandas/,63,TODO: Consider deprecating these in favor of `union` (xref gh-15506),
pandas/,120,e.g. PeriodArray,
pandas/,125,don't pass MultiIndex,
pandas/,154,TODO: docstring?,
pandas/,171,"required for backward compat, because PI can't be instantiated with",
pandas/,172,ordinals through __new__ GH #13277,
pandas/,180,"GH#23752 ""labels"" kwarg has been replaced with ""codes""",
pandas/,231,"tolist is not actually deprecated, just suppressed in the __dir__",
pandas/,238,To hand over control to subclasses,
pandas/,241,Cython methods; see github.com/cython/cython/issues/2647,
pandas/,242,for why we need to wrap these instead of making them class attributes,
pandas/,243,"Moreover, cython will choose the appropriate-dtyped sub-function",
pandas/,244,given the dtypes of the passed arguments,
pandas/,261,MultiIndex.levels previously allowed setting the index name. We,
pandas/,262,"don't allow this anymore, and raise if it happens rather than",
pandas/,263,failing silently.,
pandas/,270,would we like our indexing holder to defer to us,
pandas/,273,"prioritize current class for _shallow_copy_with_infer,",
pandas/,274,used to infer integers as datetime-likes,
pandas/,278,whether we support partial string indexing. Overridden,
pandas/,279,in DatetimeIndex and PeriodIndex,
pandas/,286,--------------------------------------------------------------------,
pandas/,287,Constructors,
pandas/,305,ensure users don't accidentally put a PandasArray in an index.,
pandas/,310,range,
pandas/,316,categorical,
pandas/,318,Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423,
pandas/,323,interval,
pandas/,325,Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423,
pandas/,331,Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423,
pandas/,337,Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423,
pandas/,343,Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423,
pandas/,348,extension dtype,
pandas/,351,coerce to the provided dtype,
pandas/,357,coerce to the object dtype,
pandas/,361,index-like,
pandas/,363,Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423,
pandas/,371,we need to avoid having numpy coerce,
pandas/,372,things that look like ints/floats to ints unless,
pandas/,373,"they are actually ints, e.g. '0' and 0.0",
pandas/,374,should not be coerced,
pandas/,375,GH 11836,
pandas/,377,TODO: maybe not for object?,
pandas/,379,maybe coerce to a sub-class,
pandas/,391,"asarray_tuplesafe does not always copy underlying data,",
pandas/,392,so need to make sure that this happens,
pandas/,406,"GH#13601, GH#20285, GH#27125",
pandas/,416,GH21470: convert iterable to list before determining if empty,
pandas/,421,"we must be all tuples, otherwise don't construct",
pandas/,422,10697,
pandas/,428,other iterable of some kind,
pandas/,475,_index_data is a (temporary?) fix to ensure that the direct data,
pandas/,476,manipulation we do in `_libs/reduction.pyx` continues to work.,
pandas/,477,"We need access to the actual ndarray, since we're messing with",
pandas/,478,data buffers and strides.,
pandas/,489,--------------------------------------------------------------------,
pandas/,490,Index Internals Methods,
pandas/,537,"TODO: what if hasattr(values, ""dtype"")?",
pandas/,545,Remove tz so Index will try non-DatetimeIndex inference,
pandas/,565,use something other than None to be clearer,
pandas/,580,"property, for now, slow to look up",
pandas/,582,"to avoid a reference cycle, bind `target_values` to a local variable, so",
pandas/,583,`self` is not passed into the lambda.,
pandas/,587,--------------------------------------------------------------------,
pandas/,588,Array-Like Methods,
pandas/,590,ndarray compat,
pandas/,639,we need to see if we are subclassing an,
pandas/,640,index type here,
pandas/,749,only fill if we are passing a non-None fill_value,
pandas/,808,--------------------------------------------------------------------,
pandas/,809,Copying Methods,
pandas/,861,--------------------------------------------------------------------,
pandas/,862,Rendering Methods,
pandas/,875,"no data provided, just attributes",
pandas/,885,using space here controls if the attributes,
pandas/,886,are line separated or not (the default),
pandas/,888,max_seq_items = get_option('display.max_seq_items'),
pandas/,889,if len(self) > max_seq_items:,
pandas/,890,"space = ""\n%s"" % (' ' * (len(klass) + 1))",
pandas/,904,do we want to justify (only do so for non-objects),
pandas/,910,type: ignore,
pandas/,924,how to represent ourselves to matplotlib,
pandas/,958,could have nans,
pandas/,1040,--------------------------------------------------------------------,
pandas/,1041,Conversion Methods,
pandas/,1152,--------------------------------------------------------------------,
pandas/,1153,Name-Centric Methods,
pandas/,1165,Used in MultiIndex.levels to avoid silently ignoring name updates.,
pandas/,1217,GH 20527,
pandas/,1218,All items in 'name' need to be hashable:,
pandas/,1355,--------------------------------------------------------------------,
pandas/,1356,Level-Centric Methods,
pandas/,1489,The two checks above guarantee that here self is a MultiIndex,
pandas/,1502,set nan if needed,
pandas/,1548,--------------------------------------------------------------------,
pandas/,1549,Introspection Methods,
pandas/,1994,--------------------------------------------------------------------,
pandas/,1995,Pickle Methods,
pandas/,2002,--------------------------------------------------------------------,
pandas/,2003,Null Handling Methods,
pandas/,2016,shouldn't reach to this condition by checking hasnans beforehand,
pandas/,2168,no need to care metadata other than name,
pandas/,2169,because it can't have freq if,
pandas/,2194,--------------------------------------------------------------------,
pandas/,2195,Uniqueness Methods,
pandas/,2348,extract an array to pass to _shallow_copy,
pandas/,2360,--------------------------------------------------------------------,
pandas/,2361,Arithmetic & Logical Methods,
pandas/,2376,alias for __add__,
pandas/,2383,wrap Series to ensure we pin name correctly,
pandas/,2405,--------------------------------------------------------------------,
pandas/,2406,Set Operation Methods,
pandas/,2439,cast to Index for when `other` is list-like,
pandas/,2550,"TODO(EA): setops-refactor, clean all this up",
pandas/,2558,incomparable objects,
pandas/,2561,worth making this faster? a very unusual case,
pandas/,2564,do type inference here,
pandas/,2566,"find indexes of things in ""other"" that are not in ""self""",
pandas/,2590,for subclasses,
pandas/,2597,TODO: standardize return type of non-union setops type(self vs other),
pandas/,2644,"TODO(EA): setops-refactor, clean all this up",
pandas/,2660,InvalidIndexError raised by get_indexer if non-unique,
pandas/,2661,IncompatibleFrequency raised by PeriodIndex.get_indexer,
pandas/,2718,pass an empty np.ndarray with the appropriate dtype,
pandas/,2795,{this} minus {other},
pandas/,2802,{other} minus {this},
pandas/,2832,--------------------------------------------------------------------,
pandas/,2833,Indexing Methods,
pandas/,2950,Treat boolean labels passed to a numeric index as not found. Without,
pandas/,2951,this fix False and True would be treated as 0 and 1 respectively.,
pandas/,2952,(GH #16877),
pandas/,2995,override this method on subclasses,
pandas/,3035,find exact matches first (this simplifies the algorithm),
pandas/,3040,"searchsorted returns ""indices into a sorted array such that,",
pandas/,3041,if the corresponding elements in v were inserted before the,
pandas/,3042,"indices, the order of a would be preserved"".",
pandas/,3043,"Thus, we need to subtract 1 to find values to the left.",
pandas/,3045,This also mapped not found values (values of 0 from,
pandas/,3046,"np.searchsorted) to -1, which conveniently is also our",
pandas/,3047,sentinel for missing values,
pandas/,3049,Mark indices to the right of the largest value as not found,
pandas/,3086,--------------------------------------------------------------------,
pandas/,3087,Indexer Conversion Methods,
pandas/,3096,GH#10331,
pandas/,3122,potentially cast the bounds to integers,
pandas/,3125,figure out if this is a positional indexer,
pandas/,3145,convert the slice to an indexer here,
pandas/,3147,if we are mixed and have integers,
pandas/,3150,Validate start & stop,
pandas/,3160,It doesn't matter if we are positional or label based,
pandas/,3164,"GH#16121, GH#24612, GH#31810",
pandas/,3256,--------------------------------------------------------------------,
pandas/,3257,Reindex Methods,
pandas/,3271,trying to reindex on an axis with duplicates,
pandas/,3291,GH6552: preserve names when reindexing to non-named target,
pandas/,3292,(i.e. neither Index nor Series).,
pandas/,3295,GH7774: preserve dtype/tz if target is empty and not an Index.,
pandas/,3296,target may be an iterator,
pandas/,3302,appropriately-dtyped empty array,
pandas/,3317,check is_overlapping for IntervalIndex compat,
pandas/,3372,a unique indexer,
pandas/,3375,"see GH5553, make sure we use the right indexer",
pandas/,3380,"we have a non_unique selector, need to use the original",
pandas/,3381,indexer here,
pandas/,3384,need to retake to have the same size as the indexer,
pandas/,3387,reset the new indexer to account for the new size,
pandas/,3394,--------------------------------------------------------------------,
pandas/,3395,Join Methods,
pandas/,3420,try to figure out the join level,
pandas/,3421,GH3662,
pandas/,3424,have the same levels/names so a simple join,
pandas/,3430,join on the level,
pandas/,3495,TODO: sort=False here for backwards compat. It may,
pandas/,3496,be better to use the sort parameter passed into join,
pandas/,3499,TODO: sort=True here for backwards compat. It may,
pandas/,3500,be better to use the sort parameter passed into join,
pandas/,3523,figure out join names,
pandas/,3528,need at least 1 in common,
pandas/,3537,Drop the non-matching levels from left and right respectively,
pandas/,3541,if only the order differs,
pandas/,3549,Join left and right,
pandas/,3550,Join on same leveled multi-index frames is supported,
pandas/,3555,Restore the dropped levels,
pandas/,3556,Returned index level order is,
pandas/,3557,"common levels, ldrop_names, rdrop_names",
pandas/,3564,Re-create the multi-index,
pandas/,3575,Case where only one index is multi,
pandas/,3576,make the indices into mi's that match,
pandas/,3581,flip if join method is right or left,
pandas/,3597,We only get here if dtypes match,
pandas/,3652,find indexers of beginning of each set of,
pandas/,3653,same-key labels w.r.t all but last level,
pandas/,3688,sort the leaves,
pandas/,3706,just drop missing values. o.w. keep order,
pandas/,3713,tie out the order with other,
pandas/,3714,"outer most level, take the fast route",
pandas/,3720,missing values are placed first; drop them!,
pandas/,3724,sort the leaves,
pandas/,3733,left_indexers are w.r.t masked frame.,
pandas/,3734,reverse to original frame!,
pandas/,3767,We only get here with matching dtypes,
pandas/,3785,We can perform much better than the general case,
pandas/,3822,--------------------------------------------------------------------,
pandas/,3823,Uncategorized Methods,
pandas/,3893,include our engine hashtable,
pandas/,3937,bools force casting,
pandas/,3944,"We can't coerce to the numeric dtype of ""self"" (unless",
pandas/,3945,it's float) if there are NaN values in our output.,
pandas/,3950,construction helpers,
pandas/,3953,We return the TypeError so that we can raise it from the constructor,
pandas/,3954,in order to keep mypy happy,
pandas/,3978,"We can't coerce to the numeric dtype of ""self"" (unless",
pandas/,3979,it's float) if there are NaN values in our output.,
pandas/,4008,"used to avoid libreduction code paths, which raise or require conversion",
pandas/,4081,"There's no custom logic to be implemented in __getslice__, so it's",
pandas/,4082,not overloaded intentionally.,
pandas/,4091,This case is separated from the conditional above to avoid,
pandas/,4092,pessimization of basic indexing.,
pandas/,4160,must be overridden in specific classes,
pandas/,4196,".values cast to object, so we need to cast back",
pandas/,4203,coerces to object,
pandas/,4272,"if other is not object, use other's logic for coercion",
pandas/,4276,d-level MultiIndex can equal d-tuple Index,
pandas/,4280,All EA-backed Index subclasses override equals,
pandas/,4581,"GH 20882, 21257",
pandas/,4582,First try to convert the key to a location,
pandas/,4583,"If that fails, raise a KeyError if an integer",
pandas/,4584,"index, otherwise, see if key is an integer, and",
pandas/,4585,try that,
pandas/,4591,"If the Index cannot hold integer, then this is unambiguously",
pandas/,4592,a locational lookup.,
pandas/,4601,"if key is not a scalar, directly raise an error (the code below",
pandas/,4602,would convert to numpy arrays and raise later any way) - GH29926,
pandas/,4704,"A hack, but it works",
pandas/,4727,"TODO: if we are a MultiIndex, we can do better",
pandas/,4728,that converting to tuples,
pandas/,4734,map to the label,
pandas/,4764,we can return a MultiIndex,
pandas/,4776,empty,
pandas/,4781,"TODO: De-duplicate with map, xref GH#32349",
pandas/,4888,"this is for partial string indexing,",
pandas/,4889,"overridden in DatetimeIndex, TimedeltaIndex and PeriodIndex",
pandas/,4933,return a slice,
pandas/,4986,We are a plain index here (sub-class override this method if they,
pandas/,4987,"wish to have special treatment for floats/ints, e.g. Float64Index and",
pandas/,4988,datetimelike Indexes,
pandas/,4989,reject them,
pandas/,4993,we are trying to find integer bounds on a non-integer based index,
pandas/,4994,this is rejected (generally .loc gets you here),
pandas/,5004,"np.searchsorted expects ascending sort order, have to reverse",
pandas/,5005,"everything for it to work (element ordering, search side and",
pandas/,5006,resulting value).,
pandas/,5042,For datetime indices label may be a string that has to be converted,
pandas/,5043,to datetime boundary according to its resolution.,
pandas/,5046,we need to look up the label,
pandas/,5053,raise the original KeyError,
pandas/,5057,"get_loc may return a boolean array or an array of indices, which",
pandas/,5058,is OK as long as they are representable by a slice.,
pandas/,5115,"If it's a reverse slice, temporarily swap bounds.",
pandas/,5118,GH 16785: If start and end happen to be date strings with UTC offsets,
pandas/,5119,attempt to parse and check that the offsets are the same,
pandas/,5143,"Bounds at this moment are swapped, swap them back and shift by 1.",
pandas/,5144,,
pandas/,5145,"slice_locs('B', 'A', step=-1): s='B', e='A'",
pandas/,5146,,
pandas/,5147,s='A'                 e='B',
pandas/,5148,AFTER SWAP:    |                     |,
pandas/,5149,v ------------------> V,
pandas/,5150,-----------------------------------,
pandas/,5151,| | |A|A|A|A| | | | | |B|B| | | | |,
pandas/,5152,-----------------------------------,
pandas/,5153,^ <------------------ ^,
pandas/,5154,SHOULD BE:   |                     |,
pandas/,5155,end=s-1              start=e-1,
pandas/,5156,,
pandas/,5159,i == -1 triggers ``len(self) + i`` selection that points to the,
pandas/,5160,"last element, not before-the-first one, subtracting len(self)",
pandas/,5161,compensates that.,
pandas/,5215,"Note: this method is overridden by all ExtensionIndex subclasses,",
pandas/,5216,so self is never backed by an EA.,
pandas/,5251,--------------------------------------------------------------------,
pandas/,5252,"Generated Arithmetic, Comparison, and Unary Methods",
pandas/,5313,TODO: rmod? rdivmod?,
pandas/,5443,return NumPy type,
pandas/,5445,pragma: no cover,
pandas/,5471,"not using ""(len(self), )"" to return ""correct"" shape if the values",
pandas/,5472,consists of a >1 D array (see GH-27775),
pandas/,5473,overridden in MultiIndex.shape to avoid materializing the values,
pandas/,5563,must check for exactly list here because of strict type,
pandas/,5564,check in clean_index_list,
pandas/,5578,clean_index_list does the equivalent of copying,
pandas/,5579,so only need to do this if not list instance,
pandas/,5624,"Note we don't just check for ""name"" attribute since that would",
pandas/,5625,pick up e.g. dtype.name,
pandas/,5628,GH#29069,
pandas/,5650,we need to avoid having numpy coerce,
pandas/,5651,things that look like ints/floats to ints unless,
pandas/,5652,"they are actually ints, e.g. '0' and 0.0",
pandas/,5653,should not be coerced,
pandas/,5654,GH 11836,
pandas/,5666,"If we are actually all equal to integers,",
pandas/,5667,then coerce to integer.,
pandas/,5703,Runtime import needed bc IntervalArray imports Index,
pandas/,5723,TODO: Returns IntegerArray for integer-na case in the future,
pandas/,5731,GH27172: mixed closed Intervals --> object dtype,
pandas/,5734,don't support boolean explicitly ATM,
pandas/,5742,GH 27011,
pandas/,5743,"If we have mixed timezones, just send it",
pandas/,5744,down the base constructor,
pandas/,5782,"skip int64 conversion attempt if uint-like dtype is passed, as",
pandas/,5783,this could return Int64Index when UInt64Index is what's desired,
pandas/,5787,TODO: might still need to copy,
pandas/,5791,"Conversion to int64 failed (possibly due to overflow) or was skipped,",
pandas/,5792,so let's try now with uint64.,
pandas/,5796,TODO: might still need to copy,
pandas/,5826,"GH#23524 passing `dtype=object` to DatetimeIndex is invalid,",
pandas/,5827,will raise in the where `data` is already tz-aware.  So,
pandas/,5828,we leave it out of this step and cast to object-dtype after,
pandas/,5829,the DatetimeIndex construction.,
pandas/,5832,Note we can pass copy=False because the .astype below,
pandas/,5833,will always make a copy,
pandas/,26,noqa:F401,
pandas/,66,maybe need to upcast (ints),
pandas/,79,"return the result as a Series, which is by definition a copy",
pandas/,82,setting this object will show a SettingWithCopyWarning/Error,
pandas/,110,setting this object will show a SettingWithCopyWarning/Error,
pandas/,427,CombinedDatetimelikeProperties isn't really instantiated. Instead,
pandas/,428,we need to choose which parent (datetime or timedelta) is,
pandas/,429,"appropriate. Since we're checking the dtypes anyway, we'll just",
pandas/,430,do all the validation here.,
pandas/,170,"self.codes can have dtype int8, int16, int32 or int64, so we need",
pandas/,171,"to return the corresponding engine type (libindex.Int8Engine, etc.).",
pandas/,181,--------------------------------------------------------------------,
pandas/,182,Constructors,
pandas/,193,don't allow scalars,
pandas/,194,"if data is None, then categories must be provided",
pandas/,244,--------------------------------------------------------------------,
pandas/,312,--------------------------------------------------------------------,
pandas/,313,Rendering Methods,
pandas/,343,--------------------------------------------------------------------,
pandas/,356,"used to avoid libreduction code paths, which raise or require conversion",
pandas/,361,"if key is a NaN, check if any NaN is in self.",
pandas/,375,GH 18630,
pandas/,394,we are going to look things up with the codes themselves.,
pandas/,395,"To avoid a reference cycle, bind `codes` to a local variable, so",
pandas/,396,`self` is not passed into the lambda.,
pandas/,405,Use _simple_new instead of _shallow_copy to ensure we keep dtype,
pandas/,406,"of result, not self.",
pandas/,425,TODO: Investigate an alternative implementation with,
pandas/,426,1. copy the underlying Categorical,
pandas/,427,2. setitem with `cond` and `other`,
pandas/,428,3. Rebuild CategoricalIndex.,
pandas/,474,filling in missing if needed,
pandas/,479,coerce to a regular index here!,
pandas/,488,we always want to return an Index type here,
pandas/,489,to be consistent with .reindex for other index types (e.g. they don't,
pandas/,490,"coerce based on the actual values, only on the dtype)",
pandas/,491,unless we had an initial Categorical to begin with,
pandas/,492,in which case we are going to conform to the passed Categorical,
pandas/,516,.reindex returns normal Index. Revert to CategoricalIndex if,
pandas/,517,all targets are included in my categories,
pandas/,542,we have the same codes,
pandas/,563,Indexing on codes is more efficient if categories are the same:,
pandas/,576,Return our indexer or raise if all of the values are not included in,
pandas/,577,the categories,
pandas/,730,"if calling index is category, don't check dtype of others",
pandas/,740,"if name is None, _create_from_codes sets self.name",
pandas/,83,check whether self._data has been called,
pandas/,85,--------------------------------------------------------------------,
pandas/,86,Constructors,
pandas/,95,RangeIndex,
pandas/,100,validate the arguments,
pandas/,148,--------------------------------------------------------------------,
pandas/,184,--------------------------------------------------------------------,
pandas/,185,Rendering Methods,
pandas/,197,we are formatting thru the attributes,
pandas/,203,--------------------------------------------------------------------,
pandas/,215,GH 25710,
pandas/,248,GH 25710,
pandas/,261,GH 25710,
pandas/,272,GH 25710,
pandas/,367,GH 28678: work on reversed range for simplicity,
pandas/,373,checks/conversions/roundings are delegated to general method,
pandas/,382,We reversed this range: transform to original locs,
pandas/,491,check whether intervals intersect,
pandas/,492,deals with in- and decreasing ranges,
pandas/,498,Method hint: linear Diophantine equation,
pandas/,499,solve intersection problem,
pandas/,500,"performance hint: for identical step sizes, could use",
pandas/,501,cheaper alternative,
pandas/,504,check whether element sets intersect,
pandas/,508,calculate parameters for the RangeIndex describing the,
pandas/,509,intersection disregarding the lower bounds,
pandas/,515,adjust index to limiting interval,
pandas/,625,note: could return RangeIndex in more circumstances,
pandas/,640,Filter the empty indexes,
pandas/,647,This is set by the first non-empty index,
pandas/,652,First non-empty index had only one element,
pandas/,670,"Get the stop value from ""next"" or alternatively",
pandas/,671,from the last non-empty index,
pandas/,675,"Here all ""indexes"" had 0 length, i.e. were empty.",
pandas/,676,In this case return an empty range index.,
pandas/,711,fall back to Int64Index,
pandas/,754,Defer to TimedeltaIndex implementation,
pandas/,757,"GH#19333 is_integer evaluated True on timedelta64,",
pandas/,758,so we need to catch these explicitly,
pandas/,761,Must be an np.ndarray; GH#22390,
pandas/,770,apply if we have an override,
pandas/,775,we don't have a representable op,
pandas/,776,so return a base index,
pandas/,789,for compat with numpy / Int64Index,
pandas/,790,"even if we can represent as a RangeIndex, return",
pandas/,791,as a Float64Index if we have float-like descriptors,
pandas/,798,Defer to Int64Index implementation,
pandas/,800,TODO: Do attrs get handled reliably?,
pandas/,56,type: ignore,
pandas/,65,dtype should be timedelta64[ns] for TimedeltaIndex,
pandas/,66,and datetime64[ns] for DatetimeIndex,
pandas/,98,type: ignore,
pandas/,99,for index / array -agnostic code,
pandas/,111,------------------------------------------------------------------------,
pandas/,112,Abstract data attributes,
pandas/,116,Note: PeriodArray overrides this to return an ndarray of objects.,
pandas/,129,no need to infer if freq is None,
pandas/,133,------------------------------------------------------------------------,
pandas/,148,e.g.,
pandas/,149,"ValueError -> cannot parse str entry, or OutOfBoundsDatetime",
pandas/,150,TypeError  -> trying to convert IntervalIndex to DatetimeIndex,
pandas/,151,OverflowError -> Index([very_large_timedeltas]),
pandas/,155,have different timezone,
pandas/,182,NB: using asi8 instead of _data matters in numpy 1.18,
pandas/,183,because the treatment of NaT has been changed to put NaT last,
pandas/,184,instead of first.,
pandas/,263,quick check,
pandas/,320,quick check,
pandas/,359,--------------------------------------------------------------------,
pandas/,360,Rendering Methods,
pandas/,382,--------------------------------------------------------------------,
pandas/,383,Indexing Methods,
pandas/,418,we are out of range,
pandas/,421,TODO: does this depend on being monotonic _increasing_?,
pandas/,423,a monotonic (sorted) series can be sliced,
pandas/,424,Use asi8.searchsorted to avoid re-validating Periods/Timestamps,
pandas/,433,try to find the dates,
pandas/,451,--------------------------------------------------------------------,
pandas/,502,Do type inference if necessary up front,
pandas/,503,e.g. we passed PeriodIndex.values and got an ndarray of Periods,
pandas/,507,e.g. we have a Categorical holding self.dtype,
pandas/,546,"display as values, not quoted",
pandas/,583,--------------------------------------------------------------------,
pandas/,584,List-like Methods,
pandas/,612,"Compat for frequency inference, see GH#23789",
pandas/,625,GH#29843,
pandas/,636,TODO: We would rather not get here,
pandas/,643,--------------------------------------------------------------------,
pandas/,644,Set Operation Methods,
pandas/,706,"Invalidate the freq of `result`, which may not be correct at",
pandas/,707,"this point, depending on the values.",
pandas/,715,"to make our life easier, ""sort"" the two ranges",
pandas/,721,"after sorting, the intersection always starts with the right index",
pandas/,722,and ends with the index of which the last elements is smallest,
pandas/,748,"to make our life easier, ""sort"" the two ranges",
pandas/,757,"Only need to ""adjoin"", not overlap",
pandas/,761,if we are comparing a freq that does not propagate timezones,
pandas/,762,this will raise,
pandas/,772,"to make our life easier, ""sort"" the two ranges",
pandas/,776,"TDIs are not in the ""correct"" order and we don't want",
pandas/,777,to sort but want to remove overlaps,
pandas/,785,TODO: can we infer that it has self.freq?,
pandas/,793,concatenate,
pandas/,800,TODO: can we infer that it has self.freq?,
pandas/,809,"We are called by `union`, which is responsible for this validation",
pandas/,826,--------------------------------------------------------------------,
pandas/,827,Join Methods,
pandas/,904,--------------------------------------------------------------------,
pandas/,905,List-Like Methods,
pandas/,925,GH 18295,
pandas/,936,check freq can be preserved on edge cases,
pandas/,954,fall back to object index,
pandas/,70,noqa:F401,
pandas/,102,Shift the representation of each level by the pre-calculated number,
pandas/,103,of bits:,
pandas/,106,Now sum and OR are in fact interchangeable. This is a simple,
pandas/,107,composition of the (disjunct) significant bits of each level (i.e.,
pandas/,108,"each column in ""codes"") in a single positive integer:",
pandas/,110,Single key,
pandas/,113,Multiple keys,
pandas/,142,Shift the representation of each level by the pre-calculated number,
pandas/,143,"of bits. Since this can overflow uint64, first make sure we are",
pandas/,144,working with Python integers:,
pandas/,147,Now sum and OR are in fact interchangeable. This is a simple,
pandas/,148,composition of the (disjunct) significant bits of each level (i.e.,
pandas/,149,"each column in ""codes"") in a single positive integer (per row):",
pandas/,151,Single key,
pandas/,154,Multiple keys,
pandas/,241,initialize to zero-length tuples to make everything work,
pandas/,252,--------------------------------------------------------------------,
pandas/,253,Constructors,
pandas/,268,compat with Index,
pandas/,281,"we've already validated levels and codes, so shortcut here",
pandas/,287,handles name validation,
pandas/,347,"NOTE: Currently does not check, among other things, that cached",
pandas/,348,nlevels matches nor that sortorder matches actually sortorder.,
pandas/,432,Check if elements of array are list-like,
pandas/,437,"Check if lengths of all arrays are equal or not,",
pandas/,438,"raise ValueError, if not",
pandas/,568,"codes are all ndarrays, so cartesian_product is lossless",
pandas/,638,--------------------------------------------------------------------,
pandas/,642,"We override here, since our parent uses _data, which we don't use.",
pandas/,684,overriding the base Index.shape definition to avoid materializing,
pandas/,685,"the values (GH-27384, GH-27775)",
pandas/,691,--------------------------------------------------------------------,
pandas/,692,Levels Methods,
pandas/,696,Use cache_readonly to ensure that self.get_locs doesn't repeatedly,
pandas/,697,create new IndexEngine,
pandas/,698,https://github.com/pandas-dev/pandas/issues/31648,
pandas/,703,"disallow midx.levels[0].name = ""foo""",
pandas/,710,This is NOT part of the levels property because it should be,
pandas/,711,externally not allowed to set levels. User beware if you change,
pandas/,712,_levels directly,
pandas/,865,--------------------------------------------------------------------,
pandas/,866,Codes Methods,
pandas/,983,--------------------------------------------------------------------,
pandas/,984,Index Internals,
pandas/,988,Calculate the number of bits needed to represent labels in each,
pandas/,989,"level, as log2 of their sizes (including -1 for NaN):",
pandas/,992,"Sum bit counts, starting from the _right_....",
pandas/,995,... in order to obtain offsets such that sorting the combination of,
pandas/,996,"shifted codes (one for each level, resulting in a unique integer) is",
pandas/,997,equivalent to sorting lexicographically the codes themselves. Notice,
pandas/,998,that each level needs to be shifted by the number of bits needed to,
pandas/,999,represent the _previous_ ones:,
pandas/,1002,Check the total number of bits needed for our representation:,
pandas/,1004,The levels would overflow a 64 bit uint - use Python integers:,
pandas/,1046,GH32669,
pandas/,1050,On equal MultiIndexes the difference is empty.,
pandas/,1051,"Therefore, an empty MultiIndex is returned GH13490",
pandas/,1060,--------------------------------------------------------------------,
pandas/,1147,we are overwriting our base class to avoid,
pandas/,1148,computing .values here which could materialize,
pandas/,1149,a tuple representation unnecessarily,
pandas/,1167,for implementations with no useful getsizeof (PyPy),
pandas/,1175,include our engine hashtable,
pandas/,1179,--------------------------------------------------------------------,
pandas/,1180,Rendering Methods,
pandas/,1207,go through the levels and format them,
pandas/,1210,"add nan values, if there are any",
pandas/,1215,i.e. copy is needed,
pandas/,1216,make writeable,
pandas/,1222,a single-level multi-index,
pandas/,1225,reconstruct the multi-index,
pandas/,1255,we have some NA,
pandas/,1263,weird all NA case,
pandas/,1289,GH3547,
pandas/,1290,"use value of sparsify as sentinel,  unless it's an obvious",
pandas/,1291,"""Truthy"" value",
pandas/,1294,little bit of a kludge job for #1217,
pandas/,1307,--------------------------------------------------------------------,
pandas/,1308,Names Methods,
pandas/,1338,GH 15110,
pandas/,1339,Don't allow a single string for names in a MultiIndex,
pandas/,1357,set the name,
pandas/,1360,GH 20527,
pandas/,1361,All items in 'names' need to be hashable:,
pandas/,1368,"If .levels has been accessed, the names in our cache will be stale.",
pandas/,1375,--------------------------------------------------------------------,
pandas/,1383,Handle group mapping function and return,
pandas/,1391,Handle NAs,
pandas/,1400,Remove unobserved levels from level_index,
pandas/,1403,break references back to us so that setting the name,
pandas/,1404,on the output of a groupby doesn't reflect back here.,
pandas/,1437,Note: levels are zero-based,
pandas/,1447,"used to avoid libreduction code paths, which raise or require conversion",
pandas/,1457,"If each level is sorted, we can operate on the codes directly. GH27495",
pandas/,1462,reversed() because lexsort() wants the most significant key last.,
pandas/,1471,we have mixed types and np.lexsort is not happy,
pandas/,1480,monotonic decreasing if and only if reverse is monotonic increasing,
pandas/,1627,Guarantee resulting column order - PY36+ dict maintains insertion order,
pandas/,1772,indexer to reorder the levels,
pandas/,1779,indexer to reorder the level codes,
pandas/,1836,"Since few levels are typically unused, bincount() is more",
pandas/,1837,efficient than unique() - however it only accepts positive values,
pandas/,1838,(and drops order):,
pandas/,1843,We have unused levels,
pandas/,1846,"Recalculate uniques, now preserving order.",
pandas/,1847,Can easily be cythonized by exploiting the already existing,
pandas/,1848,"""uniques"" and stop parsing ""level_codes"" when all items",
pandas/,1849,are found:,
pandas/,1853,Just ensure that -1 is in first position:,
pandas/,1856,codes get mapped from uniques to 0:len(uniques),
pandas/,1857,-1 (if present) is mapped to last position,
pandas/,1859,... and reassigned value -1:,
pandas/,1864,new levels are simple,
pandas/,1879,--------------------------------------------------------------------,
pandas/,1880,Pickling Methods,
pandas/,1892,--------------------------------------------------------------------,
pandas/,1911,cannot be sure whether the result will be sorted,
pandas/,1946,only fill if we are passing a non-None fill_value,
pandas/,1995,"if all(isinstance(x, MultiIndex) for x in other):",
pandas/,2050,"get_loc returns either an integer, a slice, or a boolean",
pandas/,2051,mask,
pandas/,2220,we have a directed ordering via ascending,
pandas/,2229,level ordering,
pandas/,2235,partition codes and shape,
pandas/,2239,Reverse sorted to retain the order of,
pandas/,2240,smaller indices that needs to be removed,
pandas/,2281,GH6552: preserve names when reindexing to non-named target,
pandas/,2282,(i.e. neither Index nor Series).,
pandas/,2289,GH7774: preserve dtype/tz if target is empty and not an Index.,
pandas/,2290,target may be an iterator,
pandas/,2295,don't preserve freq,
pandas/,2320,hopefully?,
pandas/,2333,--------------------------------------------------------------------,
pandas/,2334,Indexing Methods,
pandas/,2338,"We allow tuples if they are hashable, whereas other Index",
pandas/,2339,subclasses require scalar.,
pandas/,2340,"We have to explicitly exclude generators, as these are hashable.",
pandas/,2349,GH#33355,
pandas/,2383,are we indexing a specific level,
pandas/,2388,take all,
pandas/,2406,GH#10331,
pandas/,2408,Convert key '2016-01-01' to,
pandas/,2409,"('2016-01-01'[, slice(None, None, None)]+)",
pandas/,2413,"Convert (..., '2016-01-01', ...) in tuple to",
pandas/,2414,"(..., slice('2016-01-01', '2016-01-01', None), ...)",
pandas/,2433,empty indexer,
pandas/,2442,let's instead try with a straight Index,
pandas/,2576,This function adds nothing to its parent implementation (the magic,
pandas/,2577,"happens in get_slice_bound method), but it adds meaningful doc.",
pandas/,2597,short circuit,
pandas/,2695,"not including list here breaks some indexing, xref #30892",
pandas/,2708,-- partial selection or non-unique index,
pandas/,2709,break the key into 2 parts based on the lexsort_depth of the index;,
pandas/,2710,the first part returns a continuous slice of the index; the 2nd part,
pandas/,2711,needs linear search within the slice,
pandas/,2782,different name to distinguish from maybe_droplevels,
pandas/,2786,kludgearound,
pandas/,2794,no dropping here,
pandas/,2817,kludge for #1796,
pandas/,2833,partial selection,
pandas/,2834,optionally get indexer to avoid re-calculation,
pandas/,2844,Complete key in unique index -> standard get_loc,
pandas/,2857,everything,
pandas/,2871,pragma: no cover,
pandas/,2882,"return an indexer, boolean array or a slice showing where the key is",
pandas/,2883,in the totality of values,
pandas/,2884,"if the indexer is provided, then use this",
pandas/,2890,"given the inputs and the codes/indexer, compute an indexer set",
pandas/,2891,"if we have a provided indexer, then this need not consider",
pandas/,2892,the entire labels set,
pandas/,2897,we have an indexer which maps the locations in the labels,
pandas/,2898,that we have already selected (and is not an indexer for the,
pandas/,2899,entire set) otherwise this is wasteful so we only need to,
pandas/,2900,examine locations that are in this set the only magic here is,
pandas/,2901,that the result are the mappings to the set that we have,
pandas/,2902,selected,
pandas/,2918,"handle a slice, returning a slice if we can",
pandas/,2919,otherwise a boolean indexer,
pandas/,2933,we have a partial slice (like looking up a partial date,
pandas/,2934,string),
pandas/,2941,we have a slice for start and/or stop,
pandas/,2942,a partial date slicer on a DatetimeIndex generates a slice,
pandas/,2943,note that the stop ALREADY includes the stopped point (if,
pandas/,2944,it was a string sliced),
pandas/,2950,need to have like semantics here to right,
pandas/,2951,searching as when we are using a slice,
pandas/,2952,so include the stop+1 (so we include stop),
pandas/,2955,"sorted, so can return slice object -> view",
pandas/,2965,Desired level is not sorted,
pandas/,2968,The label is present in self.levels[level] but unused:,
pandas/,2975,The label is present in self.levels[level] but unused:,
pandas/,3015,must be lexsorted to at least as many levels,
pandas/,3022,indexer,
pandas/,3023,this is the list of all values that we want to select,
pandas/,3028,return an indexer,
pandas/,3053,"a boolean indexer, must be the same length!",
pandas/,3058,a collection of labels to include from this level (these,
pandas/,3059,are or'd),
pandas/,3069,ignore not founds,
pandas/,3075,no matches we are done,
pandas/,3079,empty slice,
pandas/,3084,"a slice, include BOTH of the labels",
pandas/,3092,a single label,
pandas/,3100,empty indexer,
pandas/,3127,If the index is lexsorted and the list_like label in seq are sorted,
pandas/,3128,then we do not need to sort,
pandas/,3135,Filter absent keys,
pandas/,3136,True if the given codes are not ordered,
pandas/,3138,Bail out if both index and seq are sorted,
pandas/,3144,"For each level of the sequence in seq, map the level codes with the",
pandas/,3145,order they appears in a list-like sequence,
pandas/,3146,This mapping is then use to reorder the indexer,
pandas/,3151,Generate a map with all level codes as sorted initially,
pandas/,3155,Set order as given in the indexer list,
pandas/,3157,Filter absent keys,
pandas/,3162,"For all other case, use the same order as the level",
pandas/,3166,Find the reordering using lexsort on the keys mapping,
pandas/,3215,d-level MultiIndex can equal d-tuple Index,
pandas/,3217,"other cannot contain tuples, so cannot match self",
pandas/,3241,since we use NaT both datetime64 and timedelta64,
pandas/,3242,we can have a situation where a level is typed say,
pandas/,3243,timedelta64 in self (IOW it has other values than NaT),
pandas/,3244,but types datetime64 in other (where its all NaT),
pandas/,3245,but these are equivalent,
pandas/,3267,--------------------------------------------------------------------,
pandas/,3268,Set Methods,
pandas/,3348,TODO: Index.union returns other when `len(self)` is 0.,
pandas/,3391,The intersection is empty,
pandas/,3392,TODO: we have no tests that get here,
pandas/,3403,flag whether _inner_indexer was successful,
pandas/,3407,uniq_tuples is already sorted,
pandas/,3510,--------------------------------------------------------------------,
pandas/,3541,Pad the key with empty strings if lower levels of the key,
pandas/,3542,aren't specified:,
pandas/,3552,have to insert into level,
pandas/,3553,must insert at end otherwise you have to recompute all the,
pandas/,3554,other codes,
pandas/,3651,drop levels,
pandas/,3658,"we have dropped too much, so back out",
pandas/,140,GH 19016: ensure set op will not return a prohibited dtype,
pandas/,197,we would like our indexing holder to defer to us,
pandas/,200,"Immutable, so we are able to cache computations like isna in '_mask'",
pandas/,204,--------------------------------------------------------------------,
pandas/,205,Constructors,
pandas/,333,--------------------------------------------------------------------,
pandas/,397,"used to avoid libreduction code paths, which raise or require conversion",
pandas/,401,we don't want the superclass implementation,
pandas/,424,we don't use an explicit engine,
pandas/,425,so return the bytes here,
pandas/,428,"IntervalTree doesn't have a is_monotonic_decreasing, so have to override",
pandas/,429,the Index implementation,
pandas/,514,GH 23309,
pandas/,518,integer lookups in Series.__getitem__ are unambiguously,
pandas/,519,positional in this case,
pandas/,533,we have missing values,
pandas/,551,trying to reindex on an axis with duplicates,
pandas/,605,convert left/right and reconstruct,
pandas/,612,Timestamp/Timedelta,
pandas/,615,DatetimeIndex/TimedeltaIndex,
pandas/,618,convert NaT from it's i8 value to np.nan so it's not viewed,
pandas/,619,"as a valid value, maybe causing errors (e.g. is_overlapping)",
pandas/,622,ensure consistency with IntervalIndex subtype,
pandas/,654,"GH 20921: ""not is_monotonic_increasing"" for the second condition",
pandas/,655,"instead of ""is_monotonic_decreasing"" to account for single element",
pandas/,656,indexes being both increasing and decreasing,
pandas/,721,assume scalar,
pandas/,727,scalar is not comparable to II subtype --> invalid label,
pandas/,773,equal indexes -> 1:1 positional match,
pandas/,777,different closed or incompatible subtype -> no matches,
pandas/,784,non-overlapping -> at most one match per interval in target_as_index,
pandas/,785,"want exact matches -> need both left/right to match, so defer to",
pandas/,786,"left/right get_indexer, compare elementwise, equality -> match",
pandas/,791,get an indexer for unique categories then propagate to codes via take_1d,
pandas/,795,homogeneous scalar index: use IntervalTree,
pandas/,799,heterogeneous scalar index: defer elementwise to get_loc,
pandas/,800,(non-overlapping so get_loc guarantees scalar of KeyError),
pandas/,808,i.e. non-scalar key,
pandas/,820,check that target_as_index IntervalIndex is compatible,
pandas/,826,different closed or incompatible subtype -> no matches,
pandas/,835,target_as_index might contain intervals: defer elementwise to get_loc,
pandas/,874,"GH#31658 if label-based, we require step == 1,",
pandas/,875,"if positional, we disallow float start/stop",
pandas/,881,i.e. this cannot be interpreted as a positional slice,
pandas/,930,GH 18295,
pandas/,949,--------------------------------------------------------------------,
pandas/,950,Rendering Methods,
pandas/,951,__repr__ associated methods are based on MultiIndex,
pandas/,957,GH 28210: use base method but with different default na_rep,
pandas/,962,TODO: integrate with categorical and make generic,
pandas/,963,name argument is unused here; just for compat with base / categorical,
pandas/,1005,--------------------------------------------------------------------,
pandas/,1017,if we can coerce to an II,
pandas/,1018,then we can compare,
pandas/,1038,Swap other/self if other is unique and self does not have,
pandas/,1039,multiple NaNs,
pandas/,1042,duplicates,
pandas/,1105,GH 19101: ensure empty results have correct dtype,
pandas/,1127,TODO: arithmetic operations,
pandas/,1129,"GH#30817 until IntervalArray implements inequalities, get them from Index",
pandas/,1295,verify type compatibility,
pandas/,1305,+1 to convert interval count to breaks count (n breaks = n-1 intervals),
pandas/,1310,force consistency between start/end/freq (lower end if freq skips it),
pandas/,1314,compute the period/start/end if unspecified (at most one),
pandas/,1324,np.linspace always produces float output,
pandas/,1327,delegate to the appropriate range function,
pandas/,54,Coerce to ndarray if not already ndarray or Index,
pandas/,59,other iterable of some kind,
pandas/,75,"GH#13601, GH#20285, GH#27125",
pandas/,102,we will try to coerce to integers,
pandas/,109,Ensure we are not returning an Int64Index with float data:,
pandas/,118,force conversion to object,
pandas/,119,so we don't lose the bools,
pandas/,163,treat NA values as nans:,
pandas/,169,"Right now, we treat union(int, float) a bit special.",
pandas/,170,See https://github.com/pandas-dev/pandas/issues/26778 for discussion,
pandas/,171,"We may change union(int, float) to go to object.",
pandas/,172,float | [u]int -> float  (the special case),
pandas/,173,<T>   | <T>    -> T,
pandas/,174,<T>   | <U>    -> object,
pandas/,250,do not cache or you'll create a memory leak,
pandas/,300,Cast the indexer to uint64 if possible so that the values returned,
pandas/,301,from indexing are also uint64.,
pandas/,312,Cast the indexer to uint64 if possible so,
pandas/,313,that the values returned from indexing are,
pandas/,314,also uint64.,
pandas/,369,TODO(jreback); this can change once we have an EA Index type,
pandas/,370,GH 13149,
pandas/,375,----------------------------------------------------------------,
pandas/,376,Indexing Methods,
pandas/,386,We always treat __getitem__ slicing as label-based,
pandas/,387,translate to locations,
pandas/,390,----------------------------------------------------------------,
pandas/,417,need to compare nans locations and make sure that they are the same,
pandas/,418,since nans don't compare equal this is a bit tricky,
pandas/,439,Catch this to avoid accidentally casting to 1.0,
pandas/,4,define abstract base classes to enable isinstance type checking on our,
pandas/,5,objects,
pandas/,8,https://github.com/python/mypy/issues/1006,
pandas/,9,error: 'classmethod' used with a non-method,
pandas/,10,type: ignore,
pandas/,70,"Note: IntervalArray and SparseArray are included bc they have _typ=""extension""",
pandas/,31,noqa: F401,
pandas/,32,noqa: F401,
pandas/,37,noqa: F401,
pandas/,140,The Any type annotations above are here only because mypy seems to have a,
pandas/,141,problem dealing with with multiple inheritance from PandasExtensionDtype,
pandas/,142,and ExtensionDtype's @properties in the subclasses below. The kind and,
pandas/,143,type variables in those subclasses are explicitly typed below.,
pandas/,170,pickle support; we don't want to pickle the cache,
pandas/,241,TODO: Document public vs. private API,
pandas/,342,The dtype argument takes precedence over values.dtype (if any),
pandas/,355,"If no ""dtype"" was passed, use the one from ""values"", but honor",
pandas/,356,"the ""ordered"" and ""categories"" arguments",
pandas/,361,"If dtype=None and values is not categorical, create a new dtype.",
pandas/,362,Note: This could potentially have categories=None and,
pandas/,363,ordered=None.,
pandas/,395,"need ordered=None to ensure that operations specifying dtype=""category"" don't",
pandas/,396,override the ordered value for existing categoricals,
pandas/,411,for pickle compat. __get_state__ is defined in the,
pandas/,412,PandasExtensionDtype superclass and uses the public properties to,
pandas/,413,pickle -> need to set the settable private ones here (see GH26067),
pandas/,418,"_hash_categories returns a uint64, so use the negative",
pandas/,419,space for when we have unknown categories to avoid a conflict,
pandas/,425,We *do* want to include the real self.ordered here,
pandas/,448,We're forced into a suboptimal corner thanks to math and,
pandas/,449,backwards compatibility. We require that `CDT(...) == 'category'`,
pandas/,450,"for all CDTs **including** `CDT(None, ...)`. Therefore, *all*",
pandas/,451,"CDT(., .) = CDT(None, False) and *all*",
pandas/,452,"CDT(., .) = CDT(None, True).",
pandas/,455,At least one has ordered=True; equal if both have ordered=True,
pandas/,456,and the same values for categories in the same order.,
pandas/,461,"Neither has ordered=True; equal if both have the same categories,",
pandas/,462,but same order is not necessary.  There is no distinction between,
pandas/,463,"ordered=False and ordered=None: CDT(., False) and CDT(., None)",
pandas/,464,will be equal if they have the same categories.,
pandas/,469,Check and see if they happen to be identical categories,
pandas/,490,"assumes if any individual category is a tuple, then all our. ATM",
pandas/,491,I don't really want to support just some of the categories being,
pandas/,492,tuples.,
pandas/,493,breaks if a np.array of categories,
pandas/,498,TODO: hash_array doesn't handle mixed types. It casts,
pandas/,499,"everything to a str first, which means we treat",
pandas/,500,"{'1', '2'} the same as {'1', 2}",
pandas/,501,find a better solution,
pandas/,506,Avoid future warning.,
pandas/,528,noqa: F811,
pandas/,604,dtype='category' should not change anything,
pandas/,612,"from here on, dtype is a CategoricalDtype",
pandas/,615,update categories/ordered unless they've been explicitly passed as None,
pandas/,694,type: ignore,
pandas/,698,"maybe a string like datetime64[ns, tz], which we support for",
pandas/,699,now.,
pandas/,746,noqa: F811,
pandas/,779,KeyError if maybe_get_tz tries and fails to get a,
pandas/,780,pytz timezone (actually pytz.UnknownTimeZoneError).,
pandas/,781,TypeError if we pass a nonsense tz;,
pandas/,782,"ValueError if we pass a unit other than ""ns""",
pandas/,795,make myself hashable,
pandas/,796,TODO: update this.,
pandas/,810,for pickle compat. __get_state__ is defined in the,
pandas/,811,PandasExtensionDtype superclass and uses the public properties to,
pandas/,812,pickle -> need to set the settable private ones here (see GH26067),
pandas/,865,empty constructor for pickle compat,
pandas/,914,do not parse string like U as period[U],
pandas/,915,avoid tuple to be regarded as freq,
pandas/,938,make myself hashable,
pandas/,948,for pickle compat. __get_state__ is defined in the,
pandas/,949,PandasExtensionDtype superclass and uses the public properties to,
pandas/,950,pickle -> need to set the settable private ones here (see GH26067),
pandas/,960,"PeriodDtype can be instantiated from freq string like ""U"",",
pandas/,961,"but doesn't regard freq str like ""U"" as dtype.",
pandas/,993,noqa: F811,
pandas/,1057,we are called as an empty constructor,
pandas/,1058,generally for pickle compat,
pandas/,1076,GH 19016,
pandas/,1143,make myself hashable,
pandas/,1152,None should match any subtype,
pandas/,1160,for pickle compat. __get_state__ is defined in the,
pandas/,1161,PandasExtensionDtype superclass and uses the public properties to,
pandas/,1162,pickle -> need to set the settable private ones here (see GH26067),
pandas/,1190,noqa: F811,
pandas/,1,flake8: noqa,
pandas/,14,noqa: F401,
pandas/,247,"error: Non-overlapping equality check (left operand type: ""str"", right",
pandas/,248,"operand type: ""Callable[[ExtensionDtype], str]"")  [comparison-overlap]",
pandas/,281,https://github.com/pandas-dev/pandas/issues/22960,
pandas/,282,avoid passing data to `construct_from_string`. This could,
pandas/,283,cause a FutureWarning from numpy about failing elementwise,
pandas/,284,"comparison from, e.g., comparing DataFrame == 'category'.",
pandas/,52,"if to_concat contains different tz,",
pandas/,53,the result must be object dtype,
pandas/,87,filter empty arrays,
pandas/,88,1-d dtypes always are included here,
pandas/,94,"If all arrays are empty, there's nothing to convert, just short-cut to",
pandas/,95,"the concatenation, #3121.",
pandas/,96,,
pandas/,97,"Creating an empty array directly is tempting, but the winnings would be",
pandas/,98,marginal given that it would still require shape & dtype calculation and,
pandas/,99,np.concatenate which has them both implemented is compiled.,
pandas/,109,"this must be prior to concat_datetime,",
pandas/,110,to support Categorical + datetime-like,
pandas/,116,these are mandated to handle empties as well,
pandas/,132,"we have all empties, but may need to coerce the result dtype to",
pandas/,133,object if we have non-numeric type operands (numpy would otherwise,
pandas/,134,cast this to float),
pandas/,139,let numpy coerce,
pandas/,142,coerce to object,
pandas/,165,we could have object blocks and categoricals here,
pandas/,166,if we only have a single categoricals then combine everything,
pandas/,167,else its a non-compat categorical,
pandas/,170,validate the categories,
pandas/,174,when all categories are identical,
pandas/,179,extract the categoricals & coerce to object if needed,
pandas/,320,identical categories - fastpath,
pandas/,344,different categories - union and recode,
pandas/,355,ordered - to show a proper error message,
pandas/,369,coerce to 2d if needed & concatenate,
pandas/,393,"multiple types, need to coerce to object",
pandas/,399,must be single dtype,
pandas/,406,"when to_concat has different tz, len(typs) > 1.",
pandas/,407,thus no need to care,
pandas/,423,coerce datetimelike array to object dtype,
pandas/,425,if dtype is of datetimetz or timezone,
pandas/,448,"Right now, internals will pass a List[DatetimeArray] here",
pandas/,449,for reductions like quantile. I would like to disentangle,
pandas/,450,all this before we get here.,
pandas/,479,TODO: Fix join unit generation so we aren't passed this.,
pandas/,78,noqa: F401,
pandas/,124,occurs in pivot_table doctest,
pandas/,139,try to upcast here,
pandas/,154,a datetimelike,
pandas/,155,"GH12821, iNaT is casted to float",
pandas/,158,not a numpy dtype,
pandas/,160,convert to datetime and change timezone,
pandas/,169,TODO(DatetimeArray): merge with previous elif,
pandas/,175,"e.g. TypeError: int() argument must be a string, a",
pandas/,176,"bytes-like object or a number, not 'Period",
pandas/,197,e.g. SparseDtype has no itemsize attr,
pandas/,201,reached via groupoby.agg _ohlc; really this should be handled,
pandas/,202,earlier,
pandas/,211,don't allow upcasts here (except if empty),
pandas/,218,"if we don't have any elements, just astype it",
pandas/,221,"do a test on the first element, if it fails then we are done",
pandas/,226,"if we have any nulls, then we are done",
pandas/,230,"a comparable, e.g. a Decimal may slip in here",
pandas/,239,np.allclose may raise TypeError on object-dtype,
pandas/,288,We have to special case categorical so as not to upcast,
pandas/,289,things like counts back to categorical,
pandas/,345,We can't predict what downstream EA constructors may raise,
pandas/,383,"We _could_ support non-scalar other, but until we have a compelling",
pandas/,384,"use case, we assume away the possibility.",
pandas/,388,Two conversions for date-like dtypes that can't be done automatically,
pandas/,389,in np.place:,
pandas/,390,NaN -> NaT,
pandas/,391,integer or integer array -> date-like array,
pandas/,403,try to directly set by expanding our array to full,
pandas/,404,length of the boolean,
pandas/,408,IndexError occurs in test_upcast when we have a boolean,
pandas/,409,mask of the wrong shape,
pandas/,410,TypeError occurs in test_upcast when `other` is a bool,
pandas/,420,we are forced to change the dtype of the result as the input,
pandas/,421,isn't compatible,
pandas/,427,we want to decide whether place will work,
pandas/,428,if we have nans in the False portion of our mask then we need to,
pandas/,429,"upcast (possibly), otherwise we DON't want to upcast (e.g. if we",
pandas/,430,"have values, say integers, in the success portion then it's ok to not",
pandas/,431,upcast),
pandas/,435,we have a scalar or len 0 ndarray,
pandas/,436,and its nan and we are changing some values,
pandas/,441,we have an ndarray and the masking has nans in it,
pandas/,450,e.g. int-dtype result and float-dtype other,
pandas/,473,"with object dtype there is nothing to promote, and the user can",
pandas/,474,pass pretty much any weird fill_value they like,
pandas/,477,"if we passed an array here, determine the fill value by dtype",
pandas/,483,we need to change to object type as our,
pandas/,484,fill_value is of object type,
pandas/,490,"We treat string-like dtypes as object, and _always_ fill",
pandas/,491,with np.nan,
pandas/,495,"returns tuple of (dtype, fill_value)",
pandas/,498,"Trying to insert tzaware into tznaive, have to cast to object",
pandas/,513,TODO: What about str that can be a timedelta?,
pandas/,522,NaT has no `to_timedelta64` method,
pandas/,534,TODO: sure we want to cast here?,
pandas/,550,e.g. mst is np.float64 and dtype is np.float32,
pandas/,567,upcast to prevent overflow,
pandas/,571,Case where we disagree with numpy,
pandas/,585,e.g. mst is np.complex128 and dtype is np.complex64,
pandas/,602,in case we have a string that looked like a number,
pandas/,628,Start with exceptions in which we do _not_ cast to numpy types,
pandas/,634,e.g. keep np.nan rather than try to cast to np.float32(np.nan),
pandas/,670,a 1-element ndarray,
pandas/,681,If we create an empty array using a string to infer,
pandas/,682,"the dtype, NumPy will only allocate one character per entry",
pandas/,683,so this is kind of bad. Alternately we could use np.repeat,
pandas/,684,instead of np.empty (but then you still don't want things,
pandas/,685,coming out as np.str_!,
pandas/,697,return datetimetz as object,
pandas/,779,don't force numpy coerce with nan's,
pandas/,836,We allow arbitrary fill values for object dtype,
pandas/,892,messy. non 0/1 integers do not get converted.,
pandas/,925,dispatch on extension dtype if needed,
pandas/,943,allow frequency conversions,
pandas/,959,allow frequency conversions,
pandas/,960,we return a float here!,
pandas/,978,"work around NumPy brokenness, #1987",
pandas/,982,if we have a datetime/timedelta array of objects,
pandas/,983,then coerce to a proper dtype and recall astype_nansafe,
pandas/,1002,"Explicit copy, or required since NumPy can't view from / to object.",
pandas/,1025,convert dates,
pandas/,1029,convert timedeltas,
pandas/,1033,convert to numeric,
pandas/,1043,if we are all nans then leave me alone,
pandas/,1048,soft-conversion,
pandas/,1082,"If not object, do not attempt conversion",
pandas/,1086,"If 1 flag is coerce, ensure 2 others are False",
pandas/,1088,Immediate return if coerce,
pandas/,1102,Soft conversions,
pandas/,1104,"GH 20380, when datetime is beyond year 2262, hence outside",
pandas/,1105,bound of nanosecond-resolution 64-bit integers.,
pandas/,1112,Object check to ensure only run if previous did not convert,
pandas/,1121,"If all NaNs, then do not-alter",
pandas/,1158,Required to catch due to Period.  Can remove once GH 23553 is fixed,
pandas/,1194,return False to force a non-fastpath,
pandas/,1196,check datetime64[ns]/timedelta64[ns] are valid,
pandas/,1197,otherwise try to coerce,
pandas/,1224,TODO: why not timedelta?,
pandas/,1239,we only care about object dtypes,
pandas/,1251,safe coerce to datetime64,
pandas/,1253,GH19671,
pandas/,1257,we might have a sequence of the same-datetimes with tz's,
pandas/,1258,"if so coerce to a DatetimeIndex; if they are not the same,",
pandas/,1259,"then these stay as object dtype, xref GH19671",
pandas/,1276,safe coerce to timedelta64,
pandas/,1278,will try first with a string & object conversion,
pandas/,1298,"if all NaT, return as datetime",
pandas/,1303,We have at least a NaT and a string,
pandas/,1304,try timedelta first to avoid spurious datetime conversions,
pandas/,1305,e.g. '00:00:01' is a timedelta but technically is also a datetime,
pandas/,1308,"cannot skip missing values, as NaT implies that the string",
pandas/,1309,is actually a datetime,
pandas/,1333,Force the dtype if needed.,
pandas/,1341,pandas supports dtype whose granularity is less than [ns],
pandas/,1342,"e.g., [ps], [fs], [as]",
pandas/,1351,our NaT doesn't support tz's,
pandas/,1352,this will coerce to DatetimeIndex with,
pandas/,1353,a matching dtype below,
pandas/,1359,pandas supports dtype whose granularity is less than [ns],
pandas/,1360,"e.g., [ps], [fs], [as]",
pandas/,1374,have a scalar array-like (e.g. NaT),
pandas/,1378,we have an array of datetime or timedeltas & nulls,
pandas/,1383,GH 25843: Remove tz information since the dtype,
pandas/,1384,didn't specify one,
pandas/,1389,The string check can be removed once issue #13712,
pandas/,1390,is solved. String data that is passed with a,
pandas/,1391,datetime64tz is assumed to be naive which should,
pandas/,1392,be localized to the timezone.,
pandas/,1396,"Strings here are naive, so directly localize",
pandas/,1399,"Numeric values are UTC at this point,",
pandas/,1400,so localize and convert,
pandas/,1409,coerce datetimelike to object,
pandas/,1417,we have a non-castable dtype that was passed,
pandas/,1424,catch a datetime/timedelta that is not of ns variety,
pandas/,1425,and no coercion specified,
pandas/,1435,only do this if we have an array and the dtype of the array is not,
pandas/,1436,"setup already we are not an integer/object, so don't bother with this",
pandas/,1437,conversion,
pandas/,1471,workaround for find_common_type([np.dtype('datetime64[ns]')] * 2),
pandas/,1472,=> object,
pandas/,1479,take lowest unit,
pandas/,1485,don't mix bool / int or float or complex,
pandas/,1486,"this is different from numpy, which casts bool with float/int as int",
pandas/,1548,coerce if we have nan for an integer dtype,
pandas/,1551,we need to coerce to object dtype to avoid,
pandas/,1552,to allow numpy to take our string as a scalar value,
pandas/,1581,"numpy will try to interpret nested lists as further dimensions, hence",
pandas/,1582,making a 1D array that contains list-likes is a bit tricky:,
pandas/,1615,GH-21083,
pandas/,1616,"We can't just return np.array(subarr, dtype='str') since",
pandas/,1617,NumPy will convert the non-string objects into strings,
pandas/,1618,Including NA values. Se we have to go,
pandas/,1619,"string -> object -> update NA, which requires an",
pandas/,1620,additional pass over the data.,
pandas/,1685,We do this casting to allow for proper,
pandas/,1686,data and dtype checking.,
pandas/,1687,,
pandas/,1688,We didn't do this earlier because NumPy,
pandas/,1689,doesn't handle `uint64` correctly.,
pandas/,1715,We have to cast after asm8 in case we have NaT,
pandas/,1721,"Note: we include date, not just datetime",
pandas/,131,hack (for now) because MI registers as ndarray,
pandas/,162,hack (for now) because MI registers as ndarray,
pandas/,221,this is the NaT pattern,
pandas/,226,box,
pandas/,241,this is the NaT pattern,
pandas/,246,box,
pandas/,254,Working around NumPy ticket 1542,
pandas/,406,shape compat,
pandas/,410,"Object arrays can contain None, NaN and NaT.",
pandas/,411,string dtypes must be come to this path for NumPy 1.7.1 compat,
pandas/,415,isna considers NaN and None to be equivalent.,
pandas/,436,"tzawareness compat failure, see GH#28507",
pandas/,443,NaNs can occur in float and complex arrays.,
pandas/,446,empty,
pandas/,452,GH#29553 avoid numpy deprecation warning,
pandas/,456,"datetime64, timedelta64, Period",
pandas/,463,"if we have structured dtypes, compare first",
pandas/,573,must be PeriodDType,
pandas/,23,noqa:F401,
pandas/,65,oh the troubles to reduce import time,
pandas/,161,TODO: GH27506 potential bug with ExtensionArrays,
pandas/,163,type: ignore,
pandas/,167,type: ignore,
pandas/,496,TODO: Consider making Period an instance of PeriodDtype,
pandas/,531,TODO: Consider making Interval an instance of IntervalDtype,
pandas/,597,TODO: gh-15585: consider making the checks stricter.,
pandas/,644,invalid comparison,
pandas/,645,object == category will hit this,
pandas/,1062,"This exists to silence numpy deprecation warnings, see GH#29553",
pandas/,1121,"This exists to silence numpy deprecation warnings, see GH#29553",
pandas/,1378,now we use the special definition for Index,
pandas/,1382,TODO(jreback),
pandas/,1383,we don't have a boolean Index class,
pandas/,1384,"so its object, we need to infer to",
pandas/,1385,guess this,
pandas/,1586,fastpath,
pandas/,1592,if we have an array-like,
pandas/,1616,fastpath,
pandas/,1624,if we have an array-like,
pandas/,1628,we are not possibly a dtype,
pandas/,1663,Type object from a dtype,
pandas/,1666,dtype object,
pandas/,1670,Should still pass if we don't have a date-like,
pandas/,1683,TODO(jreback),
pandas/,1684,should deprecate these,
pandas/,1695,"Handles cases like _get_dtype(int) i.e.,",
pandas/,1696,Python objects that are valid dtypes,
pandas/,1697,"(unlike user-defined types, in general)",
pandas/,1698,,
pandas/,1699,TypeError handles the float16 type code of 'e',
pandas/,1700,further handle internal types,
pandas/,1748,short-circuit,
pandas/,1754,registered extension types,
pandas/,1759,try a numpy dtype,
pandas/,1760,raise a consistent TypeError if failed,
pandas/,1764,np.dtype uses `eval` which can raise SyntaxError,
pandas/,1767,Any invalid dtype (such as pd.Timestamp) should raise an error.,
pandas/,1768,"np.dtype(invalid_type).kind = 0 for such objects. However, this will",
pandas/,1769,"also catch some valid dtypes such as object, np.object_ and 'object'",
pandas/,1770,which we safeguard against by catching them earlier and returning,
pandas/,1771,np.dtype(valid_dtype) before this condition is evaluated.,
pandas/,1773,check hashability to avoid errors/DeprecationWarning when we get,
pandas/,1774,here and `dtype` is an array,
pandas/,290,[GH 25196] exclude classes,
pandas/,345,"Unfortunately, we can't use isinstance(obj, collections.abc.Hashable),",
pandas/,346,which can be faster than calling hash. That is because numpy scalars,
pandas/,347,fail this test.,
pandas/,349,Reconsider this decision once this numpy bug is fixed:,
pandas/,350,https://github.com/numpy/numpy/issues/5562,
pandas/,384,Can iterate over it.,
pandas/,385,Has a length associated with it.,
pandas/,155,filter out the on from the object,
pandas/,175,create a new object to prevent aliasing,
pandas/,257,GH #12373 : rolling functions error on float32 data,
pandas/,258,make sure the data is coerced to float64,
pandas/,274,Convert inf to nan for C funcs,
pandas/,320,if we have an 'on' column,
pandas/,321,we want to put it back into the results,
pandas/,322,in the same location,
pandas/,333,need to reorder to include original location of,
pandas/,334,the on column (if its not already there),
pandas/,340,exclude nuisance columns so that they are not reindexed,
pandas/,466,calculation function,
pandas/,982,the below may pop from kwargs,
pandas/,995,exponential window requires the first arg (center),
pandas/,996,to be set to None (necessary for symmetric window),
pandas/,1037,"GH #15662. `False` makes symmetric window, rather than periodic.",
pandas/,1080,these must apply directly,
pandas/,1282,Return an already compiled version of roll_apply if available,
pandas/,1291,TODO: Why do we always pass center=False?,
pandas/,1292,name=func & raw=raw for WindowGroupByMixin._apply,
pandas/,1442,ddof passed again for compat with groupby.rolling,
pandas/,1456,ddof passed again for compat with groupby.rolling,
pandas/,1600,Pass through for groupby.rolling,
pandas/,1635,only default unset,
pandas/,1639,GH 16058: offset window,
pandas/,1646,GH #12373 : rolling functions error on float32 data,
pandas/,1647,"to avoid potential overflow, cast the data to float64",
pandas/,1781,only default unset,
pandas/,1814,i.e. self.axis == 1,
pandas/,1829,we allow rolling on a datetimelike index,
pandas/,1837,we don't allow center,
pandas/,1844,this will raise ValueError on non-fixed freqs,
pandas/,1849,min_periods must be an integer,
pandas/,1854,Passed BaseIndexer subclass should handle all other rolling kwargs,
pandas/,1941,different impl for freq counting,
pandas/,2080,we are setting the index on the actual object,
pandas/,2081,here so our index is carried thru to the selected obj,
pandas/,2082,when we do the splitting for the groupby,
pandas/,48,Set user defined kwargs as attributes that can be used in get_window_bounds,
pandas/,232,"if we have a string function name, wrap it",
pandas/,326,only default unset,
pandas/,371,only default unset,
pandas/,1,noqa:F401,
pandas/,2,noqa:F401,
pandas/,3,noqa:F401,
pandas/,82,TODO: can we de-duplicate with _dispatch?,
pandas/,123,special case in order to handle duplicate column names,
pandas/,150,Symmetric case,
pandas/,162,construct result frame,
pandas/,176,set the index and reorder,
pandas/,192,empty result,
pandas/,201,reset our index names to arg1 names,
pandas/,202,reset our column names to arg2 names,
pandas/,203,careful not to mutate the original names,
pandas/,229,Convert to center of mass; domain checks ensure 0 < alpha <= 1,
pandas/,312,"mask out values, this also makes a common index...",
pandas/,329,GH 32865: These functions work correctly with a BaseIndexer subclass,
pandas/,813,"when using another backend, get out of the way",
pandas/,820,The original data structured can be transformed before passed to the,
pandas/,821,"backend. For example, for DataFrame is common to set the index as the",
pandas/,822,"`x` parameter, and return a Series with the parameter `y` as values.",
pandas/,842,converted to series actually. copy to not modify,
pandas/,854,check if we have y as int or list of ints,
pandas/,870,don't overwrite,
pandas/,1649,Delay import for performance.,
pandas/,1653,matplotlib is an optional dependency. When,
pandas/,1654,"missing, this would raise.",
pandas/,1661,"Fall back to unregisted, module name approach.",
pandas/,1665,We re-raise later on.,
pandas/,1669,Validate that the interface is implemented when the option,
pandas/,1670,"is set, rather than at plot time.",
pandas/,1697,"Because matplotlib is an optional dependency and first-party backend,",
pandas/,1698,we need to attempt an import here to raise an ImportError if needed.,
pandas/,434,alias so the names are same as plotting method parameter names,
pandas/,1,being a bit too dynamic,
pandas/,24,namedtuple to hold results,
pandas/,28,Do not call LinePlot.__init__ which may fill nan,
pandas/,37,"Disable label ax sharing. Otherwise, all subplots shows last",
pandas/,38,column label,
pandas/,48,"Boxplot fails with empty arrays, so need to add a NaN",
pandas/,49,if any cols are empty,
pandas/,50,GH 8181,
pandas/,83,get standard colors for default,
pandas/,85,"use 2 colors by default, for box/whisker and median",
pandas/,86,flier colors isn't needed here,
pandas/,87,because it can be specified by ``sym`` kw,
pandas/,91,mpl default,
pandas/,103,Other types are forwarded to matplotlib,
pandas/,104,"If None, use default colors",
pandas/,110,"GH 30346, when users specifying those arguments explicitly, our defaults",
pandas/,111,"for these four kwargs should be overridden; if not, use Pandas settings",
pandas/,220,"Return axes in multiplot case, maybe revisit later # 985",
pandas/,247,validate return_type:,
pandas/,256,num_colors=3 is required as method maybe_color_bp takes the colors,
pandas/,257,in positions 0 and 2.,
pandas/,258,"if colors not provided, use same defaults as DataFrame.plot.box",
pandas/,266,replace colors in result array with user-specified colors,
pandas/,267,taken from the colors dict parameter,
pandas/,268,"""boxes"" value placed in position 0, ""whiskers"" in 1, etc.",
pandas/,285,"GH 30346, when users specifying those arguments explicitly, our defaults",
pandas/,286,"for these four kwargs should be overridden; if not, use Pandas settings",
pandas/,308,"Return axes in multiplot case, maybe revisit later # 985",
pandas/,326,Prefer array return type for 2-D plots to match the subplot layout,
pandas/,327,https://github.com/pandas-dev/pandas/pull/12216#issuecomment-241175580,
pandas/,18,use mpl default,
pandas/,20,Do not call LinePlot.__init__ which may fill nan,
pandas/,25,create common bin edge,
pandas/,55,ignore style,
pandas/,78,"We allow weights to be a multi-dimensional array, e.g. a (10, 2) array,",
pandas/,79,"and each sub-array (10,) will be called in each iteration. If users only",
pandas/,80,"provide 1D array, we assume the same weights is used for all iterations",
pandas/,90,y is required for KdePlot,
pandas/,123,np.nanmax() and np.nanmin() ignores the missing values,
pandas/,187,allowed to specify mpl default with 'default',
pandas/,302,hack until the plotting interface is a bit more unified,
pandas/,1,TODO: Use the fact that axis can have units to simplify the process,
pandas/,31,---------------------------------------------------------------------,
pandas/,32,Plotting functions and monkey patches,
pandas/,36,resample against axes freq if necessary,
pandas/,39,pragma: no cover,
pandas/,42,Convert DatetimeIndex to PeriodIndex,
pandas/,47,upsample input,
pandas/,51,one is weekly,
pandas/,58,pragma: no cover,
pandas/,101,clear current axes and data,
pandas/,116,for tsplot,
pandas/,152,check for left/right ax in case of secondary yaxis,
pandas/,158,check if a shared ax (sharex/twinx) has already freq set,
pandas/,169,get frequency from data,
pandas/,176,use axes freq if no data freq,
pandas/,180,get the period frequency,
pandas/,194,convert irregular if axes has freq info,
pandas/,196,do not use tsplot if irregular was plotted first,
pandas/,212,"hack this for 0.10.1, creating more technical debt...sigh",
pandas/,234,"tsplot converts automatically, but don't want to convert index",
pandas/,235,over and over for DataFrames,
pandas/,260,Patch methods for subplot. Only format_dateaxis is currently used.,
pandas/,261,Do we need the rest for convenience?,
pandas/,280,handle index specific formatting,
pandas/,281,Note: DatetimeIndex does not use this,
pandas/,282,interface. DatetimeIndex uses matplotlib.date directly,
pandas/,303,x and y coord info,
pandas/,1,being a bit too dynamic,
pandas/,37,need to call list() on the result to copy so we don't,
pandas/,38,modify the global rcParams below,
pandas/,51,GH17525 use common._random_state to avoid resetting the seed,
pandas/,69,check whether the string can be convertible to single color,
pandas/,71,check whether each character can be convertible to colors,
pandas/,79,``colors`` is regarded as color cycle.,
pandas/,80,mpl will raise error any of them is invalid,
pandas/,83,Append more colors by cycling if there is not enough color.,
pandas/,84,Extra colors will be ignored by matplotlib if there are more colors,
pandas/,85,than needed and nothing needs to be done here.,
pandas/,32,no gaps between subplots,
pandas/,42,GH 14855,
pandas/,59,Deal with the diagonal by drawing a histogram there.,
pandas/,102,if all ticks are int,
pandas/,209,Take the rest of the coefficients and resize them,
pandas/,210,appropriately. Take a copy of amplitudes as otherwise numpy,
pandas/,211,deletes the element from amplitudes itself.,
pandas/,215,Generate the harmonics and arguments for the sin and cos,
pandas/,216,functions.,
pandas/,263,TODO: is the failure mentioned below still relevant?,
pandas/,264,"random.sample(ndarray, int) fails on python 3.3, sigh",
pandas/,339,determine values to use for xticks,
pandas/,388,workaround because `c='b'` is hardcoded in matplotlibs scatter method,
pandas/,33,constants,
pandas/,43,Cache for units overwritten by us,
pandas/,83,"register for True or ""auto""",
pandas/,89,"only deregister for ""auto""",
pandas/,96,Cache previous converter if present,
pandas/,100,Replace with pandas converter,
pandas/,105,Renamed in pandas.plotting.__init__,
pandas/,107,"We use type to catch our classes directly, no inheritance",
pandas/,111,restore the old keys,
pandas/,114,make it idempotent by excluding ours.,
pandas/,160,time formatter,
pandas/,201,Period Conversion,
pandas/,225,https://github.com/pandas-dev/pandas/issues/24304,
pandas/,226,convert ndarray[period] -> PeriodIndex,
pandas/,262,Datetime Conversion,
pandas/,266,"values might be a 1-d array, or a list-like of arrays.",
pandas/,293,https://github.com/matplotlib/matplotlib/issues/11391,
pandas/,294,Series was skipped. Convert to DatetimeIndex to get asi8,
pandas/,383,"if no data have been set, this will tank with a ValueError",
pandas/,389,We need to cap at the endpoints of valid datetime,
pandas/,391,FIXME: dont leave commented-out,
pandas/,392,TODO(wesm) unused?,
pandas/,393,if dmin > dmax:,
pandas/,394,"dmax, dmin = dmin, dmax",
pandas/,395,"delta = relativedelta(dmax, dmin)",
pandas/,396,try:,
pandas/,397,start = dmin - delta,
pandas/,398,except ValueError:,
pandas/,399,start = _from_ordinal(1.0),
pandas/,401,try:,
pandas/,402,stop = dmax + delta,
pandas/,403,except ValueError:,
pandas/,404,# The magic number!,
pandas/,405,stop = _from_ordinal(3652059.9999999),
pandas/,416,"We went through the whole loop without breaking, default to 1",
pandas/,431,strip tz,
pandas/,439,pragma: no cover,
pandas/,456,We need to cap at the endpoints of valid datetime,
pandas/,458,FIXME: dont leave commented-out,
pandas/,459,TODO(wesm): unused?,
pandas/,461,"delta = relativedelta(dmax, dmin)",
pandas/,462,try:,
pandas/,463,start = dmin - delta,
pandas/,464,except ValueError:,
pandas/,465,start = _from_ordinal(1.0),
pandas/,467,try:,
pandas/,468,stop = dmax + delta,
pandas/,469,except ValueError:,
pandas/,470,# The magic number!,
pandas/,471,stop = _from_ordinal(3652059.9999999),
pandas/,490,compensate for rounding errors,
pandas/,497,compensate for rounding errors,
pandas/,503,Fixed frequency dynamic tick locators and formatters,
pandas/,505,-------------------------------------------------------------------------,
pandas/,506,--- Locators ---,
pandas/,507,-------------------------------------------------------------------------,
pandas/,580,pragma: no cover,
pandas/,594,pragma: no cover,
pandas/,597,save this for later usage,
pandas/,606,Initialize the output,
pandas/,613,.. and set some shortcuts,
pandas/,624,Case 1. Less than a month,
pandas/,714,Case 2. Less than three months,
pandas/,733,Case 3. Less than 14 months ...............,
pandas/,746,Case 4. Less than 2.5 years ...............,
pandas/,755,Case 4. Less than 4 years .................,
pandas/,767,Case 5. Less than 11 years ................,
pandas/,775,Case 6. More than 12 years ................,
pandas/,797,Initialize the output,
pandas/,825,TODO: Check the following : is it really info['fmt'] ?,
pandas/,939,pragma: no cover,
pandas/,996,axis calls Locator.set_axis inside set_m<xxxx>_formatter,
pandas/,1007,pragma: no cover,
pandas/,1019,requires matplotlib >= 0.98.0,
pandas/,1030,-------------------------------------------------------------------------,
pandas/,1031,--- Formatter ---,
pandas/,1032,-------------------------------------------------------------------------,
pandas/,1078,don't actually use the locs. This is just needed to work with,
pandas/,1079,"matplotlib. Force to use vmin, vmax",
pandas/,1,being a bit too dynamic,
pandas/,16,mini version of autofmt_xdate,
pandas/,53,Python 2 compat,
pandas/,91,copied from matplotlib/pyplot.py and modified for pandas.plotting,
pandas/,210,"if ax is passed and a number of subplots is 1, return ax as it is",
pandas/,228,Create empty object array to hold all axes.  It's easiest to make it 1-d,
pandas/,229,"so we can just append subplots upon creation, and then",
pandas/,232,"Create first subplot separately, so we can share it if requested",
pandas/,241,Note off-by-one counting because add_subplot uses the MATLAB 1-based,
pandas/,242,convention.,
pandas/,245,"Set sharex and sharey to None for blank/dummy axes, these can",
pandas/,246,interfere with proper axis limits on the visible axes if,
pandas/,247,they share axes e.g. issue #7528,
pandas/,261,"Reshape the array to have the final desired dimension (nrow,ncol),",
pandas/,262,though discarding unneeded dimensions that equal 1.  If we only have,
pandas/,263,"one subplot, just return it instead of a 1-element array.",
pandas/,269,"returned axis array will be always 2-d, even if nrows=ncols=1",
pandas/,279,set_visible will not be effective if,
pandas/,280,minor axis has NullLocator and NullFormattor (default),
pandas/,302,"first find out the ax layout,",
pandas/,303,"so that we can correctly handle 'gaps""",
pandas/,309,only the last row of subplots should get x labels -> all,
pandas/,310,other off layout handles the case that the subplot is,
pandas/,311,"the last in the column, because below is no subplot/gap.",
pandas/,318,"if gridspec is used, ax.rowNum and ax.colNum may different",
pandas/,319,"from layout shape. in this case, use last_row logic",
pandas/,328,only the first column should get y labels -> set all other to,
pandas/,329,off as we only have labels in the first column and we always,
pandas/,330,"have a subplot there, we can skip the layout test",
pandas/,32,noqa: F401,
pandas/,49,Importing pyplot at the top of the file (before the converters are,
pandas/,50,registered) causes problems in matplotlib 2 (converters seem to not,
pandas/,51,work),
pandas/,123,"if we get an axis, the users should do the visibility",
pandas/,124,setting...,
pandas/,144,need to know for format_date_labels since it's rotated to 30 by,
pandas/,145,default,
pandas/,167,parse errorbar input if given,
pandas/,179,ugly TypeError if user passes matplotlib's `cmap` name.,
pandas/,180,Probably better to accept either.,
pandas/,203,support series.plot(color='green'),
pandas/,212,support RGB and RGBA tuples in series plot,
pandas/,227,need only a single match,
pandas/,281,secondary axes may be passed via ax kw,
pandas/,285,"if it has right_ax proparty, ``ax`` must be left axes",
pandas/,288,"if it has left_ax proparty, ``ax`` must be right axes",
pandas/,291,"otherwise, create twin axes",
pandas/,293,TODO: use Matplotlib public API when available,
pandas/,298,no data on left y,
pandas/,367,"if all data is plotted on secondary, return right axes",
pandas/,381,"GH16953, _convert is needed as fallback, for ``Series``",
pandas/,382,with ``dtype == object``,
pandas/,386,"GH23719, allow plotting boolean",
pandas/,390,"GH22799, exclude datatime-like type for boxplot",
pandas/,393,TODO: change after solving issue 27881,
pandas/,397,"GH 18755, include object and category type for scatter plot",
pandas/,408,no non-numeric frames or series allowed,
pandas/,412,"GH25587: cast ExtensionArray of pandas (IntegerArray, etc.) to",
pandas/,413,np.ndarray before plot.,
pandas/,448,pragma no cover,
pandas/,518,"rot=0 is a valid setting, hence the explicit None check",
pandas/,555,Replace leg.LegendHandles because it misses marker info,
pandas/,584,Get handle from axes,
pandas/,649,"prevent style kwarg from going to errorbar, where it is",
pandas/,650,unsupported,
pandas/,680,get the twinx ax if appropriate,
pandas/,764,key-matched DataFrame,
pandas/,768,key-matched dict,
pandas/,772,Series of error values,
pandas/,774,broadcast error series across data,
pandas/,779,errors are a column in the dataframe,
pandas/,790,raw error values,
pandas/,795,asymmetrical error bars,
pandas/,807,broadcast errors to each data series,
pandas/,826,user provided label-matched dataframe of errors,
pandas/,851,check axes coordinates to estimate layout,
pandas/,874,Scatter plot allows to plot objects data,
pandas/,894,Addresses issues #10611 and #10678:,
pandas/,895,When plotting scatterplots and hexbinplots in IPython,
pandas/,896,inline backend the colorbar axis height tends not to,
pandas/,897,exactly match the parent axis height.,
pandas/,898,The difference is due to small fractional differences,
pandas/,899,in floating points with similar representation.,
pandas/,900,"To deal with this, this method forces the colorbar",
pandas/,901,height to take the height of the parent axes.,
pandas/,902,For a more detailed description of the issue,
pandas/,903,see the following link:,
pandas/,904,https://github.com/ipython/ipython/issues/11215,
pandas/,906,"GH33389, if ax is used multiple times, we should always",
pandas/,907,use the last one which contains the latest information,
pandas/,908,about the ax,
pandas/,913,The workaround below is no longer necessary.,
pandas/,927,To see the discrepancy in axis heights uncomment,
pandas/,928,the following two lines:,
pandas/,929,"print(points[1, 1] - points[0, 1])",
pandas/,930,"print(cbar_points[1, 1] - cbar_points[0, 1])",
pandas/,938,"hide the matplotlib default for size, in case we want to change",
pandas/,939,the handling of this argument later,
pandas/,954,plot a colorbar only if a colormap is provided or necessary,
pandas/,957,"pandas uses colormap, matplotlib uses cmap.",
pandas/,1013,"pandas uses colormap, matplotlib uses cmap.",
pandas/,1047,this is slightly deceptive,
pandas/,1061,"dummy, not used",
pandas/,1081,.encode('utf-8'),
pandas/,1098,reset of xlim should be used for ts data,
pandas/,1099,"TODO: GH28021, should find a way to change view limit on xaxis",
pandas/,1106,column_num is used to get the target column from protf in line and,
pandas/,1107,area plots,
pandas/,1123,"accept x to be consistent with normal plot func,",
pandas/,1124,x is not passed to tsplot as it uses data.index as x coordinate,
pandas/,1125,column_num must be in kwds for stacking purpose,
pandas/,1128,Set ax with freq info,
pandas/,1130,digging deeper,
pandas/,1138,"set date formatter, locators and rescale limits",
pandas/,1164,stacker may not be initialized for subplots,
pandas/,1212,irregular TS rotated 30 deg. by default,
pandas/,1213,probably a better place to check / set this.,
pandas/,1231,use smaller alpha to distinguish overlap,
pandas/,1254,"need to remove label, because subplots uses mpl legend as it is",
pandas/,1259,get data from the line to get coordinates for fill_between,
pandas/,1262,unable to use ``_get_stacked_values`` here to get starting point,
pandas/,1278,LinePlot expects list of artists,
pandas/,1298,we have to treat a series differently than a,
pandas/,1299,1-column DataFrame w.r.t. color handling,
pandas/,1457,horizontal bars,
pandas/,1504,labels is used for each wedge's labels,
pandas/,1505,Blank out labels for values of 0 so they don't overlap,
pandas/,1506,with nonzero wedges,
pandas/,1523,leglabels is used for legend labels,
pandas/,28,import fails if we do this before np_datetime,
pandas/,29,isort:skip,
pandas/,22,noqa,
pandas/,29,"If we have a deprecated function,",
pandas/,30,try to replace and try again.,
pandas/,53,To load a SparseSeries as a Series[Sparse],
pandas/,55,https://github.com/python/mypy/issues/1020,
pandas/,56,"error: Incompatible return type for ""__new__"" (returns ""Series"", but must return",
pandas/,57,"a subtype of ""_LoadSparseSeries"")",
pandas/,58,type: ignore,
pandas/,71,To load a SparseDataFrame as a DataFrame[Sparse],
pandas/,73,https://github.com/python/mypy/issues/1020,
pandas/,74,"error: Incompatible return type for ""__new__"" (returns ""DataFrame"", but must",
pandas/,75,"return a subtype of ""_LoadSparseFrame"")",
pandas/,76,type: ignore,
pandas/,88,"If classes are moved, provide compat here.",
pandas/,91,15477,
pandas/,95,10890,
pandas/,101,"12588, extensions moving",
pandas/,104,18543 moving period,
pandas/,107,18014 moved __nat_unpickle from _libs.tslib-->_libs.tslibs.nattype,
pandas/,116,15998 top-level dirs moving,
pandas/,149,"19269, arrays moving",
pandas/,151,"19939, add timedeltaindex, float64index compat from 15998 move",
pandas/,171,our Unpickler sub-class to override methods and some dispatcher,
pandas/,172,functions for compat and uses a non-public class of the pickle module.,
pandas/,174,error: Name 'pkl._Unpickler' is not defined,
pandas/,175,type: ignore,
pandas/,177,override superclass,
pandas/,191,compat,
pandas/,208,compat,
pandas/,6,Update install.rst when updating versions!,
pandas/,39,xlrd uses a capitalized attribute name,
pandas/,22,----------------------------------------------------------------------------,
pandas/,23,functions largely based / taken from the six module,
pandas/,25,Much of the code in this module comes from Benjamin Peterson's six library.,
pandas/,26,The license for this library can be found in LICENSES/SIX and the code can be,
pandas/,27,found at https://bitbucket.org/gutworth/six,
pandas/,40,https://github.com/pandas-dev/pandas/pull/9123,
pandas/,126,GH-26361. NumPy added radix sort and changed default to None.,
pandas/,134,"two different signatures of argsort, this second validation",
pandas/,135,for when the `kind` param is supported,
pandas/,160,"type Dict[str, Any]",
pandas/,407,hard-coded for Index,
pandas/,8,numpy versioning,
pandas/,56,is_list_like,
pandas/,40,exact match is OK,
pandas/,18,Check that take_nd works both with writeable arrays,
pandas/,19,(in which case fast typed memory-views implementation),
pandas/,20,and read-only arrays alike.,
pandas/,72,Standard incompatible fill error.,
pandas/,100,No Exception otherwise.,
pandas/,156,No Exception otherwise.,
pandas/,231,No Exception otherwise.,
pandas/,282,axis=0,
pandas/,288,axis=1,
pandas/,322,axis=0,
pandas/,332,this now accepts a float32! # test with float64 out buffer,
pandas/,334,it works!,
pandas/,336,axis=1,
pandas/,347,2005/01/01 - 2006/01/01,
pandas/,352,axis=0,
pandas/,373,axis=1,
pandas/,400,allow_fill=True,
pandas/,411,allow_fill=True,
pandas/,416,GH#26976 make sure we validate along the correct axis,
pandas/,422,The take method found in pd.api.extensions,
pandas/,450,empty take is ok,
pandas/,10,don't mangel single lambda.,
pandas/,87,"GH 27519, test if make_unique function reorders correctly",
pandas/,23,noqa: E731,
pandas/,29,noqa,
pandas/,53,Check with seed,
pandas/,57,Check with random state object,
pandas/,61,check with no arg random state,
pandas/,64,check array-like,
pandas/,65,GH32503,
pandas/,72,Check BitGenerators,
pandas/,73,GH32503,
pandas/,84,Error for floats or strings,
pandas/,121,No uninitialized defaultdicts,
pandas/,126,"No non-mapping subtypes, instance",
pandas/,131,"No non-mapping subtypes, class",
pandas/,138,Convert instance to type,
pandas/,146,GH 21295,
pandas/,68,Need to restore mean,
pandas/,8,noqa,
pandas/,18,we *only* want to skip if the module is truly not available,
pandas/,19,and NOT just an actual import error because of pandas changes,
pandas/,23,noqa,
pandas/,34,noqa,
pandas/,35,noqa,
pandas/,47,noqa,
pandas/,55,https://github.com/pydata/xarray/issues/3751,
pandas/,66,GH 21071,
pandas/,71,Cython import warning,
pandas/,74,patsy needs to update their imports,
pandas/,79,noqa,
pandas/,87,Cython import warning,
pandas/,91,noqa,
pandas/,100,Cython import warning and traitlets,
pandas/,112,noqa,
pandas/,119,noqa,
pandas/,123,"importing from pandas, Cython import warning",
pandas/,127,noqa,
pandas/,132,Cython import warning,
pandas/,137,noqa,
pandas/,145,GH 23868,
pandas/,146,"To ensure proper isolation, we pass these flags",
pandas/,147,-S : disable site-packages,
pandas/,148,-s : disable user site-packages,
pandas/,149,"-E : disable PYTHON* env vars, especially PYTHONPATH",
pandas/,150,"And, that's apparently not enough, so we give up.",
pandas/,151,https://github.com/MacPython/pandas-wheels/pull/50,
pandas/,49,create test series object,
pandas/,65,"use Int64Index, to make sure things work",
pandas/,108,axis=0,
pandas/,115,Series,
pandas/,120,axis=1,
pandas/,136,Series,
pandas/,242,can't call with level on regular DataFrame,
pandas/,252,https://github.com/pandas-dev/pandas/issues/21824,
pandas/,261,count on row labels,
pandas/,270,count on column labels,
pandas/,321,just check that it works for now,
pandas/,325,test that ints work,
pandas/,328,test that int32 work,
pandas/,357,check for regressions on this issue:,
pandas/,358,https://github.com/pandas-dev/pandas/issues/19351,
pandas/,359,make sure DataFrame.unstack() works when its run on a subset of the DataFrame,
pandas/,360,and the Index levels contain values that are not present in the subset,
pandas/,386,regular roundtrip,
pandas/,407,columns unsorted,
pandas/,413,more than 2 levels in the columns,
pandas/,428,not all levels present in each echelon,
pandas/,434,stack with negative number,
pandas/,438,GH10417,
pandas/,498,"it works, #2100",
pandas/,542,GH 18303 - wrong level name should raise,
pandas/,544,A DataFrame with flat axes:,
pandas/,551,Same on a Series:,
pandas/,557,GH 20410,
pandas/,588,series,
pandas/,600,GH #451,
pandas/,612,Can't use mixture of names and numbers to stack,
pandas/,617,nlevels == 3,
pandas/,626,GH 4342,
pandas/,695,GH 4342,
pandas/,760,GH #3997,
pandas/,783,it works!,
pandas/,798,memory problems with naive impl #2278,
pandas/,799,Generate Long File & Test Pivot,
pandas/,815,it works! is sufficient,
pandas/,819,related to #2278 refactoring,
pandas/,835,GH 20601,
pandas/,843,GH 16323,
pandas/,852,deep check for 1-row case,
pandas/,865,check multi-row case,
pandas/,876,GH 18265,
pandas/,880,"b0, b1, ..",
pandas/,881,"a0, a1, ..",
pandas/,907,should work,
pandas/,911,#1697,
pandas/,939,TODO what should join do with names ?,
pandas/,990,hit non-monotonic code path,
pandas/,1030,GH 17537,
pandas/,1032,skipna=True,
pandas/,1045,GH 17537,
pandas/,1070,"for good measure, groupby detail",
pandas/,1103,GH 17667,
pandas/,1154,TODO groupby with level_values drops names,
pandas/,1184,GH #403,
pandas/,1206,test roundtrip,
pandas/,1210,put it at beginning,
pandas/,1220,put it in middle,
pandas/,1334,1532,
pandas/,1339,it works!,
pandas/,1352,it works!,
pandas/,1358,GH 20888,
pandas/,1371,only an issue with long columns,
pandas/,1387,#2200,
pandas/,1396,this travels an improper code path,
pandas/,1417,GH 4516,
pandas/,1439,segfault in #3308,
pandas/,1446,it works!,
pandas/,1450,GH 3950,
pandas/,1525,GH 7092,
pandas/,1531,GH 3950,
pandas/,1597,GH 7793,
pandas/,1624,GH 7746,
pandas/,1653,gh-16120: already existing column,
pandas/,1658,gh-16164: multiindex (tuple) full key,
pandas/,1662,with additional (unnamed) index level,
pandas/,1670,with index name which is a too long tuple...,
pandas/,1675,or too short...,
pandas/,1685,... which is incompatible with col_fill=None,
pandas/,1695,with col_level != 0,
pandas/,1700,GH 6631,
pandas/,1724,GH 9361,
pandas/,1725,fixed by # GH 7891,
pandas/,1732,GH 20757,
pandas/,1781,check that the repr is good,
pandas/,1782,make sure that we have a correct sparsified repr,
pandas/,1783,e.g. only 1 header of read,
pandas/,1786,GH 8017,
pandas/,1787,sorting fails after columns added,
pandas/,1789,construct single-dtype then sort,
pandas/,1798,setitem then sort,
pandas/,1809,axis=1,
pandas/,1811,series,
pandas/,1814,preserve names,
pandas/,1817,inplace,
pandas/,1824,#2684 (int64),
pandas/,1828,it works!,
pandas/,1832,#2684 (int32),
pandas/,1836,it works!,
pandas/,1866,GH 15058,
pandas/,1901,15622,
pandas/,1902,lexsortedness should be identical,
pandas/,1903,across MultiIndex construction methods,
pandas/,1943,14015,
pandas/,1965,doc example,
pandas/,1975,sort it,
pandas/,1988,reconstruct,
pandas/,1997,GH 12261,
pandas/,2005,15687,
pandas/,2029,degenerate case where we sort but don't,
pandas/,2030,have a satisfying result :<,
pandas/,2031,GH 15797,
pandas/,2055,GH 14784,
pandas/,2056,incorrect sorting w.r.t. nans,
pandas/,2100,"sorting frame, default nan position is last",
pandas/,2105,"sorting frame, nan position last",
pandas/,2110,"sorting frame, nan position first",
pandas/,2115,sorting frame with removed rows,
pandas/,2120,"sorting series, default nan position is last",
pandas/,2125,"sorting series, nan position last",
pandas/,2130,"sorting series, nan position first",
pandas/,2136,GH: 16934,
pandas/,2138,Set up a Series with a three level MultiIndex,
pandas/,2148,Sort with boolean ascending,
pandas/,2153,Sort with list of boolean ascending,
pandas/,2172,GH 22797,
pandas/,2173,Try to respect order of keys given for MultiIndex.loc,
pandas/,294,From issue 16627,
pandas/,319,"Same test, but with ordered categorical",
pandas/,81,doc example reshaping.rst,
pandas/,98,M8,
pandas/,115,period,
pandas/,120,periods are not 'sorted' as they are converted back into an index,
pandas/,131,GH 5986,
pandas/,146,"nan should map to na_sentinel, not reverse_indexer[na_sentinel]",
pandas/,147,rizer.factorize should not raise an exception if na_sentinel indexes,
pandas/,148,outside of reverse_indexer,
pandas/,157,nan still maps to na_sentinel when sort=False,
pandas/,161,TODO(wesm): unused?,
pandas/,162,noqa,
pandas/,185,GH9454,
pandas/,194,gh 12666 - check no segfault,
pandas/,199,the above case happens for numpy < 1.14,
pandas/,256,"gh 19727 - check warning is raised for deprecated keyword, order.",
pandas/,257,Test not valid once order keyword is removed.,
pandas/,273,"arrays that include the NA default for that type, but isn't used.",
pandas/,364,GH 15442,
pandas/,383,datetime64[ns]/M8[ns]/timedelta64[ns]/m8[ns] tested elsewhere,
pandas/,393,GH 9431,
pandas/,436,GH 9431,
pandas/,467,we are expecting to return in the order,
pandas/,468,of appearance,
pandas/,471,we are expecting to return in the order,
pandas/,472,of the categories,
pandas/,475,GH 15939,
pandas/,490,Series of categorical dtype,
pandas/,498,CI -> return CI,
pandas/,508,GH 15939,
pandas/,563,9346,
pandas/,564,light testing of guarantee of order of appearance,
pandas/,565,these also are the doc-examples,
pandas/,605,see GH 17108,
pandas/,610,GH 20866,
pandas/,618,GH 21866,
pandas/,621,0.0 and -0.0 are equivalent,
pandas/,625,GH 21866,
pandas/,626,create different nans from bit-patterns:,
pandas/,631,NAN1 and NAN2 are equivalent,
pandas/,637,GH 22295,
pandas/,638,create different nans from bit-patterns:,
pandas/,649,use bit patterns to identify which nan was kept:,
pandas/,654,GH 22295,
pandas/,656,"skip it, values not unique",
pandas/,754,GH 16639,
pandas/,774,GH 22160,
pandas/,775,"nan is special, because from "" a is b"" doesn't follow ""a == b""",
pandas/,776,"at least, isin() should follow python's ""np.nan in [nan] == True""",
pandas/,777,casting to -> np.float64 -> another float-object somewhere on,
pandas/,778,the way could lead jepardize this behavior,
pandas/,779,could be casted to float64,
pandas/,786,GH 22160,
pandas/,787,there could be special treatment for nans,
pandas/,788,the user however could define a custom class,
pandas/,789,"with similar behavior, then we at least should",
pandas/,790,"fall back to usual python's behavior: ""a in [a] == True""",
pandas/,799,same object -> True,
pandas/,801,different objects -> False,
pandas/,805,GH 22160,
pandas/,806,all nans are handled as equivalent,
pandas/,810,different nan-objects,
pandas/,812,as list of python-objects:,
pandas/,816,as object-array:,
pandas/,822,as float64-array:,
pandas/,829,GH 22160,
pandas/,830,ensure 42 is not casted to a string,
pandas/,839,see gh-16991,
pandas/,847,GH 22119,
pandas/,855,GH 21866,
pandas/,856,"create different nans from bit-patterns,",
pandas/,857,these nans will land in different buckets in the hash-table,
pandas/,858,if no special care is taken,
pandas/,864,check that NAN1 and NAN2 are equivalent:,
pandas/,885,"assert isinstance(factor, n)",
pandas/,911,object,
pandas/,930,TODO same for (timedelta),
pandas/,933,GH 13663,
pandas/,953,GH 12424,
pandas/,965,preserve order?,
pandas/,972,"4,3,2,1 (nan)",
pandas/,984,out of order,
pandas/,1008,keep the `d` category with 0,
pandas/,1020,https://github.com/pandas-dev/pandas/issues/9443#issuecomment-73719328,
pandas/,1053,32-bit linux has a different ordering,
pandas/,1060,GH12558,
pandas/,1086,32-bit linux has a different ordering,
pandas/,1174,index,
pandas/,1185,series,
pandas/,1249,index,
pandas/,1264,series,
pandas/,1302,https://github.com/pandas-dev/pandas/issues/16519,
pandas/,1381,Regression test from GH 10448.,
pandas/,1428,GH#30419 fix typing in StringHashTable.set_item to prevent segfault,
pandas/,1435,"key arg typed as string, not object",
pandas/,1442,GH 21688 ensure we can deal with readonly memory views,
pandas/,1449,GH 21866 inconsistent hash-function for float64,
pandas/,1450,default hash-function would lead to different hash-buckets,
pandas/,1451,for 0.0 and -0.0 if there are more than 2^30 hash-buckets,
pandas/,1452,but this would mean 16GB,
pandas/,1453,"12 * 10**8 would trigger the error, if you have enough memory",
pandas/,1457,0.0 and -0.0 are equivalent,
pandas/,1460,GH 21866 inconsistent hash-function for float64,
pandas/,1461,create different nans from bit-patterns:,
pandas/,1466,default hash function would lead to different hash-buckets,
pandas/,1467,for NAN1 and NAN2 even if there are only 4 buckets:,
pandas/,1471,NAN1 and NAN2 are equivalent,
pandas/,1475,GH 21688 ensure we can deal with readonly memory views,
pandas/,1486,resizing to 0 is special case,
pandas/,1500,Test for memory errors after internal vector,
pandas/,1501,reallocations (GH 7157),
pandas/,1504,GH 21688 ensures we can deal with read-only memory views,
pandas/,1507,"initialise instances; cannot initialise in parametrization,",
pandas/,1508,as otherwise external views would be held on the array (which is,
pandas/,1509,one of the things this test is checking),
pandas/,1513,get_labels may append to uniques,
pandas/,1515,to_array() sets an external_view_exists flag on uniques.,
pandas/,1519,subsequent get_labels() calls can no longer append to it,
pandas/,1520,(except for StringHashTables + ObjectVector),
pandas/,1527,should not raise here,
pandas/,1541,output of maker has guaranteed unique elements,
pandas/,1545,add NaN for float column,
pandas/,1548,use different NaN types for object column,
pandas/,1551,create duplicated selection,
pandas/,1555,drop_duplicates has own cython code (hash_table_func_helper.pxi),
pandas/,1556,and is tested separately; keeps first occurrence like ht.unique(),
pandas/,1561,test return_inverse=True,
pandas/,1562,reconstruction can only succeed if the inverse is correct,
pandas/,1581,output of maker has guaranteed unique elements,
pandas/,1585,add NaN for float column,
pandas/,1588,use different NaN types for object column,
pandas/,1591,create duplicated selection,
pandas/,1598,drop_duplicates has own cython code (hash_table_func_helper.pxi),
pandas/,1599,and is tested separately; keeps first occurrence like ht.factorize(),
pandas/,1600,"since factorize removes all NaNs, we do the same here",
pandas/,1604,reconstruction can only succeed if the inverse is correct. Since,
pandas/,1605,"factorize removes the NaNs, those have to be excluded here as well",
pandas/,1621,GH 22729,
pandas/,1623,noqa,
pandas/,1695,GH 18271,
pandas/,1747,corner case,
pandas/,1764,corner case,
pandas/,2043,need to use a stable sort,
pandas/,2044,"np.argsort returns int, groupsort_indexer",
pandas/,2045,always returns int64,
pandas/,2051,compare with lexsort,
pandas/,2052,"np.lexsort returns int, groupsort_indexer",
pandas/,2053,always returns int64,
pandas/,2063,GH 13445,
pandas/,2064,numpy's argsort can be unhappy if something is less than,
pandas/,2065,"itself.  Instead, let's give our infinities a self-consistent",
pandas/,2066,"ordering, but outside the float extended real line.",
pandas/,2090,smoke tests,
pandas/,2122,see gh-14068,
pandas/,2156,Check that the nan boolean arrays override whether or not,
pandas/,2157,the addition overflows. We don't check the result but just,
pandas/,2158,the fact that an OverflowError is not raised.,
pandas/,2179,GH 15714,
pandas/,113,handle timedelta dtypes,
pandas/,117,There are sometimes rounding errors with,
pandas/,118,complex and object dtypes.,
pandas/,119,"If it isn't one of those, re-raise the error.",
pandas/,122,convert object dtypes to something that can be split into,
pandas/,123,real and imaginary parts,
pandas/,131,there should never be a case where numpy returns an object,
pandas/,132,"but nanops doesn't, so make that an exception",
pandas/,171,Recurse on lower-dimension,
pandas/,253,some nanops handle object dtypes better than their numpy,
pandas/,254,"counterparts, so the numpy functions need to be given something",
pandas/,255,else,
pandas/,292,GH 10155,
pandas/,293,"In the previous implementation mean can overflow for int dtypes, it",
pandas/,294,is now consistent with numpy,
pandas/,317,no float128 available,
pandas/,422,fix for handling cases where all elements in an axis are the same,
pandas/,639,Lower dimension for next step in the loop,
pandas/,675,Reduce dimension for next step in the loop,
pandas/,727,Test integer,
pandas/,730,Test float,
pandas/,733,Test complex,
pandas/,737,Test numeric ndarray,
pandas/,741,Test object ndarray,
pandas/,745,Test convertible string ndarray,
pandas/,749,Test non-convertible string ndarray,
pandas/,765,"with the wrong type, python raises TypeError for us",
pandas/,775,xref GH10242,
pandas/,778,Samples from a normal distribution.,
pandas/,808,Generate some sample data.,
pandas/,821,Force use of our own algorithm.,
pandas/,827,The unbiased estimate.,
pandas/,831,The underestimated variance.,
pandas/,834,The overestimated variance.,
pandas/,840,Test against values that were precomputed with Numpy.,
pandas/,851,"Actual variances along axis=0, 1 for ddof=0, 1, 2",
pandas/,867,Test nanvar.,
pandas/,874,Test nanstd.,
pandas/,882,Regression test for GH 10242 (test data taken from GH 10489). Ensure,
pandas/,883,that variance is stable.,
pandas/,896,xref GH 11974,
pandas/,899,Test data + skewness value (computed with scipy.stats.skew),
pandas/,904,xref GH 11974,
pandas/,945,xref GH 11974,
pandas/,948,Test data + kurtosis value (computed with scipy.stats.kurtosis),
pandas/,953,xref GH 11974,
pandas/,994,Enabling mean changes the behavior of DataFrame.mean,
pandas/,995,See https://github.com/pandas-dev/pandas/issues/24752,
pandas/,1040,GH8383,
pandas/,1066,GH22764,
pandas/,17,unicode,
pandas/,21,bytes for python3,
pandas/,25,raises,
pandas/,53,slice,
pandas/,68,reverse,
pandas/,75,not slice,
pandas/,87,slice,
pandas/,96,reverse,
pandas/,103,not slice,
pandas/,139,slice,
pandas/,146,reverse,
pandas/,152,not slice,
pandas/,163,slice,
pandas/,172,reverse,
pandas/,179,not slice,
pandas/,204,GH18197,
pandas/,65,GH9096,
pandas/,73,add sume duplicate rows,
pandas/,76,shuffle rows,
pandas/,82,verify this is testing what it is supposed to test!,
pandas/,85,manually compute groupings,
pandas/,105,"orders=True, na_position='last'",
pandas/,110,"orders=True, na_position='first'",
pandas/,115,"orders=False, na_position='last'",
pandas/,120,"orders=False, na_position='first'",
pandas/,126,np.argsort(items) places NaNs last,
pandas/,128,np.argsort(items2) may not place NaNs first,
pandas/,131,mergesort is the most difficult to get right because we want it to be,
pandas/,132,stable.,
pandas/,134,"According to numpy/core/tests/test_multiarray, """"""The number of",
pandas/,135,sorted items must be greater than ~50 to check the actual algorithm,
pandas/,136,because quick and merge sort fall over to insertion sort for small,
pandas/,137,"arrays.""""""",
pandas/,139,"mergesort, ascending=True, na_position='last'",
pandas/,144,"mergesort, ascending=True, na_position='first'",
pandas/,149,"mergesort, ascending=False, na_position='last'",
pandas/,154,"mergesort, ascending=False, na_position='first'",
pandas/,159,"mergesort, ascending=True, na_position='last'",
pandas/,164,"mergesort, ascending=True, na_position='first'",
pandas/,169,"mergesort, ascending=False, na_position='last'",
pandas/,174,"mergesort, ascending=False, na_position='first'",
pandas/,186,"#2690, combinatorial explosion",
pandas/,190,it works!,
pandas/,198,one-2-one match,
pandas/,217,check that left merge w/ sort=False maintains left frame order,
pandas/,224,one-2-many/none match,
pandas/,231,confirm that this is checking what it is supposed to check,
pandas/,235,add duplicates to left frame,
pandas/,243,add duplicates & overlap with left to the right frame,
pandas/,250,shuffle left & right frames,
pandas/,259,manually compute outer merge,
pandas/,310,as in GH9092 dtypes break with outer/right join,
pandas/,368,na_sentinel,
pandas/,386,out of bound indices,
pandas/,416,GH 13714,
pandas/,420,the above case happens for numpy < 1.14,
pandas/,437,"a = array([1, 3, np.nan, 2], dtype='Int64')",
pandas/,440,"expected = array([1, 2, 3, np.nan], dtype='Int64')",
pandas/,19,Index,
pandas/,38,"because ""index"" (and ""rindex"") fail intentionally",
pandas/,39,"if the string is not found, search only for empty string",
pandas/,61,"translating unicode points of ""a"" to ""d""",
pandas/,68,methods without positional arguments: zip with empty tuple and empty dict,
pandas/,101,use method name as fixture-id,
pandas/,104,test that the above list captures all methods of StringMethods,
pandas/,141,subset of the full set from pandas/conftest.py,
pandas/,149,use inferred type as id,
pandas/,185,object dtype to avoid casting,
pandas/,187,correctness of inference tested in tests/dtypes/test_inference.py,
pandas/,194,"GH 6106, GH 9322",
pandas/,199,GH 23679,
pandas/,208,one instance of parametrized fixture,
pandas/,215,explicit dtype to avoid casting,
pandas/,217,TODO: get rid of these xfails,
pandas/,234,GH 6106,
pandas/,237,"GH 9184, GH 23011, GH 23163",
pandas/,251,"this test does not check correctness of the different methods,",
pandas/,252,"just that the methods work on the specified (inferred) dtypes,",
pandas/,253,and raise on all others,
pandas/,256,one instance of each parametrized fixture,
pandas/,260,TODO: get rid of these xfails,
pandas/,282,explicit dtype to avoid casting,
pandas/,286,"as of v0.23.4, all methods except 'cat' are very lenient with the",
pandas/,287,"allowed data types, just returning NaN for entries that error.",
pandas/,288,"This could be changed with an 'errors'-kwarg to the `str`-accessor,",
pandas/,289,see discussion in GH 13877,
pandas/,299,"xref GH 23555, GH 23556",
pandas/,300,works!,
pandas/,302,"GH 23011, GH 23163",
pandas/,311,https://github.com/pandas-dev/pandas/issues/10661,
pandas/,327,"str.cat(others=None) returns string, for example",
pandas/,331,GH3638,
pandas/,337,iter must yield a Series,
pandas/,340,indices of each yielded Series should be equal to the index of,
pandas/,341,the original Series,
pandas/,345,each element of the series is either a basestring/str or nan,
pandas/,348,desired behavior is to iterate until everything would be nan on the,
pandas/,349,next iter so make sure the last element of the iterator was 'l' in,
pandas/,350,this case since 'wikitravel' is the longest string,
pandas/,362,nothing to iterate over so nothing defined values should remain,
pandas/,363,unchanged,
pandas/,391,GH 21053,
pandas/,403,"test_cat above tests ""str_cat"" from ndarray;",
pandas/,404,"here testing ""str.cat"" from Series/Indext to ndarray/list",
pandas/,407,single array,
pandas/,423,Series/Index with array,
pandas/,427,Series/Index with list,
pandas/,431,errors for incorrect lengths,
pandas/,442,GH 11334,
pandas/,466,Series/Index with unaligned Index -> t.values,
pandas/,470,Series/Index with Series having matching Index,
pandas/,475,Series/Index with Series.values,
pandas/,479,Series/Index with Series having different Index,
pandas/,489,test integer/float dtypes (inferred by constructor) and mixed,
pandas/,495,"without dtype=object, np.array would cast [1, 2, 'b'] to ['1', '2', 'b']",
pandas/,502,GH 22722,
pandas/,508,"need to use outer and na_rep, as otherwise Index would not raise",
pandas/,522,Series/Index with DataFrame,
pandas/,526,Series/Index with two-dimensional ndarray,
pandas/,530,Series/Index with list of Series,
pandas/,534,Series/Index with mixed list of Series/array,
pandas/,538,Series/Index with list of Series; different indexes,
pandas/,545,Series/Index with mixed list; different index,
pandas/,549,Series/Index with DataFrame; different indexes,
pandas/,556,errors for incorrect lengths,
pandas/,561,two-dimensional ndarray,
pandas/,565,list of list-likes,
pandas/,569,mixed list of Series/list-like,
pandas/,573,errors for incorrect arguments in list-like,
pandas/,575,make sure None/NaN do not crash checks in _get_series_list,
pandas/,578,mix of string and Series,
pandas/,582,DataFrame in list,
pandas/,586,2-dim ndarray in list,
pandas/,590,nested lists,
pandas/,594,forbidden input type: set,
pandas/,595,GH 23009,
pandas/,599,forbidden input type: set in list,
pandas/,600,GH 23009,
pandas/,604,"other forbidden input type, e.g. int",
pandas/,608,nested list-likes,
pandas/,614,https://github.com/pandas-dev/pandas/issues/18657,
pandas/,620,result after manual alignment of inputs,
pandas/,640,list of Series,
pandas/,644,DataFrame,
pandas/,648,mixed list of indexed/unindexed,
pandas/,651,"joint index of rhs [t, u]; u will be forced have index of s",
pandas/,659,nested lists are forbidden,
pandas/,662,errors for incorrect lengths,
pandas/,666,unindexed object of wrong length,
pandas/,670,unindexed object of wrong length in list,
pandas/,674,type: ignore,
pandas/,675,"List item 0 has incompatible type ""Type[Series]""; expected ""Type[PandasObject]""",
pandas/,676,See GH#29725,
pandas/,680,GH 24044,
pandas/,683,check that all NaNs in caller / target work,
pandas/,687,add index of s for alignment,
pandas/,690,all-NA target,
pandas/,693,box == Index,
pandas/,698,all-NA caller (only for Series),
pandas/,708,iterator of elements with different types,
pandas/,713,right-align with different indexes in others,
pandas/,752,mixed,
pandas/,786,case insensitive using regex,
pandas/,792,case insensitive without regex,
pandas/,797,mixed,
pandas/,816,unicode,
pandas/,835,gh 22158,
pandas/,837,na for category,
pandas/,847,na for objects,
pandas/,867,mixed,
pandas/,896,mixed,
pandas/,922,mixed,
pandas/,942,mixed,
pandas/,956,mixed,
pandas/,972,mixed,
pandas/,1002,mixed,
pandas/,1012,flags + unicode,
pandas/,1018,GH 13438,
pandas/,1028,GH 15055,
pandas/,1031,test with callable,
pandas/,1037,"test with wrong number of arguments, raising an error",
pandas/,1055,test regex named groups,
pandas/,1064,GH 15446,
pandas/,1067,test with compiled regex,
pandas/,1077,mixed,
pandas/,1087,flags + unicode,
pandas/,1094,case and flags provided to str.replace will have no effect,
pandas/,1095,and will produce warnings,
pandas/,1108,test with callable,
pandas/,1117,GH16808 literal replace (regex=False vs regex=True),
pandas/,1127,Cannot do a literal replace if given a callable repl or compiled,
pandas/,1128,pattern,
pandas/,1151,mixed,
pandas/,1162,GH: 31632,
pandas/,1174,New match behavior introduced in 0.13,
pandas/,1185,mixed,
pandas/,1204,na GH #6609,
pandas/,1213,GH 32806,
pandas/,1219,Make sure that the new string arrays work,
pandas/,1224,Result is nullable boolean with StringDtype,
pandas/,1241,Contains tests like those in test_match and some others.,
pandas/,1243,empty row,
pandas/,1249,mixed,
pandas/,1268,unicode,
pandas/,1275,GH9980,
pandas/,1276,Index only works with one regex group since,
pandas/,1277,multi-group would expand to a frame,
pandas/,1282,these should work for both Series and Index,
pandas/,1284,no groups,
pandas/,1290,only non-capturing groups,
pandas/,1294,single group renames series/index properly,
pandas/,1306,"one group, no matches",
pandas/,1311,"two groups, no matches",
pandas/,1318,"one group, some matches",
pandas/,1323,"two groups, some matches",
pandas/,1328,one named group,
pandas/,1333,two named groups,
pandas/,1340,mix named and unnamed groups,
pandas/,1347,"one normal group, one non-capturing group",
pandas/,1352,"two normal groups, one non-capturing group",
pandas/,1359,one optional group followed by one normal group,
pandas/,1368,one normal group followed by one optional group,
pandas/,1377,GH6348,
pandas/,1378,not passing index to the extractor,
pandas/,1405,single_series_name_is_preserved.,
pandas/,1413,Contains tests like those in test_match and some others.,
pandas/,1415,empty row,
pandas/,1421,mixed,
pandas/,1440,these should work for both Series and Index,
pandas/,1442,no groups,
pandas/,1448,only non-capturing groups,
pandas/,1452,single group renames series/index properly,
pandas/,1460,extract should give the same result whether or not the,
pandas/,1461,series has a name.,
pandas/,1464,"one group, no matches",
pandas/,1469,"two groups, no matches",
pandas/,1476,"one group, some matches",
pandas/,1481,"two groups, some matches",
pandas/,1486,one named group,
pandas/,1491,two named groups,
pandas/,1497,mix named and unnamed groups,
pandas/,1502,"one normal group, one non-capturing group",
pandas/,1509,"two normal groups, one non-capturing group",
pandas/,1516,one optional group followed by one normal group,
pandas/,1524,one normal group followed by one optional group,
pandas/,1532,GH6348,
pandas/,1533,not passing index to the extractor,
pandas/,1560,"GH11386 extract should always return DataFrame, even when",
pandas/,1561,"there is only one group. Prior to v0.18.0, extract returned",
pandas/,1562,Series when there was only one group in the regex.,
pandas/,1597,extractall should return a DataFrame with one row for each,
pandas/,1598,"match, indexed by the subject from which the match came.",
pandas/,1607,The index of the input Series should be used to construct,
pandas/,1608,the index of the output DataFrame:,
pandas/,1638,MultiIndexed subject with names.,
pandas/,1646,optional groups.,
pandas/,1660,only one of two groups has a name.,
pandas/,1671,extractall(one named group) returns DataFrame with one named,
pandas/,1672,column.,
pandas/,1681,extractall(one un-named group) returns DataFrame with one,
pandas/,1682,un-named column.,
pandas/,1688,extractall(one un-named group with quantifier) returns,
pandas/,1689,DataFrame with one un-named column (GH13382).,
pandas/,1712,GH19075 extractall with no matches should return a valid MultiIndex,
pandas/,1722,one un-named group.,
pandas/,1727,two un-named groups.,
pandas/,1732,one named group.,
pandas/,1737,two named groups.,
pandas/,1742,"one named, one un-named.",
pandas/,1756,index should return the same result as the default index without name,
pandas/,1757,thus index.name doesn't affect to the result,
pandas/,1779,Does not make sense to use extractall with a regex that has,
pandas/,1780,no capture groups. (it returns DataFrame with one column for,
pandas/,1781,each capture group),
pandas/,1792,"Prior to v0.18.0, index.str.extract(regex with one group)",
pandas/,1793,"returned Index. With more than one group, extract raised an",
pandas/,1794,error (GH9980). Now extract always returns DataFrame.,
pandas/,1828,"same as above tests, but s has an MultiIndex.",
pandas/,1865,GH7241,
pandas/,1866,(extract) on empty series,
pandas/,1912,ismethods should always return boolean (GH 29624),
pandas/,1942,TODO: unused,
pandas/,1943,noqa,
pandas/,1978,0x00bc: ¼ VULGAR FRACTION ONE QUARTER,
pandas/,1979,0x2605: ★ not number,
pandas/,1980,0x1378: ፸ ETHIOPIC NUMBER SEVENTY,
pandas/,1981,0xFF13: ３ Em 3,
pandas/,2011,"GH9980, GH8028",
pandas/,2021,GH 12180,
pandas/,2022,Dummies named 'name' should work as expected,
pandas/,2043,mixed,
pandas/,2083,mixed,
pandas/,2111,mixed,
pandas/,2251,test with nan,
pandas/,2273,mixed,
pandas/,2330,see gh-13598,
pandas/,2351,Series with non-string values,
pandas/,2372,mixed,
pandas/,2452,"If fillchar is not a charatter, normal str raises TypeError",
pandas/,2453,"'aaa'.ljust(5, 'XY')",
pandas/,2454,"TypeError: must be char, not str",
pandas/,2502,more than one char,
pandas/,2510,mixed,
pandas/,2532,regex split,
pandas/,2544,more than one char,
pandas/,2552,mixed,
pandas/,2574,regex split is not supported by rsplit,
pandas/,2580,"setting max number of splits, make sure it's from reverse",
pandas/,2587,expand blank split GH 20067,
pandas/,2590,NOTE: this is NOT an empty DataFrame,
pandas/,2606,#1859,
pandas/,2615,"re.split 0, str.split -1",
pandas/,2676,https://github.com/pandas-dev/pandas/issues/23677,
pandas/,2765,gh-18450,
pandas/,2771,check that these are actually np.nan and not None,
pandas/,2772,TODO see GH 18463,
pandas/,2773,tm.assert_frame_equal does not differentiate,
pandas/,2777,GH 12617,
pandas/,2779,should preserve name,
pandas/,2801,https://github.com/pandas-dev/pandas/issues/23558,
pandas/,2817,more than one char,
pandas/,2843,None,
pandas/,2857,Not split,
pandas/,2867,unicode,
pandas/,2878,compare to standard lib,
pandas/,2886,https://github.com/pandas-dev/pandas/issues/23558,
pandas/,2939,https://github.com/pandas-dev/pandas/issues/23558,
pandas/,2984,GH 12617,
pandas/,2991,should preserve name,
pandas/,3002,should preserve name,
pandas/,3009,"GH 22676; depr kwarg ""pat"" in favor of ""sep""",
pandas/,3021,#2119,
pandas/,3049,mixed,
pandas/,3114,mixed,
pandas/,3153,"test values are: two words less than width, two words equal to width,",
pandas/,3154,"two words greater than width, one word less than width, one word",
pandas/,3155,"equal to width, one word greater than width, multiple tokens with",
pandas/,3156,trailing whitespace equal to width,
pandas/,3171,expected values,
pandas/,3189,"test with pre and post whitespace (non-unicode), NaN, and non-ascii",
pandas/,3190,Unicode,
pandas/,3203,mixed,
pandas/,3212,bounds testing,
pandas/,3215,positive index,
pandas/,3220,negative index,
pandas/,3226,"GH 20671, getting value not in dict raising `KeyError`",
pandas/,3250,PR #1179,
pandas/,3284,PR #14171,
pandas/,3304,PR #1179,
pandas/,3518,"MultiIndex has mixed dtype, but not allow to use accessor",
pandas/,3526,https://github.com/pandas-dev/pandas/issues/10673,
pandas/,3538,GH25405,
pandas/,3615,https://github.com/pandas-dev/pandas/issues/30969,
pandas/,3616,Only expand=False & multiple groups was failing,
pandas/,3631,https://github.com/pandas-dev/pandas/issues/33425,
pandas/,5,noqa,
pandas/,29,check that we can raise on them,
pandas/,56,TODO: share with run_binary,
pandas/,111,FIXME: dont leave commented-out,
pandas/,112,series doesn't uses vec_compare instead of numexpr...,
pandas/,113,"binary_comp = other.iloc[:, i] + 1",
pandas/,114,"self.run_binary(df.iloc[:, i], binary_comp)",
pandas/,121,randint to get a case with zeros,
pandas/,130,TODO: FIGURE OUT HOW TO GET RUN_BINARY TO WORK WITH MIXED=...,
pandas/,131,can't do arithmetic because comparison methods try to do *entire*,
pandas/,132,frame instead of by-column,
pandas/,140,no op,
pandas/,146,mixed,
pandas/,152,min elements,
pandas/,158,"ok, we only check on first part of expression",
pandas/,173,TODO: get this working,
pandas/,300,raises TypeError,
pandas/,356,GH 22383 - .ne fails if columns containing column name 'dtype',
pandas/,365,"GH#26736 Dataframe.floordiv(Series, axis=1) fails",
pandas/,13,test we have compat with our version of nu,
pandas/,33,noqa,
pandas/,51,noqa,
pandas/,223,"odd failure on win32 platform, so skip",
pandas/,310,ValueError: series frame or frame series align,
pandas/,311,"TypeError, AttributeError: series or frame with scalar align",
pandas/,315,direct numpy comparison,
pandas/,319,"modulus, pow, and floor division require special casing",
pandas/,392,simple,
pandas/,426,compound,
pandas/,437,make sure the other engines work the same as this one,
pandas/,448,~,
pandas/,449,frame,
pandas/,450,float always raises,
pandas/,461,int raises on numexpr,
pandas/,472,bool always works,
pandas/,478,object raises,
pandas/,489,~,
pandas/,492,series,
pandas/,493,float raises,
pandas/,504,int raises on numexpr,
pandas/,515,bool,
pandas/,521,float,
pandas/,522,int,
pandas/,523,bool,
pandas/,525,object,
pandas/,538,float,
pandas/,544,int,
pandas/,550,bool doesn't work with numexpr but works elsewhere,
pandas/,564,float,
pandas/,570,int,
pandas/,576,bool doesn't work with numexpr but works elsewhere,
pandas/,590,Float,
pandas/,592,Int,
pandas/,594,bool doesn't work with numexpr but works elsewhere,
pandas/,608,Float,
pandas/,610,Int,
pandas/,612,bool doesn't work with numexpr but works elsewhere,
pandas/,641,GH 11235,
pandas/,669,GH 16363,
pandas/,684,noqa,
pandas/,691,see gh-10546,
pandas/,718,noqa,
pandas/,724,GH 11149,
pandas/,731,GH 14241,
pandas/,753,GH 18221,
pandas/,814,ValueError: series frame or frame series align,
pandas/,815,"TypeError, AttributeError: series or frame with scalar align",
pandas/,836,-------------------------------------,
pandas/,837,gh-12388: Typecasting rules consistency with python,
pandas/,842,maybe someday... numexpr has too many upcasting rules now,
pandas/,843,"chain(*(np.sctypes[x] for x in ['uint', 'int', 'float']))",
pandas/,860,-------------------------------------,
pandas/,861,Basic and complex alignment,
pandas/,877,'p',
pandas/,896,only warns if not monotonic and not sortable,
pandas/,988,"only test dt with dt, otherwise weird joins result",
pandas/,991,avoid warning about comparing strings and ints,
pandas/,997,dt with dt,
pandas/,1000,avoid warning about comparing strings and ints,
pandas/,1130,------------------------------------,
pandas/,1131,Slightly more complex ops,
pandas/,1216,noqa,
pandas/,1218,FutureWarning: The `truediv` parameter in pd.eval is deprecated and will be,
pandas/,1219,removed in a future version.,
pandas/,1249,noqa,
pandas/,1284,multiple assignees,
pandas/,1288,invalid assignees,
pandas/,1299,single assignment - existing variable,
pandas/,1306,single assignment - new variable,
pandas/,1313,with a local name overlap,
pandas/,1316,noqa,
pandas/,1328,noqa,
pandas/,1337,multiple assignment,
pandas/,1344,explicit targets,
pandas/,1352,GH 11235,
pandas/,1359,see gh-9297,
pandas/,1370,GH 11149,
pandas/,1396,multi-line not valid if not all assignments,
pandas/,1407,GH 11149,
pandas/,1432,GH 15342,
pandas/,1450,26426,
pandas/,1470,26426,
pandas/,1490,GH 8664,
pandas/,1499,see gh-11149,
pandas/,1644,noqa,
pandas/,1684,noqa,
pandas/,1691,noqa,
pandas/,1827,xref https://github.com/pandas-dev/pandas/issues/12293,
pandas/,1828,"this fails on Windows, apparently a floating point precision issue",
pandas/,1830,Did not test complex64 because DataFrame is converting it to,
pandas/,1831,complex128. Due to https://github.com/pandas-dev/pandas/issues/10952,
pandas/,1884,noqa,
pandas/,1892,noqa,
pandas/,1947,noqa,
pandas/,1977,GH 13139,
pandas/,1993,noqa,
pandas/,1994,noqa,
pandas/,1995,noqa,
pandas/,2020,https://github.com/pandas-dev/pandas/issues/10239,
pandas/,2021,lose name with numexpr engine. Remove when that's fixed.,
pandas/,2034,GH#29182,
pandas/,9,GH3380,
pandas/,42,GH 8467,
pandas/,43,first show's mutation indicator,
pandas/,44,"second does not, but should yield the same results",
pandas/,53,GH: 33058,
pandas/,130,GH 20561,
pandas/,417,see gh-22519,
pandas/,440,GH 23666,
pandas/,126,dataframe,
pandas/,137,check the obj for a particular whitelist m,
pandas/,143,name,
pandas/,150,qualname,
pandas/,191,GH6944,
pandas/,192,GH 17537,
pandas/,193,explicitly test the whitelist methods,
pandas/,243,"e.g., to_csv",
pandas/,249,"e.g., query, eval",
pandas/,343,some methods which require DatetimeIndex,
pandas/,349,TODO check groupby with > 1 col ?,
pandas/,351,methods which are called as .foo(),
pandas/,377,should always be frames!,
pandas/,380,methods which aren't just .foo(),
pandas/,405,new public method?,
pandas/,423,removed a public method?,
pandas/,71,single grouper,
pandas/,78,GH 8623,
pandas/,102,GH 9921,
pandas/,103,Monotonic,
pandas/,118,Filter,
pandas/,122,Non-monotonic,
pandas/,137,GH 9603,
pandas/,147,more basic,
pandas/,176,GH 10460,
pandas/,185,GH15155,
pandas/,196,"expected should equal test.loc[[""a""]]",
pandas/,197,GH15166,
pandas/,211,"GH#21636 flaky on py37; may be related to older numpy, see discussion",
pandas/,212,https://github.com/MacPython/pandas-wheels/pull/64,
pandas/,216,GH 10138,
pandas/,220,'b' is in the categories but not in the list,
pandas/,226,missing category 'b' should still exist in the output index,
pandas/,230,"GH#21636 tracking down the xfail, in some builds np.mean(df.loc[[0]])",
pandas/,231,"is coming back as Series([0., 1., 0.], index=[""missing"", ""dense"", ""values""])",
pandas/,232,"when we expect Series(0., index=[""values""])",
pandas/,236,we coerce back to ints,
pandas/,244,but for transform we should still get back the original index,
pandas/,252,"multiple groupers, don't re-expand the output space",
pandas/,253,of the grouper,
pandas/,254,gh-14942 (implement),
pandas/,255,gh-10132 (back-compat),
pandas/,256,gh-8138 (back-compat),
pandas/,257,gh-8869,
pandas/,264,multiple groupers with a non-cat,
pandas/,287,https://github.com/pandas-dev/pandas/issues/8138,
pandas/,297,Grouping on a single column,
pandas/,313,Grouping on two columns,
pandas/,332,GH 10132,
pandas/,339,gh-8869,
pandas/,340,with as_index,
pandas/,376,"we create a cartesian product, so this is",
pandas/,377,non-performant if we don't use observed values,
pandas/,378,gh-14942,
pandas/,397,gh-20583,
pandas/,398,test that we have the appropriate groups,
pandas/,418,GH 24740,
pandas/,439,GH 26385,
pandas/,454,GH 21151,
pandas/,477,GH 25871: Fix groupby sorting on ordered Categoricals,
pandas/,478,GH 25167: Groupby with observed=True doesn't sort,
pandas/,480,"Build a dataframe with cat having one unobserved category ('missing'),",
pandas/,481,and a Series with identical values,
pandas/,490,aggregate on the Categorical,
pandas/,493,"If ordering works, we expect index labels equal to aggregation results,",
pandas/,494,except for 'observed=False': label 'missing' has aggregation None,
pandas/,509,GH9049: ensure backward compatibility,
pandas/,539,GH 10460,
pandas/,556,with a cat index,
pandas/,564,"with a cat column, should produce a cat index",
pandas/,574,GH 11558,
pandas/,588,GH11558 (example is taken from the original issue),
pandas/,607,GH3011,
pandas/,611,len(bins) != len(series) here,
pandas/,617,GH13204,
pandas/,636,function grouper,
pandas/,649,another not in-axis grouper (conflicting names in index),
pandas/,654,is original index dropped?,
pandas/,673,GH-13179,
pandas/,676,ordered=True,
pandas/,686,ordered=False,
pandas/,699,"GH13743, GH13854",
pandas/,708,single grouper,
pandas/,735,gh-18502,
pandas/,736,preserve the categoricals on ops,
pandas/,785,GH-9614,
pandas/,786,test fix for when group by on None resulted in,
pandas/,787,coercion of dtype categorical -> float,
pandas/,802,https://stackoverflow.com/questions/23814368/sorting-pandas-,
pandas/,803,categorical-labels-after-groupby,
pandas/,804,This should result in a properly sorted Series so that the plot,
pandas/,805,has a sorted x axis,
pandas/,806,self.cat.groupby(['value_group'])['value_group'].count().plot(kind='bar'),
pandas/,824,dataframe groupby sort was being ignored # GH 8868,
pandas/,849,"when categories is ordered, group is ordered by category's order",
pandas/,873,"this is an unordered categorical, but we allow this",
pandas/,882,GH10505,
pandas/,884,"use same data as test_groupby_sort_categorical, which category is",
pandas/,885,corresponding to datetime.month,
pandas/,903,ordered=True,
pandas/,934,"when categories is ordered, group is ordered by category's order",
pandas/,939,ordered = False,
pandas/,973,https://github.com/pandas-dev/pandas/issues/18678,
pandas/,979,0 by default,
pandas/,984,min_count=0,
pandas/,989,min_count=1,
pandas/,994,min_count>1,
pandas/,1001,https://github.com/pandas-dev/pandas/issues/18678,
pandas/,1008,1 by default,
pandas/,1013,min_count=0,
pandas/,1018,min_count=1,
pandas/,1025,https://github.com/pandas-dev/pandas/issues/21390,
pandas/,1075,GH-23970,
pandas/,1114,leave out some groups,
pandas/,1126,GH 24880,
pandas/,1142,GH 24880,
pandas/,1204,GH 24880,
pandas/,1213,GH 20416,
pandas/,1221,GH 13420,
pandas/,1230,GH 28787,
pandas/,1247,Accessing a Category that is not in the dataframe,
pandas/,1260,GH 17605,
pandas/,1265,GH 32293,
pandas/,1314,GH 17605,
pandas/,1315,Tests whether the unobserved categories in the result contain 0 or NaN,
pandas/,1334,"If we expect unobserved values to be zero, we also expect the dtype to be int",
pandas/,1340,GH 8870,
pandas/,1356,31256,
pandas/,1386,GH33410,
pandas/,18,GH18203,
pandas/,41,shorthand,
pandas/,55,complex agg,
pandas/,66,corner cases,
pandas/,68,exception raised is type Exception,
pandas/,81,"GH 3911, mixed frame non-conversion",
pandas/,99,"GH2893, return a reduced type",
pandas/,130,"GH3596, return a consistent type (regression in 0.11 from 0.10.1)",
pandas/,137,GH5592,
pandas/,138,inconsistent return type,
pandas/,174,"5592 revisited, with datetimes",
pandas/,185,scalar outputs,
pandas/,204,Series,
pandas/,224,DataFrame,
pandas/,247,issue 11016,
pandas/,255,regression,
pandas/,276,this SHOULD be an int,
pandas/,283,"assert issubclass(agged.dtype.type, np.integer)",
pandas/,285,explicitly return a float from my function,
pandas/,298,GH 2808,
pandas/,333,correct result,
pandas/,338,should fail (not the same number of levels),
pandas/,345,should fail (incorrect shape),
pandas/,359,this is pretty cool,
pandas/,365,get attribute,
pandas/,369,make sure raises error,
pandas/,378,aggregate,
pandas/,383,by string,
pandas/,389,transform,
pandas/,395,transform propagate,
pandas/,402,iterate,
pandas/,406,groups / group_indices,
pandas/,419,aggregate,
pandas/,424,transform,
pandas/,429,iterate,
pandas/,469,TODO groupby get drops names,
pandas/,474,"some ""groups"" with no data",
pandas/,484,only verify that it works for now,
pandas/,576,a little bit crude,
pandas/,584,test single series works the same,
pandas/,592,GH 5764,
pandas/,608,single-key,
pandas/,625,multi-key,
pandas/,643,GH7115 & GH8112 & GH8582,
pandas/,648,invokes set_selection_from_grouper internally,
pandas/,687,GH15072,
pandas/,698,single-key,
pandas/,706,multi-key,
pandas/,721,GH #421,
pandas/,757,test that having an all-NA column doesn't mess you up,
pandas/,786,won't work with axis = 1,
pandas/,802,handle empty groups,
pandas/,881,"GH 1313, GH 13901",
pandas/,913,GH 12902,
pandas/,970,add a nuisance column,
pandas/,984,Note: no names when grouping by value,
pandas/,1018,GH 6265,
pandas/,1028,GH 12363,
pandas/,1045,GH 6124,
pandas/,1050,"Provide a different name for each Series.  In this case, groupby",
pandas/,1051,should not attempt to propagate the Series name since they are,
pandas/,1052,inconsistent.,
pandas/,1072,"GH 13432, unorderable types in py3",
pandas/,1083,TODO: Ensure warning isn't emitted in the first place,
pandas/,1101,it works!,
pandas/,1104,accessing the index elements causes segfault,
pandas/,1118,base will be length 0,
pandas/,1134,GH 6733,
pandas/,1152,pathological case of ambiguity,
pandas/,1160,GH 11185,
pandas/,1173,GH 11741,
pandas/,1184,GH 6992,
pandas/,1207,grouped.groups keys are np.datetime64 with system tz,
pandas/,1208,"not to be affected by tz, only compare values",
pandas/,1211,confirm obj is not filtered,
pandas/,1340,GH #995,
pandas/,1349,GH #1065,
pandas/,1388,make sure all these work,
pandas/,1401,gh-15062,
pandas/,1417,see gh-1291,
pandas/,1426,series multiindex groupby sort argument was not being passed through,
pandas/,1427,_compress_group_index,
pandas/,1428,GH 9444,
pandas/,1479,GH9049,
pandas/,1500,GH 11640,
pandas/,1502,define the lexsorted version,
pandas/,1509,define the non-lexsorted version,
pandas/,1519,compare the results,
pandas/,1527,a transforming function should work regardless of sort,
pandas/,1528,GH 14776,
pandas/,1550,checking we don't have any label/location confusion in the,
pandas/,1551,the wake of GH5375,
pandas/,1564,"... and again, with a generic Index of floats",
pandas/,1579,GH 7972,
pandas/,1601,Test to ensure that groupby always preserves sort order of original,
pandas/,1602,object. Issue #8588 and #9651,
pandas/,1614,Try sorting on different types and with different group types,
pandas/,1626,This test is designed to replicate the segfault in issue #13813.,
pandas/,1629,Generate a moderately large dataframe with occasional missing,
pandas/,1630,"values in column `B`, and then group by [`A`, `B`]. This should",
pandas/,1631,force `-1` in `labels` array of `g.grouper.group_info` exactly,
pandas/,1632,"at those places, where the group-by key is partially missing.",
pandas/,1653,GH #24128,
pandas/,1675,GH 30134,
pandas/,1684,This test is designed to replicate the error in issue #14938,
pandas/,1702,GH8093,
pandas/,1713,https://github.com/pandas-dev/pandas/issues/18314,
pandas/,1732,https://github.com/pandas-dev/pandas/issues/18798,
pandas/,1741,GH 21716,
pandas/,1768,GH 9236,
pandas/,1784,GH 5289,
pandas/,1793,GH 25704,
pandas/,1809,GH 26326,
pandas/,1810,Test if DataFrame grouped with a pandas.Grouper has correct groups,
pandas/,1824,GH 27614,
pandas/,1835,test on MI column,
pandas/,1889,"GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill",
pandas/,1911,GH 14955,
pandas/,1918,see GH21624,
pandas/,1919,"this was crashing with ""ValueError: Length of passed values is 1, index implies 0""",
pandas/,1928,GH#29189 the groupby call here used to raise,
pandas/,1939,21668,
pandas/,1974,Fix following 30253,
pandas/,1991,GH 9790,
pandas/,2005,GH 1135,
pandas/,42,GH 8046,
pandas/,43,make sure that we preserve the input order,
pandas/,72,GH 8430,
pandas/,77,GH 9700,
pandas/,99,GH 12737,
pandas/,123,selection,
pandas/,128,dup columns,
pandas/,152,group columns,
pandas/,166,make sure that we are setting the axes,
pandas/,167,correctly when on axis=0 or 1,
pandas/,168,in the presence of a non-monotonic indexer,
pandas/,169,GH12713,
pandas/,177,monotonic,
pandas/,190,non-monotonic,
pandas/,205,GH 9807,
pandas/,206,Check transform dtype output is preserved,
pandas/,214,GH 5712,
pandas/,215,transforming on a datetime column,
pandas/,223,GH 16875,
pandas/,224,inconsistency in transforming boolean values,
pandas/,237,GH 15429,
pandas/,238,transforming a datetime to timedelta,
pandas/,242,this does date math without changing result type in transform,
pandas/,250,this does date math and causes the transform to return timedelta,
pandas/,256,GH 10972,
pandas/,257,convert dt to float,
pandas/,266,convert dt to int,
pandas/,277,13046,
pandas/,322,GH 30918,
pandas/,331,These transformation functions are not yet covered in this test,
pandas/,361,this also tests orderings in transform between,
pandas/,362,series/frame to make sure it's consistent,
pandas/,384,GH 13191,
pandas/,400,GH 9697,
pandas/,419,14457,
pandas/,420,when we are transforming be sure to not coerce,
pandas/,421,via assignment,
pandas/,432,"GH 3740, make sure that we might upcast on item-by-item transform",
pandas/,434,floats,
pandas/,450,int case,
pandas/,457,int that needs float conversion,
pandas/,470,int downcasting,
pandas/,477,GH 9941,
pandas/,506,this is by definition a mutating operation!,
pandas/,539,see gh-4095,
pandas/,546,see gh-4095,
pandas/,553,see gh-4095,
pandas/,556,with nans,
pandas/,573,timedelta,
pandas/,600,GH 4095,
pandas/,606,series,
pandas/,608,print(data.head()),
pandas/,620,When everything is NaN,
pandas/,622,When there is a single NaN,
pandas/,713,"DataFrame - Single and MultiIndex,",
pandas/,714,"group by values, index level, columns",
pandas/,720,dict(by='string_missing')]:,
pandas/,721,"dict(by=['int','string'])]:",
pandas/,724,whitelisted methods set the selection before applying,
pandas/,725,bit a of hack to make sure the cythonized shift,
pandas/,726,is equivalent to pre 0.17.1 behavior,
pandas/,731,numeric apply fastpath promotes dtype so have,
pandas/,732,to apply separately and concat,
pandas/,742,individual columns,
pandas/,758,GH 10165,
pandas/,798,https://github.com/pytest-dev/pytest/issues/6300,
pandas/,799,workaround to xfail fixture/param permutations,
pandas/,803,GH 19200,
pandas/,841,Overwrite placeholder values,
pandas/,848,Need to modify values and expectations depending on the,
pandas/,849,Series / DataFrame that we ultimately want to generate,
pandas/,850,"['a', 'b', 'a, 'b', ...]",
pandas/,862,"['a', 'a', 'a', ... 'b', 'b', 'b']",
pandas/,880,GH 21207,
pandas/,912,"GH  21200, 21621, 30463",
pandas/,945,GH 19437,
pandas/,974,GH 20653,
pandas/,986,https://github.com/pandas-dev/pandas/issues/23461,
pandas/,1008,GH 24198,
pandas/,1024,GH 15306,
pandas/,1039,GH 16771,
pandas/,1040,cython transforms with more groups than rows,
pandas/,1053,GH 21521,
pandas/,1062,GH#27486,
pandas/,1068,"method exists on the object, but is not a valid transformation/agg",
pandas/,1069,make sure the method exists,
pandas/,1073,Test SeriesGroupBy,
pandas/,1092,GH#27468,
pandas/,1094,GH#27469,
pandas/,1096,GH#32293,
pandas/,1103,this is the *definition* of a transformation,
pandas/,1108,verify that values were broadcasted across each group,
pandas/,1113,GH 27496,
pandas/,1137,GH#29631 case where fastpath defined in groupby.generic _choose_path,
pandas/,1138,"raises, but slow_path does not",
pandas/,1144,we want a function such that func(frame) fails but func.apply(frame),
pandas/,1145,works,
pandas/,1147,Ensure that fast_path fails,
pandas/,1151,"Check that the fastpath raises, see _transform_general",
pandas/,1167,GH 7883,
pandas/,10,tests for first / last / nth,
pandas/,35,it works!,
pandas/,45,v0.14.0 whatsnew,
pandas/,59,https://github.com/pandas-dev/pandas/issues/32123,
pandas/,79,https://github.com/pandas-dev/pandas/issues/32123,
pandas/,103,tests for first / last / nth,
pandas/,123,"GH 2763, first/last shifting dtypes",
pandas/,133,GH 11244,
pandas/,173,"out of bounds, regression from 0.13.1",
pandas/,174,GH 6621,
pandas/,204,GH 7559,
pandas/,205,from the vbench,
pandas/,215,validate first,
pandas/,220,this is NOT the same as .first (as sorted is default!),
pandas/,221,as it keeps the order in the series (and not the group order),
pandas/,222,related GH 7287,
pandas/,230,doc example,
pandas/,237,test multiple nth values,
pandas/,252,"get the first, fourth and last two business days for each month",
pandas/,276,"PR 9090, related to issue 8979",
pandas/,277,"test nth on MultiIndex, should match .first()",
pandas/,334,GH15884,
pandas/,335,Test that the timezone is retained when calling first,
pandas/,336,or last on groupby with as_index=False,
pandas/,365,GH 21603,
pandas/,398,https://github.com/pandas-dev/pandas/issues/33071,
pandas/,399,https://github.com/pandas-dev/pandas/issues/32194,
pandas/,414,"PR 9090, related to issue 8979",
pandas/,415,test nth on MultiIndex,
pandas/,476,"as_index= False, much easier",
pandas/,490,contains all,
pandas/,493,"as_index=True, (used to be different)",
pandas/,507,contains all,
pandas/,510,test with selection,
pandas/,523,"GH 12839 nth, head, and tail should return same result consistently",
pandas/,553,GH 16064,
pandas/,567,GH 20760,
pandas/,568,Check that nth preserves column order,
pandas/,588,GH 26011,
pandas/,16,our starting frame,
pandas/,39,"create input df, keys, and the bins",
pandas/,79,have to sort on index because of unstable sort on values,
pandas/,80,xref GH9212,
pandas/,85,GH28479,
pandas/,104,have to sort on index because of unstable sort on values xref GH9212,
pandas/,71,Figure out expectation using Python builtin,
pandas/,74,edge case for missing data with skipna and 'any',
pandas/,84,#2700,
pandas/,111,"@pytest.mark.parametrize(""f"", [max, min, sum])",
pandas/,112,def test_builtins_apply(f):,
pandas/,116,Single key  # Multi-key,
pandas/,118,see gh-8155,
pandas/,130,numpy's equivalent function,
pandas/,143,make sure that we are passing thru kwargs,
pandas/,144,to our agg functions,
pandas/,146,GH3668,
pandas/,147,GH5724,
pandas/,175,mean / median,
pandas/,202,"TODO: min, max *should* handle",
pandas/,203,categorical (ordered) dtype,
pandas/,257,"like min, max, but don't include strings",
pandas/,263,GH 15561: numeric_only=False set by default like min/max,
pandas/,280,GH5610,
pandas/,281,non-cython calls should not include the grouper,
pandas/,289,mad,
pandas/,299,describe,
pandas/,326,any,
pandas/,334,idxmax,
pandas/,343,this takes the fast apply path,
pandas/,345,cumsum (GH5614),
pandas/,351,GH 5755 - cumsum is a transformer and should ignore as_index,
pandas/,355,GH 13994,
pandas/,407,"GH9311, GH6620",
pandas/,444,"see gh-6620, gh-9311",
pandas/,474,GH 25444,
pandas/,494,GH9221,
pandas/,495,pass thru keyword arguments to the generated wrapper,
pandas/,496,are set if the passed kw is None (only),
pandas/,538,GH 4095,
pandas/,548,"if overflows, groupby product casts to float",
pandas/,549,while numpy passes back invalid values,
pandas/,623,see gh-21411,
pandas/,689,see gh-12811,
pandas/,710,GH 15048,
pandas/,724,Test w/ min value for dtype,
pandas/,732,Test nan in some values,
pandas/,740,GH 15561,
pandas/,747,GH 15635,
pandas/,778,GH 15048,
pandas/,792,Test w/ max value for dtype,
pandas/,800,Test nan in some values,
pandas/,808,GH 15561,
pandas/,815,GH 15635,
pandas/,840,"Basics: strictly increasing (T), strictly decreasing (F),",
pandas/,841,"abs val increasing (F), non-strictly increasing (T)",
pandas/,843,Test with inf vals,
pandas/,848,Test with nan vals; should always be False,
pandas/,856,GH 17015,
pandas/,868,Also check result equal to manually taking x.is_monotonic_increasing.,
pandas/,876,"Basics: strictly decreasing (T), strictly increasing (F),",
pandas/,877,"abs val decreasing (F), non-strictly increasing (T)",
pandas/,879,Test with inf vals,
pandas/,884,Test with nan vals; should always be False,
pandas/,892,GH 17015,
pandas/,906,describe,
pandas/,907,--------------------------------,
pandas/,912,it works!,
pandas/,944,GH 17464 - Remove duplicate MultiIndex levels,
pandas/,966,GH 14848 - regression from 0.19.0 to 0.19.1,
pandas/,984,GH 4792,
pandas/,1009,nunique,
pandas/,1010,--------------------------------,
pandas/,1063,as_index,
pandas/,1069,with na,
pandas/,1073,dropna,
pandas/,1081,GH 11077,
pandas/,1100,GH 12553,
pandas/,1108,GH 13453,
pandas/,1154,GH 27951,
pandas/,1161,GH 23222,
pandas/,1168,count,
pandas/,1169,--------------------------------,
pandas/,1211,GH#5610,
pandas/,1212,count counts non-nulls,
pandas/,1243,GH8169,
pandas/,1285,gets called in Cython to check that raising calls the method,
pandas/,1294,size,
pandas/,1295,--------------------------------,
pandas/,1316,https://github.com/pandas-dev/pandas/issues/11699,
pandas/,1323,https://github.com/pandas-dev/pandas/issues/23050,
pandas/,1324,"Assert no 'Value Error : Length of passed values is 2, index implies 0'",
pandas/,1325,all-null groups,
pandas/,1331,quantile,
pandas/,1332,--------------------------------,
pandas/,1341,Ints,
pandas/,1345,Floats,
pandas/,1347,Missing data,
pandas/,1350,Timestamps,
pandas/,1355,All NA,
pandas/,1382,https://github.com/pandas-dev/pandas/issues/27526,
pandas/,1401,https://github.com/pandas-dev/pandas/pull/28085#issuecomment-524066959,
pandas/,1454,GH30289,
pandas/,1489,https://github.com/pandas-dev/pandas/issues/27470,
pandas/,1500,GH 28662,
pandas/,1504,Random segfaults; would have been guaranteed in loop,
pandas/,1511,GH 28662,
pandas/,1531,https://github.com/pandas-dev/pandas/issues/33136,
pandas/,1546,pipe,
pandas/,1547,--------------------------------,
pandas/,1551,Test the pipe method of DataFrameGroupBy.,
pandas/,1552,Issue #17871,
pandas/,1570,Note that the transformations are,
pandas/,1571,GroupBy -> Series,
pandas/,1572,Series -> Series,
pandas/,1573,This then chains the GroupBy.pipe and the,
pandas/,1574,NDFrame.pipe methods,
pandas/,1584,Test passing args to the pipe method of DataFrameGroupBy.,
pandas/,1585,Issue #17871,
pandas/,1608,Assert the results here,
pandas/,1614,test SeriesGroupby.pipe,
pandas/,1624,Regression test for (#22487),
pandas/,1646,https://github.com/pandas-dev/pandas/issues/32219,
pandas/,13,GH 5788,
pandas/,40,GH 5789,
pandas/,41,don't auto coerce dates,
pandas/,52,GH 20066,
pandas/,53,trivial apply: ignore input and return a constant dataframe.,
pandas/,72,GH 20066,
pandas/,73,trivial apply fails if the constant dataframe has the same index,
pandas/,74,with the one used to create GroupBy object.,
pandas/,86,make sure that fast apply is correctly called,
pandas/,87,rather than raising any kind of error,
pandas/,88,otherwise the python path will be callsed,
pandas/,89,which slows things down,
pandas/,149,"GH2936, GH7739, GH10519, GH2656, GH12155, GH20084, GH21417",
pandas/,151,This test should ensure that a function is only evaluated,
pandas/,152,once per group. Previously the function has been evaluated twice,
pandas/,153,on the first group to check if the Cython index slider is safe to use,
pandas/,154,This test ensures that the side effect (append to list) is only triggered,
pandas/,155,once per group,
pandas/,158,cannot parameterize over the functions since they need external,
pandas/,159,`names` to detect side effects,
pandas/,162,this takes the fast apply path,
pandas/,167,this takes the slow apply path,
pandas/,172,"GH7739, GH2656",
pandas/,177,"GH10519, GH12155, GH21417",
pandas/,182,"GH2936, GH20084",
pandas/,194,"GH3480, apply with mixed dtype on axis=1 breaks in 0.11",
pandas/,205,GH 3610 incorrect dtype conversion with as_index=False,
pandas/,214,GH #4648 and #3417,
pandas/,235,apply doesn't maintain the original ordering,
pandas/,236,changed in GH5610 as the as_index=False returns a MI here,
pandas/,262,weirdo,
pandas/,268,names are different,
pandas/,272,weirdo,
pandas/,309,GH13568,
pandas/,368,"Low level tinkering could be unsafe, make sure not",
pandas/,385,it works! #2605,
pandas/,443,GH 5545,
pandas/,444,returning a non-copy in an applied function fails,
pandas/,473,GH 30667,
pandas/,481,not expecting the order to remain the same for duplicated axis,
pandas/,488,not expecting the order to remain the same for duplicated axis,
pandas/,495,"#535, can't use sliding iterator",
pandas/,518,"In the past, group-by/apply operations have been over-eager",
pandas/,519,"in converting dtypes to numeric, in the presence of datetime",
pandas/,520,"columns.  Various GH issues were filed, the reproductions",
pandas/,521,for which are here.,
pandas/,523,GH 15670,
pandas/,532,GH 15421,
pandas/,545,GH 14423,
pandas/,571,Regression test for GH 15562,
pandas/,572,The following groupby caused ValueErrors and IndexErrors pre 0.20.0,
pandas/,598,Test a fix for the following error related to GH issue 11324 When,
pandas/,599,non-key fields in a group-by dataframe contained time-based fields,
pandas/,600,"that were not returned by the apply function, an exception would be",
pandas/,601,raised.,
pandas/,627,GH1738,
pandas/,643,the kernel function returns arrays of unequal length,
pandas/,644,"pandas sniffs the first one, sees it's an array and not",
pandas/,645,"a list, and assumed the rest are of equal length",
pandas/,646,and so tries a vstack,
pandas/,648,don't die,
pandas/,653,Tests to make sure no errors if apply function returns all None,
pandas/,654,values. Issue 9684.,
pandas/,666,GH 12824. Tests if apply returns None first.,
pandas/,686,GH 22221: apply filter which returns some empty groups,
pandas/,701,gh-20949,
pandas/,714,GH 28652,
pandas/,729,GH-28247,
pandas/,730,groupby-apply throws an error if one of the columns in the DataFrame,
pandas/,731,is a datetime object and the column labels are different from,
pandas/,732,standard int values in range(len(num_columns)),
pandas/,744,GH 10078,
pandas/,783,https://github.com/pandas-dev/pandas/issues/31068,
pandas/,799,GH 14849,
pandas/,827,GH 31248,
pandas/,850,GH 31441,
pandas/,858,GH 31605,
pandas/,875,GH: 22541,
pandas/,886,GH: 33058,
pandas/,19,GH 4161,
pandas/,20,TimeGrouper requires a sorted index,
pandas/,21,also verifies that the resultant index has the correct name,
pandas/,37,GH 6908 change target column's order,
pandas/,63,GH 3881,
pandas/,64,make sure API of timegrouper conforms,
pandas/,96,GH 3794,
pandas/,97,allow combination of timegrouper/reg groups,
pandas/,202,passing the name,
pandas/,210,passing the level,
pandas/,220,multi names,
pandas/,237,error as we have both a level and a name!,
pandas/,244,single groupers,
pandas/,265,GH 6764 multiple grouping with/without sort,
pandas/,306,XXX,
pandas/,325,GH 6914,
pandas/,343,single grouping,
pandas/,358,multiple grouping,
pandas/,373,with index,
pandas/,391,Using `apply` with the `TimeGrouper` should give the,
pandas/,392,same return type as an `apply` with a `Grouper`.,
pandas/,393,Issue #11742,
pandas/,408,Using `apply` with the `TimeGrouper` should give the,
pandas/,409,same return type as an `apply` with a `Grouper`.,
pandas/,410,Issue #11742,
pandas/,425,GH#1430,
pandas/,433,it works!,
pandas/,437,GH#11442,
pandas/,456,GH 3950,
pandas/,498,by level,
pandas/,519,it works!,
pandas/,529,combining multiple / different timezones yields UTC,
pandas/,607,by level,
pandas/,642,GH 5869,
pandas/,643,datetimelike dtype conversion from int,
pandas/,650,GH 6410 / numpy 4328,
pandas/,651,32-bit under 1.9-dev indexing issue,
pandas/,659,GH 11616,
pandas/,660,Test that column selection returns output in correct timezone.,
pandas/,675,see gh-11682: Timezone info lost when broadcasting,
pandas/,676,scalar datetime to DataFrame,
pandas/,693,GH 10295,
pandas/,694,"Verify that NaT is not in the result of max, min, first and last on",
pandas/,695,Dataframe with datetime or timedelta values.,
pandas/,723,GH 17575,
pandas/,741,Issue: 17530,
pandas/,17,Test dropna=False.,
pandas/,36,Test dropna=False.,
pandas/,90,GH12768,
pandas/,120,issue 11041,
pandas/,172,Series of ints,
pandas/,182,Series of floats,
pandas/,191,"Set up DataFrame of ints, floats, strings.",
pandas/,205,Group by ints; filter on floats.,
pandas/,211,Group by floats (rounded); filter on strings.,
pandas/,218,Group by strings; filter on ints.,
pandas/,226,BUG GH4447,
pandas/,240,"Series have always worked properly, but we'll test anyway.",
pandas/,253,Simple case: index is sequential. #4621,
pandas/,268,Now index is sequentially decreasing.,
pandas/,281,Index is shuffled.,
pandas/,297,GH 10114,
pandas/,328,GH4620,
pandas/,339,Filter DataFrame,
pandas/,349,Filter Series,
pandas/,357,^ made manually because this can get confusing!,
pandas/,360,Transform Series,
pandas/,365,Transform (a column from) DataFrameGroupBy,
pandas/,371,GH4620,
pandas/,382,Filter DataFrame,
pandas/,392,Filter Series,
pandas/,400,^ made manually because this can get confusing!,
pandas/,403,Transform Series,
pandas/,408,Transform (a column from) DataFrameGroupBy,
pandas/,414,GH4620,
pandas/,425,Filter DataFrame,
pandas/,435,Filter Series,
pandas/,443,^ made manually because this can get confusing!,
pandas/,446,Transform Series,
pandas/,451,Transform (a column from) DataFrameGroupBy,
pandas/,457,GH4620,
pandas/,471,Filter DataFrame,
pandas/,481,Filter Series,
pandas/,489,^ made manually because this can get confusing!,
pandas/,492,Transform Series,
pandas/,497,Transform (a column from) DataFrameGroupBy,
pandas/,503,GH4620,
pandas/,514,Filter DataFrame,
pandas/,524,Filter Series,
pandas/,532,^ made manually because this can get confusing!,
pandas/,535,Transform Series,
pandas/,540,Transform (a column from) DataFrameGroupBy,
pandas/,548,previously didn't have access to col A #????,
pandas/,588,GH 10780,
pandas/,30,GH#29500,
pandas/,67,https://github.com/pandas-dev/pandas/issues/31802,
pandas/,68,"Some operations may require creating new blocks, which requires",
pandas/,69,valid mgr_locs,
pandas/,146,"we must pass either both labels and dummy, or neither",
pandas/,19,selection,
pandas/,20,--------------------------------,
pandas/,31,A should not be referenced as a bad column...,
pandas/,32,will have to rethink regex if you change message!,
pandas/,36,GH7511,
pandas/,82,GH #13731,
pandas/,99,per GH 23566 this should raise a FutureWarning,
pandas/,104,per GH 23566 this should raise a FutureWarning,
pandas/,128,grouping,
pandas/,129,--------------------------------,
pandas/,134,related GH5375,
pandas/,135,groupby misbehaving when using a Floatlike index,
pandas/,154,GH 7885,
pandas/,155,with level and freq specified in a pd.Grouper,
pandas/,163,Check string level,
pandas/,169,reset index changes columns dtype to object,
pandas/,177,Check integer level,
pandas/,185,GH 8795,
pandas/,201,GH14334,
pandas/,202,pd.Grouper(key=...) may be passed in a list,
pandas/,206,Group by single column,
pandas/,212,Group by two columns,
pandas/,213,using a combination of strings and Grouper objects,
pandas/,216,Group with two Grouper objects,
pandas/,221,Group with a string and a Grouper object,
pandas/,226,Group with a Grouper object and a string,
pandas/,231,GH8866,
pandas/,245,just specifying a level breaks,
pandas/,251,GH 14327,
pandas/,253,Grouping a multi-index frame by a column and an index level should,
pandas/,254,be equivalent to resetting the index and grouping by two columns,
pandas/,267,Test the reverse grouping order,
pandas/,272,Grouping a single-index frame by a column and the index should,
pandas/,273,be equivalent to resetting the index and grouping by two columns,
pandas/,279,Test the reverse grouping order,
pandas/,285,"GH9344, GH9049",
pandas/,293,reset_index changes columns dtype to object,
pandas/,302,"GH18432, adapted for GH25871",
pandas/,318,test transposed version,
pandas/,326,GH 10063,
pandas/,327,using a non-time-based grouper and a time-based grouper,
pandas/,328,and specifying levels,
pandas/,351,see gh-1048,
pandas/,363,GH #679,
pandas/,386,GH3035,
pandas/,387,index.map is used to apply grouper to the index,
pandas/,388,"if it fails on the elements, map tries it on the entire index as",
pandas/,389,a sequence. That can yield invalid results that cause trouble,
pandas/,390,down the line.,
pandas/,391,the surprise comes from using key[0:6] rather than str(key)[0:6],
pandas/,392,when the elements are Timestamp.,
pandas/,393,"the result is Index[0:6], very confusing.",
pandas/,406,GH 7997,
pandas/,407,regression from 0.14.1,
pandas/,415,GH 13901,
pandas/,435,it works!,
pandas/,463,GH 17979,
pandas/,489,GH 17537,
pandas/,510,groupby level name,
pandas/,516,axis=1,
pandas/,523,raise exception for non-MultiIndex,
pandas/,529,GH4014 this used to raise ValueError since 'exp'>1 (in py2),
pandas/,542,GH 17537,
pandas/,548,factorizing doesn't confuse things,
pandas/,559,factorizing doesn't confuse things,
pandas/,566,PR8618 and issue 8015,
pandas/,585,GH 17537,
pandas/,596,GH 14715,
pandas/,601,Grouper in a list grouping,
pandas/,606,Test case without a list,
pandas/,629,26208,
pandas/,630,test transform'ing empty groups,
pandas/,631,"(not testing other agg fns, because they return",
pandas/,632,different index objects.,
pandas/,639,https://github.com/pandas-dev/pandas/issues/27190,
pandas/,646,check group properties,
pandas/,658,check name,
pandas/,662,issue 20519,
pandas/,680,https://github.com/pandas-dev/pandas/issues/31670,
pandas/,693,get_group,
pandas/,694,--------------------------------,
pandas/,699,GH 5267,
pandas/,700,be datelike friendly,
pandas/,735,must pass a same-length tuple with multiple keys,
pandas/,751,TODO: should prob allow a str of Interval work as well,
pandas/,752,"IOW '(0, 5]'",
pandas/,762,GH 8121,
pandas/,787,GH 13530,
pandas/,794,GH16843,
pandas/,795,test ensures that index and column keys are recognized correctly,
pandas/,796,when number of keys equals axis length of groupby,
pandas/,807,groups & iteration,
pandas/,808,--------------------------------,
pandas/,815,caching works,
pandas/,822,caching works,
pandas/,829,this code path isn't used anywhere else,
pandas/,830,not sure it's useful,
pandas/,833,test it works,
pandas/,867,things get sorted!,
pandas/,882,don't iterate through groups with no data,
pandas/,889,axis = 1,
pandas/,904,GH 8542,
pandas/,905,length=2,
pandas/,936,length=3,
pandas/,956,GH 13394,
pandas/,25,"edge case, as this is usually considered float",
pandas/,100,"edge case, as this is usually considered float",
pandas/,154,verify one manually-worked out case works,
pandas/,169,brute force comparison for all small series,
pandas/,207,"test for #13393, where DataframeGroupBy.count() fails",
pandas/,208,when counting a datetimelike column.,
pandas/,217,GH21956,
pandas/,225,https://github.com/pandas-dev/pandas/issues/32841,
pandas/,43,Index name,
pandas/,44,List of index name,
pandas/,45,Column and index,
pandas/,46,Index and column,
pandas/,72,Compute expected result,
pandas/,80,Compute and check result,
pandas/,19,GH#31760,
pandas/,48,TODO(wesm): unused,
pandas/,49,noqa,
pandas/,59,GH 6212,
pandas/,108,GH 29772,
pandas/,127,"nothing to group, all NA",
pandas/,131,groupby float64 values results in Float64Index,
pandas/,137,DataFrame,
pandas/,179,single series,
pandas/,184,group frame by function name,
pandas/,189,group frame by function dict,
pandas/,211,GH5782,
pandas/,212,"odd comparisons can result here, so cast to make easy",
pandas/,247,GH #610,
pandas/,256,#1359,
pandas/,283,be careful,
pandas/,294,this uses column selection & renaming,
pandas/,300,"But without renaming, these functions are OK",
pandas/,306,GH #1268,
pandas/,309,Expected,
pandas/,311,this uses column selection & renaming,
pandas/,316,Test 1,
pandas/,318,this uses column selection & renaming,
pandas/,322,Test 2,
pandas/,324,this uses column selection & renaming,
pandas/,330,issue 14873,
pandas/,357,GH 7001,
pandas/,358,Bool sum aggregations result in int,
pandas/,370,GH 25692,
pandas/,384,GH 26310,
pandas/,394,GH28426,
pandas/,411,GH 31223,
pandas/,419,https://github.com/pandas-dev/pandas/issues/31522,
pandas/,436,https://github.com/pandas-dev/pandas/pull/31616,
pandas/,462,https://github.com/pandas-dev/pandas/issues/31450,
pandas/,496,but we do allow this,
pandas/,502,GH28426,
pandas/,528,order invariance,
pandas/,564,"GH 28426, if use same input function on same column,",
pandas/,565,no error should raise,
pandas/,672,"GH 29422, add tests for multiindex column cases",
pandas/,693,"GH 29422, add test for raises senario when aggregate column does not exist",
pandas/,704,"GH29422, add test for raises senario when getting duplicates",
pandas/,705,"GH28426, after this change, duplicates should also work if the relabelling is",
pandas/,706,different,
pandas/,724,GH 31777,
pandas/,739,see gh-28467,
pandas/,761,GH 16916,
pandas/,778,https://github.com/pandas-dev/pandas/pull/31359,
pandas/,779,This is currently failing to cast back to Int64Dtype.,
pandas/,780,The presence of the NA causes two problems,
pandas/,781,1. NA is not an instance of Int64Dtype.type (numpy.int64),
pandas/,782,"2. The presence of an NA forces object type, so the non-NA values is",
pandas/,783,a Python int rather than a NumPy int64. Python ints aren't,
pandas/,784,instances of numpy.int64.,
pandas/,799,GH 31471,
pandas/,813,GH 31471,
pandas/,855,"GH 25719, write tests for DataFrameGroupby.agg with only one lambda",
pandas/,875,check pd.NameAgg case,
pandas/,885,"check agg(key=(col, aggfunc)) case",
pandas/,894,"GH25719, test for DataFrameGroupby.agg with multiple lambdas",
pandas/,895,with mixed aggfunc,
pandas/,922,"check agg(key=(col, aggfunc)) case",
pandas/,932,check pd.NamedAgg case,
pandas/,28,GH 6337,
pandas/,29,https://stackoverflow.com/questions/21706030/pandas-groupby-agg-function-column-dtype-error,
pandas/,30,different api for agg when passed custom function with mixed frame,
pandas/,94,GH 3579,
pandas/,104,GH 12821,
pandas/,114,test for `first` function,
pandas/,123,test for `last` function,
pandas/,132,count,
pandas/,142,similar to GH12821,
pandas/,143,xref #11444,
pandas/,154,see gh-11199,
pandas/,171,GH 9052,
pandas/,172,make sure that the aggregates via dict,
pandas/,173,are consistent,
pandas/,218,15931,
pandas/,237,GH 12334,
pandas/,258,API change for disallowing these types of nested dicts,
pandas/,277,same name as the original column,
pandas/,278,GH9052,
pandas/,365,agg with ([]) and () not consistent,
pandas/,366,GH 6715,
pandas/,393,GH 7929,
pandas/,416,GH 3788,
pandas/,438,"discussed in GH#29589, fixed in GH#29641, operating on tzaware values",
pandas/,439,with function that is not dtype-preserving,
pandas/,444,Case that _does_ preserve the dtype,
pandas/,450,Cases that do _not_ preserve the dtype,
pandas/,463,GH 15426,
pandas/,488,GH#27110 applying iloc should return a DataFrame,
pandas/,494,GH#27110 applying iloc should return a DataFrame,
pandas/,499,see gh-14758,
pandas/,500,Convert to uint64 and don't overflow,
pandas/,552,Issue #18079,
pandas/,579,GH 18473,
pandas/,592,GH 23683,
pandas/,625,make sure we suppress anything other than TypeError or AssertionError,
pandas/,626,in _python_agg_general,
pandas/,628,Use a non-standard EA to make sure we don't go down ndarray paths,
pandas/,639,weird function that raise something other than TypeError or IndexError,
pandas/,640,in _python_agg_general,
pandas/,25,ignore mean of empty slice,
pandas/,26,and all-NaN,
pandas/,45,single column,
pandas/,53,multiple columns,
pandas/,106,#2113,
pandas/,116,GH 16741,
pandas/,182,"calling _cython_agg_general directly, instead of via the user API",
pandas/,183,"which sets different values for min_count, so do that here.",
pandas/,193,"GH-18869 can't call nanops on empty groups, so hardcode expected",
pandas/,194,for these,
pandas/,197,add / sum,
pandas/,211,prod,
pandas/,230,https://github.com/pandas-dev/pandas/issues/19526,
pandas/,234,We will group by a and test the cython aggregations,
pandas/,34,----------------------------------------------------------------------------,
pandas/,35,PandasDtype,
pandas/,89,----------------------------------------------------------------------------,
pandas/,90,Construction,
pandas/,132,----------------------------------------------------------------------------,
pandas/,133,Conversion,
pandas/,149,----------------------------------------------------------------------------,
pandas/,150,Setitem,
pandas/,170,----------------------------------------------------------------------------,
pandas/,171,Reductions,
pandas/,189,----------------------------------------------------------------------------,
pandas/,190,Ops,
pandas/,208,Just a basic smoke test. The EA interface tests exercise this,
pandas/,209,more thoroughly.,
pandas/,225,https://github.com/pandas-dev/pandas/issues/28150,
pandas/,230,"With a value that we do coerce, check that we coerce the value",
pandas/,231,and not the underlying array.,
pandas/,237,"GH#28150, see also extension test of the same name",
pandas/,14,----------------------------------------------------------------------------,
pandas/,15,Dtype,
pandas/,25,----------------------------------------------------------------------------,
pandas/,26,period_array,
pandas/,50,https://github.com/pandas-dev/pandas/issues/25403,
pandas/,66,https://github.com/pandas-dev/pandas/issues/23438,
pandas/,121,We choose to ignore the sign and size of integers for,
pandas/,122,Period/Datetime/Timedelta astype,
pandas/,139,"Add the `.base`, since we now use `.asi8` which returns a view.",
pandas/,140,We could maybe override it in PeriodArray to return ._data directly.,
pandas/,166,slice off the [ns] so that the regex matches.,
pandas/,183,----------------------------------------------------------------------------,
pandas/,184,setitem,
pandas/,230,----------------------------------------------------------------------------,
pandas/,231,Ops,
pandas/,241,----------------------------------------------------------------------------,
pandas/,242,Methods,
pandas/,256,----------------------------------------------------------------------------,
pandas/,257,Printing,
pandas/,288,----------------------------------------------------------------------------,
pandas/,289,Reductions,
pandas/,330,----------------------------------------------------------------------------,
pandas/,331,Arrow interaction,
pandas/,370,convert to its storage type,
pandas/,374,unsupported conversions,
pandas/,17,TODO: more freq variants,
pandas/,28,"TODO: non-monotone indexes; NaTs, different start dates",
pandas/,43,"TODO: non-monotone indexes; NaTs, different start dates, timezones",
pandas/,56,TODO: flesh this out,
pandas/,70,"make sure we raise when comparing with different lengths, specific",
pandas/,71,"to the case where one has length-1, which numpy would broadcast",
pandas/,80,"test the index classes while we're at it, GH#23078",
pandas/,185,check that the original was not changed,
pandas/,192,scalar,
pandas/,199,own-type,
pandas/,208,"Following numpy convention, NaT goes at the beginning",
pandas/,209,(unlike NaN which goes at the end),
pandas/,214,2d slicing on a 1D array,
pandas/,219,Lookup on a 2D array,
pandas/,225,Scalar lookup,
pandas/,256,GH#24115 check that iadd and isub are actually in-place,
pandas/,269,GH#31971,
pandas/,299,GH#24064,
pandas/,310,default asarray gives the same underlying data (for tz naive),
pandas/,319,specifying M8[ns] gives the same result as default,
pandas/,331,to object dtype,
pandas/,336,to other dtype always copies,
pandas/,343,other dtypes handled by numpy,
pandas/,350,GH#23524,
pandas/,360,also test the DatetimeIndex method while we're at it,
pandas/,365,GH#23524,
pandas/,377,check that we are not making copies when setting copy=False,
pandas/,397,check that we are still making copies when setting copy=False,
pandas/,403,Ensure that DatetimeArray._data.base isn't lost.,
pandas/,417,Check that Index.__new__ knows what to do with DatetimeArray,
pandas/,433,GH#23113,
pandas/,441,placeholder until these become actual EA subclasses and we can use,
pandas/,442,an EA-specific tm.assert_ function,
pandas/,454,placeholder until these become actual EA subclasses and we can use,
pandas/,455,an EA-specific tm.assert_ function,
pandas/,460,in this case _bool_ops is just `is_leap_year`,
pandas/,490,fill_value Timedelta invalid,
pandas/,495,fill_value Period invalid,
pandas/,502,Timestamp with mismatched tz-awareness,
pandas/,508,"require NaT, not iNaT, as it could be confused with an integer",
pandas/,512,different timezones,
pandas/,525,we *can* concatenate DTI with different freqs.,
pandas/,550,GH 29578,
pandas/,568,Check that Index.__new__ knows what to do with TimedeltaArray,
pandas/,612,default asarray gives the same underlying data,
pandas/,621,specifying m8[ns] gives the same result as default,
pandas/,633,to object dtype,
pandas/,638,to other dtype always copies,
pandas/,645,other dtypes handled by numpy,
pandas/,663,fill_value Timestamp invalid,
pandas/,669,fill_value Period invalid,
pandas/,687,Check that Index.__new__ knows what to do with PeriodArray,
pandas/,709,placeholder until these become actual EA subclasses and we can use,
pandas/,710,an EA-specific tm.assert_ function,
pandas/,714,GH#19643 previously overflowed silently,
pandas/,725,in this case _bool_ops is just `is_leap_year`,
pandas/,747,default asarray gives objects,
pandas/,752,to object dtype (same as default),
pandas/,759,to other dtypes,
pandas/,776,GH 29578,
pandas/,846,"np.isnan(NaT) raises, so use pandas'",
pandas/,882,https://github.com/pandas-dev/pandas/issues/32762,
pandas/,901,https://github.com/pandas-dev/pandas/issues/32762,
pandas/,909,https://github.com/pandas-dev/pandas/issues/26109,
pandas/,11,GH#25282,
pandas/,15,"3-dim, we allow 2D to sneak in for ops purposes GH#29853",
pandas/,19,0-dim,
pandas/,23,ensure that the public constructor cannot create an invalid instance,
pandas/,42,TODO: why TypeError for 'category' but ValueError for i8?,
pandas/,65,GH#25282,
pandas/,136,make sure we accept timedelta64 and timedelta in addition to Timedelta,
pandas/,238,"GH#25335 np.sum should return a Timedelta, not timedelta64",
pandas/,27,"3-dim, we allow 2D to sneak in for ops purposes GH#29853",
pandas/,31,0-dim,
pandas/,35,GH#24623 check that invalid instances cannot be created with the,
pandas/,36,public constructor,
pandas/,56,GH#24569,
pandas/,66,check that we raise regardless of whether naive is found,
pandas/,67,before aware or vice-versa,
pandas/,131,TODO: merge this into tests/arithmetic/test_datetime64 once it is,
pandas/,132,sufficiently robust,
pandas/,135,arbitrary tz-naive DatetimeIndex,
pandas/,148,for these the comparisons should be all-False,
pandas/,154,"TODO: add list and tuple, and object-dtype once those",
pandas/,155,are fixed in the constructor,
pandas/,174,https://github.com/pandas-dev/pandas/pull/32490,
pandas/,223,make sure we accept datetime64 and datetime in addition to Timestamp,
pandas/,236,"preserves tz and values, but not freq",
pandas/,246,"Note: not tm.assert_index_equal, since `freq`s do not match",
pandas/,268,assert that arr and dti were not modified in-place,
pandas/,30,Basic NumPy defaults.,
pandas/,39,String alias passes through to NumPy,
pandas/,41,Period alias,
pandas/,47,Period dtype,
pandas/,53,Datetime (naive),
pandas/,79,Datetime (tz-aware),
pandas/,87,Timedelta,
pandas/,103,Category,
pandas/,110,Interval,
pandas/,116,Sparse,
pandas/,118,IntegerNA,
pandas/,121,String,
pandas/,124,Boolean,
pandas/,127,Index,
pandas/,129,Series[EA] returns the EA,
pandas/,135,"""3rd party"" EAs work",
pandas/,137,"pass an ExtensionArray, but a different dtype",
pandas/,152,default is to copy,
pandas/,156,copy=True,
pandas/,160,copy=False,
pandas/,171,period,
pandas/,176,interval,
pandas/,178,datetime,
pandas/,195,datetimetz,
pandas/,209,timedelta,
pandas/,222,integer,
pandas/,227,string,
pandas/,230,Boolean,
pandas/,243,mix of frequencies,
pandas/,245,mix of closed,
pandas/,247,Mix of timezones,
pandas/,249,Mix of tz-aware and tz-naive,
pandas/,271,---------------------------------------------------------------------------,
pandas/,272,A couple dummy classes to ensure that Series and Indexes are unboxed before,
pandas/,273,getting to the EA classes.,
pandas/,305,make sure it works,
pandas/,325,check we aren't on it,
pandas/,16,unordered cats have no min/max,
pandas/,55,GH 30227,
pandas/,69,GH 25303,
pandas/,82,https://github.com/pandas-dev/pandas/issues/33450,
pandas/,89,GH 25303,
pandas/,114,https://github.com/pandas-dev/pandas/issues/8420,
pandas/,115,https://github.com/pandas-dev/pandas/issues/14522,
pandas/,124,"Searching for single item argument, side='left' (default)",
pandas/,133,"Searching for single item array, side='left' (default)",
pandas/,140,"Searching for several items array, side='right'",
pandas/,147,Searching for a single value that is not from the Categorical,
pandas/,153,Searching for multiple values one of each is not from the Categorical,
pandas/,160,categories are reordered based on value when ordered=False,
pandas/,179,nan must be removed,
pandas/,188,keep categories order when ordered=True,
pandas/,215,Categorical.unique sorts categories by appearance order,
pandas/,216,if ordered=False,
pandas/,230,Categorical.unique keeps categories order if ordered=True,
pandas/,238,GH 9416,
pandas/,241,shift forward,
pandas/,247,shift back,
pandas/,255,shift by zero,
pandas/,260,3 int8s for values + 3 int64s for categories,
pandas/,266,".categories is an index, so we include the hashtable",
pandas/,274,sys.getsizeof will call the .memory_usage with,
pandas/,275,"deep=True, and add on some GC overhead",
pandas/,291,GH 12766: Return an index not an array,
pandas/,11,https://github.com/pandas-dev/pandas/issues/16409,
pandas/,18,GH 31324 newer jedi version raises Deprecation warning,
pandas/,32,see gh-14058,
pandas/,36,This should be a boolean.,
pandas/,48,GH 17248,
pandas/,58,see gh-22702,
pandas/,71,numpy will auto reshape when all of the tuples are the,
pandas/,72,"same len, so add an extra one with 2 items and slice it off",
pandas/,92,it works!,
pandas/,97,this however will raise as cannot be sorted,
pandas/,124,categories must be unique,
pandas/,132,The default should be unordered,
pandas/,136,Categorical as input,
pandas/,154,Series of dtype category,
pandas/,163,Series,
pandas/,172,"This should result in integer categories, not float!",
pandas/,176,https://github.com/pandas-dev/pandas/issues/3678,
pandas/,180,this should result in floats,
pandas/,187,"This doesn't work -> this would probably need some kind of ""remember",
pandas/,188,"the original type"" feature to try to cast the array interface result",
pandas/,189,to...,
pandas/,191,vals = np.asarray(cat[cat.notna()]),
pandas/,192,assert is_integer_dtype(vals),
pandas/,194,corner cases,
pandas/,207,Scalars should be converted to lists,
pandas/,214,two arrays,
pandas/,215,- when the first is an integer dtype and the second is not,
pandas/,216,- when the resulting codes are all -1/NaN,
pandas/,218,noqa,
pandas/,221,noqa,
pandas/,223,the next one are from the old docs,
pandas/,225,noqa,
pandas/,228,this is a legitimate constructor,
pandas/,230,noqa,
pandas/,235,GH25318: constructing with pd.Series used to bogusly skip recoding,
pandas/,236,categories,
pandas/,247,https://github.com/pandas-dev/pandas/issues/16022,
pandas/,254,Cannot have NaN in categories,
pandas/,278,This was raising an Error in isna(single_val).any() because isna,
pandas/,279,returned a scalar for a generator,
pandas/,289,check that categories accept generators and sequences,
pandas/,304,see gh-12077,
pandas/,305,constructor with a datetimelike and NaT,
pandas/,316,with NaT,
pandas/,372,GH 14190,
pandas/,414,GH#31499 Hastable.map_locations needs to work on np.str_ objects,
pandas/,422,"We use dtype.categories, not values.categories",
pandas/,432,"We use values.categories, not dtype.categories",
pandas/,440,"use categories, ordered",
pandas/,449,No string,
pandas/,454,GH17884,
pandas/,465,https://github.com/pandas-dev/pandas/issues/31927,
pandas/,525,GH17884,
pandas/,537,GH21767,
pandas/,547,GH21767,
pandas/,548,float codes should raise even if values are equal to integers,
pandas/,627,"GH 9347, 9190",
pandas/,640,GH 21416,
pandas/,14,#1457,
pandas/,27,Nans are represented as -1 in codes,
pandas/,35,Adding nan to categories should make assigned nan point to the,
pandas/,36,category!,
pandas/,66,https://github.com/pandas-dev/pandas/issues/19682,
pandas/,67,https://github.com/pandas-dev/pandas/issues/13628,
pandas/,75,https://github.com/pandas-dev/pandas/issues/21097,
pandas/,79,tuple,
pandas/,87,accept Categorical or ndarray value if it holds appropriate values,
pandas/,93,didnt modify original inplace,
pandas/,99,didnt modify original inplace,
pandas/,14,GH 9347,
pandas/,50,removed in 0.19.0,
pandas/,60,inplace=False: the old one must not be changed,
pandas/,73,GH18862 (let rename_categories take callables),
pandas/,78,and now inplace,
pandas/,97,https://github.com/pandas-dev/pandas/issues/17981,
pandas/,104,GH 17336,
pandas/,110,Test for inplace,
pandas/,115,Test for dicts of smaller length,
pandas/,122,Test for dicts with bigger length,
pandas/,128,Test for dicts with no items from old categories,
pandas/,142,first inplace == False,
pandas/,144,cat must be the same as before,
pandas/,146,only res is changed,
pandas/,149,inplace == True,
pandas/,157,"not all ""old"" included in ""new""",
pandas/,158,"still not all ""old"" in ""new""",
pandas/,159,"all ""old"" included in ""new"", but too long",
pandas/,175,first inplace == False,
pandas/,184,inplace == True,
pandas/,189,GH 9927,
pandas/,192,"test with Series, np.array, index, list",
pandas/,203,new is in old categories,
pandas/,220,cat must be the same as before,
pandas/,223,only res is changed,
pandas/,228,"not all ""old"" included in ""new"" -> all not included ones are now",
pandas/,229,np.nan,
pandas/,234,"still not all ""old"" in ""new""",
pandas/,239,"all ""old"" included in ""new""",
pandas/,244,internals...,
pandas/,252,"all ""pointers"" to '4' must be changed from 3 to 0,...",
pandas/,255,positions are changed,
pandas/,258,categories are now in new order,
pandas/,261,output is the same,
pandas/,267,set_categories should set the ordering if specified,
pandas/,273,set_categories should pass thru the ordering,
pandas/,288,"No NaNs, same cats, same order",
pandas/,290,"No NaNs, same cats, different order",
pandas/,292,"Same, unsorted",
pandas/,294,"No NaNs, same cats, different order",
pandas/,296,NaNs,
pandas/,301,Introduce NaNs,
pandas/,306,No overlap,
pandas/,318,GH 24675,
pandas/,330,fastpath,
pandas/,341,first inplace == False,
pandas/,350,inplace == True,
pandas/,378,with NaN values (GH11599),
pandas/,405,string type,
pandas/,416,check unused categories,
pandas/,430,check an integer one,
pandas/,440,https://github.com/pandas-dev/pandas/issues/3678,
pandas/,441,describe should work with NaN,
pandas/,461,Codes should be read only,
pandas/,466,Assignments to codes should raise,
pandas/,470,changes in the codes array should raise,
pandas/,476,"But even after getting the codes, the original array should still be",
pandas/,477,writeable!,
pandas/,54,comparisons with categoricals,
pandas/,62,comparisons need to take categories ordering into account,
pandas/,75,Only categories with same categories can be compared,
pandas/,89,Only categories with same ordering information can be compared,
pandas/,97,comparison (in both directions) with Series will raise,
pandas/,112,"comparison with numpy.array will raise in both direction, but only on",
pandas/,113,newer numpy versions,
pandas/,120,Make sure that unequal comparison take the categories order in,
pandas/,121,account,
pandas/,127,check that zero-dim array gets unboxed,
pandas/,134,GH#24282 check that Categorical.__cmp__(DataFrame) defers to frame,
pandas/,149,alignment raises unless we transpose,
pandas/,163,GH8658,
pandas/,169,https://github.com/pandas-dev/pandas/issues/9836#issuecomment-92123057,
pandas/,170,and following comparisons with scalars not in categories should raise,
pandas/,171,"for unequal comps, but not for equal/not equal",
pandas/,193,https://github.com/pandas-dev/pandas/issues/26504,
pandas/,194,BUG: fix ordered categorical comparison with missing values (#26504 ),
pandas/,195,and following comparisons with scalars in categories with missing,
pandas/,196,values should be evaluated as False,
pandas/,209,https://github.com/pandas-dev/pandas/issues/26504,
pandas/,210,and following comparisons of missing values in ordered Categorical,
pandas/,211,with listlike should be evaluated as False,
pandas/,235,comparisons need to take categories ordering into account,
pandas/,260,Only categories with same categories can be compared,
pandas/,265,"categorical cannot be compared to Series or numpy array, and also",
pandas/,266,not the other way around,
pandas/,298,https://github.com/pandas-dev/pandas/issues/16014,
pandas/,332,https://github.com/pandas-dev/pandas/issues/16603#issuecomment-,
pandas/,333,349290078,
pandas/,349,numeric ops should not succeed,
pandas/,360,"reduction ops should not succeed (unless specifically defined, e.g.",
pandas/,361,min/max),
pandas/,368,mad technically works because it takes always the numeric data,
pandas/,370,numpy ops,
pandas/,377,numeric ops on a Series,
pandas/,388,invalid ufunc,
pandas/,394,GH21508,
pandas/,403,assert codes NOT in index,
pandas/,423,GH 23705,
pandas/,429,GH#21729,
pandas/,54,GH10087,
pandas/,77,noqa,
pandas/,81,"unicode option should not affect to Categorical, as it doesn't care",
pandas/,82,the repr width,
pandas/,88,noqa,
pandas/,213,noqa,
pandas/,220,noqa,
pandas/,229,noqa,
pandas/,237,noqa,
pandas/,257,noqa,
pandas/,264,noqa,
pandas/,277,noqa,
pandas/,286,noqa,
pandas/,293,noqa,
pandas/,306,noqa,
pandas/,320,noqa,
pandas/,330,noqa,
pandas/,339,noqa,
pandas/,347,noqa,
pandas/,353,noqa,
pandas/,363,noqa,
pandas/,372,noqa,
pandas/,378,noqa,
pandas/,382,noqa,
pandas/,387,noqa,
pandas/,391,noqa,
pandas/,400,noqa,
pandas/,409,noqa,
pandas/,419,noqa,
pandas/,428,noqa,
pandas/,438,noqa,
pandas/,443,test all length,
pandas/,446,noqa,
pandas/,451,noqa,
pandas/,456,noqa,
pandas/,463,noqa,
pandas/,472,noqa,
pandas/,478,noqa,
pandas/,486,noqa,
pandas/,492,noqa,
pandas/,498,noqa,
pandas/,507,noqa,
pandas/,514,noqa,
pandas/,523,noqa,
pandas/,24,int/positional,
pandas/,31,boolean,
pandas/,46,GH-24142,
pandas/,63,GH-24142,
pandas/,79,Gh-24142,
pandas/,99,GH 9469,
pandas/,100,properly coerce the input indexers,
pandas/,175,Combinations of sorted/unique:,
pandas/,179,Combinations of missing/unique,
pandas/,183,GH 21448,
pandas/,185,Test for flat index and CategoricalIndex with same/different cats:,
pandas/,200,all NA,
pandas/,253,https://github.com/pandas-dev/pandas/issues/31503,
pandas/,275,TODO(Categorical): identify other places where this may be,
pandas/,276,useful and move to a conftest.py,
pandas/,50,GH2003,
pandas/,67,https://github.com/pandas-dev/pandas/issues/33288,
pandas/,73,GH 26988,
pandas/,78,"the ""c"" test is supposed to be unchanged",
pandas/,80,ensure non-inplace call does not affect original,
pandas/,111,https://github.com/pandas-dev/pandas/issues/20664,
pandas/,126,https://github.com/pandas-dev/pandas/issues/20664,
pandas/,136,https://github.com/pandas-dev/pandas/issues/20664,
pandas/,164,https://github.com/pandas-dev/pandas/issues/23296,
pandas/,171,-1 was a category,
pandas/,178,https://github.com/pandas-dev/pandas/issues/23296,
pandas/,185,https://github.com/pandas-dev/pandas/issues/23296,
pandas/,13,test dtype comparisons between cats,
pandas/,29,GH 16659,
pandas/,54,"No NaNs, same cats, same order",
pandas/,56,"No NaNs, same cats, different order",
pandas/,58,"Same, unsorted",
pandas/,60,"No NaNs, same cats, different order",
pandas/,62,NaNs,
pandas/,67,Introduce NaNs,
pandas/,72,No overlap,
pandas/,91,GH 8453,
pandas/,101,adding cats,
pandas/,107,removing cats,
pandas/,113,string,
pandas/,123,numeric,
pandas/,140,GH 10696/18593,
pandas/,144,standard categories,
pandas/,150,non-standard categories,
pandas/,157,"dtype='category' can't specify ordered, so only test once",
pandas/,163,GH-19909,
pandas/,11,one-to-one,
pandas/,16,many-to-one,
pandas/,22,"many-to-many, handled outside of Categorical and results in separate dtype",
pandas/,25,"check_categorical sorts categories, which crashes on mixed dtypes",
pandas/,31,GH 31720,
pandas/,43,the replace call loses categorical dtype,
pandas/,42,unordered cats are sortable,
pandas/,48,sort_values,
pandas/,67,sort (inplace order),
pandas/,74,reverse,
pandas/,83,see gh-12882,
pandas/,88,default arguments,
pandas/,22,GH-33253: all True / all False values buggy with skipna=False,
pandas/,28,the methods return numpy scalars,
pandas/,59,"""mean"", ""std"", ""var"", ""median"", ""kurt"", ""skew""",
pandas/,72,with missing values,
pandas/,113,"""foo"",",
pandas/,124,error in converting existing arrays to BooleanArray,
pandas/,135,with missing values,
pandas/,146,with missing values,
pandas/,153,integers of 0's and 1's,
pandas/,158,with missing values,
pandas/,165,TODO this is currently not public API,
pandas/,179,mixed missing from values and mask,
pandas/,192,raise errors for wrong dimension,
pandas/,204,passing BooleanArray to coerce_to_array,
pandas/,210,no copy,
pandas/,224,with missing values -> object dtype,
pandas/,230,also with no missing values -> object dtype,
pandas/,236,force bool dtype,
pandas/,240,with missing values will raise error,
pandas/,269,default (with or without missing values) -> object dtype,
pandas/,285,"no missing values -> can convert to bool, otherwise raises",
pandas/,295,specify dtype and na_value,
pandas/,313,converting to int or float without specifying na_value raises,
pandas/,321,to_numpy can be zero-copy if no missing values,
pandas/,335,FIXME: don't leave commented out,
pandas/,336,"TODO when BooleanArray coerces to object dtype numpy array, need to do conversion",
pandas/,337,manually in the indexing code,
pandas/,338,def test_indexing_boolean_mask():,
pandas/,339,"arr = pd.array([1, 2, 3, 4], dtype=""Int64"")",
pandas/,340,"mask = pd.array([True, False, True, False], dtype=""boolean"")",
pandas/,341,result = arr[mask],
pandas/,342,"expected = pd.array([1, 3], dtype=""Int64"")",
pandas/,343,"tm.assert_extension_array_equal(result, expected)",
pandas/,345,# missing values -> error,
pandas/,346,"mask = pd.array([True, False, True, None], dtype=""boolean"")",
pandas/,347,with pytest.raises(IndexError):,
pandas/,348,result = arr[mask],
pandas/,353,protocol added in 0.15.0,
pandas/,358,TODO use to_numpy(na_value=None) here,
pandas/,367,roundtrip possible from arrow 1.0.0,
pandas/,9,with missing values,
pandas/,26,no missing values,
pandas/,38,astype to BooleanArray,
pandas/,48,astype to IntegerArray,
pandas/,20,two BooleanArrays,
pandas/,33,Boolean with numpy array,
pandas/,45,BooleanArray with scalar,
pandas/,56,not handled types,
pandas/,26,Assume it is the reverse operator,
pandas/,41,TODO: pd.NA,
pandas/,42,"result = getattr(a, op_name)(pd.NA)",
pandas/,43,"tm.assert_extension_array_equal(a, result)",
pandas/,74,A clear test of behavior.,
pandas/,86,ensure we haven't mutated anything inplace,
pandas/,105,TODO: test True & False,
pandas/,114,ensure we haven't mutated anything inplace,
pandas/,120,A clear test of behavior.,
pandas/,132,ensure we haven't mutated anything inplace,
pandas/,159,ensure we haven't mutated anything inplace,
pandas/,176,ensure we haven't mutated anything inplace,
pandas/,202,ensure we haven't mutated anything inplace,
pandas/,211,The logical operations should not assume that masked values are False!,
pandas/,18,invalid ops,
pandas/,25,invalid scalars,
pandas/,31,invalid array-likes,
pandas/,33,TODO(extension) numpy's mul with object array sees booleans as numbers,
pandas/,37,2d,
pandas/,22,array,
pandas/,25,propagate NAs,
pandas/,30,series,
pandas/,37,propagate NAs,
pandas/,69,ensure we haven't mutated anything inplace,
pandas/,87,ensure we haven't mutated anything inplace,
pandas/,14,TODO: collect other Series accessor tests,
pandas/,111,gh-26554,
pandas/,121,https://github.com/pandas-dev/pandas/issues/30758,
pandas/,20,"whether to operate op(sparse, dense) instead of op(sparse, sparse)",
pandas/,35,FIXME: GH#13843,
pandas/,45,pandas uses future division,
pandas/,51,"Series sets 1//0 to np.inf, which SparseArray does not do (yet)",
pandas/,66,"Unfortunately, trying to wrap the computation of each expected",
pandas/,67,value is with np.errstate() is too tedious.,
pandas/,68,,
pandas/,69,sparse & sparse,
pandas/,88,sparse & dense,
pandas/,108,sparse & sparse,
pandas/,114,sparse & dense,
pandas/,151,when sp_index are the same,
pandas/,168,when sp_index are the same,
pandas/,253,have to specify dtype explicitly until fixing GH 667,
pandas/,288,int32 NI ATM,
pandas/,312,GH 14000,
pandas/,313,when sp_index are the same,
pandas/,323,GH 14000,
pandas/,324,when sp_index are the same,
pandas/,364,int32 NI ATM,
pandas/,409,GH#27910,
pandas/,417,GH#27910,
pandas/,448,can't say anything about fill value here.,
pandas/,15,Can't make any assertions about the sparse index itself,
pandas/,16,since we aren't don't merge sparse blocs across arrays,
pandas/,17,in to_concat,
pandas/,70,one or both is empty,
pandas/,400,corner cases,
pandas/,447,0-length OK,
pandas/,448,TODO: index variables are not used...is that right?,
pandas/,449,noqa,
pandas/,451,also OK even though empty,
pandas/,452,noqa,
pandas/,480,Too many indices than specified in self.length,
pandas/,486,No index can be negative.,
pandas/,492,No index can be negative.,
pandas/,498,All indices must be less than the length.,
pandas/,507,Indices must be strictly ascending.,
pandas/,542,see if survive the round trip,
pandas/,582,check versus Series...,
pandas/,76,GH 11856,
pandas/,85,GH 17574,
pandas/,100,GH#32501 warn when losing timezone inforamtion,
pandas/,117,XXX: Behavior change: specifying SparseIndex no longer changes the,
pandas/,118,fill_value,
pandas/,156,scalar input,
pandas/,230,GH 19163,
pandas/,290,GH #24128,
pandas/,303,similar tests as GH 12631,
pandas/,309,XXX: test change: fill_value=True -> allow_fill=True,
pandas/,314,allow_fill=False,
pandas/,335,same tests as GH 12631,
pandas/,341,fill_value,
pandas/,343,XXX: behavior change.,
pandas/,344,the old way of filling self.fill_value doesn't follow EA rules.,
pandas/,345,It's supposed to be self.dtype.na_value (nan in this case),
pandas/,349,allow_fill=False,
pandas/,370,XXX: did the default kind from take change?,
pandas/,419,GH 10648,
pandas/,425,Behavior change: np.asarray densifies.,
pandas/,426,"tm.assert_numpy_array_equal(arr.sp_values, np.asarray(arr))",
pandas/,447,GH 10648,
pandas/,453,Behavior change: np.asarray densifies.,
pandas/,454,"tm.assert_numpy_array_equal(arr.sp_values, np.asarray(arr))",
pandas/,464,float -> float,
pandas/,494,update fill value,
pandas/,565,XXX: this seems fine? You can construct an integer,
pandas/,566,"sparsearray with NaN fill value, why not update one?",
pandas/,567,coerces to int,
pandas/,568,"msg = ""unable to set fill_value 3\\.1 to int64 dtype""",
pandas/,569,"with pytest.raises(ValueError, match=msg):",
pandas/,573,"msg = ""unable to set fill_value nan to int64 dtype""",
pandas/,574,"with pytest.raises(ValueError, match=msg):",
pandas/,582,coerces to bool,
pandas/,583,"msg = ""unable to set fill_value 0 to bool dtype""",
pandas/,584,"with pytest.raises(ValueError, match=msg):",
pandas/,588,"msg = ""unable to set fill_value nan to bool dtype""",
pandas/,589,"with pytest.raises(ValueError, match=msg):",
pandas/,619,GH 21126,
pandas/,666,two corner cases from Series,
pandas/,681,noqa: E231,
pandas/,682,noqa: E231,
pandas/,688,noqa: E231,
pandas/,689,noqa: E231,
pandas/,697,check numpy compat,
pandas/,741,Ignore this if the actual op raises (e.g. pow).,
pandas/,803,"float dtype's fill_value is np.nan, replaced by -1",
pandas/,809,int dtype shouldn't have missing. No changes.,
pandas/,823,fill_value can be nan if there is no missing hole.,
pandas/,824,only fill_value will be changed,
pandas/,834,filling with existing value doesn't replace existing value with,
pandas/,835,"fill_value, i.e. existing 3 remains in sp_values",
pandas/,846,Tests regression #21172.,
pandas/,867,GH 17570,
pandas/,889,prior didn't dispatch,
pandas/,891,GH 17570,
pandas/,905,raises with a different message on py2.,
pandas/,919,GH 17570,
pandas/,941,prior didn't dispatch,
pandas/,943,GH 17570,
pandas/,997,non-null data,
pandas/,1001,null data,
pandas/,1019,numpy compatibility checks.,
pandas/,1028,"SparseArray currently 1-D, so only axis = 0 is valid.",
pandas/,1060,GH 13853 make sure ufunc is applied to fill_value,
pandas/,1089,"GH 13853 make sure ufunc is applied to fill_value, including its arg",
pandas/,1104,https://github.com/pandas-dev/pandas/issues/26946,
pandas/,1114,(2 * 8) + 2 * 4,
pandas/,1120,(2 * 8) + 4 + 4,
pandas/,1121,"sp_values, blocs, blengths",
pandas/,1180,This is why letting users update fill_value / dtype is bad,
pandas/,1181,astype has the same problem.,
pandas/,1185,"Can't do direct comparison, since the sp_index will be different",
pandas/,1186,So let's convert to ndarray and check there.,
pandas/,1196,use private constructor to get the index right,
pandas/,1197,otherwise both nans would be un-stored.,
pandas/,1235,https://github.com/pandas-dev/pandas/issues/23168,
pandas/,1246,dict,
pandas/,1250,series,
pandas/,1254,function,
pandas/,19,construct from our dtype & string dtype,
pandas/,22,from float,
pandas/,27,from int / list,
pandas/,32,from int / array,
pandas/,41,astype to object series,
pandas/,47,convert to object ndarray,
pandas/,48,we assert that we are exactly equal,
pandas/,49,including type conversions of scalars,
pandas/,130,error in converting existing arrays to IntegerArrays,
pandas/,140,if values has dtype -> respect it,
pandas/,146,if values have no dtype -> always int64,
pandas/,155,if values has dtype -> override it,
pandas/,168,"for float dtypes, the itemsize is not preserved",
pandas/,197,convert existing arrays to IntegerArrays,
pandas/,206,protocol added in 0.15.0,
pandas/,218,roundtrip possible from arrow 0.16.0,
pandas/,230,https://github.com/pandas-dev/pandas/issues/31896,
pandas/,231,possible mismatch in types,
pandas/,10,"np.sign emits a warning with nans, <https://github.com/numpy/numpy/issues/15127>",
pandas/,41,two IntegerArrays,
pandas/,47,IntegerArray with numpy array,
pandas/,57,IntegerArray with scalar,
pandas/,107,https://github.com/pandas-dev/pandas/issues/33317,
pandas/,110,TODO: The dtype of the index seems wrong (it's int64 for non-empty),
pandas/,116,TODO(jreback) - these need testing / are broken,
pandas/,118,shift,
pandas/,120,set_index (destroys type),
pandas/,19,smoke tests on auto dtype construction,
pandas/,6,GH 31446,
pandas/,14,GH 31446,
pandas/,13,smoke tests on auto dtype construction,
pandas/,24,TODO(#22346): preserve Int64 dtype,
pandas/,25,for ops that enable (mean would actually work here,
pandas/,26,but generally it is a float return value),
pandas/,35,op,
pandas/,42,groupby,
pandas/,53,see gh-22343,
pandas/,63,"ensure that we do not coerce to Float64Index, rather",
pandas/,64,keep as Index,
pandas/,80,as an int/uint index to Index,
pandas/,104,coerce to same type - ints,
pandas/,110,coerce to same other - ints,
pandas/,116,coerce to same numpy_dtype - ints,
pandas/,122,coerce to same type - mixed,
pandas/,128,coerce to same other - mixed,
pandas/,134,coerce to same numpy_dtype - mixed,
pandas/,140,coerce to object,
pandas/,173,GH#32435,
pandas/,247,https://github.com/pandas-dev/pandas/issues/31102,
pandas/,19,compute expected,
pandas/,22,"if s is a DataFrame, squeeze to a Series",
pandas/,23,for comparison,
pandas/,29,other array is an Integer,
pandas/,36,"1 ** na is na, so need to unmask those",
pandas/,46,float result type or float op,
pandas/,56,integer result type,
pandas/,63,check comparisons that are resulting in float dtypes,
pandas/,67,"Series op sets 1//0 to np.inf, which IntegerArray does not do (yet)",
pandas/,73,check comparisons that are resulting in integer dtypes,
pandas/,75,"to compare properly, we convert the expected",
pandas/,76,"to float, mask to nans and convert infs",
pandas/,77,if we have uints then we process as uints,
pandas/,78,then convert to float,
pandas/,79,and we ultimately want to create a IntArray,
pandas/,80,for comparisons,
pandas/,84,mod/rmod turn floating 0 into NaN while,
pandas/,85,integer works as expected (no nan),
pandas/,115,assert that the expected astype is ok,
pandas/,116,(skip for unsigned as they have wrap around),
pandas/,120,we need to fill with 0's to emulate what an astype('int') does,
pandas/,121,(truncation) for certain ops,
pandas/,130,assert our expected result,
pandas/,134,we operate with a rhs of an integer array,
pandas/,145,scalar,
pandas/,151,frame & scalar,
pandas/,157,ndarray & other series,
pandas/,173,if we have a float operand we should have a float result,
pandas/,174,if that is equal to an integer,
pandas/,182,operating with a list-like with non-matching length raises,
pandas/,198,invalid ops,
pandas/,205,invalid scalars,
pandas/,215,invalid array-likes,
pandas/,220,TODO(extension),
pandas/,221,rpow with a datetimelike coerces the integer array incorrectly,
pandas/,231,2d,
pandas/,241,https://github.com/pandas-dev/pandas/issues/27398,
pandas/,267,reversed,
pandas/,268,Can't raise integers to negative powers.,
pandas/,294,https://github.com/pandas-dev/pandas/issues/22022,
pandas/,295,https://github.com/pandas-dev/pandas/issues/29997,
pandas/,327,"some reduce ops always return float, even if the result",
pandas/,328,is a rounded number,
pandas/,337,op,
pandas/,341,groupby,
pandas/,13,array,
pandas/,17,fill the nan locations,
pandas/,22,series,
pandas/,28,fill the nan locations,
pandas/,48,ensure we haven't mutated anything inplace,
pandas/,64,ensure we haven't mutated anything inplace,
pandas/,87,GH 28930,
pandas/,95,GH 28930,
pandas/,40,"is_float_dtype considers some strings, like 'd', to be floats",
pandas/,41,which can cause issues.,
pandas/,246,protocol added in 0.15.0,
pandas/,257,roundtrip possible from arrow 1.0.0,
pandas/,267,ensure the missing value is represented by NA and not np.nan or None,
pandas/,55,GH27219,
pandas/,65,GH 21670,
pandas/,85,https://github.com/pandas-dev/pandas/issues/31495,
pandas/,88,int -> float,
pandas/,124,GH 25022,
pandas/,135,----------------------------------------------------------------------------,
pandas/,136,Arrow interaction,
pandas/,175,convert to its storage type,
pandas/,179,unsupported conversions,
pandas/,200,fields have missing values (not NaN),
pandas/,206,structarray itself also has missing values on the array level,
pandas/,39,"intervals: identical, nested, spanning, partial, adjacent, disjoint",
pandas/,57,TODO: modify this test when implemented,
pandas/,11,see gh-10278,
pandas/,17,Testing to make sure holiday is not incorrectly observed before 1986.,
pandas/,27,Fixes 5/31 error and checked manually against Wikipedia.,
pandas/,46,Verify that timezone info is preserved.,
pandas/,183,see gh-11477,
pandas/,184,,
pandas/,185,Fix holiday behavior where holiday.dates returned dates outside,
pandas/,186,"start/end date, or observed rules could not be applied because the",
pandas/,187,"holiday was not in the original date range (e.g., 7/4/2015 -> 7/3/2015).",
pandas/,259,see gh-10217,
pandas/,46,see gh-9552.,
pandas/,55,Getting holidays for Jan 1 should not alter results for Jan 2.,
pandas/,61,see gh-11477,
pandas/,65,<-- same start and end dates,
pandas/,68,<-- different start and end dates,
pandas/,71,<-- same start and end dates,
pandas/,73,These should all produce the same result.,
pandas/,74,,
pandas/,75,"In addition, calling with different start and end",
pandas/,76,dates should not alter the output if we call the,
pandas/,77,function again with the same start and end date.,
pandas/,88,See gh-27790,
pandas/,89,,
pandas/,90,Labor Day 2031 is on September 1. Saturday before is August 30.,
pandas/,91,"Next working day after August 30 ought to be Tuesday, September 2.",
pandas/,104,Test for issue #31415,
pandas/,111,Type is DatetimeIndex since return_name=False,
pandas/,61,Invalid leading +/- signs.,
pandas/,68,Invalid shortcut anchors.,
pandas/,85,see gh-13930,
pandas/,87,We escape string because some of our,
pandas/,88,inputs contain regex special characters.,
pandas/,143,see gh-9064,
pandas/,150,see gh-9064,
pandas/,119,see gh-16624,
pandas/,120,,
pandas/,121,"Do not infer ""B when ""weekend"" (2-day gap) in wrong place.",
pandas/,137,see gh-9425,
pandas/,138,,
pandas/,139,Only attempt to infer up to WOM-4.,
pandas/,145,All of these dates are on same day,
pandas/,146,of week and are 4 or 5 weeks apart.,
pandas/,152,see gh-9425,
pandas/,153,,
pandas/,154,Only supports freq up to WOM-4.,
pandas/,255,see gh-7310,
pandas/,264,Fall DST,
pandas/,265,Spring DST,
pandas/,266,Regular Time,
pandas/,273,see gh-8772,
pandas/,289,"Hourly freq in a day must result in ""H""",
pandas/,365,see gh-7905,
pandas/,401,see gh-10822,
pandas/,402,,
pandas/,403,Odd error message on conversions to datetime for unicode.,
pandas/,411,see gh-6463,
pandas/,421,see gh-6407,
pandas/,429,see gh-6407,
pandas/,438,see gh-6407,
pandas/,447,see gh-6407,
pandas/,448,,
pandas/,449,Cannot infer on PeriodIndex,
pandas/,136,see gh-14378,
pandas/,144,Too much precision in the input can prevent.,
pandas/,158,Frequency string.,
pandas/,162,Tuple.,
pandas/,167,Numeric Tuple.,
pandas/,169,Offsets.,
pandas/,180,Monday is weekday=0.,
pandas/,74,TODO: Remove: This is not used outside of tests,
pandas/,84,,
pandas/,85,DateOffset Tests,
pandas/,86,,
pandas/,104,create instance from offset class,
pandas/,139,try to create an out-of-bounds result timestamp; if we can't create,
pandas/,140,the offset skip,
pandas/,143,Using 10000 in BusinessHour fails in tz check because of DST,
pandas/,144,difference,
pandas/,153,Check tz is preserved,
pandas/,162,we are creating an invalid offset,
pandas/,163,so ignore,
pandas/,167,root cause of GH#456: __ne__ was not implemented,
pandas/,177,i.e. skip for TestCommon and YQM subclasses that do not have,
pandas/,178,offset2 attr,
pandas/,184,i.e. skip for TestCommon and YQM subclasses that do not have,
pandas/,185,offset2 attr,
pandas/,191,i.e. skip for TestCommon and YQM subclasses that do not have,
pandas/,192,offset2 attr,
pandas/,205,i.e. skip for TestCommon and YQM subclasses that do not have,
pandas/,206,offset1 attr,
pandas/,218,GH#23524,
pandas/,219,comparing to strings that cannot be cast to DateOffsets should,
pandas/,220,not raise for __eq__ or __ne__,
pandas/,227,Note: inequalities are only implemented for Tick subclasses;,
pandas/,228,tests for this are in test_ticks,
pandas/,232,exected value created by Base._get_offset,
pandas/,233,are applied to 2011/01/01 09:00 (Saturday),
pandas/,234,used for .apply and .rollforward,
pandas/,273,GH#21341 check that __setattr__ raises,
pandas/,283,make sure that we are returning a Timestamp,
pandas/,287,make sure that we are returning NaT,
pandas/,305,check that offset._validate_n raises TypeError on a timedelt64,
pandas/,306,object,
pandas/,335,normalize=True disallowed for Tick subclasses GH#21427,
pandas/,349,see gh-14101,
pandas/,360,test nanosecond is preserved,
pandas/,370,test tz when input is datetime or Timestamp,
pandas/,386,see gh-14101,
pandas/,397,test nanosecond is preserved,
pandas/,422,result will not be changed if the target is on the offset,
pandas/,443,but be changed when normalize=True,
pandas/,500,result will not be changed if the target is on the offset,
pandas/,517,but be changed when normalize=True,
pandas/,554,"when normalize=True, is_on_offset checks time is 00:00:00",
pandas/,556,normalize=True disallowed for Tick subclasses GH#21427,
pandas/,562,"In default BusinessHour (9:00-17:00), normalized time",
pandas/,563,cannot be in business hour range,
pandas/,586,"normalize=True, disallowed for Tick subclasses GH#21427",
pandas/,604,"GH#12724, GH#30336",
pandas/,625,We don't have an optimized apply_index,
pandas/,653,This code was executed once on v0.15.2 to generate the pickle:,
pandas/,654,"with open(pickle_path, 'wb') as f: pickle.dump(offsets, f)",
pandas/,655,,
pandas/,659,GH#30340 use idiomatic naming,
pandas/,670,GH#30340 use idiomatic naming,
pandas/,729,GH#21404 changed __eq__ to return False when `normalize` does not match,
pandas/,895,see #5890,
pandas/,971,GH#21404 changed __eq__ to return False when `normalize` does not match,
pandas/,1052,we have to override test_sub here because self.offset2 is not,
pandas/,1053,defined as self._offset(2),
pandas/,1292,"opening time should be affected by sign of n, not by n's value and",
pandas/,1293,end,
pandas/,1321,"if timestamp is on opening time, next opening time is",
pandas/,1322,as it is,
pandas/,1331,2014-07-05 is saturday,
pandas/,1770,out of business hours,
pandas/,1775,saturday,
pandas/,1820,out of business hours,
pandas/,1825,saturday,
pandas/,1970,long business hours (see gh-26381),
pandas/,1999,multiple business hours,
pandas/,2011,out of business hours,
pandas/,2017,saturday,
pandas/,2101,A week later,
pandas/,2124,3 days and 1 hour before,
pandas/,2146,5 days and 3 hours later,
pandas/,2168,large n for multiple opening hours (3 days and 1 hour before),
pandas/,2190,5 days and 3 hours later,
pandas/,2316,2014 Calendar to check custom holidays,
pandas/,2317,Sun Mon Tue Wed Thu Fri Sat,
pandas/,2318,6/22  23  24  25  26  27  28,
pandas/,2319,29  30 7/1   2   3   4   5,
pandas/,2320,6   7   8   9  10  11  12,
pandas/,2337,GH#21404 changed __eq__ to return False when `normalize` does not match,
pandas/,2371,override the Base.test_sub implementation because self.offset2 is,
pandas/,2372,defined differently in this class than the test expects,
pandas/,2389,"2014/07/01 is Tuesday, 06/30 is Monday(holiday)",
pandas/,2392,2014/6/30 and 2014/6/27 are holidays,
pandas/,2519,out of business hours,
pandas/,2524,saturday,
pandas/,2615,GH#21404 changed __eq__ to return False when `normalize` does not match,
pandas/,2791,Define a TradingDay offset,
pandas/,2801,Thu-Fri Weekend,
pandas/,2802,Fri-Sat Weekend,
pandas/,2803,Fri-Sat Weekend,
pandas/,2820,Fri-Sat Weekend,
pandas/,2877,GH 17452,
pandas/,2886,GH#21404 changed __eq__ to return False when `normalize` does not match,
pandas/,3012,Define a TradingDay offset,
pandas/,3035,GH#21404 changed __eq__ to return False when `normalize` does not match,
pandas/,3162,Define a TradingDay offset,
pandas/,3204,not business week,
pandas/,3218,Mon,
pandas/,3232,n=0 -> roll forward. Mon,
pandas/,3246,n=0 -> roll forward. Mon,
pandas/,3302,1st Tuesday of Month,
pandas/,3303,2nd Tuesday of Month,
pandas/,3304,3rd Tuesday of Month,
pandas/,3305,4th Tuesday of Month,
pandas/,3307,see for loop for structure,
pandas/,3355,try subtracting,
pandas/,3394,Saturday,
pandas/,3405,Test On that day,
pandas/,3408,Thursday,
pandas/,3420,Test on that day,
pandas/,3435,Not the last Mon,
pandas/,3436,Not a SUN,
pandas/,3492,ensure .apply_index works as expected,
pandas/,3495,GH#22535 check that we don't get a FutureWarning from adding,
pandas/,3496,an integer array to PeriodIndex,
pandas/,3502,ensure generating a range with DatetimeIndex gives same result,
pandas/,3643,GH#22535 check that we don't get a FutureWarning from adding,
pandas/,3644,an integer array to PeriodIndex,
pandas/,3674,GH#22535 check that we don't get a FutureWarning from adding,
pandas/,3675,an integer array to PeriodIndex,
pandas/,3698,GH#22535 check that we don't get a FutureWarning from adding,
pandas/,3699,an integer array to PeriodIndex,
pandas/,3751,ensure .apply_index works as expected,
pandas/,3754,GH#22535 check that we don't get a FutureWarning from adding,
pandas/,3755,an integer array to PeriodIndex,
pandas/,3761,ensure generating a range with DatetimeIndex gives same result,
pandas/,3907,GH#22535 check that we don't get a FutureWarning from adding,
pandas/,3908,an integer array to PeriodIndex,
pandas/,3937,GH#22535 check that we don't get a FutureWarning from adding,
pandas/,3938,an integer array to PeriodIndex,
pandas/,3960,GH#22535 check that we don't get a FutureWarning from adding,
pandas/,3961,an integer array to PeriodIndex,
pandas/,4053,should be cached - this is kind of an internals test...,
pandas/,4095,it works,
pandas/,4111,look at all the amazing combinations!,
pandas/,4141,take a Timestamp and compute total hours of utc offset,
pandas/,4151,one microsecond before the DST transition,
pandas/,4155,test both basic names and dateutil timezones,
pandas/,4196,dates should match,
pandas/,4198,"expect the same day of week, hour of day, minute, second, ...",
pandas/,4206,dates should match,
pandas/,4208,"expect the same hour of day, minute, second, ...",
pandas/,4215,expect the singular offset value to match between tstart and t,
pandas/,4221,the offset should be the same as if it was done in UTC,
pandas/,4232,test moving from standard to daylight savings,
pandas/,4243,"in the case of singular offsets, we don't necessarily know which utc",
pandas/,4244,offset the new Timestamp will wind up in (the tz for 1 month may be,
pandas/,4245,different from 1 second) so we don't specify an expected_utc_offset,
pandas/,4293,---------------------------------------------------------------------,
pandas/,4295,"subclass of _BaseOffset must override _day_opt attribute, or we should",
pandas/,4296,get a NotImplementedError,
pandas/,4303,GH#19142 check that the calling the constructors without passing,
pandas/,4304,any keyword arguments produce valid offsets,
pandas/,4311,GH#18226,
pandas/,4313,check that we cannot create e.g. MonthEnd(weeks=3),
pandas/,4320,Check that all the arguments specified in liboffsets.relativedelta_kwds,
pandas/,4321,are in fact valid relativedelta keyword args,
pandas/,4327,GH#18226,
pandas/,4329,check that we cannot create e.g. Hour(weeks=3),
pandas/,4352,check that trying to create a Tick object with normalize=True raises,
pandas/,4353,GH#21427,
pandas/,4360,"GH#18510 Week with weekday = None, normalize = False should always",
pandas/,4361,be is_on_offset,
pandas/,4368,negative n,
pandas/,4377,GH#18864,
pandas/,4378,Make sure that nanoseconds don't trip up is_on_offset (and with it apply),
pandas/,4385,negative n,
pandas/,4394,"GH#19036, GH#18977 _adjust_dst was incorrect for LastWeekOfMonth",
pandas/,4401,negative n,
pandas/,4410,Week with weekday should raise TypeError and _not_ AttributeError,
pandas/,4411,when adding invalid offset,
pandas/,29,--------------------------------------------------------------------,
pandas/,30,Misc,
pandas/,72,"apply_index is only for indexes, not series, so no res2_v2",
pandas/,93,--------------------------------------------------------------------,
pandas/,94,Months,
pandas/,101,NOTE: I'm not entirely happy with the logic here for Begin -ss,
pandas/,102,see thread 'offset conventions' on the ML,
pandas/,259,root cause of #456,
pandas/,354,root cause of #456,
pandas/,432,--------------------------------------------------------------------,
pandas/,433,Quarters,
pandas/,451,corner,
pandas/,561,corner,
pandas/,708,corner,
pandas/,833,corner,
pandas/,959,--------------------------------------------------------------------,
pandas/,960,Years,
pandas/,18,---------------------------------------------------------------------,
pandas/,19,Test Helpers,
pandas/,24,---------------------------------------------------------------------,
pandas/,45,GH 24641,
pandas/,51,"For all Tick subclasses and all integers n, m, we should have",
pandas/,52,tick(n) + tick(m) == tick(n+m),
pandas/,53,tick(n) - tick(m) == tick(n-m),
pandas/,71,tick == tock iff tick.n == tock.n,
pandas/,85,---------------------------------------------------------------------,
pandas/,193,GH9284,
pandas/,231,A case where we end up with a smaller class,
pandas/,238,Case where we end up with a bigger class,
pandas/,259,skip pytimedelta for Nano since it gets dropped,
pandas/,305,GH#23524,
pandas/,308,"These tests should work with any strings, but we particularly are",
pandas/,309,"interested in ""infer"" as that comparison is convenient to make in",
pandas/,310,Datetime/Timedelta Array/Index constructors,
pandas/,35,----------------------------------------------------------------,
pandas/,36,Helpers for generating random data,
pandas/,46,TODO: Choose the min/max values more systematically,
pandas/,61,"The strategy for each type is registered in conftest.py, as they don't carry",
pandas/,62,enough runtime information (e.g. type hints) to infer how to build them.,
pandas/,84,----------------------------------------------------------------,
pandas/,85,Offset-specific behaviour tests,
pandas/,88,"Based on CI runs: Always passes on OSX, fails on Linux, sometimes on Windows",
pandas/,93,check that the class-specific implementations of is_on_offset match,
pandas/,94,the general case definition:,
pandas/,95,(dt + offset) - offset == dt,
pandas/,108,offset.apply_index(dti)[i] should match dti[i] + offset,
pandas/,109,TODO: test for that case separately,
pandas/,111,"rng = pd.date_range(start='1/1/2000', periods=100000, freq='T')",
pandas/,116,res_v2 = offset.apply_index(rng.tz_localize(None)).tz_localize(rng.tz),
pandas/,122,"apply_index is only for indexes, not series, so no res2_v2",
pandas/,125,"TODO: Check randomly assorted entries, not just first/last",
pandas/,128,TODO: reason?,
pandas/,131,GH#18319 check that 1) timezone is correctly normalized and,
pandas/,132,2) that hour is not incorrectly changed by this normalization,
pandas/,133,Note that dti includes a transition across DST boundary,
pandas/,137,we haven't screwed up yet,
pandas/,97,From Wikipedia (see:,
pandas/,98,https://en.wikipedia.org/wiki/4%E2%80%934%E2%80%935_calendar#Last_Saturday_of_the_month_at_fiscal_year_end),
pandas/,126,From GMCR (see for example:,
pandas/,127,http://yahoo.brand.edgar-online.com/Default.aspx?,
pandas/,128,companyid=3184&formtypeID=7),
pandas/,210,From Wikipedia (see:,
pandas/,211,https://en.wikipedia.org/wiki/4%E2%80%934%E2%80%935_calendar,
pandas/,212,#Saturday_nearest_the_end_of_month),
pandas/,213,2006-09-02   2006 September 2,
pandas/,214,2007-09-01   2007 September 1,
pandas/,215,2008-08-30   2008 August 30    (leap year),
pandas/,216,2009-08-29   2009 August 29,
pandas/,217,2010-08-28   2010 August 28,
pandas/,218,2011-09-03   2011 September 3,
pandas/,219,2012-09-01   2012 September 1  (leap year),
pandas/,220,2013-08-31   2013 August 31,
pandas/,221,2014-08-30   2014 August 30,
pandas/,222,2015-08-29   2015 August 29,
pandas/,223,2016-09-03   2016 September 3  (leap year),
pandas/,224,2017-09-02   2017 September 2,
pandas/,225,2018-09-01   2018 September 1,
pandas/,226,2019-08-31   2019 August 31,
pandas/,250,"From Micron, see:",
pandas/,251,http://google.brand.edgar-online.com/?sym=MU&formtypeID=7,
pandas/,432,From Wikipedia,
pandas/,453,From GMCR,
pandas/,464,INTC (extra week in Q1),
pandas/,465,See: http://www.intc.com/releasedetail.cfm?ReleaseID=542844,
pandas/,473,see: http://google.brand.edgar-online.com/?sym=INTC&formtypeID=7,
pandas/,503,End of long Q1,
pandas/,508,Start of long Q1,
pandas/,513,End of year before year with long Q1,
pandas/,525,Other long years,
pandas/,562,From Wikipedia,
pandas/,586,"From Micron, see:",
pandas/,587,http://google.brand.edgar-online.com/?sym=MU&formtypeID=7,
pandas/,590,See: http://google.brand.edgar-online.com/?sym=MU&formtypeID=13,
pandas/,636,GH#14774 cases with two fiscal year-ends in the same calendar-year,
pandas/,648,"Same thing, but starting from a Timestamp in the previous year.",
pandas/,656,GH#18877 dates on the year-end but not normalized to midnight,
pandas/,665,GH#18877 dates on the year-end but not normalized to midnight,
pandas/,674,GH#19036,
pandas/,685,GH#19036,
pandas/,109,matches first interval,
pandas/,115,matches on a single endpoint but not both,
pandas/,159,same endpoints,
pandas/,165,different endpoints,
pandas/,171,all nan endpoints,
pandas/,257,IntervalIndex/Series that rely on IntervalArray for comparisons,
pandas/,261,scalar comparisons,
pandas/,272,list-like comparisons,
pandas/,1,Arithmetic tests for DataFrame/Series/Index/Array classes that should,
pandas/,2,behave identically.,
pandas/,3,Specifically for Period dtype,
pandas/,22,------------------------------------------------------------------,
pandas/,23,Comparisons,
pandas/,27,Comparison tests for PeriodDtype vectors fully parametrized over,
pandas/,28,DataFrame/Series/PeriodIndex/PeriodArray.  Ideally all comparison,
pandas/,29,tests will eventually end up here.,
pandas/,32,GH#26689 make sure we unbox zero-dimensional arrays,
pandas/,48,comparison with scalar that cannot be interpreted as a Period,
pandas/,128,TODO: parameterize over boxes,
pandas/,149,match Period semantics by not treating integers as Periods,
pandas/,176,TODO: moved from test_datetime64; de-duplicate with version below,
pandas/,198,GH#13200,
pandas/,237,GH#13200,
pandas/,243,TODO: could also box idx?,
pandas/,272,GH#13200,
pandas/,273,different base freq,
pandas/,284,TODO: Could parametrize over boxes for idx?,
pandas/,291,Different frequency,
pandas/,360,TODO: De-duplicate with test_pi_cmp_nat,
pandas/,395,GH#13200,
pandas/,436,TODO: needs parametrization+de-duplication,
pandas/,439,Test PeriodIndex and Period Series Ops consistency,
pandas/,444,check that we don't pass an unwanted type to tm.assert_equal,
pandas/,529,------------------------------------------------------------------,
pandas/,530,Arithmetic,
pandas/,535,GH#13043,
pandas/,547,dtype will be object because of original dtype,
pandas/,577,---------------------------------------------------------------,
pandas/,578,__add__/__sub__ with PeriodIndex,
pandas/,579,PeriodIndex + other is defined for integers and timedelta-like others,
pandas/,580,"PeriodIndex - other is defined for integers, timedelta-like others,",
pandas/,581,and PeriodIndex (with matching freq),
pandas/,586,TODO: parametrize over boxes for other?,
pandas/,589,An earlier implementation of PeriodIndex addition performed,
pandas/,590,a set operation (union).  This has since been changed to,
pandas/,591,raise a TypeError. See GH#14164 and GH#13077 for historical,
pandas/,592,reference.,
pandas/,601,GH#20049,
pandas/,602,"For historical reference see GH#14164, GH#13077.",
pandas/,603,"PeriodIndex subtraction originally performed set difference,",
pandas/,604,then changed to raise TypeError before being implemented in GH#20049,
pandas/,629,TODO: parametrize over boxes for other?,
pandas/,638,GH 23878,
pandas/,661,GH 23878,
pandas/,676,-------------------------------------------------------------,
pandas/,677,Invalid Operations,
pandas/,692,datetime scalars,
pandas/,696,datetime-like arrays,
pandas/,701,Miscellaneous invalid types,
pandas/,705,GH#23215,
pandas/,723,-----------------------------------------------------------------,
pandas/,724,__add__/__sub__ with ndarray[datetime64] and ndarray[timedelta64],
pandas/,744,PeriodIndex + Timedelta-like is allowed only with,
pandas/,745,tick-like frequencies,
pandas/,774,-----------------------------------------------------------------,
pandas/,775,operations with array/Index of DateOffset objects,
pandas/,779,GH#18849,
pandas/,798,addition/subtraction ops with incompatible offsets should issue,
pandas/,799,a PerformanceWarning and _then_ raise a TypeError.,
pandas/,810,GH#18824,
pandas/,827,addition/subtraction ops with anchored offsets should issue,
pandas/,828,a PerformanceWarning and _then_ raise a TypeError.,
pandas/,838,Variants of `one` for #19012,
pandas/,867,offset,
pandas/,868,DateOffset,
pandas/,886,GH#23215,
pandas/,887,add offset to PeriodIndex with freq.n > 1,
pandas/,904,GH#23215,
pandas/,905,PeriodIndex with freq.n > 1 add offset with offset.n % freq.n != 0,
pandas/,909,FIXME: with transposing these tests fail,
pandas/,919,---------------------------------------------------------------,
pandas/,920,__add__/__sub__ with integer arrays,
pandas/,925,GH#19959,
pandas/,935,GH#19959,
pandas/,947,---------------------------------------------------------------,
pandas/,948,"Timedelta-like (timedelta, timedelta64, Timedelta, Tick)",
pandas/,949,TODO: Some of these are misnomers because of non-Tick DateOffsets,
pandas/,952,GH#23031 adding a time-delta-like offset to a PeriodArray that has,
pandas/,953,minute frequency with n != 1.  A more general case is tested below,
pandas/,954,"in test_pi_add_timedeltalike_tick_gt1, but here we write out the",
pandas/,955,expected result more explicitly.,
pandas/,967,subtraction,
pandas/,981,GH#23031 adding a time-delta-like offset to a PeriodArray that has,
pandas/,982,tick-like frequency with n != 1,
pandas/,994,subtraction,
pandas/,1006,Tick,
pandas/,1018,Tick-like 3 Days,
pandas/,1076,offset,
pandas/,1077,DateOffset,
pandas/,1123,"GH#23320 special handling for timedelta64(""NaT"")",
pandas/,1165,---------------------------------------------------------------,
pandas/,1166,Unsorted,
pandas/,1169,Check that PeriodArray defers to Index on arithmetic ops,
pandas/,1200,GH#13043,
pandas/,1225,GH#13043,
pandas/,1234,dtype will be object because of original dtype,
pandas/,1329,freq with mult,
pandas/,1411,"Series op is applied per Period instance, thus error is raised",
pandas/,1412,from Period,
pandas/,1426,GH#13071,
pandas/,1451,GH#13071,
pandas/,1460,GH#13071,
pandas/,7,------------------------------------------------------------------,
pandas/,8,Helper Functions,
pandas/,19,------------------------------------------------------------------,
pandas/,78,------------------------------------------------------------------,
pandas/,79,Vector Fixtures,
pandas/,98,------------------------------------------------------------------,
pandas/,99,Scalar Fixtures,
pandas/,210,------------------------------------------------------------------,
pandas/,247,alias so we can use the same fixture for multiple parameters in a test,
pandas/,1,Arithmetic tests for DataFrame/Series/Index/Array classes that should,
pandas/,2,behave identically.,
pandas/,3,Specifically for object dtype,
pandas/,16,------------------------------------------------------------------,
pandas/,17,Comparisons,
pandas/,70,------------------------------------------------------------------,
pandas/,71,Arithmetic,
pandas/,76,TODO: parametrize,
pandas/,78,GH#22922,
pandas/,79,"pow is weird with masking & 1, so testing here",
pandas/,94,GH#22378,
pandas/,95,Check that scalars satisfying is_extension_array_dtype(obj),
pandas/,96,do not incorrectly try to dispatch to an ExtensionArray operation,
pandas/,152,invalid ops,
pandas/,165,TODO: Moved from tests.series.test_operators; needs cleanup,
pandas/,176,TODO: parametrize over box,
pandas/,179,note this test is _not_ aimed at timedelta64-dtyped Series,
pandas/,194,TODO: cleanup & parametrize over box,
pandas/,196,GH#13043,
pandas/,216,object series & object series,
pandas/,242,TODO: cleanup & parametrize over box,
pandas/,244,"GH#17067, GH#19723 __iadd__ and __isub__ should preserve index name",
pandas/,255,from bug report,
pandas/,264,doesn't fail test unless there is a check before `+=`,
pandas/,277,test add and radd,
pandas/,298,GH#19369,
pandas/,316,GH#19369,
pandas/,335,Simple index subclass that tracks ops calls.,
pandas/,368,https://github.com/pandas-dev/pandas/issues/31109,
pandas/,15,Check that we fall back to the vec_binop branch,
pandas/,32,"Ensure that cython doesn't raise on non-writeable arg, which",
pandas/,33,we can get from np.broadcast_to,
pandas/,1,Arithmetic tests for DataFrame/Series/Index/Array classes that should,
pandas/,2,behave identically.,
pandas/,3,Specifically for datetime64 and datetime64tz dtypes,
pandas/,38,------------------------------------------------------------------,
pandas/,39,Comparisons,
pandas/,43,Comparison tests for datetime64 vectors fully parametrized over,
pandas/,44,DataFrame/Series/DatetimeIndex/DatetimeArray.  Ideally all comparison,
pandas/,45,tests will eventually end up here.,
pandas/,48,Test comparison with zero-dimensional array is unboxed,
pandas/,71,"GH#19800, GH#19301 datetime.date comparison raises to",
pandas/,72,match DatetimeIndex/Timestamp.  This also matches the behavior,
pandas/,73,of stdlib datetime.datetime,
pandas/,75,GH#19301 None and NaN are *not* cast to NaT for comparisons,
pandas/,81,"GH#22074, GH#15966",
pandas/,104,We don't parametrize this over box_with_array because listlike,
pandas/,105,other plays poorly with assert_invalid_comparison reversed checks,
pandas/,135,"GH#22242, GH#22163 DataFrame considered NaT == ts incorrectly",
pandas/,143,FIXME: Can't transpose because that loses the tz dtype on,
pandas/,144,the NaT column,
pandas/,155,TODO: moved from tests.series.test_operators; needs cleanup,
pandas/,180,add lhs / rhs switched data,
pandas/,185,"Series, Index",
pandas/,206,GH#4968,
pandas/,207,invalid date/int comparisons,
pandas/,228,dont bother testing ndarray comparison methods as this fails,
pandas/,229,on older numpys (since they check object identity),
pandas/,271,see gh-4982,
pandas/,272,Make sure we can compare Timestamps on the right AND left hand side.,
pandas/,282,No NaT,
pandas/,287,NaT,
pandas/,292,Compare to Timestamp with series containing NaT,
pandas/,297,Compare to NaT with series containing NaT,
pandas/,303,GH#11034,
pandas/,336,TODO: moved from tests.indexes.test_base; parametrize and de-duplicate,
pandas/,362,no tzaware version available,
pandas/,389,dont bother testing ndarray comparison methods as this fails,
pandas/,390,on older numpys (since they check object identity),
pandas/,455,Check pd.NaT is handles as the same as np.nan,
pandas/,503,Check pd.NaT is handles as the same as np.nan,
pandas/,533,GH#18162,
pandas/,546,"FIXME: DataFrame case fails to raise for == and !=, wrong",
pandas/,547,message for inequalities,
pandas/,555,"FIXME: DataFrame case fails to raise for == and !=, wrong",
pandas/,556,message for inequalities,
pandas/,562,The aware==aware and naive==naive comparisons should *not* raise,
pandas/,580,GH#18162,
pandas/,587,Check comparisons against scalar Timestamps,
pandas/,600,GH#12601: Check comparison against Timestamps and DatetimeIndex,
pandas/,612,Bug in NumPy? https://github.com/numpy/numpy/issues/13841,
pandas/,613,"Raising in __eq__ will fallback to NumPy, which warns, fails,",
pandas/,614,then re-raises the original exception. So we just need to ignore.,
pandas/,635,GH#19276,
pandas/,636,tzaware DatetimeIndex should not raise when compared to NaT,
pandas/,648,GH#22074,
pandas/,649,"regardless of tz, we expect these comparisons are valid",
pandas/,695,GH#22074,
pandas/,696,reversion test that we _don't_ call _assert_tzawareness_compat,
pandas/,697,when comparing against TimedeltaIndex,
pandas/,718,GH#22074,
pandas/,730,tzawareness failure,
pandas/,742,------------------------------------------------------------------,
pandas/,743,Arithmetic,
pandas/,747,"This class is intended for ""finished"" tests that are fully parametrized",
pandas/,748,over DataFrame/Series/Index/DatetimeArray,
pandas/,750,-------------------------------------------------------------,
pandas/,751,Addition/Subtraction of timedelta-like,
pandas/,756,"GH#22005, GH#22163 check DataFrame doesn't raise TypeError",
pandas/,810,TODO: redundant with test_dt64arr_add_timedeltalike_scalar,
pandas/,812,scalar timedeltas/np.timedelta64 objects,
pandas/,813,operate with np.timedelta64 correctly,
pandas/,839,"GH#23320 special handling for timedelta64(""NaT"")",
pandas/,846,FIXME: fails with transpose=True due to tz-aware DataFrame,
pandas/,847,transpose bug,
pandas/,887,-----------------------------------------------------------------,
pandas/,888,Subtraction of datetime-like scalars,
pandas/,899,"GH#8554, GH#22163 DataFrame op should _not_ return dt64 dtype",
pandas/,910,"GH#7996, GH#22163 ensure non-nano datetime64 is converted to nano",
pandas/,911,for DataFrame operation,
pandas/,940,GH#18808,
pandas/,957,-------------------------------------------------------------,
pandas/,958,Subtraction of datetime-like array-like,
pandas/,999,-------------------------------------------------------------,
pandas/,1000,Addition of datetime-like others (invalid),
pandas/,1016,GH#22163 ensure DataFrame doesn't cast Timestamp to i8,
pandas/,1025,-------------------------------------------------------------,
pandas/,1026,Other Invalid Addition/Subtraction,
pandas/,1033,GH#13078 datetime +/- Period is invalid,
pandas/,1035,https://github.com/pandas-dev/pandas/issues/10329,
pandas/,1058,GH#20049 subtracting PeriodIndex should raise TypeError,
pandas/,1075,https://github.com/pandas-dev/pandas/issues/10329,
pandas/,1086,pandas.errors.PerformanceWarning: Non-vectorized DateOffset being,
pandas/,1087,applied to Series or DatetimeIndex,
pandas/,1088,"we aren't testing that here, so ignore.",
pandas/,1091,"If `x + y` raises, then `y + x` should raise here as well",
pandas/,1131,-------------------------------------------------------------,
pandas/,1132,Tick DateOffsets,
pandas/,1134,TODO: parametrize over timezone?,
pandas/,1136,GH#4532,
pandas/,1137,operate with pd.offsets,
pandas/,1153,GH#4532,
pandas/,1154,operate with pd.offsets,
pandas/,1176,GH#4532,
pandas/,1177,smoke tests for valid DateOffsets,
pandas/,1187,"GH#21610, GH#22163 ensure DataFrame doesn't return object-dtype",
pandas/,1204,TODO: parametrize over the scalar being added?  radd?  sub?,
pandas/,1212,-------------------------------------------------------------,
pandas/,1213,RelativeDelta DateOffsets,
pandas/,1216,GH#10699,
pandas/,1232,DateOffset relativedelta fastpath,
pandas/,1266,-------------------------------------------------------------,
pandas/,1267,"Non-Tick, Non-RelativeDelta DateOffsets",
pandas/,1269,TODO: redundant with test_dt64arr_add_sub_DateOffset?  that includes,
pandas/,1270,tz-aware cases which this does not,
pandas/,1322,GH#10699,
pandas/,1323,assert vectorized operation matches pointwise operations,
pandas/,1326,"If cls_name param is a tuple, then 2nd entry is kwargs for",
pandas/,1327,the offset constructor,
pandas/,1339,passing n = 0 is invalid for these offset classes,
pandas/,1360,pandas.errors.PerformanceWarning: Non-vectorized DateOffset being,
pandas/,1361,applied to Series or DatetimeIndex,
pandas/,1362,"we aren't testing that here, so ignore.",
pandas/,1383,GH#10699,
pandas/,1440,"TODO: __sub__, __rsub__",
pandas/,1442,GH#10699,
pandas/,1443,array of offsets,
pandas/,1456,same offset,
pandas/,1466,TODO: overlap with test_dt64arr_add_mixed_offset_array?,
pandas/,1468,GH#18849,
pandas/,1549,GH 26258,
pandas/,1562,TODO: box + de-duplicate,
pandas/,1565,GH#25317,
pandas/,1579,"GH#12534, fixed by GH#19024",
pandas/,1651,"GH#22492, GH#22508",
pandas/,1658,General tests,
pandas/,1673,Edge cases,
pandas/,1687,GH#13844,
pandas/,1699,## timedelta64,
pandas/,1703,## datetime64,
pandas/,1722,datetime64 with timetimedelta,
pandas/,1727,timetimedelta with datetime64,
pandas/,1738,-------------------------------------------------------------,
pandas/,1739,"TODO: This next block of tests came from tests.series.test_operators,",
pandas/,1740,needs to be de-duplicated and parametrized over `box` classes,
pandas/,1743,these are all TypeEror ops,
pandas/,1748,check that we are getting a TypeError,
pandas/,1749,with 'operate' (from core/ops.py) for the ops that are not,
pandas/,1750,defined,
pandas/,1752,"Previously, _validate_for_numeric_binop in core/indexes/base.py",
pandas/,1753,did this for us.,
pandas/,1759,## timedelta64,
pandas/,1763,## datetime64,
pandas/,1774,## datetime64 with timetimedelta,
pandas/,1775,TODO(jreback) __rsub__ should raise?,
pandas/,1779,"8260, 10763",
pandas/,1780,datetime64 with tz,
pandas/,1793,GH#12290,
pandas/,1804,GH#19071 subtracting tzaware DatetimeIndex from tzaware Series,
pandas/,1805,"(with same tz) raises, fixed by #19024",
pandas/,1816,see GH#14088,
pandas/,1824,GH#4532,
pandas/,1825,operate with pd.offsets,
pandas/,1843,GH#11349,
pandas/,1848,subtraction,
pandas/,1860,addition,
pandas/,1875,-------------------------------------------------------------,
pandas/,1876,Invalid Operations,
pandas/,1877,TODO: this block also needs to be de-duplicated and parametrized,
pandas/,1889,multiplication,
pandas/,1896,division,
pandas/,1902,TODO: parametrize over box,
pandas/,1906,GH#19123,
pandas/,1928,-------------------------------------------------------------,
pandas/,1929,Timezone-Centric Tests,
pandas/,1949,odd numpy behavior with scalar timedeltas,
pandas/,1995,-------------------------------------------------------------,
pandas/,1996,Binary operations DatetimeIndex and int,
pandas/,1999,Variants of `one` for #19012,
pandas/,2013,-------------------------------------------------------------,
pandas/,2014,__add__/__sub__ with integer arrays,
pandas/,2019,GH#19959,
pandas/,2029,GH#19959,
pandas/,2038,GH#19959,
pandas/,2046,-------------------------------------------------------------,
pandas/,2047,Binary operations DatetimeIndex and TimedeltaIndex/array,
pandas/,2050,GH#17558,
pandas/,2056,add with TimdeltaIndex,
pandas/,2063,add with timedelta64 array,
pandas/,2071,GH#17558,
pandas/,2077,iadd with TimdeltaIndex,
pandas/,2086,iadd with timedelta64 array,
pandas/,2096,GH#17558,
pandas/,2102,sub with TimedeltaIndex,
pandas/,2110,sub with timedelta64 array,
pandas/,2119,GH#17558,
pandas/,2125,isub with TimedeltaIndex,
pandas/,2134,isub with timedelta64 array,
pandas/,2149,-------------------------------------------------------------,
pandas/,2150,Binary Operations DatetimeIndex and datetime-like,
pandas/,2151,TODO: A couple other tests belong in this section.  Move them in,
pandas/,2152,A PR where there isn't already a giant diff.,
pandas/,2167,GH#9631,
pandas/,2177,-------------------------------------------------------------,
pandas/,2180,Check that DatetimeArray defers to Index classes,
pandas/,2197,"previously performed setop (deprecated in 0.16.0), now changed to",
pandas/,2198,return subtraction -> TimeDeltaIndex (GH ...),
pandas/,2220,isub,
pandas/,2224,different length raises ValueError,
pandas/,2231,NaN propagation,
pandas/,2238,-------------------------------------------------------------------,
pandas/,2239,"TODO: Most of this block is moved from series or frame tests, needs",
pandas/,2240,"cleanup, box-parametrization, and de-duplication",
pandas/,2256,see casting notes in NumPy gh-12927,
pandas/,2268,GH#11349,
pandas/,2276,subtraction,
pandas/,2288,"without a Series wrapping the NaT, it is ambiguous",
pandas/,2289,whether it is a datetime64 or timedelta64,
pandas/,2290,defaults to interpreting it as timedelta64,
pandas/,2308,addition,
pandas/,2376,GH#13905,
pandas/,2383,passing name arg isn't enough when names[2] is None,
pandas/,2404,"GH#18849, GH#19744",
pandas/,2470,block-wise DataFrame operations will require operating on 2D,
pandas/,2471,"DatetimeArray/TimedeltaArray, so check that specifically.",
pandas/,2488,Case where we expect to get a TimedeltaArray back,
pandas/,1,Arithmetic tests for DataFrame/Series/Index/Array classes that should,
pandas/,2,behave identically.,
pandas/,41,------------------------------------------------------------------,
pandas/,42,Timedelta64[ns] dtype Comparisons,
pandas/,46,Comparison tests for timedelta64[ns] vectors fully parametrized over,
pandas/,47,DataFrame/Series/TimedeltaIndex/TimedeltaArray.  Ideally all comparison,
pandas/,48,tests will eventually end up here.,
pandas/,51,GH#26689 should unbox when comparing with zerodim array,
pandas/,66,zero-dim of wrong dtype should still raise,
pandas/,74,regression test for GH#5963,
pandas/,86,GH#13624 for str,
pandas/,109,We don't parametrize this over box_with_array because listlike,
pandas/,110,other plays poorly with assert_invalid_comparison reversed checks,
pandas/,138,TODO: All of these need to be parametrized over box,
pandas/,198,Check pd.NaT is handles as the same as np.nan,
pandas/,225,TODO: better name,
pandas/,238,------------------------------------------------------------------,
pandas/,239,Timedelta64[ns] dtype Arithmetic Operations,
pandas/,243,Tests moved from type-specific test files but not,
pandas/,244,yet sorted/parametrized/de-duplicated,
pandas/,247,normal ops are also tested in tseries/test_timedeltas.py,
pandas/,279,with datetimes/timedelta and tdi/dti,
pandas/,325,check that dt/dti subtraction ops with tz are validated,
pandas/,339,scalars,
pandas/,352,tz mismatches,
pandas/,375,with dti,
pandas/,408,These are normally union/diff set-like ops,
pandas/,412,TODO(wesm): unused?,
pandas/,413,td = Timedelta('1 days'),
pandas/,414,dt = Timestamp('20130101'),
pandas/,424,name will be reset,
pandas/,429,with datetimes/timedelta and tdi/dti,
pandas/,451,unequal length,
pandas/,458,random indexes,
pandas/,463,this is a union!,
pandas/,464,"pytest.raises(TypeError, lambda : Int64Index([1,2,3]) + tdi)",
pandas/,466,name will be reset,
pandas/,470,name will be reset,
pandas/,482,"TODO: Needs more informative name, probably split up into",
pandas/,483,more targeted tests,
pandas/,497,freq == 'B',
pandas/,506,"GH#4134, buggy with timedeltas",
pandas/,517,Check that TimedeltaArray defers to Index on arithmetic ops,
pandas/,536,Result should be cast back to DatetimeArray,
pandas/,549,-------------------------------------------------------------,
pandas/,550,Binary operations TimedeltaIndex and timedelta-like,
pandas/,553,only test adding/sub offsets as + is now numeric,
pandas/,564,Check that operation is actually inplace,
pandas/,568,only test adding/sub offsets as - is now numeric,
pandas/,579,Check that operation is actually inplace,
pandas/,582,-------------------------------------------------------------,
pandas/,623,TODO: parametrize over boxes,
pandas/,626,GH#17991 checking for overflow-masking with NaT,
pandas/,650,See GH#14068,
pandas/,651,preliminary test scalar analogue of vectorized tests below,
pandas/,652,TODO: Make raised error message more informative and test,
pandas/,674,These should not overflow!,
pandas/,691,"Tests for timedelta64[ns] __add__, __sub__, __radd__, __rsub__",
pandas/,693,TODO: moved from tests.indexes.timedeltas.test_arithmetic; needs,
pandas/,694,parametrization+de-duplication,
pandas/,696,setup,
pandas/,702,Passing datetime64-dtype data to TimedeltaIndex is no longer,
pandas/,703,supported GH#29794,
pandas/,711,Passing datetime64-dtype data to TimedeltaIndex is no longer,
pandas/,712,supported GH#29794,
pandas/,794,"NaT is datetime, not timedelta",
pandas/,799,"TODO: moved from tests.series.test_operators, needs splitting, cleanup,",
pandas/,800,"de-duplication, box-parametrization...",
pandas/,802,series ops,
pandas/,814,series on the rhs,
pandas/,821,scalar Timestamp on rhs,
pandas/,828,timestamp on lhs,
pandas/,834,datetimes on rhs,
pandas/,844,roundtrip,
pandas/,848,timedeltas on rhs,
pandas/,855,roundtrip,
pandas/,862,inplace,
pandas/,868,GH 11349,
pandas/,873,subtraction,
pandas/,884,addition,
pandas/,927,multiplication,
pandas/,944,division,
pandas/,949,-------------------------------------------------------------,
pandas/,950,Binary operations td64 arraylike and datetime-like,
pandas/,965,GH#23215,
pandas/,967,TODO: parametrize over scalar datetime types?,
pandas/,992,"GH#11925, GH#29558",
pandas/,1025,TimedeltaIndex.__rsub__,
pandas/,1044,GH#23215,
pandas/,1056,------------------------------------------------------------------,
pandas/,1057,Invalid __add__/__sub__ operations,
pandas/,1062,GH#20049 subtracting PeriodIndex should raise TypeError,
pandas/,1067,TODO: parametrize over box for pi?,
pandas/,1073,FIXME: don't leave commented-out,
pandas/,1074,FIXME: this raises with period scalar but not with PeriodIndex?,
pandas/,1075,with pytest.raises(TypeError):,
pandas/,1076,pi - tdi,
pandas/,1078,GH#13078 subtraction of Period scalar not supported,
pandas/,1087,GH#12624 for str case,
pandas/,1089,GH#19123,
pandas/,1096,vector-like others are tested in test_td64arr_add_sub_numeric_arr_invalid,
pandas/,1122,"Variants of `one` for #19012, deprecated GH#22535",
pandas/,1129,TOOD: get inplace ops into assert_invalid_addsub_type,
pandas/,1136,"GH#19959, deprecated GH#22535",
pandas/,1137,"GH#22696 for DataFrame case, check that we don't dispatch to numpy",
pandas/,1138,"implementation, which treats int64 as m8[ns]",
pandas/,1148,GH#19959,
pandas/,1156,------------------------------------------------------------------,
pandas/,1157,Operations with timedelta-like others,
pandas/,1198,GH#17250 make sure result dtype is correct,
pandas/,1199,GH#19043 make sure names are propagated correctly,
pandas/,1237,"GH#23320 special handling for timedelta64(""NaT"")",
pandas/,1256,GH#18808,
pandas/,1268,only test adding/sub offsets as + is now numeric,
pandas/,1269,GH#10699 for Tick cases,
pandas/,1283,only test adding/sub offsets as - is now numeric,
pandas/,1284,GH#10699 for Tick cases,
pandas/,1298,------------------------------------------------------------------,
pandas/,1299,__add__/__sub__ with DateOffsets and arrays of DateOffsets,
pandas/,1305,"GH#18849, GH#19744",
pandas/,1321,The DataFrame operation is transposed and so operates as separate,
pandas/,1322,"scalar operations, which do not issue a PerformanceWarning",
pandas/,1332,TODO: combine with test_td64arr_add_offset_index by parametrizing,
pandas/,1333,over second box?,
pandas/,1335,GH#18849,
pandas/,1347,The DataFrame operation is transposed and so operates as separate,
pandas/,1348,"scalar operations, which do not issue a PerformanceWarning",
pandas/,1362,"GH#18824, GH#19744",
pandas/,1383,The DataFrame operation is transposed and so operates as separate,
pandas/,1384,"scalar operations, which do not issue a PerformanceWarning",
pandas/,1391,GH#18824,
pandas/,1402,The DataFrame operation is transposed and so operates as separate,
pandas/,1403,"scalar operations, which do not issue a PerformanceWarning",
pandas/,1413,GH#18849,
pandas/,1433,TODO: separate/parametrize add/sub test?,
pandas/,1443,GH#18824,
pandas/,1449,addition/subtraction ops with anchored offsets should issue,
pandas/,1450,a PerformanceWarning and _then_ raise a TypeError.,
pandas/,1465,------------------------------------------------------------------,
pandas/,1466,Unsorted,
pandas/,1502,Tests for timedelta64[ns],
pandas/,1503,"__mul__, __rmul__, __div__, __rdiv__, __floordiv__, __rfloordiv__",
pandas/,1505,------------------------------------------------------------------,
pandas/,1506,Multiplication,
pandas/,1507,"organized with scalar others first, then array-like",
pandas/,1575,TODO: Put Series/DataFrame in others?,
pandas/,1603,------------------------------------------------------------------,
pandas/,1604,"__div__, __rdiv__",
pandas/,1607,don't allow division by NaT (maybe could in the future),
pandas/,1617,GH#23829,
pandas/,1640,GH#23829,
pandas/,1644,"GH#20088, GH#22163 ensure DataFrame returns correct dtype",
pandas/,1669,op,
pandas/,1675,reverse op,
pandas/,1696,GH#22631,
pandas/,1716,reversed op,
pandas/,1737,"one shorter, one longer",
pandas/,1744,------------------------------------------------------------------,
pandas/,1745,"__floordiv__, __rfloordiv__",
pandas/,1748,GH#18831,
pandas/,1761,GH#18831,
pandas/,1774,GH#18831,
pandas/,1783,"We can test __rfloordiv__ using this syntax,",
pandas/,1784,see `test_timedelta_rfloordiv`,
pandas/,1808,TODO: Is this redundant with test_td64arr_floordiv_tdlike_scalar?,
pandas/,1819,GH#19125,
pandas/,1835,------------------------------------------------------------------,
pandas/,1836,"mod, divmod",
pandas/,1837,"TODO: operations with timedelta-like arrays, numeric arrays,",
pandas/,1838,reversed ops,
pandas/,1896,------------------------------------------------------------------,
pandas/,1897,Operations with invalid others,
pandas/,1905,check that we are getting a TypeError,
pandas/,1906,with 'operate' (from core/ops.py) for the ops that are not,
pandas/,1907,defined,
pandas/,1934,------------------------------------------------------------------,
pandas/,1935,Operations with numeric others,
pandas/,1938,GH#4521,
pandas/,1939,divide/multiply by integers,
pandas/,1961,GH#4521,
pandas/,1962,divide/multiply by integers,
pandas/,1981,GH#4521,
pandas/,1982,divide/multiply by integers,
pandas/,2005,GH#4521,
pandas/,2006,divide/multiply by integers,
pandas/,2031,"Index.__rdiv__ won't try to operate elementwise, just raises",
pandas/,2052,GH#19042 test for correct name attachment,
pandas/,2053,"broadcasts along wrong axis, but doesn't raise",
pandas/,2059,TODO: Should we be parametrizing over types for `ser` too?,
pandas/,2075,The direct operation tdi * ser still needs to be fixed.,
pandas/,2079,TODO: Should we be parametrizing over types for `ser` too?,
pandas/,2089,GH#19042 test for correct name attachment,
pandas/,2090,TODO: the direct operation TimedeltaIndex / Series still,
pandas/,2091,needs to be fixed.,
pandas/,2114,TODO: Should we skip this case sooner or test something else?,
pandas/,2121,Arithmetic tests for timedelta64[ns] vectors fully parametrized over,
pandas/,2122,DataFrame/Series/TimedeltaIndex/TimedeltaArray.  Ideally all arithmetic,
pandas/,2123,tests will eventually end up here.,
pandas/,2131,check that we are getting a TypeError,
pandas/,2132,with 'operate' (from core/ops.py) for the ops that are not,
pandas/,2133,defined,
pandas/,1,Arithmetic tests for DataFrame/Series/Index/Array classes that should,
pandas/,2,behave identically.,
pandas/,3,Specifically for numeric dtypes,
pandas/,25,All entries in the `zero` fixture should be either,
pandas/,26,all-negative or no-negative.,
pandas/,34,TODO: remove this kludge once mypy stops giving false positives here,
pandas/,35,List comprehension has incompatible type List[PandasObject]; expected List[RangeIndex],
pandas/,36,See GH#29725,
pandas/,47,------------------------------------------------------------------,
pandas/,48,Comparisons,
pandas/,53,GH#13006,
pandas/,65,"GH#8932, GH#22163",
pandas/,83,GH#8058,
pandas/,84,ops testing,
pandas/,91,------------------------------------------------------------------,
pandas/,92,Numeric dtypes Arithmetic with Datetime/Timedelta Scalar,
pandas/,97,TODO: also check name retentention,
pandas/,103,GH#22390,
pandas/,117,TODO: also check name retentention,
pandas/,123,GH#22390,
pandas/,144,TODO: de-duplicate with test_numeric_arr_mul_tdscalar,
pandas/,146,regression test for G#H8813,
pandas/,153,TODO: also test non-nanosecond timedelta64 and Tick objects;,
pandas/,154,see test_numeric_arr_rdiv_tdscalar for note on these failing,
pandas/,165,GH#19333,
pandas/,257,GH#28080 numeric+datetime64 should raise; Timestamp raises,
pandas/,258,NullFrequencyError instead of TypeError so is excluded.,
pandas/,276,------------------------------------------------------------------,
pandas/,277,Arithmetic,
pandas/,285,"We only adjust for Index, because Series does not yet apply",
pandas/,286,the adjustment correctly.,
pandas/,298,"We only adjust for Index, because Series does not yet apply",
pandas/,299,the adjustment correctly.,
pandas/,329,"Check that -1 / -0.0 returns np.inf, not -np.inf",
pandas/,342,------------------------------------------------------------------,
pandas/,346,"no longer do integer div for any ops, but deal with the 0's",
pandas/,366,GH#26987,
pandas/,371,"GH#27321 pandas convention is to set 1 // 0 to np.inf, as opposed",
pandas/,372,to numpy which sets to np.nan; patch `expected[0]` below,
pandas/,382,rdivmod case,
pandas/,397,rdivmod case,
pandas/,403,GH#8674,
pandas/,418,"GH#9144, inf signing",
pandas/,426,GH#9144,
pandas/,434,GH#9144,
pandas/,442,"integer div, but deal with the 0's (GH#9144)",
pandas/,452,"integer div, but deal with the 0's (GH#9144)",
pandas/,465,"integer div, but deal with the 0's (GH#9144)",
pandas/,473,numpy has a slightly different (wrong) treatment,
pandas/,480,"integer div, but deal with the 0's (GH#9144)",
pandas/,487,------------------------------------------------------------------,
pandas/,488,Mod By Zero,
pandas/,491,"GH#3590, modulo as ints",
pandas/,494,"this is technically wrong, as the integer portion is coerced to float",
pandas/,495,,
pandas/,503,"GH#3590, modulo as ints",
pandas/,506,"this is technically wrong, as the integer portion is coerced to float",
pandas/,507,,
pandas/,512,numpy has a slightly different (wrong) treatment,
pandas/,520,"GH#3590, modulo as ints",
pandas/,527,numpy has a slightly different (wrong) treatment,
pandas/,534,"GH#3590, modulo as ints",
pandas/,535,not commutative with series,
pandas/,544,"__mul__, __rmul__, __div__, __rdiv__, __floordiv__, __rfloordiv__",
pandas/,545,for non-timestamp/timedelta/period dtypes,
pandas/,562,resolves issue GH#9787,
pandas/,577,Test Series.div as well as Series.__div__,
pandas/,578,float/integer issue,
pandas/,579,GH#7785,
pandas/,636,in general not true for RangeIndex,
pandas/,658,"test power calculations both ways, GH#14973",
pandas/,670,GH#9244,
pandas/,730,"TODO: This came from series.test.test_operators, needs cleanup",
pandas/,732,rpow does not work with DataFrame,
pandas/,743,"TODO: this came from tests.series.test_analytics, needs cleanup and",
pandas/,744,de-duplication with test_modulo above,
pandas/,748,"GH#3590, modulo as ints",
pandas/,770,GH#9144,
pandas/,784,"__add__, __sub__, __radd__, __rsub__, __iadd__, __isub__",
pandas/,785,for non-timestamp/timedelta/period dtypes,
pandas/,787,"TODO: This came from series.test.test_operators, needs cleanup",
pandas/,789,GH#1134,
pandas/,801,different length,
pandas/,813,"TODO: This came from series.test.test_operators, needs cleanup",
pandas/,815,GH#353,
pandas/,829,really raise this time,
pandas/,838,"TODO: This came from series.test.test_operators, needs cleanup",
pandas/,840,arithmetic integer ops with an index,
pandas/,846,GH#4629,
pandas/,847,arithmetic datetime64 ops with an index,
pandas/,858,GH#18850,
pandas/,869,"TODO: taken from tests.frame.test_operators, needs cleanup",
pandas/,903,Test for issue #10181,
pandas/,914,TODO: taken from tests.series.test_operators; needs cleanup,
pandas/,955,TODO: taken from tests.series.test_operators; needs cleanup,
pandas/,960,"if the lengths don't match, this is the test where we use",
pandas/,961,`tser[::2]`. Pad every other value in `other_np` with nan.,
pandas/,973,"check the values, name, and index separately",
pandas/,985,"Check that divmod uses pandas convention for division by zero,",
pandas/,986,which does not match numpy.,
pandas/,987,pandas convention has,
pandas/,988,1/0 == np.inf,
pandas/,989,-1/0 == -np.inf,
pandas/,990,1/-0.0 == -np.inf,
pandas/,991,-1/-0.0 == np.inf,
pandas/,1037,_evaluate_numeric_binop,
pandas/,1084,Tests that arithmetic operations match operations executed elementwise,
pandas/,1116,TODO: moved from tests.series.test_operators; needs cleanup,
pandas/,1122,GH#56,
pandas/,1131,Tests in this class have been moved from type-specific test modules,
pandas/,1132,"but not yet sorted, parametrized, and de-duplicated",
pandas/,1164,numpy does not allow powers of negative integers so test separately,
pandas/,1165,https://github.com/numpy/numpy/pull/8127,
pandas/,1171,"TODO: mod, divmod?",
pandas/,1184,check that we return NotImplemented when operating with Series,
pandas/,1185,or DataFrame,
pandas/,1199,validate that we are handling the RangeIndex overrides to numeric ops,
pandas/,1200,and returning RangeIndex where possible,
pandas/,1228,__mul__,
pandas/,1233,__pow__,
pandas/,1239,__floordiv__,
pandas/,1260,GH#8142,
pandas/,1267,this subtraction used to fail,
pandas/,1278,GH #27464 make sure we mask 0/1 with Inf and not NaN,
pandas/,1292,GH#26793,
pandas/,54,Not for tznaive-tzaware comparison,
pandas/,56,Note: not quite the same as how we do this for tm.box_expected,
pandas/,100,datetime with tz,
pandas/,113,FIXME: doesn't support num_rows != 10,
pandas/,291,test trying to create block manager with overlapping ref locs,
pandas/,309,GH2431,
pandas/,313,reset to False on load,
pandas/,376,view assertion,
pandas/,381,DatetimeTZBlock has DatetimeIndex values,
pandas/,387,copy assertion we either have a None for a base or in case of,
pandas/,388,"some blocks it is an array (e.g. datetimetz), but was copied",
pandas/,397,what to test here?,
pandas/,405,TODO: what to test here?,
pandas/,439,coerce all,
pandas/,448,mixed,
pandas/,472,compare non-numeric,
pandas/,489,noops,
pandas/,494,convert,
pandas/,531,self,
pandas/,562,will be converted according the actual dtype of the underlying,
pandas/,570,combinations,
pandas/,605,we have datetime/tz blocks in mgr,
pandas/,616,"mgr is not consolidated, f8 & f8-2 blocks",
pandas/,651,Check sharing,
pandas/,685,Check sharing,
pandas/,699,unique items,
pandas/,707,basic case,
pandas/,708,many types,
pandas/,709,more types,
pandas/,710,categories,
pandas/,711,sparse,
pandas/,715,GH 9330,
pandas/,740,Nosetests-style data-driven tests.,
pandas/,741,,
pandas/,742,This test applies different indexing routines to block managers and,
pandas/,743,compares the outcome to the result of same operations on np.ndarray.,
pandas/,744,,
pandas/,745,NOTE: sparse (SparseBlock with fill_value != np.nan) fail a lot of tests,
pandas/,746,and are disabled.,
pandas/,751,2-dim,
pandas/,763,we maybe using an ndarray to test slicing and,
pandas/,764,might not be the full length of the axis,
pandas/,780,slice,
pandas/,787,boolean mask,
pandas/,796,fancy indexer,
pandas/,815,take/fancy indexer,
pandas/,936,"These are ""unbounded"" because negative index will",
pandas/,937,change depending on container shape.,
pandas/,1077,We will check that block._can_hold_element iff arr.__setitem__ works,
pandas/,1080,coerce None,
pandas/,1085,coerce different types of datetime objects,
pandas/,1166,"FIXME: Since dispatching to Series, this test no longer",
pandas/,1167,asserts anything meaningful,
pandas/,1179,matching dtype,
pandas/,1183,different dtype,
pandas/,1186,ndarray instead of Categorical,
pandas/,1223,https://github.com/pandas-dev/pandas/pull/24866,
pandas/,1226,"PandasArray, no dtype",
pandas/,1231,"PandasArray, PandasDtype",
pandas/,1236,"ndarray, PandasDtype",
pandas/,1243,see GH28839,
pandas/,1252,should not raise UnicodeEncodeError,
pandas/,1256,GH#8850,
pandas/,1284,GH#33092,
pandas/,41,"weekday is a property of DTI, but a method",
pandas/,42,on NaT/Timestamp for compat with datetime,
pandas/,65,"weekday is a property of DTI, but a method",
pandas/,66,on NaT/Timestamp for compat with datetime,
pandas/,77,"weekday is a property of DTI, but a method",
pandas/,78,on NaT/Timestamp for compat with datetime,
pandas/,111,see gh-14940,
pandas/,151,"see gh-9513, gh-17329",
pandas/,160,"see gh-9513, gh-17329",
pandas/,168,"see gh-8254, gh-9513, gh-17329",
pandas/,176,see gh-12300,
pandas/,199,see gh-17327,
pandas/,200,,
pandas/,201,NaT should have *most* of the Timestamp and Timedelta methods.,
pandas/,202,"Here, we check which public methods NaT does not have. We",
pandas/,203,ignore any missing private methods.,
pandas/,237,Timestamp takes precedence over Timedelta in terms of overlap.,
pandas/,299,see gh-17327,
pandas/,300,,
pandas/,301,NaT should have *most* of the Timestamp and Timedelta methods.,
pandas/,302,"In case when Timestamp, Timedelta, and NaT are overlap, the overlap",
pandas/,303,"is considered to be with Timestamp and NaT, not Timedelta.",
pandas/,305,"""fromisoformat"" was introduced in 3.7",
pandas/,309,"""fromisocalendar"" was introduced in 3.8",
pandas/,324,see gh-17327,
pandas/,325,,
pandas/,326,The docstrings for overlapping methods should match.,
pandas/,364,see gh-6873,
pandas/,394,un-specific check here because the message comes from str,
pandas/,395,and varies by method,
pandas/,423,see gh-#18846,
pandas/,424,,
pandas/,425,See also test_timedelta.TestTimedeltaArithmetic.test_floordiv,
pandas/,445,see gh-11718,
pandas/,468,see gh-19124,
pandas/,497,see gh-17327,
pandas/,502,GH 24653: alias .to_numpy() for scalars,
pandas/,511,GH 26039,
pandas/,51,avoid special case,
pandas/,97,this assertion isn't possible for ndarray.,
pandas/,114,this assertion isn't possible with asarray=True,
pandas/,238,"all NA, multiple inputs",
pandas/,247,"binary in, binary out.",
pandas/,264,GH 30013,
pandas/,272,GH 30013,
pandas/,281,https://github.com/pandas-dev/pandas/issues/31847,
pandas/,20,--------------------------------------------------------------,
pandas/,21,Timestamp.round,
pandas/,51,round,
pandas/,58,GH#14440 & GH#15578,
pandas/,131,Ensure timestamps that shouldn't round dont!,
pandas/,132,GH#21262,
pandas/,154,"GH 18946 round near ""fall back"" DST",
pandas/,156,,
pandas/,182,"GH 23324 round near ""spring forward"" DST",
pandas/,230,check that all rounding modes are accurate to int64 precision,
pandas/,231,see GH#22591,
pandas/,235,test floor,
pandas/,240,test ceil,
pandas/,245,test round,
pandas/,250,round half to even,
pandas/,253,--------------------------------------------------------------,
pandas/,254,Timestamp.replace,
pandas/,257,"GH#14621, GH#7825",
pandas/,265,"GH#14621, GH#7825",
pandas/,266,replacing datetime components with and w/o presence of a timezone,
pandas/,274,"GH#14621, GH#7825",
pandas/,282,"GH#14621, GH#7825",
pandas/,283,replacing datetime components with and w/o presence of a timezone,
pandas/,284,test all,
pandas/,301,"GH#14621, GH#7825",
pandas/,309,"GH#14621, GH#7825",
pandas/,316,"GH#14621, GH#7825",
pandas/,317,assert conversion to naive is the same as replacing tzinfo with None,
pandas/,323,GH#15683,
pandas/,330,datetime.timestamp() converts in the local timezone,
pandas/,340,datetime.timestamp() converts in the local timezone,
pandas/,355,GH#18319 check that 1) timezone is correctly normalized and,
pandas/,356,2) that hour is not incorrectly changed by this normalization,
pandas/,360,Preliminary sanity-check,
pandas/,363,Replace across DST boundary,
pandas/,366,Check that `replace` preserves hour literal,
pandas/,369,Check that post-replace object is appropriately normalized,
pandas/,374,Gh 7825,
pandas/,383,GH 25017,
pandas/,392,--------------------------------------------------------------,
pandas/,393,Timestamp.normalize,
pandas/,403,--------------------------------------------------------------,
pandas/,407,GH#17329,
pandas/,408,tz-naive --> treat it as if it were UTC for purposes of timestamp(),
pandas/,416,utsc is a different representation of the same time,
pandas/,419,datetime.timestamp() converts in the local timezone,
pandas/,421,should agree with datetime.timestamp method,
pandas/,64,GH#15183,
pandas/,74,2D case,
pandas/,81,tzaware mismatch,
pandas/,88,5-18-2012 00:00:00.000,
pandas/,118,GH#8058,
pandas/,137,see GH#1404,
pandas/,172,case where ndim == 0,
pandas/,192,e.g. datetime.min,
pandas/,207,GH#26916,
pandas/,220,Comparisons with unsupported objects should return NotImplemented,
pandas/,221,"(it previously raised TypeError, see #24011)",
pandas/,29,not a weekday,
pandas/,30,not a weekday,
pandas/,31,Control case: non-business is month/qtr start,
pandas/,38,not a weekday,
pandas/,39,not a weekday,
pandas/,40,Control case: non-business is month/qtr start,
pandas/,46,that we are int like,
pandas/,50,GH 10050,
pandas/,70,GH 13303,
pandas/,98,GH 12806,
pandas/,107,GH 17354,
pandas/,108,"Test .day_name(), .month_name",
pandas/,120,Work around https://github.com/pandas-dev/pandas/issues/22342,
pandas/,121,different normalizations,
pandas/,131,Test NaT,
pandas/,138,GH 13727,
pandas/,153,make sure weeks at year boundaries are correct,
pandas/,156,ISO standard,
pandas/,161,ISO standard,
pandas/,166,ISO standard,
pandas/,171,ISO standard,
pandas/,176,ISO standard,
pandas/,188,"GH#21336, GH#21365",
pandas/,192,"Check that the attribute is available on the class, mirroring",
pandas/,193,the stdlib datetime behavior,
pandas/,208,preserves nanosecond,
pandas/,293,GH 14415,
pandas/,347,test value to string and back conversions,
pandas/,348,further test accessors,
pandas/,378,GH25241,
pandas/,388,GH 7878,
pandas/,406,GH 10041,
pandas/,412,GH 7610,
pandas/,470,GH#9255,
pandas/,487,Warn the user of data loss (nanoseconds).,
pandas/,519,Ensure that converting to datetime and back only loses precision,
pandas/,520,by going from nanoseconds to microseconds.,
pandas/,536,GH#21333 make sure a warning is issued when timezone,
pandas/,537,info is lost,
pandas/,540,warning that timezone info will be lost,
pandas/,544,GH 24653: alias .to_numpy() for scalars,
pandas/,561,GH#25851,
pandas/,562,ensure that subclassed datetime works for,
pandas/,563,Timedelta operations,
pandas/,23,confirm base representation is correct,
pandas/,58,only with timestring,
pandas/,61,re-creation shouldn't affect to internal value,
pandas/,65,with timezone,
pandas/,71,should preserve tz,
pandas/,75,should convert to UTC,
pandas/,84,GH 7833,
pandas/,89,confirm base representation is correct,
pandas/,112,only with timestring,
pandas/,115,re-creation shouldn't affect to internal value,
pandas/,119,with timezone,
pandas/,125,should preserve tz,
pandas/,129,should convert to UTC,
pandas/,134,This should be 2013-11-01 05:00 in UTC,
pandas/,135,converted to Chicago tz,
pandas/,138,noqa,
pandas/,142,This should be 2013-11-01 05:00 in UTC,
pandas/,143,converted to Tokyo tz (+09:00),
pandas/,150,GH11708,
pandas/,151,This should be 2015-11-18 10:00 in UTC,
pandas/,152,converted to Asia/Katmandu,
pandas/,159,This should be 2015-11-18 10:00 in UTC,
pandas/,160,converted to Asia/Kolkata,
pandas/,176,GH#17690,
pandas/,187,GH#5168,
pandas/,188,"case where user tries to pass tz as an arg, not kwarg, gets",
pandas/,189,interpreted as a `freq`,
pandas/,193,GH25016,
pandas/,194,Test support for Timestamp.strptime,
pandas/,202,"GH#17943, GH#17690, GH#5168",
pandas/,214,see gh-10758,
pandas/,231,see gh-11630,
pandas/,238,GH 10758,
pandas/,283,GH#3042,
pandas/,288,with a tzinfo,
pandas/,324,GH 18898,
pandas/,331,GH 8910,
pandas/,356,"GH#26651 check that we raise OutOfBoundsDatetime, not OverflowError",
pandas/,367,"By definition we can't go out of bounds in [ns], so we",
pandas/,368,convert the datetime64s to [us] so we can go out of bounds,
pandas/,372,No error for the min/max datetimes,
pandas/,377,One us less than the minimum is an error,
pandas/,381,One us more than the maximum is an error,
pandas/,393,GH#19529,
pandas/,394,GH#19382 close enough to bounds that dropping nanos would result,
pandas/,395,in an in-bounds datetime,
pandas/,420,Ensure that Timestamp.min is a valid Timestamp,
pandas/,424,Ensure that Timestamp.max is a valid Timestamp,
pandas/,428,GH#9000,
pandas/,436,Check that the delta between the times is less than 1s (arbitrarily,
pandas/,437,small),
pandas/,458,Check that the delta between the times is less than 1s (arbitrarily,
pandas/,459,small),
pandas/,474,GH 3746,
pandas/,482,GH 20854,
pandas/,491,GH 12064,
pandas/,497,GH 22311,
pandas/,503,GH 22311,
pandas/,510,GH 23579,
pandas/,525,GH 25851,
pandas/,526,ensure that subclassed datetime works for,
pandas/,527,Timestamp creation,
pandas/,541,GH 30395,
pandas/,551,GH 24329,
pandas/,552,Make sure that calling Timestamp constructor,
pandas/,553,on Timestamp created from ambiguous time,
pandas/,554,doesn't change Timestamp.value,
pandas/,563,GH 31043,
pandas/,564,Make sure that calling Timestamp constructor,
pandas/,565,on time just before DST switch doesn't lead to,
pandas/,566,nonexistent time or value change,
pandas/,575,Test for #30543,
pandas/,583,GH 31200,
pandas/,585,The exact error message of datetime() depends on its version,
pandas/,20,--------------------------------------------------------------,
pandas/,21,Timestamp.tz_localize,
pandas/,25,GH#12677,
pandas/,26,tz_localize that pushes away from the boundary is OK,
pandas/,29,tz_convert doesn't change value,
pandas/,33,tz_localize that pushes away from the boundary is OK,
pandas/,36,tz_convert doesn't change value,
pandas/,41,make sure that we are correctly accepting bool values as ambiguous,
pandas/,42,GH#14402,
pandas/,67,GH#8025,
pandas/,86,GH#13057,
pandas/,90,GH 22644,
pandas/,96,GH#13057,
pandas/,103,GH 22644,
pandas/,137,validate that pytz and dateutil are compat for dst,
pandas/,138,when the transition happens,
pandas/,148,fixed ambiguous behavior,
pandas/,149,see gh-14621,
pandas/,154,1 hour difference,
pandas/,160,see gh-14621,
pandas/,231,"GH 8917, 24466",
pandas/,243,"GH 8917, 24466",
pandas/,252,GH 8917,
pandas/,259,GH 8917,
pandas/,271,------------------------------------------------------------------,
pandas/,272,Timestamp.tz_convert,
pandas/,296,"astimezone is an alias for tz_convert, so keep it with",
pandas/,297,the tz_convert tests,
pandas/,307,from system utc to real utc,
pandas/,309,check that the time hasn't changed.,
pandas/,312,from system utc to real utc,
pandas/,314,check that the time hasn't changed.,
pandas/,317,------------------------------------------------------------------,
pandas/,318,Timestamp.__init__ with tz str or tzinfo,
pandas/,335,GH#11481 & GH#15777,
pandas/,336,Naive string timestamps were being localized incorrectly,
pandas/,337,with tz_convert_single instead of tz_localize_to_utc,
pandas/,356,GH#11708,
pandas/,362,GH#15823,
pandas/,394,"GH#2993, Timestamp cannot be constructed by datetime.date",
pandas/,395,and tz correctly,
pandas/,413,GH#1389,
pandas/,415,4 hours before DST transition,
pandas/,420,"spring forward, + ""7"" hours",
pandas/,426,GH21358,
pandas/,17,no overflow expected,
pandas/,31,xref https://github.com/statsmodels/statsmodels/issues/3374,
pandas/,32,ends up multiplying really large numbers which overflow,
pandas/,51,xref https://github.com/pandas-dev/pandas/issues/14080,
pandas/,52,"used to crash, so check for proper overflow exception",
pandas/,67,https://github.com/pandas-dev/pandas/issues/31774,
pandas/,75,but we're OK for timestamp and datetime.datetime,
pandas/,84,"In particular, check that datetime64 - Timestamp works GH#28286",
pandas/,105,Assert on the types resulting from Timestamp +/- various date/time,
pandas/,106,objects,
pandas/,109,"build a timestamp with a frequency, since then it supports",
pandas/,110,addition/subtraction of integers,
pandas/,115,GH#22535 add/sub with integers is deprecated,
pandas/,120,"Timestamp + datetime not supported, though subtraction is supported",
pandas/,121,and yields timedelta more tests in tseries/base/tests/test_base.py,
pandas/,126,"Timestamp +/- datetime64 not supported, so not tested (could possibly",
pandas/,127,assert error raised?),
pandas/,151,timedelta does not support months as unit,
pandas/,162,GH#24775 timedelta64+Timestamp should not raise,
pandas/,213,GH#33296,
pandas/,237,GH#33296,
pandas/,4,noqa  # a test below uses pytz but only inside a `eval` call,
pandas/,19,avoid to match with timezone name,
pandas/,51,"This can cause the tz field to be populated, but it's redundant to",
pandas/,52,include this information in the date-string.,
pandas/,63,pre-1900,
pandas/,73,GH#12622,
pandas/,88,"Biz day construction, roll forward if non-weekday",
pandas/,319,bugs in scikits.timeseries,
pandas/,333,bugs in scikits.timeseries,
pandas/,482,You can only combine together day and intraday offsets,
pandas/,506,--------------------------------------------------------------,
pandas/,507,to_timestamp,
pandas/,582,freq with mult should not affect to the result,
pandas/,605,Frequency other than daily,
pandas/,637,--------------------------------------------------------------,
pandas/,638,"Rendering: __repr__, strftime, etc",
pandas/,662,GH#3363,
pandas/,674,GH 13727,
pandas/,730,check supported freq-aliases still works,
pandas/,778,Test for GH 11738,
pandas/,800,Test properties on Periods with annually frequency.,
pandas/,805,Test properties on Periods with daily frequency.,
pandas/,809,,
pandas/,816,Test properties on Periods with daily frequency.,
pandas/,832,Test properties on Periods with daily frequency.,
pandas/,834,,
pandas/,844,Test properties on Periods with daily frequency.,
pandas/,861,Test properties on Periods with daily frequency.,
pandas/,863,,
pandas/,885,Test properties on Periods with hourly frequency.,
pandas/,903,Test properties on Periods with minutely frequency.,
pandas/,905,,
pandas/,920,Test properties on Periods with secondly frequency.,
pandas/,924,,
pandas/,952,Separate Period objects for the same period,
pandas/,1021,confirm Period('NaT') work identical with Timestamp('NaT'),
pandas/,1053,GH#13071,
pandas/,1061,GH#4731,
pandas/,1079,GH#17983,
pandas/,1083,We may get a different message depending on which class raises,
pandas/,1084,the error.,
pandas/,1117,GH 23878,
pandas/,1139,GH 23878,
pandas/,1151,freq is DateOffset,
pandas/,1218,freq is Tick,
pandas/,1330,freq is DateOffset,
pandas/,1361,freq is Tick,
pandas/,1428,see gh-17116,
pandas/,14,"GH#19643, GH#19650",
pandas/,24,GH#19834,
pandas/,34,"GH#19643, used to incorrectly give Timestamp in 1754",
pandas/,51,frequency conversion tests: from Annual Frequency,
pandas/,122,frequency conversion tests: from Quarterly Frequency,
pandas/,186,frequency conversion tests: from Monthly Frequency,
pandas/,235,frequency conversion tests: from Weekly Frequency,
pandas/,346,frequency conversion tests: from Weekly Frequency,
pandas/,365,"frequency conversion tests: from Business Frequency""",
pandas/,414,"frequency conversion tests: from Business Frequency""",
pandas/,426,TODO: unused?,
pandas/,427,"ival_D_monday = Period(freq='D', year=2007, month=1, day=8)",
pandas/,492,"frequency conversion tests: from Hourly Frequency""",
pandas/,543,"frequency conversion tests: from Minutely Frequency""",
pandas/,604,"frequency conversion tests: from Secondly Frequency""",
pandas/,661,GH#31475 Avoid floating point errors dropping the start_time to,
pandas/,662,before the beginning of the Period,
pandas/,679,normal freq to mult freq,
pandas/,681,ordinal will not change,
pandas/,689,ordinal will not change,
pandas/,698,mult freq to normal freq,
pandas/,700,ordinal will change because how=E is the default,
pandas/,708,ordinal will not change,
pandas/,750,normal freq to combined freq,
pandas/,753,ordinal will not change,
pandas/,761,combined freq to normal freq,
pandas/,765,ordinal will change because how=E is the default,
pandas/,776,ordinal will not change,
pandas/,18,"__neg__, __pos__",
pandas/,23,"__abs__, __abs__(__neg__)",
pandas/,39,GH 12690,
pandas/,46,see gh-10939,
pandas/,70,this is NOT equal and cannot be roundtripped (because of the nanos),
pandas/,76,that we are int,
pandas/,79,compat to datetime.timedelta,
pandas/,94,GH 10050,
pandas/,120,components,
pandas/,130,GH 10050,
pandas/,149,GH #21877,
pandas/,227,"validate all units, GH 6855, GH 21762",
pandas/,229,array-likes,
pandas/,239,M is treated as minutes in string repr,
pandas/,250,scalar,
pandas/,298,GH 24653: alias .to_numpy() for scalars,
pandas/,305,"This first case has s1, s2 being the same as t1,t2 below",
pandas/,352,Checking for any NaT-like objects,
pandas/,353,GH 13603,
pandas/,406,space,
pandas/,410,invalid,
pandas/,443,invalid,
pandas/,455,GH 11129,
pandas/,466,python timedeltas drop ns resolution,
pandas/,474,GH 12727,
pandas/,475,timedelta limits correspond to int64 boundaries,
pandas/,479,"Beyond lower limit, a NAT before the Overflow",
pandas/,489,Same tests using the internal nanosecond values,
pandas/,500,GH 19458,
pandas/,518,GH#21344,
pandas/,523,"Check that the attribute is available on the class, mirroring",
pandas/,524,the stdlib timedelta behavior,
pandas/,542,https://github.com/pandas-dev/pandas/issues/21484,
pandas/,547,GH 31354,
pandas/,23,rounding cases,
pandas/,29,string conversion with/without leading zero,
pandas/,30,GH#9570,
pandas/,36,more strings & abbrevs,
pandas/,37,GH#8190,
pandas/,62,combos,
pandas/,81,Currently invalid as it has a - on the hh:mm:dd part,
pandas/,82,(only allowed on the days),
pandas/,87,only leading neg signs are allowed,
pandas/,91,no units specified,
pandas/,96,invalid construction,
pandas/,112,floats,
pandas/,118,offset,
pandas/,123,GH#11995: unicode,
pandas/,152,GH#8757: test construction with np dtypes,
pandas/,175,round-trip both for string and value,
pandas/,187,GH#3374,
pandas/,192,xref GH#17637,
pandas/,277,GH#9273,
pandas/,288,Test for #30543,
pandas/,35,trim nano,
pandas/,37,trim micro,
pandas/,39,don't strip every 0,
pandas/,35,GH#6808,
pandas/,57,GH#6808,
pandas/,70,GH#19738,
pandas/,75,"datetime + Timedelta does _not_ call Timedelta.__radd__,",
pandas/,76,so we get a datetime back instead of a Timestamp,
pandas/,161,In this context pd.NaT is treated as timedelta-like,
pandas/,209,GH#21980,
pandas/,216,GH#21980,
pandas/,230,GH#21980,
pandas/,239,GH#21980,
pandas/,247,GH#21980,
pandas/,254,"TODO: moved from index tests following #24365, may need de-duplication",
pandas/,258,"timedelta, timedelta",
pandas/,295,"timedelta, datetime",
pandas/,318,---------------------------------------------------------------,
pandas/,319,"Timedelta.__mul__, __rmul__",
pandas/,326,GH#19819,
pandas/,335,"np.float64('NaN') has a 'dtype' attr, avoid treating as array",
pandas/,342,GH#19738,
pandas/,358,timedelta * datetime is gibberish,
pandas/,362,invalid multiply with another timedelta,
pandas/,365,---------------------------------------------------------------,
pandas/,366,"Timedelta.__div__, __truediv__",
pandas/,369,GH#19738,
pandas/,382,truediv,
pandas/,391,floordiv,
pandas/,401,GH#19738,
pandas/,428,"np.float64('NaN') has a 'dtype' attr, avoid treating as array",
pandas/,436,---------------------------------------------------------------,
pandas/,437,Timedelta.__rdiv__,
pandas/,440,GH#19738,
pandas/,448,GH#31869 None gets cast to NaT,
pandas/,491,---------------------------------------------------------------,
pandas/,492,Timedelta.__floordiv__,
pandas/,495,GH#18846,
pandas/,504,GH#18846,
pandas/,512,GH#19738,
pandas/,518,GH#18846,
pandas/,531,GH#18846,
pandas/,542,GH#18846,
pandas/,546,Array-like others,
pandas/,558,GH#18846,
pandas/,564,---------------------------------------------------------------,
pandas/,565,Timedelta.__rfloordiv__,
pandas/,568,GH#18846,
pandas/,572,scalar others,
pandas/,573,"x // Timedelta is defined only for timedelta-like x. int-like,",
pandas/,574,"float-like, and date-like, in particular, should all either",
pandas/,575,a) raise TypeError directly or,
pandas/,576,"b) return NotImplemented, following which the reversed",
pandas/,577,operation will raise TypeError.,
pandas/,583,GH#18846,
pandas/,590,GH#19738,
pandas/,594,GH#18846,
pandas/,603,GH#18846,
pandas/,616,"deprecated GH#19761, enforced GH#29797",
pandas/,620,GH#18846,
pandas/,624,Array-like others,
pandas/,637,"deprecated GH#19761, enforced GH#29797",
pandas/,645,GH#18846,
pandas/,653,"Deprecated GH#19761, enforced GH#29797",
pandas/,654,TODO: GH-19761. Change to TypeError.,
pandas/,657,----------------------------------------------------------------,
pandas/,658,"Timedelta.__mod__, __rmod__",
pandas/,661,GH#19365,
pandas/,664,Timedelta-like others,
pandas/,677,GH#19365,
pandas/,684,GH#19365,
pandas/,692,GH#19365,
pandas/,700,GH#19365,
pandas/,703,Numeric Others,
pandas/,717,GH#19365,
pandas/,727,GH#19365,
pandas/,735,GH#19365,
pandas/,742,GH#19365,
pandas/,759,----------------------------------------------------------------,
pandas/,760,"Timedelta.__divmod__, __rdivmod__",
pandas/,763,GH#19365,
pandas/,777,GH#19365,
pandas/,795,GH#19365,
pandas/,804,GH#19365,
pandas/,812,GH#19365,
pandas/,825,GH#19365,
pandas/,842,----------------------------------------------------------------,
pandas/,883,analogous to GH#15183,
pandas/,892,2D case,
pandas/,900,GH#11835,
pandas/,908,GG#33441,
pandas/,963,GH#20829,
pandas/,991,GH#13624,
pandas/,64,should not raise,
pandas/,83,GH 18789,
pandas/,99,GH 18789,
pandas/,118,GH27219,
pandas/,119,non-empty always return False,
pandas/,123,same endpoint is empty except when closed='both' (contains one point),
pandas/,140,GH 23013,
pandas/,255,GH 18538,
pandas/,34,nested intervals should always overlap,
pandas/,42,disjoint intervals should never overlap,
pandas/,50,overlap if shared endpoint is closed for both (overlap at a point),
pandas/,1,Tests aimed at pandas.core.indexers,
pandas/,10,GH 14946,
pandas/,40,GH 16637,
pandas/,56,GH 16896,
pandas/,64,issue (#18586),
pandas/,72,issue (#18586),
pandas/,87,GH 20393,
pandas/,94,PR 23462,
pandas/,29,In case len(values) < 3,
pandas/,36,"Otherwise obj is an empty DataFrame with shape (0, 1)",
pandas/,68,https://github.com/pandas-dev/pandas/issues/31503,
pandas/,68,value not in the categories,
pandas/,125,systematically test the slicing operations:,
pandas/,126,for all slicing ops:,
pandas/,127,- returning a dataframe,
pandas/,128,- returning a column,
pandas/,129,- returning a row,
pandas/,130,- returning a single value,
pandas/,139,the expected values,
pandas/,144,"2:4,: | ""j"":""k"",:",
pandas/,147,":,""cats"" | :,0",
pandas/,150,"""j"",: | 2,:",
pandas/,153,"""j"",""cats | 2,0",
pandas/,156,iloc,
pandas/,157,frame,
pandas/,162,row,
pandas/,167,col,
pandas/,172,single value,
pandas/,176,loc,
pandas/,177,frame,
pandas/,182,row,
pandas/,187,col,
pandas/,192,single value,
pandas/,196,ix,
pandas/,197,frame,
pandas/,198,"res_df = df.loc[""j"":""k"",[0,1]] # doesn't work?",
pandas/,203,row,
pandas/,208,col,
pandas/,213,single value,
pandas/,217,iat,
pandas/,221,at,
pandas/,225,fancy indexing,
pandas/,233,get_value,
pandas/,237,"i : int, slice, or sequence of integers",
pandas/,264,GH 7918,
pandas/,302,GH 14580,
pandas/,303,test iloc() on Series with Categorical data,
pandas/,307,get slice,
pandas/,312,get list of indexes,
pandas/,317,get boolean array,
pandas/,324,list of labels,
pandas/,334,element in the categories but not in the values,
pandas/,338,assign is ok,
pandas/,352,not all labels in the categories,
pandas/,362,GH 11586,
pandas/,364,unique categories and codes,
pandas/,368,unique slice,
pandas/,374,duplicated slice,
pandas/,385,duplicated categories and codes,
pandas/,389,unique slice,
pandas/,396,duplicated slice,
pandas/,408,contains unused category,
pandas/,426,duplicated slice,
pandas/,457,https://github.com/pandas-dev/pandas/issues/19551,
pandas/,465,GH 16115,
pandas/,477,GH 9469,
pandas/,478,properly coerce the input indexers,
pandas/,486,we are asserting the code result here,
pandas/,487,which maps to the -1000 category,
pandas/,492,GH 12531,
pandas/,512,non-unique,
pandas/,541,GH 10043,
pandas/,567,reindexing,
pandas/,568,convert to a regular index,
pandas/,587,since we are actually reindexing with a Categorical,
pandas/,588,then return a Categorical,
pandas/,617,give back the type of categorical that we received,
pandas/,630,passed duplicate indexers are not allowed,
pandas/,635,args NotImplemented ATM,
pandas/,645,GH9748,
pandas/,654,GH 20629,
pandas/,685,since we have an ordered categorical,
pandas/,687,"CategoricalIndex([1, 1, 2, 1, 3, 2],",
pandas/,688,"categories=[3, 2, 1],",
pandas/,689,"ordered=True,",
pandas/,690,name='B'),
pandas/,699,unordered,
pandas/,700,cannot be compared,
pandas/,702,"CategoricalIndex([1, 1, 2, 1, 3, 2],",
pandas/,703,"categories=[3, 2, 1],",
pandas/,704,"ordered=False,",
pandas/,705,name='B'),
pandas/,714,https://github.com/pandas-dev/pandas/issues/12564,
pandas/,715,consistent result if comparing as Dataframe,
pandas/,738,Order of categories in output can be different,
pandas/,743,Order of categories in output can be different,
pandas/,749,python types,
pandas/,754,numpy int/uint,
pandas/,756,numpy floats,
pandas/,758,numpy object,
pandas/,760,pandas scalars,
pandas/,764,pandas Integer arrays,
pandas/,766,other pandas arrays,
pandas/,773,GH-17569,
pandas/,778,scalar selection,
pandas/,783,list selection,
pandas/,788,slice selection,
pandas/,793,scalar assignment,
pandas/,799,list assignment,
pandas/,805,slice assignment,
pandas/,9,We pass through the error message from numpy,
pandas/,45,GH 4892,
pandas/,46,float_indexers should raise exceptions,
pandas/,47,on appropriate Index types & accessors,
pandas/,48,this duplicates the code below,
pandas/,49,but is specifically testing for the error,
pandas/,50,message,
pandas/,75,GH 4892,
pandas/,76,float_indexers should raise exceptions,
pandas/,77,on appropriate Index types & accessors,
pandas/,82,getting,
pandas/,93,contains,
pandas/,96,setting with a float fails with iloc,
pandas/,100,setting with an indexer,
pandas/,102,Value or Type Error,
pandas/,106,these should prob work,
pandas/,107,and are inconsistent between series/dataframe ATM,
pandas/,108,for idxr in [lambda x: x]:,
pandas/,109,s2 = s.copy(),
pandas/,110,,
pandas/,111,with pytest.raises(TypeError):,
pandas/,112,idxr(s2)[3.0] = 0,
pandas/,137,"fallsback to position selection, series only",
pandas/,149,lookup in a pure string index with an invalid indexer,
pandas/,165,mixed index so we have label,
pandas/,166,indexing,
pandas/,190,test how scalar float indexers work on int indexes,
pandas/,192,integer index,
pandas/,196,coerce to equal int,
pandas/,202,coerce to equal int,
pandas/,227,contains,
pandas/,228,coerce to equal int,
pandas/,234,scalar float indexers work on a float index,
pandas/,238,assert all operations except for iloc are ok,
pandas/,242,getting,
pandas/,246,setting,
pandas/,252,random float is a KeyError,
pandas/,256,contains,
pandas/,259,iloc succeeds with an integer,
pandas/,267,iloc raises with a float,
pandas/,289,GH 4892,
pandas/,290,float_indexers should raise exceptions,
pandas/,291,on appropriate Index types & accessors,
pandas/,296,getitem,
pandas/,315,setitem,
pandas/,332,"same as above, but for Integer based indexes",
pandas/,333,these coerce to a like integer,
pandas/,334,oob indicates if we are out of bounds,
pandas/,335,of positional indexing,
pandas/,342,s is an in-range index,
pandas/,345,getitem,
pandas/,350,these are all label indexing,
pandas/,351,except getitem which is positional,
pandas/,352,empty,
pandas/,359,getitem out-of-bounds,
pandas/,364,these are all label indexing,
pandas/,365,except getitem which is positional,
pandas/,366,empty,
pandas/,373,positional indexing,
pandas/,382,getitem odd floats,
pandas/,397,positional indexing,
pandas/,433,"similar to above, but on the getitem dim (of a DataFrame)",
pandas/,438,getitem,
pandas/,445,positional indexing,
pandas/,454,getitem out-of-bounds,
pandas/,460,positional indexing,
pandas/,469,getitem odd floats,
pandas/,479,positional indexing,
pandas/,494,"similar to above, but on the getitem dim (of a DataFrame)",
pandas/,499,setitem,
pandas/,505,positional indexing,
pandas/,521,"same as above, but for floats",
pandas/,528,getitem,
pandas/,533,setitem,
pandas/,550,related 236,
pandas/,551,scalar/slicing of a float index,
pandas/,554,label based slicing,
pandas/,561,exact indexing when found,
pandas/,576,value not found (and no fallbacking at all),
pandas/,578,scalar integers,
pandas/,586,fancy floats/integers create the correct entry (as nan),
pandas/,587,fancy tests,
pandas/,589,float,
pandas/,595,int,
pandas/,600,all should return the same as we are slicing 'the same',
pandas/,609,previously this did fallback indexing,
pandas/,626,combined test,
pandas/,634,list selection,
pandas/,666,see gh-13509,
pandas/,679,"GH 5557, related to slicing a float index",
pandas/,832,smoke test for the repr,
pandas/,13,"this is chained assignment, but will 'work'",
pandas/,16,#3970,
pandas/,19,Creates a second float block,
pandas/,22,caches a reference to the 'bb' series,
pandas/,25,repr machinery triggers consolidation,
pandas/,28,Assignment to wrong series,
pandas/,34,GH 5424,
pandas/,40,ref the cache,
pandas/,44,set it,
pandas/,50,GH 7084,
pandas/,51,not updating cache on series setting with slices,
pandas/,58,loop through df to update out,
pandas/,67,try via a chain indexing,
pandas/,68,this actually works,
pandas/,88,GH6026,
pandas/,108,GH 6056,
pandas/,124,work with the chain,
pandas/,133,test with the chaining,
pandas/,150,"Using a copy (the chain), fails",
pandas/,161,Doc example,
pandas/,186,gh-5475: Make sure that is_copy is picked up reconstruction,
pandas/,196,gh-5597: a spurious raise as we are setting the entire column here,
pandas/,211,Always a copy,
pandas/,218,Explicitly copy,
pandas/,225,Implicitly take,
pandas/,233,Implicitly take 2,
pandas/,241,Should be ok even though it's a copy!,
pandas/,251,"an identical take, so no copy",
pandas/,262,see gh-6025: false positives,
pandas/,275,from SO:,
pandas/,276,https://stackoverflow.com/questions/24054495/potential-bug-setting-value-for-undefined-column-using-iloc,
pandas/,283,Mixed type setting but same dtype & changing dtype,
pandas/,304,operating on a copy,
pandas/,314,invalid warning as we are returning a new object,
pandas/,315,GH 8730,
pandas/,319,this should not raise,
pandas/,330,xref gh-13017.,
pandas/,346,GH6394,
pandas/,347,Regression in chained getitem indexing with embedded list-like from,
pandas/,348,0.12,
pandas/,362,"GH 4939, make sure to update the cache on setitem",
pandas/,365,cache series,
pandas/,370,10264,
pandas/,379,TODO(wesm): unused?,
pandas/,380,"y = df.iloc[np.arange(2, len(df))]",
pandas/,10,GH10692,
pandas/,19,integer,
pandas/,28,neg integer,
pandas/,44,"array of ints (GH5006), make sure that a single indexer is returning",
pandas/,45,the correct type,
pandas/,49,"TODO: better name, just separating out things that dont rely on base class",
pandas/,52,GH#32085 index with duplicates doesnt matter for _is_scalar_access,
pandas/,63,GH6296,
pandas/,64,iloc should allow indexers that exceed the bounds,
pandas/,67,lists of positions should raise IndexError!,
pandas/,84,still raise on a single indexer,
pandas/,91,GH10779,
pandas/,92,single positive/negative indexer exceeding Series bounds should raise,
pandas/,93,an IndexError,
pandas/,99,slices are ok,
pandas/,100,0 < start < len < stop,
pandas/,104,stop < 0 < start < len,
pandas/,108,0 < stop < len < start (down),
pandas/,112,stop < 0 < start < len (down),
pandas/,116,start < 0 < stop < len,
pandas/,120,0 < stop < len < start,
pandas/,124,stop < start < 0 < len (down),
pandas/,128,0 < len < start < stop,
pandas/,132,slice bounds exceeding is ok,
pandas/,145,doc example,
pandas/,173,GH 25753,
pandas/,183,GH 21982,
pandas/,195,GH 21867,
pandas/,208,GH10547 and GH10779,
pandas/,209,negative integers should be able to reach index 0,
pandas/,229,check the length 1 Series case highlighted in GH10547,
pandas/,235,GH 6766,
pandas/,240,cross-sectional indexing,
pandas/,249,TODO: test something here?,
pandas/,253,TODO: test something here?,
pandas/,258,GH26658,
pandas/,265,TODO: test something here?,
pandas/,275,axis=1,
pandas/,287,axis=0,
pandas/,308,GH5771,
pandas/,316,setitem with an iloc list,
pandas/,331,GH 17193,
pandas/,345,GH 6766,
pandas/,346,iloc with a mask aligning from another iloc,
pandas/,357,del a dup column across blocks,
pandas/,363,assign back to self,
pandas/,367,reversed x 2,
pandas/,372,TODO: GH#27620 this test used to compare iloc against ix; check if this,
pandas/,373,is redundant with another test comparing iloc against loc,
pandas/,387,slice,
pandas/,396,list of integers,
pandas/,405,neg indices,
pandas/,410,dups indices,
pandas/,415,with index-like,
pandas/,422,try with labelled frame,
pandas/,435,negative indexing,
pandas/,440,out-of-bounds exception,
pandas/,445,trying to use a label,
pandas/,456,multi axis slicing issue with single block,
pandas/,457,surfaced in GH 6059,
pandas/,464,defines ref_locs,
pandas/,474,for dups,
pandas/,483,related,
pandas/,530,GH 7551,
pandas/,531,list-of-list is set incorrectly in mixed vs. single dtyped frames,
pandas/,547,GH #19474,
pandas/,548,"assigning like ""df.iloc[0, [0]] = ['Z']"" should be evaluated",
pandas/,549,"elementwisely, not using ""setter('A', ['Z'])"".",
pandas/,559,"GH 3631, iloc with a mask (of a series) should raise",
pandas/,570,ndarray ok,
pandas/,574,the possibilities,
pandas/,601,UserWarnings from reindex of a boolean mask,
pandas/,628,"GH 4017, non-unique indexing (on the axis)",
pandas/,647,vertical empty,
pandas/,654,horizontal empty,
pandas/,661,horizontal empty,
pandas/,667,GH13873,
pandas/,672,should be a shallow copy,
pandas/,680,should also be a shallow copy,
pandas/,685,GH24919,
pandas/,692,GH24919,
pandas/,698,Mixed dtype ensures we go through take_split_path in setitem_with_indexer,
pandas/,702,This should modify our original values in-place,
pandas/,711,"GH#15686, duplicate columns and mixed dtype",
pandas/,722,GH#22036 setting with same-sized list,
pandas/,26,iat,
pandas/,36,at,
pandas/,53,iat,
pandas/,63,at,
pandas/,69,"TODO: Better name, just separating things that dont need Base class",
pandas/,73,as timestamp is not a tuple!,
pandas/,82,GH 7729,
pandas/,83,make sure we are boxing the returns,
pandas/,103,GH6493,
pandas/,104,iat/iloc with dups,
pandas/,132,at should not fallback,
pandas/,133,GH 7814,
pandas/,134,GH#31724 .at should match .loc,
pandas/,147,GH#31724 .at should match .loc,
pandas/,160,GH#31724 .at should match .loc,
pandas/,171,.at should match .loc,
pandas/,175,GH#31724 .at should match .loc,
pandas/,194,TODO: belongs somewhere else?,
pandas/,196,"GH 13822, incorrect error string with non-unique columns when missing",
pandas/,197,column is accessed,
pandas/,201,Check that we get the correct value in the KeyError,
pandas/,206,gh-15822,
pandas/,227,GH 25506,
pandas/,235,GH 19860,
pandas/,248,GH 19860,
pandas/,266,GH 23236,
pandas/,273,GH24924,
pandas/,274,dataframe __getitem__,
pandas/,280,series __getitem__,
pandas/,287,"GH#32809 .iat calls go through DataFrame._get_value, should not",
pandas/,288,call maybe_box_datetimelike,
pandas/,308,"GH 4390, iat incorrectly indexing",
pandas/,18,"GH2578, allow ix and friends to partially set",
pandas/,20,series,
pandas/,43,iloc/iat raise,
pandas/,52,## frame,
pandas/,58,iloc/iat raise,
pandas/,67,row setting where it exists,
pandas/,78,"like 2578, partial setting with dtype preservation",
pandas/,84,"single dtype frame, overwrite",
pandas/,90,"mixed dtype frame, overwrite",
pandas/,97,"single dtype frame, partial setting",
pandas/,104,"mixed frame, partial setting",
pandas/,111,GH 8473,
pandas/,139,"in a mixed dtype environment, try to preserve dtypes",
pandas/,140,by appending,
pandas/,150,columns will align,
pandas/,155,columns will align,
pandas/,162,list-like must conform,
pandas/,168,"TODO: #15657, these are left as object and not coerced",
pandas/,176,partial set with new index,
pandas/,177,Regression from GH4825,
pandas/,180,loc equiv to .reindex,
pandas/,206,raises as nothing in in the index,
pandas/,261,iloc,
pandas/,267,GH 11497,
pandas/,272,loc,
pandas/,287,raises as nothing in in the index,
pandas/,318,iloc,
pandas/,326,GH 4940,
pandas/,327,allow only setting of 'valid' values,
pandas/,332,don't allow not string inserts,
pandas/,339,allow object conversion here,
pandas/,349,GH5226,
pandas/,351,partially set with an empty object series,
pandas/,374,partially set with an empty object,
pandas/,375,frame,
pandas/,387,these work as they don't really change,
pandas/,388,anything but the index,
pandas/,389,GH5632,
pandas/,447,no index to start,
pandas/,463,"GH5720, GH5744",
pandas/,464,don't create rows when empty,
pandas/,474,"tm.assert_frame_equal(y,expected)",
pandas/,483,reindex columns is ok,
pandas/,494,GH 5756,
pandas/,495,setting with empty Series,
pandas/,503,GH 5932,
pandas/,504,copy on empty with assignment fails,
pandas/,512,GH 6171,
pandas/,513,consistency on empty frames,
pandas/,18,------------------------------------------------------------------------,
pandas/,19,Indexing test cases,
pandas/,26,GH5508,
pandas/,28,len of indexer vs length of the 1d ndarray,
pandas/,33,invalid,
pandas/,37,valid,
pandas/,46,dtype getting changed?,
pandas/,71,GH 25567,
pandas/,109,GH 25567,
pandas/,119,gh-32896,
pandas/,143,"when fixing this, please remove the pytest.skip in test_setitem_ndarray_3d",
pandas/,153,GH 16957,
pandas/,154,We should be able to use np.inf as a key,
pandas/,155,np.inf should cause an index to convert to float,
pandas/,157,Test with np.inf in rows,
pandas/,163,make sure we can look up the value,
pandas/,170,Test with np.inf in columns,
pandas/,182,GH3216,
pandas/,193,GH10280,
pandas/,232,GH 3455,
pandas/,240,across dtypes,
pandas/,247,TODO(wesm): unused?,
pandas/,248,noqa,
pandas/,249,noqa,
pandas/,253,"GH 3561, dups not in selected order",
pandas/,272,"see GH5553, make sure we use the right indexer",
pandas/,277,List containing only missing label,
pandas/,287,ToDo: check_index_type can be True after GH 11497,
pandas/,289,GH 4619; duplicate indexer with missing label,
pandas/,298,non unique with non unique selector,
pandas/,304,GH 5835,
pandas/,305,dups on index and missing values,
pandas/,311,"GH 6504, multi-axis indexing",
pandas/,330,GH 17347,
pandas/,338,GH3492,
pandas/,343,"this works, new column is created correctly",
pandas/,346,"this does not work, ie column test is not changed",
pandas/,353,GH 10610,
pandas/,362,GH 3586,
pandas/,441,"GH 3626, an assignment of a sub-df to a df",
pandas/,468,frame on rhs,
pandas/,475,with an ndarray on rhs,
pandas/,476,coerces to float64 because values has float64 dtype,
pandas/,477,GH 14001,
pandas/,492,broadcasting on the rhs is required,
pandas/,512,GH 6043,
pandas/,513,iloc with a list,
pandas/,523,iloc with an object,
pandas/,548,remains object dtype even after setting it back,
pandas/,557,GH 14424,
pandas/,558,string indexing against datetimelike with object,
pandas/,559,dtype should properly raises KeyError,
pandas/,578,GH4312 (iloc),
pandas/,597,GH5702 (loc),
pandas/,612,full replacements / no nans,
pandas/,625,GH 11836,
pandas/,626,if we have an index type and set it with something that looks,
pandas/,627,"to numpy like the same, but is actually, not",
pandas/,628,(e.g. setting with a float or string '0'),
pandas/,629,then we need to coerce to object,
pandas/,631,integer indexes,
pandas/,700,GH 19860,
pandas/,708,GH 19860,
pandas/,716,"GH8258, tests that both rows & columns are aligned to what is",
pandas/,717,assigned to. covers both uniform data-type & multi-type cases,
pandas/,719,"label, index, slice",
pandas/,739,right hand side; permute the indices and multiplpy by -2,
pandas/,742,expected `right` result; just multiply by -2,
pandas/,746,run tests with uniform dtypes,
pandas/,749,make frames multi-type & re-run tests,
pandas/,763,"For integer indices, .loc and plain getitem are position-based.",
pandas/,791,Check that .iloc returns correct dtypes GH9983,
pandas/,800,range can cause an indexing error,
pandas/,801,GH 11652,
pandas/,812,FIXME: dont leave commented-out,
pandas/,813,"pd.IndexSlice[:, :],",
pandas/,834,like dataframe getitem,
pandas/,855,GH 17170,
pandas/,879,"For numeric series, we should coerce to NaN.",
pandas/,882,"For datetime series, we should coerce to NaT.",
pandas/,887,"For objects, we should preserve the None value.",
pandas/,926,"For numeric series, we should coerce to NaN.",
pandas/,929,"For datetime series, we should coerce to NaT.",
pandas/,934,"For objects, we should preserve the None value.",
pandas/,991,A cross-section of a homogeneous EA should be an EA,
pandas/,1023,GH#17192 iloc with read-only array raising TypeError,
pandas/,1047,"GH#29189 float_index.get_loc(None) should raise KeyError, not TypeError",
pandas/,1060,GH 30567,
pandas/,9,GH 11485,
pandas/,11,iloc cannot use boolean Series (see GH3635),
pandas/,13,return bool indexer,
pandas/,22,noqa: E231,
pandas/,23,noqa: E231,
pandas/,27,noqa: E231,
pandas/,28,noqa: E231,
pandas/,60,scalar,
pandas/,68,GH 11485,
pandas/,90,GH 11485,
pandas/,93,return label,
pandas/,99,noqa: E231,
pandas/,100,noqa: E231,
pandas/,111,mixture,
pandas/,125,GH 11485,
pandas/,128,return label,
pandas/,153,mixture,
pandas/,179,GH 11485,
pandas/,182,return location,
pandas/,195,mixture,
pandas/,209,GH 11485,
pandas/,212,return location,
pandas/,237,mixture,
pandas/,12,integer,
pandas/,17,boolean,
pandas/,24,other,
pandas/,38,https://github.com/pandas-dev/pandas/issues/31503,
pandas/,18,int label,
pandas/,23,label,
pandas/,28,out of range label,
pandas/,42,TODO: test something here?,
pandas/,43,list of labels,
pandas/,58,GH 17758 - MultiIndex and missing keys,
pandas/,64,fails,
pandas/,70,TODO: test something?,
pandas/,71,array like,
pandas/,75,boolean indexers,
pandas/,82,label slices (with ints),
pandas/,84,real label slices,
pandas/,86,GH 14316,
pandas/,112,"TODO: better name, just separating out things that rely on base class",
pandas/,115,GH 5678,
pandas/,116,repeated getitems on a dup index returning a ndarray,
pandas/,126,GH4726,
pandas/,127,dup indexing with iloc/loc,
pandas/,147,GH 6541,
pandas/,173,GH10503,
pandas/,175,assigning the same type should not change the type,
pandas/,185,assigning a new type should get the inferred type,
pandas/,194,GH31340,
pandas/,201,id is inferred as object,
pandas/,208,consistency,
pandas/,218,GH26658,
pandas/,225,TODO: test something here?,
pandas/,230,GH3449,
pandas/,235,raise a KeyError?,
pandas/,243,GH  7496,
pandas/,244,loc should not fallback,
pandas/,281,"inconsistency between .loc[values] and .loc[values,:]",
pandas/,282,GH 7999,
pandas/,296,15747,
pandas/,297,should KeyError if *any* missing labels,
pandas/,311,a non-match and a match,
pandas/,316,gh-17131,
pandas/,317,a boolean index should index like a boolean numpy array,
pandas/,344,want this to work,
pandas/,349,mixed type,
pandas/,356,GH 6149,
pandas/,357,coerce similarly for setitem and loc when rows have a null-slice,
pandas/,422,GH 15494,
pandas/,423,setting on frame with single row,
pandas/,430,empty (essentially noops),
pandas/,442,".loc[:,column] setting with slice == len of the column",
pandas/,443,GH10408,
pandas/,474,"GH 27395, non-ns dtype assignment via .loc should work",
pandas/,475,and return the same result when using simple assignment,
pandas/,491,see gh-28837,
pandas/,533,GH 6254,
pandas/,534,setting issue,
pandas/,542,GH 6252,
pandas/,543,setting with an empty frame,
pandas/,563,GH 8669,
pandas/,564,invalid coercion of nan -> int,
pandas/,570,GH 6546,
pandas/,571,setting with mixed labels,
pandas/,583,multiple setting,
pandas/,595,multiple setting with frame on rhs (with M8),
pandas/,624,GH #19474,
pandas/,625,"assigning like ""df.loc[0, ['A']] = ['Z']"" should be evaluated",
pandas/,626,"elementwisely, not using ""setter('A', ['Z'])"".",
pandas/,687,GH 29334,
pandas/,694,12411,
pandas/,704,12045,
pandas/,718,11594,
pandas/,729,GH#12862 should not raise on assigning the second value,
pandas/,749,GH3659,
pandas/,750,non-unique indexer with loc slice,
pandas/,751,https://groups.google.com/forum/?fromgroups#!topic/pydata/zTm2No0crYs,
pandas/,753,these are going to raise because the we are non monotonic,
pandas/,767,monotonic are ok,
pandas/,784,GH 4280,
pandas/,785,non_unique index with a large selection triggers a memory error,
pandas/,834,GH 3880,
pandas/,846,vertical empty,
pandas/,850,horizontal empty,
pandas/,854,horizontal empty,
pandas/,860,GH13873,
pandas/,866,should be a shallow copy,
pandas/,870,These should not return copies,
pandas/,875,Same tests for Series,
pandas/,885,GH20722,
pandas/,886,Test whether loc accept uint64 max value as index.,
pandas/,903,"GH6173, various appends to an empty dataframe",
pandas/,908,appends to fit length of data,
pandas/,913,only appends one value,
pandas/,920,"GH6173, various appends to an empty dataframe",
pandas/,937,GH24924,
pandas/,944,GH24924,
pandas/,950,GH26939,
pandas/,961,gh-11428,
pandas/,981,gh-14836,
pandas/,989,GH 8720,
pandas/,1003,GH 10586,
pandas/,1022,GH 14592,
pandas/,1032,GH#19456,
pandas/,1040,GH#31840,
pandas/,1051,"GH#16121, GH#24612, GH#31810",
pandas/,1067,GH#31840 deprecated incorrect behavior,
pandas/,1074,GH#31840 deprecated incorrect behavior,
pandas/,1079,GH#32650 dont mix and match datetime/timedelta/period dtypes,
pandas/,1086,create dataframe with non-unique DatetimeIndex,
pandas/,1090,matching i8 values,
pandas/,1101,GH#4125,
pandas/,14,16889,
pandas/,15,support .loc with alignment and tz-aware DatetimeIndex,
pandas/,42,GH#8260,
pandas/,43,support datetime64 with tz,
pandas/,52,indexing,
pandas/,70,indexing - fast_xs,
pandas/,81,indexing - boolean,
pandas/,86,indexing - setting an element,
pandas/,95,trying to set a single element on a part of a different timezone,
pandas/,96,this converts to object,
pandas/,108,xef gh-12938,
pandas/,109,various ways of indexing the same tz-aware scalar,
pandas/,138,GH 12050,
pandas/,139,indexing on a series with a datetimeindex with tz,
pandas/,144,list-like indexing,
pandas/,147,getitem,
pandas/,150,setitem,
pandas/,156,.loc getitem,
pandas/,159,.loc setitem,
pandas/,165,single element indexing,
pandas/,167,getitem,
pandas/,170,setitem,
pandas/,176,.loc getitem,
pandas/,179,.loc setitem,
pandas/,187,GH9478,
pandas/,188,a datetimeindex alignment issue with partial setting,
pandas/,203,GH 9516,
pandas/,222,GH 11497,
pandas/,250,GH 11497,
pandas/,278,GH 11679,
pandas/,292,GH 21846,
pandas/,313,GH 20724,
pandas/,323,GH 18308,
pandas/,365,https://github.com/pandas-dev/pandas/issues/31501,
pandas/,12,,
pandas/,13,Index / Series common tests which may trigger dtype coercions,
pandas/,14,,
pandas/,19,"Iterate over combination of dtype, method and klass",
pandas/,20,and ensure that each are contained within a collected test,
pandas/,59,explicitly check dtype to avoid any unexpected result,
pandas/,81,check dtype explicitly for sure,
pandas/,84,".loc works different rule, temporary disable",
pandas/,85,temp = original_series.copy(),
pandas/,86,temp.loc[1] = loc_value,
pandas/,87,"tm.assert_series_equal(temp, expected_series)",
pandas/,281,check dtype explicitly for sure,
pandas/,288,check dtype explicitly for sure,
pandas/,325,float + int -> int,
pandas/,460,timedelta64 + timedelta64 => timedelta64,
pandas/,466,ToDo: must coerce to object,
pandas/,471,ToDo: must coerce to object,
pandas/,778,"not indexing, but place here for consistency",
pandas/,818,float + complex -> we don't support a complex Index,
pandas/,819,"complex for Series,",
pandas/,820,object for Index,
pandas/,946,to test tz => different tz replacement,
pandas/,1001,tested below,
pandas/,1004,tested below,
pandas/,1023,Expected: do not downcast by replacement,
pandas/,15,create a tuple accessor,
pandas/,95,form agglomerates,
pandas/,117,check against values,
pandas/,137,check against values,
pandas/,158,"if we are in fails, the ok, otherwise raise it",
pandas/,173,check,
pandas/,8,----------------------------------------------------------------------------,
pandas/,9,test indexing of Series with multi-level Index,
pandas/,10,----------------------------------------------------------------------------,
pandas/,23,GH 6018,
pandas/,24,series regression getitem with a multi-index,
pandas/,34,GH 5725 the 'A' happens to be a valid Timestamp so the doesn't raise,
pandas/,35,"the appropriate error, only in PY3 of course!",
pandas/,45,confirm indexing on missing value raises KeyError,
pandas/,90,match should include len(s),
pandas/,91,match should include len(s),
pandas/,119,----------------------------------------------------------------------------,
pandas/,120,test indexing of DataFrame with multi-level Index,
pandas/,121,----------------------------------------------------------------------------,
pandas/,200,----------------------------------------------------------------------------,
pandas/,201,test indexing of DataFrame with multi-level Index with duplicates,
pandas/,202,----------------------------------------------------------------------------,
pandas/,222,GH 4145,
pandas/,233,"GH 4146, not returning a block manager when selecting a unique index",
pandas/,234,from a duplicate index,
pandas/,235,"as of 4879, this returns a Series (which is similar to what happens",
pandas/,236,with a non-unique),
pandas/,244,selecting a non_unique from the 2nd level,
pandas/,256,GH 15454,
pandas/,26,buglet with int typechecking,
pandas/,32,13431,
pandas/,34,see gh-2903,
pandas/,62,see gh-6574,
pandas/,63,missing values in returned index should be preserved,
pandas/,85,see gh-13719,
pandas/,134,this is a copy in 0.14,
pandas/,138,setting this will give a SettingWithCopyError,
pandas/,139,as we are trying to write a view,
pandas/,146,this is a copy in 0.14,
pandas/,150,setting this will give a SettingWithCopyError,
pandas/,151,as we are trying to write a view,
pandas/,158,see gh-2107,
pandas/,190,this test is not explicitly testing .xs functionality,
pandas/,191,TODO: move to another module or refactor,
pandas/,200,this test is not explicitly testing .xs functionality,
pandas/,201,TODO: move to another module or refactor,
pandas/,212,this test is not explicitly testing .xs functionality,
pandas/,213,TODO: move to another module or refactor,
pandas/,214,not implementing this for now,
pandas/,224,GH6258,
pandas/,235,GH5684,
pandas/,37,hai it works!,
pandas/,46,GH 3588,
pandas/,69,GH#30892,
pandas/,10,"Inplace ops, originally from:",
pandas/,11,https://stackoverflow.com/questions/20508968/series-fillna-in-a-multiindex-dataframe-does-not-fill-is-this-a-bug,
pandas/,31,5216,
pandas/,32,make sure that we don't try to set a dead cache,
pandas/,39,setting via chained assignment,
pandas/,40,"but actually works, since everything is a view",
pandas/,45,correct setting,
pandas/,52,GH5727,
pandas/,53,make sure that indexers are in the _internal_names_set,
pandas/,60,setitem,
pandas/,13,"GH7724, GH2646",
pandas/,17,test indexing into a multi-index before & past the lexsort depth,
pandas/,25,test for all partials of this key,
pandas/,36,partial key,
pandas/,41,full key,
pandas/,43,single hit,
pandas/,48,multi hit,
pandas/,66,bunch of keys for testing,
pandas/,76,covers both unique index and non-unique index,
pandas/,81,lexsort depth,
pandas/,26,GH #1534,
pandas/,67,GH 5528,
pandas/,77,this is basically regular indexing,
pandas/,105,GH 1678,
pandas/,119,GH 13797,
pandas/,143,test without indexer value in first level of MultiIndex,
pandas/,145,test like code sample 1 in the issue,
pandas/,147,test like code sample 2 in the issue,
pandas/,149,test like code sample 3 in the issue,
pandas/,154,GH17148,
pandas/,26,GH7190,
pandas/,48,gh-7218: assigning with 0-dim arrays,
pandas/,60,GH5206,
pandas/,78,GH11372,
pandas/,102,set all columns,
pandas/,110,identity,
pandas/,122,GH 3738,
pandas/,123,setting with a multi-index right hand side,
pandas/,139,raise because these have differing levels,
pandas/,144,from SO,
pandas/,145,https://stackoverflow.com/questions/24572040/pandas-access-the-level-of-multiindex-for-inplace-operation,
pandas/,176,GH3777 part 2,
pandas/,178,mixed dtype,
pandas/,190,single dtype,
pandas/,201,scalar ok,
pandas/,206,invalid assignments,
pandas/,217,groupby example,
pandas/,239,FIXME: dont leave commented-out,
pandas/,240,TODO(wesm): unused?,
pandas/,241,"new_df = pd.concat([f(name, df2) for name, df2 in grp], axis=1).T",
pandas/,243,we are actually operating on a copy here,
pandas/,244,"but in this case, that's ok",
pandas/,262,GH#33355 dont fall-back to positional when leading level is int,
pandas/,282,a df that needs alignment first,
pandas/,320,set with ndarray,
pandas/,325,---------------------------------------,
pandas/,326,#1803,
pandas/,330,"Works, but adds a column instead of updating the two existing ones",
pandas/,331,Doesn't work,
pandas/,334,it broadcasts,
pandas/,350,GH #1013,
pandas/,388,"assert isinstance(dft._data.blocks[1].items, MultiIndex)",
pandas/,418,GH 4686,
pandas/,419,assignment with dups that has a dtype change,
pandas/,428,https://github.com/pandas-dev/pandas/issues/31449,
pandas/,439,this works because we are modifying the underlying array,
pandas/,440,really a no-no,
pandas/,447,will raise/warn as its chained assignment,
pandas/,16,with integer labels,
pandas/,24,GH 2817,
pandas/,33,"emits a PerformanceWarning, ok",
pandas/,37,this is ok,
pandas/,41,"col has float dtype, result should be Float64Index",
pandas/,47,GH 21593,
pandas/,16,GH6134,
pandas/,17,example test case,
pandas/,44,test multi-index slicing with per axis and per index controls,
pandas/,58,identity,
pandas/,66,index,
pandas/,75,columns,
pandas/,80,both,
pandas/,97,multi-level series,
pandas/,109,boolean indexers,
pandas/,121,ambiguous notation,
pandas/,122,this is interpreted as slicing on both axes (GH #16396),
pandas/,131,not lexsorted,
pandas/,143,"GH 16734: not sorted, but no real slicing",
pandas/,149,GH 7106,
pandas/,150,non-unique mi index support,
pandas/,172,this is equivalent of an xs expression,
pandas/,198,GH12896,
pandas/,199,numpy-implementation dependent bug,
pandas/,234,GH 7429,
pandas/,235,buggy/inconsistent behavior when slicing with datetime-like,
pandas/,251,multi-axis slicing,
pandas/,287,with strings,
pandas/,300,GH 8132,
pandas/,301,various edge cases,
pandas/,331,"A1 - Get all values under ""A0"" and ""A1""",
pandas/,336,"A2 - Get all values from the start to ""A2""",
pandas/,341,"A3 - Get all values under ""B1"" or ""B2""",
pandas/,346,A4 - Get all values between 2013-07-02 and 2013-07-09,
pandas/,351,"B1 - Get all values in B0 that are also under A0, A1 and A2",
pandas/,356,"B2 - Get all values in B0, B1 and B2 (similar to what #2 is doing for",
pandas/,357,the As),
pandas/,362,B3 - Get all values from B1 to B2 and up to 2013-08-06,
pandas/,367,B4 - Same as A4 but the start of the date slice is not a key.,
pandas/,368,shows indexing on a partial selection slice,
pandas/,375,test index maker,
pandas/,378,from indexing.rst / advanced,
pandas/,417,not sorted,
pandas/,425,"GH 16734: not sorted, but no real slicing",
pandas/,432,slicing,
pandas/,436,setitem,
pandas/,460,axis 0,
pandas/,481,axis 1,
pandas/,490,invalid axis,
pandas/,498,GH29519,
pandas/,512,GH29519,
pandas/,527,GH29519,
pandas/,528,test single level indexing on single index column data frame,
pandas/,536,test index maker,
pandas/,539,test multi-index slicing with per axis and per index controls,
pandas/,553,identity,
pandas/,578,index,
pandas/,597,columns,
pandas/,604,both,
pandas/,623,setting with a list-like,
pandas/,632,not enough values,
pandas/,647,with an alignable rhs,
pandas/,701,GH 12697,
pandas/,732,GH 19861,
pandas/,10,GH 12416,
pandas/,11,with single item,
pandas/,19,with list,
pandas/,26,missing item:,
pandas/,52,ex from #1796,
pandas/,111,GH #397,
pandas/,127,this works...for now,
pandas/,135,GH#33355 dont fall-back to positional when leading level is int,
pandas/,156,---------------------------------------------------------------------,
pandas/,157,AMBIGUOUS CASES!,
pandas/,167,need to put in some work here,
pandas/,168,FIXME: dont leave commented-out,
pandas/,169,"self.ymd.loc[2000, 0] = 0",
pandas/,170,assert (self.ymd.loc[2000]['A'] == 0).all(),
pandas/,172,Pretty sure the second (and maybe even the first) is already wrong.,
pandas/,178,---------------------------------------------------------------------,
pandas/,212,gh-12660,
pandas/,28,GH14730,
pandas/,29,passing a series as a key with a MultiIndex,
pandas/,44,GH15424,
pandas/,59,GH15434,
pandas/,60,passing an array as a key with a MultiIndex,
pandas/,72,empty array:,
pandas/,82,0-dim array (scalar):,
pandas/,95,the first 2 rows,
pandas/,100,2nd (last) column,
pandas/,105,bottom right corner,
pandas/,110,with a tuple,
pandas/,137,GH 27148 - lists with missing labels do not raise:,
pandas/,149,GH 14885,
pandas/,164,GH6788,
pandas/,165,multi-index indexer is None (meaning take all),
pandas/,175,GH 7349,
pandas/,176,loc with a multi-index seems to be doing fallback,
pandas/,188,GH 7399,
pandas/,189,incomplete indexers,
pandas/,208,GH 7400,
pandas/,209,multiindexer gettitem with list of indexers skips wrong element,
pandas/,225,GH 3053,
pandas/,226,loc should treat integer slices like label slices,
pandas/,240,doc examples,
pandas/,257,GH #19686,
pandas/,258,.loc should work with nested indexers which can be,
pandas/,259,any list-like objects (see `pandas.api.types.is_list_like`) or slices,
pandas/,278,check indexers with all the combinations of nested objects,
pandas/,279,of all the valid types,
pandas/,296,empty ok,
pandas/,299,no values found - fine,
pandas/,300,"same, with single item list: GH 27148",
pandas/,306,GH 7866,
pandas/,307,multi-index slicing with missing indexers,
pandas/,326,GH 8737,
pandas/,327,empty indexer,
pandas/,338,regression from < 0.14.0,
pandas/,339,GH 7914,
pandas/,351,GH 671,
pandas/,382,test setup - check key not in dataframe,
pandas/,386,in theory should be inserting in a sorted space????,
pandas/,394,case from https://github.com/pandas-dev/pandas/issues/27841,
pandas/,404,test with non-object block,
pandas/,417,GH 5286,
pandas/,443,GH 9892,
pandas/,474,GH 16699,
pandas/,9,"GH4861, using datetime in period of multiindex raises exception",
pandas/,15,try Period as index,
pandas/,20,try datetime as index,
pandas/,16,loc with single label / list of labels:,
pandas/,17,- Intervals: only exact matches,
pandas/,18,- scalars: those that contain it,
pandas/,34,missing or not exact,
pandas/,68,loc with single label / list of labels:,
pandas/,69,- Intervals: only exact matches,
pandas/,70,- scalars: those that contain it,
pandas/,95,loc with slices:,
pandas/,96,- Interval objects: only works with exact matches,
pandas/,97,"- scalars: only works for non-overlapping, monotonic intervals,",
pandas/,98,and start/stop select location based on the interval that,
pandas/,99,contains them:,
pandas/,100,"(slice_loc(start, stop) == (idx.get_loc(start), idx.get_loc(stop))",
pandas/,104,slice of interval,
pandas/,131,slice of scalar,
pandas/,144,GH#31658 slice of scalar with step != 1,
pandas/,155,"GH#31658 slicing with integers is positional, with floats is not",
pandas/,156,supported,
pandas/,164,"GH#31658 allows for integer step!=1, not Interval step",
pandas/,175,scalar,
pandas/,189,interval,
pandas/,216,slices with interval (only exact matches),
pandas/,232,slices with scalar raise for overlapping intervals,
pandas/,233,TODO KeyError is the appropriate error?,
pandas/,66,this is a departure from our current,
pandas/,67,"indexing scheme, but simpler",
pandas/,99,single list-like,
pandas/,104,non-unique,
pandas/,112,partial missing,
pandas/,119,GH#27456,
pandas/,65,GH 6951,
pandas/,76,figsize and title,
pandas/,83,GH 8242,
pandas/,114,GH 7471,
pandas/,150,get name from index,
pandas/,156,override the default,
pandas/,161,"Add lebel info, but don't draw",
pandas/,164,Hasn't been drawn,
pandas/,165,draw it,
pandas/,169,GH 23719,
pandas/,185,remove nan for comparison purpose,
pandas/,226,GH 9905,
pandas/,267,Default rot 0,
pandas/,300,"if sum of values is less than 1.0, pie handle them as rate and draw",
pandas/,301,semicircle.,
pandas/,309,without wedge labels,
pandas/,313,with less colors than elements,
pandas/,320,with labels and colors,
pandas/,327,with autopct and fontsize,
pandas/,337,includes negative value,
pandas/,342,includes nan,
pandas/,364,GH 9853,
pandas/,373,bins=10,
pandas/,381,_check_plot_works adds an ax so catch warning. see GH #13188,
pandas/,419,_check_plot_works adds an ax so catch warning. see GH #13188,
pandas/,467,GH 9610,
pandas/,470,primary -> secondary,
pandas/,474,both legends are dran on left ax,
pandas/,475,left and right axis must be visible,
pandas/,481,secondary -> secondary,
pandas/,485,both legends are draw on left ax,
pandas/,486,"left axis must be invisible, right axis must be visible",
pandas/,492,secondary -> primary,
pandas/,495,right axes is returned,
pandas/,497,both legends are draw on left ax,
pandas/,498,left and right axis must be visible,
pandas/,506,GH 9779,
pandas/,510,primary -> secondary (without passing ax),
pandas/,514,both legends are dran on left ax,
pandas/,515,left and right axis must be visible,
pandas/,521,primary -> secondary (with passing ax),
pandas/,525,both legends are dran on left ax,
pandas/,526,left and right axis must be visible,
pandas/,532,secondary -> secondary (without passing ax),
pandas/,536,both legends are dran on left ax,
pandas/,537,left axis must be invisible and right axis must be visible,
pandas/,544,secondary -> secondary (with passing ax),
pandas/,548,both legends are dran on left ax,
pandas/,549,left axis must be invisible and right axis must be visible,
pandas/,556,secondary -> secondary (with passing ax),
pandas/,560,both legends are dran on left ax,
pandas/,561,left axis must be invisible and right axis must be visible,
pandas/,573,GH 25545,
pandas/,577,GH 24980,
pandas/,599,"ticks are values, thus ticklabels are blank",
pandas/,635,gh-14821: check if the values have any missing values,
pandas/,738,test line and bar plots,
pandas/,755,test time series plotting,
pandas/,766,check incorrect lengths and types,
pandas/,780,"Make sure plot defaults to rcParams['axes.grid'] setting, GH 9792",
pandas/,808,multiple colors like mediumaquamarine,
pandas/,822,single letter colors like k,
pandas/,837,GH1890,
pandas/,843,#1890,
pandas/,865,GH11529,
pandas/,873,GH28172,
pandas/,880,GH7222,
pandas/,908,test if xlim is also correctly plotted in Series for line and area,
pandas/,909,GH 27686,
pandas/,919,GH 27758,
pandas/,33,_check_plot_works adds an ax so catch warning. see GH #13188,
pandas/,54,"When ax is supplied and required number of axes is 1,",
pandas/,55,passed ax should be used:,
pandas/,66,Multiple columns with an ax argument should use same figure,
pandas/,74,"When by is None, check that all relevant lines are present in the",
pandas/,75,dict,
pandas/,83,GH 12216; return_type=None & by=None -> axes,
pandas/,89,API change in https://github.com/pandas-dev/pandas/pull/7096,
pandas/,90,noqa,
pandas/,124,One full row,
pandas/,130,"Two rows, one partial",
pandas/,162,GH 22799,
pandas/,188,GH: 26214,
pandas/,199,GH: 26214,
pandas/,214,GH 30346,
pandas/,276,now works with GH 5610 as gender is excluded,
pandas/,284,old style: return_type=None,
pandas/,291,now for groupby,
pandas/,335,_check_plot_works adds an ax so catch warning. see GH #13188,
pandas/,348,GH 6769,
pandas/,355,GH 5897,
pandas/,404,noqa,
pandas/,411,"GH 6970, GH 7069",
pandas/,414,check warning to ignore sharex / sharey,
pandas/,415,this check should be done in the first function which,
pandas/,416,"passes multiple axes to plot, hist or boxplot",
pandas/,417,location should be changed if other test is added,
pandas/,418,which has earlier alphabetical order,
pandas/,437,draw on second row,
pandas/,449,pass different number of axes from required,
pandas/,54,"We are running from a non-installed pandas, and this test is invalid",
pandas/,65,TODO: the docs recommend importlib.util.module_from_spec. But this works for now.,
pandas/,71,TODO: https://github.com/pandas-dev/pandas/issues/27517,
pandas/,72,Remove the td.skip_if_no_mpl,
pandas/,80,GH-28163,
pandas/,100,https://github.com/pandas-dev/pandas/pull/28647,
pandas/,26,Regression test for GH8733,
pandas/,31,GH 7025,
pandas/,43,GH10214,
pandas/,62,check that a scatter plot is effectively plotted: the axes should,
pandas/,63,contain a PathCollection from the scatter plot (GH11805),
pandas/,25,"try / except, rather than skip, to avoid internal refactoring",
pandas/,26,causing an improper skip,
pandas/,33,Check that Matplotlib converters are properly reset (see issue #27481),
pandas/,53,Run in subprocess to ensure a clean state,
pandas/,69,"Set to the ""warn"" state, in case this isn't the first test run",
pandas/,76,"Set to the ""warn"" state, in case this isn't the first test run",
pandas/,85,Can't make any assertion about the start state.,
pandas/,86,"We we check that toggling converters off removes it, and toggling it",
pandas/,87,on restores it.,
pandas/,102,"Test without registering first, no warning",
pandas/,106,Now test with registering,
pandas/,115,"make a copy, to reset to",
pandas/,119,get to a known state,
pandas/,131,restore original stater,
pandas/,167,also testing datetime64 dtype (GH8614),
pandas/,188,we have a tz-aware date (constructed to that when we turn to utc it,
pandas/,189,is the same as our sample),
pandas/,219,2579,
pandas/,239,time2num(datetime.time.min),
pandas/,240,time2num(datetime.time.max),
pandas/,247,issue 18478,
pandas/,267,Matplotlib's time representation using floats cannot distinguish,
pandas/,268,intervals smaller than ~10 microsecond in the common range of years.,
pandas/,338,GH9012,
pandas/,48,"GH2877, GH17173, GH31205, GH31580",
pandas/,56,Check first and last points' labels are correct,
pandas/,61,For issue #8765,
pandas/,70,inferred freq,
pandas/,77,axes freq,
pandas/,82,N > 1,
pandas/,89,GH11858,
pandas/,100,it works,
pandas/,101,B was plotted,
pandas/,175,"note this is added to the annual plot already in existence, and",
pandas/,176,changes its freq field,
pandas/,192,test period index line plot for series with multiples (`mlt`) of the,
pandas/,193,frequency (`frqncy`) rule code. tests resolution of issue #14763,
pandas/,213,test period index line plot for DataFrames with multiples (`mlt`),
pandas/,214,of the frequency (`frqncy`) rule code. tests resolution of issue,
pandas/,215,#14763,
pandas/,329,GH2571,
pandas/,353,string,
pandas/,360,datetime,
pandas/,534,irregular,
pandas/,553,non-ts,
pandas/,685,TODO,
pandas/,689,it works!,
pandas/,721,GH 9852,
pandas/,739,GH 9852,
pandas/,814,"GH13341, using sharex=True",
pandas/,828,using twinx,
pandas/,836,"TODO (GH14330, GH14322)",
pandas/,837,plotting the irregular first does not yet work,
pandas/,838,"fig, ax1 = plt.subplots()",
pandas/,839,ax2 = ax1.twinx(),
pandas/,840,s2.plot(ax=ax1),
pandas/,841,s1.plot(ax=ax2),
pandas/,842,"assert (ax1.lines[0].get_xydata()[0, 0] ==",
pandas/,843,"ax2.lines[0].get_xydata()[0, 0])",
pandas/,853,plot x data is bounded by index values,
pandas/,887,idxl lines,
pandas/,900,low to high,
pandas/,906,check low dataframe result,
pandas/,929,check stacked values are correct,
pandas/,933,check high dataframe result,
pandas/,943,high to low,
pandas/,949,check high dataframe result,
pandas/,959,check low dataframe result,
pandas/,987,"GH 7772, GH 7760",
pandas/,992,high to low,
pandas/,1001,low to high,
pandas/,1011,date,
pandas/,1016,np.datetime64,
pandas/,1034,verify tick labels,
pandas/,1059,verify tick labels,
pandas/,1073,change xlim,
pandas/,1076,check tick labels again,
pandas/,1101,verify tick labels,
pandas/,1143,ts,
pandas/,1157,TODO: color cycle problems,
pandas/,1197,TODO: color cycle problems,
pandas/,1201,non-ts,
pandas/,1213,TODO: color cycle problems,
pandas/,1227,TODO: color cycle problems,
pandas/,1269,GH 2960,
pandas/,1273,"plot the left section of the irregular series, then the right section",
pandas/,1278,check that axis limits are correct,
pandas/,1285,GH 3490 - non-timeseries with secondary y,
pandas/,1302,GH 3490 - regular-timeseries with secondary y,
pandas/,1319,GH 3490 - mixed frequency timeseries with secondary y,
pandas/,1329,a downsample should not have changed either limit,
pandas/,1335,GH 3490 - irregular-timeseries with secondary y,
pandas/,1341,plot higher-x values on secondary axis,
pandas/,1343,ensure secondary limits aren't overwritten by plot on primary,
pandas/,1351,2579 - checking this does not raise,
pandas/,1399,test issue #8711,
pandas/,1404,test long period,
pandas/,1410,test short period,
pandas/,1417,https://github.com/matplotlib/matplotlib/issues/8459,
pandas/,1427,GB 6608,
pandas/,1445,"plot first series, then add the second series to those axes,",
pandas/,1446,then try adding the first series again,
pandas/,1454,GH9053 - ensure that a plot with PeriodConverter still understands,
pandas/,1455,datetime64 data. This still fails because matplotlib overrides the,
pandas/,1456,ax.xaxis.converter with a DatetimeConverter,
pandas/,1464,https://github.com/matplotlib/matplotlib/issues/11391,
pandas/,1492,do something more intelligent,
pandas/,1508,TODO: do something more intelligent,
pandas/,1513,GH18439,
pandas/,1514,this is supported only in Python 3 pickle since,
pandas/,1515,pickle in Python2 doesn't support instancemethod pickling,
pandas/,1516,TODO(statsmodels 0.10.0): Remove the statsmodels check,
pandas/,1517,https://github.com/pandas-dev/pandas/issues/24088,
pandas/,1518,https://github.com/statsmodels/statsmodels/issues/4772,
pandas/,57,_check_plot_works adds an ax so catch warning. see GH #13188,
pandas/,89,"We have to redo it here because _check_plot_works does two plots,",
pandas/,90,once without an ax kwarg and once with an ax kwarg and the new sharex,
pandas/,91,behaviour does not remove the visibility of the latter axis (as ax is,
pandas/,92,present).  see: https://github.com/pandas-dev/pandas/issues/9737,
pandas/,96,"axes[0].figure.savefig(""test.png"")",
pandas/,98,xaxis must be visible for grid,
pandas/,114,unicode,
pandas/,134,GH 6951,
pandas/,135,Test with single column,
pandas/,142,"When ax is supplied and required number of axes is 1,",
pandas/,143,passed ax should be used:,
pandas/,151,GH 25587,
pandas/,169,GH 15516,
pandas/,176,GH 3486,
pandas/,181,GH 16695,
pandas/,193,passing both 'color' and 'style' arguments should be allowed,
pandas/,194,if there is no color symbol in the style strings:,
pandas/,196,check that the linestyles are correctly set:,
pandas/,199,check that the colors are correctly set:,
pandas/,202,passing both 'color' and 'style' arguments should not be allowed,
pandas/,203,if there is a color symbol in the style strings:,
pandas/,210,B was plotted,
pandas/,220,GH 8494,
pandas/,228,columns.inferred_type == 'string',
pandas/,237,columns.inferred_type == 'integer',
pandas/,243,figsize and title,
pandas/,248,columns.inferred_type == 'mixed',
pandas/,249,TODO add MultiIndex test,
pandas/,273,GH: 24867,
pandas/,304,useful if you're plotting a bunch together,
pandas/,317,GH 9012,
pandas/,318,period-array conversions,
pandas/,385,xaxis must be visible for grid,
pandas/,388,change https://github.com/pandas-dev/pandas/issues/26714,
pandas/,412,https://github.com/pandas-dev/pandas/issues/20968,
pandas/,413,sharey can now be switched check whether the right,
pandas/,414,pair of axes is turned on or off,
pandas/,425,behavior without keyword,
pandas/,430,set sharey=True should be identical,
pandas/,435,"sharey=False, all yticklabels should be visible",
pandas/,441,https://github.com/pandas-dev/pandas/issues/20968,
pandas/,442,sharex can now be switched check whether the right,
pandas/,443,pair of axes is turned on or off,
pandas/,454,behavior without keyword,
pandas/,459,set sharex=False should be identical,
pandas/,464,"sharex=True, yticklabels should be visible",
pandas/,465,only for bottom plots,
pandas/,480,GH 7801,
pandas/,481,xaxis must be visible for grid,
pandas/,504,GH16953,
pandas/,602,GH 6667,
pandas/,634,single column,
pandas/,646,GH 9464,
pandas/,658,"GH 5353, 6970, GH 7069",
pandas/,666,draw on second row,
pandas/,676,pass different number of axes from required,
pandas/,679,pass 2-dim axes and invalid layout,
pandas/,680,invalid lauout should not affect to input and return value,
pandas/,681,(show warning is tested in,
pandas/,682,TestDataFrameGroupByPlots.test_grouped_box_multiple_axes,
pandas/,706,single column,
pandas/,715,GH 3964,
pandas/,725,Rows other than bottom should not be visible,
pandas/,729,Bottom row should be visible,
pandas/,733,First column should be visible,
pandas/,737,Other columns should not be visible,
pandas/,744,GH 9158,
pandas/,758,GH 10962,
pandas/,768,(right) is only attached when subplots=False,
pandas/,793,get y coordinates,
pandas/,801,each column has either positive or negative value,
pandas/,805,each column has positive-negative mixed value,
pandas/,830,"Use an index with strictly positive values, preventing",
pandas/,831,matplotlib from warning about ignoring xlim,
pandas/,845,remove nan for comparison purpose,
pandas/,933,Test str -> colormap functionality,
pandas/,939,Test colormap functionality,
pandas/,957,"This should *only* work when `y` is specified, else",
pandas/,958,we use one color per column,
pandas/,973,regular,
pandas/,978,stacked,
pandas/,983,subplots,
pandas/,996,regular,
pandas/,1001,stacked,
pandas/,1006,horizontal regular,
pandas/,1011,horizontal stacked,
pandas/,1016,subplots,
pandas/,1022,horizontal subplots,
pandas/,1050,GH 12979,
pandas/,1058,check left-edge of bars,
pandas/,1115,GH 13019,
pandas/,1121,categorical index must behave the same,
pandas/,1133,check left-edge of bars,
pandas/,1159,GH 6951,
pandas/,1164,"GH 8113, datetime.time type is not supported by matplotlib in scatter",
pandas/,1173,GH 30391,
pandas/,1182,GH 18755,
pandas/,1195,"addressing issue #10611, to ensure colobar does not",
pandas/,1196,interfere with x-axis label and ticklabels with,
pandas/,1197,ipython inline backend.,
pandas/,1218,"addressing issue #10678, to ensure colobar does not",
pandas/,1219,interfere with x-axis label and ticklabels with,
pandas/,1220,ipython inline backend.,
pandas/,1250,"after fixing GH 18755, should be able to plot categorical data",
pandas/,1267,default to Greys,
pandas/,1270,n.b. there appears to be no public method,
pandas/,1271,to get the colorbar label,
pandas/,1278,verify turning off colorbar works,
pandas/,1282,verify that we can still plot a solid color,
pandas/,1287,"Ensure that we can pass an np.array straight through to matplotlib,",
pandas/,1288,this functionality was accidentally removed previously.,
pandas/,1289,See https://github.com/pandas-dev/pandas/issues/8852 for bug report,
pandas/,1290,,
pandas/,1291,Exercise colormap path and non-colormap path as they are independent,
pandas/,1292,,
pandas/,1298,expect the face colors of the points in the non-colormap path to be,
pandas/,1299,"identical to the values we supplied, normally we'd be on shaky ground",
pandas/,1300,comparing floats for equality but here we expect them to be,
pandas/,1301,identical.,
pandas/,1303,we don't test the colors of the faces in this next plot because they,
pandas/,1304,"are dependent on the spring colormap, which may change its colors",
pandas/,1305,later.,
pandas/,1310,this refers to GH 32904,
pandas/,1336,GH 33389,
pandas/,1359,_check_plot_works adds an ax so catch warning. see GH #13188,
pandas/,1419,GH 7498,
pandas/,1420,compare margins between lim and bar edges,
pandas/,1440,Check the ticks locates on integer,
pandas/,1444,Check whether the bar locates on center,
pandas/,1447,Check whether the bar's edge starts from the tick,
pandas/,1456,GH2157,
pandas/,1520,"GH3254, GH3298 matplotlib/matplotlib#1882, #1892",
pandas/,1521,regressions in 1.2.1,
pandas/,1524,no subplots,
pandas/,1574,"if horizontal, yticklabels are rotated",
pandas/,1580,_check_plot_works adds an ax so catch warning. see GH #13188,
pandas/,1611,default axes,
pandas/,1621,normal style: return_type=None,
pandas/,1684,height of last bin (index 5) must be 1.0,
pandas/,1695,"if horizontal, yticklabels are rotated",
pandas/,1703,GH 33173,
pandas/,1712,"original heights with no weights, and we manually multiply with example",
pandas/,1713,"weights, so after multiplication, they should be almost same",
pandas/,1730,"dtype is depending on above values, no need to check",
pandas/,1819,horizontal,
pandas/,1901,Secondary Y,
pandas/,1911,Time Series,
pandas/,1923,scatter,
pandas/,1931,ensure label args pass through and,
pandas/,1932,index name does not mutate,
pandas/,1933,column names don't mutate,
pandas/,1945,GH 18222,
pandas/,1950,Left plot,
pandas/,1956,Center plot,
pandas/,1962,Right plot,
pandas/,2062,make color a list if plotting one column frame,
pandas/,2063,handles cases like df.plot(color='DodgerBlue'),
pandas/,2071,GH 10299,
pandas/,2085,GH 9894,
pandas/,2098,single color char,
pandas/,2104,single color str,
pandas/,2121,GH 10299,
pandas/,2135,make color a list if plotting one column frame,
pandas/,2136,handles cases like df.plot(color='DodgerBlue'),
pandas/,2140,single character style,
pandas/,2146,list of styles,
pandas/,2185,"When stacked=False, alpha is set to 0.5",
pandas/,2214,Test str -> colormap functionality,
pandas/,2220,Test colormap functionality,
pandas/,2268,single color char,
pandas/,2274,single color str,
pandas/,2293,make color a list if plotting one column frame,
pandas/,2294,handles cases like df.plot(color='DodgerBlue'),
pandas/,2298,single character style,
pandas/,2304,list of styles,
pandas/,2314,TODO: outside this func?,
pandas/,2348,partial colors,
pandas/,2356,Test str -> colormap functionality,
pandas/,2362,Test colormap functionality,
pandas/,2367,string color is applied to all artists except fliers,
pandas/,2371,tuple is also applied to all artists except fliers,
pandas/,2376,Color contains invalid key results in ValueError,
pandas/,2389,GH 30346,
pandas/,2452,area plot doesn't support positive/negative mixed data,
pandas/,2474,"GH 18671, 19699 allows y to be list-like but not x",
pandas/,2481,"GH 18671, 19699 allows y to be list-like but not x",
pandas/,2495,GH 19699: tests list-like y and verifies lbls & colors,
pandas/,2505,GH 20056: tests integer args for xy and checks col names,
pandas/,2515,TODO: need better way to test. This just does existence.,
pandas/,2518,GH 6951,
pandas/,2520,"hexbin should have 2 axes in the figure, 1 for plotting and another",
pandas/,2521,is colorbar,
pandas/,2523,return value is single axes,
pandas/,2540,Default to BuGn,
pandas/,2581,_check_plot_works adds an ax so catch warning. see GH #13188,
pandas/,2611,force copy,
pandas/,2615,legend labels,
pandas/,2616,NaN's not included in legend with subplots,
pandas/,2617,see https://github.com/pandas-dev/pandas/issues/8390,
pandas/,2630,check line plots,
pandas/,2653,_check_plot_works adds an ax so catch warning. see GH #13188,
pandas/,2664,yerr is raw error values,
pandas/,2670,yerr is column name,
pandas/,2693,yerr is iterator,
pandas/,2699,test with integer column names,
pandas/,2737,check time-series plots,
pandas/,2755,_check_plot_works adds an ax so catch warning. see GH #13188,
pandas/,2766,"each column is [0, 1, 2, 3, 4], [3, 4, 5, 6, 7]...",
pandas/,2819,GH 8081,
pandas/,2832,"https://github.com/pandas-dev/pandas/issues/9737 using gridspec,",
pandas/,2833,the axis in fig.get_axis() are sorted differently than pandas,
pandas/,2834,"expected them, so make sure that only the right ones are removed",
pandas/,2873,"without sharex, no labels should be touched!",
pandas/,2887,"https://github.com/pandas-dev/pandas/issues/9737 using gridspec,",
pandas/,2888,the axis in fig.get_axis() are sorted differently than pandas,
pandas/,2889,"expected them, so make sure that only the right ones are removed",
pandas/,2928,"without sharex, no labels should be touched!",
pandas/,2957,Use a weakref so we can see if the object gets collected without,
pandas/,2958,also preventing it from being collected,
pandas/,2961,have matplotlib delete all the figures,
pandas/,2963,force a garbage collection,
pandas/,2966,check that every plot was collected,
pandas/,2968,need to actually access something to get an error,
pandas/,2973,GH 10657,
pandas/,2982,shared subplots,
pandas/,2988,xaxis of 1st ax must be hidden,
pandas/,3001,xaxis of 1st ax must be hidden,
pandas/,3008,not shared,
pandas/,3020,GH 10819,
pandas/,3053,subplots=True,
pandas/,3064,vertical / subplots / sharex=True / sharey=True,
pandas/,3071,yaxis are visible because there is only one column,
pandas/,3073,xaxis of axes0 (top) are hidden,
pandas/,3080,horizontal / subplots / sharex=True / sharey=True,
pandas/,3087,yaxis of axes1 (right) are hidden,
pandas/,3090,xaxis are visible because there is only one column,
pandas/,3095,boxed,
pandas/,3110,axis are visible because these are not shared,
pandas/,3116,subplots / sharex=True / sharey=True,
pandas/,3122,left column,
pandas/,3124,right column,
pandas/,3126,top row,
pandas/,3129,bottom row,
pandas/,3136,"Make sure plot defaults to rcParams['axes.grid'] setting, GH 9792",
pandas/,3151,"supplied ax itself is a SubplotAxes, but figure contains also",
pandas/,3152,a plain Axes object (GH11556),
pandas/,3157,"supplied ax itself is a plain Axes, but because the cmap keyword",
pandas/,3158,a new ax is created for the colorbar -> also multiples axes (GH11520),
pandas/,3164,other examples,
pandas/,3198,GH: 12565,
pandas/,3214,Test if string plot index have a fixed xtick position,
pandas/,3215,"GH: 7612, GH: 22334",
pandas/,3227,Testing if the label stayed at the right position,
pandas/,3234,Test if multiindex plot index have a fixed xtick position,
pandas/,3235,GH: 15912,
pandas/,3242,Testing if the label stayed at the right position,
pandas/,3250,test if xlim is set correctly in plot.line and plot.area,
pandas/,3251,GH 27686,
pandas/,3259,test if xlim is set correctly when ax contains multiple different kinds,
pandas/,3260,"of plots, GH 27686",
pandas/,3280,make sure axis labels are plotted correctly as well,
pandas/,3285,"test when sharex is set to False, two plots should have different",
pandas/,3286,"labels, GH 25160",
pandas/,3301,GH 27758,
pandas/,3316,14958,
pandas/,3326,14563,
pandas/,3344,ISSUE 11136 -> https://github.com/pandas-dev/pandas/issues/11136,
pandas/,3345,Creating a DataFrame with duplicate column labels and testing colors of them.,
pandas/,3357,noqa,
pandas/,30,_check_plot_works adds an ax so catch warning. see GH #13188,
pandas/,68,_check_plot_works adds an `ax` kwarg to the method call,
pandas/,69,"so we get a warning about an axis being cleared, even",
pandas/,70,"though we don't explicing pass one, see GH #13188",
pandas/,119,noqa,
pandas/,142,make sure layout is handled,
pandas/,152,make sure layout is handled,
pandas/,158,"make sure sharex, sharey is handled",
pandas/,162,handle figsize arg,
pandas/,166,check bins argument,
pandas/,170,make sure xlabelsize and xrot are handled,
pandas/,189,height of last bin (index 5) must be 1.0,
pandas/,195,scale of y must be 'log',
pandas/,200,propagate attr exception from matplotlib.Axes.hist,
pandas/,206,gh-10444,
pandas/,219,default is 2x2,
pandas/,235,layout too small for all 4 plots,
pandas/,239,invalid format for layout,
pandas/,246,GH 9351,
pandas/,255,GH 30288,
pandas/,292,group by a key with single value,
pandas/,298,make sure kwargs to hist are handled,
pandas/,313,height of last bin (index 5) must be 1.0,
pandas/,324,scale of y must be 'log',
pandas/,328,propagate attr exception from matplotlib.Axes.hist,
pandas/,387,GH 6769,
pandas/,394,without column,
pandas/,407,"GH 6970, GH 7069",
pandas/,422,pass different number of axes from required,
pandas/,428,GH4089,
pandas/,431,share x,
pandas/,435,don't share y,
pandas/,444,share y,
pandas/,448,don't share x,
pandas/,457,share both x and y,
pandas/,167,unique and colors length can be differed,
pandas/,168,depending on slice value,
pandas/,204,Line2D may contains string color expression,
pandas/,223,returned as list of np.array,
pandas/,277,"If minor ticks has NullFormatter, rot / fontsize are not",
pandas/,278,retained,
pandas/,342,check something drawn on visible axes,
pandas/,358,check axes coordinates to estimate layout,
pandas/,429,should be fixed when the returning default is changed,
pandas/,438,should be fixed when the returning default is changed,
pandas/,449,check returned dict has correct mapping,
pandas/,467,"Make sure plot defaults to rcParams['axes.grid'] setting, GH 9792",
pandas/,474,"for mpl 2.2.2, gridOn and gridline.get_visible disagree.",
pandas/,475,"for new MPL, they are the same.",
pandas/,19,GH-19810,
pandas/,104,we are plotting multiples on a sub-plot,
pandas/,111,GH 5662,
pandas/,118,we are plotting multiples on a sub-plot,
pandas/,249,not sure if this is indicative of a problem,
pandas/,273,labels and colors are ordered strictly increasing,
pandas/,286,skip Circle drawn as ticks,
pandas/,311,Use the column names as the subplot titles,
pandas/,314,Case len(title) == len(df),
pandas/,318,Case len(title) > len(df),
pandas/,326,Case len(title) < len(df),
pandas/,330,Case subplots=False and title is of type list,
pandas/,338,"Case df with 3 numeric columns but layout of (2,2)",
pandas/,346,GH17525,
pandas/,349,Make sure that the random seed isn't reset by _get_standard_colors,
pandas/,356,Make sure it produces the same colors every time it's called,
pandas/,366,Make sure the default color_types returns the specified amount,
pandas/,375,Example from #20585. All 3 bars should have the same color,
pandas/,391,GH20726,
pandas/,393,Make sure not to add more colors so that matplotlib can cycle,
pandas/,394,correctly.,
pandas/,410,issue-8193,
pandas/,411,Test plot color dictionary format,
pandas/,419,Bar color test,
pandas/,424,Line color test,
pandas/,16,GH#11818,
pandas/,75,with NaT,
pandas/,85,string with NaT,
pandas/,91,coercion,
pandas/,92,GH 7930,
pandas/,108,Null values with Strings,
pandas/,113,Null values with Integers,
pandas/,121,GH 30011,
pandas/,122,format='%Y%m%d',
pandas/,123,with None,
pandas/,131,NaN before strings with invalid date values,
pandas/,136,NaN after strings with invalid date values,
pandas/,141,NaN before integers with invalid date values,
pandas/,146,NaN after integers with invalid date values,
pandas/,154,GH 25512,
pandas/,155,"format='%Y%m%d', errors='coerce'",
pandas/,161,GH 10178,
pandas/,177,"valid date, length == 8",
pandas/,179,"short valid date, length == 6",
pandas/,181,"long integer date partially parsed to datetime(2012,1,1), length > 8",
pandas/,183,"invalid date partially parsed to datetime(2012,9,9), length == 8",
pandas/,185,"short integer date partially parsed to datetime(2012,9,9), length < 8",
pandas/,187,"short invalid date, length == 4",
pandas/,192,GH 26583,
pandas/,199,these are locale dependent,
pandas/,218,",",
pandas/,219,"['01/10/2010 08:14 PM', '%m/%d/%Y %I:%M %p',",
pandas/,220,"Timestamp('2010-01-10 20:14')],",
pandas/,221,"['01/10/2010 07:40 AM', '%m/%d/%Y %I:%M %p',",
pandas/,222,"Timestamp('2010-01-10 07:40')],",
pandas/,223,"['01/10/2010 09:12:56 AM', '%m/%d/%Y %I:%M:%S %p',",
pandas/,224,Timestamp('2010-01-10 09:12:56')],
pandas/,232,GH 10834,
pandas/,233,8904,
pandas/,234,exact kw,
pandas/,247,GH8989,
pandas/,248,truncating the nanoseconds when a format was provided,
pandas/,314,pytz coerces to UTC,
pandas/,321,GH 13486,
pandas/,327,GH 32792,
pandas/,356,GH 21697,
pandas/,374,See GH#16607,
pandas/,461,See GH#16607,
pandas/,462,This test checks for errors thrown when giving the wrong format,
pandas/,463,"However, as discussed on PR#25541, overriding the locale",
pandas/,464,causes a different error to be thrown due to the format being,
pandas/,465,"locale specific, but the test data is in english.",
pandas/,466,"Therefore, the tests only run when locale is not overwritten,",
pandas/,467,as a sort of solution to this problem.,
pandas/,477,DatetimeArray,
pandas/,496,unparseable,
pandas/,500,`tm.set_timezone` does not work in windows,
pandas/,502,See GH#18666,
pandas/,508,These should all be equal with infinite perf; this gives,
pandas/,509,a generous margin of 10 seconds,
pandas/,516,`tm.set_timezone` does not work in windows,
pandas/,518,See GH#18666,
pandas/,519,"Test with one timezone far ahead of UTC and another far behind, so",
pandas/,520,one of these will _almost_ always be in a different day from UTC.,
pandas/,521,Unfortunately this test between 12 and 1 AM Samoa time,
pandas/,522,"this both of these timezones _and_ UTC will all be in the same day,",
pandas/,523,so this test will not detect the regression introduced in #18666.,
pandas/,524,12-13 hours ahead of UTC,
pandas/,532,These should all be equal with infinite perf; this gives,
pandas/,533,a generous margin of 10 seconds,
pandas/,542,11 hours behind UTC,
pandas/,547,These should all be equal with infinite perf; this gives,
pandas/,548,a generous margin of 10 seconds,
pandas/,581,https://github.com/pandas-dev/pandas/issues/31491,
pandas/,582,Need at least 50 to ensure cache is used.,
pandas/,587,"Assuming all datetimes are in bounds, to_datetime() returns",
pandas/,588,an array that is equal to Timestamp() parsing,
pandas/,594,A list of datetimes where the last one is out of bounds,
pandas/,609,"With errors='ignore', out of bounds datetime64s",
pandas/,610,"are converted to their .item(), which depending on the version of",
pandas/,611,numpy is either a python datetime.datetime or datetime.date,
pandas/,620,xref 8260,
pandas/,621,uniform returns a DatetimeIndex,
pandas/,632,mixed tzs will raise,
pandas/,646,inspired by asv timeseries.ToDatetimeNONISO8601 benchmark,
pandas/,647,see GH-26097 for more,
pandas/,657,see gh-8260,
pandas/,691,See gh-11934 & gh-6415,
pandas/,704,Test scalar case as well,
pandas/,713,GH 15760 UTC=True with Series,
pandas/,745,xref 8260,
pandas/,748,misc cases,
pandas/,767,dtype coercion,
pandas/,774,tz coercion,
pandas/,786,GH13176,
pandas/,807,GH13176,
pandas/,818,GH24763,
pandas/,838,GH24763,
pandas/,864,GH24763,
pandas/,902,GH 29403,
pandas/,906,GH 29403,
pandas/,939,GH16774,
pandas/,946,GH 26122,
pandas/,963,GH 28299,
pandas/,970,"GH 17697, 11736",
pandas/,984,"GH 17697, 11736",
pandas/,995,GH 21864,
pandas/,1006,GH 24992,
pandas/,1035,GH 25978,
pandas/,1066,GH 24415,
pandas/,1072,GH 9107,
pandas/,1097,GH 11758,
pandas/,1098,test proper behavior with errors,
pandas/,1142,"if we have a string, then we raise a ValueError",
pandas/,1143,and NOT an OutOfBoundsDatetime,
pandas/,1155,consistency of conversions,
pandas/,1172,GH 13180,
pandas/,1173,coercions from floats/ints are ok,
pandas/,1184,but we want to make sure that we are coercing,
pandas/,1185,if we have ints/strings,
pandas/,1201,mixed integers/datetimes,
pandas/,1220,GH 14156: argument will incur floating point errors but no,
pandas/,1221,premature rounding,
pandas/,1228,GH 21697,
pandas/,1258,dict-like,
pandas/,1262,dict but with constructable,
pandas/,1271,unit mappings,
pandas/,1319,coerce back to int,
pandas/,1323,passing coerce,
pandas/,1336,extra columns,
pandas/,1343,not enough,
pandas/,1358,duplicates,
pandas/,1374,#13451,
pandas/,1377,int16,
pandas/,1384,mixed dtypes,
pandas/,1393,float,
pandas/,1399,GH 23760,
pandas/,1408,GH 23758,
pandas/,1413,"TODO: this is moved from tests.series.test_timeseries, may be redundant",
pandas/,1447,GH13834,
pandas/,1483,coerce we can process,
pandas/,1496,GH#19529,
pandas/,1497,GH#19382 close enough to bounds that dropping nanos would result,
pandas/,1498,in an in-bounds datetime,
pandas/,1510,bad iso 8601,
pandas/,1520,dayfirst is essentially broken,
pandas/,1522,"to_datetime('01-13-2012', dayfirst=True)",
pandas/,1523,"pytest.raises(ValueError, to_datetime('01-13-2012',",
pandas/,1524,dayfirst=True)),
pandas/,1528,#2699,
pandas/,1536,GH 6428,
pandas/,1550,this is only locale tested with US/None locales,
pandas/,1551,GH 5195,
pandas/,1552,with a format and coerce a single item to_datetime fails,
pandas/,1574,empty string,
pandas/,1581,ints,
pandas/,1586,GH 3888 (strings),
pandas/,1591,"array = ['2012','20120101','20120101 12:01:01']",
pandas/,1597,currently fails,
pandas/,1598,result = Timestamp('2012'),
pandas/,1599,expected = to_datetime('2012'),
pandas/,1600,assert result == expected,
pandas/,1604,GH 4928,
pandas/,1605,GH 21864,
pandas/,1615,5/25/2012,
pandas/,1636,gh-17637,
pandas/,1637,we are overflowing Timedelta range here,
pandas/,1644,"GH #999, #858",
pandas/,1666,"GH 10636, default is now 'raise'",
pandas/,1672,GH 21864,
pandas/,1725,GH 9114,
pandas/,1737,GH 5917,
pandas/,1757,GH#27733,
pandas/,1809,"Whether the format is explicitly passed, it is inferred, or",
pandas/,1810,"it is not inferred, the results should all be the same",
pandas/,1822,"When the format is inconsistent, infer_datetime_format should just",
pandas/,1823,fallback to the default parsing,
pandas/,1869,GH 33133,
pandas/,1879,GH 11871,
pandas/,1895,tests for issue #10154,
pandas/,1959,quarterly without space,
pandas/,1987,GHE10537,
pandas/,2001,dateutil >= 2.5.0 defaults to yearfirst=True,
pandas/,2002,https://github.com/dateutil/dateutil/issues/217,
pandas/,2008,result5 is used below,
pandas/,2013,result7 is used below,
pandas/,2023,"these really need to have yearfirst, but we don't support",
pandas/,2034,GH22305,
pandas/,2040,Test that each of several string-accepting methods return pd.NaT,
pandas/,2052,OK,
pandas/,2053,"2.5.1 10-11-12   [dayfirst=0, yearfirst=0] -> 2012-10-11 00:00:00",
pandas/,2054,"2.5.2 10-11-12   [dayfirst=0, yearfirst=1] -> 2012-10-11 00:00:00",
pandas/,2055,"2.5.3 10-11-12   [dayfirst=0, yearfirst=0] -> 2012-10-11 00:00:00",
pandas/,2057,OK,
pandas/,2058,"2.5.1 10-11-12   [dayfirst=0, yearfirst=1] -> 2010-11-12 00:00:00",
pandas/,2059,"2.5.2 10-11-12   [dayfirst=0, yearfirst=1] -> 2010-11-12 00:00:00",
pandas/,2060,"2.5.3 10-11-12   [dayfirst=0, yearfirst=1] -> 2010-11-12 00:00:00",
pandas/,2062,bug fix in 2.5.2,
pandas/,2063,"2.5.1 10-11-12   [dayfirst=1, yearfirst=1] -> 2010-11-12 00:00:00",
pandas/,2064,"2.5.2 10-11-12   [dayfirst=1, yearfirst=1] -> 2010-12-11 00:00:00",
pandas/,2065,"2.5.3 10-11-12   [dayfirst=1, yearfirst=1] -> 2010-12-11 00:00:00",
pandas/,2067,OK,
pandas/,2068,"2.5.1 10-11-12   [dayfirst=1, yearfirst=0] -> 2012-11-10 00:00:00",
pandas/,2069,"2.5.2 10-11-12   [dayfirst=1, yearfirst=0] -> 2012-11-10 00:00:00",
pandas/,2070,"2.5.3 10-11-12   [dayfirst=1, yearfirst=0] -> 2012-11-10 00:00:00",
pandas/,2072,OK,
pandas/,2073,"2.5.1 20/12/21   [dayfirst=0, yearfirst=0] -> 2021-12-20 00:00:00",
pandas/,2074,"2.5.2 20/12/21   [dayfirst=0, yearfirst=0] -> 2021-12-20 00:00:00",
pandas/,2075,"2.5.3 20/12/21   [dayfirst=0, yearfirst=0] -> 2021-12-20 00:00:00",
pandas/,2077,OK,
pandas/,2078,"2.5.1 20/12/21   [dayfirst=0, yearfirst=1] -> 2020-12-21 00:00:00",
pandas/,2079,"2.5.2 20/12/21   [dayfirst=0, yearfirst=1] -> 2020-12-21 00:00:00",
pandas/,2080,"2.5.3 20/12/21   [dayfirst=0, yearfirst=1] -> 2020-12-21 00:00:00",
pandas/,2082,revert of bug in 2.5.2,
pandas/,2083,"2.5.1 20/12/21   [dayfirst=1, yearfirst=1] -> 2020-12-21 00:00:00",
pandas/,2084,"2.5.2 20/12/21   [dayfirst=1, yearfirst=1] -> month must be in 1..12",
pandas/,2085,"2.5.3 20/12/21   [dayfirst=1, yearfirst=1] -> 2020-12-21 00:00:00",
pandas/,2087,OK,
pandas/,2088,"2.5.1 20/12/21   [dayfirst=1, yearfirst=0] -> 2021-12-20 00:00:00",
pandas/,2089,"2.5.2 20/12/21   [dayfirst=1, yearfirst=0] -> 2021-12-20 00:00:00",
pandas/,2090,"2.5.3 20/12/21   [dayfirst=1, yearfirst=0] -> 2021-12-20 00:00:00",
pandas/,2092,"str : dayfirst, yearfirst, expected",
pandas/,2111,compare with dateutil result,
pandas/,2121,we don't support dayfirst/yearfirst here:,
pandas/,2140,must be the same as dateutil result,
pandas/,2152,parse time string return time string based on default date,
pandas/,2153,"others are not, and can't be changed because it is used in",
pandas/,2154,time series plot,
pandas/,2180,GH11708,
pandas/,2239,"gh-11276, gh-11745",
pandas/,2240,for origin as julian,
pandas/,2254,default,
pandas/,2265,out-of-bounds,
pandas/,2271,checking for invalid combination of origin='julian' and unit != D,
pandas/,2278,need to have a numeric specified,
pandas/,2309,GH16842,
pandas/,2315,see gh-23830,
pandas/,2321,make sure we handle out-of-bounds *before*,
pandas/,2322,constructing the dates,
pandas/,2346,GH 25546,
pandas/,2379,Test for #30050,
pandas/,2396,Check that ser isn't mutated,
pandas/,56,see gh-16302,
pandas/,78,Bool is regarded as numeric.,
pandas/,122,Coerces to float.,
pandas/,152,Boolean is regarded as numeric.,
pandas/,176,One column.,
pandas/,178,Multiple columns.,
pandas/,183,see gh-14827,
pandas/,210,Test to_numeric with embedded lists and arrays,
pandas/,227,see gh-11776,
pandas/,243,see gh-24910,
pandas/,260,see gh-24910,
pandas/,299,see gh-24910,
pandas/,300,,
pandas/,301,"Even if we discover that we have to hold float, does not mean",
pandas/,302,we should be lenient on subsequent elements that fail to be integer.,
pandas/,399,"TODO: PeriodDtype, so support it in to_numeric.",
pandas/,412,see gh-13324,
pandas/,424,see gh-13352,
pandas/,434,see gh-26466,
pandas/,454,Basic function tests.,
pandas/,457,Support below np.float32 is rare and far between.,
pandas/,459,Basic dtype support.,
pandas/,464,see gh-13352,
pandas/,480,see gh-13352,
pandas/,489,If we can't successfully cast the given,
pandas/,490,"data to a numeric dtype, do not bother",
pandas/,491,with the downcast parameter.,
pandas/,500,Cannot cast to an unsigned integer,
pandas/,501,because we have a negative number.,
pandas/,523,Cannot cast to an integer (signed or unsigned),
pandas/,524,because we have a float number.,
pandas/,534,the smallest integer dtype need not be np.(u)int8,
pandas/,565,see gh-14404: test the limits of each downcast.,
pandas/,580,see gh-14422:,
pandas/,581,BUG: to_numeric doesn't work uint64 numbers,
pandas/,602,see gh-17007 and gh-17125,
pandas/,603,,
pandas/,604,"Still returns float despite the uint64-nan conflict,",
pandas/,605,which would normally force the casting to object.,
pandas/,619,see gh-17007 and gh-17125,
pandas/,620,,
pandas/,621,For completeness.,
pandas/,635,GH32493,
pandas/,645,GH 32394,
pandas/,17,pass thru,
pandas/,22,Series,
pandas/,27,with units,
pandas/,34,arrays of various dtypes,
pandas/,61,GH 11776,
pandas/,73,bad value for errors parameter,
pandas/,78,these will error,
pandas/,85,time not supported ATM,
pandas/,106,gh-13613: these should not error because errors='ignore',
pandas/,125,GH 5458,
pandas/,134,GH5438,
pandas/,153,https://github.com/pandas-dev/pandas/issues/25077,
pandas/,14,"see which names are in the namespace, minus optional",
pandas/,15,ignored ones,
pandas/,16,compare vs the expected,
pandas/,27,these are optionally imported based on testing,
pandas/,28,& need to be ignored,
pandas/,31,top-level sub-packages,
pandas/,48,these are already deprecated; awaiting removal,
pandas/,51,misc,
pandas/,54,top-level classes,
pandas/,97,these are already deprecated; awaiting removal,
pandas/,100,these should be deprecated in the future,
pandas/,105,"deprecated_modules.extend([""np"", ""datetime""])",
pandas/,106,"deprecated_classes_in_future.extend([""SparseArray""])",
pandas/,108,external modules exposed in pandas namespace,
pandas/,111,top-level functions,
pandas/,145,top-level option funcs,
pandas/,155,top-level read_* funcs,
pandas/,178,top-level json funcs,
pandas/,181,top-level to_* funcs,
pandas/,184,top-level to deprecate in the future,
pandas/,187,these are already deprecated; awaiting removal,
pandas/,190,private modules in pandas namespace,
pandas/,301,avoid cache state affecting the test,
pandas/,305,noqa: F401,
pandas/,311,avoid cache state affecting the test,
pandas/,314,noqa: F401,
pandas/,320,in a subprocess to avoid import caching issues,
pandas/,76,GH#29684,
pandas/,105,GH 25851,
pandas/,106,ensure that subclassed datetime works with,
pandas/,107,localize_pydatetime,
pandas/,27,"Raise on invalid input, don't just return it",
pandas/,37,see gh-9688,
pandas/,84,see gh-5418,
pandas/,190,"A datetime string must include a year, month and a day for it to be",
pandas/,191,"guessable, in addition to being a string that looks like a datetime.",
pandas/,207,see gh-11142,
pandas/,221,issue 20684,
pandas/,52,All of these datetime strings with offsets are equivalent,
pandas/,53,to the same datetime after the timezone offset is added.,
pandas/,76,see gh-17697,
pandas/,97,see gh-4601,
pandas/,98,,
pandas/,99,"These strings don't look like datetimes, so",
pandas/,100,they shouldn't be attempted to be converted.,
pandas/,127,coerce.,
pandas/,150,"Without coercing, the presence of any invalid",
pandas/,151,dates prevents any values from being converted.,
pandas/,154,coerce.,
pandas/,155,"With coercing, the invalid dates becomes iNaT",
pandas/,165,"see gh-19382, gh-19529",
pandas/,166,,
pandas/,167,Close enough to bounds that dropping nanos,
pandas/,168,would result in an in-bounds datetime.,
pandas/,189,GH 25851,
pandas/,190,ensure that subclassed datetime works with,
pandas/,191,array_to_datetime,
pandas/,9,https://github.com/vaexio/vaex/issues/357,
pandas/,10,fields functions should't raise when we pass read-only data,
pandas/,28,treat dtindex as timedeltas for this next one,
pandas/,41,"information for Jan. 1, 1970.",
pandas/,62,"Thursday (Oct. 3, 2013).",
pandas/,64,"Friday (Oct. 4, 2013).",
pandas/,66,"Saturday (Oct. 5, 2013).",
pandas/,68,"Sunday (Oct. 6, 2013).",
pandas/,70,"Monday (Oct. 7, 2013).",
pandas/,72,"Tuesday (Oct. 8, 2013).",
pandas/,37,GH 25851,
pandas/,38,ensure that subclassed datetime works with,
pandas/,39,normalize_date,
pandas/,34,GH 32402,
pandas/,27,see gh-13583,
pandas/,34,see gh-13583,
pandas/,40,see gh-13583,
pandas/,41,,
pandas/,42,Get offset using normal datetime for test.,
pandas/,66,Input validation.,
pandas/,14,"End-of-year, non-leap year.",
pandas/,15,"End-of-year, leap year.",
pandas/,24,see gh-12060,
pandas/,25,,
pandas/,26,Test only the ISO parser - flexibility to,
pandas/,27,different separators and leading zero's.,
pandas/,40,Mixed separated and unseparated.,
pandas/,45,HHMMSS must have two digits in,
pandas/,46,each component if unseparated.,
pandas/,69,GH#25895 make sure isoparser doesn't overflow with long input,
pandas/,22,Business day.,
pandas/,23,Non-business day.,
pandas/,34,Non-weekday.,
pandas/,35,Business day.,
pandas/,84,Before March 1.,
pandas/,86,After March 1.,
pandas/,93,`other` will be compared to March 1.,
pandas/,101,Before June 30.,
pandas/,103,After June 30.,
pandas/,110,`other` will be compared to June 30.,
pandas/,116,get_day_of_month is not directly exposed.,
pandas/,117,We test it via roll_yearday.,
pandas/,122,To hit the raising case we need month == dt.month and n > 0.,
pandas/,128,(other.month % 3) < (month % 3)  # (other.month % 3) > (month % 3),
pandas/,134,Saturday.,
pandas/,141,Monday.,
pandas/,143,Saturday.,
pandas/,149,First business day.,
pandas/,159,All cases have (other.month % 3) == (month % 3).,
pandas/,12,wrong type,
pandas/,20,wrong length,
pandas/,28,works,
pandas/,32,Renaming,
pandas/,14,GH 10265,
pandas/,16,"Tests: All to nans, coerce, true",
pandas/,17,Test coercion returns correct type,
pandas/,34,Test coercion with mixed types,
pandas/,48,Test standard conversion returns original,
pandas/,57,test pass-through and non-conversion when other types selected,
pandas/,84,force numeric conversion,
pandas/,102,"GH 4119, not converting a mixed type (e.g.floats and object)",
pandas/,112,dates,
pandas/,167,preserver if non-object,
pandas/,172,FIXME: dont leave commented-out,
pandas/,173,r = s.copy(),
pandas/,174,r[0] = np.nan,
pandas/,175,"result = r._convert(convert_dates=True,convert_numeric=False)",
pandas/,176,assert result.dtype == 'M8[ns]',
pandas/,178,dateutil parses some single letters into today's value as a date,
pandas/,213,https://github.com/pandas-dev/pandas/pull/24866,
pandas/,215,"Don't have PandasDtype in the public API, so we use `.array.dtype`,",
pandas/,216,which is a PandasDtype.,
pandas/,236,GH#19700,
pandas/,21,matmul test is for GH #10259,
pandas/,27,Series @ DataFrame -> Series,
pandas/,32,DataFrame @ Series -> Series,
pandas/,37,Series @ Series -> scalar,
pandas/,42,GH 21530,
pandas/,43,vector (1D np.array) @ Series (__rmatmul__),
pandas/,48,GH 21530,
pandas/,49,vector (1D list) @ Series (__rmatmul__),
pandas/,54,GH 21530,
pandas/,55,matrix (2D np.array) @ Series (__rmatmul__),
pandas/,60,GH 21530,
pandas/,61,matrix (2D nested lists) @ Series (__rmatmul__),
pandas/,66,mixed dtype DataFrame @ Series,
pandas/,72,different dtypes DataFrame @ Series,
pandas/,79,exception raised is of type Exception,
pandas/,87,GH21614,
pandas/,166,"It seems like np.median doesn't dispatch, so we use the",
pandas/,167,method instead of the ufunc.,
pandas/,182,GH 9442,
pandas/,186,mean,
pandas/,190,the computation is converted to float so,
pandas/,191,might be some loss of precision,
pandas/,194,sum,
pandas/,24,GH 13737,
pandas/,30,GH 13737,
pandas/,34,---------------------------------------------------------------------,
pandas/,35,NaT support,
pandas/,60,Do we want to allow this?,
pandas/,100,GH 17157,
pandas/,101,Check that the time part of the Period is adjusted by end_time,
pandas/,102,when using the dt accessor on a Series,
pandas/,112,GH 21205,
pandas/,37,NOTE: some overlap with test_constructor_empty but that test does not,
pandas/,38,test for None or an empty generator.,
pandas/,39,test_constructor_pass_none tests None but only with the index also,
pandas/,40,passed.,
pandas/,44,creates a RangeIndex,
pandas/,45,creates a RangeIndex,
pandas/,46,creates a RangeIndex,
pandas/,49,creates a RangeIndex,
pandas/,50,creates a RangeIndex,
pandas/,51,creates a RangeIndex,
pandas/,63,GH15520,
pandas/,71,GH#13296,
pandas/,80,Pass in scalar is disabled,
pandas/,84,Coercion,
pandas/,93,Pass in Series,
pandas/,98,Ensure new index is not created,
pandas/,101,Mixed type Series,
pandas/,110,exception raised is of type Exception,
pandas/,119,raise on MultiIndex GH4187,
pandas/,131,these are Index() and RangeIndex() which don't compare type equal,
pandas/,132,but are just .equals,
pandas/,135,With explicit dtype:,
pandas/,140,GH 18515 : with dtype=category:,
pandas/,146,With index:,
pandas/,152,With index and dtype float64:,
pandas/,157,"GH 19853 : with empty string, index and dtype str",
pandas/,175,GH-20865,
pandas/,186,GH 22477,
pandas/,192,GH 22477,
pandas/,197,https://github.com/pandas-dev/pandas/issues/21083,
pandas/,216,GH 21987,
pandas/,227,GH 21987,
pandas/,233,GH 21987,
pandas/,240,make sure that we are coercing different,
pandas/,241,list-likes to standard dtypes and not,
pandas/,242,platform specific,
pandas/,250,GH 17088,
pandas/,266,GH 16605,
pandas/,267,Ensure that data elements from a list are converted to strings,
pandas/,268,"when dtype is str, 'str', or 'U'",
pandas/,292,GH8909,
pandas/,309,can cast to a new dtype,
pandas/,314,GH12574,
pandas/,324,test basic creation / coercion of categoricals,
pandas/,331,in a frame,
pandas/,348,multiples,
pandas/,359,GH8623,
pandas/,364,doing this breaks transform,
pandas/,389,GH 19565 - Check broadcasting of scalar with Categorical dtype,
pandas/,399,GH 26336: the string 'category' maintains existing CategoricalDtype,
pandas/,403,"Series(Categorical, dtype='category') keeps existing dtype",
pandas/,408,"Series(Series[Categorical], dtype='category') keeps existing dtype",
pandas/,413,Passing a categorical to a Series and then changing values in either,
pandas/,414,the series or the categorical should not change the values in the,
pandas/,415,"other one, IF you specify copy!",
pandas/,425,setting,
pandas/,431,"however, copy is False by default",
pandas/,432,so this WILL change values,
pandas/,529,Check numpy masked arrays with hard masks -- from GH24574,
pandas/,558,GH 19342,
pandas/,559,test that construction of a Series with an index of different length,
pandas/,560,raises an error,
pandas/,566,GH 19342,
pandas/,567,construction with a numpy scalar,
pandas/,568,should not raise,
pandas/,574,GH 19342,
pandas/,575,construction with single-element container and index,
pandas/,576,should raise,
pandas/,595,GH15125,
pandas/,596,test dtype parameter has no side effects on copy=True,
pandas/,601,copy=True maintains original data in Series,
pandas/,604,changes to origin of copy does not affect the copy,
pandas/,624,GH 17449,
pandas/,625,limit copies of input,
pandas/,628,we make 1 copy; this is just a smoke test here,
pandas/,639,GH 7431,
pandas/,640,inference on the index,
pandas/,647,GH 13467,
pandas/,670,see gh-15832,
pandas/,676,see gh-15832,
pandas/,687,see gh-1572,
pandas/,696,GH 9477,
pandas/,697,incorrectly inferring on dateimelike looking when object dtype is,
pandas/,698,specified,
pandas/,704,the dtype was being reset on the slicing and re-inferred to datetime,
pandas/,705,even thought the blocks are mixed,
pandas/,718,gh-15869,
pandas/,731,"in theory this should be all nulls, but since",
pandas/,732,we are not specifying a dtype is ambiguous,
pandas/,747,GH3416,
pandas/,760,GH3414 related,
pandas/,780,valid astype,
pandas/,783,invalid casting,
pandas/,788,ints are ok,
pandas/,789,we test with np.int64 to get similar results on,
pandas/,790,windows / 32-bit platforms,
pandas/,795,invalid dates can be help as object,
pandas/,802,don't mix types,
pandas/,807,GH6529,
pandas/,808,coerce datetime64 non-ns properly,
pandas/,818,GH 13876,
pandas/,819,coerce to non-ns to object properly,
pandas/,826,leave datetime.date alone,
pandas/,832,these will correctly infer a datetime,
pandas/,842,tz-aware (UTC and other tz's),
pandas/,843,GH 8411,
pandas/,851,non-convertible,
pandas/,857,if we passed a NaT it remains,
pandas/,863,if we passed a nan it remains,
pandas/,871,8260,
pandas/,872,support datetime64 with tz,
pandas/,881,export,
pandas/,890,indexing,
pandas/,906,concat,
pandas/,910,short str,
pandas/,913,formatting with NaT,
pandas/,918,long str,
pandas/,925,inference,
pandas/,944,with all NaT,
pandas/,953,tests all units,
pandas/,954,gh-19223,
pandas/,965,GH 17415: With naive string,
pandas/,971,GH#30976,
pandas/,981,construction from interval & array of intervals,
pandas/,991,GH 23563: consistent closed results in interval dtype,
pandas/,1002,GH 23563: mixed closed results in object dtype (not interval dtype),
pandas/,1010,make sure that we are not re-localizing upon construction,
pandas/,1011,GH 14928,
pandas/,1040,GH7932,
pandas/,1041,converting a PeriodIndex when put in a Series,
pandas/,1064,GH 18625,
pandas/,1071,GH19018,
pandas/,1072,"initialization ordering: by insertion order if python>= 3.6, else",
pandas/,1073,order by value,
pandas/,1081,GH 18480,
pandas/,1087,MultiIndex:,
pandas/,1096,GH 9456,
pandas/,1119,GH 12948,
pandas/,1128,GH 29788,
pandas/,1159,https://github.com/pandas-dev/pandas/issues/22698,
pandas/,1194,GH12336,
pandas/,1195,Test construction of categorical series from value,
pandas/,1204,basic,
pandas/,1215,mixed with NaT,
pandas/,1225,improved inference,
pandas/,1226,GH5689,
pandas/,1230,"because iNaT is int, not coerced to timedelta",
pandas/,1243,these are frequency conversion astypes,
pandas/,1244,"for t in ['s', 'D', 'us', 'ms']:",
pandas/,1245,with pytest.raises(TypeError):,
pandas/,1246,td.astype('m8[%s]' % t),
pandas/,1248,valid astype,
pandas/,1251,invalid casting,
pandas/,1256,this is an invalid casting,
pandas/,1261,leave as object here,
pandas/,1265,these will correctly infer a timedelta,
pandas/,1275,GH 16406,
pandas/,1294,GH10747,
pandas/,1317,convert from a numpy array of non-ns timedelta64,
pandas/,1323,convert from a numpy array of non-ns datetime64,
pandas/,1324,note that creating a numpy datetime64 is in LOCAL time!!!!,
pandas/,1325,"seems to work for M8[D], but not for M8[s]",
pandas/,1332,FIXME: dont leave commented-out,
pandas/,1333,"s = Series(np.array(['2013-01-01 00:00:01','2013-01-01",
pandas/,1334,"00:00:02','2013-01-01 00:00:03'],dtype='datetime64[s]'))",
pandas/,1336,"tm.assert_series_equal(s,date_range('20130101",
pandas/,1337,"00:00:01',period=3,freq='s'))",
pandas/,1350,floats are not ok,
pandas/,1351,strip Index to convert PeriodIndex -> Period,
pandas/,1352,We don't care whether the error message says,
pandas/,1353,PeriodIndex or PeriodArray,
pandas/,1359,ints are ok,
pandas/,1360,we test with np.int64 to get similar results on,
pandas/,1361,windows / 32-bit platforms,
pandas/,1390,"see gh-15524, gh-15987",
pandas/,1404,"see gh-15524, gh-15987",
pandas/,1411,GH 16804,
pandas/,1417,GH 13051,
pandas/,1427,GH#25843,
pandas/,27,GH 3371,
pandas/,38,reg fillna,
pandas/,50,"interpreted as seconds, deprecated",
pandas/,99,ffill,
pandas/,106,bfill,
pandas/,125,ffill,
pandas/,137,bfill,
pandas/,149,GH 6587,
pandas/,150,make sure that we are treating as integer when filling,
pandas/,151,this also tests inference of a datetime-like with NaT's,
pandas/,166,DatetimeBlock,
pandas/,187,check s is not changed,
pandas/,246,DatetimeBlockTZ,
pandas/,341,"filling with a naive/other zone, coerce to object",
pandas/,367,with timezone,
pandas/,368,GH 15855,
pandas/,388,GH 16402,
pandas/,389,"fillna with a tz aware to a tz-naive, should result in object",
pandas/,400,where (we ignore the errors=),
pandas/,411,with a non-datetime,
pandas/,416,assignment,
pandas/,422,GH 14872,
pandas/,441,GH 15277,
pandas/,442,infer int64 from float64,
pandas/,448,infer int64 from float64 when fillna value is a dict,
pandas/,467,NaNs are represented as -1 in labels,
pandas/,522,gh-17115,
pandas/,557,GH 5703,
pandas/,586,limit,
pandas/,596,GH 9043,
pandas/,597,make sure a string representation of int/float values can be filled,
pandas/,598,correctly without raising errors or being converted,
pandas/,628,GH14956,
pandas/,642,nan ops on timedeltas,
pandas/,650,GH#16674 iNaT is treated as an integer when given by the user,
pandas/,664,FIXME: don't leave commented-out,
pandas/,665,boolean setting,
pandas/,666,"this doesn't work, not sure numpy even supports it",
pandas/,667,result = td[(td>np.timedelta64(timedelta(days=3))) &,
pandas/,668,td<np.timedelta64(timedelta(days=7)))] = np.nan,
pandas/,669,assert isna(result).sum() == 7,
pandas/,671,NumPy limitation =(,
pandas/,673,def test_logical_range_select(self):,
pandas/,674,np.random.seed(12345),
pandas/,675,selector = -0.5 <= datetime_series <= 0.5,
pandas/,676,expected = (datetime_series >= -0.5) & (datetime_series <= 0.5),
pandas/,677,"tm.assert_series_equal(selector, expected)",
pandas/,686,invalid axis,
pandas/,692,DatetimeBlock,
pandas/,707,DatetimeBlockTZ,
pandas/,788,neither monotonic increasing or decreasing,
pandas/,37,see gh-10483,
pandas/,109,GH 8215,
pandas/,110,"Series.to_csv() was returning None, inconsistent with",
pandas/,111,DataFrame.to_csv() which returned string,
pandas/,123,"GH 21241, 21118",
pandas/,134,test the round trip - to_csv -> read_csv,
pandas/,144,test the round trip using file handle - to_csv -> read_csv,
pandas/,159,explicitly ensure file was compressed,
pandas/,170,GH 28210,
pandas/,177,can't roundtrip intervalindex via read_csv so check string repr (GH 23595),
pandas/,205,GH2891,
pandas/,226,GH 9762,
pandas/,12,dunder op,
pandas/,33,Test that ufunc(Series) == Series(ufunc),
pandas/,52,"Test that ufunc(Series(a), array) == Series(ufunc(a, b))",
pandas/,58,"op(Series, array) preserves the name.",
pandas/,63,"ufunc(series, array)",
pandas/,67,"ufunc(array, series)",
pandas/,78,Test that,
pandas/,79,"* func(Series(a), Series(b)) == Series(ufunc(a, b))",
pandas/,80,"* ufunc(Index, Series) dispatches to Series (returns a Series)",
pandas/,86,"op(Series, array) preserves the name.",
pandas/,91,"ufunc(series, array)",
pandas/,95,"ufunc(array, series)",
pandas/,109,Test that,
pandas/,110,"* func(Series(a), Series(b)) == Series(ufunc(a, b))",
pandas/,111,with alignment between the indices,
pandas/,117,"op(Series, array) preserves the name.",
pandas/,133,"ufunc(series, array)",
pandas/,137,"ufunc(array, series)",
pandas/,148,Test that,
pandas/,149,"* ufunc(Series, scalar) == Series(ufunc(array, scalar))",
pandas/,150,"* ufunc(Series, scalar) == ufunc(scalar, Series)",
pandas/,170,any others?,
pandas/,175,Test that,
pandas/,176,the same conditions from binary_ufunc_scalar apply to,
pandas/,177,ufuncs with multiple outputs.,
pandas/,182,work around https://github.com/pandas-dev/pandas/issues/26987,
pandas/,194,ensure we align before applying the ufunc,
pandas/,208,Test that the same conditions from unary input apply to multi-output,
pandas/,209,ufuncs,
pandas/,229,Drop the names when they differ.,
pandas/,299,https://github.com/pandas-dev/pandas/issues/27186,
pandas/,26,GH 15564,
pandas/,45,test asfreq,
pandas/,57,"BAD Example, datetimes first",
pandas/,69,GH 11349,
pandas/,80,GH5613,
pandas/,81,we test if .asfreq() and .resample() set the correct value for .freq,
pandas/,87,testing the settings before calling .asfreq() and .resample(),
pandas/,91,does .asfreq() set .freq correctly?,
pandas/,94,does .resample() set .freq correctly?,
pandas/,98,GH#24024,
pandas/,116,Future behavior (for tzaware case) with no warning,
pandas/,125,This shouldn't produce a warning.,
pandas/,140,Old behavior with no warning,
pandas/,40,don't want to be able to modify the index stored elsewhere after,
pandas/,41,making a copy,
pandas/,57,"names match, preserve",
pandas/,66,"names don't match, don't preserve",
pandas/,77,"names match, preserve",
pandas/,82,"names don't match, don't preserve",
pandas/,130,GH3283,
pandas/,137,Test with subclass,
pandas/,163,GH #12169 : Resample category data with timedelta index,
pandas/,164,construct Series from dict as data and TimedeltaIndex as index,
pandas/,165,will result NaN in result Series data,
pandas/,186,GH 9910,
pandas/,188,Series of str values should have .str but not .dt/.cat in __dir__,
pandas/,193,similarly for .dt,
pandas/,199,"Similarly for .cat, but with the twist that str and dt should be",
pandas/,200,there if the categories are of that type first cat and str.,
pandas/,203,as it is a string categorical,
pandas/,206,similar to cat and str,
pandas/,210,as it is a datetime categorical,
pandas/,213,test the tab completion display,
pandas/,257,dir contains string-like values of the Index.,
pandas/,287,"HACK: By doing this in two stages, we avoid 2to3 wrapping the call",
pandas/,288,to .keys() in a list(),
pandas/,305,"assert is lazy (generators don't define reverse, lists do)",
pandas/,316,"assert is lazy (generators don't define reverse, lists do)",
pandas/,330,default deep is True,
pandas/,339,Did not modify original Series,
pandas/,343,we DID modify the original Series,
pandas/,348,GH#11794,
pandas/,349,copy of tz-aware,
pandas/,364,default deep is True,
pandas/,366,Did not modify original Series,
pandas/,370,we DID modify the original Series,
pandas/,382,https://github.com/pandas-dev/pandas/issues/18147,
pandas/,383,no exception and no empty docstring,
pandas/,387,it works!,
pandas/,395,i.e. not np.int64,
pandas/,429,Case where ser[0] would not work,
pandas/,436,test numpy compat with Series as sub-class of NDFrame,
pandas/,450,using an ndarray like function,
pandas/,456,ravel,
pandas/,466,GH9068,
pandas/,473,str accessor only valid with string values,
pandas/,488,https://github.com/pandas-dev/pandas/issues/16409,
pandas/,499,GH 25580,
pandas/,528,GH 17509,
pandas/,551,GH 9322,
pandas/,564,https://github.com/pandas-dev/pandas/issues/10673,
pandas/,577,invalid accessor,
pandas/,590,"Series should delegate calls to '.categories', '.codes', '.ordered'",
pandas/,591,and the methods '.set_categories()' 'drop_unused_categories()' to the,
pandas/,592,categorical,
pandas/,609,reorder,
pandas/,618,remove unused categories,
pandas/,627,"This method is likely to be confused, so test that it raises an error",
pandas/,628,on wrong inputs:,
pandas/,633,"right: s.cat.set_categories([4,3,2,1])",
pandas/,635,GH18862 (let Series.cat.rename_categories take callables),
pandas/,644,https://github.com/pandas-dev/pandas/issues/10661,
pandas/,656,only testing field (like .day),
pandas/,657,and bool (is_month_start),
pandas/,675,FIXME: don't leave commented-out,
pandas/,676,"('tz_localize', (""UTC"",), {}),",
pandas/,680,the series is already localized,
pandas/,703,dropping TZ,
pandas/,16,"boolean &, |, ^ should work with object arrays and propagate NAs",
pandas/,30,GH#9016: support bitwise op for integer types,
pandas/,75,GH 13896,
pandas/,82,GH#9016: support bitwise op for integer types,
pandas/,84,TODO: unused,
pandas/,85,"s_0101 = Series([0, 1, 0, 1])",
pandas/,109,GH#9016: support bitwise op for integer types,
pandas/,121,GH#9016: support bitwise op for integer types,
pandas/,144,GH#9016: support bitwise op for integer types,
pandas/,163,GH#9016: support bitwise op for integer types,
pandas/,189,make sure we operate on ndarray the same as Series,
pandas/,224,GH#9016: support bitwise op for integer types,
pandas/,226,"with non-matching indexes, logical operators will cast to object",
pandas/,227,before operating,
pandas/,236,s_0123 will be all false now because of reindexing like s_tft,
pandas/,270,TODO: Fix this exception - needs to be fixed! (see GH5035),
pandas/,271,(previously this was a TypeError because series returned,
pandas/,272,NotImplemented,
pandas/,274,this is an alignment issue; these are equivalent,
pandas/,275,https://github.com/pandas-dev/pandas/issues/5284,
pandas/,296,"GH#22092, GH#19792",
pandas/,312,"GH#22092, GH#19792",
pandas/,347,"GH#22092, GH#19792",
pandas/,369,https://github.com/pandas-dev/pandas/pull/23628,
pandas/,370,"multi-set Index ops are buggy, so let's avoid duplicates...",
pandas/,377,GH#4947,
pandas/,378,logical ops should be label based,
pandas/,395,rhs is bigger,
pandas/,407,filling,
pandas/,409,vs empty,
pandas/,420,vs non-matching,
pandas/,429,identity,
pandas/,430,"we would like s[s|e] == s to hold for any e, whether empty or not",
pandas/,444,vs scalars,
pandas/,476,GH#1134,
pandas/,484,True | np.nan => True,
pandas/,487,"np.nan | True => np.nan, filled with False",
pandas/,491,DataFrame doesn't fill nan with False,
pandas/,499,different length,
pandas/,507,"np.nan | True => np.nan, filled with False",
pandas/,510,True | np.nan => True,
pandas/,522,"__neg__, __pos__, __inv__",
pandas/,22,element-wise apply,
pandas/,29,empty series,
pandas/,34,check all metadata (GH 9322),
pandas/,40,index but no data,
pandas/,80,"GH#2689, GH#2627",
pandas/,86,it works!,
pandas/,91,ufunc will not be boxed. Same test cases as the test_map_box,
pandas/,95,boxed value must be Timestamp instance,
pandas/,110,timedelta,
pandas/,118,period,
pandas/,139,change dtype,
pandas/,140,GH 14506 : Returned dtype changed from int32 to int64,
pandas/,145,not vectorized,
pandas/,171,should be categorical dtype when the number of categories are,
pandas/,172,the same,
pandas/,185,GH 20714 bug fixed in: GH 24275,
pandas/,194,GH 21245,
pandas/,202,transforming functions,
pandas/,209,ufunc,
pandas/,217,list-like,
pandas/,229,multiple items in list,
pandas/,230,these are in the order as if we are applying both functions per,
pandas/,231,series and then concatting,
pandas/,241,"dict, provide renaming",
pandas/,250,we are trying to transform with an aggregator,
pandas/,267,demonstration tests,
pandas/,278,nested renaming,
pandas/,286,nested renaming,
pandas/,292,test that we are evaluating row-by-row first,
pandas/,293,before vectorized evaluation,
pandas/,303,GH 2316,
pandas/,304,".agg with a reducer and a transform, what to do",
pandas/,315,this also tests a result set that is all scalars,
pandas/,332,reductions with named functions,
pandas/,342,test agg using non-callable series attributes,
pandas/,345,Calling agg w/ just a string arg same as calling s.arg,
pandas/,350,test when mixed w/ callable reducers,
pandas/,394,see GH12863,
pandas/,401,GH21224,
pandas/,402,test reducing functions in,
pandas/,403,pandas.core.base.SelectionMixin._cython_table,
pandas/,433,GH21224,
pandas/,434,test transforming functions in,
pandas/,435,"pandas.core.base.SelectionMixin._cython_table (cumprod, cumsum)",
pandas/,445,mean raises TypeError,
pandas/,456,GH21224,
pandas/,458,e.g. Series('a b'.split()).cumprod() will raise,
pandas/,474,input could be a dict,
pandas/,480,function,
pandas/,484,GH 10324,
pandas/,529,related GH 8024,
pandas/,573,GH 18496,
pandas/,579,All labels should be filled now,
pandas/,600,https://github.com/pandas-dev/pandas/issues/17648,
pandas/,601,Checks that np.nan key is appropriately mapped,
pandas/,634,https://github.com/pandas-dev/pandas/issues/29733,
pandas/,635,Check collections.abc.Mapping support as mapper for Series.map,
pandas/,643,https://github.com/pandas-dev/pandas/issues/29733,
pandas/,644,Check collections.abc.Mapping support as mapper for Series.map,
pandas/,652,"__missing__ is a dict concept, not a Mapping concept,",
pandas/,653,so it should not change the result!,
pandas/,661,boxed value must be Timestamp instance,
pandas/,676,timedelta,
pandas/,684,period,
pandas/,718,keep tz,
pandas/,726,change dtype,
pandas/,727,GH 14506 : Returned dtype changed from int32 to int64,
pandas/,735,not vectorized,
pandas/,754,GH20495,
pandas/,774,GH 25959,
pandas/,775,Calling apply on a localized time series should not cause an error,
pandas/,781,GH 25959,
pandas/,782,Calling apply on a localized time series should not cause an error,
pandas/,788,GH 13228,
pandas/,795,https://github.com/pandas-dev/pandas/issues/32815,
pandas/,805,FIXME: dont leave commented-out,
pandas/,806,Can't compare until apply on a Series gives the correct dtype,
pandas/,807,"assert_series_equal(a, b)",
pandas/,811,noqa,
pandas/,812,noqa,
pandas/,813,Can't compare until apply on a Series gives the correct dtype,
pandas/,814,"assert_series_equal(a, b)",
pandas/,27,it works! #2443,
pandas/,35,GH 6326,
pandas/,47,Test small Series.,
pandas/,56,Test big Series (diff code path).,
pandas/,77,empty,
pandas/,80,with NaNs,
pandas/,84,with Nones,
pandas/,89,various names,
pandas/,111,0 as name,
pandas/,116,tidy repr,
pandas/,126,with empty series (#4651),
pandas/,136,should not raise exception,
pandas/,141,It works (with no Cython exception barf)!,
pandas/,150,it works!,
pandas/,157,https://docs.python.org/3/reference/datamodel.html#object.__repr__,
pandas/,158,...The return value must be a string object.,
pandas/,160,"(str on py2.x, str (unicode) on py3)",
pandas/,165,both py2 / 3,
pandas/,168,GH 6863,
pandas/,170,should not raise exception,
pandas/,177,GH 26447,
pandas/,214,see gh-25061,
pandas/,243,see gh-21002,
pandas/,348,noqa,
pandas/,362,noqa,
pandas/,376,noqa,
pandas/,390,noqa,
pandas/,404,noqa,
pandas/,430,noqa,
pandas/,474,noqa,
pandas/,487,noqa,
pandas/,506,noqa,
pandas/,23,round-tripping with self & like self,
pandas/,67,booleans,
pandas/,70,datetime-like,
pandas/,75,categorical,
pandas/,94,GH 18515,
pandas/,114,TODO: release-note: concat sparse dtype,
pandas/,121,TODO: release-note: concat sparse dtype,
pandas/,6,GH#8617,
pandas/,34,"GH 7207, 11128",
pandas/,35,test .dt namespace accessor,
pandas/,83,datetimeindex,
pandas/,91,we test freq below,
pandas/,112,"let's localize, then convert",
pandas/,120,datetimeindex with tz,
pandas/,124,we test freq below,
pandas/,144,timedelta index,
pandas/,157,we test freq below,
pandas/,179,both,
pandas/,196,periodindex,
pandas/,200,we test freq below,
pandas/,210,test limited display api,
pandas/,227,11295,
pandas/,228,ambiguous time error on the conversions,
pandas/,239,no setting allowed,
pandas/,244,trying to set a copy,
pandas/,258,round,
pandas/,286,"GH 18946 round near ""fall back"" DST",
pandas/,296,infer,
pandas/,301,bool-array,
pandas/,305,NaT,
pandas/,311,raise,
pandas/,324,"GH 23324 round near ""spring forward"" DST",
pandas/,338,GH 19468,
pandas/,346,GH 27952,
pandas/,357,GH 27952,
pandas/,369,GH 27952,
pandas/,379,https://github.com/pandas-dev/pandas/issues/10673,
pandas/,388,"Test Monday -> Sunday and January -> December, in that sequence",
pandas/,390,"If the time_locale is None, day-name and month_name should",
pandas/,391,return the english attributes,
pandas/,440,work around https://github.com/pandas-dev/pandas/issues/22342,
pandas/,459,GH 10086,
pandas/,515,dtype may be S10 or U10 depending on python version,
pandas/,562,GH 29578,
pandas/,572,GH 8689,
pandas/,600,GH 9322,
pandas/,615,GH#9322 check that series with incorrect dtypes don't have attr,
pandas/,628,GH11757,
pandas/,639,GH21358,
pandas/,653,GH 23451,
pandas/,660,GH#24024,
pandas/,55,gh-14265: check NaN and inf raise error when converting to int,
pandas/,97,astype,
pandas/,105,"astype - object, preserves on construction",
pandas/,110,"astype - datetime64[ns, tz]",
pandas/,130,see gh-4405,
pandas/,136,see gh-9757,
pandas/,150,see gh-9757,
pandas/,159,see gh-7758: A bit of magic is required to set,
pandas/,160,default encoding to utf-8,
pandas/,177,Restore the former encoding,
pandas/,184,see gh-7271,
pandas/,209,GH16717,
pandas/,210,"if dtypes provided is empty, it should error",
pandas/,220,"deprecated 17636, removed in GH-27141",
pandas/,252,with keywords,
pandas/,290,"object don't sort correctly, so just compare that we have the same",
pandas/,291,values,
pandas/,299,array conversion,
pandas/,315,invalid conversion (these are NOT a dtype),
pandas/,334,GH 10696/18593,
pandas/,339,unspecified categories,
pandas/,346,different categories,
pandas/,353,"not specifying ordered, so only test once",
pandas/,359,GH-19182,
pandas/,386,"see gh-15524, gh-15987",
pandas/,399,see gh-15524,
pandas/,403,poor support (if any) currently,
pandas/,405,Generic timestamps raise a ValueError. Already tested.,
pandas/,413,see gh-14878,
pandas/,428,"This test no longer makes sense, as",
pandas/,429,Series is by default already M8[ns].,
pandas/,447,see gh-16524: test conversion of Series to Categorical,
pandas/,456,GH 11221,
pandas/,465,"only soft conversions, unconvertable pass thru unchanged",
pandas/,480,https://github.com/pandas-dev/pandas/issues/23995,
pandas/,486,GH 17444,
pandas/,34,"check that Series.{opname} behaves like Series.__{opname}__,",
pandas/,54,GH 13208,
pandas/,70,GH12723,
pandas/,83,bind op at definition time...,
pandas/,125,should accept axis=0 or axis='rows',
pandas/,130,"Some of these may end up in tests/arithmetic, but are not yet sorted",
pandas/,156,GH28658 - ensure adding 'm' does not raise an error,
pandas/,164,GH#25557,
pandas/,180,GH#24396,
pandas/,190,GH14227,
pandas/,219,FIXME: dont leave commented-out,
pandas/,220,"TODO: this returned NotImplemented earlier, what to do?",
pandas/,221,"deltas = Series([timedelta(1)] * 5, index=np.arange(5))",
pandas/,222,sub_deltas = deltas[::2],
pandas/,223,deltas5 = deltas * 5,
pandas/,224,deltas = deltas + sub_deltas,
pandas/,226,float + int,
pandas/,242,GH#7500,
pandas/,243,datetimelike ops need to align,
pandas/,249,name is reset,
pandas/,258,------------------------------------------------------------------,
pandas/,259,Comparisons,
pandas/,274,axis,
pandas/,283,,
pandas/,348,GH#15115,
pandas/,357,GH#15115 empty Series case,
pandas/,373,datetime64 dtype,
pandas/,379,datetime64tz dtype,
pandas/,385,timedelta64 dtype,
pandas/,391,interval dtype,
pandas/,393,interval dtype comparisons not yet implemented,
pandas/,399,categorical,
pandas/,401,categorical dtype comparisons raise for inequalities,
pandas/,422,it works!,
pandas/,427,-----------------------------------------------------------------,
pandas/,428,Categorical Dtype Comparisons,
pandas/,431,GH#8938,
pandas/,432,allow equality comparisons,
pandas/,440,vs scalar,
pandas/,449,vs list-like,
pandas/,464,vs a cat-like,
pandas/,475,non-equality is not comparable,
pandas/,486,unequal comparison should raise for unordered cats,
pandas/,495,https://github.com/pandas-dev/pandas/issues/9836#issuecomment-92123057,
pandas/,496,and following comparisons with scalars not in categories should raise,
pandas/,497,"for unequal comps, but not for equal/not equal",
pandas/,512,-----------------------------------------------------------------,
pandas/,515,GH#11339,
pandas/,516,comparisons vs tuple,
pandas/,555,test that comparisons work,
pandas/,572,FIXME: dont leave commented-out,
pandas/,573,fffffffuuuuuuuuuuuu,
pandas/,574,"result = f(val, s)",
pandas/,575,"expected = f(val, s.dropna()).reindex(s.index)",
pandas/,576,"tm.assert_series_equal(result, expected)",
pandas/,585,GH 1134,
pandas/,615,GH#25338,
pandas/,622,------------------------------------------------------------------,
pandas/,623,Unsorted,
pandas/,624,"These arithmetic tests were previously in other files, eventually",
pandas/,625,should be parametrized and put into tests.arithmetic,
pandas/,629,TODO: De-duplicate with test below,
pandas/,677,Ensures it doesn't fail to create the right series,
pandas/,678,reported in issue#16726,
pandas/,10,basics.rst doc example,
pandas/,17,GH 18051,
pandas/,25,"GH714 also, dtype=float",
pandas/,36,NAs in object arrays #714,
pandas/,42,decision about None,
pandas/,48,GH 18051,
pandas/,56,it works! #1807,
pandas/,73,GH11946 / GH25180,
pandas/,79,GH 20661,
pandas/,24,with missing values,
pandas/,154,GH#6270,
pandas/,3,Segregated collection of methods that require the BlockManager internal data,
pandas/,4,structure,
pandas/,9,GH#24096 altering a datetime64tz Series inplace invalidates the,
pandas/,10,`freq` attribute on the underlying DatetimeIndex,
pandas/,21,check that the DatetimeIndex was not altered in place,
pandas/,28,"GH#21907, GH#24096",
pandas/,18,TODO: better name/GH ref?,
pandas/,24,------------------------------------------------------------------,
pandas/,25,Series with DatetimeIndex,
pandas/,52,GH#30588 multi-dimensional indexing deprecated,
pandas/,54,This is currently failing because the test was relying on,
pandas/,55,the DeprecationWarning coming through Index.__getitem__.,
pandas/,56,We want to implement a warning specifically for Series.__getitem__,
pandas/,57,at which point this will become a Deprecation/FutureWarning,
pandas/,59,"GH#30867 Don't want to support this long-term, but",
pandas/,60,for now ensure that the warning from Index,
pandas/,61,doesn't comes through via Series.__getitem__.,
pandas/,66,FutureWarning from NumPy.,
pandas/,74,GH#31299,
pandas/,7,GH#31630 a case where we shouldn't wrap datetime64 in Timestamp,
pandas/,9,GH#5542,
pandas/,10,should delete the item inplace,
pandas/,21,"only 1 left, del, add, del",
pandas/,31,Index(dtype=object),
pandas/,45,empty,
pandas/,44,see gh-9743,
pandas/,54,see gh-9731,
pandas/,64,see gh-3235,
pandas/,88,dtype changes,
pandas/,94,GH 4667,
pandas/,95,setting with None changes dtype,
pandas/,123,test alignment,
pandas/,147,GH 2745,
pandas/,153,failures,
pandas/,167,see gh-15414,
pandas/,186,see gh-15414: only boolean arrays accepted,
pandas/,222,GH 2702,
pandas/,223,make sure correct exceptions are raised on invalid list assignment,
pandas/,227,slice,
pandas/,237,slice with step,
pandas/,248,neg slices,
pandas/,258,list,
pandas/,269,scalar,
pandas/,283,"Test numpy arrays, lists and tuples as the input to be",
pandas/,284,broadcast,
pandas/,293,Construct the expected series by taking the source,
pandas/,294,data or item based on the selection,
pandas/,328,GH 4550,
pandas/,329,where crashes with dups in index,
pandas/,337,GH 4548,
pandas/,338,inplace updating not working with dups,
pandas/,349,GH 9280,
pandas/,417,GH 15701,
pandas/,441,GH#17198 make sure we dont get an AttributeError for sp_index,
pandas/,27,https://github.com/pandas-dev/pandas/issues/20664,
pandas/,15,pass a slice,
pandas/,20,test slice is a view,
pandas/,24,list of integers,
pandas/,15,passing list is OK,
pandas/,29,GH5877,
pandas/,30,indexing with empty series,
pandas/,41,invalid because of the boolean indexer,
pandas/,42,that's empty or not-aligned,
pandas/,55,using column from DataFrame,
pandas/,61,getitem,
pandas/,66,setitem,
pandas/,73,nans raise exception,
pandas/,86,these used to raise...??,
pandas/,106,similar indexed series,
pandas/,112,needs alignment,
pandas/,123,setting,
pandas/,132,getting,
pandas/,49,"integer indexes, be careful",
pandas/,59,GH12089,
pandas/,60,with tz for values,
pandas/,98,missing,
pandas/,104,None,
pandas/,105,GH 5652,
pandas/,123,GH12599,
pandas/,148,GH 17610,
pandas/,156,"don't segfault, GH #495",
pandas/,161,GH #917,
pandas/,169,caused bug without test,
pandas/,220,"breaks reindex, so need to use .loc internally",
pandas/,221,GH 4246,
pandas/,240,equivalent of an append,
pandas/,273,caught this bug when writing tests,
pandas/,279,set item that's not contained,
pandas/,287,Test for issue #10193,
pandas/,301,change dtypes,
pandas/,302,GH 4463,
pandas/,332,equiv,
pandas/,367,"FutureWarning from NumPy about [slice(None, 5).",
pandas/,370,"invalid tuples, e.g. td.ts[:, None] vs. td.ts[:, 2]",
pandas/,377,"weird lists. [slice(0, 5)] will work but not two slices",
pandas/,379,GH#31299,
pandas/,384,OK,
pandas/,397,scalar,
pandas/,417,vector,
pandas/,444,GH XXX,
pandas/,449,scalar,
pandas/,469,vector,
pandas/,523,ensure that one can set something to np.nan,
pandas/,531,GH#31765,
pandas/,537,Check the intermediate steps work as expected,
pandas/,556,Test return view.,
pandas/,565,it works!,
pandas/,582,set slice with indices,
pandas/,585,because it's inclusive,
pandas/,588,set index value,
pandas/,596,these induce dtype changes,
pandas/,602,"gets coerced to float, right?",
pandas/,615,GH 8209,
pandas/,627,GH 14155,
pandas/,645,some nat-like values should be cast to datetime64 when inserting,
pandas/,646,into a datetime64 series.  Others should coerce to object,
pandas/,647,and retain their dtypes.,
pandas/,676,some nat-like values should be cast to timedelta64 when inserting,
pandas/,677,into a timedelta64 series.  Others should coerce to object,
pandas/,678,and retain their dtypes.,
pandas/,706,GH#22717 inserting a Timedelta should _not_ cast to int64,
pandas/,721,GH 4080,
pandas/,733,GH 3970,
pandas/,734,these are chained assignments as well,
pandas/,743,TODO: unused,
pandas/,744,noqa,
pandas/,750,GH 3217,
pandas/,766,GH 2746,
pandas/,768,need to upcast,
pandas/,777,GH8387: test that changing types does not break alignment,
pandas/,812,GH14359: test that you cannot mutate a read only buffer,
pandas/,815,make the array immutable,
pandas/,827,GH14359: test that you cannot mutate a read only buffer,
pandas/,830,make the array immutable,
pandas/,846,GH 6600,
pandas/,858,see GH18311,
pandas/,859,assigning series.loc[0] = 4 changed series.dtype to int,
pandas/,867,GH#32684 a scalar key that is not recognized by lib.is_scalar,
pandas/,869,a series that might be produced via `frame.dtypes`,
pandas/,12,__array_interface__ is not defined for older numpies,
pandas/,13,and on some pythons,
pandas/,37,This is extremely important for the Cython code to not screw up,
pandas/,43,return a copy the same index here,
pandas/,56,"reindex coerces index.dtype to float, loc/iloc doesn't",
pandas/,85,(don't forget to fix this) I think it's fixed,
pandas/,87,it works,
pandas/,89,corner case: pad empty series,
pandas/,92,pass non-Index,
pandas/,96,bad fill method,
pandas/,117,GH4604,
pandas/,122,this changes dtype because the ffill happens after,
pandas/,133,inference of new dtype,
pandas/,140,GH4618 shifted series downcasting,
pandas/,171,this should work fine,
pandas/,174,if NaNs introduced,
pandas/,177,NO NaNs introduced,
pandas/,183,"A series other than float, int, string, or object",
pandas/,187,this should work fine,
pandas/,190,if NaNs introduced,
pandas/,193,NO NaNs introduced,
pandas/,199,fail,
pandas/,209,reindexing to an invalid Categorical,
pandas/,218,partial reindexing,
pandas/,231,-----------------------------------------------------------,
pandas/,232,floats,
pandas/,242,-----------------------------------------------------------,
pandas/,243,ints,
pandas/,250,don't upcast,
pandas/,256,-----------------------------------------------------------,
pandas/,257,objects,
pandas/,268,------------------------------------------------------------,
pandas/,269,bools,
pandas/,282,GH 8306,
pandas/,291,GH 20869,
pandas/,6,GH 12533,
pandas/,19,GH 12533,
pandas/,26,GH 13299,
pandas/,11,see gh-19399,
pandas/,21,slice with indices,
pandas/,27,boolean,
pandas/,31,ask for index value,
pandas/,51,this is OK,
pandas/,56,so is this,
pandas/,68,"non-monotonic, raise KeyError",
pandas/,115,"integer indexes, be careful",
pandas/,140,GH12089,
pandas/,141,with tz for values,
pandas/,10,GH 6383,
pandas/,97,GH 7407,
pandas/,98,with a boolean accessor,
pandas/,113,GH 8569,
pandas/,120,GH 8569,
pandas/,121,"ensure that fixing ""test_get_nan"" above hasn't broken get",
pandas/,122,with multiple elements,
pandas/,131,GH 17295 - all missing keys,
pandas/,140,GH#7725,
pandas/,161,"TODO: better name, possibly split",
pandas/,162,GH#21260,
pandas/,191,GH#21257,
pandas/,61,#2329,
pandas/,71,#1561,
pandas/,93,GH 7523,
pandas/,95,unique,
pandas/,113,duplicates,
pandas/,137,"testing with timezone, GH #2785",
pandas/,141,"also test Timestamp tz handling, GH #2789",
pandas/,152,repeat with datetimes,
pandas/,160,comparison dates with datetime MUST be localized!,
pandas/,173,handle special case for utc in dateutil,
pandas/,177,"testing with timezone, GH #2785",
pandas/,181,"also test Timestamp tz handling, GH #2789",
pandas/,192,repeat with datetimes,
pandas/,206,"testing with timezone, GH #2785",
pandas/,230,GH#18435 strings get a pass from tzawareness compat,
pandas/,241,repeat all the above with naive datetimes,
pandas/,264,tznaive vs tzaware comparison is invalid,
pandas/,265,"see GH#18376, GH#18162",
pandas/,287,also test partial date slicing,
pandas/,329,GH 2782,
pandas/,357,not monotonic,
pandas/,409,sanity,
pandas/,413,#2563,
pandas/,425,"NaT, note this is excluded",
pandas/,465,new index,
pandas/,493,#1821,
pandas/,499,create large list of non periodic datetime,
pandas/,512,duplicate some values in the list,
pandas/,525,it works!,
pandas/,533,GH 27136,
pandas/,547,it works!,
pandas/,553,GH 2437,
pandas/,559,TODO: unused?,
pandas/,560,noqa,
pandas/,566,GH 3448 (ranges),
pandas/,577,partial ranges,
pandas/,582,single values,
pandas/,587,diff freq,
pandas/,601,getting,
pandas/,603,"GH 3070, make sure semantics work on Series/Frame",
pandas/,611,setting,
pandas/,621,GH3546 (not including times on the last day),
pandas/,640,"GH14826, indexing with a seconds resolution string / datetime object",
pandas/,648,"this is a single date, so will raise",
pandas/,662,GH 20441,
pandas/,9,compare with tested results in test_where,
pandas/,40,dtype changes,
pandas/,46,see gh-21891,
pandas/,75,note labels are floats,
pandas/,124,not monotonic,
pandas/,17,GH#16012,
pandas/,18,"This specific issue has to have a series over 1e6 in len, but the",
pandas/,19,comparison array (in_list) must be large enough so that numpy doesn't,
pandas/,20,do a manual masking trick that will avoid this issue altogether,
pandas/,22,"If numpy doesn't do the manual comparison/mask, these",
pandas/,23,unorderable mixed types are what cause the exception in numpy,
pandas/,29,GH#4763,
pandas/,43,GH#5021,
pandas/,48,datetime64[ns],
pandas/,57,fails on dtype conversion in the first place,
pandas/,70,timedelta64[ns],
pandas/,77,see GH#16991,
pandas/,21,object dtype,
pandas/,25,datetime64[ns] dtype,
pandas/,30,timedelta64[ns] dtype,
pandas/,35,GH7661,
pandas/,75,see gh-10174,
pandas/,77,interpolation = linear (default case),
pandas/,83,test with and without interpolation keyword,
pandas/,87,GH #10174,
pandas/,89,interpolation = linear (default case),
pandas/,100,GH 13098,
pandas/,106,all nan/empty,
pandas/,134,NaT,
pandas/,165,covers #9694,
pandas/,188,floats,
pandas/,198,int,
pandas/,208,datetime,
pandas/,41,rankdata returns a ndarray,
pandas/,98,GH 5968,
pandas/,115,GH issue #15420 rank incorrectly orders ordered categories,
pandas/,117,Test ascending/descending ranking for ordered categoricals,
pandas/,131,Unordered categoricals should be ranked as objects,
pandas/,151,Test na_option for rank data,
pandas/,169,Test na_option for rank data with ascending False,
pandas/,180,Test invalid values for na_option,
pandas/,186,invalid type,
pandas/,190,Test with pct=True,
pandas/,276,Insert nans at random positions if underlying dtype has missing,
pandas/,277,value. Then adjust the expected order by adding nans accordingly,
pandas/,278,This is for testing whether rank calculation is affected,
pandas/,279,when values are interwined with nan values.,
pandas/,287,shuffle the testing array and expected results in the same way,
pandas/,351,GH 19538,
pandas/,352,check descending ranking when mix nans and infs,
pandas/,363,add duplicates,
pandas/,427,GH 13445,
pandas/,429,smoke tests,
pandas/,434,GH 18521,
pandas/,435,Check rank does not mutate series,
pandas/,444,"GH15630, pct should be on 100% basis when method='dense'",
pandas/,560,GH 18271,
pandas/,11,check indexes are reordered corresponding with the values,
pandas/,25,na_position,
pandas/,30,something object-type,
pandas/,32,no failure,
pandas/,35,ascending=False,
pandas/,42,ascending=[False] should behave the same as ascending=False,
pandas/,66,inplace=True,
pandas/,74,GH#5856/5853,
pandas/,75,Series.sort_values operating on a view,
pandas/,91,sort in the categories order,
pandas/,127,Cats must be sorted in a dataframe,
pandas/,139,"unordered cat, but we allow this",
pandas/,142,multi-columns sort,
pandas/,143,GH#7848,
pandas/,150,sorts 'grade' according to the order of the categories,
pandas/,155,multi,
pandas/,171,GH 30114,
pandas/,13,array or list or dates,
pandas/,51,accepts strings,
pandas/,55,in there,
pandas/,59,no as of value,
pandas/,64,basic asof test,
pandas/,95,array or list or dates,
pandas/,126,accepts strings,
pandas/,130,in there,
pandas/,133,no as of value,
pandas/,137,Mismatched freq,
pandas/,149,non-monotonic,
pandas/,154,subset with Series,
pandas/,162,GH 15713,
pandas/,163,series is all nans,
pandas/,168,testing non-default indexes,
pandas/,177,testing scalar input,
pandas/,182,test name is propagated,
pandas/,83,do copy,
pandas/,89,do not copy,
pandas/,95,do copy,
pandas/,102,do not copy,
pandas/,121,GH 10665,
pandas/,130,these must be the same results (but flipped),
pandas/,157,GH31788,
pandas/,170,different timezones convert to UTC,
pandas/,181,TODO: assert something?,
pandas/,12,GH#8209,
pandas/,20,GH#13737,
pandas/,39,reg fillna,
pandas/,56,GH#27419,
pandas/,75,---------------------------------------------------------------,
pandas/,76,CategoricalDtype,
pandas/,92,GH#17033,
pandas/,93,Test fillna for a Categorical series,
pandas/,116,GH#26215,
pandas/,151,---------------------------------------------------------------,
pandas/,152,Invalid Usages,
pandas/,166,"related GH#9217, make sure limit is an int and greater than 0",
pandas/,12,GH#3367,
pandas/,15,check to be consistent with DatetimeIndex,
pandas/,35,nothing used from the input,
pandas/,40,Holes filled from input,
pandas/,47,mixed types,
pandas/,57,corner case,
pandas/,42,GH5873,
pandas/,69,GH 19966,
pandas/,110,GH 19966,
pandas/,26,GH#29478,
pandas/,16,can't convert tz-naive,
pandas/,22,neither specified,
pandas/,26,both specified,
pandas/,35,start specified,
pandas/,44,end specified,
pandas/,53,"corner case, empty series returned",
pandas/,68,GH#17935,
pandas/,84,GH 9243,
pandas/,92,GH 17717,
pandas/,15,with missing values,
pandas/,29,GH#2967 (introduced bug in 0.11-dev I think),
pandas/,17,GH 3217,
pandas/,30,other is int,
pandas/,35,"other is float, but can be cast to int",
pandas/,40,"others is float, cannot be cast to int",
pandas/,45,"other is object, cannot be cast",
pandas/,16,dict,
pandas/,21,partial dict,
pandas/,26,index with name,
pandas/,58,"Supporting axis for compatibility, detailed in GH-18589",
pandas/,62,FIXME: dont leave commenred-out,
pandas/,63,TODO: clean up shared index validation,
pandas/,64,"with pytest.raises(ValueError, match=""No axis named 5""):",
pandas/,65,"s.rename({}, axis=5)",
pandas/,75,GH 27814,
pandas/,84,GH 27814,
pandas/,94,GH 17407,
pandas/,23,descending,
pandas/,29,compat on level,
pandas/,33,compat on axis,
pandas/,49,For GH#11402,
pandas/,53,descending,
pandas/,62,ascending,
pandas/,86,GH#21052,
pandas/,93,implicit sort_remaining=True,
pandas/,97,GH#13496,
pandas/,98,sort has no effect without remaining lvls,
pandas/,103,GH#14444 & GH#13589:  Add support for sort algo choosing,
pandas/,156,GH 30114,
pandas/,44,GH 30086,
pandas/,59,GH8490,
pandas/,11,most dtypes are tested in tests/base,
pandas/,28,check DatetimeIndex outputs the same result,
pandas/,32,normalize,
pandas/,77,check DatetimeIndex outputs the same result,
pandas/,81,normalize,
pandas/,87,most dtypes are tested in tests/base,
pandas/,95,check CategoricalIndex outputs the same result,
pandas/,99,normalize,
pandas/,112,check CategoricalIndex outputs the same result,
pandas/,116,normalize,
pandas/,122,GH#12835,
pandas/,137,check object dtype handles the Series.name as the same,
pandas/,138,(tested in tests/base),
pandas/,145,see GH#9443,
pandas/,147,sanity check,
pandas/,157,same Series via two different constructions --> same behaviour,
pandas/,166,"None is a NaN value, so we exclude its count here",
pandas/,171,we don't exclude the count of None and sort by counts,
pandas/,176,"When we aren't sorting by counts, and np.nan isn't a",
pandas/,177,"category, it should be last.",
pandas/,203,GH32146,
pandas/,46,corner case,
pandas/,50,Shifting with PeriodIndex,
pandas/,67,legacy support,
pandas/,74,32-bit taking,
pandas/,75,GH#8129,
pandas/,84,GH#8260,
pandas/,85,with tz,
pandas/,94,incompat tz,
pandas/,109,"GH#1063, multiple of same base",
pandas/,120,GH#24128,
pandas/,128,check that fill value works,
pandas/,152,check for incorrect fill_value,
pandas/,158,GH#13926,
pandas/,185,PeriodIndex,
pandas/,202,DatetimeIndex,
pandas/,231,shift requires scalar fill_value except for object dtype,
pandas/,249,GH#9416,
pandas/,268,GH#31971,
pandas/,7,GH#21248,
pandas/,8,Note - combine() with another Series is tested elsewhere because,
pandas/,9,it is used when testing operators,
pandas/,13,TODO: de-duplicate/parametrize or move DataFrame test,
pandas/,36,it works!,
pandas/,71,GH#14320,
pandas/,78,GH#9854,
pandas/,21,check inplace,
pandas/,27,level,
pandas/,49,With MultiIndex,
pandas/,67,With single-level Index,
pandas/,82,"Check that .reset_index([],drop=True) doesn't fail",
pandas/,88,GH 12071,
pandas/,98,GH 20925,
pandas/,100,KeyError raised for series index when passed level name is missing,
pandas/,107,KeyError raised for series when level to be dropped is missing,
pandas/,19,Can't localize if already tz-aware,
pandas/,27,make sure that we are correctly accepting bool values as ambiguous,
pandas/,29,GH#14402,
pandas/,64,GH 8917,
pandas/,81,GH#2248,
pandas/,9,GH#20342,
pandas/,17,test that droplevel raises ValueError on axis != 0,
pandas/,53,0 -> False and 1-> True,
pandas/,54,any other value would be duplicated,
pandas/,63,validate shallow copy,
pandas/,75,Test case 1,
pandas/,79,"pre-empty flaky xfail, tc1 values are seemingly-random",
pandas/,104,Test case 2,
pandas/,108,"pre-empty flaky xfail, tc2 values are seemingly-random",
pandas/,20,See GH#12600,
pandas/,31,See GH#14197,
pandas/,52,GH14940,
pandas/,13,"The answerdict has keys that have 4 tuples, corresponding to the arguments",
pandas/,14,"infer_objects, convert_string, convert_integer, convert_boolean",
pandas/,15,This allows all 16 possible combinations to be tested.  Since common,
pandas/,16,"combinations expect the same answer, this provides an easy way to list",
pandas/,17,all the possibilities,
pandas/,86,GH32117,
pandas/,269,Test that it is a copy,
pandas/,278,Make sure original not changed,
pandas/,282,https://github.com/pandas-dev/pandas/issues/31731 -> converting columns,
pandas/,283,that are already string dtype,
pandas/,291,GH32287,
pandas/,9,GH 19978,
pandas/,26,GH 15704,
pandas/,36,GH 25034,
pandas/,93,When method='time' is used on a non-TimeSeries that contains a null,
pandas/,94,"value, a ValueError should be raised.",
pandas/,105,interpolate at new_index,
pandas/,110,"does not blow up, GH5977",
pandas/,122,interpolate at new_index,
pandas/,137,interpolate at new_index,
pandas/,152,interpolate at new_index,
pandas/,192,'values' is synonymous with 'index' for the method kwarg,
pandas/,244,slinear,
pandas/,251,nearest,
pandas/,258,zero,
pandas/,265,quadratic,
pandas/,266,GH #15662.,
pandas/,273,cubic,
pandas/,287,GH 9217: make sure limit is greater than zero.,
pandas/,294,GH 9217: make sure limit is an integer.,
pandas/,309,When an invalid method and invalid limit (such as -1) are,
pandas/,310,"provided, the error message reflects the invalid method.",
pandas/,317,Provide 'forward' (the default) explicitly here.,
pandas/,327,these test are for issue #16282 default Limit=None is unlimited,
pandas/,351,raises an error even if no limit is specified.,
pandas/,355,limit_area introduced GH #16284,
pandas/,357,These tests are for issue #9218 -- fill NaNs in both directions.,
pandas/,398,raises an error even if limit type is wrong.,
pandas/,404,These tests are for issue #9218 -- fill NaNs in both directions.,
pandas/,415,Check that this works on a longer series of nans.,
pandas/,429,These test are for issue #10420 -- flow back to beginning.,
pandas/,441,These test are for issue #11115 -- limit ends properly.,
pandas/,462,non-scipy,
pandas/,504,GH#27628 missing.interpolate_2d should handle datetimetz values,
pandas/,515,GH 7173,
pandas/,524,"see GH-10633, GH-24014",
pandas/,573,GH 6424,
pandas/,579,test for non uniform spacing,
pandas/,586,GH#1646,
pandas/,597,#1698,
pandas/,620,gh 21662,
pandas/,647,gh 21662,
pandas/,669,GH 21037,
pandas/,40,GH#17276,
pandas/,46,GH#19992,
pandas/,51,GH#6966,
pandas/,64,GH#15390,
pandas/,74,GH#11838,
pandas/,75,naive and tz-aware datetimes,
pandas/,28,GH#28664,
pandas/,32,the reason that the expected should be like this is documented at PR 28681,
pandas/,58,GH#7292,
pandas/,75,GH30463,
pandas/,102,a nested EA array,
pandas/,117,GH 28005,
pandas/,29,GH#7606 without freq,
pandas/,54,"midnight, everything",
pandas/,61,time doesn't exist,
pandas/,68,GH20725,
pandas/,78,helper function for 'test_boundary_{dtype}' tests,
pandas/,92,not supported on some archs,
pandas/,93,"Series([3., 2, 1, 2, 5], dtype='complex256'),",
pandas/,109,"float, int, datetime64 (use i8), timedelts64 (same),",
pandas/,110,"object that are numbers, object that are strings",
pandas/,139,GH#15297,
pandas/,159,GH 13412,
pandas/,170,GH#21426,
pandas/,177,GH#21426,
pandas/,186,GH#21426,
pandas/,187,use int64 bounds and +1 to min_val since true minimum is NaT,
pandas/,188,(include min_val/NaT at end to maintain same expected_idxr),
pandas/,195,see GH#16818,
pandas/,209,GH#26154 : ensure True > False,
pandas/,6,Just run the function,
pandas/,9,Now run it with the lag parameter,
pandas/,12,corr() with lag needs Series of at least length 2,
pandas/,19,Choose a random lag between 1 and length of Series - 2,
pandas/,20,and compare the result with the Series corr() function,
pandas/,25,corr() with lag needs Series of at least length 2,
pandas/,14,GH#16122,
pandas/,15,replace list with a single value,
pandas/,30,replace list with a single value,
pandas/,38,replace with different values,
pandas/,46,replace with different values with 2 lists,
pandas/,50,replace inplace,
pandas/,69,malformed,
pandas/,74,make sure that we aren't just masking a TypeError because bools don't,
pandas/,75,implement indexing,
pandas/,84,API change from 0.12?,
pandas/,85,GH 5319,
pandas/,95,GH 5797,
pandas/,104,GH 11792: Test with replacing NaT in a list with tz data,
pandas/,115,Using a single dict argument means we go through replace_list,
pandas/,130,make sure things don't get corrupted when fillna call fails,
pandas/,141,GH 21977,
pandas/,147,GH 19266,
pandas/,163,MUST upcast to float,
pandas/,168,MUST upcast to float,
pandas/,173,casts to object,
pandas/,178,again casts to object,
pandas/,183,casts to object,
pandas/,188,test an object with dates + floats + integers + strings,
pandas/,204,nonexistent elements,
pandas/,228,replace list with a single value,
pandas/,236,replace with different values,
pandas/,244,replace with different values with 2 lists,
pandas/,248,replace inplace,
pandas/,255,GH 32621,
pandas/,262,GH 15289,
pandas/,271,GH 15743,
pandas/,278,GH 20656,
pandas/,279,make sure all replacers are matching against original values,
pandas/,286,GH 15743,
pandas/,293,Testing mixed,
pandas/,308,GH 24971,
pandas/,309,Do not check if dtypes are equal due to a known issue that,
pandas/,310,Categorical.replace sometimes coerces to object (GH 23305),
pandas/,317,GH 26988,
pandas/,330,ensure non-inplace call does not alter original,
pandas/,337,test replacing with existing value,
pandas/,340,GH 25616,
pandas/,341,casts to object without Exception from OverflowError,
pandas/,360,GH 16051,
pandas/,361,DataFrame.replace() overwrites when values are non-numeric,
pandas/,374,GH 9113,
pandas/,375,BUG: replace int64 dtype with bool coerces to int64,
pandas/,384,GH 18634,
pandas/,385,API: replace() should raise an exception if invalid argument is given,
pandas/,395,GH#33340,
pandas/,62,across midnight,
pandas/,91,GH20725,
pandas/,98,GH11818,
pandas/,114,GH11818,
pandas/,134,issue 8839,
pandas/,13,full overlap,
pandas/,18,partial overlap,
pandas/,24,No overlap,
pandas/,27,all NA,
pandas/,32,min_periods,
pandas/,45,full overlap,
pandas/,48,partial overlap,
pandas/,57,No overlap,
pandas/,60,all NA,
pandas/,75,kendall and spearman,
pandas/,87,results from R,
pandas/,122,GH PR #22298,
pandas/,130,simple correlation example,
pandas/,131,"returns 1 if exact equality, 0 otherwise",
pandas/,134,simple example,
pandas/,140,full overlap,
pandas/,145,partial overlap,
pandas/,150,No overlap,
pandas/,155,dataframe example,
pandas/,11,Unique Index,
pandas/,15,GH 5248 Non-Unique Index,
pandas/,34,single string/tuple-like,
pandas/,36,bad axis,
pandas/,48,errors='ignore',
pandas/,56,GH 8522,
pandas/,67,GH 21494,
pandas/,83,GH 21494 and GH 16877,
pandas/,36,GH#20725,
pandas/,65,GH#20725,
pandas/,9,TODO: redundant with test_between_datetime_values?,
pandas/,31,GH 13677,
pandas/,38,the result must have RangeIndex,
pandas/,54,GH 28410,
pandas/,65,GH 31413,
pandas/,94,different index names,
pandas/,103,see gh-2938,
pandas/,121,see gh-2938,
pandas/,147,see gh-2938,
pandas/,196,GH#7795,
pandas/,197,"different tz coerces to object dtype, not UTC",
pandas/,222,mixed,
pandas/,63,https://github.com/pandas-dev/pandas/issues/27183,
pandas/,75,"ensure NaN, not None",
pandas/,80,GH 21332,
pandas/,15,GH#7179,
pandas/,12,no longer works as the return type of np.diff is now nd.array,
pandas/,19,int dtype,
pandas/,28,"Combined datetime diff, normal diff and boolean diff test",
pandas/,32,neg n,
pandas/,37,0,
pandas/,42,datetime diff (GH#3100),
pandas/,48,timedelta diff,
pandas/,49,previous result,
pandas/,50,previously expected,
pandas/,53,with tz,
pandas/,66,boolean series (test for fixing #17294),
pandas/,73,object series,
pandas/,90,"GH 21425, test when index is given a list",
pandas/,177,"GH 21425, test when columns is given a list",
pandas/,93,assign arbitrary names,
pandas/,99,GH 17005,
pandas/,130,to keep index.name,
pandas/,147,GH 15972,
pandas/,168,to keep index.name,
pandas/,214,GH 3820,
pandas/,228,GS 10291,
pandas/,239,GH 12577,
pandas/,240,pivot_table counts null into margin ('All'),
pandas/,241,when margins=true and dropna=true,
pandas/,268,GH 12642,
pandas/,269,_add_margins raises KeyError: Level None not found,
pandas/,270,when margins=True and dropna=False,
pandas/,336,Issue 12578,
pandas/,347,Check all normalize args,
pandas/,386,Test arrays,
pandas/,391,Test with aggfunc,
pandas/,417,Check handling of empties,
pandas/,446,Issue 12578,
pandas/,472,GH 8860,
pandas/,494,GH 4003,
pandas/,537,GH 13279,
pandas/,559,GH 18321,
pandas/,582,GH 15150,
pandas/,622,GH 27500,
pandas/,642,normalize on index,
pandas/,657,normalize on columns,
pandas/,679,normalize on both index and column,
pandas/,95,this works,
pandas/,112,issue #24923,
pandas/,203,GH 15193,
pandas/,225,add back the non observed to compare,
pandas/,231,gh-21133,
pandas/,256,gh-21378,
pandas/,282,GH 25814,
pandas/,289,GH 25815,
pandas/,333,can convert dtypes,
pandas/,350,cannot convert dtypes,
pandas/,376,GH 7142 regression test,
pandas/,394,GH 14380,
pandas/,449,margins not supported??,
pandas/,466,GH 3588,
pandas/,492,GH9491,
pandas/,520,GH 5878,
pandas/,579,GH 14948,
pandas/,680,GH 28323,
pandas/,716,issue #17160,
pandas/,752,issue #17160,
pandas/,785,GH 30924,
pandas/,798,issue #17160,
pandas/,837,issue #17160,
pandas/,847,tuple is seen as a single column name,
pandas/,875,column specified,
pandas/,881,Set a different margins_name (not 'All'),
pandas/,892,no column specified,
pandas/,899,no col,
pandas/,901,to help with a buglet,
pandas/,943,GH 31016,
pandas/,972,GH 17013,
pandas/,1017,GH 17038,
pandas/,1034,check tz retention,
pandas/,1038,caused by upstream bug in unstack,
pandas/,1059,GH #1181,
pandas/,1136,Regression test on pivot table: no values or cols passed.,
pandas/,1144,Regression test on pivot table: no values passed but rows are a,
pandas/,1145,multi-index,
pandas/,1152,Regression test on pivot table: no values passed but row and col,
pandas/,1153,defined,
pandas/,1160,Regression test on pivot table: no values passed but rows and cols,
pandas/,1161,are multi-indexed,
pandas/,1170,see gh-3335,
pandas/,1176,multi-index index,
pandas/,1186,multi-index column,
pandas/,1196,non-multi-index index/column,
pandas/,1277,passing the name,
pandas/,1315,passing the level,
pandas/,1353,double grouper,
pandas/,1545,GH 8103,
pandas/,1664,GH 12017,
pandas/,1683,GH 13354,
pandas/,1714,GH 10989,
pandas/,1742,GH 24893,
pandas/,1760,gh-21370,
pandas/,1770,case with index/columns/value,
pandas/,1789,case with columns/value,
pandas/,1799,GH 9534,
pandas/,1819,GH 8731,
pandas/,1862,GH 4386,
pandas/,1863,pivot_table always returns a DataFrame,
pandas/,1864,when values is not list like and columns is None,
pandas/,1865,and aggfunc is not instance of list,
pandas/,1890,issue #13292,
pandas/,1901,GH #18713,
pandas/,1902,for correctness purposes,
pandas/,1974,GH #18713,
pandas/,1975,for consistency purposes,
pandas/,1982,GH 20601,
pandas/,1994,GH 22159,
pandas/,2029,GH 22159,
pandas/,2046,GH 9186,
pandas/,2060,GH 10326,
pandas/,32,We store the bins as Index that have been,
pandas/,33,rounded to comparisons are a bit tricky.,
pandas/,99,"see gh-1978, gh-1979",
pandas/,136,GH 13318,
pandas/,145,GH 13318,
pandas/,160,GH 13318,
pandas/,176,see gh-7751,
pandas/,194,see gh-15431,
pandas/,216,see gh-19768,
pandas/,228,see gh-19872,
pandas/,268,see gh-19891,
pandas/,284,issue 20303,
pandas/,74,GH 15348,
pandas/,115,melt should fail with an informative error message if,
pandas/,116,the columns have a MultiIndex and a tuple is passed,
pandas/,117,for id_vars or value_vars.,
pandas/,254,GH 15785,
pandas/,274,GH 15853,
pandas/,284,GH-23575,
pandas/,285,This test is to ensure that pandas raises an error if melting is,
pandas/,286,attempted with column names absent from the dataframe,
pandas/,288,Generate data,
pandas/,291,Try to melt with missing `value_vars` column name,
pandas/,298,Try to melt with missing `id_vars` column name,
pandas/,302,Multiple missing,
pandas/,309,Multiindex melt fails if column is missing from multilevel melt,
pandas/,314,Multiindex fails if column is missing from single level melt,
pandas/,321,GH 29718,
pandas/,330,GH 29718,
pandas/,595,GH9204,
pandas/,600,TODO: unused?,
pandas/,601,noqa,
pandas/,606,GH14779,
pandas/,659,test that we can have a varying amount of time variables,
pandas/,682,Test we handle overlapping characters in both id_vars and value_vars,
pandas/,712,if an invalid separator is supplied a empty data frame is returned,
pandas/,742,Test that we can disambiguate number value_vars from,
pandas/,743,string value_vars,
pandas/,775,"If all stubs names end with a string, but a numeric suffix is",
pandas/,776,"assumed,  an empty data frame is returned",
pandas/,804,Taken from http://www.ats.ucla.edu/stat/stata/modules/reshapel.htm,
pandas/,845,GH16382,
pandas/,846,Raise an error message if non unique id vars (i) are passed,
pandas/,977,GH22468,
pandas/,978,Don't raise ValueError when a column name is a substring,
pandas/,979,of a stubname that's been passed as a string,
pandas/,13,GH 13361,
pandas/,46,new categories ordered by appearance,
pandas/,61,must exactly match types,
pandas/,73,GH 13759,
pandas/,100,all NaN,
pandas/,117,GH 13759,
pandas/,127,check fastpath,
pandas/,141,https://github.com/pandas-dev/pandas/issues/19096,
pandas/,177,GH 15219,
pandas/,229,GH 13846,
pandas/,238,fastpath,
pandas/,251,fastpath - skip resort,
pandas/,282,GH 13846,
pandas/,291,fastpath,
pandas/,298,fastpath - skip resort,
pandas/,332,GH 14173,
pandas/,25,"params are strings to simplify reading test results,",
pandas/,26,e.g. TestGetDummies::test_basic[uint8-sparse] instead of [uint8-True],
pandas/,60,GH 10531,
pandas/,136,"Sparse dataframes do not allow nan labelled columns, see #GH8822",
pandas/,143,hack (NaN handling in assert_index_equal),
pandas/,156,See GH 6885 - get_dummies chokes on unicode values,
pandas/,231,not that you should do this...,
pandas/,241,work around astyping & assigning with duplicate columns,
pandas/,242,https://github.com/pandas-dev/pandas/issues/14427,
pandas/,407,GH22084 get_dummies incorrectly encodes unicode characters,
pandas/,408,in dataframe column names,
pandas/,413,GH12402 Add a new parameter `drop_first` to avoid collinearity,
pandas/,414,Basic case,
pandas/,434,Test the case that categorical variable only has one level.,
pandas/,452,Test NA handling together with drop_first,
pandas/,557,GH13854,
pandas/,571,GH18914,
pandas/,581,GH20839,
pandas/,609,issue #28383,
pandas/,103,to confirm test case covers intended dtypes,
pandas/,109,GH 13660,
pandas/,122,----- Index -----,
pandas/,124,index.append,
pandas/,129,3 elements,
pandas/,134,index.append name mismatch,
pandas/,141,index.append name match,
pandas/,148,cannot append non-index,
pandas/,155,----- Series -----,
pandas/,157,series.append,
pandas/,162,concat,
pandas/,166,3 elements,
pandas/,179,name mismatch,
pandas/,189,name match,
pandas/,199,cannot append non-index,
pandas/,217,GH 13660,
pandas/,223,basically infer,
pandas/,228,same dtype is tested in test_concatlike_same_dtypes,
pandas/,231,ToDo: suspicious,
pandas/,234,specify expected dtype,
pandas/,236,series coerces to numeric based on numpy rule,
pandas/,237,index doesn't because bool is object dtype,
pandas/,253,----- Index -----,
pandas/,255,index.append,
pandas/,260,3 elements,
pandas/,265,----- Series -----,
pandas/,267,series.append,
pandas/,272,concat,
pandas/,276,3 elements,
pandas/,290,GH 13626,
pandas/,291,"result must be Timestamp/Timedelta, not datetime.datetime/timedelta",
pandas/,323,GH 7795,
pandas/,344,GH#7795,
pandas/,361,GH 13660,
pandas/,363,different tz coerces to object,
pandas/,388,different tz,
pandas/,402,"tm.assert_index_equal(res, exp)",
pandas/,413,GH 13660,
pandas/,431,GH 13221,
pandas/,457,GH 13221,
pandas/,458,different datetimelike,
pandas/,482,inverse,
pandas/,505,GH 13524,
pandas/,507,same categories -> category,
pandas/,515,partially different categories => not-category,
pandas/,523,completely different categories (same dtype) => not-category,
pandas/,532,https://github.com/pandas-dev/pandas/issues/19096,
pandas/,542,GH 13524,
pandas/,544,category + not-category => not-category,
pandas/,552,result shouldn't be affected by 1st elem dtype,
pandas/,557,all values are not in category => not-category,
pandas/,569,completely different categories => not-category,
pandas/,581,different dtype => not-category,
pandas/,593,if normal series only contains NaN-likes => not-category,
pandas/,606,GH 13524,
pandas/,608,mixed dtypes => not-category,
pandas/,621,values are all in either category => not-category,
pandas/,634,values are all in either category => not-category,
pandas/,648,GH 13524,
pandas/,657,"mixed dtype, values are all in categories => not-category",
pandas/,671,GH 13524,
pandas/,687,GH 13524,
pandas/,689,some edge cases,
pandas/,690,category + not-category => not category,
pandas/,705,"mixed dtype, all nan-likes => not-category",
pandas/,715,all category nan-likes => category,
pandas/,725,GH 13524,
pandas/,745,different dtype => not-category,
pandas/,754,empty Series is ignored,
pandas/,784,mixed type handling,
pandas/,788,what to test here,
pandas/,792,all equal except 'foo' column,
pandas/,815,see gh-6129: new columns,
pandas/,850,"rewrite sort fixture, since we also want to test default of None",
pandas/,858,for None / True,
pandas/,903,#980,
pandas/,937,GH18359,
pandas/,939,df wider than ser,
pandas/,949,ser wider than df,
pandas/,968,GH18359,
pandas/,969,See also test 'test_append_different_columns_types_raises' below,
pandas/,970,for errors raised when appending,
pandas/,1000,GH18359,
pandas/,1001,Dataframe.append will raise if MultiIndex appends,
pandas/,1002,or is appended to a different index type,
pandas/,1003,,
pandas/,1004,See also test 'test_append_different_columns_types' above for,
pandas/,1005,appending without raising.,
pandas/,1028,GH 4993,
pandas/,1029,appending with datetime will incorrectly convert datetime64,
pandas/,1086,GH 23682,
pandas/,1091,n.b. it's not clear to me that expected is correct here.,
pandas/,1092,It's possible that the `date` column should have,
pandas/,1093,"datetime64[ns, tz] dtype for both result and expected.",
pandas/,1094,that would be more consistent with new columns having,
pandas/,1095,"their own dtype (float for a and b, datetime64ns, tz for date).",
pandas/,1101,These columns get cast to object after append,
pandas/,1113,These are actual copies.,
pandas/,1119,These are the same.,
pandas/,1130,Float block was consolidated.,
pandas/,1145,axis=0,
pandas/,1161,axis=1,
pandas/,1196,it works,
pandas/,1201,GH10698,
pandas/,1294,GH 6606,
pandas/,1323,GH 15787,
pandas/,1367,no names,
pandas/,1375,no levels,
pandas/,1387,GH #1406,
pandas/,1455,GH 4771,
pandas/,1457,single dtypes,
pandas/,1471,multi dtypes,
pandas/,1490,append,
pandas/,1502,10697,
pandas/,1503,"columns have mixed tuples, so handle properly",
pandas/,1507,it works,
pandas/,1526,empty as first element with time series,
pandas/,1527,GH3259,
pandas/,1544,concat mixed series/frames,
pandas/,1545,G2385,
pandas/,1547,axis 1,
pandas/,1578,with names,
pandas/,1593,ignore index,
pandas/,1600,axis 0,
pandas/,1613,xref to #12411,
pandas/,1614,xref to #12045,
pandas/,1615,xref to #11594,
pandas/,1616,see below,
pandas/,1618,10571,
pandas/,1627,12411,
pandas/,1633,12045,
pandas/,1642,11594,
pandas/,1681,"preserve series names, #2489",
pandas/,1693,"must reindex, #2603",
pandas/,1701,"ensure names argument is not ignored on axis=1, #23490",
pandas/,1756,#1649,
pandas/,1773,to join with union,
pandas/,1774,these two are of different length!,
pandas/,1792,"GH 3602, duplicate columns",
pandas/,1817,GH 15328,
pandas/,1837,"GH8645 check concat works with tuples, list, generators, and weird",
pandas/,1838,stuff like deque and custom iterables,
pandas/,1870,trying to concat a ndframe with a non-ndframe,
pandas/,1890,generator ok though,
pandas/,1893,text reader ok,
pandas/,1894,GH6583,
pandas/,1910,GH 11693,
pandas/,1911,test for merging NaT series with datetime series.,
pandas/,1921,all NaT with tz,
pandas/,1926,without tz,
pandas/,1934,all NaT without tz,
pandas/,1949,concat,
pandas/,1954,gh-11755: tz and no tz,
pandas/,1961,gh-11887: concat tz and object,
pandas/,1968,see gh-12217 and gh-12306,
pandas/,1969,Concatenating two UTC times,
pandas/,1979,Concatenating two London times,
pandas/,1989,Concatenating 2+1 London times,
pandas/,1999,Concat'ing 1+2 London times,
pandas/,2010,see gh-12620: tz and timedelta,
pandas/,2019,tz and period,
pandas/,2025,see gh-13583,
pandas/,2043,GH 12396,
pandas/,2045,tz-naive,
pandas/,2062,GH 12396,
pandas/,2078,GH 12396,
pandas/,2080,tz-naive,
pandas/,2106,GH 12396,
pandas/,2149,non-period,
pandas/,2165,GH 11082,
pandas/,2178,name will be reset,
pandas/,2182,empty Series with no name,
pandas/,2196,GH 18447,
pandas/,2212,is_series and ignore_index,
pandas/,2218,use check_index_type=True to check the result have,
pandas/,2219,RangeIndex (default index),
pandas/,2222,is_series and all inputs have no names,
pandas/,2231,is_dataframe and ignore_index,
pandas/,2244,GH13542,
pandas/,2245,when multi-index levels are RangeIndex objects,
pandas/,2246,there is a bug in concat with objects of len 1,
pandas/,2259,GH 9967,
pandas/,2291,GH 13524 can concat different categories,
pandas/,2305,GH8143,
pandas/,2325,See GH 10177,
pandas/,2361,GH 7864,
pandas/,2362,make sure ordering is preserved,
pandas/,2381,GH 8641  series concat not preserving category dtype,
pandas/,2382,GH 13524 can concat different categories,
pandas/,2428,wrong categories,
pandas/,2437,"GH 16111, categories that aren't lexsorted",
pandas/,2459,GH 17344,
pandas/,2470,GH 18523,
pandas/,2526,GH 13783: Concat after resample,
pandas/,2545,GH 21510,
pandas/,2560,GH 13247,
pandas/,2587,GH 18178 regression test,
pandas/,2596,GH 18187 regression test,
pandas/,2606,GH-4588,
pandas/,2610,for sort=True/None,
pandas/,2619,default,
pandas/,2629,For True/None,
pandas/,2636,Warn and sort by default,
pandas/,2643,https://github.com/pandas-dev/pandas/pull/20613,
pandas/,2648,unset sort should *not* warn for inner join,
pandas/,2649,since that never sorted,
pandas/,2659,GH-4588,
pandas/,2674,GH-4588,
pandas/,2675,We catch TypeErrors from sorting internally and do not re-raise.,
pandas/,2684,GH21015,
pandas/,2693,GH-23816,
pandas/,2709,GH-12007,
pandas/,2710,test fix for when concat on categorical and float,
pandas/,2711,coerces dtype categorical -> float,
pandas/,2725,GH 3232,
pandas/,2726,Monotonic index result,
pandas/,2733,Non-monotonic index result,
pandas/,2741,GH 9149,
pandas/,2750,GH 23557,
pandas/,2761,GH 29879,
pandas/,19,regression test for GitHub issue #6439,
pandas/,20,make sure that the ordering on datetimeindex is consistent,
pandas/,45,product of empty factors,
pandas/,55,empty product (empty input):,
pandas/,97,Make sure we preserve the bins.,
pandas/,109,see gh-23980,
pandas/,166,GH 26045,
pandas/,208,GH 24314,
pandas/,215,see gh-1511,
pandas/,321,see gh-16459,
pandas/,332,It works.,
pandas/,346,see gh-1979,
pandas/,367,see gh-8589,
pandas/,387,see gh-20947,
pandas/,403,"see gh-14652, gh-15428",
pandas/,415,issue 18773,
pandas/,475,see gh-14714,
pandas/,476,,
pandas/,477,Testing time data when it comes in various collection types.,
pandas/,512,see gh-19872,
pandas/,562,see gh-19891,
pandas/,577,see gh-19891,
pandas/,600,issue 20303,
pandas/,610,GH 13318,
pandas/,98,aggregate multiple columns,
pandas/,108,exclude a couple keys for fun,
pandas/,125,GH 15328,
pandas/,138,https://github.com/pandas-dev/pandas/issues/17962,
pandas/,139,Checks that method runs for non string column names,
pandas/,150,GH14355,
pandas/,186,inner join,
pandas/,294,"#733, be a bit more 1337 about not returning unconsolidated DataFrame",
pandas/,313,#8596,
pandas/,324,GH13169,
pandas/,325,this really should be bool,
pandas/,392,Not monotonic,
pandas/,433,GH 10824,
pandas/,447,GH 10824,
pandas/,462,make empty DataFrame keeping dtype,
pandas/,463,result will have object dtype,
pandas/,496,GH 10824,
pandas/,511,make empty DataFrame keeping dtype,
pandas/,512,result will have object dtype,
pandas/,537,GH 25183,
pandas/,555,GH 25183,
pandas/,576,"GH#2098, TODO: anything to do?",
pandas/,649,timedelta64 issues with join/merge,
pandas/,650,GH 5695,
pandas/,678,GH 13389,
pandas/,693,"coerces to datetime64[ns], thus should not be affected",
pandas/,709,GH 13389,
pandas/,743,"#2649, #10639",
pandas/,751,GH11405,
pandas/,802,https://github.com/pandas-dev/pandas/issues/25014,
pandas/,827,GH 18885,
pandas/,859,GH #16871,
pandas/,914,PR #10054. xref #7412 and closes #8790.,
pandas/,966,No side effects,
pandas/,970,Check with custom name,
pandas/,985,Check only accepts strings and booleans,
pandas/,992,Check result integrity,
pandas/,1009,Check if working name in df,
pandas/,1023,Check for name conflict with custom name,
pandas/,1040,Merge on multiple columns,
pandas/,1072,Make sure no side effects.,
pandas/,1080,make sure merge still correct,
pandas/,1114,"One index, one column",
pandas/,1135,Dups on right,
pandas/,1158,Dups on left,
pandas/,1183,Dups on both,
pandas/,1200,Check invalid arguments,
pandas/,1205,"Two column merge, dups in both, but jointly no dups.",
pandas/,1245,"GH17776, PR #17846",
pandas/,1286,GH 24212,
pandas/,1287,"pd.merge gets [0, 1, 2, -1, -1, -1] as left_indexer, ensure that",
pandas/,1288,-1 is interpreted as a missing value instead of the last element,
pandas/,1307,Note: the expected output here is probably incorrect.,
pandas/,1308,See https://github.com/pandas-dev/pandas/issues/17257 for more.,
pandas/,1309,We include this as a regression test for GH-24897.,
pandas/,1323,GH 27453,
pandas/,1336,GH 24212,
pandas/,1359,https://github.com/pandas-dev/pandas/issues/27943,
pandas/,1368,no error,
pandas/,1378,TODO check_names on merge?,
pandas/,1400,GH 9780,
pandas/,1401,We allow merging on object and categorical cols and cast,
pandas/,1402,categorical cols to object,
pandas/,1449,GH 16572,
pandas/,1450,Check that float column is not cast to object if,
pandas/,1451,merging on float and int columns,
pandas/,1463,GH 17044,
pandas/,1474,GH 16572,
pandas/,1475,merge will produce a warning when merging on int and,
pandas/,1476,float columns where the float values are not exactly,
pandas/,1477,equal to their int representation,
pandas/,1490,test no warning if float has NaNs,
pandas/,1498,GH21119: bool + object bool merge OK,
pandas/,1508,with missing value,
pandas/,1521,merge on category coerces to object,
pandas/,1524,no not infer,
pandas/,1530,"these are explicitly allowed incompat merges, that pass thru",
pandas/,1531,the result type is dependent on if the values on the rhs are,
pandas/,1532,"inferred, otherwise these will be coerced to object",
pandas/,1545,do not infer to numeric,
pandas/,1564,"GH 9780, GH 15800",
pandas/,1565,Raise a ValueError when a user tries to merge on,
pandas/,1566,"dtypes that are incompatible (e.g., obj and int/float)",
pandas/,1580,Check that error still raised when swapping order of dataframes,
pandas/,1614,"merging on the same, should preserve dtypes",
pandas/,1624,we have matching Categorical dtypes in X,
pandas/,1625,so should preserve the merged column,
pandas/,1635,GH 9426,
pandas/,1651,object-object,
pandas/,1654,object-cat,
pandas/,1655,note that we propagate the category,
pandas/,1656,because we don't have any matching rows,
pandas/,1663,cat-object,
pandas/,1669,cat-cat,
pandas/,1678,GH-19551,
pandas/,1703,non-merge columns should preserve if possible,
pandas/,1714,categories are preserved,
pandas/,1727,"our merging columns, X now has 2 different dtypes",
pandas/,1728,so we must be object as a result,
pandas/,1733,assert not left.X.values.is_dtype_equal(right.X.values),
pandas/,1744,GH 16767,
pandas/,1745,non-duplicates should work with multiple categories,
pandas/,1775,change them all to categorical variables,
pandas/,1778,self-join should equal ourselves,
pandas/,1784,GH 16900,
pandas/,1785,dates should not be coerced to ints,
pandas/,1826,GH 17187,
pandas/,1827,merging with a boolean/int categorical column,
pandas/,1839,GH 23020,
pandas/,1926,gh-20777,
pandas/,1927,assert key access is consistent across index types,
pandas/,1953,GH 21220,
pandas/,2014,issue: 24782,
pandas/,2038,issue: 24782,
pandas/,2042,"TODO: might reconsider current raise behaviour, see issue 24782",
pandas/,2050,issue: 24782,
pandas/,2054,"TODO: might reconsider current raise behaviour, see GH24782",
pandas/,2063,see gh-22501,
pandas/,2098,see gh-22501,
pandas/,2101,Test Data,
pandas/,2120,GH 28668,
pandas/,2134,Issue #28518,
pandas/,2135,Verify that merging two dataframes give the expected labels,
pandas/,2136,The original cause of this issue come from a bug lexsort_depth and is tested in,
pandas/,2137,test_lexsort_depth,
pandas/,2152,Constructing the expected results,
pandas/,2164,https://github.com/pandas-dev/pandas/issues/31208,
pandas/,2182,GH 28189,
pandas/,2183,"With n_categories as 5, we test the int8 case is hit in libjoin,",
pandas/,2184,with n_categories as 128 we test the int16 case.,
pandas/,136,GH14887,
pandas/,150,GH14887,
pandas/,185,GH14253,
pandas/,193,"left-only index uses right""s index, oddly",
pandas/,195,"time column appears after left""s columns",
pandas/,223,MultiIndex is prohibited,
pandas/,236,"""on"" parameter and index together is prohibited",
pandas/,253,GH14253,
pandas/,275,GH13936,
pandas/,340,GH13936,
pandas/,405,GH15676,
pandas/,468,just use a single ticker,
pandas/,526,dti,
pandas/,529,integer,
pandas/,538,incompat,
pandas/,542,invalid,
pandas/,552,invalid negative,
pandas/,572,we require that we are already sorted on time & quotes,
pandas/,588,"ok, though has dupes",
pandas/,606,GH14887,
pandas/,619,GH14887,
pandas/,632,GH 14844,
pandas/,672,GH22981,
pandas/,690,GH 15135,
pandas/,714,GH14887,
pandas/,729,GH14887,
pandas/,757,GH 13695,
pandas/,807,GH 13709,
pandas/,844,GH14887,
pandas/,864,GH14887,
pandas/,884,GH14887,
pandas/,914,GH14887,
pandas/,944,"we specialize by type, so test that this is correct",
pandas/,1005,mimics how to determine the minimum-price variation,
pandas/,1035,see gh-13936,
pandas/,1066,see gh-13936,
pandas/,1102,"type specialize both ""by"" and ""on"" parameters",
pandas/,1187,GH 16454,
pandas/,1198,GH 23189,
pandas/,1212,GH 21184,
pandas/,1235,GH 26649,
pandas/,1261,GH 27642,
pandas/,1297,GH #28870,
pandas/,1313,GH 29864,
pandas/,17,aggregate multiple columns,
pandas/,27,exclude a couple keys for fun,
pandas/,41,Join on string value,
pandas/,78,0        1        1        1,
pandas/,93,2        2        4,
pandas/,189,join with duplicates (fix regression from DataFrame/Matrix merge),
pandas/,198,Test when some are missing,
pandas/,207,merge column not p resent,
pandas/,211,overlap,
pandas/,259,GH12081 - original issue,
pandas/,261,GH21220 - merging of Series and DataFrame is now allowed,
pandas/,262,Edited test to remove the Series object from test parameters,
pandas/,283,nothing to merge,
pandas/,309,corner cases,
pandas/,321,GH #638,
pandas/,329,no overlapping blocks,
pandas/,361,overlap,
pandas/,379,generated an exception in 0.4.3,
pandas/,384,GH #331,
pandas/,390,it works!,
pandas/,491,"_assert_same_contents(expected, expected2.loc[:, expected.columns])",
pandas/,494,GH 2024,
pandas/,499,"GH 9455, 12219",
pandas/,563,GH 11519,
pandas/,598,smoke test,
pandas/,603,"GH 12814, unorderable types in py3 with a non-unique index",
pandas/,622,GH #16871,
pandas/,635,GH #916,
pandas/,644,it works!,
pandas/,661,different join types,
pandas/,687,joining dups,
pandas/,703,"GH 4975, invalid join on dups",
pandas/,718,GH 20475,
pandas/,745,"GH 23931, 26335",
pandas/,769,GH 5647,
pandas/,800,some smoke tests,
pandas/,841,filter,
pandas/,844,"get rid of suffixes, if any",
pandas/,847,put in the right order...,
pandas/,854,drop_duplicates not so NA-friendly...,
pandas/,85,Handle on param if specified,
pandas/,89,Compute input named index levels,
pandas/,93,Compute output named index levels,
pandas/,96,Drop index levels that aren't involved in the merge,
pandas/,105,Convert remaining index levels to columns,
pandas/,114,Perform merge,
pandas/,117,Restore index levels,
pandas/,135,Construct expected result,
pandas/,138,Perform merge,
pandas/,156,Construct expected result,
pandas/,161,Perform merge,
pandas/,169,Construct left_df,
pandas/,172,Construct right_df,
pandas/,175,Result,
pandas/,184,Perform join,
pandas/,77,GH 9157,
pandas/,15,a little relevant example with NAs,
pandas/,88,a little relevant example with NAs,
pandas/,166,inject some nulls,
pandas/,181,compare left vs right merge with multikey,
pandas/,191,Reorder columns,
pandas/,197,GH29522,
pandas/,219,~ 40000000 possible unique groups,
pandas/,230,just to hit the label compression code path,
pandas/,261,test join with multi dtypes blocks,
pandas/,402,GH7331 - maintain left frame order in left merge,
pandas/,465,see gh-19038,
pandas/,489,GH 3662,
pandas/,490,merge multi-levels,
pandas/,555,equivalency,
pandas/,582,invalid cases,
pandas/,596,some more advanced merges,
pandas/,597,GH6360,
pandas/,661,this is the equivalency,
pandas/,737,Multi-index join tests,
pandas/,775,see gh-19038,
pandas/,823,GH 25760,
pandas/,824,GH 28956,
pandas/,79,Do not ignore row-column orderings.,
pandas/,104,Index,
pandas/,110,MultiIndex,
pandas/,218,see gh-20503,
pandas/,219,,
pandas/,220,Test ensures that `tm.assert_frame_equals` raises the right exception,
pandas/,221,when comparing DataFrames containing differing unicode objects.,
pandas/,228,https://github.com/pandas-dev/pandas/issues/32747,
pandas/,247,https://github.com/pandas-dev/pandas/issues/32747,
pandas/,108,Empty compare.,
pandas/,174,Class is different.,
pandas/,176,Dtype is different.,
pandas/,178,Can't compare generators.,
pandas/,317,see gh-20503,
pandas/,9,openpyxl,
pandas/,13,html5lib,
pandas/,17,fastparquet,
pandas/,21,pandas_datareader,
pandas/,25,gh-32041,
pandas/,30,check header,
pandas/,33,check full commit hash,
pandas/,36,check required dependency,
pandas/,39,check optional dependency,
pandas/,63,No exceptions should be raised.,
pandas/,65,"duplicate value for ""foo""",
pandas/,74,No exceptions should be raised.,
pandas/,31,The error state should be unchanged after that import.,
pandas/,15,Raise by default.,
pandas/,11,Default is check_exact=False,
pandas/,17,see gh-23709,
pandas/,126,see gh-20503,
pandas/,127,,
pandas/,128,Test ensures that `tm.assert_numpy_array_equals` raises the right,
pandas/,129,exception when comparing np.arrays containing differing unicode objects.,
pandas/,182,https://github.com/pandas-dev/pandas/issues/31881,
pandas/,68,Check that our hash doesn't change because of a mistake,
pandas/,69,in the actual code; this is the ground truth.,
pandas/,119,Test equivalence between,
pandas/,120,hash_tuples and hash_tuple.,
pandas/,177,These are equal.,
pandas/,226,These are by-definition the same with,
pandas/,227,or without the index as the data is empty.,
pandas/,241,see gh-15143,
pandas/,242,,
pandas/,243,"Check that categoricals hash consistent with their values,",
pandas/,244,not codes. This should work for categoricals of any dtype.,
pandas/,248,These should all hash identically.,
pandas/,278,"Using different hash keys, should have",
pandas/,279,different hashes for the same data.,
pandas/,280,,
pandas/,281,This only matters for object dtypes.,
pandas/,291,This only matters for object dtypes.,
pandas/,299,"If already encoded, then ok.",
pandas/,320,Hash collisions are bad.,
pandas/,321,,
pandas/,322,https://github.com/pandas-dev/pandas/issues/14711#issuecomment-264885726,
pandas/,324,noqa: E501,
pandas/,325,noqa: E501,
pandas/,328,These should be different.,
pandas/,342,GH#28969 array containing a tuple raises on call to arr.astype(str),
pandas/,343,apparently a numpy bug github.com/numpy/numpy/issues/9441,
pandas/,355,require that the elements of such tuples are themselves hashable,
pandas/,363,https://github.com/pandas-dev/pandas/issues/30887,
pandas/,41,No exceptions should be raised.,
pandas/,90,dtype mismatch,
pandas/,91,index mismatch,
pandas/,92,name mismatch,
pandas/,126,Index,
pandas/,132,MultiIndex,
pandas/,202,https://github.com/pandas-dev/pandas/issues/32747,
pandas/,219,https://github.com/pandas-dev/pandas/issues/32747,
pandas/,43,non-monotonic,
pandas/,44,non-unique,
pandas/,46,"over size threshold, not unique",
pandas/,69,non-monotonic,
pandas/,70,non-unique,
pandas/,72,"over size threshold, not unique",
pandas/,89,monotonic increasing,
pandas/,94,monotonic decreasing,
pandas/,99,neither monotonic increasing or decreasing,
pandas/,108,unique,
pandas/,113,not unique,
pandas/,121,unique,
pandas/,126,monotonic,
pandas/,132,not monotonic,
pandas/,174,monotonic increasing,
pandas/,179,monotonic decreasing,
pandas/,184,neither monotonic increasing or decreasing,
pandas/,191,unique,
pandas/,196,not unique,
pandas/,202,unique,
pandas/,207,monotonic,
pandas/,213,not monotonic,
pandas/,31,GH#18505 : valid tuples containing NaN,
pandas/,42,GH#18400,
pandas/,66,GH#32167 Categorical data and dtype=object should return object-dtype,
pandas/,105,mixed np.datetime64/timedelta64 nat results in object,
pandas/,116,Test passing different arraylike values to pd.Index,
pandas/,22,GH 21115,
pandas/,24,Tested separately in test_multi.py,
pandas/,31,GH 21121 : droplevel with tuple name,
pandas/,44,GH 20527,
pandas/,52,With .rename(),
pandas/,56,With .set_names(),
pandas/,68,FutureWarning from non-tuple sequence of nd indexing,
pandas/,85,GH 9943 9862,
pandas/,86,Test unions with various name combinations,
pandas/,87,Do not test MultiIndex or repeats,
pandas/,92,Test copy.union(copy),
pandas/,99,Test copy.union(empty),
pandas/,106,Test empty.union(copy),
pandas/,113,Test empty.union(empty),
pandas/,121,22866,
pandas/,131,don't tests a MultiIndex here (as its tested separated),
pandas/,140,should return None,
pandas/,144,FIXME: dont leave commented-out,
pandas/,145,"with pytest.raises(TypeError, match=""list-like""):",
pandas/,146,# should still fail even if it would be the right length,
pandas/,147,"ind.set_names(""a"")",
pandas/,151,rename in place just leaves tuples and other containers alone,
pandas/,172,don't test a MultiIndex here (as its tested separated),
pandas/,173,don't test a CategoricalIndex because categories change (GH 18291),
pandas/,177,GH 17896,
pandas/,195,MultiIndex tested separately,
pandas/,202,"We test against `idx_unique`, so first we make sure it's unique",
pandas/,203,and doesn't contain nans.,
pandas/,214,nans:,
pandas/,252,GH17271,
pandas/,253,not implemented for tuple searches in MultiIndex,
pandas/,254,or Intervals searches in IntervalIndex,
pandas/,258,nothing to test if the index is empty,
pandas/,263,determine the expected results (handle dupes for 'right'),
pandas/,266,"all values are the same, expected_right should be length",
pandas/,269,test _searchsorted_monotonic in all cases,
pandas/,270,test searchsorted only for increasing,
pandas/,291,non-monotonic should raise.,
pandas/,315,make unique index,
pandas/,320,make duplicated index,
pandas/,325,Series.duplicated is tested separately,
pandas/,331,Series.drop_duplicates is tested separately,
pandas/,339,make unique index,
pandas/,341,RangeIndex cannot have duplicates,
pandas/,348,check on unique index,
pandas/,353,validate shallow copy,
pandas/,364,MultiIndex tested separately in:,
pandas/,365,tests/indexes/multi/test_unique_and_duplicates.,
pandas/,366,RangeIndex is unique by definition.,
pandas/,379,https://github.com/pandas-dev/pandas/issues/32013,
pandas/,386,Some of these conversions cannot succeed so we use a try / except,
pandas/,45,assert that we are creating a copy of the index,
pandas/,53,GH#18699,
pandas/,55,index kwarg,
pandas/,62,name kwarg,
pandas/,78,GH#8367 round-trip with timezone,
pandas/,89,test the string repr,
pandas/,13,GH#23081,
pandas/,36,test the string repr,
pandas/,66,map to NaT,
pandas/,82,don't compare the freqs,
pandas/,93,empty map; these map to np.nan because we cannot know,
pandas/,94,to re-infer things,
pandas/,60,GH#30588 multi-dimensional indexing deprecated,
pandas/,75,casting,
pandas/,83,copy,
pandas/,84,index = self.create_index(),
pandas/,93,FIXME: dont leave commented-out,
pandas/,94,what to do here?,
pandas/,95,arr = np.array(5.),
pandas/,96,"pytest.raises(Exception, arr.view, Index)",
pandas/,108,DTI with tz,
pandas/,109,DTI no tz,
pandas/,110,td,
pandas/,111,period,
pandas/,125,"GH#23524 check that Index(dti, dtype=object) does not",
pandas/,126,"incorrectly raise ValueError, and that nanoseconds are not",
pandas/,127,dropped,
pandas/,139,datetimetz,
pandas/,140,td,
pandas/,141,period,
pandas/,152,GH 6273,
pandas/,153,"create from a series, passing a freq",
pandas/,163,GH 6273,
pandas/,164,"create from a series, passing a freq",
pandas/,179,GH 6274,
pandas/,180,infer freq of same,
pandas/,193,GH 5460#issuecomment-44474502,
pandas/,194,it should be possible to convert any object that satisfies the numpy,
pandas/,195,ndarray interface directly into an Index,
pandas/,208,see gh-15187,
pandas/,216,see gh-15187,
pandas/,236,GH 13467,
pandas/,266,below should coerce,
pandas/,348,Test constructing with a datetimetz dtype,
pandas/,349,".values produces numpy datetimes, so these are considered naive",
pandas/,350,".asi8 produces integers, so these are considered epoch timestamps",
pandas/,351,^the above will be true in a later version. Right now we `.view`,
pandas/,352,"the i8 values as NS_DTYPE, effectively treating them as wall times.",
pandas/,429,see gh-15832,
pandas/,475,it works!,
pandas/,478,pass on name,
pandas/,484,same,
pandas/,494,GH 22295,
pandas/,495,test there is no mangling of NA values,
pandas/,508,index,
pandas/,535,quasi-implementation dependent,
pandas/,541,"doesn't matter if Indices are *actually* views of underlying data,",
pandas/,574,"this does not yet work, as parsing strings is done via dateutil",
pandas/,575,assert first_value == x['2013-01-01 00:00:00.000000050+0000'],
pandas/,611,"pd.DatetimeIndex is excluded, because it overrides getitem and should",
pandas/,612,be tested separately.,
pandas/,617,"np.ndarray only accepts ndarray of int & bool dtypes, so should Index",
pandas/,631,Corner cases,
pandas/,638,preserve same name,
pandas/,639,drop diff names,
pandas/,693,non-monotonic non-unique,
pandas/,712,TODO decide on True behaviour,
pandas/,718,Chained unions handles names correctly,
pandas/,746,https://github.com/pandas-dev/pandas/issues/24959,
pandas/,749,"default, sort=None",
pandas/,754,sort=False,
pandas/,760,TODO decide on True behaviour,
pandas/,761,sort=True,
pandas/,763,"default, sort=None",
pandas/,773,GH 10149,
pandas/,789,i.e. identity is not preserved when sort is True,
pandas/,792,"This should no longer be the same object, since [] is not consistent,",
pandas/,793,both objects will be recast to dtype('O'),
pandas/,823,TODO: Replace with fixturesult,
pandas/,841,GH 12766,
pandas/,845,GH 12766,
pandas/,847,Test that returning a single tuple from an Index,
pandas/,848,returns an Index.,
pandas/,854,Test that returning a tuple from a map of a single index,
pandas/,855,returns a MultiIndex object.,
pandas/,861,Test that returning a single object from a MultiIndex,
pandas/,862,returns an Index.,
pandas/,890,GH 12756,
pandas/,904,GH 12756,
pandas/,906,Tested in test_categorical,
pandas/,909,Cannot map duplicated index,
pandas/,913,to match proper result coercion for uints,
pandas/,926,GH 12756,
pandas/,1005,smoke,
pandas/,1016,__xor__ syntax,
pandas/,1027,"sort=None, the default",
pandas/,1034,sort=False,
pandas/,1042,TODO decide on True behaviour,
pandas/,1043,"# sort=True, raises",
pandas/,1069,GH 13514 change: {nan} - {nan} == {},
pandas/,1070,"(GH 6444, sorting of nans, is no longer an issue)",
pandas/,1091,GH 20040,
pandas/,1092,"If taking difference of a set and itself, it",
pandas/,1093,needs to preserve the type of the index,
pandas/,1101,GH 20040,
pandas/,1102,Test that the intersection of an index with an,
pandas/,1103,empty index produces the same index as the difference,
pandas/,1104,of an index with itself.  Test for all types,
pandas/,1112,GH#32922,
pandas/,1166,GH3869`,
pandas/,1169,shouldn't be formatted accidentally.,
pandas/,1177,GH 14626,
pandas/,1178,windows has different precision on datetime.datetime.now (it doesn't,
pandas/,1179,include us since the default for Timestamp shows these but Index,
pandas/,1180,formatting does not we are skipping),
pandas/,1192,2845,
pandas/,1193,Copy for each iteration,
pandas/,1204,bug I fixed 12/20/2011,
pandas/,1256,GH10411,
pandas/,1362,GH 16877,
pandas/,1372,GH 22332,
pandas/,1373,"check pairwise, that no pair of na values",
pandas/,1374,is mangled,
pandas/,1376,"skip it, values are not unique",
pandas/,1455,reversed,
pandas/,1514,type: ignore,
pandas/,1515,type: ignore,
pandas/,1516,type: ignore,
pandas/,1517,type: ignore,
pandas/,1518,type: ignore,
pandas/,1519,type: ignore,
pandas/,1520,absent labels,
pandas/,1521,type: ignore,
pandas/,1522,type: ignore,
pandas/,1523,type: ignore,
pandas/,1524,type: ignore,
pandas/,1525,type: ignore,
pandas/,1526,type: ignore,
pandas/,1527,type: ignore,
pandas/,1528,type: ignore,
pandas/,1529,type: ignore,
pandas/,1574,TODO: Parametrize numeric and str tests after self.strIndex fixture,
pandas/,1601,GH 18304,
pandas/,1682,GH 28621,
pandas/,1693,TODO: Remove function? GH 19728,
pandas/,1698,"Index.get_value requires a Series, not an ndarray",
pandas/,1709,empty,
pandas/,1717,Test cartesian product of null fixtures and ensure that we don't,
pandas/,1718,mangle the various types (save a corner case with PyPy),
pandas/,1720,all nans are the same,
pandas/,1732,should preserve NA type,
pandas/,1748,"Float64Index overrides isin, so must be checked separately",
pandas/,1756,we cannot compare NaT with NaN,
pandas/,1766,"Float64Index overrides isin, so must be checked separately",
pandas/,1799,see gh-16991,
pandas/,1848,GH9068,
pandas/,1891,"test boolean case, should return np.array instead of boolean Index",
pandas/,1911,GH 9910,
pandas/,1928,right_index in this case because DatetimeIndex has join precedence,
pandas/,1929,over Int64Index,
pandas/,1942,GH 12631,
pandas/,1948,fill_value,
pandas/,1953,allow_fill=False,
pandas/,1985,Must preserve name even if dtype changes,
pandas/,1991,GH6552,
pandas/,1998,GH7774,
pandas/,2011,GH7774,
pandas/,2038,GH9785,
pandas/,2039,test comparisons of multiindex,
pandas/,2075,GH 10875,
pandas/,2082,ASCII,
pandas/,2083,short,
pandas/,2088,multiple lines,
pandas/,2097,truncated,
pandas/,2106,Non-ASCII,
pandas/,2107,short,
pandas/,2112,multiple lines,
pandas/,2125,truncated,
pandas/,2146,short,
pandas/,2151,multiple lines,
pandas/,2166,truncated,
pandas/,2183,Enable Unicode option -----------------------------------------,
pandas/,2195,https://github.com/pandas-dev/pandas/issues/16409,
pandas/,2202,GH 31324 newer jedi version raises Deprecation warning,
pandas/,2216,GH#30103 method removed for all types except IntervalIndex,
pandas/,2226,Mostly the tests from common.py for which the results differ,
pandas/,2227,in py2 and py3 because ints and strings are uncomparable in py3,
pandas/,2228,(GH 13514),
pandas/,2249,"Check that ""name"" argument passed at initialization is honoured",
pandas/,2250,GH12309,
pandas/,2256,"Even though ""copy=False"", we want a new object.",
pandas/,2271,"Check that adding a ""name"" parameter to the copy is honored",
pandas/,2272,GH14302,
pandas/,2314,GH 6194,
pandas/,2396,GH 26447,
pandas/,2413,GH32146,
pandas/,2447,GH27172,
pandas/,2486,pd.Index.__rsub__ does not exist; though the method does exist,
pandas/,2487,for subclasses.  see GH#19723,
pandas/,2496,GH #19348,
pandas/,2517,"Currently, it is possible to create ""invalid"" index objects backed by",
pandas/,2518,a multi-dimensional array (see https://github.com/pandas-dev/pandas/issues/27125,
pandas/,2519,"about this). However, as long as this is not solved in general,this test ensures",
pandas/,2520,that the returned shape is consistent with this underlying array for,
pandas/,2521,compat with matplotlib (see https://github.com/pandas-dev/pandas/issues/27775),
pandas/,2524,GH#30588 multi-dimensional indexing deprecated,
pandas/,2529,GH#27125 check that we do not have >1-dimensional input,
pandas/,2549,GH#13601 trying to assign a multi-dimensional array to an index is not,
pandas/,2550,allowed,
pandas/,2557,"slice with None at both ends, but not step",
pandas/,2588,PeriodArray will try to cast ints to strings,
pandas/,48,"test ufuncs of numpy, see:",
pandas/,49,https://docs.scipy.org/doc/numpy/reference/ufuncs.html,
pandas/,53,raise TypeError or ValueError (PeriodIndex),
pandas/,58,coerces to float (e.g. np.sin),
pandas/,66,raise AttributeError or TypeError,
pandas/,79,"test ufuncs of numpy, see:",
pandas/,80,https://docs.scipy.org/doc/numpy/reference/ufuncs.html,
pandas/,89,numpy 1.18(dev) changed isinf and isnan to not raise on dt64/tfd64,
pandas/,94,ok under numpy >= 1.17,
pandas/,95,Results in bool array,
pandas/,99,raise TypeError or ValueError (PeriodIndex),
pandas/,104,raise TypeError or ValueError (PeriodIndex),
pandas/,109,Results in bool array,
pandas/,122,https://github.com/pandas-dev/pandas/issues/22698#issuecomment-458968300,
pandas/,123,"np.array([1, 2]) == 'a' returns False, and produces a",
pandas/,124,"FutureWarning that it'll be [False, False] in the future.",
pandas/,125,We just want to ensure that comes through.,
pandas/,126,"When NumPy dev actually enforces this change, we'll need to skip",
pandas/,127,this test.,
pandas/,24,"Union with a non-unique, non-monotonic index raises error",
pandas/,25,Only needed for bool index factory,
pandas/,32,This test only considers combinations of indices,
pandas/,33,GH 23525,
pandas/,45,A union with a CategoricalIndex (even as dtype('O')) and a,
pandas/,46,non-CategoricalIndex can only be made if both indices are monotonic.,
pandas/,47,This is true before this PR as well.,
pandas/,49,"Union with a non-unique, non-monotonic index raises error",
pandas/,50,This applies to the boolean index,
pandas/,60,GH 23525,
pandas/,46,Checking if np.inf in Int64Index should not cause an OverflowError,
pandas/,47,Related to GH 16957,
pandas/,61,GH#19860,
pandas/,68,GH#19860,
pandas/,72,GH#22085,
pandas/,17,Pass whatever function you normally would to pytest.raises,
pandas/,18,(after the Exception kind).,
pandas/,83,Other shouldn't be mutated.,
pandas/,102,GH 26447,
pandas/,18,Tested in numeric.test_indexing,
pandas/,27,override Base method,
pandas/,31,GH 8608,
pandas/,32,add/sub are overridden explicitly for Float/Int Index,
pandas/,35,float conversions,
pandas/,43,interops with numpy arrays,
pandas/,83,GH 18295 (test missing),
pandas/,133,explicit construction,
pandas/,154,nan handling,
pandas/,172,GH 29539,
pandas/,181,invalid,
pandas/,208,these don't auto convert,
pandas/,230,GH 12881,
pandas/,231,a float astype int,
pandas/,254,invalid,
pandas/,263,GH 13149,
pandas/,278,see gh-15832,
pandas/,284,"There is no Float32Index, so we always",
pandas/,285,generate Float64Index.,
pandas/,313,"If we have datetime64 or timedelta64 values, make sure they are",
pandas/,314,wrappped correctly  GH#31163,
pandas/,337,"GH#31329 .at[4] should cast to 4.0, matching .loc behavior",
pandas/,370,GH 11343,
pandas/,372,can't downcast,
pandas/,376,downcast,
pandas/,380,object,
pandas/,456,"corner case, non-Int64Index",
pandas/,472,can't,
pandas/,477,shouldn't,
pandas/,503,"return Int64Index(np.arange(5, dtype=""int64""))",
pandas/,507,"pass list, coerce fine",
pandas/,512,from iterable,
pandas/,516,scalar raise Exception,
pandas/,524,copy,
pandas/,530,this should not change index,
pandas/,534,interpret list-like,
pandas/,550,preventing casting,
pandas/,561,see gh-15832,
pandas/,574,coerce things,
pandas/,578,but not if explicit dtype passed,
pandas/,613,large values used in TestUInt64Index where no compat needed with Int64/Float64,
pandas/,618,compat with shared Int64/Float64 tests; use index_large for UInt64 only tests,
pandas/,638,https://github.com/pandas-dev/pandas/issues/29526,
pandas/,658,https://github.com/pandas-dev/pandas/issues/26778,
pandas/,659,[u]int | float -> float,
pandas/,671,https://github.com/pandas-dev/pandas/issues/26778,
pandas/,683,https://github.com/pandas-dev/pandas/issues/28279,
pandas/,684,https://github.com/pandas-dev/pandas/issues/28023,
pandas/,42,need an object to create with,
pandas/,54,"see GH-15230, GH-22580",
pandas/,74,GH8083 test the base class for shift,
pandas/,83,GH#29069 check that name is hashable,
pandas/,84,See also same-named test in tests.series.test_constructors,
pandas/,91,"GH11193, when an existing index is passed, and a new name is not",
pandas/,92,"specified, the new index should inherit the previous object name",
pandas/,145,"Check that this doesn't cover MultiIndex case, if/when it does,",
pandas/,146,we can remove multi.test_compat.test_numeric_compat,
pandas/,184,See GH 16819,
pandas/,210,test for validity,
pandas/,220,GH10182,
pandas/,228,"gh-12309: Check that the ""name"" argument",
pandas/,229,passed at initialization is honored.,
pandas/,236,"Even though ""copy=False"", we want a new object.",
pandas/,239,Not using tm.assert_index_equal() since names differ.,
pandas/,249,See gh-13365,
pandas/,254,"Check the ""copy"" argument of each Index.__new__ is honoured",
pandas/,255,GH12309,
pandas/,258,"Needs ""freq"" specification:",
pandas/,261,RangeIndex cannot be initialized from data,
pandas/,262,MultiIndex and CategoricalIndex are tested separately,
pandas/,273,".values an object array of Period, thus copied",
pandas/,277,checked in test_interval.py,
pandas/,289,we report 0 for no-length,
pandas/,293,non-zero length,
pandas/,298,"RangeIndex, IntervalIndex",
pandas/,299,don't have engines,
pandas/,307,separately tested,
pandas/,320,these are the only two types that perform,
pandas/,321,pandas compatibility input validation - the,
pandas/,322,rest already perform separate (or no) such,
pandas/,323,validation via their 'values' attribute as,
pandas/,324,defined in pandas.core.indexes/base.py - they,
pandas/,325,cannot be changed at the moment due to,
pandas/,326,backwards compatibility concerns,
pandas/,343,not enough elements; ignore,
pandas/,351,GH 10791,
pandas/,411,non-iterable input,
pandas/,426,"The second.values below will drop tz, so the rest of this test",
pandas/,427,is not applicable.,
pandas/,430,GH 10149,
pandas/,449,"The second.values below will drop tz, so the rest of this test",
pandas/,450,is not applicable.,
pandas/,453,GH 10149,
pandas/,475,GH 10149,
pandas/,502,GH 10149,
pandas/,519,test 0th element,
pandas/,527,tested in class,
pandas/,541,either depending on numpy version,
pandas/,546,IntervalIndex tested separately,
pandas/,556,Cannot pass in non-int64 dtype to RangeIndex,
pandas/,558,TODO: CategoricalIndex can be re-allowed following GH#32167,
pandas/,564,do not test MultiIndex,
pandas/,568,"GH9947, GH10637",
pandas/,586,test comparisons with numpy arrays,
pandas/,596,test comparisons with Series,
pandas/,607,cases where length is 1 for one of them,
pandas/,620,comparing with a scalar should broadcast; note that we are excluding,
pandas/,621,MultiIndex because in this case each item in the index is a tuple of,
pandas/,622,"length 2, and therefore is considered an array of length 2 in the",
pandas/,623,comparison instead of a scalar,
pandas/,626,assuming the 2nd to last item is unique in the data,
pandas/,632,"GH 11343, added tests for hasnans / isnans",
pandas/,636,cases in indices doesn't include NaN,
pandas/,665,GH 11343,
pandas/,704,this is really a smoke test for the methods,
pandas/,705,as these are adequately tested for function elsewhere,
pandas/,726,GH 15270,
pandas/,738,callable,
pandas/,741,we don't infer UInt64,
pandas/,765,we don't infer to UInt64 for a dict,
pandas/,774,empty mappable,
pandas/,780,GH 31202,
pandas/,787,GH18368,
pandas/,803,GH 18630,
pandas/,808,standard categories,
pandas/,814,non-standard categories,
pandas/,821,"dtype='category' defaults to ordered=False, so only test once",
pandas/,827,initialize a unique index,
pandas/,831,empty index should be unique,
pandas/,835,test basic dupes,
pandas/,839,single NA should be unique,
pandas/,843,multiple NA should not be unique,
pandas/,848,GH27585,
pandas/,855,GH#30588,
pandas/,871,GH32898,
pandas/,873,populates the _cache.,
pandas/,876,check that the copied cache is a copy of the original,
pandas/,879,cache values should reference the same object,
pandas/,884,GH32669,
pandas/,886,populates the _cache.,
pandas/,889,check that the shallow_copied cache is a copy of the original,
pandas/,892,cache values should reference the same object,
pandas/,10,large values used in UInt64Index tests where no compat needed with Int64/Float64,
pandas/,57,FIXME: dont leave commented-out,
pandas/,58,representable by slice [0:2:2],
pandas/,59,"pytest.raises(KeyError, idx.slice_locs, np.nan)",
pandas/,64,not representable by slice,
pandas/,72,GH#8569,
pandas/,80,listlike/non-hashable raises TypeError,
pandas/,103,GH#7820,
pandas/,171,GH 12631,
pandas/,177,fill_value,
pandas/,182,allow_fill=False,
pandas/,202,see gh-12631,
pandas/,211,fill_value=True,
pandas/,215,allow_fill=False,
pandas/,28,not monotonic,
pandas/,31,"no guarantee of sortedness, so sort for comparison purposes",
pandas/,46,monotonic,
pandas/,64,not monotonic,
pandas/,74,monotonic,
pandas/,82,non-unique,
pandas/,86,"1 is in idx2, so it should be x2",
pandas/,98,not monotonic,
pandas/,108,monotonic,
pandas/,117,non-unique,
pandas/,121,"1 is in idx2, so it should be x2",
pandas/,161,not monotonic,
pandas/,162,guarantee of sortedness,
pandas/,178,monotonic,
pandas/,196,large values used in TestUInt64Index where no compat needed with Int64/Float64,
pandas/,206,not monotonic,
pandas/,209,"no guarantee of sortedness, so sort for comparison purposes",
pandas/,224,monotonic,
pandas/,246,not monotonic,
pandas/,256,monotonic,
pandas/,265,non-unique,
pandas/,270,"1 is in idx2, so it should be x2",
pandas/,285,not monotonic,
pandas/,295,monotonic,
pandas/,307,non-unique,
pandas/,312,"1 is in idx2, so it should be x2",
pandas/,358,not monotonic,
pandas/,359,guarantee of sortedness,
pandas/,375,monotonic,
pandas/,36,Dummy method to override super's version; this test is now done,
pandas/,37,in test_arithmetic.py,
pandas/,41,this is handled in test_arithmetic.py,
pandas/,73,freq must be preserved,
pandas/,138,test_map_dictlike generally tests,
pandas/,186,with nat,
pandas/,195,preserve name (GH15589),
pandas/,201,doc example,
pandas/,203,series,
pandas/,225,tdi,
pandas/,7,GH#11343,
pandas/,9,preserve freq,
pandas/,13,reset freq to None,
pandas/,32,either depending on numpy version,
pandas/,38,preserve freq,
pandas/,42,reset freq to None,
pandas/,64,GH#30655 behavior matches DatetimeIndex,
pandas/,15,GH 7735,
pandas/,17,"create repeated values, 'n'th element is repeated by n+1 times",
pandas/,55,GH 9512,
pandas/,69,see gh-9680,
pandas/,78,GH 10295,
pandas/,138,GH 10115,
pandas/,145,freq is reset,
pandas/,163,to check Index/Series compat,
pandas/,177,GH#11018,
pandas/,227,GH 13107,
pandas/,246,Check that we dont raise OverflowError on comparisons outside the,
pandas/,247,implementation range,
pandas/,252,FIXME: oob.apply(np.timedelta64) incorrectly overflows,
pandas/,260,GH 20678,
pandas/,263,"can set to an offset, converting from string if necessary",
pandas/,268,can reset to None,
pandas/,273,GH 20678,
pandas/,276,setting with an incompatible freq,
pandas/,284,setting with a non-fixed frequency,
pandas/,289,setting with non-freq string,
pandas/,20,GH#23539 check that a copy isn't made when we pass int64 data,
pandas/,21,and copy=False,
pandas/,27,GH#23539,
pandas/,28,fast-path for inferring a frequency if the passed data already,
pandas/,29,has one,
pandas/,35,check that inferred_freq was not called by checking that the,
pandas/,36,value has not been cached,
pandas/,40,GH#23539,
pandas/,41,fast-path for invalidating a frequency if the passed data already,
pandas/,42,has one and it does not match the `freq` input,
pandas/,53,GH#23789,
pandas/,63,GH#23539,
pandas/,64,"passing tz-aware DatetimeIndex raises, naive or ndarray[datetime64]",
pandas/,65,raise as of GH#29794,
pandas/,79,"GH#23539 without specifying a unit, floats are regarded as nanos,",
pandas/,80,and fractional portions are truncated,
pandas/,85,integral floats are non-lossy,
pandas/,90,NaNs get converted to NaT,
pandas/,96,GH#23539,
pandas/,131,unicode,
pandas/,156,GH #21877,
pandas/,178,generator expression,
pandas/,184,NumPy string array,
pandas/,193,non-conforming freq,
pandas/,212,GH10025,
pandas/,217,"GH-24753, GH-24739",
pandas/,69,GH#9116,
pandas/,12,-------------------------------------------------------------,
pandas/,13,TimedeltaIndex.shift is used by __add__/__sub__,
pandas/,16,GH#9903,
pandas/,22,GH#9903,
pandas/,31,GH#9903,
pandas/,40,GH#8083,
pandas/,56,GH#8083,
pandas/,72,GH#19147,
pandas/,49,"GH 13149, GH 13209",
pandas/,83,"GH 13149, GH 13209",
pandas/,100,"GH 13149, GH 13209",
pandas/,20,insertion of non-datetime should coerce to object index,
pandas/,32,preserve freq,
pandas/,44,reset freq to None,
pandas/,74,GH 18295 (test missing),
pandas/,86,"To match DatetimeIndex and PeriodIndex behavior, dont try to",
pandas/,87,parse strings to Timedelta,
pandas/,95,Corner case inserting with length zero doesnt raise IndexError,
pandas/,37,GH 20976,
pandas/,44,not enough params,
pandas/,61,too many params,
pandas/,22,Works,
pandas/,23,"Fails with ""AttributeError: can't set attribute""",
pandas/,31,Check that we are testing the desired code path,
pandas/,82,"When taking the union of two TimedeltaIndexes, we infer",
pandas/,83,a freq even if the arguments don't have freq.  This matches,
pandas/,84,DatetimeIndex behavior.,
pandas/,111,GH 24471 Test intersection outcome given the sort keyword,
pandas/,112,for equal indicies intersection should return the original index,
pandas/,120,Corner cases,
pandas/,126,GH 24471 test for non overlap the intersection should be zero length,
pandas/,134,GH 24966 test for 0-len intersections are copied,
pandas/,144,"if target has the same name, it is preserved",
pandas/,150,"if target name is different, it will be reset",
pandas/,155,if no overlap exists return empty index,
pandas/,163,GH 4690 (with tz),
pandas/,174,part intersection works,
pandas/,180,reordered part intersection,
pandas/,185,reveresed index,
pandas/,195,24471 non-monotonic,
pandas/,203,"if reveresed order, frequency is still the same",
pandas/,212,GH14323: Difference of TimedeltaIndex should not preserve frequency,
pandas/,14,GH#21282,
pandas/,22,GH#4226,
pandas/,62,non-matching NA values,
pandas/,67,GH#20464,
pandas/,102,GH 16909,
pandas/,105,GH 16896,
pandas/,166,GH 10295,
pandas/,217,TODO: This method came from test_timedelta; de-dup with version above,
pandas/,233,GH 12631,
pandas/,239,fill_value,
pandas/,244,allow_fill=False,
pandas/,15,it works,
pandas/,40,GH#32157,
pandas/,35,higher reso,
pandas/,15,GH#10939,
pandas/,16,test index,
pandas/,24,test Series,
pandas/,29,with nat,
pandas/,37,with both nat,
pandas/,87,Same test for TimedeltaArray,
pandas/,90,TODO: de-duplicate with test_tdi_round,
pandas/,97,note that negative times round DOWN! so don't give whole numbers,
pandas/,129,with nat,
pandas/,10,GH#11343,
pandas/,12,fill by value in categories,
pandas/,16,fill by value not in categories raises ValueError,
pandas/,22,empty,
pandas/,28,passing categories,
pandas/,78,turn me to an Index,
pandas/,85,specify dtype,
pandas/,94,these are generally only equal when the categories are reordered,
pandas/,100,make sure indexes are handled,
pandas/,107,see GH#22702,
pandas/,113,construction with CategoricalDtype,
pandas/,114,GH#18109,
pandas/,122,GH#19032,
pandas/,126,error when combining categories/ordered and dtype kwargs,
pandas/,11,short,
pandas/,13,noqa,
pandas/,16,multiple lines,
pandas/,21,noqa,
pandas/,25,truncated,
pandas/,30,noqa,
pandas/,34,larger categories,
pandas/,38,noqa,
pandas/,42,short,
pandas/,44,noqa,
pandas/,47,multiple lines,
pandas/,52,noqa,
pandas/,56,truncated,
pandas/,61,noqa,
pandas/,65,larger categories,
pandas/,69,noqa,
pandas/,73,Emable Unicode option -----------------------------------------,
pandas/,76,short,
pandas/,78,noqa,
pandas/,81,multiple lines,
pandas/,87,noqa,
pandas/,91,truncated,
pandas/,98,noqa,
pandas/,102,larger categories,
pandas/,106,noqa,
pandas/,11,GH 12631,
pandas/,13,numeric category,
pandas/,20,fill_value,
pandas/,26,allow_fill=False,
pandas/,32,object category,
pandas/,43,fill_value,
pandas/,51,allow_fill=False,
pandas/,74,datetime category,
pandas/,84,fill_value,
pandas/,91,allow_fill=False,
pandas/,131,GH 12531,
pandas/,141,non-unique,
pandas/,145,results in bool array,
pandas/,151,unique element results in scalar,
pandas/,160,"non-unique, sliceable",
pandas/,164,results in slice,
pandas/,197,Determined by cat ordering.,
pandas/,220,see gh-17323,
pandas/,221,,
pandas/,222,Even when indexer is equal to the,
pandas/,223,"members in the index, we should",
pandas/,224,respect duplicates instead of taking,
pandas/,225,the fast-track path.,
pandas/,280,assert codes NOT in index,
pandas/,301,GH 23705,
pandas/,307,GH#21729,
pandas/,45,GH 10039,
pandas/,46,set ops (+/-) raise TypeError,
pandas/,66,GH18862 (let rename_categories take callables),
pandas/,96,invalid,
pandas/,106,append cats with the same categories,
pandas/,114,empty,
pandas/,118,appending with different categories or reordered is not ok,
pandas/,125,with objects,
pandas/,130,invalid objects,
pandas/,135,GH14298 - if base object is not categorical -> coerce to object,
pandas/,141,hits Index._concat_same_dtype,
pandas/,153,test 0th element,
pandas/,158,test Nth element that follows Python list behavior,
pandas/,163,test empty,
pandas/,168,invalid,
pandas/,176,GH 18295 (test missing),
pandas/,196,Either depending on NumPy version,
pandas/,205,"this IS equal, but not the same class",
pandas/,210,interval,
pandas/,228,GH 18630,
pandas/,233,standard categories,
pandas/,244,non-standard categories,
pandas/,251,"dtype='category' can't specify ordered, so only test once",
pandas/,277,test when data is neither monotonic increasing nor decreasing,
pandas/,283,non lexsorted categories,
pandas/,378,formatting,
pandas/,381,long format,
pandas/,382,this is not reprable,
pandas/,399,mismatched categorical -> coerced to ndarray so doesn't matter,
pandas/,417,"gh-12309: Check the ""copy"" argument of each",
pandas/,418,Index.__new__ is honored.,
pandas/,419,,
pandas/,420,Must be tested separately from other indexes because,
pandas/,421,self.values is not an ndarray.,
pandas/,422,GH#29918 Index.base has been removed,
pandas/,423,FIXME: is this test still meaningful?,
pandas/,453,invalid comparisons,
pandas/,473,tests,
pandas/,474,make sure that we are testing for category inclusion properly,
pandas/,477,"Same categories, but different order",
pandas/,478,Unordered,
pandas/,480,Ordered,
pandas/,496,https://github.com/pandas-dev/pandas/issues/16603,
pandas/,521,num. of uniques required to push CategoricalIndex.codes to a,
pandas/,522,dtype (128 categories required for .codes dtype to be int16 etc.),
pandas/,526,"having 2**32 - 2**31 categories would be very memory-intensive,",
pandas/,527,so we cheat a bit with the dtype,
pandas/,528,== 2**16 - 2**(16 - 1),
pandas/,534,See test_reindex.py,
pandas/,538,See test_map.py,
pandas/,19,GH 31202 - override base class since we want to maintain categorical/ordered,
pandas/,42,GH 12766: Return an index not an array,
pandas/,47,change categories dtype,
pandas/,66,GH 12756,
pandas/,87,GH 24241,
pandas/,34,See GH25459,
pandas/,49,See GH16770,
pandas/,7,GH#11343,
pandas/,26,GH#7228,
pandas/,51,This is handled in test_indexing,
pandas/,64,GH10183,
pandas/,85,GH13067,
pandas/,93,GH-24391,
pandas/,195,infer freq from first element,
pandas/,204,Mixed freq should fail,
pandas/,214,"year, month, day, hour, minute",
pandas/,215,"second, weekofyear, week, dayofweek, weekday, dayofyear, quarter",
pandas/,216,qyear,
pandas/,282,GH 6631,
pandas/,312,GH 28337,
pandas/,378,see gh-13582,
pandas/,400,monotonic,
pandas/,410,not monotonic,
pandas/,430,This is tested in test_arithmetic,
pandas/,458,Todo: fix these accessors!,
pandas/,504,#1705,
pandas/,522,#1815,
pandas/,532,drops index,
pandas/,538,GH2891,
pandas/,545,test_map_dictlike generally tests,
pandas/,553,GH 18295 (test missing),
pandas/,578,issue 20684,
pandas/,611,GH#31437,
pandas/,612,"PeriodIndex.is_monotonic should behave analogously to DatetimeIndex,",
pandas/,613,in particular never be monotonic when we have NaT,
pandas/,620,i.e. not Engines,
pandas/,632,i.e. not Engines,
pandas/,644,i.e. not Engines,
pandas/,30,GH 7735,
pandas/,32,"create repeated values, 'n'th element is repeated by n+1 times",
pandas/,86,GH 10115,
pandas/,92,freq will not be reset,
pandas/,111,to check Index/Series compat,
pandas/,130,for compatibility check,
pandas/,157,for compatibility check,
pandas/,296,GH#13107,
pandas/,314,"same internal, different tz",
pandas/,327,GH 20678,
pandas/,330,no warning for getter,
pandas/,334,warning for setter,
pandas/,25,GH 13664,
pandas/,51,"Index(periods, dtype=object) is an Index (not an PeriodIndex)",
pandas/,64,GH #1118,
pandas/,72,GH #1264,
pandas/,103,U was used as undefined period,
pandas/,144,"values is an array of Period, thus can retrieve freq",
pandas/,193,https://github.com/pandas-dev/pandas/issues/23438,
pandas/,207,passing a dtype with a tz should localize,
pandas/,218,"if we already have a freq and its not the same, then asfreq",
pandas/,219,(not changed),
pandas/,297,first element is NaT,
pandas/,332,"Need ndarray, not Int64Index",
pandas/,340,GH13079,
pandas/,374,GH #7811,
pandas/,475,infer freq from first element,
pandas/,484,Mixed freq should fail,
pandas/,508,should return an Index,
pandas/,511,preserve element types,
pandas/,514,"lastly, values should compare equal",
pandas/,12,"First, with no arguments.",
pandas/,18,"No NaN values, so na_rep has no effect",
pandas/,22,Make sure slicing works,
pandas/,28,Make sure date formatting works,
pandas/,34,NULL object handling should work,
pandas/,56,GH#7601,
pandas/,111,GH#10971,
pandas/,167,GH#9116,
pandas/,9,---------------------------------------------------------------,
pandas/,10,PeriodIndex.shift is used by __add__ and __sub__,
pandas/,63,GH#9903,
pandas/,68,period shift doesn't accept freq,
pandas/,105,test shift for PeriodIndex,
pandas/,106,GH#8083,
pandas/,116,GH #22458 : argument 'n' was deprecated in favor of 'periods',
pandas/,22,"GH#13149, GH#13209",
pandas/,29,"GH#13149, GH#13209",
pandas/,79,TODO: de-duplicate this version (from test_ops) with the one above,
pandas/,80,(from test_period),
pandas/,10,non-empty,
pandas/,25,empty,
pandas/,38,upsampling,
pandas/,46,downsampling,
pandas/,54,empty,
pandas/,67,not enough params,
pandas/,84,too many params,
pandas/,88,start/end NaT,
pandas/,96,invalid periods param,
pandas/,17,union,
pandas/,142,not in order,
pandas/,148,raise if different frequencies,
pandas/,155,TODO: belongs elsewhere,
pandas/,173,not in order,
pandas/,181,raise if different frequencies,
pandas/,196,"if target has the same name, it is preserved",
pandas/,200,"if target name is different, it will be reset",
pandas/,217,non-monotonic,
pandas/,253,empty same freq,
pandas/,262,diff,
pandas/,326,GH14323: difference of Period MUST preserve frequency,
pandas/,327,but the ability to union results must be preserved,
pandas/,27,GH#21282,
pandas/,154,GH 7710,
pandas/,161,GH#6716,
pandas/,166,getitem against index should raise ValueError,
pandas/,175,GH7116,
pandas/,176,these show deprecations as we are trying,
pandas/,177,to slice with non-integer indexers,
pandas/,178,with pytest.raises(IndexError):,
pandas/,179,idx[v],
pandas/,189,GH#6716,
pandas/,190,Confirm DatetimeIndex and PeriodIndex works identically,
pandas/,195,getitem against index should raise ValueError,
pandas/,205,GH7116,
pandas/,206,these show deprecations as we are trying,
pandas/,207,to slice with non-integer indexers,
pandas/,208,with pytest.raises(IndexError):,
pandas/,209,idx[v],
pandas/,239,check DatetimeIndex compat,
pandas/,247,GH 17717,
pandas/,252,get the location of p1/p2 from,
pandas/,253,monotonic increasing PeriodIndex with non-duplicate,
pandas/,272,get the location of p1/p2 from,
pandas/,273,monotonic increasing PeriodIndex with duplicate,
pandas/,293,get the location of p1/p2 from,
pandas/,294,non-monotonic increasing/decreasing PeriodIndex with duplicate,
pandas/,310,"duplicates, ordinals are all 46",
pandas/,314,TODO: This method came from test_period; de-dup with version above,
pandas/,365,GH 17717,
pandas/,396,Check that we return all -1s and do not raise or cast incorrectly,
pandas/,407,This should work in both directions,
pandas/,414,We expect the same from get_indexer_non_unique,
pandas/,425,GH 17717,
pandas/,441,TODO: This method came from test_period; de-dup with version above,
pandas/,544,GH#10295,
pandas/,615,GH#12631,
pandas/,625,fill_value,
pandas/,632,allow_fill=False,
pandas/,655,GH 17717,
pandas/,683,get_loc and get_value should treat datetime objects symmetrically,
pandas/,720,"duplicates, ordinals are all 46",
pandas/,728,GH 17717,
pandas/,742,GH#31172,
pandas/,743,Higher-resolution period-like are _not_ considered as contained,
pandas/,772,TimedeltaIndex,
pandas/,54,GH#6716,
pandas/,60,slices against index should raise IndexError,
pandas/,85,GH#6716,
pandas/,91,slices against index should raise IndexError,
pandas/,115,GH#5407,
pandas/,133,See also: DatetimeIndex test ofm the same name,
pandas/,143,Manually identified locations of year==2014,
pandas/,164,Manually identified locations where ser.index is within Mat 2015,
pandas/,5,GH#17717,
pandas/,24,GH#17717,
pandas/,9,GH#17157,
pandas/,15,GH#17157,
pandas/,38,See GH-22580,
pandas/,58,Tests for datetime index,
pandas/,73,See GH-22580,
pandas/,89,GH 22420,
pandas/,117,GH 22420,
pandas/,27,"empty, return dtype bool",
pandas/,87,GH 19132,
pandas/,50,boolean context compat,
pandas/,51,GH7897,
pandas/,72,Make sure level setting works,
pandas/,76,Non-inplace doesn't kill _tuples [implementation detail],
pandas/,79,...and values is still same too,
pandas/,82,Inplace should kill _tuples,
pandas/,86,Make sure label setting works too,
pandas/,91,Must be 1d array of tuples,
pandas/,95,Not inplace shouldn't change,
pandas/,98,Should have correct values,
pandas/,101,"...and again setting inplace should kill _tuples, etc",
pandas/,114,test for validity,
pandas/,120,this is testing for pickle compat,
pandas/,121,need an object to create with,
pandas/,13,GH8083 test the base class for shift,
pandas/,27,GH5620,
pandas/,60,TODO: reshape,
pandas/,64,this blows up,
pandas/,84,GH 13660,
pandas/,149,- now raises (previously was set op difference),
pandas/,163,callable,
pandas/,166,we don't infer UInt64,
pandas/,190,we don't infer to UInt64 for a dict,
pandas/,199,empty mappable,
pandas/,234,test ufuncs of numpy. see:,
pandas/,235,https://docs.scipy.org/doc/numpy/reference/ufuncs.html,
pandas/,39,GH 20527,
pandas/,47,With .rename(),
pandas/,57,With .set_names(),
pandas/,77,important to check that it's looking at the right thing.,
pandas/,84,external API,
pandas/,91,test set_codes with verify_integrity=False,
pandas/,92,the setting should not raise any value error,
pandas/,95,code value smaller than -1,
pandas/,101,GH26408,
pandas/,102,test if codes are re-assigned value -1 for levels,
pandas/,103,"with mising values (NaN, NaT, None)",
pandas/,120,verify set_levels and set_codes,
pandas/,145,----------------------------------------------------------------------------,
pandas/,146,from_arrays,
pandas/,147,----------------------------------------------------------------------------,
pandas/,154,list of arrays as input,
pandas/,158,infer correctly,
pandas/,165,GH 18434,
pandas/,171,iterator as input,
pandas/,175,invalid iterator input,
pandas/,187,tuple of tuples as input,
pandas/,258,GH13743,
pandas/,276,0 levels,
pandas/,281,1 level,
pandas/,288,N levels,
pandas/,335,see gh-13599,
pandas/,342,GH27292,
pandas/,354,----------------------------------------------------------------------------,
pandas/,355,from_tuples,
pandas/,356,----------------------------------------------------------------------------,
pandas/,366,input tuples,
pandas/,372,GH 18434,
pandas/,373,input iterator for tuples,
pandas/,381,input non-iterables,
pandas/,388,GH 16777,
pandas/,400,GH 15110 and GH 14848,
pandas/,411,GH 15457,
pandas/,420,----------------------------------------------------------------------------,
pandas/,421,from_product,
pandas/,422,----------------------------------------------------------------------------,
pandas/,424,0 levels,
pandas/,449,GH12258,
pandas/,483,GH13743,
pandas/,519,GH 18434,
pandas/,536,iterator as input,
pandas/,540,Invalid non-iterable input,
pandas/,559,GH27292,
pandas/,570,GH27292,
pandas/,584,GH#15286 passing read-only array to from_product,
pandas/,596,"GH11193, when an existing index is passed, and a new name is not",
pandas/,597,"specified, the new index should inherit the previous object name",
pandas/,634,----------------------------------------------------------------------------,
pandas/,635,from_frame,
pandas/,636,----------------------------------------------------------------------------,
pandas/,638,GH 22420,
pandas/,661,GH 22420,
pandas/,667,GH 22420,
pandas/,698,GH 22420,
pandas/,715,GH 22420,
pandas/,725,#16844,
pandas/,732,Test that the MultiIndex constructor raise when a incorrect sortorder is given,
pandas/,733,GH#28518,
pandas/,737,Correct sortorder,
pandas/,767,from datetime combos,
pandas/,768,GH 7888,
pandas/,14,FIXME: Remove Commented Code,
pandas/,15,"if not isinstance(idx,",
pandas/,16,"(DatetimeIndex, PeriodIndex, TimedeltaIndex)):",
pandas/,17,GH 10791,
pandas/,41,GH 12631,
pandas/,54,fill_value,
pandas/,64,allow_fill=False,
pandas/,10,a MultiIndex used to test the general functionality of the,
pandas/,11,general functionality of this object,
pandas/,29,compare tests/indexes/multi/conftest.py,
pandas/,47,names that match those in the idx fixture for testing equality of,
pandas/,48,names assigned to the idx,
pandas/,54,a MultiIndex must have these properties associated with it,
pandas/,26,GH1538,
pandas/,56,we don't want unicode-escaped,
pandas/,73,GH10182,
pandas/,88,FIXME: dont leave commented-out,
pandas/,89,NumPy bug,
pandas/,90,repr(index.get_level_values(1)),
pandas/,209,noqa,
pandas/,10,GH 11343,
pandas/,17,GH 6194,
pandas/,39,GH26408,
pandas/,40,test if missing values are dropped for multiindex constructed,
pandas/,41,from codes and values,
pandas/,57,this is really a smoke test for the methods,
pandas/,58,as these are adequately tested for function elsewhere,
pandas/,67,"GH 11343, added tests for hasnans / isnans",
pandas/,70,cases in indices doesn't include NaN,
pandas/,89,GH 7031,
pandas/,96,the following failed in 0.14.1,
pandas/,103,the following failed in 0.14.1,
pandas/,22,GH 18630,
pandas/,28,"dtype='category' defaults to ordered=False, so only test once",
pandas/,22,do not test MultiIndex,
pandas/,27,"GH9947, GH10637",
pandas/,41,test comparisons with numpy arrays,
pandas/,51,test comparisons with Series,
pandas/,62,cases where length is 1 for one of them,
pandas/,75,comparing with a scalar should broadcast; note that we are excluding,
pandas/,76,MultiIndex because in this case each item in the index is a tuple of,
pandas/,77,"length 2, and therefore is considered an array of length 2 in the",
pandas/,78,comparison instead of a scalar,
pandas/,81,assuming the 2nd to last item is unique in the data,
pandas/,96,different number of levels,
pandas/,110,levels are different,
pandas/,123,some of the labels are different,
pandas/,159,GH9785,
pandas/,164,make sure take is not using -1,
pandas/,178,"names are metadata, they don't change id",
pandas/,187,"levels are inherent properties, they change identity",
pandas/,190,shouldn't change,
pandas/,194,GH 17464 - Remove duplicate MultiIndex levels,
pandas/,207,MultiIndex is never numeric,
pandas/,212,GH 21149,
pandas/,213,Ensure comparison operations for MultiIndex with nlevels == 1,
pandas/,214,behave consistently with those for MultiIndex with nlevels > 1,
pandas/,218,Equality self-test: MultiIndex object vs self,
pandas/,223,Greater than comparison: MultiIndex object vs self,
pandas/,15,GH 8456,
pandas/,44,Check that code branches for boxed values produce identical results,
pandas/,49,Test to ensure we hit the boxing / nobox part of MI.values,
pandas/,64,n_lev > n_lab,
pandas/,75,Test to ensure we hit the boxing / nobox part of MI.values,
pandas/,88,n_lev > n_lab,
pandas/,99,need to construct an overflow,
pandas/,106,the fact that is works means it's consistent,
pandas/,111,inconsistent,
pandas/,122,non-smoke test that we don't get hash collisions,
pandas/,158,should not segfault GH5123,
pandas/,159,"NOTE: if MI representation changes, may make sense to allow",
pandas/,160,isna(MI),
pandas/,167,GH12527,
pandas/,185,GH 18165,
pandas/,203,shouldn't be able to set at either the top level or base level,
pandas/,209,ditto for labels,
pandas/,214,and for names,
pandas/,224,"if this fails, probably didn't reset the cache correctly.",
pandas/,229,GH 12893,
pandas/,260,"RangeIndex, IntervalIndex",
pandas/,261,don't have engines,
pandas/,270,we report 0 for no-length,
pandas/,14,non-iterable input,
pandas/,22,first 3 elements reversed,
pandas/,71,GH 10149,
pandas/,93,GH 10149,
pandas/,105,GH 13490,
pandas/,116,GH 15270,
pandas/,137,empty difference: reflexive,
pandas/,143,empty difference: superset,
pandas/,149,empty difference: degenerate,
pandas/,155,names not the same,
pandas/,161,"empty, but non-equal",
pandas/,165,raise Exception called with non-MultiIndex,
pandas/,169,name from empty array,
pandas/,174,name from non-empty array,
pandas/,188,GH-24959,
pandas/,190,"sort=None, the default",
pandas/,197,TODO decide on True behaviour,
pandas/,205,GH-24959,
pandas/,209,"sort=None, the default",
pandas/,210,MultiIndex.difference deviates here from other difference,
pandas/,211,implementations in not catching the TypeError,
pandas/,216,sort=False,
pandas/,223,TODO decide on True behaviour,
pandas/,224,"# sort=True, raises",
pandas/,243,"corner case, pass self or empty thing:",
pandas/,250,FIXME: dont leave commented-out,
pandas/,251,won't work in python 3,
pandas/,252,tuples = _index.values,
pandas/,253,result = _index[:4] | tuples[4:],
pandas/,254,assert result.equals(tuples),
pandas/,256,not valid for python 3,
pandas/,257,def test_union_with_regular_index(self):,
pandas/,258,"other = Index(['A', 'B', 'C'])",
pandas/,260,result = other.union(idx),
pandas/,261,"assert ('foo', 'one') in result",
pandas/,262,assert 'B' in result,
pandas/,264,result2 = _index.union(other),
pandas/,265,assert result.equals(result2),
pandas/,278,"corner case, pass self",
pandas/,282,empty intersection: disjoint,
pandas/,287,FIXME: dont leave commented-out,
pandas/,288,can't do in python 3,
pandas/,289,tuples = _index.values,
pandas/,290,result = _index & tuples,
pandas/,291,assert result.equals(tuples),
pandas/,295,GH-24959,
pandas/,303,TODO decide on True behaviour,
pandas/,311,https://github.com/pandas-dev/pandas/issues/24959,
pandas/,314,"default, sort=None",
pandas/,317,MultiIndex does not special case empty.union(idx),
pandas/,318,"tm.assert_index_equal(other.union(idx), idx)",
pandas/,320,sort=False,
pandas/,326,TODO decide on True behaviour,
pandas/,327,# sort=True,
pandas/,336,https://github.com/pandas-dev/pandas/issues/24959,
pandas/,339,"default, sort=None",
pandas/,344,sort=False,
pandas/,351,TODO decide on True behaviour,
pandas/,352,# sort=True,
pandas/,359,GH#32646 raise NotImplementedError instead of less-informative error,
pandas/,61,TODO: Try creating a UnicodeDecodeError in exception message,
pandas/,78,works,
pandas/,80,should there be a test case here???,
pandas/,84,some searchsorted action,
pandas/,123,issue 19132,
pandas/,130,GH18368,
pandas/,180,pass non-MultiIndex,
pandas/,188,create index with duplicates,
pandas/,209,https://github.com/pandas-dev/pandas/issues/21390,
pandas/,237,issue 19132,
pandas/,243,https://github.com/pandas-dev/pandas/issues/29896,
pandas/,244,test getting an indexer for another index with different methods,
pandas/,245,"confirms that getting an indexer without a filling method, getting an",
pandas/,246,"indexer and backfilling, and getting an indexer and padding all behave",
pandas/,247,correctly in the case where all of the target values fall in between,
pandas/,248,several levels in the MultiIndex into which they are getting an indexer,
pandas/,249,,
pandas/,250,"visually, the MultiIndexes used in this test are:",
pandas/,251,mult_idx_1:,
pandas/,252,0: -1 0,
pandas/,253,1:    2,
pandas/,254,2:    3,
pandas/,255,3:    4,
pandas/,256,4:  0 0,
pandas/,257,5:    2,
pandas/,258,6:    3,
pandas/,259,7:    4,
pandas/,260,8:  1 0,
pandas/,261,9:    2,
pandas/,262,10:    3,
pandas/,263,11:    4,
pandas/,264,,
pandas/,265,mult_idx_2:,
pandas/,266,0: 0 1,
pandas/,267,1:   3,
pandas/,268,2:   4,
pandas/,280,"ensure the legacy ""bfill"" option functions identically to ""backfill""",
pandas/,289,"ensure the legacy ""ffill"" option functions identically to ""pad""",
pandas/,295,https://github.com/pandas-dev/pandas/issues/29896,
pandas/,296,tests get_indexer() on MultiIndexes with 3+ levels,
pandas/,297,"visually, these are",
pandas/,298,mult_idx_1:,
pandas/,299,0: 1 2 5,
pandas/,300,1:     7,
pandas/,301,2:   4 5,
pandas/,302,3:     7,
pandas/,303,4:   6 5,
pandas/,304,5:     7,
pandas/,305,6: 3 2 5,
pandas/,306,7:     7,
pandas/,307,8:   4 5,
pandas/,308,9:     7,
pandas/,309,10:   6 5,
pandas/,310,11:     7,
pandas/,311,,
pandas/,312,mult_idx_2:,
pandas/,313,0: 1 1 8,
pandas/,314,1: 1 5 9,
pandas/,315,2: 1 6 7,
pandas/,316,3: 2 1 6,
pandas/,317,4: 2 7 6,
pandas/,318,5: 2 7 8,
pandas/,319,6: 3 6 8,
pandas/,332,sanity check,
pandas/,338,show the relationships between the two,
pandas/,351,test with backfilling,
pandas/,356,"now, the same thing, but forward-filled (aka ""padded"")",
pandas/,361,"now, do the indexing in the other direction",
pandas/,394,https://github.com/pandas-dev/pandas/issues/29896,
pandas/,395,"tests a corner case with get_indexer() with MultiIndexes where, when we",
pandas/,396,"need to ""carry"" across levels, proper tuple ordering is respected",
pandas/,397,,
pandas/,398,"the MultiIndexes used in this test, visually, are:",
pandas/,399,mult_idx_1:,
pandas/,400,0: 1 1 1 1,
pandas/,401,1:       2,
pandas/,402,2:     2 1,
pandas/,403,3:       2,
pandas/,404,4: 1 2 1 1,
pandas/,405,5:       2,
pandas/,406,6:     2 1,
pandas/,407,7:       2,
pandas/,408,8: 2 1 1 1,
pandas/,409,9:       2,
pandas/,410,10:     2 1,
pandas/,411,11:       2,
pandas/,412,12: 2 2 1 1,
pandas/,413,13:       2,
pandas/,414,14:     2 1,
pandas/,415,15:       2,
pandas/,416,,
pandas/,417,mult_idx_2:,
pandas/,418,0: 1 3 2 2,
pandas/,419,1: 2 3 2 2,
pandas/,423,"show the tuple orderings, which get_indexer() should respect",
pandas/,441,scalar,
pandas/,444,slice,
pandas/,449,boolean,
pandas/,469,GH#22533,
pandas/,480,GH#22533,
pandas/,504,3 levels,
pandas/,522,FIXME: dont leave commented-out,
pandas/,523,"pytest.raises(Exception, index.get_loc, 2)",
pandas/,552,GH 22221: unused label,
pandas/,555,Unused label on unsorted level:,
pandas/,571,GH 18520,
pandas/,579,"GH 18818, GH 15994 : as flat index, cast int to float and vice-versa",
pandas/,589,"GH 19086 : int is casted to bool, but not vice-versa",
pandas/,603,GH 18485 : NaN in MultiIndex,
pandas/,612,GH 8569,
pandas/,620,listlike/non-hashable raises TypeError,
pandas/,624,issue 19132,
pandas/,638,TODO: de-duplicate with test_get_loc_duplicates above?,
pandas/,672,MI with a NaT,
pandas/,688,GH#19132,
pandas/,697,GH#19027,
pandas/,698,test that dropped MultiIndex levels are not in the MultiIndex,
pandas/,699,despite continuing to be in the MultiIndex's levels,
pandas/,704,drop implementation keeps 2 in the levels,
pandas/,706,but it should no longer be in the index itself,
pandas/,709,also applies to strings,
pandas/,717,GH#24570,
pandas/,726,GH#10645,
pandas/,732,https://github.com/pandas-dev/pandas/issues/26944,
pandas/,767,issue 19132,
pandas/,783,issue 19132,
pandas/,790,GH#18519 : when combinations of codes cannot be represented in 64,
pandas/,791,"bits, the index underlying the MultiIndex engine works with Python",
pandas/,792,"integers, rather than uint64.",
pandas/,805,"Each level contains 4 elements (including NaN), so it is represented",
pandas/,806,"in 2 bits, for a total of 2*N*10 = 100 > 64 bits. If we were using a",
pandas/,807,"64 bit engine and truncating the first levels, the fourth and fifth",
pandas/,808,"keys would collide; if truncating the last levels, the fifth and",
pandas/,809,"sixth; if rotating bits rather than shifting, the third and fifth.",
pandas/,819,With missing key:,
pandas/,18,GH9857,
pandas/,36,changing names should not change level names on object,
pandas/,41,and not on copies,
pandas/,46,and copies shouldn't change original,
pandas/,57,"Check that adding a ""names"" parameter to the copy is honored",
pandas/,58,GH14302,
pandas/,81,names are assigned in setup,
pandas/,86,setting bad names on existing,
pandas/,93,initializing with bad names (should always be equivalent),
pandas/,109,"names are assigned on index, but not transferred to the levels",
pandas/,116,GH19029,
pandas/,10,avoid specifying internal representation,
pandas/,11,as much as possible,
pandas/,31,"so long as these are synonyms, we don't need to test set_names",
pandas/,45,set names for specific level (# GH7792),
pandas/,54,set names for multiple levels,
pandas/,65,setting levels/codes directly raises AttributeError,
pandas/,84,side note - you probably wouldn't want to use levels and codes,
pandas/,85,directly like this - but it is possible.,
pandas/,89,level changing [w/o mutation],
pandas/,94,level changing [w/ mutation],
pandas/,100,level changing specific level [w/o mutation],
pandas/,109,level changing multiple levels [w/o mutation],
pandas/,114,level changing specific level [w/ mutation],
pandas/,127,level changing multiple levels [w/ mutation],
pandas/,134,illegal level changing should not change levels,
pandas/,135,GH 13754,
pandas/,156,side note - you probably wouldn't want to use levels and codes,
pandas/,157,directly like this - but it is possible.,
pandas/,164,changing codes w/o mutation,
pandas/,169,changing label w/ mutation,
pandas/,175,codes changing specific level w/o mutation,
pandas/,184,codes changing multiple levels w/o mutation,
pandas/,189,label changing specific level w/ mutation,
pandas/,202,codes changing multiple levels [w/ mutation],
pandas/,209,label changing for levels of different magnitude of categories,
pandas/,214,[w/o mutation],
pandas/,218,[w/ mutation],
pandas/,237,"shouldn't scalar data error, instead should demand list-like",
pandas/,241,"shouldn't scalar data error, instead should demand list-like",
pandas/,245,"shouldn't scalar data error, instead should demand list-like",
pandas/,249,should have equal lengths,
pandas/,256,should have equal lengths,
pandas/,263,should have equal lengths,
pandas/,273,GH 21149,
pandas/,274,Ensure that .set_names for MultiIndex with,
pandas/,275,nlevels == 1 does not raise any errors,
pandas/,288,GH13854,
pandas/,304,motivating example from #3742,
pandas/,320,GH23273,
pandas/,21,pare down levels,
pandas/,38,some corner cases,
pandas/,53,GH 10665,
pandas/,57,inner,
pandas/,65,flip,
pandas/,71,keep MultiIndex,
pandas/,79,flip,
pandas/,93,GH 25760,
pandas/,94,GH 28956,
pandas/,10,GH10331,
pandas/,17,c1,
pandas/,18,2016-01-01 00:00:00 a   0,
pandas/,19,b   1,
pandas/,20,c   2,
pandas/,21,2016-01-01 12:00:00 a   3,
pandas/,22,b   4,
pandas/,23,c   5,
pandas/,24,2016-01-02 00:00:00 a   6,
pandas/,25,b   7,
pandas/,26,c   8,
pandas/,27,2016-01-02 12:00:00 a   9,
pandas/,28,b  10,
pandas/,29,c  11,
pandas/,30,2016-01-03 00:00:00 a  12,
pandas/,31,b  13,
pandas/,32,c  14,
pandas/,34,partial string matching on a single index,
pandas/,43,indexing with IndexSlice,
pandas/,48,match on secondary index,
pandas/,53,"Even though this syntax works on a single index, this is somewhat",
pandas/,54,ambiguous and we don't want to extend this behavior forward to work,
pandas/,55,in multi-indexes. This would amount to selecting a scalar from a,
pandas/,56,column.,
pandas/,60,partial string match on year only,
pandas/,65,partial string match on date,
pandas/,70,"partial string match on date and hour, from middle",
pandas/,75,partial string match on secondary index,
pandas/,80,tuple selector with partial string match on date,
pandas/,85,Slicing date on first level should break (of course),
pandas/,89,GH12685 (partial string with daily resolution or below),
pandas/,13,key contained in all levels,
pandas/,18,key not contained in all levels,
pandas/,29,key wrong length,
pandas/,66,FIXME data types changes to float because,
pandas/,67,of intermediate nan insertion;,
pandas/,71,GH9250,
pandas/,96,empty,
pandas/,111,see gh-7112,
pandas/,162,test 0th element,
pandas/,179,Exception raised depends on NumPy version.,
pandas/,27,Test that lexsort_depth return the correct sortorder,
pandas/,28,when it was given to the MultiIndex const.,
pandas/,29,GH#28518,
pandas/,10,"Levels should be (at least, shallow copied)",
pandas/,14,Labels doesn't matter which way copied,
pandas/,18,Names doesn't matter which way copied,
pandas/,22,Sort order should be copied,
pandas/,77,"gh-12309: Check that the ""name"" argument as well other kwargs are honored",
pandas/,37,partially correct argument,
pandas/,42,error='ignore',
pandas/,55,mixed partial / full drop,
pandas/,60,mixed partial / full drop / error='ignore',
pandas/,122,GH 12078,
pandas/,124,define the lexsorted version of the multi-index,
pandas/,129,and the not-lexsorted version,
pandas/,138,compare the results,
pandas/,74,these are the only two types that perform,
pandas/,75,pandas compatibility input validation - the,
pandas/,76,rest already perform separate (or no) such,
pandas/,77,validation via their 'values' attribute as,
pandas/,78,defined in pandas.core.indexes/base.py - they,
pandas/,79,cannot be changed at the moment due to,
pandas/,80,backwards compatibility concerns,
pandas/,96,GH 11897,
pandas/,103,"GH 16734: not sorted, but no real slicing",
pandas/,118,https://pandas.pydata.org/pandas-docs/stable/advanced.html#sorting-a-multiindex  # noqa,
pandas/,133,sort it,
pandas/,144,starts off lexsorted & monotonic,
pandas/,157,cannot convert to lexsorted,
pandas/,172,cannot convert to lexsorted,
pandas/,190,xref to GH 2770,
pandas/,198,removed levels are there,
pandas/,215,idempotent,
pandas/,225,GH16556,
pandas/,227,because tests should be deterministic (and this test in particular,
pandas/,228,"checks that levels are removed, which is not the case for every",
pandas/,229,random input):,
pandas/,230,seed is arbitrary value that works,
pandas/,257,GH 18417,
pandas/,30,GH 10460,
pandas/,43,GH#17924 when level entirely consists of nan,
pandas/,56,GH#17924,
pandas/,95,GH33131. See also discussion in GH32669.,
pandas/,96,This test can probably be removed when PeriodIndex._engine is removed.,
pandas/,30,GH #20568 - empty MI,
pandas/,56,GH #17896 - with level= argument,
pandas/,61,With already unique level,
pandas/,67,With empty MI,
pandas/,84,GH 17464,
pandas/,85,Make sure that a MultiIndex with duplicate levels throws a ValueError,
pandas/,90,And that using set_levels with duplicate levels fails,
pandas/,99,"GH18872, GH19029",
pandas/,103,With .rename(),
pandas/,108,"With .rename(., level=)",
pandas/,115,GH 10115,
pandas/,131,see fixtures,
pandas/,143,single instance of NaN,
pandas/,150,multiple instances of NaN,
pandas/,159,GH 9075,
pandas/,186,handle int64 overflow if possible,
pandas/,191,inject some null values,
pandas/,192,common nan value,
pandas/,203,no dups,
pandas/,207,with a dup,
pandas/,221,no overflow,
pandas/,225,overflow possible,
pandas/,244,GH 9125,
pandas/,256,TODO: more informative test name,
pandas/,257,GH5873,
pandas/,264,1st level shape,
pandas/,265,2nd level shape,
pandas/,266,"all possible unique combinations, including nan",
pandas/,281,GH#4060,
pandas/,36,string ordering,
pandas/,57,"mixed levels, hits the TypeError",
pandas/,76,empty,
pandas/,115,string ordering,
pandas/,136,"mixed levels, hits the TypeError",
pandas/,155,empty,
pandas/,47,GH6552,
pandas/,54,list & ndarray cases,
pandas/,72,GH7774,
pandas/,79,GH7774,
pandas/,10,GH 11343,
pandas/,18,tz mismatch,
pandas/,29,object,
pandas/,53,object,
pandas/,11,preserve freq,
pandas/,15,reset freq to None,
pandas/,36,either depending on numpy version,
pandas/,65,preserve freq,
pandas/,69,reset freq to None,
pandas/,107,preserve freq,
pandas/,117,reset freq to None,
pandas/,33,Older tests in TestTimeSeries constructed their `stamp` objects,
pandas/,34,using `date_range` instead of the `Timestamp` constructor.,
pandas/,35,TestTimestampEquivDateRange checks that these are equivalent in the,
pandas/,36,pertinent cases.,
pandas/,71,"build a timestamp with a frequency, since then it supports",
pandas/,72,addition/subtraction of integers,
pandas/,87,GH#11587,
pandas/,95,GH#24255,
pandas/,96,check that overflows in calculating `addend = periods * stride`,
pandas/,97,are caught,
pandas/,99,we should _not_ be seeing a overflow RuntimeWarning,
pandas/,110,GH#24255,
pandas/,111,case where `addend = periods * stride` overflows int64 bounds,
pandas/,112,but not uint64 bounds,
pandas/,122,GH#24255,
pandas/,123,"case with start later than 1970-01-01, overflow int64 but not uint64",
pandas/,128,"case with end before 1970-01-01, overflow int64 but not uint64",
pandas/,133,cases where stride * periods overflow int64 and stride/endpoint,
pandas/,134,have different signs,
pandas/,156,GH#14187,
pandas/,169,see gh-9313,
pandas/,179,see gh-9313,
pandas/,188,see gh-9313,
pandas/,196,GH 11018,
pandas/,208,#1645,
pandas/,240,#2538,
pandas/,252,GH 20808,
pandas/,261,Test if spacing remains linear if tz changes to dst in range,
pandas/,296,GH 20983,
pandas/,355,GH #1095,
pandas/,383,https://github.com/statsmodels/statsmodels/issues/3349,
pandas/,384,replace should take ints/longs for compat,
pandas/,392,"blow up, don't loop forever",
pandas/,399,https://github.com/pandas-dev/pandas/issues/20517,
pandas/,404,GH 20854,
pandas/,421,GH 12064,
pandas/,440,GH #770,
pandas/,449,see gh-2906,
pandas/,504,see gh-2906,
pandas/,506,Use maybe_get_tz to fix filename in tz under dateutil.,
pandas/,549,"GH12409, GH12684",
pandas/,590,GH#11804,
pandas/,615,GH 6961,
pandas/,621,GH 10885,
pandas/,645,smoke test,
pandas/,657,GH 23270,
pandas/,670,GH#1673 smoke test,
pandas/,673,it works!,
pandas/,678,GH#1778,
pandas/,680,Standard -> Daylight Savings Time,
pandas/,747,GH#9907,
pandas/,794,issue 18488,
pandas/,845,GH #456,
pandas/,848,TODO: shouldn't this already be set?,
pandas/,855,GH 6673,
pandas/,856,Saturday,
pandas/,857,Sunday,
pandas/,860,Monday,
pandas/,861,Friday,
pandas/,866,GH#24252 avoid doing unnecessary addition that _would_ overflow,
pandas/,873,GH#24252 check that we get OutOfBoundsDatetime and not OverflowError,
pandas/,903,GH #456,
pandas/,906,TODO: shouldn't this already be set?,
pandas/,923,raise with non-custom freq,
pandas/,936,raise with non-custom freq,
pandas/,955,raise with non-custom freq,
pandas/,972,should not raise,
pandas/,991,https://github.com/pandas-dev/pandas/issues/24110,
pandas/,999,GH 30593,
pandas/,26,sanity check that the behavior didn't change,
pandas/,27,GH#7206,
pandas/,33,attribute access should still work!,
pandas/,130,GH 7735,
pandas/,132,"create repeated values, 'n'th element is repeated by n+1 times",
pandas/,171,GH 9512,
pandas/,241,without freq,
pandas/,268,GH 10115,
pandas/,275,freq is reset,
pandas/,293,to check Index/Series compat,
pandas/,307,GH 11018,
pandas/,333,GH 13107,
pandas/,351,"same internal, different tz",
pandas/,361,check that we do not raise when comparing with OutOfBounds objects,
pandas/,367,check that we do not raise when comparing with OutOfBounds dt64,
pandas/,377,GH 20678,
pandas/,380,"can set to an offset, converting from string if necessary",
pandas/,385,can reset to None,
pandas/,390,GH 20678,
pandas/,393,setting with an incompatible freq,
pandas/,401,setting with non-freq string,
pandas/,434,name,
pandas/,441,freq,
pandas/,21,GH#11587 make sure we get a useful error message when generate_range,
pandas/,22,raises,
pandas/,32,TODO: better place for tests shared by DTI/TDI?,
pandas/,41,"If we pass a DTA/TDA to shallow_copy and dont specify a freq,",
pandas/,42,"we should inherit the array's freq, not our own.",
pandas/,52,GH#18664 retain tz when going DTI-->Categorical-->DTI,
pandas/,53,TODO: parametrize over DatetimeIndex/DatetimeArray,
pandas/,54,once CategoricalIndex(DTA) works,
pandas/,69,GH#23675,
pandas/,85,"GH#23675 deprecated, enforrced in GH#29794",
pandas/,142,localize into the provided tz,
pandas/,147,incompat tz/dtype,
pandas/,153,gh-11488: no tz results in DatetimeIndex,
pandas/,162,same tz results in DatetimeIndex,
pandas/,180,same tz results in DatetimeIndex (DST),
pandas/,198,Different tz results in Index(dtype=object),
pandas/,235,length = 1,
pandas/,242,length = 1 with tz,
pandas/,253,see gh-11488,
pandas/,266,Same tz results in DatetimeIndex,
pandas/,291,same tz results in DatetimeIndex (DST),
pandas/,310,different tz results in Index(dtype=object),
pandas/,355,all NaT,
pandas/,362,all NaT with tz,
pandas/,372,"GH 11488 (not changed, added explicit tests)",
pandas/,374,no tz results in DatetimeIndex,
pandas/,384,same tz results in DatetimeIndex,
pandas/,400,same tz results in DatetimeIndex (DST),
pandas/,416,tz mismatch affecting to tz-aware raises TypeError/ValueError,
pandas/,449,"passing tz should results in DatetimeIndex, then mismatch raises",
pandas/,450,TypeError,
pandas/,472,GH 13663,
pandas/,480,coerces to object,
pandas/,485,can't create DatetimeIndex,
pandas/,489,GH 5152,
pandas/,497,GH-24559,
pandas/,506,but UTC is *not* deprecated.,
pandas/,524,generator expression,
pandas/,532,NumPy string array,
pandas/,541,string with NaT,
pandas/,550,non-conforming,
pandas/,571,see GH#6572: ISO 8601 format results in pytz.FixedOffset,
pandas/,582,Unable to use `US/Eastern` because of DST,
pandas/,603,Non ISO 8601 format results in dateutil.tz.tzoffset,
pandas/,612,Unable to use `US/Eastern` because of DST,
pandas/,633,passing a dtype with a tz should localize,
pandas/,643,"if we already have a tz and its not the same, then raise",
pandas/,655,this is effectively trying to convert tz's,
pandas/,668,GH 23986,
pandas/,678,2252,
pandas/,685,GH 3746,
pandas/,701,GH 18595,
pandas/,709,Especially assert that the timezone is consistent for pytz,
pandas/,714,GH 18595,
pandas/,720,GH 20854,
pandas/,736,"GH 20997, 20964",
pandas/,743,"GH 12619, GH#24559",
pandas/,751,GH 18785,
pandas/,775,GH 23579,
pandas/,788,"GH-24753, GH-24739",
pandas/,803,GH 27011,
pandas/,818,GH 6961,
pandas/,840,see gh-13721,
pandas/,869,GH#1624,
pandas/,961,Bugs in #1396,
pandas/,971,Test for #25057,
pandas/,972,"Valid fold values are only [None, 0, 1]",
pandas/,979,Test for #25057,
pandas/,980,pytz doesn't support fold. Check that we raise,
pandas/,981,if fold is passed with pytz,
pandas/,1000,Test for #25057,
pandas/,1001,Check that we raise on fold conflict,
pandas/,1014,Test for #25057,
pandas/,1015,Check that we retain fold,
pandas/,1035,Test for #25057,
pandas/,1036,Check that we infer fold correctly based on timestamps since utc,
pandas/,1037,or strings,
pandas/,1053,Test for #25057,
pandas/,1054,Check that we adjust value for fold correctly,
pandas/,1055,based on timestamps since utc,
pandas/,16,"First, with no arguments.",
pandas/,22,"No NaN values, so na_rep has no effect",
pandas/,26,Make sure slicing works,
pandas/,32,Make sure date formatting works,
pandas/,38,NULL object handling should work,
pandas/,175,GH#9116,
pandas/,212,only really care that it works,
pandas/,227,only really care that it works,
pandas/,17,-------------------------------------------------------------,
pandas/,18,DatetimeIndex.shift is used in integer addition,
pandas/,21,GH#9903,
pandas/,47,test shift for DatetimeIndex and non DatetimeIndex,
pandas/,48,GH#8083,
pandas/,83,GH#19147,
pandas/,97,GH 8616,
pandas/,113,GH 8616,
pandas/,122,GH#22458 : argument 'n' was deprecated in favor of 'periods',
pandas/,24,"GH 13149, GH 13209",
pandas/,58,with tz,
pandas/,68,BUG#10442 : testing astype(str) is correct for Series/DatetimeIndex,
pandas/,86,GH 18951: tz-aware to tz-aware,
pandas/,92,GH 18951: tz-naive to tz-aware,
pandas/,99,"GH 13149, GH 13209",
pandas/,100,verify that we are returning NaT as a string (and not unicode),
pandas/,108,test astype string - #10442,
pandas/,117,test astype string with tz and name,
pandas/,132,test astype string with freqH and name,
pandas/,143,test astype string with freqH and timezone,
pandas/,155,"GH 13149, GH 13209",
pandas/,219,"GH 13149, GH 13209",
pandas/,281,"GH 20997, 20964, 24559",
pandas/,15,"GH#16537, GH#18295 (test missing)",
pandas/,36,insertion of non-datetime should coerce to object index,
pandas/,53,preserve freq,
pandas/,65,reset freq to None,
pandas/,91,reset freq to None,
pandas/,102,see gh-7299,
pandas/,115,preserve freq,
pandas/,144,reset freq to None,
pandas/,24,handled in test_ops,
pandas/,30,handled in test_setops,
pandas/,33,handled in test_setops,
pandas/,50,-------------------------------------------------------------,
pandas/,51,DatetimeIndex.tz_convert,
pandas/,53,GH#5546,
pandas/,97,Regression test for:,
pandas/,98,https://github.com/pandas-dev/pandas/issues/13306,
pandas/,100,sorted case US/Eastern -> UTC,
pandas/,107,sorted case UTC -> US/Eastern,
pandas/,114,unsorted case US/Eastern -> UTC,
pandas/,121,unsorted case UTC -> US/Eastern,
pandas/,130,Regression test for GH#13306,
pandas/,132,sorted case US/Eastern -> UTC,
pandas/,143,sorted case UTC -> US/Eastern,
pandas/,154,unsorted case US/Eastern -> UTC,
pandas/,165,unsorted case UTC -> US/Eastern,
pandas/,178,"Regression test for tslib.tz_convert(vals, tz1, tz2).",
pandas/,179,See https://github.com/pandas-dev/pandas/issues/4496 for details.,
pandas/,189,Start DST,
pandas/,210,End DST,
pandas/,231,daily,
pandas/,232,Start DST,
pandas/,243,End DST,
pandas/,277,GH#13583,
pandas/,278,tz_convert doesn't affect to internal,
pandas/,300,Values are unmodified,
pandas/,314,-------------------------------------------------------------,
pandas/,315,DatetimeIndex.tz_localize,
pandas/,318,GH#13057,
pandas/,336,"November 6, 2011, fall back, repeat 2 AM hour",
pandas/,337,"With no repeated hours, we cannot infer the transition",
pandas/,342,"With repeated hours, we can infer the transition",
pandas/,358,"When there is no dst transition, nothing special happens",
pandas/,366,"March 13, 2011, spring forward, skip from 2 AM to 3 AM",
pandas/,371,"after dst transition, it works",
pandas/,376,"November 6, 2011, fall back, repeat 2 AM hour",
pandas/,381,UTC is OK,
pandas/,431,Localizing to time zone should:,
pandas/,432,1) check for DST ambiguities,
pandas/,433,2) convert to UTC,
pandas/,441,"DST ambiguity, this should fail",
pandas/,443,Is this really how it should fail??,
pandas/,448,note: this tz tests that a tz-naive index can be localized,
pandas/,449,"and de-localized successfully, when there are no DST transitions",
pandas/,450,in the range.,
pandas/,454,cant localize a tz-aware object,
pandas/,472,GH#13583,
pandas/,505,"left dtype is datetime64[ns, US/Eastern]",
pandas/,506,"right is datetime64[ns, tzfile('/usr/share/zoneinfo/US/Eastern')]",
pandas/,511,"November 6, 2011, fall back, repeat 2 AM hour",
pandas/,513,Pass in flags to determine right dst transition,
pandas/,525,Test tz_localize,
pandas/,538,Test constructor,
pandas/,542,Test duplicate times where inferring the dst fails,
pandas/,546,"When the sizes are incompatible, make sure error is raised",
pandas/,551,When sizes are compatible and there are repeats ('infer' won't work),
pandas/,557,"When there is no dst transition, nothing special happens",
pandas/,564,TODO: belongs outside tz_localize tests?,
pandas/,567,construction with an ambiguous end-point,
pandas/,568,GH#11626,
pandas/,592,construction with an nonexistent end-point,
pandas/,615,GH 8917,
pandas/,681,GH 8917,
pandas/,693,GH 8917,
pandas/,700,-------------------------------------------------------------,
pandas/,701,DatetimeIndex.normalize,
pandas/,743,GH#13459,
pandas/,754,------------------------------------------------------------,
pandas/,755,DatetimeIndex.__new__,
pandas/,759,it works!,
pandas/,812,-------------------------------------------------------------,
pandas/,813,Unsorted,
pandas/,820,Regression test for GH#21230,
pandas/,833,Regression test for GH#21267,
pandas/,842,GH21358,
pandas/,853,GH#2621,
pandas/,860,GH25241,
pandas/,867,see gh-18031,
pandas/,918,DST transition time,
pandas/,924,same UTC value,
pandas/,927,Right before the DST transition,
pandas/,980,GH#1345,
pandas/,982,dates around a dst transition,
pandas/,1027,right tzinfo,
pandas/,1030,test not valid for dateutil timezones.,
pandas/,1031,assert 'EDT' in repr(rng_eastern[0].tzinfo),
pandas/,1068,just want it to work,
pandas/,1073,DateRange with naive datetimes,
pandas/,1077,normalized,
pandas/,1084,compare vs a localized tz,
pandas/,1089,datetimes with tzinfo set,
pandas/,1103,"a more unusual time zone, #1946",
pandas/,1113,GH#1581,
pandas/,1126,non-overlapping,
pandas/,1138,GH 21671,
pandas/,1158,GH 19603,
pandas/,35,TODO: moved from test_datetimelike; dedup with version below,
pandas/,49,GH 10149,
pandas/,149,GH11086,
pandas/,158,"When taking the union of two DatetimeIndexes, we infer",
pandas/,159,a freq even if the arguments don't have freq.  This matches,
pandas/,160,TimedeltaIndex behavior.,
pandas/,186,Works,
pandas/,188,"Fails with ""AttributeError: can't set attribute""",
pandas/,191,TODO: moved from test_datetimelike; de-duplicate with version below,
pandas/,198,GH 10149,
pandas/,213,GH 4690 (with tz),
pandas/,216,"if target has the same name, it is preserved",
pandas/,220,"if target name is different, it will be reset",
pandas/,238,non-monotonic,
pandas/,255,GH 7880,
pandas/,273,empty same freq GH2129,
pandas/,317,GH14323: difference of DatetimeIndex should not preserve frequency,
pandas/,378,overlapping,
pandas/,385,"non-overlapping, gap in middle",
pandas/,392,"non-overlapping, no gap",
pandas/,399,order does not matter,
pandas/,406,"overlapping, but different offset",
pandas/,442,non-overlapping,
pandas/,448,GH #771,
pandas/,493,overlapping,
pandas/,500,"non-overlapping, gap in middle",
pandas/,507,"non-overlapping, no gap",
pandas/,514,order does not matter,
pandas/,518,"overlapping, but different offset",
pandas/,525,GH #771,
pandas/,18,GH#21282,
pandas/,28,GH4226,
pandas/,91,32-bit vs. 64-bit platforms,
pandas/,97,GH#30588 multi-dimensional indexing deprecated,
pandas/,117,32-bit vs. 64-bit platforms,
pandas/,123,GH#30588 multi-dimensional indexing deprecated,
pandas/,140,getitem with non-slice drops freq,
pandas/,154,other is ndarray or Index,
pandas/,179,passing tz-naive ndarray to tzaware DTI,
pandas/,183,passing tz-aware DTI to tznaive DTI,
pandas/,210,GH#10295,
pandas/,277,TODO: This method came from test_datetime; de-dup with version above,
pandas/,307,GH#12631,
pandas/,315,fill_value,
pandas/,320,allow_fill=False,
pandas/,350,fill_value,
pandas/,357,allow_fill=False,
pandas/,446,time indexing,
pandas/,459,https://github.com/pandas-dev/pandas/issues/32140,
pandas/,470,GH#20464,
pandas/,487,GH#20464,
pandas/,494,GH#1062,
pandas/,551,GH#14354,
pandas/,563,https://github.com/pandas-dev/pandas/issues/16515,
pandas/,572,specifically make sure we have test for np.datetime64 key,
pandas/,47,make sure we can make the round trip,
pandas/,81,https://github.com/pandas-dev/pandas/issues/33358,
pandas/,89,Using simple filter because we are not checking for the warning here,
pandas/,95,Using simple filter because we are not checking for the warning here,
pandas/,120,warning that timezone info will be lost,
pandas/,135,warning that timezone info will be lost,
pandas/,149,GH#21333 warning that timezone info will be lost,
pandas/,158,GH#21333 warning that timezone info will be lost,
pandas/,165,GH#22905,
pandas/,183,GH#7606,
pandas/,87,should just behave as union,
pandas/,91,overlapping,
pandas/,98,"non-overlapping, gap in middle",
pandas/,106,"non-overlapping, no gap",
pandas/,113,"overlapping, but different offset",
pandas/,134,GH#32157,
pandas/,62,GH 19362,
pandas/,63,Testing accessing the first element in a monotonic descending,
pandas/,64,partial string indexing.,
pandas/,116,GH#31064,
pandas/,222,GH14856,
pandas/,223,Test various combinations of string slicing resolution vs.,
pandas/,224,index resolution,
pandas/,225,"- If string resolution is less precise than index resolution,",
pandas/,226,string is considered a slice,
pandas/,227,- If string resolution is equal to or more precise than index,
pandas/,228,"resolution, string is considered an exact match",
pandas/,239,"we check only 'day', 'hour', 'minute' and 'second'",
pandas/,247,Timestamp with the same resolution as index,
pandas/,248,Should be exact match for Series (return scalar),
pandas/,249,and raise KeyError for Frame,
pandas/,252,make ts_string as precise as index,
pandas/,260,Timestamp with resolution less precise than index,
pandas/,265,Series should return slice,
pandas/,270,Frame should return slice as well,
pandas/,275,Timestamp with resolution more precise than index,
pandas/,276,Compatible with existing key,
pandas/,277,Should return scalar for Series,
pandas/,278,and raise KeyError for Frame,
pandas/,288,Not compatible with existing key,
pandas/,289,Should raise KeyError,
pandas/,301,GH 4758,
pandas/,302,partial string indexing with a multi-index buggy,
pandas/,325,this is an IndexingError as we don't do partial string selection on,
pandas/,326,multi-levels.,
pandas/,331,GH 4294,
pandas/,332,partial slice on a series mi,
pandas/,352,For historical reasons.,
pandas/,368,GH16071,
pandas/,397,"GH issue #17965, test for ability to compare datetime64[ns] columns",
pandas/,398,to datetimelike,
pandas/,430,GH 24076,
pandas/,441,GH 16785,
pandas/,452,GH 27516,
pandas/,17,GH 8367,
pandas/,18,round-trip of timezone,
pandas/,25,GH#4606,
pandas/,35,GH#11002,
pandas/,36,don't infer freq,
pandas/,42,GH7774,
pandas/,48,GH 32740,
pandas/,86,GH8667,
pandas/,109,"GH8943.  On some machines NumPy defaults to np.int32 (for example,",
pandas/,110,32-bit Linux machines).  In the function _generate_regular_range,
pandas/,111,"found in tseries/index.py, `periods` gets multiplied by `strides`",
pandas/,112,"(which has value 1e9) and since the max value for np.int32 is ~2e9,",
pandas/,113,"and since those machines won't promote np.int32 to np.int64, we get",
pandas/,114,overflow.,
pandas/,127,"GH 5348: ""ValueError: Could not evaluate WOM-1SUN"" shouldn't raise",
pandas/,140,GH 5115,
pandas/,147,GH#2658,
pandas/,151,no exception here,
pandas/,169,"GH#22067, check we don't get warnings about silently ignored errors",
pandas/,178,see gh-8890,
pandas/,196,9100,
pandas/,208,GH21012,
pandas/,229,#1644,
pandas/,276,another datetime64 bug,
pandas/,329,tz must be preserved,
pandas/,353,freq must be preserved,
pandas/,362,GH#13750,
pandas/,374,GH 13750,
pandas/,402,GH 21737,
pandas/,403,Ensure the underlying data is consistent,
pandas/,407,This shouldn't produce a warning.,
pandas/,409,M8[ns] by default,
pandas/,415,"optionally, object",
pandas/,429,Old behavior with no warning,
pandas/,434,Future behavior with no warning,
pandas/,443,GH 25809,
pandas/,451,see GH20990,
pandas/,462,GH 14042,
pandas/,33,GH#1475,
pandas/,56,extra fields from DatetimeIndex like quarter and week,
pandas/,63,extra fields from DatetimeIndex like quarter and week,
pandas/,69,----------------------------------------------------------------,
pandas/,70,DatetimeIndex.round,
pandas/,131,GH#14440 & GH#15578,
pandas/,155,GH 21262,
pandas/,247,test floor,
pandas/,254,test ceil,
pandas/,261,test round,
pandas/,272,----------------------------------------------------------------,
pandas/,273,DatetimeIndex.normalize,
pandas/,16,GH#13672,
pandas/,133,GH#13303,
pandas/,198,non boolean accessors -> return Index,
pandas/,205,boolean accessors -> return array,
pandas/,211,test boolean indexing,
pandas/,226,"Ensure is_start/end accessors throw ValueError for CustomBusinessDay,",
pandas/,275,GH 6538: Check that DatetimeIndex and its TimeStamp elements,
pandas/,276,return the same weekofyear accessor close to new year w/ tz,
pandas/,283,GH 12806,
pandas/,288,"Test Monday -> Sunday and January -> December, in that sequence",
pandas/,290,"If the time_locale is None, day-name and month_name should",
pandas/,291,return the english attributes,
pandas/,320,GH#11128,
pandas/,341,GH#12805,
pandas/,346,work around different normalization schemes,
pandas/,347,https://github.com/pandas-dev/pandas/issues/22342,
pandas/,371,GH#28055 ints_to_pydatetime with readonly array,
pandas/,155,GH 23309,
pandas/,163,GH 23309,
pandas/,180,GH 23309,
pandas/,186,GH 25485,
pandas/,190,pivot should be average of left/right medians,
pandas/,59,with nans,
pandas/,91,GH 18789,
pandas/,97,with NA,
pandas/,137,exercise the copy flag in the constructor,
pandas/,139,not copying,
pandas/,149,by-definition make a copy,
pandas/,176,start,
pandas/,181,end,
pandas/,186,mid,
pandas/,191,invalid type,
pandas/,196,invalid closed,
pandas/,203,GH 18295 (test missing),
pandas/,214,unique overlapping - distinct endpoints,
pandas/,218,unique overlapping - shared endpoints,
pandas/,222,unique nested,
pandas/,227,increasing non-overlapping,
pandas/,234,decreasing non-overlapping,
pandas/,241,unordered non-overlapping,
pandas/,248,increasing overlapping,
pandas/,255,decreasing overlapping,
pandas/,262,unordered overlapping,
pandas/,269,increasing overlapping shared endpoints,
pandas/,276,decreasing overlapping shared endpoints,
pandas/,283,stationary,
pandas/,290,empty,
pandas/,327,GH 20636,
pandas/,330,intervalindex,
pandas/,335,interval,
pandas/,341,datetimelike index,
pandas/,346,datetimelike scalar,
pandas/,351,list-like of datetimelike scalars,
pandas/,361,GH 20636,
pandas/,391,GH 20636,
pandas/,395,no conversion occurs for numeric,
pandas/,423,GH 20636,
pandas/,436,can select values that are IN the range of a value,
pandas/,451,"__contains__ not implemented for ""interval in interval"", follow",
pandas/,452,that for the contains method for now,
pandas/,462,__contains__ requires perfect matches to intervals.,
pandas/,564,invalid comparisons,
pandas/,608,with nan,
pandas/,625,test mid,
pandas/,630,__contains__ doesn't check individual points,
pandas/,643,.contains does check individual points,
pandas/,648,test get_indexer,
pandas/,685,Should be True in all cases,
pandas/,693,Should be False in all cases (overlapping),
pandas/,701,Should be False in all cases (non-monotonic),
pandas/,709,"Should be False for closed='both', otherwise True (GH16560)",
pandas/,726,GH 23309,
pandas/,727,see test_interval_tree.py for extensive tests; interface tests here,
pandas/,729,non-overlapping,
pandas/,734,non-overlapping with NA,
pandas/,739,overlapping,
pandas/,744,overlapping with NA,
pandas/,749,common endpoints,
pandas/,756,common endpoints with NA,
pandas/,781,GH 18756,
pandas/,809,GH 18756,
pandas/,813,check the non-NA portion,
pandas/,818,check the NA portion,
pandas/,828,GH 19209,
pandas/,833,4 * 8 * 2,
pandas/,838,GH 21670,
pandas/,846,GH 21670,
pandas/,853,GH 23576,
pandas/,862,GH#27571 dir(interval_index) should not raise,
pandas/,870,https://github.com/pandas-dev/pandas/issues/32762,
pandas/,35,defined from start/end/freq,
pandas/,41,defined from start/periods/freq,
pandas/,47,defined from end/periods/freq,
pandas/,53,GH 20976: linspace behavior defined from start/end/periods,
pandas/,68,defined from start/end/freq,
pandas/,74,defined from start/periods/freq,
pandas/,80,defined from end/periods/freq,
pandas/,86,GH 20976: linspace behavior defined from start/end/periods,
pandas/,88,matches expected only for non-anchored offsets and tz naive,
pandas/,89,(anchored/DST transitions cause unequal spacing in expected),
pandas/,103,defined from start/end/freq,
pandas/,109,defined from start/periods/freq,
pandas/,115,defined from end/periods/freq,
pandas/,121,GH 20976: linspace behavior defined from start/end/periods,
pandas/,149,index truncates early if freq causes end to be skipped,
pandas/,159,GH 21161,
pandas/,185,GH 20976: linspace behavior defined from start/end/periods,
pandas/,186,accounts for the hour gained/lost during DST transition,
pandas/,195,"Has float subtype if any of start/end/freq are float, even if all",
pandas/,196,resulting endpoints can safely be upcast to integers,
pandas/,198,defined from start/end/freq,
pandas/,204,defined from start/periods/freq,
pandas/,210,defined from end/periods/freq,
pandas/,216,GH 20976: linspace behavior defined from start/end/periods,
pandas/,223,float value for periods,
pandas/,228,equivalent timestamp-like start/end,
pandas/,238,equivalent freq with timestamp,
pandas/,250,equivalent timedelta-like start/end,
pandas/,260,equivalent freq with timedelta,
pandas/,267,not enough params,
pandas/,285,too many params,
pandas/,289,mixed units,
pandas/,324,invalid periods,
pandas/,329,invalid start,
pandas/,334,invalid end,
pandas/,339,invalid freq for datetime-like,
pandas/,350,mixed tz,
pandas/,73,GH 19262: conversion via dtype parameter,
pandas/,85,GH 18421,
pandas/,107,GH 18421,
pandas/,129,GH 19016,
pandas/,139,GH 21243/21253,
pandas/,141,Index is defined to create CategoricalIndex from categorical data,
pandas/,153,filler input data to be used when supplying invalid kwargs,
pandas/,156,invalid closed,
pandas/,161,unsupported dtype,
pandas/,166,invalid dtype,
pandas/,171,no point in nesting periods in an IntervalIndex,
pandas/,178,decreasing values,
pandas/,200,GH 19016: categorical data,
pandas/,209,unequal length,
pandas/,249,GH 19016: categorical data,
pandas/,289,non-tuple,
pandas/,295,too few/many items,
pandas/,306,"tuple (NA, NA) evaluates the same as NA as an element",
pandas/,350,GH23013,
pandas/,351,"When forming the interval from breaks,",
pandas/,352,the interval of strings is already forbidden.,
pandas/,356,mismatched closed within intervals with no constructor override,
pandas/,362,scalar,
pandas/,370,not an interval,
pandas/,392,GH 19370,
pandas/,405,"Index(intervals, dtype=object) is an Index (not an IntervalIndex)",
pandas/,414,GH27172,
pandas/,10,https://github.com/pandas-dev/pandas/pull/24134/files,
pandas/,34,GH 25984,
pandas/,74,GH 28210,
pandas/,42,non-default params,
pandas/,114,int64 -> uint64 fails with negative values,
pandas/,145,raises with NA,
pandas/,152,float64 -> uint64 fails with negative values,
pandas/,158,float64 -> integer-like fails with non-integer valued floats,
pandas/,207,datetime -> timedelta raises,
pandas/,219,timedelta -> datetime raises,
pandas/,53,override base test: not a valid repr as we use interval notation,
pandas/,57,override base test: not a valid repr as we use interval notation,
pandas/,84,"GH#30588 multi-dim indexing is deprecated, but raising is also acceptable",
pandas/,40,"GH 19101: empty result, same dtype",
pandas/,45,"GH 19101: empty result, different dtypes",
pandas/,67,"GH 19101: empty result, same dtype",
pandas/,73,"GH 19101: empty result, different dtypes",
pandas/,78,GH 26225: nested intervals,
pandas/,85,GH 26225: duplicate element,
pandas/,92,GH 26225,
pandas/,99,GH 26225: duplicate nan element,
pandas/,114,"GH 19101: empty result, same dtype",
pandas/,119,"GH 19101: empty result, different dtypes",
pandas/,134,"GH 19101: empty result, same dtype",
pandas/,141,"GH 19101: empty result, different dtypes",
pandas/,155,TODO: standardize return type of non-union setops type(self vs other),
pandas/,156,non-IntervalIndex,
pandas/,164,mixed closed,
pandas/,174,GH 19016: incompatible dtypes,
pandas/,25,"if get_loc is supplied an interval, it should only search",
pandas/,26,"for exact matches, not overlaps or covers, else KeyError.",
pandas/,43,correct = {side: {query: answer}}.,
pandas/,44,"If query is not in the dict, that query should raise a KeyError",
pandas/,54,"if get_loc is supplied a scalar, it should return the index of",
pandas/,55,"the interval which contains the scalar, or KeyError.",
pandas/,64,GH 20921,
pandas/,76,GH 20921,
pandas/,89,"Make consistent with test_interval_new.py (see #16316, #16386)",
pandas/,100,GH 20636,
pandas/,101,nonoverlapping = IntervalIndex method and no i8 conversion,
pandas/,130,GH 20636,
pandas/,155,GH 25860,
pandas/,219,GH 17284,
pandas/,227,GH 17284,
pandas/,244,GH 30063: categorical and non-categorical results should be consistent,
pandas/,262,IntervalIndex needs non-overlapping for uniqueness when querying,
pandas/,304,TODO we may also want to test get_indexer for the case when,
pandas/,305,"the intervals are duplicated, decreasing, non-monotonic, etc..",
pandas/,308,GH 16410,
pandas/,323,increasing monotonically,
pandas/,332,decreasing monotonically,
pandas/,341,sorted duplicates,
pandas/,350,unsorted duplicates,
pandas/,391,another unsorted duplicates,
pandas/,402,increasing non-overlapping,
pandas/,412,decreasing non-overlapping,
pandas/,8,"Tests for the Index constructor, specifically for cases that do",
pandas/,9,not return a subclass,
pandas/,13,corner case,
pandas/,23,"see gh-10697: if we are constructing from a mixed list of tuples,",
pandas/,24,make sure that we are independent of the sorting order.,
pandas/,30,GH #19348,
pandas/,27,"if other is not monotonic increasing, intersection goes through",
pandas/,28,a different route,
pandas/,39,"if other is not monotonic increasing, _union goes through",
pandas/,40,a different route,
pandas/,59,GH 10149,
pandas/,69,https://github.com/pandas-dev/pandas/issues/24959,
pandas/,71,default (sort=None),
pandas/,77,sort=None,
pandas/,82,sort=False,
pandas/,88,TODO decide on True behaviour,
pandas/,89,sort=True,
pandas/,95,(same results for py2 and py3 but sortedness not tested elsewhere),
pandas/,106,GH 10149,
pandas/,125,(same results for py2 and py3 but sortedness not tested elsewhere),
pandas/,137,(same results for py2 and py3 but sortedness not tested elsewhere),
pandas/,22,GH 7256,
pandas/,23,validate neg/pos inserts,
pandas/,26,test 0th element,
pandas/,29,test Nth element that follows Python list behavior,
pandas/,32,"test loc +/- neq (0, -1)",
pandas/,35,test empty,
pandas/,59,empty,
pandas/,40,we don't allow on a bare Index,
pandas/,73,pass thru w and w/o copy,
pandas/,104,an invalid range,
pandas/,127,GH#12288,
pandas/,151,non-int raise Exception,
pandas/,157,invalid passed type,
pandas/,12,intersect with Int64Index,
pandas/,25,intersect with increasing RangeIndex,
pandas/,31,intersect with decreasing RangeIndex,
pandas/,37,reversed (GH 17296),
pandas/,41,GH 17296: intersect two decreasing RangeIndexes,
pandas/,48,reversed,
pandas/,54,intersect of non-overlapping indices,
pandas/,65,intersection of empty indices,
pandas/,74,intersection of non-overlapping values based on start value and gcd,
pandas/,82,"corner case, non-Int64Index",
pandas/,32,GH#28631,
pandas/,41,GH#28678,
pandas/,55,GH#12631,
pandas/,61,fill_value,
pandas/,66,allow_fill=False,
pandas/,9,join with Int64Index,
pandas/,35,join with RangeIndex,
pandas/,49,Join with non-RangeIndex,
pandas/,55,"no guarantee of sortedness, so sort for comparison purposes",
pandas/,70,Join two RangeIndex,
pandas/,81,Join with Int64Index,
pandas/,94,Join withRangeIndex,
pandas/,105,Join with Int64Index,
pandas/,118,Join withRangeIndex,
pandas/,12,aliases to make some tests easier to read,
pandas/,56,GH 25710,
pandas/,63,GH 26581,
pandas/,98,test 0th element,
pandas/,101,GH 18295 (test missing),
pandas/,121,either depending on numpy version,
pandas/,140,"GH 26565, GH26617",
pandas/,141,Calling RangeIndex._data caches an int64 array of the same length at,
pandas/,142,self._cached_data. This test checks whether _cached_data has been set,
pandas/,183,actually calling idx._data,
pandas/,243,we don't allow object dtype for RangeIndex,
pandas/,262,memory savings vs int index,
pandas/,266,constant memory usage,
pandas/,273,can't,
pandas/,275,shouldn't,
pandas/,303,GH 8608,
pandas/,304,add/sub are overridden explicitly for Float/Int Index,
pandas/,307,float conversions,
pandas/,315,interops with numpy arrays,
pandas/,377,RangeIndex() is a valid constructor,
pandas/,384,scalar indexing,
pandas/,393,slicing,
pandas/,394,slice value completion,
pandas/,399,positive slice values,
pandas/,404,negative slice values,
pandas/,409,stop overshoot,
pandas/,414,reverse,
pandas/,437,make sure that our len is the same as np.arange calc,
pandas/,475,GH16212,
pandas/,483,Append single item rather than list,
pandas/,488,GH 16685,
pandas/,489,Standard lookup on RangeIndex should not require the engine to be,
pandas/,490,created,
pandas/,502,"Different types of scalars can be excluded immediately, no need to",
pandas/,503,use the _engine,
pandas/,22,GH 13223,
pandas/,33,GH 13022,
pandas/,74,GH 12072,
pandas/,84,GH 10530,
pandas/,99,GH #12169,
pandas/,113,GH 13119,
pandas/,114,check that timedelta dtype is preserved when NaT values are,
pandas/,115,introduced by the resampling,
pandas/,47,GH 12448,
pandas/,48,.groupby(...).resample(...) hitting warnings,
pandas/,49,when appropriate,
pandas/,58,replication step,
pandas/,71,GH 15021,
pandas/,72,.groupby(...).resample(on=...) results in an unexpected,
pandas/,73,keyword warning.,
pandas/,89,GH17905,
pandas/,91,series,
pandas/,97,dataframe,
pandas/,112,technically this is allowed,
pandas/,123,'A' should not be referenced as a bad column...,
pandas/,124,will have to rethink regex if you change message!,
pandas/,138,make sure that we are setting the binner,
pandas/,139,on these attributes,
pandas/,145,before use,
pandas/,148,after grouper is initialized is ok,
pandas/,169,this is reindex / asfreq,
pandas/,182,since we are really doing an operation like this,
pandas/,183,ts2.resample('2s').mean().ffill(),
pandas/,184,preserve these semantics,
pandas/,246,need to upsample here,
pandas/,269,both resample and groupby should work w/o aggregation,
pandas/,280,make sure that we are consistent across,
pandas/,281,similar aggregations with and w/o selection list,
pandas/,295,"TODO: once GH 14008 is fixed, move these tests into",
pandas/,296,`Base` test class,
pandas/,300,test with all three Resampler apis and TimeGrouper,
pandas/,387,test with all three Resampler apis and TimeGrouper,
pandas/,407,passed lambda,
pandas/,414,agg with renamers,
pandas/,427,agg with different hows,
pandas/,438,equivalent of using a selection list / or not,
pandas/,445,series like aggs,
pandas/,453,errors,
pandas/,454,invalid names in the agg specification,
pandas/,497,GH 16766,
pandas/,505,Error as we don't have 'z' column,
pandas/,512,GH 13500,
pandas/,522,non DatetimeIndex,
pandas/,542,upsampling not allowed,
pandas/,564,GH 22660,
pandas/,565,The parametrized column names would get converted to dates by our,
pandas/,566,date parser. Some would result in OutOfBoundsError (ValueError) while,
pandas/,567,others would result in OverflowError when passed into Timestamp.,
pandas/,568,We catch these errors and move on to the correct branch.,
pandas/,588,GH#31710 cython needs to allow readonly data,
pandas/,46,check all cython functions work,
pandas/,53,check all cython functions work,
pandas/,61,construct expected val,
pandas/,67,GH2763 - return in put dtype if we can,
pandas/,111,"GH 25580, resample on IntegerArray",
pandas/,147,see gh-19303,
pandas/,148,Check that wrong keyword argument strings raise an error,
pandas/,206,see gh-12811,
pandas/,219,GH#7929,
pandas/,244,GH 8371,
pandas/,245,odd results when rounding is needed,
pandas/,306,from daily,
pandas/,313,to weekly,
pandas/,352,to biz day,
pandas/,365,Test for issue #3020,
pandas/,372,GH 5955,
pandas/,373,incorrect deciding to upsample when the axis frequency matches the,
pandas/,374,resample frequency,
pandas/,398,check all cython functions work,
pandas/,417,GH 7687,
pandas/,430,from daily,
pandas/,434,to weekly,
pandas/,442,GH 20744,
pandas/,456,GH 12725,
pandas/,470,Same issue should apply to .size() since it goes through,
pandas/,471,same code path,
pandas/,478,from daily,
pandas/,485,"to minutely, by padding",
pandas/,495,GH9915,
pandas/,519,GH#9756,
pandas/,572,GH 12332,
pandas/,583,GH12348,
pandas/,584,raising on odd period,
pandas/,641,dupe columns fail atm,
pandas/,642,"df.columns = ['PRICE', 'PRICE']",
pandas/,647,GH 4812,
pandas/,648,dup columns with resample raising,
pandas/,729,GH #1077,
pandas/,749,"If a fixed delta (5 minute, 4 hour) evenly divides a day, we should",
pandas/,750,"""anchor"" the origin at midnight so we get regular intervals rather",
pandas/,751,than starting from the first timestamp which might start in the,
pandas/,752,middle of a desired interval,
pandas/,756,so results are the same,
pandas/,776,GH 3849,
pandas/,796,GH25161,
pandas/,811,so results are the same,
pandas/,819,GH #1259,
pandas/,831,aggregate a period resampler with a lambda,
pandas/,844,GH 8573,
pandas/,845,segfaulting in older versions,
pandas/,863,GH 12202,
pandas/,864,validation tests for dtype preservation,
pandas/,885,GH 16361,
pandas/,899,#1327,
pandas/,909,#1451,
pandas/,912,it works!,
pandas/,917,GH 12307 - Values falls after last bin when,
pandas/,918,Resampling using pd.tseries.offsets.Nano as period,
pandas/,933,"#1471, #1458",
pandas/,979,"When resampling a range spanning multiple days, ensure that the",
pandas/,980,start date gets used to determine the offset.  Fixes issue where,
pandas/,981,a one day period is not a multiple of the frequency.,
pandas/,982,,
pandas/,983,See: https://github.com/pandas-dev/pandas/issues/8683,
pandas/,991,Ensure left closing works,
pandas/,995,Ensure right closing works,
pandas/,1001,miscellaneous test coverage,
pandas/,1011,it works,
pandas/,1015,resample to periods,
pandas/,1025,it works!,
pandas/,1030,#1596,
pandas/,1086,"this is a MI Series, so comparing the names of the results",
pandas/,1087,doesn't make sense,
pandas/,1096,#1772,
pandas/,1098,end hour is less than start,
pandas/,1103,it works!,
pandas/,1109,GH 6418,
pandas/,1110,resample with bfill / limit / reindex consistency,
pandas/,1116,Upsample by factor 3 with reindex() and resample() methods:,
pandas/,1125,"s10_2, r10, r10_2, rl should all be equal",
pandas/,1132,GH 7227,
pandas/,1174,GH 12352,
pandas/,1204,see gh-23222,
pandas/,1214,GH 13453,
pandas/,1221,"Since all elements are unique, these should all be the same",
pandas/,1232,GH10914,
pandas/,1234,use a fixed seed to always have the same uniques,
pandas/,1274,The test resamples a DatetimeIndex with values before and after a,
pandas/,1275,DST change,
pandas/,1276,Issue: 14682,
pandas/,1278,The DatetimeIndex we will start with,
pandas/,1279,(note that DST happens at 03:00+02:00 -> 02:00+01:00),
pandas/,1280,"2016-10-30 02:23:00+02:00, 2016-10-30 02:23:00+01:00",
pandas/,1288,The expected DatetimeIndex after resampling.,
pandas/,1289,"2016-10-30 02:00:00+02:00, 2016-10-30 02:00:00+01:00",
pandas/,1305,GH 24972,
pandas/,1322,5172,
pandas/,1403,GH 8531,
pandas/,1416,"GH 9119, GH 21459",
pandas/,1442,GH 25758,
pandas/,1460,GH 13020,
pandas/,1490,GH 13119,
pandas/,1491,check that datetime dtype is preserved when NaT values are,
pandas/,1492,introduced by the resampling,
pandas/,1510,GH 14615,
pandas/,1519,Testing as kwarg,
pandas/,1524,Testing dataframe,
pandas/,1548,GH 24127,
pandas/,1588,GH 5586,
pandas/,10,The various methods we support,
pandas/,151,_series_name is intentionally unused,
pandas/,38,GH 12486,
pandas/,39,support deferred resample ops with groupby,
pandas/,96,GH 13174,
pandas/,97,multiple calls after selection causing an issue with aliasing,
pandas/,117,GH 17813,
pandas/,128,GH 17496,
pandas/,129,Resample nearest,
pandas/,171,series only,
pandas/,197,reduction,
pandas/,214,GH 15169,
pandas/,227,A case for series,
pandas/,234,GH 16231,
pandas/,251,GH 13235,
pandas/,272,consistent return values with window,
pandas/,285,GH 14233,
pandas/,36,"GH 12884, 15944",
pandas/,37,make sure .asfreq() returns PeriodIndex (except kind='timestamp'),
pandas/,51,"test for fill value during resampling, issue 3715",
pandas/,77,"This is a bug, these should be implemented",
pandas/,78,GH 14008,
pandas/,114,this is ok,
pandas/,128,These are incompatible period rules for resampling,
pandas/,194,GH3609,
pandas/,215,GH12774,
pandas/,226,GH12770,
pandas/,246,see gh-5430,
pandas/,250,1 day later,
pandas/,259,Create the expected series,
pandas/,260,Index is moved back a day with the timezone conversion from UTC to,
pandas/,261,Pacific,
pandas/,267,GH 13238,
pandas/,276,Especially assert that the timezone is LMT for pytz,
pandas/,280,see gh-5430,
pandas/,286,1 day later,
pandas/,297,Create the expected series,
pandas/,298,Index is moved back a day with the timezone conversion from UTC to,
pandas/,299,Pacific,
pandas/,307,GH 19375,
pandas/,314,GH 23742,
pandas/,330,GH 10117,
pandas/,339,GH2073,
pandas/,383,"conforms, but different month",
pandas/,391,.to_timestamp('D'),
pandas/,392,expected = expected.resample('Q-MAR').ffill(),
pandas/,440,subset the data.,
pandas/,477,it works,
pandas/,480,#2245,
pandas/,492,for good measure,
pandas/,498,GH 6397,
pandas/,499,comparing an offset that doesn't propagate tz's,
pandas/,520,#1465,
pandas/,548,8/6/12 is a Monday,
pandas/,554,it works!,
pandas/,558,GH 15549,
pandas/,592,GH2753,
pandas/,599,def test_monthly_convention_span(self):,
pandas/,600,"rng = period_range('2000-01', periods=3, freq='M')",
pandas/,601,"ts = Series(np.arange(3), index=rng)",
pandas/,603,# hacky way to get same thing,
pandas/,604,"exp_index = period_range('2000-01-01', '2000-03-31', freq='D')",
pandas/,605,"expected = ts.asfreq('D', how='end').reindex(exp_index)",
pandas/,606,expected = expected.fillna(method='bfill'),
pandas/,608,"result = ts.resample('D', convention='span').mean()",
pandas/,610,"tm.assert_series_equal(result, expected)",
pandas/,639,2070,
pandas/,647,4076,
pandas/,648,"when the frequency is evenly divisible, sometimes extra bins",
pandas/,717,make sure passing loffset returns DatetimeIndex in all cases,
pandas/,718,basic method taken from Base.test_resample_loffset_arg_type(),
pandas/,725,loffset coerces PeriodIndex to DateTimeIndex,
pandas/,738,GH 13083,
pandas/,743,timestamp-based resampling doesn't include all sub-periods,
pandas/,744,"of the last original period, so extend accordingly:",
pandas/,789,GH 13224,
pandas/,801,GH 13224,
pandas/,831,GH 23882,
pandas/,836,to_timestamp casts 24H -> D,
pandas/,871,GH 19974,
pandas/,16,a fixture value can be overridden by the test parameter value. Note that the,
pandas/,17,value of the fixture can be overridden this way even if the test doesn't use,
pandas/,18,it directly (doesn't mention it in the function prototype).,
pandas/,19,see https://docs.pytest.org/en/latest/fixture.html#override-a-fixture-with-direct-test-parametrization  # noqa,
pandas/,20,in this module we override the fixture values defined in conftest.py,
pandas/,21,"tuples of '_index_factory,_series_name,_index_start,_index_end'",
pandas/,58,"test for fill value during resampling, issue 3715",
pandas/,77,# 12925,
pandas/,85,this is a non datetimelike index,
pandas/,98,GH12771 & GH12868,
pandas/,118,GH28427,
pandas/,131,GH13212,
pandas/,133,count retains dimensions too,
pandas/,138,GH14962,
pandas/,147,test size for GH13212 (currently stays as df),
pandas/,153,GH28427,
pandas/,169,GH28427,
pandas/,186,Empty series were sometimes causing a segfault (for the functions,
pandas/,187,with Cython bounds-checking disabled) or an IndexError.  We just run,
pandas/,188,them to ensure they no longer do.  (GH #10228),
pandas/,193,Ignore these since some combinations are invalid,
pandas/,194,(ex: doing mean with dtype of np.object),
pandas/,201,"GH 13218, 15002",
pandas/,206,loffset coerces PeriodIndex to DateTimeIndex,
pandas/,218,"GH 13022, 7687 - TODO: fix resample w/ TimedeltaIndex",
pandas/,229,GH 14313,
pandas/,240,GH 15314,
pandas/,252,GH 15023,
pandas/,57,#2300,
pandas/,65,Errors,
pandas/,71,it works!,
pandas/,99,GH 12840,
pandas/,100,check TimeGrouper perform stable sorts,
pandas/,146,"if TimeGrouper is used included, 'nth' doesn't work yet",
pandas/,183,check TimeGrouper's aggregation is identical as normal groupby,
pandas/,184,"if NaT is included, 'var', 'std', 'mean', 'first','last'",
pandas/,185,and 'nth' doesn't work yet,
pandas/,216,GH 9925,
pandas/,246,GH18203,
pandas/,53,GH7175 - GOTCHA: You can't use dot notation to add a column...,
pandas/,61,successfully add new column,
pandas/,62,this should not raise a warning,
pandas/,68,successfully modify column in place,
pandas/,69,this should not raise a warning,
pandas/,75,successfully add an attribute to a series,
pandas/,76,this should not raise a warning,
pandas/,81,warn when setting column to nonexistent name,
pandas/,63,"collect all objects to be tested for list-like-ness; use tuples of objects,",
pandas/,64,"whether they are list-like or not (special casing for sets), and their ID",
pandas/,261,No read / write attributes,
pandas/,262,No iterator attributes,
pandas/,268,Write attribute but not an iterator,
pandas/,272,gh-16530: Valid iterator just means we have the,
pandas/,273,__iter__ attribute for our purposes.,
pandas/,276,Valid write-only file,
pandas/,283,Valid read-only file,
pandas/,287,Iterator but no read / write attributes,
pandas/,307,all new-style classes are hashable by default,
pandas/,329,numpy.array is no longer collections.abc.Hashable as of,
pandas/,330,"https://github.com/numpy/numpy/pull/5326, just test",
pandas/,331,is_hashable(),
pandas/,361,string array of bytes,
pandas/,365,object array of bytes,
pandas/,369,object array of bytes with missing values,
pandas/,373,GH 11352,
pandas/,391,see gh-13274,
pandas/,419,too many characters,
pandas/,426,see gh-13314,
pandas/,444,See PR 12215,
pandas/,450,GH13324,
pandas/,451,make sure that we are handing non-hashables,
pandas/,510,GH32394,
pandas/,518,see gh-18584,
pandas/,524,see gh-4471,
pandas/,529,"NumPy bug: can't compare uint64 to int64, as that",
pandas/,530,"results in both casting to float64, so we should",
pandas/,531,make sure that this function is robust against it,
pandas/,545,GH27438,
pandas/,571,GH27335,
pandas/,578,GH32146,
pandas/,585,GH14956,
pandas/,593,Dummy class used for testing with Python objects,
pandas/,598,see pandas/conftest.py,
pandas/,601,make sure the inferred dtype of the fixture is as requested,
pandas/,612,GH 18004,
pandas/,640,GH 27392,
pandas/,646,"infer_dtype `skipna` default deprecated in GH#24050,",
pandas/,647,changed to True in GH#29876,
pandas/,695,GH15690,
pandas/,712,"complex is compatible with nan, so skipna has no effect",
pandas/,715,gets cast to complex on array construction,
pandas/,724,gets cast to complex on array construction,
pandas/,733,complex with nans stays complex,
pandas/,738,test smaller complex dtype; will pass through _try_infer_map fastpath,
pandas/,749,"This currently returns ""mixed"", but it's not clear that's optimal.",
pandas/,750,"This could also return ""string"" or ""mixed-string""",
pandas/,774,GH 23421,
pandas/,799,starts with nan,
pandas/,819,different type of nat,
pandas/,830,mixed datetime,
pandas/,834,should be datetime?,
pandas/,861,starts with nan,
pandas/,881,different type of nat,
pandas/,889,GH 13664,
pandas/,896,starts with nan,
pandas/,904,different type of nat,
pandas/,985,nan and None mix are result in mixed,
pandas/,994,pd.NaT,
pandas/,1010,np.datetime64(nat),
pandas/,1031,datetime / timedelta mixed,
pandas/,1135,"NaN is not valid for string array, just NA",
pandas/,1147,make sure record array works,
pandas/,1155,GH 7431,
pandas/,1156,cannot infer more than this as only a single element,
pandas/,1164,see gh-13320,
pandas/,1190,GH 8974,
pandas/,1220,StringArray,
pandas/,1229,BooleanArray,
pandas/,1257,questionable,
pandas/,1370,Conversion to Int64Index:,
pandas/,1455,"Number() is not recognied by PyNumber_Check, so by extension",
pandas/,1456,"is not recognized by is_scalar, but instances of non-abstract",
pandas/,1457,subclasses are.,
pandas/,1492,noqa: F811,
pandas/,69,test object dtype,
pandas/,91,type,
pandas/,96,series,
pandas/,106,frame,
pandas/,125,list of strings / unicode,
pandas/,134,GH20675,
pandas/,177,GH 9129,
pandas/,189,"isna_old should work for dt64tz, td64, and period, not just tznaive",
pandas/,312,Check the handling of nested arrays in array_equivalent_object,
pandas/,359,There are 3 variants for each of lvalue and rvalue. We include all,
pandas/,360,three for the tz-naive `now` and exclude the datetim64 variant,
pandas/,361,for utcnow because it drops tzinfo.,
pandas/,371,we shouldn't raise if comparing tzaware and tznaive datetimes,
pandas/,380,see gh-13388,
pandas/,408,"reached in groupby aggregations, make sure we use np.any when checking",
pandas/,409,if the comparison is truthy,
pandas/,424,Datetime-like,
pandas/,429,Integer,
pandas/,438,Bool,
pandas/,440,Float,
pandas/,444,Object,
pandas/,446,Interval,
pandas/,491,empty but not na,
pandas/,497,see gh-13717: no segfaults!,
pandas/,534,"Values that match iNaT, which we treat as null in specific cases",
pandas/,542,float/complex values that when viewed as int64 match iNaT,
pandas/,33,EA & Actual Dtypes,
pandas/,46,"Passing invalid dtype, both as a string or object, must raise TypeError",
pandas/,47,Per issue GH15520,
pandas/,76,do not parse freq-like string as period dtype,
pandas/,128,"match equal to self, but not equal to other",
pandas/,141,PeriodType,
pandas/,145,Datetime,
pandas/,146,gh-15941: no exception should be raised.,
pandas/,165,see gh-15941,
pandas/,166,,
pandas/,167,No exception should be raised.,
pandas/,215,GH#33385,
pandas/,443,This datetime array has the wrong unit (ps instead of ns),
pandas/,466,"TODO(jreback), this is slightly suspect",
pandas/,665,numpy dev changed from double-quotes to single quotes,
pandas/,671,python objects,
pandas/,672,2020-02-02 npdev changed error message,
pandas/,708,composite dtype,
pandas/,13,int/float/str,
pandas/,17,datetimelike,
pandas/,20,datetimelike object,
pandas/,84,concat_compat behavior on series._values should match pd.concat on series,
pandas/,50,"npdev 2020-02-02 changed from ""data type not understood"" to",
pandas/,51,"""Cannot interpret 'foo' as a data type""",
pandas/,62,make sure our cache is NOT pickled,
pandas/,64,clear the cache,
pandas/,68,force back to the cache,
pandas/,157,dtypes,
pandas/,163,GH#33385 deprecated,
pandas/,204,23990,
pandas/,209,23990,
pandas/,217,make sure that we satisfy is semantics,
pandas/,261,non-nano unit,
pandas/,263,dateutil str that returns None from gettz,
pandas/,294,numpy compat,
pandas/,304,dtypes,
pandas/,324,pr #11245,
pandas/,335,GH 24713,
pandas/,353,make sure that we satisfy is semantics,
pandas/,489,"though PeriodDtype has object kind, it cannot be string",
pandas/,502,make sure that we satisfy is semantics,
pandas/,537,generic,
pandas/,555,GH 19016,
pandas/,577,these are invalid entirely,
pandas/,585,this is an invalid subtype,
pandas/,627,invalid subtype comparisons do not raise when directly compared,
pandas/,649,GH 18980,
pandas/,667,GH 18980,
pandas/,675,GH 18980,
pandas/,720,"GH30568: though IntervalDtype has object kind, it cannot be string",
pandas/,791,"same categories, same order",
pandas/,792,any combination of None/False are equal,
pandas/,793,True/True is the only combination with True that are equal,
pandas/,800,"same categories, different order",
pandas/,801,any combination of None/False are equal (order doesn't matter),
pandas/,802,any combination with True are not equal (different order of cats),
pandas/,809,different categories,
pandas/,813,none categories,
pandas/,843,Identity test for no changes,
pandas/,849,override categories,
pandas/,855,override ordered,
pandas/,861,override ordered,
pandas/,870,Py2 will have unicode prefixes,
pandas/,875,GH17884,
pandas/,87,"here, we pass on fill_value as a scalar directly; the expected value",
pandas/,88,"returned from maybe_promote is fill_value, potentially upcast to the",
pandas/,89,returned dtype.,
pandas/,98,GH#23982/25425 require the same type in addition to equality/NA-ness,
pandas/,102,"No idea why, but these (sometimes) do not compare as equal",
pandas/,105,On some builds we get this instead of np.uint64,
pandas/,106,Note: cant check res_type.dtype.itemsize directly on numpy 1.18,
pandas/,110,"On some builds, type comparison fails, e.g. np.int32 != np.int32",
pandas/,115,Note: type check above ensures that we have the _same_ NA value,
pandas/,116,"for missing values, None == None (which is checked",
pandas/,117,"through match_value above), but np.nan != np.nan and pd.NaT != pd.NaT",
pandas/,126,size 8,
pandas/,137,keep signed-ness as long as possible,
pandas/,147,max of uint8 cannot be contained in int8,
pandas/,153,size 16,
pandas/,178,size 32,
pandas/,203,size 64,
pandas/,234,"output is not a generic int, but corresponds to expected_dtype",
pandas/,244,"create array of given dtype; casts ""1"" to correct dtype",
pandas/,247,filling int with float always upcasts to float64,
pandas/,249,fill_value can be different float type,
pandas/,260,"create array of given dtype; casts ""1"" to correct dtype",
pandas/,263,filling float with int always keeps float dtype,
pandas/,264,because: np.finfo('float32').max > np.iinfo('uint64').max,
pandas/,266,"output is not a generic float, but corresponds to expected_dtype",
pandas/,275,float filled with float,
pandas/,280,complex filled with float,
pandas/,285,float filled with complex,
pandas/,290,complex filled with complex,
pandas/,302,"output is not a generic float, but corresponds to expected_dtype",
pandas/,312,"create array of given dtype; casts ""1"" to correct dtype",
pandas/,315,filling bool with anything but bool casts to object,
pandas/,326,filling anything but bool with bool casts to object,
pandas/,328,"output is not a generic bool, but corresponds to expected_dtype",
pandas/,338,"create array of given dtype; casts ""1"" to correct dtype",
pandas/,341,"we never use bytes dtype internally, always promote to object",
pandas/,351,create array of given dtype,
pandas/,354,"we never use bytes dtype internally, always promote to object",
pandas/,356,"output is not a generic bytes, but corresponds to expected_dtype",
pandas/,366,"create array of given dtype; casts ""1"" to correct dtype",
pandas/,369,filling datetime with anything but datetime casts to object,
pandas/,372,"for datetime dtypes, scalar values get cast to to_datetime64",
pandas/,396,filling datetime with anything but datetime casts to object,
pandas/,399,"for datetime dtypes, scalar values get cast to pd.Timestamp.value",
pandas/,414,"create array of given dtype; casts ""1"" to correct dtype",
pandas/,417,filling datetimetz with any numpy dtype casts to object,
pandas/,428,"create array of given dtype; casts ""1"" to correct dtype",
pandas/,431,"filling datetimetz with datetimetz casts to object, unless tz matches",
pandas/,470,filling any numpy dtype with datetimetz casts to object,
pandas/,481,"create array of given dtype; casts ""1"" to correct dtype",
pandas/,484,filling timedelta with anything but timedelta casts to object,
pandas/,487,"for timedelta dtypes, scalar values get cast to pd.Timedelta.value",
pandas/,506,filling anything but timedelta with timedelta casts to object,
pandas/,509,"for timedelta dtypes, scalar values get cast to pd.Timedelta.value",
pandas/,522,"create array of given dtype; casts ""1"" to correct dtype",
pandas/,525,filling string with anything casts to object,
pandas/,535,create array of given dtype,
pandas/,538,filling anything with a string casts to object,
pandas/,549,"create array of given dtype; casts ""1"" to correct dtype",
pandas/,552,filling object with anything stays object,
pandas/,562,create array of object dtype from a scalar value (i.e. passing,
pandas/,563,"dtypes.common.is_scalar), which can however not be cast to int/float etc.",
pandas/,566,filling object with anything stays object,
pandas/,578,integer + other missing value (np.nan / None) casts to float,
pandas/,582,inserting into object does not cast the value,
pandas/,583,but *does* cast None to np.nan,
pandas/,587,datetime / timedelta cast all missing values to dtyped-NaT,
pandas/,591,NaT upcasts everything that's not datetime/timedelta to object,
pandas/,595,float / complex + missing value (!= NaT) stays the same,
pandas/,599,"all other cases cast to object, and use np.nan as missing value",
pandas/,610,"create 0-dim array of given dtype; casts ""1"" to correct dtype",
pandas/,613,expand to desired dimension:,
pandas/,618,test against 1-dimensional case,
pandas/,10,see gh-16362.,
pandas/,21,see gh-19671.,
pandas/,15,Into ints.,
pandas/,19,Into floats.,
pandas/,26,Into others.,
pandas/,30,Bool with int.,
pandas/,39,Bool with float.,
pandas/,31,Test that infer_dtype_from_scalar is,
pandas/,32,returning correct dtype for int and float.,
pandas/,129,GH 30337,
pandas/,9,see gh-19565,
pandas/,10,,
pandas/,11,Categorical result from scalar did not maintain,
pandas/,12,categories and ordering of the passed dtype.,
pandas/,12,Direct comparison fails: https://github.com/numpy/numpy/issues/10218,
pandas/,31,"This is a judgement call, but we do _not_ downcast Decimal",
pandas/,32,objects,
pandas/,45,see gh-16875: coercing of booleans.,
pandas/,92,see gh-15426,
pandas/,12,GH23823 require result arg to be ndarray,
pandas/,37,for now we do not support non-scalar `other`,
pandas/,44,GH23823,
pandas/,55,GH23823,
pandas/,23,shuffle so that we are not just working with monotone-increasing,
pandas/,31,dtarr[-2] will be the first date 2001-01-1,
pandas/,40,GH#24757,
pandas/,42,shuffle so that we are not just working with monotone-increasing,
pandas/,45,use hourly frequency to avoid rounding errors in expected results,
pandas/,46,TODO: flesh this out with different frequencies,
pandas/,54,parr[-2] will be the first date 2001-01-1,
pandas/,79,exact equality fails by 1 nanosecond,
pandas/,84,Note: the name TestSeriesStatReductions indicates these tests,
pandas/,85,"were moved from a series-specific test file, _not_ that these tests are",
pandas/,86,intended long-term to be series-specific,
pandas/,95,add some NaNs,
pandas/,98,"mean, idxmax, idxmin, min, and max are valid for dates",
pandas/,104,skipna or no,
pandas/,108,check the result is correct,
pandas/,118,"dtype=object with None, it works!",
pandas/,122,GH#2888,
pandas/,128,check date range,
pandas/,135,check on string data,
pandas/,140,Invalid axis.,
pandas/,144,Unimplemented numeric_only parameter.,
pandas/,161,"test with integers, test failure",
pandas/,195,1 - element series with ddof=1,
pandas/,216,1 - element series with ddof=1,
pandas/,230,"test corner cases, skew() returns NaN unless there's at least 3",
pandas/,231,values,
pandas/,259,"test corner cases, kurt() returns NaN unless there's at least 4",
pandas/,260,values,
pandas/,62,comparing tz-aware series with np.array results in,
pandas/,63,TypeError,
pandas/,79,GH#7261,
pandas/,102,generic test with object only works for empty / all NaN,
pandas/,115,GH#7261,
pandas/,128,check DatetimeIndex non-monotonic path,
pandas/,183,GH 10390,
pandas/,194,GH 15552,
pandas/,203,Note: the name TestIndexReductions indicates these tests,
pandas/,204,"were moved from a Index-specific test file, _not_ that these tests are",
pandas/,205,intended long-term to be Index-specific,
pandas/,218,GH#17607,
pandas/,224,skipna should be irrelevant since RangeIndex should never have NAs,
pandas/,232,skipna should be irrelevant since RangeIndex should never have NAs,
pandas/,236,empty,
pandas/,243,monotonic,
pandas/,247,non-monotonic,
pandas/,259,Return NaT,
pandas/,291,GH#4984,
pandas/,292,make sure ops return Timedelta,
pandas/,316,GH#6462,
pandas/,317,consistency in returned values for sum,
pandas/,325,std,
pandas/,333,GH#10040,
pandas/,334,make sure NaT is properly handled by median(),
pandas/,366,monotonic,
pandas/,370,non-monotonic,
pandas/,384,Return NaT,
pandas/,395,GH#26125,
pandas/,427,GH#26125,
pandas/,444,No need to test again argmax/argmin compat since the implementation,
pandas/,445,is the same as basic integer index,
pandas/,472,monotonic,
pandas/,477,non-monotonic,
pandas/,492,Return NaT,
pandas/,540,Note: the name TestSeriesReductions indicates these tests,
pandas/,541,"were moved from a series-specific test file, _not_ that these tests are",
pandas/,542,intended long-term to be series-specific,
pandas/,567,GH#9422 / GH#18921,
pandas/,568,Entirely empty,
pandas/,570,NA by default,
pandas/,574,Explicit,
pandas/,581,"Skipna, default",
pandas/,585,"Skipna, explicit",
pandas/,598,All-NA,
pandas/,600,NA by default,
pandas/,604,Explicit,
pandas/,611,"Skipna, default",
pandas/,615,"skipna, explicit",
pandas/,622,"Mix of valid, empty",
pandas/,624,Default,
pandas/,628,Explicit,
pandas/,635,Skipna,
pandas/,642,GH#844 (changed in GH#9422),
pandas/,667,1 / 0 by default,
pandas/,672,min_count=0,
pandas/,677,min_count=1,
pandas/,685,GH#7869,
pandas/,686,consistency on empty,
pandas/,688,float,
pandas/,692,timedelta64[ns],
pandas/,716,GH#6915,
pandas/,717,overflowing on the smaller int dtypes,
pandas/,741,covers GH#11245,
pandas/,749,See GH#16830,
pandas/,767,See GH#16830,
pandas/,784,test idxmin,
pandas/,785,_check_stat_op approach can not be used here because of isna check.,
pandas/,788,add some NaNs,
pandas/,791,skipna or no,
pandas/,795,no NaNs,
pandas/,800,all NaNs,
pandas/,804,datetime64[ns],
pandas/,814,test idxmax,
pandas/,815,_check_stat_op approach can not be used here because of isna check.,
pandas/,818,add some NaNs,
pandas/,821,skipna or no,
pandas/,825,no NaNs,
pandas/,830,all NaNs,
pandas/,844,Float64Index,
pandas/,845,GH#5914,
pandas/,864,"Alternative types, with implicit 'object' dtype.",
pandas/,866,'abc' || True => 'abc',
pandas/,869,"Check skipna, with implicit 'object' dtype.",
pandas/,872,nan && True => True,
pandas/,874,nan || False => nan,
pandas/,877,Check level.,
pandas/,882,bool_only is not implemented with level option.,
pandas/,888,bool_only is not implemented alone.,
pandas/,895,"Check skipna, with boolean type",
pandas/,898,NA && True => NA,
pandas/,900,NA || False => NA,
pandas/,903,GH-33253: all True / all False values buggy with skipna=False,
pandas/,909,Check level TODO(GH-33449) result should also be boolean,
pandas/,920,index min/max,
pandas/,930,GH#2982,
pandas/,931,with NaT,
pandas/,940,abs,
pandas/,945,FIXME: don't leave commented-out code,
pandas/,946,this fails as numpy returns timedelta64[us],
pandas/,947,result = np.abs(s1-s2),
pandas/,948,"assert_frame_equal(result,expected)",
pandas/,953,max/min,
pandas/,966,"For strings, or any Series with dtype 'O'",
pandas/,969,For mixed data types,
pandas/,987,For numeric data with NA and Inf (GH #13595),
pandas/,996,"Using old-style behavior that treats floating point nan, -inf, and",
pandas/,997,+inf as missing,
pandas/,1006,Note: the name TestDatetime64SeriesReductions indicates these tests,
pandas/,1007,"were moved from a series-specific test file, _not_ that these tests are",
pandas/,1008,intended long-term to be series-specific,
pandas/,1019,GH#23282,
pandas/,1034,GH#23282,
pandas/,1071,Note: the name TestCategoricalSeriesReductions indicates these tests,
pandas/,1072,"were moved from a series-specific test file, _not_ that these tests are",
pandas/,1073,intended long-term to be series-specific,
pandas/,1077,unordered cats have no min/max,
pandas/,1095,GH 25303,
pandas/,1117,Note: the name TestSeriesMode indicates these tests,
pandas/,1118,"were moved from a series-specific test file, _not_ that these tests are",
pandas/,1119,intended long-term to be series-specific,
pandas/,1160,Test string and object types.,
pandas/,1240,gh-5986: Test timedelta types.,
pandas/,1308,Test for uint64 overflow.,
pandas/,1320,Check for the warning that is raised when the mode,
pandas/,1321,results cannot be sorted,
pandas/,49,"For NumPy <1.16, np.array([np.nan, (1,)]) raises",
pandas/,50,ValueError: setting an array element with a sequence.,
pandas/,79,"Use an empty tuple for first element, then remove,",
pandas/,80,to disable np.array's shape inference.,
pandas/,139,ValueError: setting an array element with a sequence,
pandas/,145,We don't want to register. This test should probably be split in two.,
pandas/,151,ValueError: PandasArray must be 1-dimensional.,
pandas/,157,we unsurprisingly clash with a NumPy name.,
pandas/,165,AssertionError,
pandas/,170,ValueError: PandasArray must be 1-dimensional.,
pandas/,176,GH#33125,
pandas/,184,ValueError: Names should be list-like for a MultiIndex,
pandas/,193,NumPy array shape inference,
pandas/,203,"We have a bool dtype, so the result is an ExtensionArray",
pandas/,204,but expected is not,
pandas/,210,Not numeric,
pandas/,215,np.array shape inference. Shift implementation fails.,
pandas/,222,Fails creating expected,
pandas/,227,"The ""scalar"" for this array isn't a scalar.",
pandas/,232,"The ""scalar"" for this array isn't a scalar.",
pandas/,237,ndarray of tuples not hashable,
pandas/,242,Test setup fails.,
pandas/,247,Test setup fails.,
pandas/,253,Fails creating expected,
pandas/,295,avoid coercing int -> float. Just cast to the actual numpy type.,
pandas/,308,"Non-scalar ""scalar"" values.",
pandas/,313,"Non-scalar ""scalar"" values.",
pandas/,318,"Non-scalar ""scalar"" values.",
pandas/,323,"Non-scalar ""scalar"" values.",
pandas/,329,"not actually a mixed concat, since we concat int and int.",
pandas/,347,Fails creating expected,
pandas/,352,Fails creating expected,
pandas/,357,Fails creating expected,
pandas/,368,AssertionError,
pandas/,373,"ValueError: shape mismatch: value array of shape (2,1) could not",
pandas/,374,"be broadcast to indexing result of shape (2,)",
pandas/,379,ValueError: PandasArray must be 1-dimensional.,
pandas/,384,ValueError: cannot set using a list-like indexer with a different,
pandas/,385,length than the value,
pandas/,390,AssertionError,
pandas/,395,AssertionError,
pandas/,400,AssertionError,
pandas/,405,AssertionError,
pandas/,411,ValueError: cannot set using a list-like indexer with a different,
pandas/,412,length than the value,
pandas/,417,Failed: DID NOT RAISE <class 'ValueError'>,
pandas/,420,"TODO: there is some issue with PandasArray, therefore,",
pandas/,421,"skip the setitem test for now, and fix it later (GH 31446)",
pandas/,84,we are pd.NA,
pandas/,105,"we have multiple dtypes, so skip",
pandas/,111,overwriting to indicate ops don't raise an error,
pandas/,117,TODO see https://github.com/pandas-dev/pandas/issues/22023,
pandas/,125,other is np.int64 and would therefore always result in,
pandas/,126,"upcasting, so keeping other as same numpy_dtype",
pandas/,135,TODO reverse operators result in object dtype,
pandas/,138,TODO reverse operators result in object dtype,
pandas/,139,see https://github.com/pandas-dev/pandas/issues/22024,
pandas/,143,combine method result in 'biggest' (int64) dtype,
pandas/,148,TODO pow on Int arrays gives different result with NA,
pandas/,149,see https://github.com/pandas-dev/pandas/issues/22022,
pandas/,162,other specific errors tested in the integer array specific tests,
pandas/,170,Override to do the astype to boolean,
pandas/,195,for test_concat_mixed_dtypes test,
pandas/,196,concat of an Integer and Int coerces to object dtype,
pandas/,197,TODO(jreback) once integrated this would,
pandas/,238,overwrite to ensure pd.NA is tested instead of np.nan,
pandas/,239,https://github.com/pandas-dev/pandas/issues/30958,
pandas/,99,"__setitem__ incorrectly makes a copy (GH#27147), so we only",
pandas/,100,have a smoke-test,
pandas/,119,"Index.fillna only accepts scalar `value`, so we have to skip all",
pandas/,120,non-scalar fill tests.,
pandas/,31,ensure we meet the requirements,
pandas/,32,1. first two not null,
pandas/,33,2. first and second are different,
pandas/,87,Is this deliberate?,
pandas/,104,"CategoricalDtype.type isn't ""correct"" since it should",
pandas/,105,be a parent of the elements (object). But don't want,
pandas/,106,to break things by changing.,
pandas/,111,TODO remove this once Categorical.take is fixed,
pandas/,171,GH 20825,
pandas/,172,"When adding categoricals in combine, result is a string",
pandas/,200,GH 28406,
pandas/,218,GH 28668,
pandas/,239,GH 28448,
pandas/,259,GH 23287,
pandas/,260,skipping because it is not implemented,
pandas/,290,https://github.com/pandas-dev/pandas/issues/32276,
pandas/,106,"__setitem__ does not work, so we only have a smoke-test",
pandas/,110,"__setitem__ does not work, so we only have a smoke-test",
pandas/,120,https://github.com/pandas-dev/pandas/issues/20762,
pandas/,121,"This should be the same, aside from concat([sparse, float])",
pandas/,127,dataframes,
pandas/,173,"Skipping TestSetitem, since we don't implement it.",
pandas/,188,GH 21189,
pandas/,207,this one looks doable.,
pandas/,211,Have to override to specify that fill_value will change.,
pandas/,233,We return a Series[SparseArray].__le__ returns a,
pandas/,234,Series[Sparse[bool]],
pandas/,235,rather than Series[bool],
pandas/,303,"Right now this is upcasted to float, just like combine_first",
pandas/,304,for Series[int],
pandas/,315,"Unlike the base class, we do not expect the resulting Block",
pandas/,316,to be ObjectBlock,
pandas/,322,"Unlike the base class, we do not expect the resulting Block",
pandas/,323,to be ObjectBlock,
pandas/,329,FIXME: these currently fail; dont leave commented-out,
pandas/,330,check that we can compare the dtypes,
pandas/,331,comp = result.dtypes.equals(df.dtypes),
pandas/,332,assert not comp.any(),
pandas/,343,arith ops call on dtype.fill_value so that the sparsity,
pandas/,344,is maintained. Combine can't be called on a dtype in,
pandas/,345,"general, so we can't make the expected. This is tested elsewhere",
pandas/,364,array,
pandas/,366,"hard to test the fill value, since we don't know what expected",
pandas/,367,is in general.,
pandas/,368,Rely on tests in `tests/sparse` to validate that.,
pandas/,382,series,
pandas/,75,Period + Period is not defined.,
pandas/,88,we implement substitution...,
pandas/,93,... but not the rest.,
pandas/,101,... but not the rest.,
pandas/,108,we don't implement + for Period,
pandas/,121,Override to use __sub__ instead of __add__,
pandas/,133,the base test is not appropriate for us. We raise on comparison,
pandas/,134,"with (some) integers, depending on the value.",
pandas/,28,we don't support anything but a single dtype,
pandas/,63,we are pd.NA,
pandas/,106,overwriting to indicate ops don't raise an error,
pandas/,112,subtraction for bools raises TypeError (but not yet in 1.13),
pandas/,131,combine keeps boolean type,
pandas/,134,combine with bools does not generate the correct result,
pandas/,135,(numpy behaviour for div is to regard the bools as numeric),
pandas/,138,"for rpow, combine does not propagate NaN",
pandas/,146,override to not raise an error,
pandas/,151,other specific errors tested in the boolean array specific tests,
pandas/,157,overwriting to indicate ops don't raise an error,
pandas/,179,override because we only have 2 unique values,
pandas/,190,override because expected needs to be boolean instead of bool dtype,
pandas/,207,override because we only have 2 unique values,
pandas/,225,sorter,
pandas/,329,override parent function to cast to bool for min/max,
pandas/,349,TODO parsing not yet supported,
pandas/,350,class TestParsing(base.BaseParsingTests):,
pandas/,351,pass,
pandas/,73,----------------------------------------------------------------------------,
pandas/,78,----------------------------------------------------------------------------,
pandas/,79,Tests,
pandas/,98,Timestamp.__add__(Timestamp) not defined,
pandas/,105,np.asarray(DTA) is currently always tz-naive.,
pandas/,119,... but not the rest.,
pandas/,123,Datetime + Datetime not implemented,
pandas/,134,... but not the rest.,
pandas/,141,GH 23287,
pandas/,142,skipping because it is not implemented,
pandas/,152,the base test is not appropriate for us. We raise on comparison,
pandas/,153,"with (some) integers, depending on the value.",
pandas/,167,"concat(Series[datetimetz], Series[category]) uses a",
pandas/,168,"plain np.array(values) on the DatetimeArray, which",
pandas/,169,drops the tz.,
pandas/,174,"GH-13287: can't use base test, since building the expected fails.",
pandas/,36,GH17728,
pandas/,42,GH17954,
pandas/,98,needed to fix this astype for the Series constructor.,
pandas/,10,isort:skip,
pandas/,41,"__setitem__ does not work, so we only have a smoke-test",
pandas/,45,"__setitem__ does not work, so we only have a smoke-test",
pandas/,53,seems like some bug in isna on empty BoolArray returning floats.,
pandas/,7,isort:skip,
pandas/,11,GH 27673,
pandas/,55,Some aliases for common attribute names to ensure pandas supports,
pandas/,56,these,
pandas/,58,those aliases are currently not working due to assumptions,
pandas/,59,in internal code (GH-20735),
pandas/,60,self._values = self.values = self.data,
pandas/,74,Make sure we get a view,
pandas/,77,slice,
pandas/,83,integer,
pandas/,91,broadcast value,
pandas/,95,masking,
pandas/,121,"re-implement here, since NumPy has trouble setting",
pandas/,122,sized objects like UserDicts into scalar slots of,
pandas/,123,an ndarary.,
pandas/,133,bounds check,
pandas/,154,NumPy has issues when all the dicts are the same length.,
pandas/,155,"np.array([UserDict(...), UserDict(...)]) fails,",
pandas/,156,"but np.array([{...}, {...}]) works, so cast.",
pandas/,158,needed to add this check for the Series constructor,
pandas/,166,Parent method doesn't work since np.array will try to infer,
pandas/,167,a 2-dim object.,
pandas/,180,"_factorize_array expects 1-d array, this is a len-0 2-d array.",
pandas/,185,Disable NumPy's shape inference by including an empty tuple...,
pandas/,186,"If all the elements of self are the same size P, NumPy will",
pandas/,187,"cast them to an (N, P) array, instead of an (N,) array of tuples.",
pandas/,193,TODO: Use a regular dict. See _NDFrameIndexer._setitem_with_indexer,
pandas/,23,Why the while loop? NumPy is unable to construct an ndarray from,
pandas/,24,equal-length ndarrays. Many of our operations involve coercing the,
pandas/,25,"EA to an ndarray of objects. To avoid random test failures, we ensure",
pandas/,26,that our data is coercible to an ndarray. Several tests deal with only,
pandas/,27,"the first two elements, so that's what we'll check.",
pandas/,78,NumPy doesn't handle an array of equal-length UserDicts.,
pandas/,79,The default assert_series_equal eventually does a,
pandas/,80,"Series.values, which raises. We work around it by",
pandas/,81,converting the UserDicts to dicts.,
pandas/,125,This would always trigger the KeyError from trying to put,
pandas/,126,an array of equal-length UserDicts inside an ndarray.,
pandas/,150,construct from our dtype & string dtype,
pandas/,165,The base test has NaN for the expected NA value.,
pandas/,166,this matches otherwise,
pandas/,198,TODO (EA.factorize): see if _values_for_factorize allows this.,
pandas/,233,Fails with,
pandas/,234,*** ValueError: operands could not be broadcast together,
pandas/,235,"with shapes (4,) (4,) (0,)",
pandas/,252,We intentionally don't run base.BaseSetitemTests because pandas',
pandas/,253,internals has trouble setting sequences of values into scalar positions.,
pandas/,293,GH 23287,
pandas/,294,skipping because it is not implemented,
pandas/,58,"slice, list-like, mask",
pandas/,70,"re-implement here, since NumPy has trouble setting",
pandas/,71,sized objects like UserDicts into scalar slots of,
pandas/,72,an ndarary.,
pandas/,82,bounds check,
pandas/,110,numpy has problems with astype(str) for nested elements,
pandas/,121,TODO: Use a regular dict. See _NDFrameIndexer._setitem_with_indexer,
pandas/,25,https://github.com/pandas-dev/pandas/issues/28840,
pandas/,26,array with list-likes fail when doing astype(str) on the numpy array,
pandas/,27,which was done in to_native_types,
pandas/,56,Some aliases for common attribute names to ensure pandas supports,
pandas/,57,these,
pandas/,59,those aliases are currently not working due to assumptions,
pandas/,60,in internal code (GH-20735),
pandas/,61,self._values = self.values = self.data,
pandas/,91,,
pandas/,115,"array, slice.",
pandas/,177,"If we don't have any NAs, we can ignore skipna",
pandas/,183,GH#29630 avoid returning int 0 or np.bool_(False) on old numpy,
pandas/,72,"need to convert array([Decimal(NaN)], dtype='object') to np.NaN",
pandas/,73,because Series[object].isnan doesn't recognize decimal(NaN) as,
pandas/,74,NA.,
pandas/,94,TODO(EA): select_dtypes,
pandas/,127,construct from our dtype & string dtype,
pandas/,203,Overriding this base test to explicitly test that,
pandas/,204,the custom _formatter is used,
pandas/,210,TODO(extension),
pandas/,251,This is a dtype-specific test that ensures Series[decimal].astype,
pandas/,252,gets all the way through to ExtensionArray.astype,
pandas/,253,Designing a reliable smoke test that works for arbitrary data types,
pandas/,254,is difficult.,
pandas/,284,"Decimal supports ops with int, but not float",
pandas/,297,We implement divmod,
pandas/,321,"Randomly double, halve or keep same value",
pandas/,343,https://github.com/pandas-dev/pandas/issues/22850,
pandas/,351,note: object dtype,
pandas/,362,"op(EA, EA) should return an EA, or an ndarray if it's not possible",
pandas/,363,to return an EA with the return values.,
pandas/,377,https://github.com/pandas-dev/pandas/issues/22930,
pandas/,414,check _HANDLED_TYPES,
pandas/,435,Ensure that the result of agg is inferred to be decimal dtype,
pandas/,436,https://github.com/pandas-dev/pandas/issues/29141,
pandas/,443,"single key, selected column",
pandas/,450,"multiple keys, selected column",
pandas/,460,multiple columns,
pandas/,467,Ensure that the result of agg is inferred to be decimal dtype,
pandas/,468,https://github.com/pandas-dev/pandas/issues/29141,
pandas/,487,See https://github.com/pandas-dev/pandas/issues/29708,
pandas/,488,Ensure that indexing operations do not materialize (convert to a numpy,
pandas/,489,array) the ExtensionArray unnecessary,
pandas/,500,ensure the following operations do not raise an error,
pandas/,508,test the extra keyword,
pandas/,49,min/max with empty produce numpy warnings,
pandas/,25,slice -> frame,
pandas/,29,sequence -> frame,
pandas/,35,slice -> series,
pandas/,39,sequence -> series,
pandas/,43,GH#32959 slice columns with step,
pandas/,50,"GH#32959 null slice along index, slice along columns with single-block",
pandas/,84,slice -> frame,
pandas/,88,sequence -> frame,
pandas/,94,slice -> series,
pandas/,98,sequence -> series,
pandas/,103,GH#27110 bug in ExtensionBlock.iget caused df.iloc[n] to incorrectly,
pandas/,104,return a scalar,
pandas/,129,Indexing with empty list,
pandas/,138,"Empty mask, raw array",
pandas/,144,"Empty mask, in series",
pandas/,150,"non-empty mask, raw array",
pandas/,156,"non-empty mask, in series",
pandas/,190,https://github.com/pandas-dev/pandas/issues/31503,
pandas/,233,TODO this raises KeyError about labels not found (it tries label-based),
pandas/,234,import pandas._testing as tm,
pandas/,235,"s = pd.Series(data, index=[tm.rands(4) for _ in range(len(data))])",
pandas/,236,"with pytest.raises(ValueError, match=msg):",
pandas/,237,s[idx],
pandas/,240,getitem[slice] should return an array,
pandas/,241,empty,
pandas/,244,scalar,
pandas/,248,GH 20882,
pandas/,277,GH 21257,
pandas/,314,https://github.com/pandas-dev/pandas/issues/20640,
pandas/,321,valid,
pandas/,384,see GH-27785 take_nd with indexer of len 1 resulting in wrong ndim,
pandas/,390,https://github.com/pandas-dev/pandas/pull/30175,
pandas/,5,classmethod and different signature is needed,
pandas/,6,to make inheritance compliant with mypy,
pandas/,18,Assume it is the reverse operator,
pandas/,39,"divmod has multiple return values, so check separately",
pandas/,72,series & scalar,
pandas/,79,frame & scalar,
pandas/,85,ndarray & other series,
pandas/,114,invalid ops,
pandas/,120,EAs should return NotImplemented for ops with Series.,
pandas/,121,Pandas takes care of unboxing the series and calling the EA's op.,
pandas/,144,array,
pandas/,147,series,
pandas/,164,EAs should return NotImplemented for ops with Series.,
pandas/,165,Pandas takes care of unboxing the series and calling the EA's op.,
pandas/,48,https://github.com/pandas-dev/pandas/issues/20762,
pandas/,54,dataframes,
pandas/,59,series,
pandas/,64,simple test for just EA and one other,
pandas/,83,non-aligned,
pandas/,98,GH 20756,
pandas/,115,Assumes that the ctor can take a list of scalars of the type,
pandas/,126,Assumes that the ctor can take a list of scalars of the type,
pandas/,137,https://github.com/pandas-dev/pandas/issues/20576,
pandas/,163,https://github.com/pandas-dev/pandas/issues/20555,
pandas/,169,GH-20743,
pandas/,200,GH 23020,
pandas/,209,order,
pandas/,215,GH 23020,
pandas/,245,"we need a second astype(object), in case the constructor inferred",
pandas/,246,"object -> specialized, as is done for period.",
pandas/,260,"Two levels, uniform.",
pandas/,262,non-uniform,
pandas/,264,"three levels, non-uniform",
pandas/,287,"[0, 1, 2]",
pandas/,288,"[(0,), (1,), (2,), (0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1)]",
pandas/,300,We should get the same result with to_frame+unstack+droplevel,
pandas/,312,"as long as EA is 1D-only, ravel is a no-op",
pandas/,316,"Check that we have a view, not a copy",
pandas/,15,------------------------------------------------------------------------,
pandas/,16,Interface,
pandas/,17,------------------------------------------------------------------------,
pandas/,29,GH-20761,
pandas/,52,GH-20735: EA's with .values attribute give problems with internal,
pandas/,53,"code, disallowing this for now until solved",
pandas/,62,"If your `isna` returns an ExtensionArray, you must also implement",
pandas/,63,"_reduce. At the *very* least, you must implement any and all",
pandas/,75,GH#27083 removing deep keyword from EA.copy,
pandas/,83,"view with no dtype should return a shallow copy, *not* the same",
pandas/,84,object,
pandas/,94,check specifically that the `dtype` kwarg is accepted,
pandas/,20,GH 21189,
pandas/,39,defaults,
pandas/,44,axis = 1,
pandas/,49,multiple,
pandas/,85,Fill with a series,
pandas/,89,Fill with a series not affecting the missing values,
pandas/,31,Series[EA] is unboxed / boxed correctly,
pandas/,57,construct from our dtype & string dtype,
pandas/,67,gh-30280,
pandas/,77,pd.array(extension_array) should be idempotent...,
pandas/,82,... but specifying dtype will override idempotency,
pandas/,36,Ensure no modifications made before the exception,
pandas/,113,wrong length,
pandas/,169,TODO(xfail) this raises KeyError about labels not found (it tries label-based),
pandas/,170,for list of labels with Series,
pandas/,191,loc,
pandas/,194,Series.__setitem__,
pandas/,209,loc,
pandas/,211,__setitem__,
pandas/,229,overwrite with new type,
pandas/,297,GH#28150 setitem shouldn't swap the underlying data,
pandas/,24,FIXME: these currently fail; dont leave commented-out,
pandas/,25,check that we can compare the dtypes,
pandas/,26,cmp = result.dtypes.equals(df.dtypes),
pandas/,27,assert not cmp.any(),
pandas/,44,noqa,
pandas/,45,noqa,
pandas/,46,noqa,
pandas/,47,noqa,
pandas/,48,noqa,
pandas/,49,noqa,
pandas/,50,noqa,
pandas/,51,noqa,
pandas/,52,noqa,
pandas/,53,noqa,
pandas/,59,noqa,
pandas/,60,noqa,
pandas/,65,noqa,
pandas/,66,noqa,
pandas/,25,check OK as classmethod,
pandas/,66,check equivalency for using .dtypes,
pandas/,71,np.dtype('int64') == 'Int64' == 'int64',
pandas/,72,so can't distinguish,
pandas/,78,XXX: This should probably be *fixed* not ignored.,
pandas/,79,See libops.scalar_compare,
pandas/,91,no error,
pandas/,38,GH#26835,
pandas/,56,we don't care whether it's int32 or int64,
pandas/,74,GH 25439,
pandas/,170,GH 20825,
pandas/,171,Test that combine works when doing a <= (le) comparison,
pandas/,187,GH 20825,
pandas/,208,https://github.com/pandas-dev/pandas/issues/24147,
pandas/,221,https://github.com/pandas-dev/pandas/issues/22386,
pandas/,246,does this array implement ops?,
pandas/,269,https://github.com/pandas-dev/pandas/issues/23911,
pandas/,277,https://github.com/pandas-dev/pandas/issues/23911,
pandas/,302,"We are in general mutable, so not hashable",
pandas/,307,https://github.com/pandas-dev/pandas/issues/23066,
pandas/,335,sorter,
pandas/,360,array other,
pandas/,15,----------------------------------------------------------------------,
pandas/,16,Generic types test cases,
pandas/,42,remove the info axis,
pandas/,64,single axis,
pandas/,66,relabeling values passed into self.rename,
pandas/,78,rename a single axis,
pandas/,84,multiple axes at once,
pandas/,91,get the numeric data,
pandas/,96,non-inclusion,
pandas/,101,get the bool data,
pandas/,107,"_get_numeric_data is includes _get_bool_data, so can't test for",
pandas/,108,non-inclusion,
pandas/,112,GH 4633,
pandas/,113,look at the boolean/nonzero behavior for objects,
pandas/,139,empty,
pandas/,144,invalid behaviors,
pandas/,161,test close downcasting,
pandas/,174,see gh-5191,
pandas/,175,Compound dtypes should raise NotImplementedError.,
pandas/,188,these work (though results may be unexpected),
pandas/,202,check that the metadata matches up on the resulting ops,
pandas/,209,----------,
pandas/,210,preserving,
pandas/,211,----------,
pandas/,213,simple ops with scalars,
pandas/,218,ops with like,
pandas/,223,simple boolean,
pandas/,230,combine_first,
pandas/,234,---------------------------,
pandas/,235,non-preserving (by default),
pandas/,236,---------------------------,
pandas/,238,add non-like,
pandas/,242,simple boolean,
pandas/,245,this is a name matching op,
pandas/,253,GH5370,
pandas/,265,0-len,
pandas/,269,bounded,
pandas/,273,neg index,
pandas/,278,Fixes issue: 2419,
pandas/,282,,
pandas/,283,Check behavior of random_state argument,
pandas/,284,,
pandas/,286,Check for stability when receives seed or random state -- run 10,
pandas/,287,times.,
pandas/,326,Check for error when random_state argument invalid.,
pandas/,330,,
pandas/,331,Check behavior of `frac` and `N`,
pandas/,332,,
pandas/,334,Giving both frac and N throws error,
pandas/,338,Check that raises right error for negative lengths,
pandas/,344,Make sure float values of `n` give error,
pandas/,348,Check lengths are right,
pandas/,353,,
pandas/,354,Check weights,
pandas/,355,,
pandas/,357,Weight length must be right,
pandas/,369,Check won't accept negative weights,
pandas/,374,Check inf and -inf throw errors:,
pandas/,385,All zeros raises errors,
pandas/,390,All missing weights,
pandas/,395,Check np.nan are replaced by zeros.,
pandas/,400,Check None are also replaced by zeros.,
pandas/,406,GH27451,
pandas/,417,"GH-27357, GH-30784: ensure the result of sample is an actual copy and",
pandas/,418,doesn't track the parent dataframe / doesn't give SettingWithCopy warnings,
pandas/,426,GH8846,
pandas/,427,size property should be defined,
pandas/,434,xref GH8846,
pandas/,439,See gh-12301,
pandas/,446,stat_function,
pandas/,448,stat_function_ddof,
pandas/,450,cum_function,
pandas/,452,logical_function,
pandas/,457,GH 12021,
pandas/,458,"compat for __name__, __qualname__",
pandas/,471,stat_function,
pandas/,473,stat_function_ddof,
pandas/,475,cum_function,
pandas/,477,logical_function,
pandas/,480,GH11382,
pandas/,482,small,
pandas/,489,big,
pandas/,502,GH 15444,
pandas/,533,tests that don't fit elsewhere,
pandas/,536,Fixes issue: 2419,
pandas/,537,additional specific object based tests,
pandas/,539,A few dataframe test with degenerate weights.,
pandas/,554,Ensure proper error if string given as weight for Series or,
pandas/,555,DataFrame with axis = 1.,
pandas/,563,Check weighting key error,
pandas/,569,Check that re-normalizes weights that don't sum to one.,
pandas/,574,,
pandas/,575,Test axis argument,
pandas/,576,,
pandas/,578,Test axis argument,
pandas/,585,Different axis arg types,
pandas/,597,Check out of range axis values,
pandas/,608,Test weight length compared to correct axis,
pandas/,612,Check weights with axis = 1,
pandas/,622,Test default axes,
pandas/,627,Test that function aligns weights with frame,
pandas/,632,Weights have index values to be dropped because not in,
pandas/,633,sampled DataFrame,
pandas/,637,Weights have empty values to be filed with zeros,
pandas/,641,No overlap in weight and sampled DataFrame indices,
pandas/,663,GH32503,
pandas/,670,noop,
pandas/,676,squeezing,
pandas/,680,don't fail with 0 length dimensions GH11229 & GH8999,
pandas/,686,axis argument,
pandas/,713,calls implementation in pandas/core/base.py,
pandas/,770,GH 27357,
pandas/,793,NaNs compare as equal,
pandas/,806,Add object dtype column with nans,
pandas/,824,different dtype,
pandas/,829,different index,
pandas/,834,different columns,
pandas/,839,DatetimeIndex,
pandas/,845,MultiIndex,
pandas/,853,NaN in index,
pandas/,858,GH 8437,
pandas/,47,get the numeric data,
pandas/,72,allow single item via bool method,
pandas/,80,single item nan to raise,
pandas/,90,multiple bool are still an error,
pandas/,98,single non-bool are an error,
pandas/,108,check that the metadata matches up on the resulting ops,
pandas/,118,resample,
pandas/,157,reset,
pandas/,159,FIXME: use monkeypatch,
pandas/,163,Separating off because it doesnt rely on parent class,
pandas/,174,GH22397,
pandas/,179,GH22397,
pandas/,8,Fixtures,
pandas/,9,========,
pandas/,46,Test is label/level reference,
pandas/,47,=============================,
pandas/,68,DataFrame,
pandas/,69,---------,
pandas/,72,Compute expected labels and levels,
pandas/,75,Transpose frame if axis == 1,
pandas/,79,Perform checks,
pandas/,86,Transpose frame if axis == 1,
pandas/,90,df has both an on-axis level and off-axis label named L1,
pandas/,91,"Therefore L1 should reference the label, not the level",
pandas/,94,df has an on-axis level named L2 and it is not ambiguous,
pandas/,95,Therefore L2 is an level reference,
pandas/,98,df has a column named L3 and it not an level reference,
pandas/,102,Series,
pandas/,103,------,
pandas/,106,Make series with L1 as index,
pandas/,111,Make series with L1 and L2 as index,
pandas/,119,Make series with L1 as index,
pandas/,126,Test _check_label_or_level_ambiguity_df,
pandas/,127,=======================================,
pandas/,129,DataFrame,
pandas/,130,---------,
pandas/,133,Transpose frame if axis == 1,
pandas/,142,df_ambig has both an on-axis level and off-axis label named L1,
pandas/,143,"Therefore, L1 is ambiguous.",
pandas/,147,"df_ambig has an on-axis level named L2,, and it is not ambiguous.",
pandas/,150,"df_ambig has an off-axis label named L3, and it is not ambiguous",
pandas/,154,Series,
pandas/,155,------,
pandas/,158,A series has no columns and therefore references are never ambiguous,
pandas/,160,Make series with L1 as index,
pandas/,165,Make series with L1 and L2 as index,
pandas/,174,Make series with L1 as index,
pandas/,181,Test _get_label_or_level_values,
pandas/,182,===============================,
pandas/,205,DataFrame,
pandas/,206,---------,
pandas/,209,Compute expected labels and levels,
pandas/,212,Transpose frame if axis == 1,
pandas/,216,Perform checks,
pandas/,223,Transpose frame if axis == 1,
pandas/,227,"df has an on-axis level named L2, and it is not ambiguous.",
pandas/,230,"df has an off-axis label named L3, and it is not ambiguous.",
pandas/,236,Transpose frame if axis == 1,
pandas/,240,df has unambiguous level 'L1',
pandas/,243,df has unique label 'L3',
pandas/,246,df has duplicate labels 'L2',
pandas/,256,Series,
pandas/,257,------,
pandas/,260,Make series with L1 as index,
pandas/,264,Make series with L1 and L2 as index,
pandas/,271,Make series with L1 as index,
pandas/,278,Test _drop_labels_or_levels,
pandas/,279,===========================,
pandas/,304,DataFrame,
pandas/,305,---------,
pandas/,308,Compute expected labels and levels,
pandas/,311,Transpose frame if axis == 1,
pandas/,315,Perform checks,
pandas/,323,Series,
pandas/,324,------,
pandas/,327,Make series with L1 as index,
pandas/,334,Make series with L1 and L2 as index,
pandas/,57,allow single item via bool method,
pandas/,73,get the numeric data,
pandas/,81,groupby,
pandas/,93,resample,
pandas/,101,merging with override,
pandas/,102,GH 6923,
pandas/,129,concat,
pandas/,130,GH 6927,
pandas/,152,reset,
pandas/,154,FIXME: use monkeypatch,
pandas/,157,Test for consistent setattr behavior when an attribute and a column,
pandas/,158,have the same name (Issue #8994),
pandas/,169,This test covers empty frame copying with non-empty column sets,
pandas/,170,as reported in issue GH15370,
pandas/,177,formerly in Generic but only test DataFrame,
pandas/,211,GH8597,
pandas/,44,idempotency,
pandas/,45,datetimes w/tz are preserved,
pandas/,46,column names are lost,
pandas/,76,available in 0.7.1,
pandas/,77,MultiIndex,
pandas/,111,idempotency,
pandas/,12,TODO:,
pandas/,13,"* Binary methods (mul, div, etc.)",
pandas/,14,"* Binary outputs (align, etc.)",
pandas/,15,"* top-level methods (concat, merge, get_dummies, etc.)",
pandas/,16,* window,
pandas/,17,* cumulative reductions,
pandas/,27,Tuple of,
pandas/,28,"- Callable: Constructor (Series, DataFrame)",
pandas/,29,- Tuple: Constructor args,
pandas/,30,- Callable: pass the constructed value with attrs set to this.,
pandas/,68,"TODO: mul, div, etc.",
pandas/,135,"TODO: div, mul, etc.",
pandas/,321,"marks=not_implemented_mark,",
pandas/,325,Unary ops,
pandas/,496,Cumulative reductions,
pandas/,499,Reductions,
pandas/,546,----------------------------------------------------------------------------,
pandas/,547,Binary operations,
pandas/,565,This generates 326 tests... Is that needed?,
pandas/,582,----------------------------------------------------------------------------,
pandas/,583,Accessors,
pandas/,761,----------------------------------------------------------------------------,
pandas/,762,Groupby,
pandas/,14,"GH#9752 Series/DataFrame should both return None, not raise",
pandas/,24,GH#12800,
pandas/,40,GH#21441,
pandas/,63,GH#17400: no valid entries,
pandas/,75,GH#20499: its preserves freq with holes,
pandas/,19,"no change, position",
pandas/,23,"no change, labels",
pandas/,27,"rotate, position",
pandas/,35,`expected` is constructed from obj.values.dot(other.values),
pandas/,40,"Check ndarray argument; in this case we get matching values,",
pandas/,41,but index/columns may not match,
pandas/,46,can pass correct-length array,
pandas/,54,Check series argument,
pandas/,63,Check index alignment,
pandas/,70,exception raised is of type Exception,
pandas/,14,GH14636; this tests setting index for both Series and DataFrame,
pandas/,20,inplace=False,
pandas/,26,GH#14636,
pandas/,28,"Series only has [0, ""index""]",
pandas/,44,"omitting the ""axis"" parameter",
pandas/,56,"wrong values for the ""axis"" parameter",
pandas/,21,test that we convert an iterable to python types,
pandas/,52,TODO(GH-24559): Remove the filterwarnings,
pandas/,54,gh-10904,
pandas/,55,gh-13258,
pandas/,56,coerce iteration to underlying python / pandas types,
pandas/,84,gh-10904,
pandas/,85,gh-13258,
pandas/,86,coerce iteration to underlying python / pandas types,
pandas/,94,gh-13258,
pandas/,95,test if items yields the correct boxed scalars,
pandas/,96,this only applies to series,
pandas/,108,TODO(GH-24559): Remove the filterwarnings,
pandas/,110,gh-13236,
pandas/,111,coerce iteration to underlying python / pandas types,
pandas/,156,timedelta,
pandas/,164,period,
pandas/,191,This test is currently failing for datetime64[ns] and timedelta64[ns].,
pandas/,192,"The NumPy type system is sufficient for representing these types, so",
pandas/,193,we just use NumPy for Series / DataFrame columns of these types (so,
pandas/,194,we get consolidation and so on).,
pandas/,195,"However, DatetimeIndex and TimedeltaIndex use the DateLikeArray",
pandas/,196,abstraction to for code reuse.,
pandas/,197,"At the moment, we've judged that allowing this test to fail is more",
pandas/,198,practical that overriding Series._values to special case,
pandas/,199,Series[M8[ns]] and Series[m8[ns]] to return a DateLikeArray.,
pandas/,251,tz-aware Datetime,
pandas/,301,tz-naive datetime,
pandas/,306,tz-aware stays tz`-aware,
pandas/,321,Timedelta,
pandas/,348,no copy by default,
pandas/,355,copy=True,
pandas/,367,preserve tz by default,
pandas/,394,type: ignore,
pandas/,403,numpy,
pandas/,409,extension,
pandas/,20,GH 11343,
pandas/,25,values will not be changed,
pandas/,33,check shallow_copied,
pandas/,39,GH 11343,
pandas/,69,check shallow_copied,
pandas/,41,these show that in order for the delegation to work,
pandas/,42,the _delegate_* methods need to be overridden to not raise,
pandas/,43,a TypeError,
pandas/,70,Delegate does not implement memory_usage.,
pandas/,71,Check that we fall back to in-built `__sizeof__`,
pandas/,72,GH 12924,
pandas/,99,"test certain constructor behaviours on dtype inference across Series,",
pandas/,100,Index and DataFrame,
pandas/,129,GH-26853 (+ bug GH-26206 out of bound non-ns unit),
pandas/,131,No dtype specified (dtype inference),
pandas/,132,"datetime64[non-ns] raise error, other cases result in object dtype",
pandas/,133,and preserve original data,
pandas/,143,Explicit dtype specified,
pandas/,144,Forced conversion fails for all -> all cases raise error,
pandas/,38,TODO: Order of entries with the same count is inconsistent on CI (gh-32449),
pandas/,67,"because np.nan == np.nan is False, but None == None is True",
pandas/,68,"np.nan would be duplicated, whereas None wouldn't",
pandas/,75,TODO:,
pandas/,76,Order of entries with the same count is inconsistent on CI (gh-32449),
pandas/,81,can't use expected[null_obj] = 3 as,
pandas/,82,IntervalIndex doesn't allow assignment,
pandas/,88,TODO:,
pandas/,89,Order of entries with the same count is inconsistent on CI (gh-32449),
pandas/,110,"don't sort, have to sort after the fact as not sorting is",
pandas/,111,platform-dep,
pandas/,116,sort ascending,
pandas/,121,relative histogram.,
pandas/,132,bins,
pandas/,153,these return the same,
pandas/,168,handle NA's properly,
pandas/,185,returned dtype differs depending on original,
pandas/,197,"GH 3002, datetime64[ns]",
pandas/,198,don't test names though,
pandas/,233,with NaT,
pandas/,248,numpy_array_equal cannot compare pd.NaT,
pandas/,259,timedelta64[ns],
pandas/,21,construct an integer ndarray so that,
pandas/,22,`expected_uniques.take(expected_codes)` is equal to `obj`,
pandas/,10,GH 14192,
pandas/,18,dict.fromkeys preserves the order,
pandas/,57,"because np.nan == np.nan is False, but None == None is True",
pandas/,58,"np.nan would be duplicated, whereas None wouldn't",
pandas/,34,not using the all_arithmetic_functions fixture with _get_opstr,
pandas/,35,as _get_opstr is used internally in the dynamic implementation of the docstring,
pandas/,41,reverse version of the binary ops,
pandas/,49,"IntervalIndex breaks on ""series[0] = np.nan"" below",
pandas/,54,bug brought up by #1079,
pandas/,55,changed from TypeError in 0.17.0,
pandas/,58,noinspection PyComparisonWithNone,
pandas/,59,noqa,
pandas/,63,noinspection PyComparisonWithNone,
pandas/,64,noqa,
pandas/,68,noqa,
pandas/,72,noqa,
pandas/,77,"Following DatetimeIndex (and Timestamp) convention,",
pandas/,78,inequality comparisons with Series[datetime64] raise,
pandas/,97,Check that we work.,
pandas/,101,deprecated properties,
pandas/,107,len > 1,
pandas/,132,only deep will pick them up,
pandas/,137,sys.getsizeof will call the .memory_usage with,
pandas/,138,"deep=True, and add on some GC overhead",
pandas/,160,numpy.searchsorted calls obj.searchsorted under the hood.,
pandas/,161,See gh-12238,
pandas/,165,See gh-14833,
pandas/,201,GH 25459,
pandas/,29,Example found in computation.rst,
pandas/,87,GH 32865,
pandas/,107,GH 32865,
pandas/,21,GH 12669,
pandas/,26,valid,
pandas/,31,not valid,
pandas/,45,GH 12669,
pandas/,52,see gh-12811,
pandas/,20,rolling time-series friendly,
pandas/,21,xref GH13327,
pandas/,57,not a valid freq,
pandas/,61,not a datetimelike index,
pandas/,65,non-fixed freqs,
pandas/,73,non-integer min_periods,
pandas/,78,center is not implemented,
pandas/,86,not a valid column,
pandas/,90,column is valid,
pandas/,95,invalid columns,
pandas/,99,ok even though on non-selected,
pandas/,104,on/index must be monotonic,
pandas/,117,GH 19248,
pandas/,149,we are doing simulating using 'on',
pandas/,155,test as a frame,
pandas/,156,we should be ignoring the 'on' as an aggregation column,
pandas/,157,"note that the expected is setting, computing, and resetting",
pandas/,158,so the columns need to be switched compared,
pandas/,159,to the actual result where they are ordered as in the,
pandas/,160,original,
pandas/,170,using multiple aggregation columns,
pandas/,229,compare for min_periods,
pandas/,232,these slightly different,
pandas/,243,xref GH13965,
pandas/,256,"closed must be 'right', 'left', 'both', 'neither'",
pandas/,265,default should be 'right',
pandas/,559,GH 21096,
pandas/,571,simple comparison of integer vs time-based windowing,
pandas/,599,more sophisticated comparison of integer vs.,
pandas/,600,time-based windowing,
pandas/,604,in-range data,
pandas/,624,we need to roll the days separately,
pandas/,625,to compare with a time-based roll,
pandas/,626,finally groupby-apply will return a multi-index,
pandas/,627,so we need to drop the day,
pandas/,642,GH 15130,
pandas/,643,we don't need to validate monotonicity when grouping,
pandas/,670,"GH 13966 (similar to #15130, closed by #15175)",
pandas/,692,GH16058,
pandas/,712,"GH-19248, GH-32385",
pandas/,727,GH-32385,
pandas/,734,GH-15584,
pandas/,46,GH 13174,
pandas/,109,reduction,
pandas/,115,GH 14013,
pandas/,124,Grouped column should not be a part of the output,
pandas/,130,Call an arbitrary function on the groupby,
pandas/,133,Make sure nothing has been mutated,
pandas/,189,reduction,
pandas/,196,GH 31754,
pandas/,13,GH 7738,
pandas/,34,since we have sorted the results,
pandas/,35,we can only compare non-nans,
pandas/,44,DataFrame methods (which do not call _flex_binary_moment()),
pandas/,67,"DataFrame with itself, pairwise=True",
pandas/,68,note that we may construct the 1st level of the MI,
pandas/,69,"in a non-monotonic way, so compare accordingly",
pandas/,97,"DataFrame with itself, pairwise=False",
pandas/,119,"DataFrame with another DataFrame, pairwise=True",
pandas/,143,"DataFrame with another DataFrame, pairwise=False",
pandas/,151,we can have int and str columns,
pandas/,175,DataFrame with a Series,
pandas/,187,GH 31789,
pandas/,12,Filter warnings when parallel=True and the function can't be parallelized by Numba,
pandas/,39,Test that the functions are cached correctly if we switch functions,
pandas/,61,func_1 should be in the cache now,
pandas/,69,This run should use the cached func_1,
pandas/,29,GH 12669,
pandas/,34,valid,
pandas/,41,GH 13383,
pandas/,48,not valid,
pandas/,68,GH 13383,
pandas/,79,GH 15440,
pandas/,98,GH 15305,
pandas/,117,see gh-12811,
pandas/,129,closed only allowed for datetimelike,
pandas/,138,GH 26005,
pandas/,151,GH24718,
pandas/,158,GH24718,
pandas/,187,see gh-21704,
pandas/,198,see gh-21704,
pandas/,201,uneven,
pandas/,221,see gh-21704,
pandas/,238,GH 26005,
pandas/,251,GH 15819 Verifies that datetime and integer rolling windows can be,
pandas/,252,applied to empty DataFrames,
pandas/,257,Verifies that datetime and integer rolling windows can be applied to,
pandas/,258,empty DataFrames with datetime index,
pandas/,264,GH 26005,
pandas/,275,https://github.com/pandas-dev/pandas/pull/18921,
pandas/,276,minp=0,
pandas/,282,minp=1,
pandas/,288,https://github.com/pandas-dev/pandas/pull/18921,
pandas/,301,"GH 16789, 16825",
pandas/,313,https://github.com/pandas-dev/pandas/issues/11704,
pandas/,314,Iteration over a Window,
pandas/,323,see gh-23372.,
pandas/,330,axis == 1,
pandas/,337,see gh-26055,
pandas/,351,GH-27766,
pandas/,359,GH-28192,
pandas/,387,see gh-22590,
pandas/,444,GH#6795,
pandas/,453,GH 26996,
pandas/,461,GH 26996,
pandas/,27,technically this is allowed,
pandas/,40,A should not be referenced as a bad column...,
pandas/,41,will have to rethink regex if you change message!,
pandas/,106,using a dict with renaming,
pandas/,126,passed lambda,
pandas/,156,API change for disallowing these types of nested dicts,
pandas/,179,GH12541,
pandas/,250,make sure that we are aggregating window functions correctly with arg,
pandas/,271,GH 10565,
pandas/,311,GH 15072,
pandas/,17,gh-1850,
pandas/,32,5071,
pandas/,38,we have an equal spaced timeseries index,
pandas/,39,so simulate removing the first period,
pandas/,60,gh-8080,
pandas/,26,valid,
pandas/,35,not valid: mutually exclusive,
pandas/,43,not valid: com < 0,
pandas/,47,not valid: span < 1,
pandas/,51,not valid: halflife <= 0,
pandas/,55,not valid: alpha <= 0 or alpha > 1,
pandas/,62,see gh-12811,
pandas/,10,gh-12373 : rolling functions error on float32 data,
pandas/,11,make sure rolling functions works for different dtypes,
pandas/,12,,
pandas/,13,NOTE that these are yielded tests and so _create_data,
pandas/,14,is explicitly called.,
pandas/,15,,
pandas/,16,further note that we are only checking rolling for fully dtype,
pandas/,17,compliance (though both expanding and ewm inherit),
pandas/,27,create the data only once as we are not setting it,
pandas/,167,"data is a tuple(object, is_constant, no_nans)",
pandas/,187,restore once GH 8086 is fixed,
pandas/,188,"lambda v: Series(v).skew(), 3, 'skew'),",
pandas/,189,"(lambda v: Series(v).kurt(), 4, 'kurt'),",
pandas/,190,restore once GH 8084 is fixed,
pandas/,191,"lambda v: Series(v).quantile(0.3), None, 'quantile'),",
pandas/,218,check that correlation of a series with itself is either 1 or NaN,
pandas/,221,check that mean equals mock_mean,
pandas/,229,check that correlation of a series with itself is either 1 or NaN,
pandas/,235,check mean of constant series,
pandas/,240,check correlation of constant series with itself is NaN,
pandas/,249,check variance debiasing factors,
pandas/,278,"check that var(x), std(x), and cov(x) are all >= 0",
pandas/,287,"check that var(x) == cov(x, x)",
pandas/,290,check that var(x) == std(x)^2,
pandas/,294,check that biased var(x) == mean(x^2) - mean(x)^2,
pandas/,299,check that variance of constant series is identically 0,
pandas/,310,can only easily test two Series with similar,
pandas/,311,structure,
pandas/,314,"check that cor(x, y) is symmetric",
pandas/,320,"check that cov(x, y) is symmetric",
pandas/,325,"check that cov(x, y) == (var(x+y) - var(x) -",
pandas/,326,var(y)) / 2,
pandas/,333,"check that corr(x, y) == cov(x, y) / (std(x) *",
pandas/,334,std(y)),
pandas/,339,"check that biased cov(x, y) == mean(x*y) -",
pandas/,340,mean(x)*mean(y),
pandas/,370,GH 7898,
pandas/,372,"binary functions (ewmcov, ewmcorr) with bias=False require at",
pandas/,373,least two values,
pandas/,377,check series of length 0,
pandas/,382,check series of length 1,
pandas/,25,GH 12669,
pandas/,30,valid,
pandas/,35,not valid,
pandas/,44,see gh-12811,
pandas/,67,GH 15819 Verifies that datetime and integer expanding windows can be,
pandas/,68,applied to empty DataFrames,
pandas/,74,Verifies that datetime and integer expanding windows can be applied,
pandas/,75,to empty DataFrames with datetime index,
pandas/,81,https://github.com/pandas-dev/pandas/pull/18921,
pandas/,82,minp=0,
pandas/,88,minp=1,
pandas/,95,https://github.com/pandas-dev/pandas/issues/11704,
pandas/,96,Iteration over a Window,
pandas/,102,see gh-23372.,
pandas/,111,axis == 1,
pandas/,120,GH 26996,
pandas/,128,GH 26996,
pandas/,33,try adjust/ignore_na args matrix,
pandas/,54,GH 7603,
pandas/,113,check that ignore_na defaults to False,
pandas/,148,GH 10789,
pandas/,159,GH 10789,
pandas/,171,GH 12492,
pandas/,228,excluding NaNs correctly,
pandas/,234,check min_periods,
pandas/,235,GH 7898,
pandas/,245,"ewm.std, ewm.vol, ewm.var (with bias=False) require at least",
pandas/,246,two values,
pandas/,250,check series of length 0,
pandas/,256,check series of length 1,
pandas/,261,"ewm.std, ewm.vol, ewm.var with bias=False require at least",
pandas/,262,two values,
pandas/,265,pass in ints,
pandas/,292,exception raised is Exception,
pandas/,401,test consistency between different ewm* moments,
pandas/,85,GH 7512,
pandas/,103,GH 7512,
pandas/,121,GH 7512,
pandas/,132,TODO: xref gh-15826,
pandas/,133,.loc is not preserving the names,
pandas/,149,GH 7512,
pandas/,205,"TODO(jreback), needed to add preserve_nan=False",
pandas/,206,here to make this pass,
pandas/,218,GH 8080,
pandas/,248,min_periods is working correctly,
pandas/,258,min_periods=0,
pandas/,287,GH 8056,
pandas/,339,"suppress warnings about empty slices, as we are deliberately testing",
pandas/,340,with empty/0-length Series/DataFrames,
pandas/,348,test consistency between different expanding_* moments,
pandas/,385,test consistency between expanding_xyz() and either (a),
pandas/,386,"expanding_apply of Series.xyz(), or (b) expanding_apply of",
pandas/,387,np.nanxyz(),
pandas/,391,GH 8269,
pandas/,418,GH 9422,
pandas/,27,ok,
pandas/,30,bad axis,
pandas/,34,ok ok,
pandas/,38,bad axis,
pandas/,58,GH 8238,
pandas/,81,GH 8238,
pandas/,104,GH 8238,
pandas/,105,all nan,
pandas/,110,empty,
pandas/,115,shorter than window,
pandas/,188,Gh 8238,
pandas/,214,min_periods,
pandas/,225,GH 8238,
pandas/,334,GH 8238,
pandas/,346,GH 8238,
pandas/,455,GH 8238,
pandas/,528,GH 8238,
pandas/,599,#9413: Tests that rolling window's quantile default behavior,
pandas/,600,is analogous to Numpy's percentile,
pandas/,630,Tests that rolling window's quantile behavior is analogous to,
pandas/,631,Series' quantile for each interpolation option,
pandas/,663,"suppress warnings about empty slices, as we are deliberately testing",
pandas/,664,with a 0-length Series,
pandas/,698,unit test from Bottleneck,
pandas/,700,Test move_nanstd for neg sqrt.,
pandas/,748,inject raw,
pandas/,769,check time_rule works,
pandas/,797,excluding NaNs correctly,
pandas/,805,min_periods is working correctly,
pandas/,819,min_periods=0 may be equivalent to min_periods=1,
pandas/,827,window larger than series length (#7297),
pandas/,846,check center=True,
pandas/,862,shifter index,
pandas/,945,"suppress warnings about empty slices, as we are deliberately testing",
pandas/,946,with empty/0-length Series/DataFrames,
pandas/,954,test consistency between different rolling_* moments,
pandas/,1065,test consistency between rolling_xyz() and either (a),
pandas/,1066,"rolling_apply of Series.xyz(), or (b) rolling_apply of",
pandas/,1067,np.nanxyz(),
pandas/,1071,GH 8269,
pandas/,1103,GH 9422,
pandas/,1107,binary moments,
pandas/,1125,test for correct bias correction,
pandas/,1139,GH 18430,
pandas/,1146,GH3155,
pandas/,1147,don't blow the stack,
pandas/,1156,GH 3155,
pandas/,1173,and some fuzzing,
pandas/,1206,GH 7512,
pandas/,1218,GH 7512,
pandas/,1251,GH 7764,
pandas/,1265,corr/cov return a MI DataFrame,
pandas/,1290,yields all NaN (0 variance),
pandas/,1295,yields all NaN (window too small),
pandas/,1300,"yields [NaN, NaN, NaN, 0.177994, 1.548824]",
pandas/,1310,yields all NaN (0 variance),
pandas/,1315,yields all NaN (window too small),
pandas/,1320,"yields [NaN, NaN, NaN, 1.224307, 2.671499]",
pandas/,1327,#18804 all rolling skew for all equal values should return Nan,
pandas/,1332,#18804 all rolling kurt for all equal values should return Nan,
pandas/,1339,So that we can have 2 datapoints on one of the days,
pandas/,1342,Use floats instead of ints as values,
pandas/,1344,Sort chronologically,
pandas/,1357,"So that we can have 3 datapoints on last day (4, 10, and 20)",
pandas/,1361,Use floats instead of ints as values,
pandas/,1363,Sort chronologically,
pandas/,1366,Default how should be max,
pandas/,1374,Now specify median (10.0),
pandas/,1382,Now specify mean (4+10+20)/3,
pandas/,1394,"So that we can have 3 datapoints on last day (4, 10, and 20)",
pandas/,1398,Use floats instead of ints as values,
pandas/,1400,Sort chronologically,
pandas/,1403,Default how should be min,
pandas/,1414,"So that we can have 3 datapoints on last day (4, 10, and 20)",
pandas/,1418,Use floats instead of ints as values,
pandas/,1420,Sort chronologically,
pandas/,1423,Default how should be median,
pandas/,1432,GH11722,
pandas/,1439,GH12373,
pandas/,1445,Just testing that these don't throw exceptions and that,
pandas/,1446,the return type is float64. Other tests will cover quantitative,
pandas/,1447,correctness,
pandas/,1454,GH 8056,
pandas/,1493,scipy needed for rolling_window,
pandas/,16,Don't run any of these tests if we are on Windows or have no locales.,
pandas/,27,Can set the default locale.,
pandas/,32,Cannot set an invalid locale.,
pandas/,37,see GH#22129,
pandas/,38,"In some cases, an invalid locale can be set,",
pandas/,39,but a subsequent getlocale() raises a ValueError.,
pandas/,50,see GH#9744,
pandas/,72,"Not sure why, but on some Travis runs with pytest,",
pandas/,73,"getlocale() returned (None, None).",
pandas/,93,"Once we exit the ""with"" statement, locale should be back to what it was.",
pandas/,27,"Our test fixture in conftest.py sets ""chained_assignment""",
pandas/,28,"to ""raise"" only after all test methods have been setup.",
pandas/,29,"However, after this setup, there is no longer any",
pandas/,30,"""chained_assignment"" option, so re-register it.",
pandas/,40,the pandas object exposes the user API,
pandas/,58,can't register an already registered option,
pandas/,63,can't register an already registered option,
pandas/,70,no python keywords,
pandas/,76,must be valid identifier (ensure attribute access works),
pandas/,81,we can register options several levels deep,
pandas/,82,without predefining the intermediate steps,
pandas/,83,and we can define differently named options,
pandas/,84,in the same namespace,
pandas/,101,non-existent keys raise KeyError,
pandas/,106,we can get the description for any key we registered,
pandas/,113,if no doc is specified we get a default message,
pandas/,114,"saying ""description not available""",
pandas/,120,default is reported,
pandas/,122,current value is reported,
pandas/,135,gets of non-existent keys fail,
pandas/,148,gets of existing keys succeed,
pandas/,153,gets of non-existent keys fail,
pandas/,218,int is_int,
pandas/,219,str is_str,
pandas/,221,non-negative int can be None,
pandas/,223,None not is_int,
pandas/,245,Formatter is callable,
pandas/,246,Formatter is none (default),
pandas/,284,we can deprecate non-existent options,
pandas/,292,should have raised one warning,
pandas/,293,we get the default message,
pandas/,304,should have raised one warning,
pandas/,305,we get the default message,
pandas/,306,with the removal_ver quoted,
pandas/,317,should have raised one warning,
pandas/,318,we get the custom message,
pandas/,320,test rerouting keys,
pandas/,326,reroute d.dep to d.a,
pandas/,331,should have raised one warning,
pandas/,332,we get the custom message,
pandas/,336,"should overwrite ""d.a""",
pandas/,338,should have raised one warning,
pandas/,339,we get the custom message,
pandas/,345,should have raised one warning,
pandas/,346,we get the custom message,
pandas/,439,make sure callback kicks when using this form of setting,
pandas/,444,Ensure that creating a context does not affect the existing,
pandas/,445,environment as it is supposed to be used with the `with` statement.,
pandas/,446,See https://github.com/pandas-dev/pandas/issues/8514,
pandas/,454,Ensure creating contexts didn't affect the current context.,
pandas/,458,Ensure the correct value is available inside the context.,
pandas/,462,Ensure the current context is reset,
pandas/,467,GH 19789,
pandas/,49,issue casting an index then set_index,
pandas/,56,"A has duplicate values, C does not",
pandas/,78,"A has duplicate values, C does not",
pandas/,95,"A has duplicate values, C does not",
pandas/,99,append to existing multiindex,
pandas/,110,GH1590,
pandas/,118,MultiIndex constructor does not work directly on Series -> lambda,
pandas/,119,Add list-of-list constructor because list is ambiguous -> lambda,
pandas/,120,also test index name if append=True (name is duplicate here for B),
pandas/,144,list of strings gets interpreted as list of keys,
pandas/,149,"np.array/list-of-list ""forget"" the name of B",
pandas/,155,only valid column keys are dropped,
pandas/,156,"since B is always passed as array above, nothing is dropped",
pandas/,162,MultiIndex constructor does not work directly on Series -> lambda,
pandas/,163,also test index name if append=True (name is duplicate here for A & B),
pandas/,179,"np.array/list ""forget"" the name of B",
pandas/,184,only valid column keys are dropped,
pandas/,185,"since B is always passed as array above, only A is dropped, if at all",
pandas/,192,MultiIndex constructor does not work directly on Series -> lambda,
pandas/,193,"We also emulate a ""constructor"" for the label -> lambda",
pandas/,194,also test index name if append=True (name is duplicate here for A),
pandas/,232,"if either box is iter, it has been consumed; re-read",
pandas/,235,need to adapt first drop for case that both keys are 'A' --,
pandas/,236,cannot drop the same column twice;,
pandas/,237,plain == would give ambiguous Boolean error for containers,
pandas/,248,"to test against already-tested behaviour, we add sequentially,",
pandas/,249,"hence second append always True; must wrap keys in list, otherwise",
pandas/,250,box = list would be interpreted as keys,
pandas/,263,setting with a MultiIndex will never drop columns,
pandas/,273,with MultiIndex,
pandas/,283,"column names are A-E, as well as one tuple",
pandas/,286,non-existent key in list with arrays,
pandas/,291,tuples always raise KeyError,
pandas/,295,also within a list,
pandas/,306,"forbidden type, e.g. set",
pandas/,310,"forbidden type in list, e.g. set",
pandas/,314,MultiIndex constructor does not work directly on Series -> lambda,
pandas/,326,GH 24984,
pandas/,327,has length 5,
pandas/,333,wrong length directly,
pandas/,337,wrong length in list,
pandas/,342,GH 24969,
pandas/,352,necessary for pretty KeyError,
pandas/,360,use custom label directly,
pandas/,364,custom label wrapped in list,
pandas/,368,missing key,
pandas/,372,missing label directly,
pandas/,376,missing label in list,
pandas/,380,GH 24969,
pandas/,382,actual example discussed in GH 24984 was e.g. for shapely.geometry,
pandas/,383,objects (e.g. a collection of Points) that can be both hashable and,
pandas/,384,iterable; using frozenset as a stand-in for testing here,
pandas/,387,need to stabilize repr for KeyError (due to random order in sets),
pandas/,391,double curly brace prints one brace in format string,
pandas/,399,use custom label directly,
pandas/,403,custom label wrapped in list,
pandas/,407,missing key,
pandas/,411,missing label directly,
pandas/,415,missing label in list,
pandas/,419,GH 24969,
pandas/,421,purposefully inherit from something unhashable,
pandas/,437,use custom label directly,
pandas/,441,custom label wrapped in list,
pandas/,448,with Categorical,
pandas/,453,from a CategoricalIndex,
pandas/,458,round-trip,
pandas/,474,"don't cast a DatetimeIndex WITH a tz, leave as object",
pandas/,475,GH 6032,
pandas/,492,convert index to series,
pandas/,496,assign to frame,
pandas/,501,convert to series while keeping the timezone,
pandas/,508,convert to utc,
pandas/,526,list of datetimes with a tz,
pandas/,531,GH 6785,
pandas/,532,set the index manually,
pandas/,542,GH 12358,
pandas/,543,tz-aware Series should retain the tz,
pandas/,554,single level,
pandas/,561,GH 12920,
pandas/,577,GH 1971,
pandas/,600,GH 6631,
pandas/,610,GH 11314,
pandas/,611,with tz,
pandas/,623,Renaming,
pandas/,640,Check that set_index isn't converting a MultiIndex into an Index,
pandas/,643,Check actual equality,
pandas/,648,"Check that [MultiIndex, MultiIndex] yields a MultiIndex rather",
pandas/,649,than a pair of tuples,
pandas/,652,Check equality,
pandas/,656,equivalence of the labels/axis and index/columns API's,
pandas/,692,"GH13743, GH13854",
pandas/,746,B & D end up as Categoricals,
pandas/,747,the remainer are converted to in-line objects,
pandas/,748,contining an IntervalIndex.values,
pandas/,762,they compare equal as Index,
pandas/,763,when converted to numpy objects,
pandas/,770,B & D are the same Series,
pandas/,774,C & E are the same Series,
pandas/,92,HACK: win32,
pandas/,117,check dtypes,
pandas/,123,bad axis,
pandas/,127,all NA case,
pandas/,133,result for empty sum/prod,
pandas/,155,make sure works on mixed-type frame,
pandas/,199,HACK: win32,
pandas/,212,bad axis,
pandas/,216,all NA case,
pandas/,246,make sure op works on mixed-type frame,
pandas/,261,---------------------------------------------------------------------,
pandas/,262,Reductions,
pandas/,285,noqa:F401,
pandas/,312,noqa:F811,
pandas/,319,noqa:F811,
pandas/,334,GH#32571 check_less_precise is needed on apparently-random,
pandas/,335,py37-npdev builds and OSX-PY36-min_version builds,
pandas/,336,mixed types (with upcasting happening),
pandas/,368,noqa:F401,
pandas/,375,TODO: Ensure warning isn't emitted in the first place,
pandas/,392,GH#676,
pandas/,420,GH#16116,
pandas/,437,GH 6806,
pandas/,465,https://github.com/pandas-dev/pandas/issues/24752,
pandas/,474,https://github.com/pandas-dev/pandas/issues/24752,
pandas/,475,"Our long-term desired behavior is unclear, but the behavior in",
pandas/,476,0.24.0rc1 was buggy.,
pandas/,485,GH 11670,
pandas/,486,possible bug when calculating mean of DataFrame?,
pandas/,526,GH 9201,
pandas/,528,set one entry to a number in str format,
pandas/,532,set one entry to a non-number str,
pandas/,543,"df1 has all numbers, df2 has a letter inside",
pandas/,657,Check for the warning that is raised when the mode,
pandas/,658,results cannot be sorted,
pandas/,680,min,
pandas/,688,max,
pandas/,696,abs,
pandas/,703,mixed frame,
pandas/,710,results in an object array,
pandas/,725,excludes numeric,
pandas/,730,works when only those columns are selected,
pandas/,741,GH 3106,
pandas/,772,The default,
pandas/,776,min_count=1,
pandas/,781,min_count=0,
pandas/,790,min_count > 1,
pandas/,801,prod isn't defined on timedeltas,
pandas/,807,0 by default,
pandas/,812,min_count=0,
pandas/,816,min_count=1,
pandas/,828,"ensure this works, bug report",
pandas/,834,GH#30886,
pandas/,844,unit test when have object data,
pandas/,850,"xs sum mixed type, just want to know it works...",
pandas/,855,take mean of boolean column,
pandas/,861,"GH#24757 check that datetimelike are excluded by default, handled",
pandas/,862,correctly with numeric_only=True,
pandas/,877,in the future datetime columns will be included,
pandas/,899,don't blow up,
pandas/,910,----------------------------------------------------------------------,
pandas/,911,Index of max / min,
pandas/,943,----------------------------------------------------------------------,
pandas/,944,Logical reductions,
pandas/,978,Axis is None,
pandas/,990,GH 23070,
pandas/,1006,GH 25101,
pandas/,1045,other types,
pandas/,1102,Mix GH#21484,
pandas/,1110,In 1.13.3 and 1.14 np.all(df) returns a Timedelta here,
pandas/,1116,GH 19976,
pandas/,1122,method version,
pandas/,1128,GH 19976,
pandas/,1147,---------------------------------------------------------------------,
pandas/,1148,Matrix-like,
pandas/,1151,matmul test is for GH 10259,
pandas/,1159,DataFrame @ DataFrame,
pandas/,1166,DataFrame @ Series,
pandas/,1171,np.array @ DataFrame,
pandas/,1179,nested list @ DataFrame (__rmatmul__),
pandas/,1186,mixed dtype DataFrame @ DataFrame,
pandas/,1194,different dtypes DataFrame @ DataFrame,
pandas/,1202,unaligned,
pandas/,1209,---------------------------------------------------------------------,
pandas/,1210,Unsorted,
pandas/,1213,smoke test for numpy warnings,
pandas/,1214,"GH 16378, GH 16306",
pandas/,1228,Both NaT and Timestamp are in DataFrame.,
pandas/,1239,"GH12941, only NaTs are in DataFrame.",
pandas/,15,GH # 1211,
pandas/,39,it works!,
pandas/,50,GH#9232,
pandas/,103,"TODO(wesm), incomplete test?",
pandas/,104,noqa,
pandas/,105,noqa,
pandas/,113,"GH 3010, constructing with odd arrays",
pandas/,116,this is ok,
pandas/,119,this is not ok,
pandas/,124,this is ok,
pandas/,152,see gh-3243,
pandas/,185,mixed floating and integer coexist in the same frame,
pandas/,189,add lots of types,
pandas/,193,GH 622,
pandas/,198,GH10952,
pandas/,207,https://github.com/pandas-dev/pandas/issues/21083,
pandas/,240,see gh-14881,
pandas/,246,see gh-2355,
pandas/,272,see gh-18584,
pandas/,291,test expects index shifted by 5,
pandas/,296,col2 is padded with NaN,
pandas/,318,Corner cases,
pandas/,321,"mix dict and array, wrong size - no spec for which error should raise",
pandas/,322,first,
pandas/,327,Length-one dict micro-optimization,
pandas/,331,empty dict plus index,
pandas/,336,empty dict with index and columns,
pandas/,343,with dict of empty list and Series,
pandas/,347,GH 14381,
pandas/,348,Dict with None value,
pandas/,355,GH10856,
pandas/,356,"dict with scalar values should raise error, even if columns passed",
pandas/,366,No error if invalid (scalar) value is in fact not used:,
pandas/,373,GH 18455,
pandas/,392,GH 18455,
pandas/,413,GH19018,
pandas/,414,initialization ordering: by insertion order if python>= 3.6,
pandas/,421,GH 16894,
pandas/,427,GH 4078,
pandas/,428,construction error with mi and all-nan frame,
pandas/,440,GH 25416,
pandas/,441,handling of 2d index in construction,
pandas/,460,passing an empty array with columns specified.,
pandas/,465,"mix dict and array, wrong size",
pandas/,469,"wrong size ndarray, GH 3105",
pandas/,488,higher dim raise exception,
pandas/,492,wrong size axis labels,
pandas/,501,gh-26429,
pandas/,513,embedded data frames,
pandas/,527,Test for passing dict subclass to constructor,
pandas/,540,try with defaultdict,
pandas/,562,cast float tests,
pandas/,574,can't cast to float,
pandas/,593,GH #1491,
pandas/,601,GH 26356,
pandas/,609,GH 26349,
pandas/,617,GH 26349,
pandas/,658,GH 10160,
pandas/,686,GH 10160,
pandas/,714,PeriodIndex,
pandas/,721,list of periods,
pandas/,747,"mat: 2d matrix with shape (3, 2) to input. empty - makes sized",
pandas/,748,objects,
pandas/,750,2-D input,
pandas/,756,1-D input,
pandas/,761,cast type,
pandas/,765,wrong size axis labels,
pandas/,773,higher dim raise exception,
pandas/,777,automatic labeling,
pandas/,788,0-length axis,
pandas/,804,Check non-masked values,
pandas/,812,what is this even checking??,
pandas/,818,masked int promoted to float,
pandas/,820,2-D input,
pandas/,827,cast type,
pandas/,831,Check non-masked values,
pandas/,839,masked np.datetime64 stays (use NaT as null),
pandas/,841,2-D input,
pandas/,848,cast type,
pandas/,852,Check non-masked values,
pandas/,860,masked bool promoted to object,
pandas/,862,2-D input,
pandas/,869,cast type,
pandas/,873,Check non-masked values,
pandas/,882,Check numpy masked arrays with hard masks -- from GH24574,
pandas/,892,Check case where mask is hard but no data are masked,
pandas/,904,Ensure constructor honors dtype,
pandas/,914,Ensure mrecarray produces frame identical to dict of masked arrays,
pandas/,915,from GH3479,
pandas/,932,call assert_frame_equal for all selections of 3 arrays,
pandas/,937,fill the comb,
pandas/,944,specify columns,
pandas/,949,specify index,
pandas/,998,used to be in test_matrix.py,
pandas/,1008,no data specified,
pandas/,1018,can't cast,
pandas/,1026,int cast,
pandas/,1040,GH 9939,
pandas/,1045,Empty generator: list(empty_gen()) == [],
pandas/,1054,GH #484,
pandas/,1059,GH 4851,
pandas/,1060,list of 0-dim ndarrays,
pandas/,1067,GH 32173,
pandas/,1077,GH 32173,
pandas/,1085,GH 32173,
pandas/,1093,GH 3783,
pandas/,1094,collections.Squence like,
pandas/,1112,GH 4297,
pandas/,1113,support Array,
pandas/,1125,GH26342,
pandas/,1136,GH 21987,
pandas/,1157,related #2305,
pandas/,1192,see gh-13304,
pandas/,1210,"the first dict element sets the ordering for the DataFrame,",
pandas/,1211,even if there are conflicting orders from subsequent ones,
pandas/,1238,all named,
pandas/,1247,some unnamed,
pandas/,1258,none named,
pandas/,1341,"ordering ambiguous, raise exception",
pandas/,1345,this is OK though,
pandas/,1351,Issue 25075,
pandas/,1365,GH 32776,
pandas/,1370,GH 25691,
pandas/,1381,GH11181,
pandas/,1390,with columns,
pandas/,1397,GH21910,
pandas/,1409,GH21910,
pandas/,1412,varying types,
pandas/,1426,GH21910,
pandas/,1431,expect TypeError,
pandas/,1437,GH10056,
pandas/,1462,dict of sequence,
pandas/,1469,GH8425,
pandas/,1482,GH 18529,
pandas/,1483,Test new columns parameter for from_dict that was added to make,
pandas/,1484,"from_items(..., orient='index', columns=[...]) easier to replicate",
pandas/,1514,GH 16769,
pandas/,1528,ndarray like,
pandas/,1544,#2234,
pandas/,1549,series with name and w/o,
pandas/,1555,this is a bit non-intuitive here; the series collapse down to arrays,
pandas/,1561,GH 9232 validation,
pandas/,1566,matching name and column gives standard frame,
pandas/,1570,non-matching produces empty frame,
pandas/,1575,name,
pandas/,1578,no name,
pandas/,1618,it works! #2079,
pandas/,1634,GH 9428,
pandas/,1647,expecting single value upcasting here,
pandas/,1684,single item,
pandas/,1704,check with ndarray construction ndim==0 (e.g. we are passing a ndim 0,
pandas/,1705,ndarray with a dtype specified),
pandas/,1727,check with ndarray construction ndim>0,
pandas/,1749,GH 2809,
pandas/,1755,GH 2810,
pandas/,1768,GH 7594,
pandas/,1769,don't coerce tz-aware,
pandas/,1787,tz-aware (UTC and other tz's),
pandas/,1788,GH 8411,
pandas/,1799,GH 7822,
pandas/,1800,preserver an index with a tz on dict construction,
pandas/,1811,multiples,
pandas/,1831,"gh-15869, GH#11220",
pandas/,1837,test list of lists/ndarrays,
pandas/,1848,overflow issue? (we always expecte int64 upcasting here),
pandas/,1852,"GH #2751 (construction with no index specified), make sure we cast to",
pandas/,1853,platform values,
pandas/,1872,with object list,
pandas/,1920,GH 5016,
pandas/,1921,na's in indices,
pandas/,1929,No NaN found -> error,
pandas/,1933,single nan should result in Series,
pandas/,1936,multiple nans should result in DataFrame,
pandas/,1954,GH 21428 (non-unique columns),
pandas/,1959,from #1074,
pandas/,1966,GH8626,
pandas/,1968,dict creation,
pandas/,1973,to_frame,
pandas/,1982,list-like creation,
pandas/,1987,ndim != 1,
pandas/,2002,mixed,
pandas/,2009,invalid (shape),
pandas/,2014,ndim > 1,
pandas/,2031,insert into frame with different index,
pandas/,2032,GH 8076,
pandas/,2044,from numpy documentation,
pandas/,2048,TODO(wesm): unused,
pandas/,2049,noqa,
pandas/,2055,"without names, it should go to last ditch",
pandas/,2059,wrong length,
pandas/,2066,what to do?,
pandas/,2101,"no dtypes specified here, so just compare with the default",
pandas/,2146,noqa,
pandas/,2178,demo missing data,
pandas/,2184,MultiIndex,
pandas/,2189,#2179,
pandas/,2197,overlap in index/index_names,
pandas/,2205,GH 2623,
pandas/,2208,test col upconverts to obj,
pandas/,2227,3562,
pandas/,2250,this may fail on certain platforms because of a numpy issue,
pandas/,2251,related GH6140,
pandas/,2255,construction with a null in a recarray,
pandas/,2256,GH 6140,
pandas/,2270,coercion should work too,
pandas/,2291,this is actually tricky to create the recordlike arrays and,
pandas/,2292,have the dtypes be intact,
pandas/,2310,tuples (lose the dtype info),
pandas/,2315,created recarray and with to_records recarray (have dtype info),
pandas/,2323,list of tupels (no dtype info),
pandas/,2333,tuples is in the order of the columns,
pandas/,2337,test exclude parameter & we are casting the results here (as we don't,
pandas/,2338,have dtype info to recover),
pandas/,2347,empty case,
pandas/,2358,test the dict methods,
pandas/,2372,columns is in a different order here than the actual items iterated,
pandas/,2373,from the dict,
pandas/,2382,dict of series & dict of ndarrays (have dtype info),
pandas/,2405,should pass,
pandas/,2412,should fail,
pandas/,2438,#2633,
pandas/,2447,GH27358,
pandas/,2456,it works,
pandas/,2460,GH 16114,
pandas/,2472,GH 26342,
pandas/,2476,GH 16804,
pandas/,2481,GH21226,
pandas/,2499,GH11363,
pandas/,2505,GH 10863,
pandas/,2513,GH 14600,
pandas/,2546,8260,
pandas/,2547,support datetime64 with tz,
pandas/,2552,construction,
pandas/,2561,from index,
pandas/,2578,it works!,
pandas/,2586,it works!,
pandas/,2600,GH19157,
pandas/,2615,GH22227,
pandas/,2630,GH#26825 2D object array of tzaware timestamps should not raise,
pandas/,2639,GH#26825,
pandas/,2670,GH#12513,
pandas/,2678,https://github.com/pandas-dev/pandas/issues/32582,
pandas/,42,set some NAs,
pandas/,76,set some NAs,
pandas/,25,check that original was preserved,
pandas/,79,threshold,
pandas/,100,subset,
pandas/,107,all,
pandas/,116,bad input,
pandas/,122,tst that cacher updates,
pandas/,137,bad input,
pandas/,144,non-existent column - 8303,
pandas/,158,GH20987,
pandas/,169,GH13407,
pandas/,178,Ex2,
pandas/,185,GH 25087,
pandas/,220,"TODO: make stronger assertion here, GH 25640",
pandas/,226,mixed numeric (but no float16),
pandas/,236,empty frame (GH #2778),
pandas/,243,with different dtype (GH#3386),
pandas/,258,limit and value,
pandas/,270,with datelike,
pandas/,271,GH#6344,
pandas/,285,with timezone,
pandas/,286,GH#15855,
pandas/,310,with timezone in another column,
pandas/,311,GH#15522,
pandas/,342,fillna,
pandas/,352,dropna,
pandas/,359,make sure that fillna takes missing values into account,
pandas/,370,GH 14021,
pandas/,371,np.nan should always be a valid filler,
pandas/,376,GH#32950 df.median() is poorly behaved because there is no,
pandas/,377,Categorical.median,
pandas/,408,GH 15277,
pandas/,409,infer int64 from float64,
pandas/,415,infer int64 from float64 when fillna value is a dict,
pandas/,422,make sure that fillna on an empty frame works,
pandas/,432,empty block,
pandas/,438,equiv of replace,
pandas/,446,GH 7095,
pandas/,540,"don't try to fill boolean, int blocks",
pandas/,544,it works!,
pandas/,601,it works,
pandas/,604,Series treated same as dict,
pandas/,609,disable this for now,
pandas/,614,GH 8377,
pandas/,624,df2 may have different index and columns,
pandas/,636,only those columns and indices which are shared get filled,
pandas/,666,list,
pandas/,670,tuple,
pandas/,673,frame with series,
pandas/,699,TODO(wesm): unused?,
pandas/,700,noqa,
pandas/,17,assignment,
pandas/,18,GH 3687,
pandas/,34,insert,
pandas/,48,insert same dtype,
pandas/,56,set (non-dup),
pandas/,65,delete (non dup),
pandas/,73,try to delete again (its not consolidated),
pandas/,81,consolidate,
pandas/,89,insert,
pandas/,97,insert a dup,
pandas/,112,delete (dup),
pandas/,120,dup across dtypes,
pandas/,138,multiple replacements,
pandas/,156,values,
pandas/,162,"rename, GH 4403",
pandas/,202,reindex is invalid!,
pandas/,212,drop,
pandas/,222,describe,
pandas/,233,check column dups with index equal and not equal to df's index,
pandas/,249,operations,
pandas/,258,multiple assignments that change dtypes,
pandas/,259,the location indexer is a slice,
pandas/,260,GH 6120,
pandas/,275,drop buggy GH 6240,
pandas/,290,dropna,
pandas/,318,boolean indexing,
pandas/,319,GH 4879,
pandas/,330,where,
pandas/,340,boolean with the duplicate raises,
pandas/,346,dup aligning operations should work,
pandas/,347,GH 5185,
pandas/,354,equality,
pandas/,358,not-comparing like-labelled,
pandas/,371,mixed column selection,
pandas/,372,GH 5639,
pandas/,384,multi-axis dups,
pandas/,385,GH 6121,
pandas/,405,GH 8363,
pandas/,406,datetime ops with a non-unique index,
pandas/,427,GH 3468 related,
pandas/,429,basic,
pandas/,442,with a dup index,
pandas/,449,multi-dtype,
pandas/,467,dups across blocks,
pandas/,480,testing iloc,
pandas/,484,dup columns across dtype GH 2079/2194,
pandas/,502,See gh-12344,
pandas/,56,test roundtrip,
pandas/,66,no index,
pandas/,71,corner case,
pandas/,87,duplicate index,
pandas/,102,column aliases,
pandas/,132,GH 10833 (TimedeltaIndex formatting),
pandas/,142,TODO: remove renaming when GH 10875 is solved,
pandas/,150,"tz, 8260",
pandas/,166,GH3454,
pandas/,190,we wrote them in a different order,
pandas/,191,so compare them in that order,
pandas/,208,wrote in the same order,
pandas/,216,dupe cols,
pandas/,221,dupe cols with selection,
pandas/,227,GH3437,
pandas/,232,10%,
pandas/,243,N=35000,
pandas/,247,"s3=make_dtnjat_arr(chunksize+5,0)",
pandas/,283,read_Csv disambiguates the columns by,
pandas/,284,"labeling them dupe.1,dupe.2, etc'. monkey patch columns",
pandas/,294,unicode,
pandas/,302,unicode,
pandas/,506,"test roundtrip with inf, -inf, nan, as full columns and mix",
pandas/,515,TODO to_csv drops column name,
pandas/,523,"test roundtrip with inf, -inf, nan, as full columns and mix",
pandas/,531,TODO to_csv drops column name,
pandas/,538,"GH 3624, after appending columns, to_csv fails",
pandas/,550,gh-11637: incorrect output when a mix of integer and string column,
pandas/,551,names passed as columns parameter in to_csv,
pandas/,558,"GH6186, the presence or absence of `index` incorrectly",
pandas/,559,causes to_csv to have different header semantics.,
pandas/,587,round trip,
pandas/,592,TODO to_csv drops column name,
pandas/,596,needed if setUp becomes a class method,
pandas/,599,try multiindex with dates,
pandas/,608,TODO to_csv drops column name,
pandas/,611,do not load index,
pandas/,616,no index,
pandas/,621,needed if setUp becomes class method,
pandas/,625,"GH3571, GH1651, GH3141",
pandas/,638,column & index are multi-index,
pandas/,644,column is mi,
pandas/,650,dup column names?,
pandas/,656,writing with no index,
pandas/,662,we lose the names here,
pandas/,670,whatsnew example,
pandas/,681,invalid options,
pandas/,690,write with cols,
pandas/,696,empty,
pandas/,707,GH 28210,
pandas/,714,can't roundtrip intervalindex via read_csv so check string repr (GH 23595),
pandas/,733,Commas inside fields should be correctly escaped when saving as CSV.,
pandas/,759,add in some nans,
pandas/,762,## this is a bug in read_csv right now,
pandas/,763,"df_dt.loc[30:50,1:3] = np.nan",
pandas/,767,dtype,
pandas/,794,"single dtype, fine",
pandas/,817,date cols,
pandas/,824,GH3457,
pandas/,833,read_csv will rename the dups columns,
pandas/,853,Issue #8621,
pandas/,869,don't check_names as t != 1,
pandas/,904,TODO to_csv drops column name,
pandas/,939,GH4328,
pandas/,961,see gh-20353,
pandas/,965,case 1: CRLF as line terminator,
pandas/,973,case 2: LF as line terminator,
pandas/,981,case 3: The default line terminator(=os.linesep)(gh-21406),
pandas/,1000,CSV with categoricals should result in the same output,
pandas/,1001,"as when one would add a ""normal"" Series/DataFrame.",
pandas/,1024,GH 8215,
pandas/,1025,Make sure we return string for consistency with,
pandas/,1026,Series.to_csv(),
pandas/,1043,"GH 21241, 21118",
pandas/,1057,test the round trip - to_csv -> read_csv,
pandas/,1063,test the round trip using file handle - to_csv -> read_csv,
pandas/,1078,explicitly make sure file is compressed,
pandas/,1095,Check that the data was put in the specified format,
pandas/,1109,Check that the data was put in the specified format,
pandas/,1120,Check that columns get converted,
pandas/,1129,Columns don't get converted to ints by read_csv,
pandas/,1136,test NaTs,
pandas/,1150,make sure we are not failing on transitions,
pandas/,1163,we have to reconvert the index as we,
pandas/,1164,don't parse the tz's,
pandas/,1171,GH11619,
pandas/,1185,assert working,
pandas/,1236,"see gh-12922, gh-13259: make sure changes to",
pandas/,1237,the formatters do not break this behaviour,
pandas/,1272,see gh-3503: quoting Windows line terminators,
pandas/,1273,presents with encoding?,
pandas/,1282,xref gh-7791: make sure the quoting parameter is passed through,
pandas/,1283,with multi-indexes,
pandas/,1292,see gh-15982,
pandas/,1311,Overflow with pd.NaT,
pandas/,1323,see gh-5539,
pandas/,1336,see gh-26303,
pandas/,1345,GH 25311,
pandas/,11,Subclass frame and ensure it returns the right class on slicing it,
pandas/,12,In reference to PR 9632,
pandas/,43,Did we get back our own DF class?,
pandas/,46,Do we get back our own Series class after selecting a column?,
pandas/,51,Do we get back our own DF class after slicing row-wise?,
pandas/,56,Make sure sliced part of multi-index frame is custom class,
pandas/,76,see gh-9776,
pandas/,79,see gh-10553,
pandas/,86,GH 11559,
pandas/,121,GH 11808,
pandas/,131,GH 12983,
pandas/,160,GH 12983,
pandas/,164,frame + series,
pandas/,170,name is lost when,
pandas/,180,series + frame,
pandas/,188,GH 13977,
pandas/,195,GH 15564,
pandas/,210,GH 15564,
pandas/,267,GH 15564,
pandas/,329,GH 15564,
pandas/,344,GH 15564,
pandas/,383,GH 15564,
pandas/,433,GH 15564,
pandas/,456,GH 15564,
pandas/,481,GH 9762,
pandas/,510,GH 19822,
pandas/,564,GH 25596,
pandas/,571,GH 25596,
pandas/,35,Test insertion into existing datetime64 column,
pandas/,51,GH 7492,
pandas/,59,OutOfBoundsDatetime error shouldn't occur,
pandas/,41,GH 12749,
pandas/,42,"this should always work, whether _NUMEXPR_INSTALLED or not",
pandas/,82,"smaller hits python, larger hits numexpr",
pandas/,95,tst ops and reversed ops in evaluation,
pandas/,96,GH7198,
pandas/,102,noqa,
pandas/,108,ops as strings,
pandas/,112,these are commutative,
pandas/,117,these are not,
pandas/,123,GH7192: Note we need a large number of rows to ensure this,
pandas/,124,goes through the numexpr path,
pandas/,132,GH 11485,
pandas/,143,GH 13139,
pandas/,151,GH 14095,
pandas/,170,equality,
pandas/,177,inequality,
pandas/,184,list equality (really just set membership),
pandas/,197,in/not in ops,
pandas/,224,inequality,
pandas/,231,list equality (really just set membership),
pandas/,244,in/not in ops,
pandas/,257,## LEVEL 1,
pandas/,265,inequality,
pandas/,272,list equality (really just set membership),
pandas/,285,in/not in ops,
pandas/,473,noqa,
pandas/,482,no local variable c,
pandas/,488,no column named 'c',
pandas/,499,we don't pick up the local 'sin',
pandas/,552,"""index"" should refer to the index",
pandas/,557,test against a scalar,
pandas/,593,can't reference ourself b/c we're a local so @ is necessary,
pandas/,621,noqa,
pandas/,644,noqa,
pandas/,663,noqa,
pandas/,777,smoke test,
pandas/,778,noqa,
pandas/,785,don't have the pandas parser,
pandas/,1017,noqa,
pandas/,19,don't want to be able to modify the index stored elsewhere after,
pandas/,20,making a copy,
pandas/,102,DataFrame whose columns are identifiers shall have them in __dir__.,
pandas/,108,DataFrame whose first-level columns are identifiers shall have,
pandas/,109,them in __dir__.,
pandas/,131,GH 25509,
pandas/,134,this should not crash,
pandas/,171,corner case,
pandas/,182,"GH 17213, GH 13918",
pandas/,203,GH 19671,
pandas/,215,gh-12222,
pandas/,255,repr with int on 32-bit/windows,
pandas/,273,will raise SyntaxError if trying to create namedtuple,
pandas/,281,GH 28282,
pandas/,291,Dataframes with >=255 columns will fallback to regular tuples on python < 3.7,
pandas/,299,GH 7839,
pandas/,300,make sure can iterate,
pandas/,306,basic sequencing testing,
pandas/,311,iteration,
pandas/,337,mixed type,
pandas/,345,single block corner case,
pandas/,381,reg name,
pandas/,391,GH 18147,
pandas/,392,no exception and no empty docstring,
pandas/,461,GH 1893,
pandas/,471,-----DataFrame-----,
pandas/,473,set_index,
pandas/,477,reset_index,
pandas/,481,drop_duplicates,
pandas/,485,sort,
pandas/,489,sort_index,
pandas/,493,fillna,
pandas/,497,replace,
pandas/,501,rename,
pandas/,505,-----Series-----,
pandas/,508,reset_index,
pandas/,512,fillna,
pandas/,516,replace,
pandas/,520,rename,
pandas/,526,GH 16409,
pandas/,545,GH 31784 _item_cache not cleared on copy causes incorrect reads after updates,
pandas/,14,"__pos__, __neg__, __inv__",
pandas/,39,GH#21380,
pandas/,97,GH#16073,
pandas/,104,numpy changing behavior in the future,
pandas/,114,GH#21380,
pandas/,130,"&, |, ^",
pandas/,133,GH#5808,
pandas/,134,"empty frames, non-mixed dtype",
pandas/,154,GH#5808,
pandas/,164,GH#5808,
pandas/,171,Check that this matches Series behavior,
pandas/,176,GH#5808,
pandas/,228,TODO: belongs elsewhere,
pandas/,233,GH4947,
pandas/,234,bool comparisons should return bool,
pandas/,239,"GH4604, automatic casting here",
pandas/,278,GH 13896,
pandas/,36,ufunc,
pandas/,40,aggregator,
pandas/,47,want this,
pandas/,49,invalid axis,
pandas/,55,GH 9573,
pandas/,64,mixed datetimelike,
pandas/,65,GH 7778,
pandas/,76,empty,
pandas/,95,GH 2476,
pandas/,101,reduce with an empty DataFrame,
pandas/,118,Ensure that x.append hasn't been called,
pandas/,123,GH 28213,
pandas/,131,GH 28213,
pandas/,170,scalars,
pandas/,180,lists,
pandas/,206,preserve columns,
pandas/,223,> 1 ndim,
pandas/,232,cannot broadcast,
pandas/,257,no reduction,
pandas/,262,Mixed dtype (GH-32423),
pandas/,281,"the result here is actually kind of ambiguous, should it be a Series",
pandas/,282,or a DataFrame?,
pandas/,361,GH 25196,
pandas/,448,GH 6125,
pandas/,540,non-reductions,
pandas/,567,GH 8735,
pandas/,590,GH 465: function returning tuples,
pandas/,594,GH 2909: object conversion to float in constructor?,
pandas/,603,GH 2786,
pandas/,614,datetime/timedelta,
pandas/,621,GH 8222,
pandas/,634,"GH 2689, GH 2627",
pandas/,640,it works!,
pandas/,644,ufunc will not be boxed. Same test cases as the test_map_box,
pandas/,682,GH 12244,
pandas/,700,GH 21063,
pandas/,708,GH 13820,
pandas/,720,https://github.com/pandas-dev/pandas/issues/31505,
pandas/,729,the user has supplied an opaque UDF where,
pandas/,730,they are transforming the input that requires,
pandas/,731,us to infer the output,
pandas/,734,GH 17437,
pandas/,735,"if row shape is changing, infer it",
pandas/,744,GH 17602,
pandas/,757,compose a series,
pandas/,762,GH 18775,
pandas/,774,GH 17602,
pandas/,792,GH 17348,
pandas/,809,GH 18919,
pandas/,820,GH 18573,
pandas/,837,GH 16353,
pandas/,849,GH 17970,
pandas/,860,GH 17892,
pandas/,883,we want column names to NOT be propagated,
pandas/,884,just because the shape matches the input shape,
pandas/,896,"if a Series is returned, we should use the resulting index names",
pandas/,912,result_type should be consistent no matter which,
pandas/,913,path we take in the code,
pandas/,926,broadcast result,
pandas/,938,series result,
pandas/,943,series result with other index,
pandas/,952,allowed result_type,
pandas/,968,passing an array or list should not affect the output shape,
pandas/,1008,ufunc,
pandas/,1019,list-like,
pandas/,1035,multiple items in list,
pandas/,1036,these are in the order as if we are applying both,
pandas/,1037,functions per series and then concatting,
pandas/,1054,cannot both transform and agg,
pandas/,1076,GH 19760,
pandas/,1083,demonstration tests,
pandas/,1101,GH 20909,
pandas/,1119,sorted index,
pandas/,1128,"For backwards compatibility, the result's index is",
pandas/,1129,"still sorted by function name, so it's ['min', 'sum']",
pandas/,1130,"not ['sum', 'min'].",
pandas/,1138,nested renaming,
pandas/,1147,all reducers,
pandas/,1162,dict input with scalars,
pandas/,1174,dict input with lists,
pandas/,1190,dict input with lists with multiple,
pandas/,1224,GH 15015,
pandas/,1258,GH 16405,
pandas/,1259,'size' is a property of frame/series,
pandas/,1260,validate that this is working,
pandas/,1265,Function aggregate,
pandas/,1271,Non-function aggregate,
pandas/,1277,Mix function and non-function aggs,
pandas/,1293,Just functional string arg is same as calling df.arg(),
pandas/,1299,Just a string attribute arg same as calling df.arg,
pandas/,1306,GH-29587 user defined function returning list-likes,
pandas/,1358,GH 21224,
pandas/,1359,test reducing functions in,
pandas/,1360,pandas.core.base.SelectionMixin._cython_table,
pandas/,1380,GH 21224,
pandas/,1381,test transforming functions in,
pandas/,1382,"pandas.core.base.SelectionMixin._cython_table (cumprod, cumsum)",
pandas/,1384,operating blockwise doesn't let us preserve dtypes,
pandas/,1397,GH 21224,
pandas/,1404,GH 22150,
pandas/,1412,GH 29052,
pandas/,1428,GH 16832,
pandas/,31,"two columns, homogenous",
pandas/,38,"three columns, heterogeneous",
pandas/,84,different timezones convert to UTC,
pandas/,86,frame with frame,
pandas/,92,frame with Series,
pandas/,103,after GH#7822,
pandas/,104,these retain the timezones on dict construction,
pandas/,111,GH#2810 (with timezones),
pandas/,141,GH 19970,
pandas/,153,GH 6326,
pandas/,164,GH 25843,
pandas/,12,These are specific reindex-based tests; other indexing tests should go in,
pandas/,13,test_indexing,
pandas/,16,GH 9455,
pandas/,18,first dataframe,
pandas/,21,second dataframe,
pandas/,25,merge,
pandas/,32,"join, see discussion in GH 12219",
pandas/,59,Cython code should be unit-tested directly,
pandas/,75,corner cases,
pandas/,77,"Same index, copies values but not index if copy=False",
pandas/,81,length zero,
pandas/,86,length zero with columns reindexed with non-empty index,
pandas/,92,pass non-Index,
pandas/,96,copy with no axes,
pandas/,114,GH10388,
pandas/,165,Length zero,
pandas/,171,"GH 14992, reindexing over columns ignored method",
pandas/,179,default method,
pandas/,193,method='ffill',
pandas/,207,method='bfill',
pandas/,222,"GH 3317, reindexing by both axes loses freq of the index",
pandas/,240,axis=0,
pandas/,248,axis=1,
pandas/,264,other dtypes,
pandas/,272,"GH4746, reindex on duplicate index error messages",
pandas/,276,set index is ok,
pandas/,282,reindex fails,
pandas/,288,https://github.com/pandas-dev/pandas/issues/12392,
pandas/,303,https://github.com/pandas-dev/pandas/issues/12392,
pandas/,312,https://github.com/pandas-dev/pandas/issues/12392,
pandas/,335,Mixing styles,
pandas/,342,Duplicates,
pandas/,347,https://github.com/pandas-dev/pandas/issues/12392,
pandas/,354,https://github.com/pandas-dev/pandas/issues/12392,
pandas/,355,equivalence of the labels/axis and index/columns API's,
pandas/,385,GH #910,
pandas/,424,ints are weird,
pandas/,477,https://github.com/pandas-dev/pandas/issues/21390,
pandas/,496,GH 30484,
pandas/,508,Perform operation and check result,
pandas/,14,GH 2759,
pandas/,25,GH 12467,
pandas/,26,combining datetime tz-aware and naive DataFrames,
pandas/,60,GH 22796,
pandas/,61,Concating tz-aware multicolumn DataFrames,
pandas/,75,GH 22796,
pandas/,86,GH 14438,
pandas/,111,GH 14252,
pandas/,135,GH 14369,
pandas/,139,Index/row/0 DataFrame,
pandas/,151,Columns/1 DataFrame,
pandas/,165,Index/row/0 Series,
pandas/,177,Columns/1 Series,
pandas/,188,Testing ValueError,
pandas/,193,#15262  # #12223,
pandas/,214,gh 23049,
pandas/,225,#2624,
pandas/,235,it works!,
pandas/,80,left / right,
pandas/,98,inner,
pandas/,104,outer,
pandas/,113,corner case - overlapping columns,
pandas/,143,TODO should this check_names ?,
pandas/,162,column order not necessarily sorted,
pandas/,182,https://github.com/pandas-dev/pandas/issues/19607,
pandas/,237,GH 10741,
pandas/,273,these must be the same results (but columns are flipped),
pandas/,23,empty,
pandas/,26,empty with index,
pandas/,33,mixed,
pandas/,39,big mixed,
pandas/,51,small one,
pandas/,55,even smaller,
pandas/,59,exhausting cases in DataFrame.info,
pandas/,61,columns but no index,
pandas/,65,no columns or index,
pandas/,86,big one,
pandas/,91,columns are not sortable,
pandas/,139,should not raise UnicodeDecodeError,
pandas/,142,GH 26447,
pandas/,153,#1906,
pandas/,187,GH 12182,
pandas/,191,normal DataFrame,
pandas/,213,GH 25445,
pandas/,219,it works!,
pandas/,33,name tracking,
pandas/,37,don't specify values,
pandas/,67,gh-3962,
pandas/,86,omit values,
pandas/,121,GH 18310,
pandas/,124,flat columns:,
pandas/,130,MultiIndex columns:,
pandas/,138,"as above, but used labels in level are actually of homogeneous type",
pandas/,145,GH #9746: fill_value keyword argument for Series,
pandas/,146,and DataFrame unstack,
pandas/,148,From a series,
pandas/,160,From a series with incorrect data type for fill_value,
pandas/,167,GH #13971: fill_value when unstacking multiple levels:,
pandas/,179,Workaround for GH #17886 (unnecessarily casts to float):,
pandas/,184,From a series,
pandas/,192,From a dataframe,
pandas/,208,From a mixed type dataframe,
pandas/,217,From a dataframe with incorrect data type for fill_value,
pandas/,229,Test unstacking with date times,
pandas/,252,Test unstacking with time deltas,
pandas/,275,Test unstacking with period,
pandas/,306,Test unstacking with categorical,
pandas/,312,By default missing values will be NaN,
pandas/,323,Fill with non-category results in a TypeError,
pandas/,328,Fill with category value replaces missing values as expected,
pandas/,340,GH 19966,
pandas/,401,GH 19966,
pandas/,414,Checks fix for #11847,
pandas/,486,GH #8584: Need to check that stacking works when a number,
pandas/,487,is passed that is both a level name and in the range of,
pandas/,488,the level numbers,
pandas/,498,When mixed types are passed and the ints are not level,
pandas/,499,"names, raise",
pandas/,507,GH #8584: Having 0 in the level names could raise a,
pandas/,508,strange error about lexsort depth,
pandas/,543,Out-of-order int column names,
pandas/,571,GH9856,
pandas/,597,check reversibility,
pandas/,604,check NA handling,
pandas/,617,check composability of unstack,
pandas/,625,GH 2929,
pandas/,633,single dtype,
pandas/,645,mixed,
pandas/,668,GH7405,
pandas/,706,GH 17845: unused codes in index make unstack() cast int to float,
pandas/,716,Unused items on both levels,
pandas/,729,With mixed dtype and NaN,
pandas/,752,GH 18562 : unused codes on the unstacked level,
pandas/,769,PH 32624: Error when using a lot of indices to unstack.,
pandas/,770,"The error occurred only, if a lot of indices are used.",
pandas/,791,PH 24729: Unstack a df with multi level columns,
pandas/,804,PH 28306: Unstack df with multi level cols and rows,
pandas/,822,GH7466,
pandas/,908,GH7403,
pandas/,952,GH7401,
pandas/,975,GH4862,
pandas/,1015,GH9497 - multiple unstack with nulls,
pandas/,1038,GH 8039,
pandas/,1049,GH 8844,
pandas/,1059,"Stacking a single level should not make any all-NaN rows,",
pandas/,1060,"so df.stack(level=level, dropna=False) should be the same",
pandas/,1061,"as df.stack(level=level, dropna=True).",
pandas/,1117,GH13854,
pandas/,1122,`MultiIndex.from_product` preserves categorical dtype -,
pandas/,1123,it's tested elsewhere.,
pandas/,1130,GH-23077,
pandas/,1149,GH-28301,
pandas/,1185,GH 20994,
pandas/,1203,GH12815 Test unstacking with object.,
pandas/,1209,By default missing values will be NaN,
pandas/,1216,Fill with any value replaces missing values as expected,
pandas/,1225,GH 18338,
pandas/,1249,GH 19420,
pandas/,1265,see gh-30740,
pandas/,74,same but for empty slice of df,
pandas/,100,GH6525,
pandas/,123,"compat, GH 8722",
pandas/,156,mixed casting,
pandas/,164,mixed casting,
pandas/,184,to object,
pandas/,207,this is the only real reason to do it this way,
pandas/,211,TODO(wesm): verification?,
pandas/,213,noqa,
pandas/,220,noqa,
pandas/,225,see gh-14265,
pandas/,226,,
pandas/,227,Check NaN and inf --> raise error when converting to int.,
pandas/,235,see gh-9757,
pandas/,244,Datetime-like,
pandas/,260,see gh-11302,
pandas/,267,< 1.14 truncates,
pandas/,268,>= 1.14 preserves the full repr,
pandas/,275,GH7271 & GH16717,
pandas/,283,change type of a subset of columns,
pandas/,310,change all columns,
pandas/,315,error should be raised when using something other than column labels,
pandas/,316,in the keys of the dtype dict,
pandas/,326,"if the dtypes provided are the same as the original dtypes, the",
pandas/,327,resulting DataFrame should be the same as the original DataFrame,
pandas/,333,GH 16717,
pandas/,334,"if dtypes provided is empty, the resulting DataFrame",
pandas/,335,should be the same as the original DataFrame,
pandas/,372,GH 18099,
pandas/,390,GH29521,
pandas/,400,GH 22578,
pandas/,425,GH 22578,
pandas/,442,GH 24704,
pandas/,455,GH 19920,
pandas/,464,tests astype to object dtype,
pandas/,465,gh-19223 / gh-12425,
pandas/,481,tests all units from numeric origination,
pandas/,482,gh-19223 / gh-12425,
pandas/,493,tests all units from datetime origination,
pandas/,494,gh-19223,
pandas/,505,preserver the timedelta conversion,
pandas/,506,gh-19223,
pandas/,517,coerce to float,
pandas/,518,gh-19223,
pandas/,529,"trying to astype a m to a M, or vice-versa",
pandas/,530,gh-19224,
pandas/,575,mixed int types,
pandas/,590,issue #14878,
pandas/,604,GH-25905,
pandas/,634,GH 16605,
pandas/,635,Ensure that data elements are converted to strings when,
pandas/,636,"dtype is str, 'str', or 'U'",
pandas/,651,empty,
pandas/,653,multi-same,
pandas/,655,multi-object,
pandas/,665,multi-extension,
pandas/,672,differ types,
pandas/,674,differ sizes,
pandas/,684,multi-extension differ,
pandas/,699,may change from object in the future,
pandas/,704,GH 20388,
pandas/,710,change the dtype of the elements from object to float one by one,
pandas/,719,Specific types are tested in tests/series/test_dtypes.py,
pandas/,720,Just check that it works for DataFrame here,
pandas/,740,interleave with object,
pandas/,765,interleave with only datetime64[ns],
pandas/,790,astype,
pandas/,841,str formatting,
pandas/,16,-------------------------------------------------------------------,
pandas/,17,Comparisons,
pandas/,21,Specifically _not_ flex-comparisons,
pandas/,24,"GH#12689 this should raise at the DataFrame level, not blocks",
pandas/,34,we expect the result to match Series comparisons for,
pandas/,35,"== and !=, inequalities should raise",
pandas/,64,GH4968,
pandas/,65,invalid date/int comparisons,
pandas/,83,make sure we can compare Timestamps on the right AND left hand side,
pandas/,84,GH#4982,
pandas/,101,no nats,
pandas/,115,nats,
pandas/,121,"GH#13128, GH#22163 != datetime64 vs non-dt64 should be False,",
pandas/,122,not raise TypeError,
pandas/,123,"(this appears to be fixed before GH#22163, not sure when)",
pandas/,134,"GH#4576, GH#22880",
pandas/,135,comparing DataFrame against list/tuple with len(obj) matching,
pandas/,136,len(df.columns) is supported as of GH#22800,
pandas/,167,TODO: test_bool_flex_frame needs a better name,
pandas/,175,Unaligned,
pandas/,182,DataFrame,
pandas/,188,No NAs,
pandas/,191,ndarray,
pandas/,193,scalar,
pandas/,195,NAs,
pandas/,201,Series,
pandas/,238,list/tuple,
pandas/,241,NA,
pandas/,257,complex,
pandas/,266,PY35,
pandas/,270,inequalities are not well-defined for complex numbers,
pandas/,273,regression test that we get the same behavior for Series,
pandas/,276,Check that we match numpy behavior here,
pandas/,286,inequalities are not well-defined for complex numbers,
pandas/,289,regression test that we get the same behavior for Series,
pandas/,292,Check that we match numpy behavior here,
pandas/,296,"corner, dtype=object",
pandas/,304,"GH 15697, GH 22163 df.eq(pd.NaT) should behave like df == pd.NaT,",
pandas/,305,and _definitely_ not be NaN,
pandas/,309,"result.iloc[0, 0] is a np.bool_ object",
pandas/,323,"GH 15077, non-empty DataFrame",
pandas/,332,GH 15077 empty DataFrame,
pandas/,341,-------------------------------------------------------------------,
pandas/,342,Arithmetic,
pandas/,347,"make sure we df.floordiv(ser, axis=0) matches column-wise result",
pandas/,364,case that goes through numexpr and has to fall back to masked_arith_op,
pandas/,381,GH 22534 Check that column-wise addition broadcasts correctly,
pandas/,392,GH 19611,
pandas/,413,one instance of parametrized fixture,
pandas/,417,"r-versions not in operator-stdlib; get op without ""r"" and invert",
pandas/,426,vs mix float,
pandas/,438,vs mix int,
pandas/,442,no overflow in the uint,
pandas/,451,vs mix float,
pandas/,457,vs plain int,
pandas/,463,one instance of parametrized fixture,
pandas/,466,Check that arrays with dim >= 3 raise,
pandas/,478,corner cases,
pandas/,496,"after arithmetic refactor, add truediv here",
pandas/,504,special case for some reason,
pandas/,507,cases which will be refactored after big arithmetic refactor,
pandas/,511,broadcasting issue in GH 7325,
pandas/,523,GH 19522 passing fill_value to frame flex arith methods should,
pandas/,524,raise even in the zero-length special cases,
pandas/,536,GH#12723,
pandas/,547,Make sure we don't accidentally treat timedelta64(NaT) as datetime64,
pandas/,548,when calling dispatch_to_series in DataFrame arithmetic,
pandas/,557,GH#23000,
pandas/,561,"shape --> (1, ncols)",
pandas/,568,specify dtype explicitly to avoid failing,
pandas/,569,on 32bit builds,
pandas/,578,GH#23000,
pandas/,582,"shape --> (nrows, 1)",
pandas/,589,specify dtype explicitly to avoid failing,
pandas/,590,on 32bit builds,
pandas/,599,GH#23000,
pandas/,605,"shape --> (1, ncols)",
pandas/,617,"exvals will have dtypes [f8, i8, i8] so expected will be",
pandas/,618,"all-f8, but the DataFrame operation will return mixed dtypes",
pandas/,619,"use exvals[-1].dtype instead of ""i8"" for compat with 32-bit",
pandas/,620,systems/pythons,
pandas/,627,GH#23000,
pandas/,633,"shape --> (nrows, 1)",
pandas/,643,Series ops may return mixed int/float dtypes in cases where,
pandas/,644,DataFrame op will return all-float.  So we upcast `expected`,
pandas/,653,"GH 22047, GH 22163 multiplication by 1 should result in int dtype,",
pandas/,654,not object dtype,
pandas/,658,"On appveyor this comes back as np.int32 instead of np.int64,",
pandas/,659,so we check dtype.kind instead of just dtype,
pandas/,710,GH#17901,
pandas/,743,GH#27415,
pandas/,754,GH#31623,
pandas/,774,GH#28600,
pandas/,775,easy all-float case,
pandas/,787,non-float case should not raise on comparison,
pandas/,795,GH#28600,
pandas/,805,GH 13758,
pandas/,815,-------------------------------------------------------------------,
pandas/,816,Unsorted,
pandas/,817,"These arithmetic tests were previously in other files, eventually",
pandas/,818,should be parametrized and put into tests.arithmetic,
pandas/,854,"since filling converts dtypes from object, changed expected to be",
pandas/,855,object,
pandas/,874,TODO: not sure what's correct here.,
pandas/,877,we are comparing floats vs a string,
pandas/,883,test aligning binary ops,
pandas/,885,GH 6681,
pandas/,921,GH9463 (alignment level of dataframe with series),
pandas/,932,different cases of integer/string level names:,
pandas/,979,assert(False),
pandas/,990,corner cases,
pandas/,992,empty,
pandas/,1002,out of order,
pandas/,1007,"mix vs float64, upcast",
pandas/,1013,mix vs mix,
pandas/,1017,with int,
pandas/,1025,Series,
pandas/,1043,no upcast needed,
pandas/,1047,vs mix (upcast) as needed,
pandas/,1053,FIXME: don't leave commented-out,
pandas/,1054,these raise with numexpr.....as we are adding an int64 to an,
pandas/,1055,uint64....weird vs int,
pandas/,1057,added = mixed_int_frame + (100*series).astype('int64'),
pandas/,1058,"_check_mixed_int(added, dtype = dict(A = 'int64', B = 'float64', C =",
pandas/,1059,"'int64', D = 'int64'))",
pandas/,1060,added = mixed_int_frame + (100*series).astype('int32'),
pandas/,1061,"_check_mixed_int(added, dtype = dict(A = 'int32', B = 'float64', C =",
pandas/,1062,"'int32', D = 'int64'))",
pandas/,1064,TimeSeries,
pandas/,1067,10890,
pandas/,1068,we no longer allow auto timeseries broadcasting,
pandas/,1069,and require explicit broadcasting,
pandas/,1090,"length 0, result is all-nan",
pandas/,1097,Frame is all-nan,
pandas/,1104,empty but with non-empty index,
pandas/,1113,vs mix,
pandas/,1161,GH 11565,
pandas/,1182,GH 4576,
pandas/,1183,boolean comparisons with a tuple/list give unexpected results,
pandas/,1191,gt,
pandas/,1203,wrong shape,
pandas/,1207,wrong shape,
pandas/,1210,broadcasts like ndarray (GH#23000),
pandas/,1223,==,
pandas/,1234,broadcasts like ndarray (GH#23000),
pandas/,1246,with alignment,
pandas/,1261,inplace ops / ops alignment,
pandas/,1262,GH 8511,
pandas/,1274,add,
pandas/,1291,sub,
pandas/,1310,GH 5104,
pandas/,1311,make sure that we are actually changing the object,
pandas/,1315,no dtype change,
pandas/,1332,dtype change,
pandas/,1347,mixed dtype,
pandas/,1391,cannot use floats for boolean ops,
pandas/,1398,no id change and value is correct,
pandas/,1425,length mismatch,
pandas/,1445,shape mismatch,
pandas/,1471,GH#32685 pow has special semantics for operating with null values,
pandas/,1480,TODO: move to tests.arithmetic and parametrize,
pandas/,17,---------------------------------------------------------------------,
pandas/,18,"Cumulative Operations - cumsum, cummax, ...",
pandas/,22,TODO(wesm): do something with this?,
pandas/,23,noqa,
pandas/,30,axis = 0,
pandas/,35,axis = 1,
pandas/,40,works,
pandas/,44,fix issue,
pandas/,53,axis = 0,
pandas/,58,axis = 1,
pandas/,63,fix issue,
pandas/,67,ints,
pandas/,72,ints32,
pandas/,87,axis = 0,
pandas/,92,axis = 1,
pandas/,97,it works,
pandas/,101,fix issue,
pandas/,115,axis = 0,
pandas/,120,axis = 1,
pandas/,125,it works,
pandas/,129,fix issue,
pandas/,134,GH#19296 dont incorrectly upcast to object,
pandas/,2,float16 are most likely to be upcasted to float32,
pandas/,30,index level,
pandas/,31,list of index level,
pandas/,32,column,
pandas/,33,list of column,
pandas/,34,two index levels,
pandas/,35,index level and column,
pandas/,36,Two columns,
pandas/,37,two index levels and column,
pandas/,51,GH 14353,
pandas/,53,Get index levels from df_idx,
pandas/,56,Compute expected by sorting on columns and the setting index,
pandas/,61,Compute result sorting on mix on columns and index levels,
pandas/,69,GH 14353,
pandas/,71,Get levels from df_idx,
pandas/,74,"Compute expected by sorting on axis=0, setting index levels, and then",
pandas/,75,transposing. For some cases this will result in a frame with,
pandas/,76,multiple column levels,
pandas/,83,Compute result by transposing and sorting on axis=1.,
pandas/,87,Accessing multi-level columns that are not lexsorted raises a,
pandas/,88,performance warning,
pandas/,23,Segregated collection of methods that require the BlockManager internal data,
pandas/,24,structure,
pandas/,29,GH#24096 altering a datetime64tz column inplace invalidates the,
pandas/,30,`freq` attribute on the underlying DatetimeIndex,
pandas/,41,check that the DatetimeIndex was not altered in place,
pandas/,59,"Ensure copy, do I want this?",
pandas/,71,noqa,
pandas/,73,triggers in-place consolidation,
pandas/,80,noqa,
pandas/,87,unconsolidated,
pandas/,109,mixed lcd,
pandas/,119,GH 10364,
pandas/,120,B uint64 forces float because there are other signed int types,
pandas/,127,B uint64 forces float because there are other signed int types,
pandas/,131,"as B and C are both unsigned, no forcing to float is needed",
pandas/,148,this is actually mostly a test of lib.maybe_convert_objects,
pandas/,149,#2845,
pandas/,215,test construction edge cases with mixed types,
pandas/,217,"f7u12, this does not work without extensive workaround",
pandas/,224,check dtypes,
pandas/,228,mixed-type frames,
pandas/,247,convert from a numpy array of non-ns timedelta64,
pandas/,260,"'dt3' : date_range('20130101 00:00:01',periods=3,freq='s'),",
pandas/,271,"df['dt3'] = np.array(['2013-01-01 00:00:01','2013-01-01",
pandas/,272,"00:00:02','2013-01-01 00:00:03'],dtype='datetime64[s]')",
pandas/,277,GH 5191,
pandas/,278,compound dtypes should raise not-implementederror,
pandas/,288,these work (though results may be unexpected),
pandas/,292,10822,
pandas/,293,invalid error message on dt inference,
pandas/,298,GH 9330,
pandas/,301,this assert verifies that the above operations have,
pandas/,302,induced a block rearrangement,
pandas/,305,do the real tests,
pandas/,311,API/ENH 9607,
pandas/,315,"use the default copy=True, change a column",
pandas/,321,make sure we did not change the original DataFrame,
pandas/,325,API/ENH 9607,
pandas/,329,"use the copy=False, change a column",
pandas/,335,make sure we did change the original DataFrame,
pandas/,343,copy objects,
pandas/,353,buglet,
pandas/,356,empty,
pandas/,360,tz frame,
pandas/,365,numpy vstack bug,
pandas/,453,GH 22290,
pandas/,473,force numeric conversion,
pandas/,477,add in some items that will be nan,
pandas/,490,via astype,
pandas/,497,"via astype, but errors",
pandas/,502,mixed in a single column,
pandas/,514,GH 11221,
pandas/,545,reconstruct frame to verify inference is same,
pandas/,550,"this is chained, but ok",
pandas/,561,noqa,
pandas/,562,noqa,
pandas/,566,numeric and object columns,
pandas/,581,FIXME: dont leave commented-out,
pandas/,582,(wesm) Unclear how exactly this is related to internal matters,
pandas/,601,Ensure that PandasArray isn't allowed inside Series,
pandas/,602,See https://github.com/pandas-dev/pandas/issues/23995 for more.,
pandas/,610,GH 26390,
pandas/,23,mixed-type xs,
pandas/,36,xs get column,
pandas/,41,view is returned if possible,
pandas/,47,pathological mixed-type reordering case,
pandas/,59,no columns but Index(dtype=object),
pandas/,89,"in 0.14 this will return a view if possible a copy otherwise, but",
pandas/,90,this is numpy dependent,
pandas/,27,"A still in the levels, BUT get a KeyError if trying",
pandas/,28,to delete,
pandas/,33,behavior of dropped/deleted MultiIndex levels changed from,
pandas/,34,GH 2770 to GH 19027: MultiIndex no longer '.__contains__',
pandas/,35,levels which are dropped/deleted,
pandas/,26,only add to the numeric items,
pandas/,46,dtypes,
pandas/,50,check getting,
pandas/,61,upcasting case (GH # 2794),
pandas/,80,when we don't preserve boolean casts,
pandas/,81,,
pandas/,82,"expected = Series({ 'float32' : 1, 'float64' : 3 })",
pandas/,87,aligning,
pandas/,106,since we can't always have the correct numpy dtype,
pandas/,107,"as numpy doesn't know how to downcast, don't check",
pandas/,110,dtypes,
pandas/,111,can't check dtype when other is an ndarray,
pandas/,123,other is a frame,
pandas/,127,check other is ndarray,
pandas/,131,"integers are upcast, so don't check the dtypes",
pandas/,137,invalid conditions,
pandas/,158,where inplace,
pandas/,168,dtypes (and confirm upcasts)x,
pandas/,188,aligning,
pandas/,193,GH 10218,
pandas/,194,test DataFrame.where with Series slicing,
pandas/,202,see gh-15414,
pandas/,228,see gh-15414: only boolean arrays accepted,
pandas/,250,see gh-15414: only boolean arrays accepted,
pandas/,265,"this *does* align, though has no matching columns",
pandas/,294,see gh-2793,
pandas/,310,see gh-2793,
pandas/,331,see gh-7506,
pandas/,354,GH 3311,
pandas/,376,GH 4667,
pandas/,377,setting with None changes dtype,
pandas/,385,GH 7656,
pandas/,398,see gh-21947,
pandas/,414,series,
pandas/,430,frame,
pandas/,439,GH 6345,
pandas/,446,GH 9736,
pandas/,467,Upcast needed,
pandas/,494,Multiple dtypes (=> multiple Blocks),
pandas/,527,DataFrame vs DataFrame,
pandas/,559,GH 12533,
pandas/,566,return ndarray and scalar,
pandas/,572,chain,
pandas/,596,GH#16979,
pandas/,609,GH#16979,
pandas/,613,change type to category,
pandas/,626,Check Series.where while we're here,
pandas/,13,assignment,
pandas/,50,sorting,
pandas/,58,systematically test the assigning operations:,
pandas/,59,for all slicing ops:,
pandas/,60,for value in categories and value not in categories:,
pandas/,62,- assign a single value -> exp_single_cats_value,
pandas/,64,- assign a complete row (mixed values) -> exp_single_row,
pandas/,66,assign multiple rows (mixed values) (-> array) -> exp_multi_row,
pandas/,68,assign a part of a column with dtype == categorical ->,
pandas/,69,exp_parts_cats_col,
pandas/,71,assign a part of a column with dtype != categorical ->,
pandas/,72,exp_parts_cats_col,
pandas/,79,the expected values,
pandas/,80,changed single row,
pandas/,86,changed multiple rows,
pandas/,92,changed part of the cats column,
pandas/,98,changed single value in cats col,
pandas/,106,iloc,
pandas/,107,,
pandas/,108,- assign a single value -> exp_single_cats_value,
pandas/,117,- assign a single value not in the current categories set,
pandas/,127,- assign a complete row (mixed values) -> exp_single_row,
pandas/,132,- assign a complete row (mixed values) not in categories set,
pandas/,137,- assign multiple rows (mixed values) -> exp_multi_row,
pandas/,146,assign a part of a column with dtype == categorical ->,
pandas/,147,exp_parts_cats_col,
pandas/,153,different categories -> not sure if this should fail or pass,
pandas/,158,different values,
pandas/,162,assign a part of a column with dtype != categorical ->,
pandas/,163,exp_parts_cats_col,
pandas/,171,loc,
pandas/,172,,
pandas/,173,- assign a single value -> exp_single_cats_value,
pandas/,182,- assign a single value not in the current categories set,
pandas/,187,- assign a complete row (mixed values) -> exp_single_row,
pandas/,192,- assign a complete row (mixed values) not in categories set,
pandas/,197,- assign multiple rows (mixed values) -> exp_multi_row,
pandas/,206,assign a part of a column with dtype == categorical ->,
pandas/,207,exp_parts_cats_col,
pandas/,213,different categories -> not sure if this should fail or pass,
pandas/,220,different values,
pandas/,226,assign a part of a column with dtype != categorical ->,
pandas/,227,exp_parts_cats_col,
pandas/,235,loc,
pandas/,236,,
pandas/,237,- assign a single value -> exp_single_cats_value,
pandas/,246,- assign a single value not in the current categories set,
pandas/,251,- assign a complete row (mixed values) -> exp_single_row,
pandas/,256,- assign a complete row (mixed values) not in categories set,
pandas/,261,- assign multiple rows (mixed values) -> exp_multi_row,
pandas/,270,assign a part of a column with dtype == categorical ->,
pandas/,271,exp_parts_cats_col,
pandas/,277,different categories -> not sure if this should fail or pass,
pandas/,284,different values,
pandas/,290,assign a part of a column with dtype != categorical ->,
pandas/,291,exp_parts_cats_col,
pandas/,299,iat,
pandas/,304,- assign a single value not in the current categories set,
pandas/,309,at,
pandas/,310,- assign a single value -> exp_single_cats_value,
pandas/,315,- assign a single value not in the current categories set,
pandas/,320,fancy indexing,
pandas/,332,category c is kept in .categories,
pandas/,335,set_value,
pandas/,344,Assigning a Category to parts of a int/... column uses the values of,
pandas/,345,the Categorical,
pandas/,361,GH 25495,
pandas/,371,GH 15166,
pandas/,8,homogeneous,
pandas/,16,axis = 1,
pandas/,21,negative indices,
pandas/,32,axis = 1,
pandas/,37,illegal indices,
pandas/,50,mixed-dtype,
pandas/,58,axis = 1,
pandas/,63,negative indices,
pandas/,71,axis = 1,
pandas/,77,by dtype,
pandas/,85,axis = 1,
pandas/,35,preserve columns name field,
pandas/,41,"GH#4032, inserting a column and renaming causing errors",
pandas/,60,GH#14291,
pandas/,12,GH 7432,
pandas/,26,"GH 4107, more descriptive error message",
pandas/,34,from the vb_suite/frame_methods/frame_insert_columns,
pandas/,51,diff dtype,
pandas/,53,new item,
pandas/,62,replacing current (in different block),
pandas/,80,GH 13522,
pandas/,95,GH#19843,
pandas/,105,GH#29523,
pandas/,114,GH#8131,
pandas/,30,We pass through a TypeError raised by numpy,
pandas/,36,Slicing,
pandas/,40,Column access,
pandas/,78,GH#10583,
pandas/,99,GH 21294,
pandas/,104,MultiIndex columns,
pandas/,133,see gh-19399,
pandas/,141,GH 12533,
pandas/,247,GH 29334,
pandas/,253,"GH7655, test that assigning to a sub-frame of a frame",
pandas/,254,with multi-index columns aligns both rows and columns,
pandas/,277,GH 12533,
pandas/,285,GH 13299,
pandas/,298,boolean indexing,
pandas/,316,test that Series work,
pandas/,322,test that Series indexers reindex,
pandas/,323,we are producing a warning that since the passed boolean,
pandas/,324,"key is not the same as the given index, we will reindex",
pandas/,325,not sure this is really necessary,
pandas/,331,test df[df > 0],
pandas/,349,add back other columns to compare,
pandas/,362,don't upcast if we don't need to,
pandas/,381,int block splitting,
pandas/,418,#2096,
pandas/,421,both of these should succeed trivially,
pandas/,440,11320,
pandas/,470,not sure what else to do here,
pandas/,486,set ndarray,
pandas/,500,this is partially a view (e.g. some blocks are view),
pandas/,501,so raise/warn,
pandas/,511,dtype changing GH4204,
pandas/,549,test that column reindexing works,
pandas/,564,a df that needs alignment first,
pandas/,569,indexed with same shape but rows-reversed df,
pandas/,578,index with DataFrame,
pandas/,585,set from DataFrame,
pandas/,598,Test for issue #18582,
pandas/,602,index with boolean mask,
pandas/,614,"#669, should not cast?",
pandas/,615,"this is now set to int64, which means a replacement of the column to",
pandas/,616,the value dtype (and nothing to do with the existing dtype),
pandas/,620,cast if pass array of course,
pandas/,639,GH 7704,
pandas/,640,dtype conversion on setting,
pandas/,651,Test that data type is preserved . #5782,
pandas/,668,GH#2155,
pandas/,673,"works, mostly a smoke-test",
pandas/,677,corner case,
pandas/,690,what to do when empty frame with index,
pandas/,697,upcast,
pandas/,704,set existing column,
pandas/,734,Difficulties with mixed-type data,
pandas/,737,Created as float type,
pandas/,754,see gh-304,
pandas/,760,cache it,
pandas/,770,GH #766,
pandas/,782,GH 9596,
pandas/,794,see gh-10126,
pandas/,803,GH #17101,
pandas/,811,GH16823 / 17894,
pandas/,818,Test for issue #11859,
pandas/,840,this is OK,
pandas/,841,noqa,
pandas/,848,this is OK,
pandas/,853,so is this,
pandas/,865,"non-monotonic, raise KeyError",
pandas/,876,get view with single block,
pandas/,877,setting it triggers setting with copy,
pandas/,887,GH#31469,
pandas/,921,FIXME: dont leave commented-out,
pandas/,933,individual value,
pandas/,944,individual value,
pandas/,946,noqa,
pandas/,979,"from 2d, set with booleans",
pandas/,1009,"GH#32257 we let numpy do validation, get their exception",
pandas/,1013,boolean index misaligned labels,
pandas/,1029,get,
pandas/,1051,reindex with int,
pandas/,1056,reindex with float,
pandas/,1060,loc_float changes this to work properly,
pandas/,1069,#2727,
pandas/,1073,positional slicing only via iloc!,
pandas/,1092,noqa,
pandas/,1102,float slicing,
pandas/,1148,check our dtypes,
pandas/,1156,GH#16674 iNaT is treated as an integer when given by the user,
pandas/,1162,allow this syntax,
pandas/,1166,allow this syntax,
pandas/,1170,FIXME: don't leave commented-out,
pandas/,1171,as of GH 3216 this will now work!,
pandas/,1172,try to set with a list like item,
pandas/,1173,pytest.raises(,
pandas/,1174,"Exception, df.loc.__setitem__, ('d', 'timestamp'), [np.nan])",
pandas/,1177,GH 9336,
pandas/,1213,GH 3216,
pandas/,1215,already aligned,
pandas/,1224,rows unaligned,
pandas/,1237,key is unaligned with values,
pandas/,1246,ndarray,
pandas/,1254,needs upcasting,
pandas/,1273,#1201,
pandas/,1289,#1201,
pandas/,1305,#2199,
pandas/,1320,#1943,
pandas/,1386,GH#33041 raise with a helpful error message,
pandas/,1392,homogeneous-dtype case,
pandas/,1398,heterogeneous dtype,
pandas/,1436,https://github.com/pandas-dev/pandas/issues/29896,
pandas/,1437,tests for reindexing a multi-indexed DataFrame with a new MultiIndex,
pandas/,1438,,
pandas/,1439,confirms that we can reindex a multi-indexed DataFrame with a new,
pandas/,1440,"MultiIndex object correctly when using no filling, backfilling, and",
pandas/,1441,padding,
pandas/,1442,,
pandas/,1443,"The DataFrame, `df`, used in this test is:",
pandas/,1444,c,
pandas/,1445,a b,
pandas/,1446,-1 0  A,
pandas/,1447,1  B,
pandas/,1448,2  C,
pandas/,1449,3  D,
pandas/,1450,4  E,
pandas/,1451,5  F,
pandas/,1452,6  G,
pandas/,1453,0 0  A,
pandas/,1454,1  B,
pandas/,1455,2  C,
pandas/,1456,3  D,
pandas/,1457,4  E,
pandas/,1458,5  F,
pandas/,1459,6  G,
pandas/,1460,1 0  A,
pandas/,1461,1  B,
pandas/,1462,2  C,
pandas/,1463,3  D,
pandas/,1464,4  E,
pandas/,1465,5  F,
pandas/,1466,6  G,
pandas/,1467,,
pandas/,1468,"and the other MultiIndex, `new_multi_index`, is:",
pandas/,1469,0: 0 0.5,
pandas/,1470,1:   2.0,
pandas/,1471,2:   5.0,
pandas/,1472,3:   5.8,
pandas/,1483,reindexing w/o a `method` value,
pandas/,1490,reindexing with backfilling,
pandas/,1500,reindexing with padding,
pandas/,1513,this is actually ambiguous as the 2 is interpreted as a positional,
pandas/,1514,so column is not created,
pandas/,1518,assert list(df.columns) == list(df_orig.columns) + [2],
pandas/,1523,assert list(df.columns) == list(df_orig.columns) + [2],
pandas/,1525,create both new,
pandas/,1537,partial w/ MultiIndex raise exception,
pandas/,1543,TODO: rename?  remove?,
pandas/,1551,GH 11617,
pandas/,1573,slice,
pandas/,1578,verify slice is view,
pandas/,1579,setting it makes it raise/warn,
pandas/,1588,list of integers,
pandas/,1605,slice,
pandas/,1610,verify slice is view,
pandas/,1611,and that we are setting a copy,
pandas/,1618,list of integers,
pandas/,1635,#2259,
pandas/,1642,gh-17105,
pandas/,1644,insert a duplicate element to the index,
pandas/,1655,assignment,
pandas/,1663,in-place,
pandas/,1717,GH26683,
pandas/,1727,https://github.com/pandas-dev/pandas/issues/31964,
pandas/,1746,GH 28631,
pandas/,1770,index is not monotonic increasing or decreasing,
pandas/,1824,reindex by these causes different MultiIndex levels,
pandas/,1848,this needs to be jointly unique with jim and joe or,
pandas/,1849,"reindexing will fail ~1.5% of the time, this works",
pandas/,1850,out to needing unique groups of same size as joe,
pandas/,1911,https://github.com/pandas-dev/pandas/issues/23559,
pandas/,1925,GH 12981,
pandas/,1926,Assignment of unaligned offset-aware datetime series.,
pandas/,1927,Make sure timezone isn't lost,
pandas/,1940,gh-1048,
pandas/,1949,GH 7592,
pandas/,1950,assignment of timedeltas with NaT,
pandas/,1972,GH 11365,
pandas/,2040,GH 20991,
pandas/,2102,mixed int/float ok,
pandas/,2119,See gh-12218,
pandas/,2146,GH 19977,
pandas/,2173,setitem,
pandas/,2182,"With NaN: because uint64 has no NaN element,",
pandas/,2183,the column should be cast to object.,
pandas/,2201,set/reset,
pandas/,2211,"GH#31649, check the indexing methods all the way down the stack",
pandas/,2239,we got the right block,
pandas/,2244,we got the right block,
pandas/,14,https://github.com/pandas-dev/pandas/issues/11754,
pandas/,26,see gh-5652,
pandas/,12,setitem,
pandas/,21,assert that A & C are not sharing the same base (e.g. they,
pandas/,22,are copies),
pandas/,28,with nan,
pandas/,40,set/reset,
pandas/,25,see GH#21891,
pandas/,33,GH#8801,
pandas/,49,GH#4071,
pandas/,56,GH#12533,
pandas/,63,return ndarray and scalar,
pandas/,69,chain,
pandas/,76,GH#3733,
pandas/,78,create nans,
pandas/,11,GH#4211,
pandas/,28,GH#16991,
pandas/,45,non unique columns,
pandas/,54,GH#4763,
pandas/,82,partial overlapping columns,
pandas/,89,GH#16394,
pandas/,97,just cols duped,
pandas/,103,just index duped,
pandas/,112,cols and index:,
pandas/,161,against regular index,
pandas/,175,GH#15473,
pandas/,11,GH#17198,
pandas/,32,test degenerate case,
pandas/,36,non-numeric exclusion,
pandas/,42,axis,
pandas/,54,We may want to break API in the future to change this,
pandas/,55,so that we exclude non-numeric along the same axis,
pandas/,56,See GH #7312,
pandas/,64,mixed on axis=1,
pandas/,77,must raise,
pandas/,83,GH 9543/9544,
pandas/,111,see gh-10174,
pandas/,113,interpolation method other than default linear,
pandas/,119,cross-check interpolation=nearest results in original dtype,
pandas/,126,float,
pandas/,140,axis,
pandas/,147,test degenerate case,
pandas/,152,multi,
pandas/,156,https://github.com/numpy/numpy/issues/7163,
pandas/,165,see gh-10174,
pandas/,167,interpolation = linear (default case),
pandas/,173,see gh-10174,
pandas/,176,interpolation = linear (default case),
pandas/,180,test with and without interpolation keyword,
pandas/,195,axis = 1,
pandas/,201,empty,
pandas/,211,exclude datetime,
pandas/,215,datetime,
pandas/,222,datetime w/ multi,
pandas/,229,axis = 1,
pandas/,247,empty when numeric_only=True,
pandas/,248,"FIXME (gives empty frame in 0.18.1, broken in 0.19.0)",
pandas/,249,"result = df[['a', 'c']].quantile(.5)",
pandas/,250,"result = df[['a', 'c']].quantile([.5])",
pandas/,306,DatetimeBlock may be consolidated and contain NaT in different loc,
pandas/,383,GH 14357 - float block where some cols have missing values,
pandas/,403,full-nan column,
pandas/,416,full NaT column,
pandas/,427,mixed non-null / full null column,
pandas/,451,floats,
pandas/,462,"FIXME (gives empty frame in 0.18.1, broken in 0.19.0)",
pandas/,463,"res = df.quantile(0.5, axis=1)",
pandas/,464,"res = df.quantile([0.5], axis=1)",
pandas/,466,ints,
pandas/,469,"FIXME (gives empty frame in 0.18.1, broken in 0.19.0)",
pandas/,470,res = df.quantile(0.5),
pandas/,472,datetimes,
pandas/,475,FIXME (gives NaNs instead of NaT in 0.18.1 or 0.19.0),
pandas/,476,"res = df.quantile(0.5, numeric_only=False)",
pandas/,479,GH#23925 _get_numeric_data may drop all columns,
pandas/,33,noqa:F401,
pandas/,56,integers,
pandas/,96,"f7u12, this does not work without extensive workaround",
pandas/,103,check the rank,
pandas/,117,GH#18521,
pandas/,118,Check rank does not mutate DataFrame,
pandas/,135,noqa:F401,
pandas/,143,bottom,
pandas/,155,top,
pandas/,170,descending,
pandas/,172,bottom,
pandas/,184,descending,
pandas/,186,top,
pandas/,201,bad values throw error,
pandas/,207,invalid type,
pandas/,212,check if using axes' names gives the same result,
pandas/,219,noqa:F401,
pandas/,315,see gh-15630.,
pandas/,326,GH 18271,
pandas/,17,by column (axis=0),
pandas/,31,GH4839,
pandas/,35,multiple bys,
pandas/,50,by row (axis=1): GH#10806,
pandas/,124,GH#9918,
pandas/,125,uint64 multicolumn sort,
pandas/,147,GH#3917,
pandas/,152,sort one column only,
pandas/,171,"na_position='last', order",
pandas/,179,"na_position='first', order",
pandas/,187,"na_position='first', not order",
pandas/,195,"na_position='last', not order",
pandas/,204,GH#6399,
pandas/,216,test stable mergesort,
pandas/,236,GH#16793,
pandas/,244,"GH#3461, argsort / lexsort differences for a datetime column",
pandas/,287,it works!,
pandas/,291,"GH#14922: ""sorting with large float and multiple columns incorrect""",
pandas/,293,"cause was that the int64 value NaT was considered as ""na"". Which is",
pandas/,294,only correct for datetime64 columns.,
pandas/,309,"NaT is not a ""na"" for int64 columns, so na_position must not",
pandas/,310,influence the result:,
pandas/,317,reverse sorting order,
pandas/,321,"and now check if NaT is still considered as ""na"" for datetime64",
pandas/,322,columns:,
pandas/,340,Ascending should not affect the results.,
pandas/,345,GH#22556,
pandas/,346,Positioning missing value properly when column is Categorical.,
pandas/,366,sort ascending with na first,
pandas/,381,sort ascending with na last,
pandas/,396,sort descending with na first,
pandas/,413,sort descending with na last,
pandas/,432,GH#16836,
pandas/,487,GH 30114,
pandas/,502,GH 13230,
pandas/,57,with a subset of A should be the same,
pandas/,62,same with A/B,
pandas/,67,B gives df.asof,
pandas/,75,GH 15118,
pandas/,76,no match found - `where` value before earliest date in index,
pandas/,93,"Check that we handle PeriodIndex correctly, dont end up with",
pandas/,94,period.ordinal for series name,
pandas/,100,GH 15713,
pandas/,101,DataFrame is all nans,
pandas/,106,"testing non-default indexes, multiple inputs",
pandas/,114,testing multiple columns,
pandas/,120,testing scalar input,
pandas/,143,GH21194,
pandas/,144,Testing awareness of DataFrame index considering different,
pandas/,145,UTC and timezone,
pandas/,158,"GH-27357, GH-30784: ensure the result of asof is an actual copy and",
pandas/,159,doesn't track the parent dataframe / doesn't give SettingWithCopy warnings,
pandas/,175,Mismatched freq,
pandas/,17,axis = 0,
pandas/,23,test fill value,
pandas/,36,axis = 1,
pandas/,42,test fill value,
pandas/,48,TODO(wesm): unused?,
pandas/,49,noqa,
pandas/,69,Try to align DataFrame to Series along bad axis,
pandas/,74,align dataframe to series with broadcast or not,
pandas/,91,see gh-9558,
pandas/,102,test other non-float types,
pandas/,116,mixed floats/ints,
pandas/,133,GH#10665,
pandas/,134,same test cases as test_align_multiindex in test_series.py,
pandas/,143,these must be the same results (but flipped),
pandas/,171,frame + series,
pandas/,182,series + frame,
pandas/,229,empty left,
pandas/,235,empty right,
pandas/,241,both empty,
pandas/,28,disjoint,
pandas/,37,same index,
pandas/,53,overlap,
pandas/,60,reverse overlap,
pandas/,65,no overlap,
pandas/,72,corner cases,
pandas/,82,#2525,
pandas/,106,gh 3016 (same as in update),
pandas/,121,doc example,
pandas/,137,"GH3552, return object dtype with bools",
pandas/,147,"GH 3593, converting datetime64[ns] incorrectly",
pandas/,171,GH 7509 (not fixed),
pandas/,184,ToDo: this must be int64,
pandas/,190,ToDo: this must be datetime64,
pandas/,192,ToDo: this must be int64,
pandas/,196,see gh-7630,
pandas/,225,see gh-10567,
pandas/,259,different tz,
pandas/,265,"if df1 doesn't have NaN, keep its dtype",
pandas/,313,different freq,
pandas/,331,GH14687 - integer series that do no align exactly,
pandas/,342,see gh-20699,
pandas/,11,Items,
pandas/,20,Other axis,
pandas/,26,like,
pandas/,34,like with ints in column names,
pandas/,39,regex with ints in column names,
pandas/,40,from PR #10384,
pandas/,49,shouldn't remove anything,
pandas/,53,pass in None,
pandas/,61,test mutually exclusive arguments,
pandas/,73,objects,
pandas/,77,"unicode columns, won't ascii-encode",
pandas/,86,regex,
pandas/,91,doesn't have to be at beginning,
pandas/,109,GH13101,
pandas/,117,GH13101,
pandas/,134,"GH#5798 trying to filter on non-string columns should drop,",
pandas/,135,not raise,
pandas/,7,corner case,
pandas/,15,GH#423,
pandas/,43,MultiIndex,
pandas/,44,GH7846,
pandas/,61,TODO: untested,
pandas/,62,noqa,
pandas/,69,Bad Inputs,
pandas/,71,Not DatetimeIndex / PeriodIndex,
pandas/,76,Not DatetimeIndex / PeriodIndex,
pandas/,81,Invalid level,
pandas/,59,columns,
pandas/,90,invalid axis,
pandas/,101,PeriodIndex.to_timestamp always use 'infer',
pandas/,204,GH20839,
pandas/,325,GH 11990,
pandas/,29,GH#32535 dont less tz in to_records,
pandas/,40,GH#3189,
pandas/,88,GH#13172,
pandas/,89,unicode_literals conflict with to_records,
pandas/,95,xref issue: https://github.com/numpy/numpy/issues/2407,
pandas/,96,Issue GH#11879. to_records used to raise an exception when used,
pandas/,97,with column names containing non-ascii characters in Python 2,
pandas/,100,Note that numpy allows for unicode field names but dtypes need,
pandas/,101,to be specified using dictionary instead of list of tuples.,
pandas/,109,GH#8626,
pandas/,111,dict creation,
pandas/,116,list-like creation,
pandas/,121,to record array,
pandas/,122,this coerces,
pandas/,132,No dtypes --> default to array dtypes.,
pandas/,140,Should have no effect in this case.,
pandas/,148,Column dtype applied across the board. Index unaffected.,
pandas/,156,Index dtype applied across the board. Columns unaffected.,
pandas/,164,Pass in a type instance.,
pandas/,172,Pass in a dtype instance.,
pandas/,180,Pass in a dictionary (name-only).,
pandas/,188,Pass in a dictionary (indices-only).,
pandas/,196,Ignore index mappings if index is not True.,
pandas/,204,Non-existent names / indices in mapping should not error.,
pandas/,212,Names / indices not in mapping default to array dtype.,
pandas/,220,Names / indices not in dtype mapping default to array dtype.,
pandas/,228,Mixture of everything.,
pandas/,236,Invalid dype values.,
pandas/,245,"Numpy can't handle EA types, so check error is raised",
pandas/,253,Check that bad types raise,
pandas/,261,see GH#18146,
pandas/,274,MultiIndex in the index.,
pandas/,285,MultiIndex in the columns.,
pandas/,304,MultiIndex in both the columns and index.,
pandas/,334,see GH#18146,
pandas/,339,see GH#18146,
pandas/,369,GH#13937,
pandas/,377,"both converted to UTC, so they are equal",
pandas/,17,neither specified,
pandas/,21,both specified,
pandas/,30,start specified,
pandas/,39,end specified,
pandas/,61,GH#17935,
pandas/,11,#15593 #15617,
pandas/,12,test 1,
pandas/,20,test 2,
pandas/,44,gh 3016,
pandas/,90,errors must be 'ignore' or 'raise',
pandas/,131,GH 25807,
pandas/,22,index,
pandas/,25,gets sorted alphabetical,
pandas/,33,have to pass something,
pandas/,37,partial columns,
pandas/,41,other axis,
pandas/,45,index with name,
pandas/,60,see gh-23859,
pandas/,78,,
pandas/,79,without specifying level -> across all levels,
pandas/,96,,
pandas/,97,with specifying a level (GH13766),
pandas/,99,dict,
pandas/,116,function,
pandas/,134,index,
pandas/,160,GH 5344,
pandas/,161,"rename set ref_locs, and set_index was not resetting",
pandas/,177,GH 19497,
pandas/,178,rename was changing Index to MultiIndex if Index contained tuples,
pandas/,201,GH 13473,
pandas/,202,rename now works with errors parameter,
pandas/,215,https://github.com/pandas-dev/pandas/issues/12392,
pandas/,231,Index,
pandas/,257,https://github.com/pandas-dev/pandas/issues/12392,
pandas/,264,see gh-12392,
pandas/,267,Named target and axis,
pandas/,281,Multiple targets and axis,
pandas/,285,Too many targets,
pandas/,290,Duplicates,
pandas/,295,GH 29136,
pandas/,303,GH 29136,
pandas/,319,GH 29136,
pandas/,11,GH#3917,
pandas/,13,Test DataFrame with nan label,
pandas/,19,"NaN label, ascending=True, na_position='last'",
pandas/,27,"NaN label, ascending=True, na_position='first'",
pandas/,35,"NaN label, ascending=False, na_position='last'",
pandas/,43,"NaN label, ascending=False, na_position='first'",
pandas/,54,"GH#25775, testing that sorting by index works with a multi-index.",
pandas/,72,axis=0,
pandas/,86,axis=1,
pandas/,111,"test with multiindex, too",
pandas/,118,"also, Series!",
pandas/,134,Error thrown by sort_index when,
pandas/,135,first index is sorted last (GH#26053),
pandas/,166,GH#13496,
pandas/,174,axis=0 : sort rows by index labels,
pandas/,184,axis=1 : sort columns by column names,
pandas/,193,GH#21052,
pandas/,195,GH#13496,
pandas/,197,sort rows by specified level of multi-index,
pandas/,210,sort_remaining=False,
pandas/,219,this is a de-facto sort via unstack,
pandas/,220,confirming that we sort in the order of the bins,
pandas/,246,GH 30114,
pandas/,302,"GH 30114, this is to test ignore_index on MulitIndex of index",
pandas/,11,naive shift,
pandas/,24,shift by 0,
pandas/,28,shift by DateOffset,
pandas/,41,shift int frame,
pandas/,42,noqa,
pandas/,44,Shifting with PeriodIndex,
pandas/,63,shift other axis,
pandas/,64,GH#6371,
pandas/,74,shift named axis,
pandas/,94,GH#9416,
pandas/,103,GH#24128,
pandas/,120,Regression test for GH#8019,
pandas/,127,GH#9092; verify that position-based shifting works,
pandas/,128,in the presence of duplicate columns,
pandas/,140,sanity check the base case,
pandas/,144,check all answers are the same,
pandas/,149,PeriodIndex,
pandas/,165,DatetimeIndex,
pandas/,190,GH#31971,
pandas/,200,axis = 1,
pandas/,19,GH#23079,
pandas/,18,noqa,
pandas/,19,TODO: actually check that this worked.,
pandas/,21,don't forget!,
pandas/,22,noqa,
pandas/,24,test does not blow up on length-0 DataFrame,
pandas/,41,"test for fill value during upsampling, related to issue 3715",
pandas/,43,setup,
pandas/,48,insert pre-existing missing value,
pandas/,21,GH 3950,
pandas/,22,reset_index with single level,
pandas/,78,default name assigned,
pandas/,83,"default name assigned, corner case",
pandas/,90,but this is ok,
pandas/,96,preserve column names,
pandas/,101,only remove certain columns,
pandas/,105,TODO should reset_index check_names ?,
pandas/,118,test resetting in place,
pandas/,146,With MultiIndex,
pandas/,159,With single-level Index (GH 16263),
pandas/,169,Missing levels - for both MultiIndex and single-level Index:,
pandas/,246,"GH#6322, testing reset_index on MultiIndexes",
pandas/,247,when we have a nan or all nan,
pandas/,275,GH#5818,
pandas/,290,GH#12071,
pandas/,6,See also:,
pandas/,7,test_tz_convert_and_localize in test_tz_convert,
pandas/,7,GH#20342,
pandas/,14,test that dropping of a level in index works,
pandas/,19,test that dropping of a level in columns works,
pandas/,12,GH 19730,
pandas/,29,single column,
pandas/,43,multi column,
pandas/,58,consider everything,
pandas/,62,in this case only,
pandas/,74,integers,
pandas/,90,GH 11376,
pandas/,108,GH 11864,
pandas/,117,GH17836,
pandas/,137,single column,
pandas/,150,multiple columns,
pandas/,173,single column,
pandas/,183,empty df,
pandas/,187,multi column,
pandas/,204,GH 20516,
pandas/,214,none,
pandas/,223,single column,
pandas/,233,empty df,
pandas/,237,multi column,
pandas/,250,nan,
pandas/,259,single column,
pandas/,269,empty df,
pandas/,273,multi column,
pandas/,288,none,
pandas/,296,single column,
pandas/,309,nan,
pandas/,311,single column,
pandas/,334,single column,
pandas/,354,multi column,
pandas/,373,consider everything,
pandas/,378,in this case only,
pandas/,409,GH 30114,
pandas/,11,GH#2665,
pandas/,13,Test that rounding an empty DataFrame does nothing,
pandas/,17,Here's the test frame we'll be working with,
pandas/,20,Default round to integer (i.e. decimals=0),
pandas/,24,Round with an integer,
pandas/,31,This should also work with np.round (since np.round dispatches to,
pandas/,32,df.round),
pandas/,35,Round with a list,
pandas/,41,Round with a dictionary,
pandas/,48,Incomplete dict,
pandas/,55,Dict with unknown elements,
pandas/,59,float input to `decimals`,
pandas/,65,String input,
pandas/,75,List input,
pandas/,85,Non integer Series inputs,
pandas/,94,Negative numbers,
pandas/,102,nan in Series round,
pandas/,105,TODO(wesm): unused?,
pandas/,106,noqa,
pandas/,114,Make sure this doesn't break existing Series.round,
pandas/,117,named columns,
pandas/,118,GH#11986,
pandas/,127,interaction of named columns & series,
pandas/,132,GH#12600,
pandas/,143,See GH#14197,
pandas/,151,GH#11885,
pandas/,174,GH#11611,
pandas/,192,GH#11763,
pandas/,193,Here's the test frame we'll be working with,
pandas/,196,Default round to integer (i.e. decimals=0),
pandas/,201,See GH#21809,
pandas/,216,GH#30063,
pandas/,10,GH#15704,
pandas/,26,GH#17833,
pandas/,41,GH#19978,
pandas/,47,Test for rename of the Index object of columns,
pandas/,51,Test for rename of the Index object of columns using dict,
pandas/,55,Test for renaming index using dict,
pandas/,59,Test for renaming index using a function,
pandas/,63,Test for renaming index providing complete list,
pandas/,67,Test for changing index and columns at same time,
pandas/,73,Test different error cases,
pandas/,95,GH 25034,
pandas/,87,GH #15662.,
pandas/,171,GH 29132: test axis names,
pandas/,187,TODO: assert something?,
pandas/,219,GH 22985,
pandas/,241,GH 10395,
pandas/,250,GH,
pandas/,271,all good,
pandas/,277,GH 9687,
pandas/,17,Verify that float_frame was not changed inplace,
pandas/,21,GH#15388,
pandas/,29,GH#2747,
pandas/,44,TODO(jreback),
pandas/,45,clip on mixed integer or floats,
pandas/,46,with integer clippers coerces to float,
pandas/,52,"GH#24162, clipping now preserves numeric types per column",
pandas/,60,GH#6966,
pandas/,97,GH#15390,
pandas/,124,GH#20911,
pandas/,140,GH#17276,
pandas/,144,GH#19992,
pandas/,10,GH#11150,
pandas/,66,GH#7292,
pandas/,83,GH30463,
pandas/,9,GH#26825,
pandas/,18,GH#26825,
pandas/,27,GH#26825,
pandas/,37,GH#26825,
pandas/,41,mixed all-tzaware dtypes,
pandas/,64,mixed type,
pandas/,12,GH 19730,
pandas/,22,gh-21524,
pandas/,23,Given the wide dataframe with a lot of columns,
pandas/,24,with different (important!) values,
pandas/,29,Then duplicates produce the bool Series as a result and don't fail during,
pandas/,30,"calculation. Actual values doesn't matter here, though usually it's all",
pandas/,31,False in this case,
pandas/,80,"need to have a DataFrame, not a Series",
pandas/,81,"-> select columns with singleton list, not string",
pandas/,90,GH 25184,
pandas/,86,explode a single column,
pandas/,87,gh-10511,
pandas/,104,gh-8517,
pandas/,160,GH 28005,
pandas/,17,gh-10912: inplace ops cause caching issue,
pandas/,22,original frame,
pandas/,26,result,
pandas/,29,"midnight, everything",
pandas/,36,time doesn't exist,
pandas/,46,GH#24043,
pandas/,58,GH#24043,
pandas/,66,GH#20725,
pandas/,68,index is not a DatetimeIndex,
pandas/,73,issue 8839,
pandas/,63,----------------------------------------------------------------------,
pandas/,64,Top / bottom,
pandas/,79,dups!,
pandas/,85,GH#10393,
pandas/,111,escape some characters that may be in the repr,
pandas/,127,regression test for GH#22752,
pandas/,144,GH#15297,
pandas/,161,GH#13412,
pandas/,173,GH#16818,
pandas/,196,Check whether tuples are correctly treated as multi-level lookups.,
pandas/,197,GH#23033,
pandas/,203,nsmallest,
pandas/,208,nlargest,
pandas/,16,lambda syntax,
pandas/,20,original is unmodified,
pandas/,23,Non-Series array-like,
pandas/,26,original is unmodified,
pandas/,33,overwrite,
pandas/,39,lambda,
pandas/,52,GH 9818,
pandas/,67,non-keyword argument,
pandas/,15,GH#11247,
pandas/,16,split/records producing np.datetime64 rather than Timestamps,
pandas/,17,on datetime64[ns] dtypes only,
pandas/,60,GH#22801,
pandas/,61,Data loss when indexes are not unique. Raise ValueError.,
pandas/,75,GH#32515,
pandas/,82,orient= should only take the listed options,
pandas/,83,see GH#32515,
pandas/,86,GH#16122,
pandas/,124,GH#10844,
pandas/,142,GH#16122,
pandas/,154,"GH#16927: When converting to a dict, if a column has a non-unique name",
pandas/,155,"it will be dropped, throwing a warning.",
pandas/,160,orient - orient argument to to_dict function,
pandas/,161,item_getter - function for extracting value from,
pandas/,162,the resulting dict using column name and index,
pandas/,174,"GH#14216, GH#23753",
pandas/,175,make sure that we are boxing properly,
pandas/,182,GH#18372 When converting to dict with orient='records' columns of,
pandas/,183,datetime that are tz-aware were not converted to required arrays,
pandas/,233,GH#18580,
pandas/,234,When using to_dict(orient='index') on a dataframe with int,
pandas/,235,and float columns only the int columns were cast to float,
pandas/,246,GH#24940,
pandas/,253,GH#24939,
pandas/,260,GH#22620,
pandas/,261,Input Data,
pandas/,264,Expected Dtypes,
pandas/,266,Extracting dtypes out of to_dict operation,
pandas/,33,mixed type,
pandas/,51,simplest cases,
pandas/,52,regex -> value,
pandas/,53,obj frame,
pandas/,57,mixed,
pandas/,61,regex -> regex,
pandas/,62,obj frame,
pandas/,69,with mixed,
pandas/,76,everything with compiled regexs as well,
pandas/,80,mixed,
pandas/,84,regex -> regex,
pandas/,85,obj frame,
pandas/,92,with mixed,
pandas/,116,simplest cases,
pandas/,117,regex -> value,
pandas/,118,obj frame,
pandas/,123,mixed,
pandas/,128,regex -> regex,
pandas/,129,obj frame,
pandas/,137,with mixed,
pandas/,145,everything with compiled regexs as well,
pandas/,150,mixed,
pandas/,155,regex -> regex,
pandas/,156,obj frame,
pandas/,164,with mixed,
pandas/,176,mixed,
pandas/,181,regex -> regex,
pandas/,182,obj frame,
pandas/,190,with mixed,
pandas/,198,everything with compiled regexs as well,
pandas/,203,mixed,
pandas/,208,regex -> regex,
pandas/,209,obj frame,
pandas/,217,with mixed,
pandas/,229,lists of regexes and values,
pandas/,230,"list of [re1, re2, ..., reN] -> [v1, v2, ..., vN]",
pandas/,243,"list of [re1, re2, ..., reN] -> [re1, re2, .., reN]",
pandas/,256,"list of [re1, re2, ..., reN] -> [(re1 or v1), (re2 or v2), ..., (reN",
pandas/,257,or vN)],
pandas/,283,same as above with inplace=True,
pandas/,284,lists of regexes and values,
pandas/,288,lists of regexes and values,
pandas/,289,"list of [re1, re2, ..., reN] -> [v1, v2, ..., vN]",
pandas/,303,"list of [re1, re2, ..., reN] -> [re1, re2, .., reN]",
pandas/,317,"list of [re1, re2, ..., reN] -> [(re1 or v1), (re2 or v2), ..., (reN",
pandas/,318,or vN)],
pandas/,346,mixed frame to make sure this doesn't break things,
pandas/,349,lists of regexes and values,
pandas/,350,"list of [re1, re2, ..., reN] -> [v1, v2, ..., vN]",
pandas/,365,"list of [re1, re2, ..., reN] -> [re1, re2, .., reN]",
pandas/,372,"list of [re1, re2, ..., reN] -> [(re1 or v1), (re2 or v2), ..., (reN",
pandas/,373,or vN)],
pandas/,388,the same inplace,
pandas/,389,lists of regexes and values,
pandas/,390,"list of [re1, re2, ..., reN] -> [v1, v2, ..., vN]",
pandas/,398,"list of [re1, re2, ..., reN] -> [re1, re2, .., reN]",
pandas/,406,"list of [re1, re2, ..., reN] -> [(re1 or v1), (re2 or v2), ..., (reN",
pandas/,407,or vN)],
pandas/,425,dicts,
pandas/,426,"single dict {re1: v1}, search the whole frame",
pandas/,427,need test for this...,
pandas/,429,"list of dicts {re1: v1, re2: v2, ..., re3: v3}, search the whole",
pandas/,430,frame,
pandas/,440,"list of dicts {re1: re11, re2: re12, ..., reN: re1N}, search the",
pandas/,441,whole frame,
pandas/,460,scalar -> dict,
pandas/,461,"to_replace regex, {value: value}",
pandas/,481,nested dicts will not work until this is implemented for Series,
pandas/,498,GH 25259,
pandas/,529,what happens when you try to replace a numeric value with a regex?,
pandas/,597,empty,
pandas/,601,GH 11698,
pandas/,602,test for mixed data types.,
pandas/,616,lists of regexes and values,
pandas/,617,"list of [v1, v2, ..., vN] -> [v1, v2, ..., vN]",
pandas/,630,"list of [v1, v2, ..., vN] -> [v1, v2, .., vN]",
pandas/,644,GH 21977,
pandas/,651,GH 19266,
pandas/,658,from GH 3064,
pandas/,667,series to series/dict,
pandas/,678,gh 3907,
pandas/,701,int block upcasting,
pandas/,720,int block splitting,
pandas/,738,to object block upcasting,
pandas/,763,test case from,
pandas/,781,"in this case, should be the same as the not nested version",
pandas/,817,dtypes,
pandas/,880,GH 20380,
pandas/,914,both dicts,
pandas/,930,scalar to dict,
pandas/,939,list to list,
pandas/,957,dict to scalar,
pandas/,967,list to scalar,
pandas/,1072,GH 27660 keep behaviour consistent for simple dictionary and,
pandas/,1073,nested dictionary replacement,
pandas/,1081,GH 27660,
pandas/,1129,We don't support converting object -> specialized EA in,
pandas/,1130,replace yet.,
pandas/,1169,GH 11326,
pandas/,1170,"behaving poorly when presented with a datetime64[ns, tz]",
pandas/,1219,coerce to object,
pandas/,1251,GH 15289,
pandas/,1292,GH 19632,
pandas/,1304,GH 26988,
pandas/,1318,ensure non-inplace call does not affect original,
pandas/,1339,GH 16051,
pandas/,1340,DataFrame.replace() overwrites when values are non-numeric,
pandas/,1341,also added to data frame whilst issue was for series,
pandas/,1360,GH26632,
pandas/,1367,GH31517,
pandas/,1374,GH 18634,
pandas/,1375,API: replace() should raise an exception if invalid argument is given,
pandas/,42,across midnight,
pandas/,69,GH#20725,
pandas/,71,index is not a DatetimeIndex,
pandas/,75,GH#8839,
pandas/,92,issue 8839,
pandas/,15,min_periods no NAs (corner case),
pandas/,24,with NAs,
pandas/,33,regular,
pandas/,40,exclude non-numeric types,
pandas/,45,Single column frame,
pandas/,63,"DataFrame.corr(), as opposed to DataFrame.corrwith",
pandas/,75,---------------------------------------------------------------------,
pandas/,82,exclude non-numeric types,
pandas/,90,nothing in common,
pandas/,108,constant --> all NA,
pandas/,121,when dtypes of pandas series are different,
pandas/,122,"then ndarray will have dtype=object,",
pandas/,123,so it need to be properly handled,
pandas/,135,GH#14617,
pandas/,143,GH#22298,
pandas/,150,dtypes other than float64 GH#1761,
pandas/,164,make sure order does not matter,
pandas/,181,non time-series data,
pandas/,222,GH#18570,
pandas/,249,GH#21925,
pandas/,260,GH#21925,
pandas/,268,GH#21925,
pandas/,21,GH 8594,
pandas/,34,GH 8594,
pandas/,47,GH 30399,
pandas/,49,define dataframe with unique datetime index,
pandas/,55,create dataframe with non-unique datetime index,
pandas/,59,Dropping with labels not exist in the index,
pandas/,86,errors = 'ignore',
pandas/,103,GH 16398,
pandas/,124,errors = 'ignore',
pandas/,134,non-unique - wheee!,
pandas/,140,GH 16398,
pandas/,147,inplace cache issue,
pandas/,148,GH#5628,
pandas/,155,GH#11640,
pandas/,157,define the lexsorted version,
pandas/,164,define the non-lexsorted version,
pandas/,174,compare the results,
pandas/,184,equivalence of the labels/axis and index/columns API's (GH#12392),
pandas/,235,GH#19186,
pandas/,250,GH#21494,
pandas/,258,GH# 21494,
pandas/,296,GH#12754,
pandas/,340,it works! GH#2101,
pandas/,377,GH#12701,
pandas/,400,GH#21761,
pandas/,18,with a float index,
pandas/,27,test empty dataframe,
pandas/,32,GH#20725,
pandas/,34,index is not a DatetimeIndex,
pandas/,58,GH20725,
pandas/,60,index is not a DatetimeIndex,
pandas/,11,GH 28769,
pandas/,22,.append() should return a new object,
pandas/,43,dict,
pandas/,57,can append when name set,
pandas/,73,different columns,
pandas/,83,GH22252,
pandas/,84,exercise the conditional branch in append method where the data,
pandas/,85,to be appended is a list and does not contain all columns that are in,
pandas/,86,the target DataFrame,
pandas/,98,Empty df append empty df,
pandas/,105,Non-empty df append empty df,
pandas/,112,Empty df with columns append empty df,
pandas/,119,Non-Empty df with columns append empty df,
pandas/,128,GH 5754,
pandas/,129,row appends of different dtypes (so need to do by-item),
pandas/,130,can sometimes infer the correct type,
pandas/,178,GH 30238,
pandas/,18,"Integer data are included in .describe() output,",
pandas/,19,Boolean and string data are not.,
pandas/,27,Top value is a boolean value that is False,
pandas/,36,GH#27183,
pandas/,50,GH#13891,
pandas/,98,Categoricals should not show up together with numerical columns,
pandas/,102,"In a frame, describe() for the cat should be the same as for string",
pandas/,103,"arrays (count, unique, top, freq)",
pandas/,119,GH#26397,
pandas/,120,Ensure the index of an an empty categorical DataFrame column,
pandas/,121,"also contains (count, unique, top, freq)",
pandas/,130,"ensure NaN, not None",
pandas/,135,GH#11558,
pandas/,198,GH#6145,
pandas/,246,GH#21332,
pandas/,274,GH#26660,
pandas/,31,https://github.com/pandas-dev/pandas/issues/31925,
pandas/,17,int dtype,
pandas/,25,mixed numeric,
pandas/,30,GH#10907,
pandas/,41,GH#18578,
pandas/,60,GH#18578,
pandas/,78,GH#4533,
pandas/,110,GH#9727,
pandas/,124,GH#32995 Don't pass an incorrect axis,
pandas/,125,TODO(EA2D): this bug wouldn't have happened with 2D EA,
pandas/,131,TODO: should we make Block.diff do type inference?  or maybe algos.diff?,
pandas/,136,GH#32995 operate column-wise when we have mixed dtypes and axis=1,
pandas/,145,GH#32995 operate column-wise when we have mixed dtypes and axis=1,
pandas/,154,GH#32995 operate column-wise when we have mixed dtypes and axis=1,
pandas/,74,GH22004,
pandas/,94,GH22004,
pandas/,104,Assert that passing a file object to to_csv while explicitly specifying a,
pandas/,105,"compression protocol triggers a RuntimeWarning, as per GH21227.",
pandas/,119,https://github.com/pandas-dev/pandas/issues/27575,
pandas/,160,GH33196,
pandas/,12,noqa: E402 isort:skip,
pandas/,25,check that we are raising the exception,
pandas/,26,on writing,
pandas/,86,https://github.com/wesm/feather/issues/53,
pandas/,87,not currently able to handle duplicate columns,
pandas/,97,GH 24025,
pandas/,111,mixed python objects,
pandas/,113,"Some versions raise ValueError, others raise ArrowInvalid.",
pandas/,126,non-default index,
pandas/,138,index with meta-data,
pandas/,143,column multi-index,
pandas/,39,our current version pickle data,
pandas/,45,---------------------,
pandas/,46,comparison functions,
pandas/,47,---------------------,
pandas/,76,use a specific comparator,
pandas/,77,if available,
pandas/,86,GH 7748,
pandas/,92,GH 9291,
pandas/,143,---------------------,
pandas/,144,tests,
pandas/,145,---------------------,
pandas/,176,test writing with each pickler,
pandas/,179,test reading with each unpickler,
pandas/,214,from boto,
pandas/,221,from boto,
pandas/,228,---------------------,
pandas/,229,test pickle compression,
pandas/,230,---------------------,
pandas/,278,write to compressed file,
pandas/,281,decompress,
pandas/,286,read decompressed file,
pandas/,312,write to compressed file by inferred compression method,
pandas/,315,decompress,
pandas/,320,read decompressed file,
pandas/,333,write to uncompressed file,
pandas/,336,compress,
pandas/,339,read compressed file,
pandas/,358,write to uncompressed file,
pandas/,361,compress,
pandas/,364,read compressed file by inferred compression method,
pandas/,370,---------------------,
pandas/,371,test pickle compression,
pandas/,372,---------------------,
pandas/,396,"pickle file written with py27, should be readable without raising",
pandas/,397,"UnicodeDecodeError, see GH#28645 and GH#31988",
pandas/,401,just test the columns are correct since the values are random,
pandas/,405,---------------------,
pandas/,406,tests for buffer I/O,
pandas/,407,---------------------,
pandas/,420,---------------------,
pandas/,421,tests for URL I/O,
pandas/,422,---------------------,
pandas/,507,GH 12163,
pandas/,25,noqa,
pandas/,32,noqa,
pandas/,44,setup engines & skips,
pandas/,90,"'c': np.arange(3, 6).astype('u1'),",
pandas/,94,"'g': pd.date_range('20130101', periods=3,",
pandas/,95,"tz='US/Eastern'),",
pandas/,96,"'h': pd.date_range('20130101', periods=3, freq='ns')",
pandas/,187,use the set option,
pandas/,194,use the set option,
pandas/,201,use the set option,
pandas/,228,"Expect different error messages from get_engine(engine=""auto"")",
pandas/,229,if engines aren't installed vs. are installed but bad version,
pandas/,232,"Do we have engines installed, but a bad version of them?",
pandas/,245,Do we have usable engines installed?,
pandas/,250,No usable engines found.,
pandas/,271,cross-compat with differing reading/writing engines,
pandas/,285,cross-compat with differing reading/writing engines,
pandas/,310,check that we are raising the exception on writing,
pandas/,330,unicode,
pandas/,337,numeric,
pandas/,341,bytes,
pandas/,345,python object,
pandas/,365,GH18154,
pandas/,385,non-default index,
pandas/,390,index with meta-data,
pandas/,396,Not supported in fastparquet as of 0.1.3 or older pyarrow version,
pandas/,405,column multi-index,
pandas/,427,ENH 20768,
pandas/,428,Ensure index=False omits the index from the written Parquet file.,
pandas/,433,"Because we're dropping the index, we expect the loaded dataframe to",
pandas/,434,have the default integer index.,
pandas/,439,Ignore custom index,
pandas/,446,Ignore multi-indexes as well.,
pandas/,464,additional supported types for pyarrow,
pandas/,471,GH18628,
pandas/,474,additional supported types for pyarrow,
pandas/,485,not currently able to handle duplicate columns,
pandas/,491,period - will be supported using an extension type with pyarrow 1.0,
pandas/,493,pyarrow 0.11 raises ArrowTypeError,
pandas/,494,older pyarrows raise ArrowInvalid,
pandas/,497,timedelta,
pandas/,501,mixed python objects,
pandas/,503,pyarrow 0.11 raises ArrowTypeError,
pandas/,504,older pyarrows raise ArrowInvalid,
pandas/,509,supported in >= 0.7.0,
pandas/,513,"test for null, out-of-order values, and unobserved category",
pandas/,519,test for ordered flag,
pandas/,527,de-serialized as object for pyarrow < 0.15,
pandas/,531,GH#33077 2020-03-27,
pandas/,537,GH #19134,
pandas/,541,GH #23283,
pandas/,553,GH #27117,
pandas/,566,GH #27339,
pandas/,580,test additional ExtensionArrays that are supported through the,
pandas/,581,__arrow_array__ protocol,
pandas/,592,de-serialized as plain int / object,
pandas/,602,"if missing values in integer, currently de-serialized as float",
pandas/,608,test additional ExtensionArrays that are supported through the,
pandas/,609,__arrow_array__ protocol + by defining a custom ExtensionType,
pandas/,612,Arrow does not yet support struct in writing to Parquet (ARROW-1644),
pandas/,613,"""c"": pd.arrays.IntervalArray.from_tuples([(0, 1), (1, 2), (3, 4)]),",
pandas/,621,"with version 2.0, pyarrow defaults to writing the nanoseconds, so",
pandas/,622,this should work without error,
pandas/,639,not currently able to handle duplicate columns,
pandas/,650,period,
pandas/,654,mixed,
pandas/,671,GH #19134,
pandas/,675,GH #23283,
pandas/,686,noqa: F811,
pandas/,692,GH #27117,
pandas/,703,noqa: F811,
pandas/,709,GH #23283,
pandas/,720,noqa: F811,
pandas/,726,GH #23283,
pandas/,740,GH #27339,
pandas/,121,our local clipboard for tests,
pandas/,155,Test that default arguments copy as tab delimited,
pandas/,159,Test that explicit delimiters are respected,
pandas/,164,Test white space separator,
pandas/,171,Two character separator is not supported in to_clipboard,
pandas/,172,Test that multi-character separators are not silently passed,
pandas/,177,Separator is ignored when excel=False and should produce a warning,
pandas/,182,Tests that the default behavior of to_clipboard is tab,
pandas/,183,"delimited and excel=""True""",
pandas/,191,Tests reading of white space separated tables,
pandas/,202,gh-19010: avoid warnings,
pandas/,215,excel data is parsed correctly,
pandas/,218,having diff tab counts doesn't trigger it,
pandas/,242,test case for testing invalid encoding,
pandas/,257,PR #25040 wide unicode wasn't copied correctly on PY3 on windows,
pandas/,48,"temporary workaround as moto fails for botocore >= 1.11 otherwise,",
pandas/,49,see https://github.com/spulec/moto/issues/1924 & 1952,
pandas/,72,see gh-16135,
pandas/,76,create df to test for all BQ datatypes except RECORD,
pandas/,136,GH 29857,
pandas/,156,Setup Dataset,
pandas/,165,Create the dataset,
pandas/,172,Teardown Dataset,
pandas/,207,GH 29598,
pandas/,127,Passing match argument as positional should cause a FutureWarning.,
pandas/,261,10892 infer_types removed,
pandas/,422,GH-20690,
pandas/,423,Read all tbody tags within a single table.,
pandas/,544,"GH5048: if header is specified explicitly, an int column should be",
pandas/,545,parsed as int while its header is parsed as str,
pandas/,697,GH17054,
pandas/,720,GH17054,
pandas/,722,"In ASCII, with lowercase letters being copies:",
pandas/,723,,
pandas/,724,X x Y Z W,
pandas/,725,A B b z C,
pandas/,753,GH17054,
pandas/,755,"In ASCII, with lowercase letters being copies:",
pandas/,756,,
pandas/,757,A B b b C,
pandas/,758,a b b b D,
pandas/,783,GH17054,
pandas/,785,"In ASCII, with lowercase letters being copies:",
pandas/,786,,
pandas/,787,A B,
pandas/,788,C b,
pandas/,810,GH17054,
pandas/,829,GH17054,
pandas/,916,GH 12907,
pandas/,943,GH 6114,
pandas/,949,GH 13461,
pandas/,974,GH 13461,
pandas/,1069,Issue #13434,
pandas/,1107,GH 20027,
pandas/,1136,Should not parse hidden table,
pandas/,1160,seems utf-16/32 fail on windows,
pandas/,1167,Issue #17975,
pandas/,1187,Issue #17975,
pandas/,1213,see gh-16928,
pandas/,1224,force import check by reinitalising global vars in html.py,
pandas/,30,Functions that consume a string path and return a string or path-like object,
pandas/,43,https://github.com/cython/cython/issues/1720,
pandas/,120,GH12153,
pandas/,247,categorical,
pandas/,286,"Same test as write_fspath_all, except HDF5 files aren't",
pandas/,287,"necessarily byte-for-byte identical for a given dataframe, so we'll",
pandas/,288,have to read and compare equality,
pandas/,316,the error raised is different on Windows,
pandas/,17,GH17135,
pandas/,18,"botocore gained iteration support in 1.10.47, can now be used in read_*",
pandas/,120,Legacy default reader configuration,
pandas/,129,"GH 7369, make sure can read a 0-obs dta file",
pandas/,141,Pandas uses np.nan as missing value.,
pandas/,142,"Thus, all columns will be of type float, regardless of their name.",
pandas/,148,"this is an oddity as really the nan should be float64, but",
pandas/,149,the casting doesn't fail so need to match stata here,
pandas/,198,113 is buggy due to limits of date format support in Stata,
pandas/,199,parsed_113 = self.read_dta(self.dta2_113),
pandas/,201,Remove resource warnings,
pandas/,204,should get warning for each call to read_dta,
pandas/,207,buggy test because of the NaT comparison on certain platforms,
pandas/,208,Format 113 test fails since it does not support tc and tC formats,
pandas/,209,"tm.assert_frame_equal(parsed_113, expected)",
pandas/,220,match stata here,
pandas/,256,these are all categoricals,
pandas/,270,stata doesn't save .category metadata,
pandas/,273,File containing strls,
pandas/,369,"original.index is np.int32, read index is np.int64",
pandas/,382,9795,
pandas/,394,"GH 4626, proper encoding handling",
pandas/,463,should get a warning for that format.,
pandas/,554,should get a warning for that format.,
pandas/,630,Data obtained from:,
pandas/,631,http://go.worldbank.org/ZXY29PVJ21,
pandas/,644,GH 19417,
pandas/,645,,
pandas/,646,Test that value_labels() returns an empty dict if the file format,
pandas/,647,predates supporting value labels.,
pandas/,660,Time,
pandas/,661,Day,
pandas/,662,Week,
pandas/,663,Month,
pandas/,664,Quarter year,
pandas/,665,Half year,
pandas/,667,Year,
pandas/,784,Test extremes for floats,
pandas/,790,Test extremes for floats,
pandas/,843,"Fixes for weekly, quarterly,half,year",
pandas/,861,{c : c[-2:] for c in columns},
pandas/,890,read_csv types are the same,
pandas/,915,See PR 10757,
pandas/,960,these are all categoricals,
pandas/,987,Warning for non-string labels,
pandas/,988,Error for labels too long,
pandas/,1014,should get a warning for mixed content,
pandas/,1040,Directly construct using expected codes,
pandas/,1041,"Format is is_cat, col_name, labels (in order), underlying data",
pandas/,1061,"Read with and with out categoricals, ensure order is identical",
pandas/,1066,Check identity of codes,
pandas/,1078,"Sort based on codes, not strings",
pandas/,1081,Don't sort index,
pandas/,1143,noqa,
pandas/,1195,GH12153,
pandas/,1223,Read the whole file,
pandas/,1232,Compare to what we get when reading by chunk,
pandas/,1241,noqa,
pandas/,1274,"GH 13631, add support for writing variable labels",
pandas/,1351,GH 12259,
pandas/,1419,"GH 13923, 25772",
pandas/,1434,111 is an old version but still used by current versions of,
pandas/,1435,SAS when exporting to Stata format. We do not know of any,
pandas/,1436,on-line documentation for this version.,
pandas/,1450,GH 14618,
pandas/,1524,GH 16923,
pandas/,1536,GH 17328,
pandas/,1548,GH 17797,
pandas/,1549,,
pandas/,1550,Test that display formats are ignored when determining if a numeric,
pandas/,1551,column is a date value.,
pandas/,1552,,
pandas/,1553,All date types are stored as numbers and format associated with the,
pandas/,1554,column denotes both the type of the date and the display format.,
pandas/,1555,,
pandas/,1556,STATA supports 9 date types which each have distinct units. We test 7,
pandas/,1557,"of the 9 types, ignoring %tC and %tb. %tC is a variant of %tc that",
pandas/,1558,accounts for leap seconds and %tb relies on STATAs business calendar.,
pandas/,1627,"original.index is np.int32, read index is np.int64",
pandas/,1651,GH 12259,
pandas/,1672,GH 21041,
pandas/,1685,writing version 117 requires seek and cannot be used with gzip,
pandas/,1713,GH 23633,
pandas/,1724,Check strl supports all None (null),
pandas/,1760,"GH 23573, correct GSO data to reflect correct size",
pandas/,1779,GH 25960,
pandas/,1795,"Gzipped since contains 32,999 variables and uncompressed is 20MiB",
pandas/,1837,Missing is intentionally converted to empty strl,
pandas/,11,test file from the Haven project (https://haven.tidyverse.org/),
pandas/,25,test file from the Haven project (https://haven.tidyverse.org/),
pandas/,39,test file from the Haven project (https://haven.tidyverse.org/),
pandas/,53,test file from the Haven project (https://haven.tidyverse.org/),
pandas/,69,usecols must be list-like,
pandas/,208,"if setup fails, there may not be a connection to close.",
pandas/,290,skip header row,
pandas/,437,Nuke table,
pandas/,460,Add to table again,
pandas/,471,Nuke table just in case,
pandas/,476,Add to table again,
pandas/,487,used to double check function below is really being used,
pandas/,503,Nuke table,
pandas/,512,result.index.astype(int),
pandas/,519,"drop_sql = ""DROP TABLE IF EXISTS test""  # should already be done",
pandas/,539,"Make sure when transaction is rolled back, no rows get inserted",
pandas/,546,ignore raised exception,
pandas/,551,"Make sure when transaction is committed, rows do get inserted",
pandas/,558,-----------------------------------------------------------------------------,
pandas/,559,-- Testing the public API,
pandas/,618,Add to table again,
pandas/,630,Add to table again,
pandas/,655,HACK!,
pandas/,674,"drop_sql = ""DROP TABLE IF EXISTS test""  # should already be done",
pandas/,680,Test date parsing in read_sql,
pandas/,681,No Parsing,
pandas/,735,Test case where same column appears in parse_date and index_col,
pandas/,749,see #6921,
pandas/,765,"no index name, defaults to 'index'",
pandas/,767,specifying index_label,
pandas/,769,using the index name,
pandas/,771,"has index name, but specifying index_label",
pandas/,773,index name is integer,
pandas/,775,index name is None but index label is integer,
pandas/,793,"no index name, defaults to 'level_0' and 'level_1'",
pandas/,799,specifying index_label,
pandas/,810,using the index name,
pandas/,816,"has index name, but specifying index_label",
pandas/,873,multiple columns as key (GH10385),
pandas/,884,reading the query in one time,
pandas/,887,reading the query in chunks with read_sql_query,
pandas/,901,reading the query in chunks with read_sql_query,
pandas/,915,GH8624,
pandas/,916,test that categorical gets written correctly as dense column,
pandas/,932,GH 11431,
pandas/,937,GH 13206,
pandas/,964,test columns argument in read_table,
pandas/,972,test columns argument in read_table,
pandas/,997,create invalid table,
pandas/,1004,Cause all warnings to always be triggered.,
pandas/,1006,Trigger a warning.,
pandas/,1009,Verify some things,
pandas/,1013,see gh-7815,
pandas/,1014,,
pandas/,1015,"We can't test that this warning is triggered, a the database",
pandas/,1016,configuration would have to be altered. But here we test that,
pandas/,1017,the warning is certainly NOT triggered in a normal case.,
pandas/,1019,Cause all warnings to always be triggered.,
pandas/,1021,This should not trigger a Warning,
pandas/,1023,Verify some things,
pandas/,1036,Test Timestamp objects (no datetime64 because of timezone) (GH9085),
pandas/,1042,GH 9086: TIMESTAMP is the suggested type for datetimes with timezones,
pandas/,1047,Test read_sql and .to_sql method with a database URI (GH10654),
pandas/,1049,db_uri = 'sqlite:///:memory:' # raises,
pandas/,1050,sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) near,
pandas/,1051,"""iris"": syntax error [SQL: 'iris']",
pandas/,1064,using driver that will not be installed on Travis to trigger error,
pandas/,1065,in sqlalchemy.create_engine -> test passing of this error to user,
pandas/,1067,the rest of this test depends on pg8000's being absent,
pandas/,1068,noqa,
pandas/,1094,WIP : GH10846,
pandas/,1101,WIP : GH10846,
pandas/,1133,XXX:,
pandas/,1134,super().teardown_method(method),
pandas/,1156,Test if the IO in the database still work if the connection closed,
pandas/,1157,between the writing and reading (as in many real situations).,
pandas/,1188,GH 6798,
pandas/,1189,has a space,
pandas/,1190,warns on create table with spaces in names,
pandas/,1195,without providing a connection object (available for backwards comp),
pandas/,1208,Test Timestamp objects (no datetime64 because of timezone) (GH9085),
pandas/,1218,-----------------------------------------------------------------------------,
pandas/,1219,-- Database flavor specific tests,
pandas/,1250,Skip this test if SQLAlchemy not available,
pandas/,1266,to test if connection can be made:,
pandas/,1356,Int column with NA values stays as float,
pandas/,1358,Bool column with NA values becomes object,
pandas/,1362,"int64 should be converted to BigInteger, GH7433",
pandas/,1372,"IMPORTANT - sqlite has no native date type, so shouldn't parse, but",
pandas/,1373,MySQL SHOULD be converted.,
pandas/,1377,edge case that converts postgresql datetime with time zone types,
pandas/,1378,"to datetime64[ns,psycopg2.tz.FixedOffsetTimezone..], which is ok",
pandas/,1379,"but should be more natural, so coerce to datetime64[ns] for now",
pandas/,1382,check that a column is either datetime64[ns],
pandas/,1383,"or datetime64[ns, UTC]",
pandas/,1386,"""2000-01-01 00:00:00-08:00"" should convert to",
pandas/,1387,"""2000-01-01 08:00:00""",
pandas/,1390,"""2000-06-01 00:00:00-07:00"" should convert to",
pandas/,1391,"""2000-06-01 07:00:00""",
pandas/,1397,"""2000-01-01 00:00:00-08:00"" should convert to",
pandas/,1398,"""2000-01-01 08:00:00""",
pandas/,1399,"""2000-06-01 00:00:00-07:00"" should convert to",
pandas/,1400,"""2000-06-01 07:00:00""",
pandas/,1401,GH 6415,
pandas/,1414,GH11216,
pandas/,1419,"this is parsed on Travis (linux), but not on macosx for some reason",
pandas/,1420,"even with the same versions of psycopg2 & sqlalchemy, possibly a",
pandas/,1421,Postgresql server version difference,
pandas/,1451,xref #7139,
pandas/,1452,this might or might not be converted depending on the postgres driver,
pandas/,1457,GH 9086,
pandas/,1458,Write datetimetz data to a db and read it back,
pandas/,1459,"For dbs that support timestamps with timezones, should get back UTC",
pandas/,1460,otherwise naive data should be returned,
pandas/,1467,"SQLAlchemy ""timezones"" (i.e. offsets) are coerced to UTC",
pandas/,1470,"Otherwise, timestamps are returned as local, naive",
pandas/,1478,read_sql_query does not return datetime type like read_sql_table,
pandas/,1484,GH 26761,
pandas/,1492,GH 23510,
pandas/,1493,Ensure that a naive DatetimeIndex isn't converted to UTC,
pandas/,1498,result index with gain a name from a set_index operation; expected,
pandas/,1502,No Parsing,
pandas/,1543,with read_table -> type information from schema used,
pandas/,1548,with read_sql -> no type information -> sqlite has no native,
pandas/,1565,with read_table -> type information from schema used,
pandas/,1569,with read_sql -> no type information -> sqlite has no native,
pandas/,1579,test support for datetime.date,
pandas/,1585,comes back as datetime64,
pandas/,1589,test support for datetime.time,
pandas/,1595,GH8341,
pandas/,1596,"first, use the fallback to have the sqlite adapter put in place",
pandas/,1601,check if adapter is in place,
pandas/,1602,then test if sqlalchemy is unaffected by the sqlite adapter,
pandas/,1612,see GH6509,
pandas/,1617,write and read again,
pandas/,1624,NaNs in numeric float column,
pandas/,1628,with read_table,
pandas/,1632,with read_sql,
pandas/,1637,full NaN column (numeric float column),
pandas/,1641,with read_table,
pandas/,1645,with read_sql -> not type info from table -> stays None,
pandas/,1652,NaNs in string column,
pandas/,1656,NaNs are coming back as None,
pandas/,1659,with read_table,
pandas/,1663,with read_sql,
pandas/,1682,"Use a dataframe without a bool column, since MySQL converts bool to",
pandas/,1683,TINYINT (which read_sql_table returns as an int and causes a dtype,
pandas/,1684,mismatch),
pandas/,1711,GH9083,
pandas/,1718,single dtype,
pandas/,1738,noqa,
pandas/,1775,check precision of float64,
pandas/,1778,check sql types,
pandas/,1789,This tests the example raised in issue,
pandas/,1790,https://github.com/pandas-dev/pandas/issues/10104,
pandas/,1850,sqlite3 is built-in,
pandas/,1859,"sqlite has no boolean type, so integer type is returned",
pandas/,1862,Int column with NA values stays as float,
pandas/,1865,Non-native Bool column with NA values stays as float,
pandas/,1871,"IMPORTANT - sqlite has no native date type, so shouldn't parse, but",
pandas/,1875,test no warning for BIGINT (to support int64) is raised (GH7433),
pandas/,1912,MySQL has no real BOOL type (it's an alias for TINYINT),
pandas/,1915,Int column with NA values stays as float,
pandas/,1918,Bool column with NA = int column with NA values => becomes float,
pandas/,1924,"see GH7324. Although it is more an api test, it is added to the",
pandas/,1925,mysql tests as sqlite does not have stored procedures,
pandas/,1940,noqa,
pandas/,1949,test delegation to read_sql_query,
pandas/,1973,only test this for postgresql (schema's not supported in,
pandas/,1974,mysql/sqlite),
pandas/,1977,create a schema,
pandas/,1981,write dataframe to different schema's,
pandas/,1988,read dataframes back in,
pandas/,2003,different if_exists options,
pandas/,2005,create a schema,
pandas/,2009,write dataframe with different if_exists options,
pandas/,2028,specifying schema in user-provided meta,
pandas/,2030,The schema won't be applied on another Connection,
pandas/,2031,because of transactional schemas,
pandas/,2044,GH 8953,
pandas/,2045,Example in io.rst found under _io.sql.method,
pandas/,2046,"not available in sqlite, mysql",
pandas/,2048,gets a DBAPI connection that can provide a cursor,
pandas/,2107,-----------------------------------------------------------------------------,
pandas/,2108,-- Test Sqlite / MySQL fallback,
pandas/,2160,GH 29921,
pandas/,2183,test support for datetime.date,
pandas/,2188,comes back as strings,
pandas/,2194,"test support for datetime.time, GH #8341",
pandas/,2199,comes back as strings,
pandas/,2237,sqlite stores Boolean values as INTEGER,
pandas/,2245,single dtype,
pandas/,2271,"For sqlite, these should work fine",
pandas/,2301,-----------------------------------------------------------------------------,
pandas/,2302,-- Old tests from 0.13.1 (before refactor using sqlalchemy),
pandas/,2354,In some test cases we may close db connection,
pandas/,2355,Re-open conn here so we can perform cleanup in teardown,
pandas/,2461,HACK! Change this once indexes are handled properly.,
pandas/,2483,GH 3628,
pandas/,2484,a column_of_integers dataframe should transfer well to sql,
pandas/,2488,computing the sum via sql,
pandas/,2491,"it should not fail, and gives 3 ( Issue #3628 )",
pandas/,2520,test if_exists='fail',
pandas/,2529,test if_exists='replace',
pandas/,2548,test if_exists='append',
pandas/,2644,GH#32571 result comes back rounded to 6 digits in some builds;,
pandas/,2645,no obvious pattern,
pandas/,2741,Initialize connection again (needed for tearDown),
pandas/,2756,HACK! Change this once indexes are handled properly.,
pandas/,2776,HACK! Change this once indexes are handled properly.,
pandas/,2800,test if invalid value for if_exists raises appropriate error,
pandas/,2810,test if_exists='fail',
pandas/,2823,test if_exists='replace',
pandas/,2842,test if_exists='append',
pandas/,81,Only testing the first 10 rows of data,
pandas/,85,TODO: remove try/except when 0.24.0 is the legacy version.,
pandas/,97,nan-based,
pandas/,110,nan-based,
pandas/,338,force our cwd to be the first searched,
pandas/,20,explicitly ensure file was compressed.,
pandas/,38,"Bucket ""pandas-test"" created in tests/io/conftest.py",
pandas/,89,see gh-15008,
pandas/,95,We'll complete file extension subsequently.,
pandas/,101,xz --> .xz,
pandas/,102,bz2 --> .bz2,
pandas/,91,"orient == ""values"" by default will write Timestamp objects out",
pandas/,92,"in milliseconds; these are internally stored in nanosecond,",
pandas/,93,so divide to get where we need,
pandas/,94,TODO: a to_epoch method would also solve; see GH 14772,
pandas/,140,TODO: see what is causing roundtrip dtype loss,
pandas/,156,TODO: do we even need to support U3 dtypes?,
pandas/,169,"index columns, and records orients cannot fully preserve the string",
pandas/,170,dtype for axes as the index and column labels are used as keys in,
pandas/,171,"JSON objects. JSON keys are by definition strings, so there's no way",
pandas/,172,to disambiguate whether those keys actually were strings or numeric,
pandas/,173,beforehand and numeric wins out.,
pandas/,174,TODO: Split should be able to support this,
pandas/,186,TODO: create a better frame to test with and improve coverage,
pandas/,199,Categorical not preserved,
pandas/,200,index names aren't preserved in JSON,
pandas/,216,TODO: both conditions below are probably bugs,
pandas/,228,TODO: improve coverage with date_format parameter,
pandas/,235,one off for ts handling,
pandas/,236,DTI gets converted to epoch values,
pandas/,238,TODO: handle consistently across orients,
pandas/,278,too few indices,
pandas/,286,too many columns,
pandas/,294,bad key,
pandas/,328,TODO: Special case for object data; maybe a bug?,
pandas/,336,infinities get mapped to nulls which get mapped to NaNs during,
pandas/,337,deserialisation,
pandas/,374,GH 7445,
pandas/,380,mixed type,
pandas/,388,GH10289,
pandas/,525,JSON deserialisation always creates unicode strings,
pandas/,539,"GH14256: failing column caused segfaults, if it is not the last one",
pandas/,552,verify the proper conversion of printable content,
pandas/,556,check if non-printable content throws appropriate Exception,
pandas/,562,the same with multiple columns threw segfaults,
pandas/,567,default_handler should resolve exceptions for non-string types,
pandas/,577,GH14256: buffer length not checked when writing label,
pandas/,678,GH 21986,
pandas/,733,frame,
pandas/,738,series,
pandas/,746,frame,
pandas/,763,series,
pandas/,807,GH10747,
pandas/,890,force date unit,
pandas/,894,detect date unit,
pandas/,899,this used to core dump the parser,
pandas/,933,parsing unordered input fails,
pandas/,952,GH 3867,
pandas/,970,noqa,
pandas/,1020,GH28156: to_json not correctly formatting Timedelta,
pandas/,1068,GH12554 to_json raises 'Unhandled numpy dtype 15',
pandas/,1096,GH4377 df.to_json segfaults with non-ndarray blocks,
pandas/,1109,GH4377 df.to_json segfaults with non-ndarray blocks,
pandas/,1125,GH4377 df.to_json segfaults with non-ndarray blocks,
pandas/,1183,GH9180,
pandas/,1190,GH17200,
pandas/,1197,GH17200,
pandas/,1206,GH15132: non-ascii unicode characters,
pandas/,1207,\u201d == RIGHT DOUBLE QUOTATION MARK,
pandas/,1209,simulate file handle,
pandas/,1216,simulate string,
pandas/,1223,GH18842,
pandas/,1237,GH9180,
pandas/,1249,GH15096: escaped characters in columns and data,
pandas/,1256,TODO: there is a near-identical test for pytables; can we share?,
pandas/,1258,GH 13774,
pandas/,1293,GH15344,
pandas/,1307,GH25433 GH25435,
pandas/,1314,GH21345,
pandas/,1322,GH21345,
pandas/,1330,GH25433 GH25435,
pandas/,1366,GH 17394,
pandas/,1367,Testing index=False in to_json with orient='split',
pandas/,1390,GH 17394,
pandas/,1391,Testing index=False in to_json with orient='table',
pandas/,1405,GH 17394,
pandas/,1406,Testing error message from to_json with index=False,
pandas/,1417,GH25170,
pandas/,1418,Test index=False in from_json to_json,
pandas/,1425,GH 25546,
pandas/,1447,TODO: the below have separate encoding procedures,
pandas/,1448,They produce JSON but not in a consistent manner,
pandas/,1454,GH 20500,
pandas/,1461,GH 12004,
pandas/,1597,GH 12004,
pandas/,1607,GH 12213,
pandas/,1616,GH 28512,
pandas/,1623,GH 30320,
pandas/,1645,GH 28375,
pandas/,1654,GH 31615,
pandas/,1659,GH 31615,
pandas/,1664,GH31464,
pandas/,40,Column indexed by default.,
pandas/,52,See GH#32527,
pandas/,139,Default behavior assumes encode_html_chars=False.,
pandas/,142,Make sure explicit encode_html_chars=False works.,
pandas/,145,Make sure explicit encode_html_chars=True does the encoding.,
pandas/,161,We just need one of these locales to work.,
pandas/,191,Should work with negatives too.,
pandas/,317,Negative number.,
pandas/,318,Large negative number.,
pandas/,380,see gh-11473: to_json segfaults with timezone-aware datetimes,
pandas/,387,see gh-11473: to_json segfaults with timezone-aware datetimes,
pandas/,437,8 is the max recursion depth,
pandas/,463,Broken array start.,
pandas/,464,Broken object start.,
pandas/,465,Broken array end.,
pandas/,466,Broken object end.,
pandas/,481,Unterminated.,
pandas/,482,Unterminated escape.,
pandas/,483,Broken True.,
pandas/,484,Broken False.,
pandas/,485,Broken None.,
pandas/,501,No key.,
pandas/,502,No value.,
pandas/,503,No colon or value.,
pandas/,511,Should work with negatives.,
pandas/,587,Test that numbers that fit within 32 bits but would have the,
pandas/,588,sign bit set (2**31 <= x < 2**32) are decoded properly.,
pandas/,593,Make sure no Exception is raised.,
pandas/,600,Make sure no Exception is raised.,
pandas/,710,"uint64 max will always overflow,",
pandas/,711,as it's encoded to signed.,
pandas/,787,gh-18878,
pandas/,823,see gh-10837: write out the dump explicitly,
pandas/,824,so there is no dependency on iteration order,
pandas/,863,Ensure proper DataFrame initialization.,
pandas/,870,Corrections to enable DataFrame comparison.,
pandas/,968,Column indexed.,
pandas/,1030,Trailing comma.,
pandas/,1031,Leading comma.,
pandas/,1032,Unmatched bracket.,
pandas/,1033,Only comma.,
pandas/,1093,Make sure no Exception is raised.,
pandas/,1122,GH 28256,
pandas/,154,------,
pandas/,155,dtypes,
pandas/,156,------,
pandas/,181,TODO: datedate.date? datetime.time?,
pandas/,188,TODO,
pandas/,193,TODO: I think before is_categorical_dtype(Categorical),
pandas/,194,"returned True, but now it's False. Figure out why or",
pandas/,195,if it matters,
pandas/,245,GH32383,
pandas/,442,others work,
pandas/,615,GH 19130,
pandas/,646,GH 16203,
pandas/,708,"'D': pd.timedelta_range('1H', periods=4, freq='T'),",
pandas/,712,"'H': pd.date_range('2016-01-01', freq='d', periods=4,",
pandas/,713,"tz='US/Central'),",
pandas/,728,GH 18912,
pandas/,740,GH 21287,
pandas/,14,deeply nested data,
pandas/,172,GH 14883,
pandas/,195,GH 21536,
pandas/,201,GH 22706,
pandas/,309,GH 18610,
pandas/,363,GH20030:,
pandas/,426,GH23843: Enhanced JSON normalize,
pandas/,458,see gh-21537,
pandas/,462,They should be the same.,
pandas/,466,see gh-30148,
pandas/,467,should not raise TypeError,
pandas/,479,see gh-30148,
pandas/,490,GH 31507,
pandas/,531,GH14583:,
pandas/,532,If meta keys are not always present a new option to set,
pandas/,533,errors='ignore' has been implemented,
pandas/,545,GH25468,
pandas/,546,"If metadata is nullable with errors set to ignore, the null values",
pandas/,547,should be numpy.nan values,
pandas/,561,GH21356,
pandas/,587,GH21158: If inner level json has a key with a null value,
pandas/,588,make sure it does not do a new_d.pop twice and except,
pandas/,619,GH21158: If inner level json has a key with a null value,
pandas/,620,make sure it does not do a new_d.pop twice and except,
pandas/,694,GH23843: Enhanced JSON normalize,
pandas/,699,GH23843: Enhanced JSON normalize,
pandas/,729,noqa: E501,
pandas/,743,GH 19020,
pandas/,19,GH9180,
pandas/,26,GH15132: non-ascii unicode characters,
pandas/,27,\u201d == RIGHT DOUBLE QUOTATION MARK,
pandas/,29,simulate file handle,
pandas/,36,simulate string,
pandas/,44,GH9180,
pandas/,56,GH15096: escaped characters in columns and data,
pandas/,66,Basic test that read_json(chunks=True) gives the same result as,
pandas/,67,read_json(chunks=False),
pandas/,68,GH17048: memory usage when lines=True,
pandas/,84,Test reading line-format JSON to Series with chunksize param,
pandas/,97,Other tests check that the final result of read_json(chunksize=True),
pandas/,98,is correct. This checks the intermediate chunks.,
pandas/,11,CSV versions of test xpt files were obtained using the R foreign library,
pandas/,13,"Numbers in a SAS xport file are always float64, so need to convert",
pandas/,14,before making comparisons.,
pandas/,34,Tests with DEMO_G.xpt (all numeric file),
pandas/,36,Compare to this,
pandas/,40,Read full file,
pandas/,45,Test reading beyond end of file,
pandas/,51,Test incremental read with `read` method.,
pandas/,57,Test incremental read with `get_chunk` method.,
pandas/,63,Test read in loop,
pandas/,71,Read full file with `read_sas` method,
pandas/,76,Tests with DEMO_G.xpt using index (all numeric file),
pandas/,78,Compare to this,
pandas/,83,Read full file,
pandas/,87,Test incremental read with `read` method.,
pandas/,93,Test incremental read with `get_chunk` method.,
pandas/,100,"Test with DEMO_G.xpt, reading full file incrementally",
pandas/,114,Test with SSHSV1_A.xpt,
pandas/,116,Compare to this,
pandas/,124,"Test with SSHSV1_A.xpt, read as a binary file",
pandas/,126,Compare to this,
pandas/,134,Test with DRXFCD_G.xpt (contains text and numeric variables),
pandas/,136,Compare to this,
pandas/,143,"Test with paxraw_d_short.xpt, a shortened version of:",
pandas/,144,http://wwwn.cdc.gov/Nchs/Nhanes/2005-2006/PAXRAW_D.ZIP,
pandas/,145,This file has truncated floats (5 bytes in this case).,
pandas/,147,GH 11713,
pandas/,16,https://github.com/cython/cython/issues/1720,
pandas/,93,github #13654,
pandas/,106,github #14734,
pandas/,168,Support of different SAS date/datetime formats (PR #15871),
pandas/,175,GH 19732: Timestamps imported from sas will incur floating point errors,
pandas/,181,Regression test for #21616,
pandas/,184,The two columns CYL and WGT in cars.sas7bdat have column,
pandas/,185,width < 8 and only contain integral values.,
pandas/,186,Test that pandas doesn't corrupt the numbers by adding,
pandas/,187,decimals.,
pandas/,197,Test for looking for column information in more places (PR #22628),
pandas/,206,Regression test for issue #16615. (PR #22628),
pandas/,213,Check if the SAS file has zero variables (PR #18184),
pandas/,11,see gh-14947,
pandas/,22,see gh-24548,
pandas/,111,GH 29854,
pandas/,112,TODO: Fix this once newer version of openpyxl fixes the bug,
pandas/,26,XXX: RGB colors not supported in xlwt,
pandas/,50,XXX: should find a better way to check equality,
pandas/,59,use bold iff there is custom style attached to the cell,
pandas/,67,Prepare spreadsheets,
pandas/,82,"For other engines, we only smoke test",
pandas/,87,(1) compare DataFrame.to_excel and Styler.to_excel when unstyled,
pandas/,96,ensure iteration actually happened:,
pandas/,99,(2) check styling with default converter,
pandas/,101,"XXX: openpyxl (as at 2.4) prefixes colors with 00, xlsxwriter with FF",
pandas/,109,XXX: this isn't as strong a test as ideal; we should,
pandas/,110,confirm that differences are exclusive,
pandas/,151,(3) check styling with custom converter,
pandas/,55,GH#30162,
pandas/,16,Test that column formats are applied to cells. Test for issue #9167.,
pandas/,17,Applicable to xlsxwriter only.,
pandas/,19,Ignore the openpyxl lxml warning.,
pandas/,29,Add a number format to col B and ensure it is applied to cells.,
pandas/,41,compat,
pandas/,44,Get the number format from the cell.,
pandas/,48,compat,
pandas/,48,Roll back option change,
pandas/,61,xref gh-12292,
pandas/,90,GH 12870 : pass down column names associated with,
pandas/,91,keyword argument names,
pandas/,115,see gh-9450,
pandas/,116,,
pandas/,117,"Test reading multiple sheets, from a runtime",
pandas/,118,created Excel file with multiple sheets.,
pandas/,140,see gh-12453,
pandas/,194,see gh-4679,
pandas/,201,Empty name case current read in as,
pandas/,202,"unnamed levels, not Nones.",
pandas/,239,"see gh-11544, gh-12051",
pandas/,262,GH 30986,
pandas/,306,GH 26080,
pandas/,309,purposely using two arrays to prevent memory issues while testing,
pandas/,360,test roundtrip,
pandas/,374,GH 3611,
pandas/,383,GH 6573,
pandas/,392,GH 8825 Pandas Series should provide to_excel method,
pandas/,426,Test np.int values read come back as int,
pandas/,427,(rather than float which is Excel's format).,
pandas/,440,Test with convert_float=False comes back as float.,
pandas/,449,Test np.float values read come back as float.,
pandas/,460,Test np.bool values read come back as float.,
pandas/,487,Test writing to separate sheets,
pandas/,510,column aliases,
pandas/,528,test index_label,
pandas/,562,"take 'A' and 'B' as indexes (same row as cols 'C', 'D')",
pandas/,583,"datetime.date, not sure what to test here exactly",
pandas/,595,see gh-4133,
pandas/,596,,
pandas/,597,Excel output format strings,
pandas/,637,"Since the reader returns a datetime object for dates,",
pandas/,638,we need to use df_expected to check the result.,
pandas/,642,see gh-19242,
pandas/,643,,
pandas/,644,Test writing Interval without labels.,
pandas/,658,see gh-19242,
pandas/,659,,
pandas/,660,Test writing Interval with labels.,
pandas/,676,"see gh-19242, gh-9155",
pandas/,677,,
pandas/,678,Test writing timedelta to xls.,
pandas/,712,round trip,
pandas/,718,GH13511,
pandas/,729,"Test for Issue 11328. If column indices are integers, make",
pandas/,730,sure they are handled correctly for either setting of,
pandas/,731,merge_cells,
pandas/,743,round trip,
pandas/,753,try multiindex with dates,
pandas/,766,Test writing and re-reading a MI without the index. GH 5616.,
pandas/,768,Initial non-MI frame.,
pandas/,771,Add a MI.,
pandas/,776,Write out to Excel without the index.,
pandas/,779,Read it back in.,
pandas/,783,Test that it is the same as the initial frame.,
pandas/,805,Avoid mixed inferred_type.,
pandas/,843,FIXME: dont leave commented-out,
pandas/,844,"def test_to_excel_header_styling_xls(self, engine, ext):",
pandas/,846,import StringIO,
pandas/,847,s = StringIO(,
pandas/,848,"""""""Date,ticker,type,value",
pandas/,849,"2001-01-01,x,close,12.2",
pandas/,850,"2001-01-01,x,open ,12.1",
pandas/,851,"2001-01-01,y,close,12.2",
pandas/,852,"2001-01-01,y,open ,12.1",
pandas/,853,"2001-02-01,x,close,12.2",
pandas/,854,"2001-02-01,x,open ,12.1",
pandas/,855,"2001-02-01,y,close,12.2",
pandas/,856,"2001-02-01,y,open ,12.1",
pandas/,857,"2001-03-01,x,close,12.2",
pandas/,858,"2001-03-01,x,open ,12.1",
pandas/,859,"2001-03-01,y,close,12.2",
pandas/,860,"2001-03-01,y,open ,12.1"""""")",
pandas/,861,"df = read_csv(s, parse_dates=[""Date""])",
pandas/,862,"pdf = df.pivot_table(values=""value"", rows=[""ticker""],",
pandas/,863,"cols=[""Date"", ""type""])",
pandas/,865,try:,
pandas/,866,import xlwt,
pandas/,867,import xlrd,
pandas/,868,except ImportError:,
pandas/,869,pytest.skip,
pandas/,871,filename = '__tmp_to_excel_header_styling_xls__.xls',
pandas/,872,"pdf.to_excel(filename, 'test1')",
pandas/,874,"wbk = xlrd.open_workbook(filename,",
pandas/,875,formatting_info=True),
pandas/,876,"assert [""test1""] == wbk.sheet_names()",
pandas/,877,ws = wbk.sheet_by_name('test1'),
pandas/,878,"assert [(0, 1, 5, 7), (0, 1, 3, 5), (0, 1, 1, 3)] == ws.merged_cells",
pandas/,879,"for i in range(0, 2):",
pandas/,880,"for j in range(0, 7):",
pandas/,881,"xfx = ws.cell_xf_index(0, 0)",
pandas/,882,cell_xf = wbk.xf_list[xfx],
pandas/,883,font = wbk.font_list,
pandas/,884,assert 1 == font[cell_xf.font_index].bold,
pandas/,885,assert 1 == cell_xf.border.top_line_style,
pandas/,886,assert 1 == cell_xf.border.right_line_style,
pandas/,887,assert 1 == cell_xf.border.bottom_line_style,
pandas/,888,assert 1 == cell_xf.border.left_line_style,
pandas/,889,assert 2 == cell_xf.alignment.hor_align,
pandas/,890,os.remove(filename),
pandas/,891,"def test_to_excel_header_styling_xlsx(self, engine, ext):",
pandas/,892,import StringIO,
pandas/,893,s = StringIO(,
pandas/,894,"""""""Date,ticker,type,value",
pandas/,895,"2001-01-01,x,close,12.2",
pandas/,896,"2001-01-01,x,open ,12.1",
pandas/,897,"2001-01-01,y,close,12.2",
pandas/,898,"2001-01-01,y,open ,12.1",
pandas/,899,"2001-02-01,x,close,12.2",
pandas/,900,"2001-02-01,x,open ,12.1",
pandas/,901,"2001-02-01,y,close,12.2",
pandas/,902,"2001-02-01,y,open ,12.1",
pandas/,903,"2001-03-01,x,close,12.2",
pandas/,904,"2001-03-01,x,open ,12.1",
pandas/,905,"2001-03-01,y,close,12.2",
pandas/,906,"2001-03-01,y,open ,12.1"""""")",
pandas/,907,"df = read_csv(s, parse_dates=[""Date""])",
pandas/,908,"pdf = df.pivot_table(values=""value"", rows=[""ticker""],",
pandas/,909,"cols=[""Date"", ""type""])",
pandas/,910,try:,
pandas/,911,import openpyxl,
pandas/,912,from openpyxl.cell import get_column_letter,
pandas/,913,except ImportError:,
pandas/,914,pytest.skip,
pandas/,915,if openpyxl.__version__ < '1.6.1':,
pandas/,916,pytest.skip,
pandas/,917,# test xlsx_styling,
pandas/,918,filename = '__tmp_to_excel_header_styling_xlsx__.xlsx',
pandas/,919,"pdf.to_excel(filename, 'test1')",
pandas/,920,wbk = openpyxl.load_workbook(filename),
pandas/,921,"assert [""test1""] == wbk.get_sheet_names()",
pandas/,922,ws = wbk.get_sheet_by_name('test1'),
pandas/,923,"xlsaddrs = [""%s2"" % chr(i) for i in range(ord('A'), ord('H'))]",
pandas/,924,"xlsaddrs += [""A%s"" % i for i in range(1, 6)]",
pandas/,925,"xlsaddrs += [""B1"", ""D1"", ""F1""]",
pandas/,926,for xlsaddr in xlsaddrs:,
pandas/,927,cell = ws.cell(xlsaddr),
pandas/,928,assert cell.style.font.bold,
pandas/,929,assert (openpyxl.style.Border.BORDER_THIN ==,
pandas/,930,cell.style.borders.top.border_style),
pandas/,931,assert (openpyxl.style.Border.BORDER_THIN ==,
pandas/,932,cell.style.borders.right.border_style),
pandas/,933,assert (openpyxl.style.Border.BORDER_THIN ==,
pandas/,934,cell.style.borders.bottom.border_style),
pandas/,935,assert (openpyxl.style.Border.BORDER_THIN ==,
pandas/,936,cell.style.borders.left.border_style),
pandas/,937,assert (openpyxl.style.Alignment.HORIZONTAL_CENTER ==,
pandas/,938,cell.style.alignment.horizontal),
pandas/,939,"mergedcells_addrs = [""C1"", ""E1"", ""G1""]",
pandas/,940,for maddr in mergedcells_addrs:,
pandas/,941,assert ws.cell(maddr).merged,
pandas/,942,os.remove(filename),
pandas/,956,Basic test.,
pandas/,963,More complex tests with multi-index.,
pandas/,967,ensure limited functionality in 0.10,
pandas/,968,override of gh-2370 until sorted out in 0.11,
pandas/,974,This if will be removed once multi-column Excel writing,
pandas/,975,is implemented. For now fixing gh-9794.,
pandas/,989,First row taken as columns.,
pandas/,992,No NaNs.,
pandas/,998,see gh-5235,
pandas/,1005,"By default, we mangle.",
pandas/,1009,"Explicitly, we pass in the parameter.",
pandas/,1013,"see gh-11007, gh-10970",
pandas/,1023,see gh-10982,
pandas/,1035,Test for issue #5427.,
pandas/,1045,see gh-10982,
pandas/,1059,Include index in write to file,
pandas/,1060,Dont include index in write to file,
pandas/,1064,GH 31677,
pandas/,1078,see gh-18735,
pandas/,1079,,
pandas/,1080,Test the comment argument functionality to pd.read_excel.,
pandas/,1082,Create file to read in.,
pandas/,1086,Read file without comment arg.,
pandas/,1097,Re issue #18735,
pandas/,1098,Test the comment argument default to pd.read_excel,
pandas/,1100,Create file to read in,
pandas/,1104,Read file with default and explicit comment=None,
pandas/,1110,see gh-18735,
pandas/,1111,,
pandas/,1112,Test the comment argument is working as expected when used.,
pandas/,1114,Create file to read in.,
pandas/,1118,Test read_frame_comment against manually produced expected output.,
pandas/,1124,Re issue #18735,
pandas/,1125,Test that pd.read_excel ignores commented lines at the end of file,
pandas/,1130,Test that all-comment lines at EoF are ignored,
pandas/,1137,Test writing and reading datetimes. For issue #9139. (xref #9185),
pandas/,1159,see gh-7074,
pandas/,1163,"Pass engine explicitly, as there is no file path to infer from.",
pandas/,1173,see gh-8188.,
pandas/,1191,see gh-13347,
pandas/,1202,see gh-15160,
pandas/,1226,see GH-27006,
pandas/,1236,need to convert PeriodIndexes to standard Indexes for assert equal,
pandas/,1247,"GH 27008, GH 7056",
pandas/,1273,xlsxwriter has preference over openpyxl if both installed,
pandas/,1283,some awkward mocking to test out dispatch and such actually works,
pandas/,38,TODO: test for openpyxl as well,
pandas/,36,Add any engines to test here,
pandas/,37,When defusedxml is installed it triggers deprecation warnings for,
pandas/,38,"xlrd and openpyxl, so catch those here",
pandas/,135,usecols as int,
pandas/,141,usecols as int,
pandas/,160,TODO add index to xls file),
pandas/,174,"TODO add index to xls, read xls ignores index name ?",
pandas/,183,TODO add index to xls file,
pandas/,249,see gh-9208,
pandas/,259,see gh-18792,
pandas/,307,TODO add index to file,
pandas/,325,GH5394 - this is why convert_float isn't vectorized,
pandas/,342,should read in correctly and infer types,
pandas/,346,"if not coercing number, then int comes in as float",
pandas/,353,check setting Index (assuming xls and xlsx are the same here),
pandas/,359,convert_float and converters should be different but both accepted,
pandas/,376,GH8212 - support for converters and missing values,
pandas/,399,should read in correctly and set types of single cells (not array,
pandas/,400,dtypes),
pandas/,405,GH 8212,
pandas/,461,see gh-20377,
pandas/,468,see gh-32207,
pandas/,486,"Test reading all sheetnames by setting sheetname to None,",
pandas/,487,Ensure a dict is returned.,
pandas/,488,See PR #9450,
pandas/,491,ensure this is not alphabetical to test order preservation,
pandas/,494,Issue 9930,
pandas/,495,Ensure sheet order is preserved,
pandas/,499,Test reading specific sheetnames by specifying a mixed list,
pandas/,500,"of integers and strings, and confirm that duplicated sheet",
pandas/,501,references (positions/names) are removed properly.,
pandas/,502,Ensure a dict is returned,
pandas/,503,See PR #9450,
pandas/,505,Explicitly request duplicates. Only the set should be returned.,
pandas/,513,"Test reading all sheetnames by setting sheetname to None,",
pandas/,514,In the case where some sheets are blank.,
pandas/,515,Issue #11711,
pandas/,521,GH6403,
pandas/,532,GH 10001 : pandas.ExcelFile ignore parse_dates=False,
pandas/,562,doc,
pandas/,594,"Bucket ""pandas-test"" created in tests/io/conftest.py",
pandas/,604,ignore warning from old xlrd,
pandas/,608,FILE,
pandas/,615,fails on some systems,
pandas/,625,GH12655,
pandas/,640,GH12655,
pandas/,654,GH31467,
pandas/,659,should not throw an exception because the passed file was closed,
pandas/,666,Test reading times with and without milliseconds. GH5945.,
pandas/,692,see gh-4679,
pandas/,699,"""mi_column"" sheet",
pandas/,713,"""mi_index"" sheet",
pandas/,720,"""both"" sheet",
pandas/,726,"""mi_index_name"" sheet",
pandas/,733,"""mi_column_name"" sheet",
pandas/,739,see gh-11317,
pandas/,740,"""name_with_int"" sheet",
pandas/,746,"""both_name"" sheet",
pandas/,753,"""both_skiprows"" sheet",
pandas/,760,see gh-11733.,
pandas/,761,,
pandas/,762,Don't try to parse a header name if there isn't one.,
pandas/,771,see gh-4679,
pandas/,774,"We detect headers to determine if index names exist, so",
pandas/,775,"that ""index"" name in the ""names"" version of the data will",
pandas/,776,now be interpreted as rows that include null data.,
pandas/,810,"The analogous versions of the ""names"" version data",
pandas/,811,where there are explicitly no names for the indices.,
pandas/,843,GH 6114,
pandas/,850,GH 8011,
pandas/,856,GH 4903,
pandas/,880,GH 16645,
pandas/,888,GH 16645,
pandas/,896,GH 16645,
pandas/,902,GH 12157,
pandas/,948,13967,
pandas/,969,gh-25453,
pandas/,991,gh-17964,
pandas/,1000,For some reason pd.read_excel has no attribute 'keywords' here.,
pandas/,1001,Skipping based on read_ext instead.,
pandas/,1027,For some reason pd.read_excel has no attribute 'keywords' here.,
pandas/,1028,Skipping based on read_ext instead.,
pandas/,1036,doc,
pandas/,1057,parses okay,
pandas/,1063,GH 26566,
pandas/,1071,GH 15914,
pandas/,1081,GH 23809,
pandas/,1084,should not produce a segmentation violation,
pandas/,16,MultiIndex as columns is not yet implemented 9794,
pandas/,41,MultiIndex as index works so assert no error #9794,
pandas/,4,Looks like tree.getiterator is deprecated in favor of tree.iter,
pandas/,20,the invalid_value_type.ods required manually editing,
pandas/,21,of the included content.xml file,
pandas/,27,Also test reading tables from an text OpenDocument file,
pandas/,28,(.odt),
pandas/,42,GH-27676,
pandas/,43,Specifying a non-existent sheet_name parameter should throw an error,
pandas/,44,with the sheet name.,
pandas/,19,test with utf-8 and encoding option (GH 7061),
pandas/,26,test with utf-8 without encoding option,
pandas/,33,it works!,
pandas/,64,GH Bug #9402,
pandas/,191,GH 14184,
pandas/,209,GH 10660,
pandas/,243,see gh-14484,
pandas/,244,,
pandas/,245,"If an index is repeated in subsequent rows, it should be",
pandas/,246,replaced with a blank in the created table. This should,
pandas/,247,ONLY happen if all higher order indices (to the left) are,
pandas/,248,"equal too. In this test, 'c' has to be printed both times",
pandas/,249,because the higher order index 'A' != 'B'.,
pandas/,350,default: escape=True,
pandas/,442,GH 25436,
pandas/,448,test when only the caption is provided,
pandas/,466,test when only the label is provided,
pandas/,484,test when the caption and the label are provided,
pandas/,504,GH 25436,
pandas/,510,test when only the caption is provided,
pandas/,532,test when only the label is provided,
pandas/,554,test when the caption and the label are provided,
pandas/,601,GH 7124,
pandas/,626,GH 7124,
pandas/,672,GH 12031,
pandas/,706,GH 16707,
pandas/,721,GH 16707,
pandas/,739,GH 18667,
pandas/,773,GH 14249,
pandas/,794,GH 19981,
pandas/,809,GH 18326,
pandas/,826,GH 18669,
pandas/,844,GH 21625,
pandas/,856,GH 22270,
pandas/,869,GH 16718,
pandas/,15,noqa  # isort:skip,
pandas/,52,gh-19824,
pandas/,84,shallow,
pandas/,117,it worked?,
pandas/,123,An index but no columns,
pandas/,125,A column but no index,
pandas/,127,No IndexError raised?,
pandas/,136,it worked?,
pandas/,141,order is deterministic,
pandas/,159,https://github.com/pandas-dev/pandas/pull/12090#issuecomment-180695902,
pandas/,199,https://github.com/pandas-dev/pandas/issues/11655,
pandas/,237,https://github.com/pandas-dev/pandas/issues/11655,
pandas/,275,https://github.com/pandas-dev/pandas/issues/12125,
pandas/,276,smoke test for _translate,
pandas/,304,default,
pandas/,357,GH 19861,
pandas/,358,Smoke test for applymap,
pandas/,381,https://github.com/pandas-dev/pandas/issues/25858,
pandas/,382,Checks styler.applymap works with multindex when codes are provided,
pandas/,400,GH 17474,
pandas/,415,GH 17474,
pandas/,444,GH 17474,
pandas/,727,See https://github.com/pandas-dev/pandas/pull/14757,
pandas/,1022,GH 21527 28358,
pandas/,1040,GH 21527 28358,
pandas/,1048,GH 21527 28358,
pandas/,1064,GH 21527 28358,
pandas/,1085,GH 21527 28358,
pandas/,1098,GH 31345,
pandas/,1144,See https://github.com/pandas-dev/pandas/issues/16780,
pandas/,1194,trim=True,
pandas/,1202,max(df) = min(-df),
pandas/,1236,separate since we can't negate the strs,
pandas/,1276,Issue #13257,
pandas/,1562,GH 14194,
pandas/,1563,single unnamed index,
pandas/,1571,single named index,
pandas/,1574,2 header levels,
pandas/,1579,only 1 header levels,
pandas/,1583,GH 14194,
pandas/,1591,tests for 'a' and '0',
pandas/,1594,check for blank header rows,
pandas/,1599,tests for 'a' and '0',
pandas/,1602,check for blank header rows,
pandas/,1607,GH 14194,
pandas/,1608,test hiding single column,
pandas/,1614,"col A, row 1",
pandas/,1615,"col B, row 1",
pandas/,1619,"col A, row 1",
pandas/,1620,"col B, row 1",
pandas/,1622,test hiding mulitiple columns,
pandas/,1626,"col A, row 1",
pandas/,1627,"col B, row 1",
pandas/,1630,GH 14194,
pandas/,1631,setup dataframe with multiple column levels and indices,
pandas/,1640,column headers,
pandas/,1644,indices,
pandas/,1646,data,
pandas/,1652,"hide top column level, which hides both columns",
pandas/,1654,b,
pandas/,1655,0,
pandas/,1656,3,
pandas/,1657,index,
pandas/,1659,hide first column only,
pandas/,1661,b,
pandas/,1662,0,
pandas/,1663,3,
pandas/,1667,hide second column and index,
pandas/,1669,index,
pandas/,1670,b,
pandas/,1671,0,
pandas/,1672,1,
pandas/,1673,4,
pandas/,1684,"Test with an argument that is a (callable, keyword_name) pair.",
pandas/,1769,GH 12145,
pandas/,1776,GH 28869,
pandas/,1787,catch accidental removal of a block,
pandas/,79,wrapper to test single str,
pandas/,134,dataframe / series,
pandas/,160,column MultiIndex,
pandas/,161,GH 15996,
pandas/,188,GH 10491,
pandas/,196,"still there, just disabled",
pandas/,200,able to re-set,
pandas/,204,smoke test that it works,
pandas/,8,TODO(py27): replace with mock,
pandas/,33,Ensures that when sys.stdout.encoding or sys.stdin.encoding is used when,
pandas/,34,they have values filled.,
pandas/,35,GH 21552,
pandas/,44,GH 21552,
pandas/,63,When both the stdout/stdin encoding and locale preferred encoding checks,
pandas/,64,"fail (or return 'ascii', we should default to the sys default encoding.",
pandas/,65,GH 21552,
pandas/,19,"see gh-18676, https://bugs.python.org/issue32255",
pandas/,20,,
pandas/,21,"Python's CSV library adds an extraneous '""""'",
pandas/,22,before the newline when the NaN-value is in,
pandas/,23,"the first row. Otherwise, only the newline",
pandas/,24,character is added. This behavior is inconsistent,
pandas/,25,and was patched in https://bugs.python.org/pull_request4672.,
pandas/,47,GH17097,
pandas/,51,the default to_csv encoding is uft-8.,
pandas/,64,1=QUOTE_ALL,
pandas/,92,QUOTE_ALL,
pandas/,100,no escapechar set,
pandas/,110,QUOTE_ALL,
pandas/,123,QUOTE_NONE,
pandas/,134,see gh-781,
pandas/,156,see gh-11553: testing if decimal is taken into account for '0.0',
pandas/,163,same but for an index,
pandas/,166,same for a multi-index,
pandas/,170,testing if float_format is taken into account for the index,
pandas/,171,GH 11553,
pandas/,178,same for a multi-index,
pandas/,182,see gh-11553,
pandas/,183,,
pandas/,184,Testing if NaN values are correctly represented in the index.,
pandas/,192,now with an index containing only NaNs,
pandas/,200,check if na_rep parameter does not break anything when no NaN,
pandas/,208,GH 29975,
pandas/,209,Make sure full na_rep shows up when a dtype is provided,
pandas/,217,GH 10209,
pandas/,266,see gh-7791,
pandas/,267,,
pandas/,268,Testing if date_format parameter is taken into account,
pandas/,269,for multi-indexed DataFrames.,
pandas/,280,see gh-6618,
pandas/,332,see gh-19589,
pandas/,339,GH 10813,
pandas/,353,GH 10813,
pandas/,367,GH 20353,
pandas/,371,case 1: The default line terminator(=os.linesep)(PR 21406),
pandas/,387,case 2: LF as line terminator,
pandas/,393,case 3: CRLF as line terminator,
pandas/,394,'line_terminator' should not change inner element,
pandas/,401,GH 20353,
pandas/,405,case 1: The default line terminator(=os.linesep)(PR 21406),
pandas/,421,case 2: LF as line terminator,
pandas/,427,case 3: CRLF as line terminator,
pandas/,428,'line_terminator' should not change inner element,
pandas/,440,GH 21561,
pandas/,462,GH 21696,
pandas/,478,see gh-21696,
pandas/,479,see gh-20353,
pandas/,494,see gh-15008,
pandas/,500,We'll complete file extension subsequently.,
pandas/,506,xz --> .xz,
pandas/,507,bz2 --> .bz2,
pandas/,521,GH 26023,
pandas/,532,GH 26023,
pandas/,546,GH 26023,
pandas/,563,see gh-25099,
pandas/,574,GH 6783,
pandas/,588,https://github.com/pandas-dev/pandas/issues/31447,
pandas/,56,make sure it works,
pandas/,105,https://github.com/pandas-dev/pandas/issues/21056,
pandas/,147,it works!,
pandas/,153,GH11761,
pandas/,195,For verbose always      ^ setting  ^ summarize ^ full output,
pandas/,204,max_cols not exceeded,
pandas/,212,setting truncates,
pandas/,219,setting wouldn't truncate,
pandas/,228,"Ensure memory usage is displayed, when asserted, on the last line",
pandas/,245,display memory usage case,
pandas/,250,do not display memory usage case,
pandas/,258,"memory usage is a lower bound, so print it as XYZ+ MB",
pandas/,264,"excluded column with object dtype, so estimate is accurate",
pandas/,267,Test a DataFrame with duplicate columns,
pandas/,285,Ensure df size is as expected,
pandas/,286,(cols * rows * bytes) + index size,
pandas/,291,Ensure number of cols in memory_usage is the same as df,
pandas/,292,index=True; default,
pandas/,295,assert deep works only on object,
pandas/,298,test for validity,
pandas/,342,sys.getsizeof will call the .memory_usage with,
pandas/,343,"deep=True, and add on some GC overhead",
pandas/,378,GH 14308,
pandas/,379,memory usage introspection should not materialize .values,
pandas/,395,high upper bound,
pandas/,400,GH14298,
pandas/,101,_repr_html_,
pandas/,109,1. <class>,
pandas/,110,2. Index,
pandas/,111,3. Columns,
pandas/,112,4. dtype,
pandas/,113,5. memory usage,
pandas/,114,6. trailing newline,
pandas/,120,Check header row,
pandas/,125,Make sure each row has this ... in the same place,
pandas/,243,FIXME: remove in future version after deprecation cycle,
pandas/,244,Non-regression test for:,
pandas/,245,https://github.com/pandas-dev/pandas/issues/31532,
pandas/,253,default None,
pandas/,266,GH 6839: validation case,
pandas/,308,"for the case of Index, where the repr is traditional rather than",
pandas/,309,stylized,
pandas/,315,https://docs.python.org/3/reference/datamodel.html#object.__repr__,
pandas/,316,"""...The return value must be a string object.""",
pandas/,318,"(str on py2.x, str (unicode) on py3)",
pandas/,324,both py2 / 3,
pandas/,364,"in non interactive mode, there can be no dependency on the",
pandas/,365,result of terminal auto size detection,
pandas/,375,see gh-21180,
pandas/,399,regular columns,
pandas/,406,GH 22984 ensure entire window is filled,
pandas/,416,dataframe with last column very wide -> check it is not used to,
pandas/,417,determine size of truncation (...) column,
pandas/,450,"Out off max_columns boundary, but no extending",
pandas/,451,since not exceeding width,
pandas/,456,out vertical bounds can not result in expanded repr,
pandas/,460,"width=None in terminal, auto detection",
pandas/,478,default setting no truncation even if above min_rows,
pandas/,484,default of max_rows 60 triggers truncation if above,
pandas/,489,truncated after first two rows,
pandas/,496,"when set to None, follow value of max_rows",
pandas/,501,"when set value higher as max_rows, use the minimum",
pandas/,506,max_rows of None -> never truncate,
pandas/,511,GH 7856,
pandas/,537,GH 9784 - dont truncate when calling DataFrame.to_string,
pandas/,560,the display option has no effect on the to_string method,
pandas/,577,Arbitrary large factor to exceed term width,
pandas/,584,Wrap around with None,
pandas/,588,Truncate with auto detection.,
pandas/,595,Wrap around with None,
pandas/,597,Truncate vertically,
pandas/,612,it works!,
pandas/,627,it works even if sys.stdin in None,
pandas/,725,not aligned properly because of east asian width,
pandas/,727,mid col,
pandas/,739,last col,
pandas/,751,all col,
pandas/,763,column name,
pandas/,775,index,
pandas/,787,index name,
pandas/,802,all,
pandas/,817,MultiIndex,
pandas/,834,truncate,
pandas/,862,Enable Unicode option -----------------------------------------,
pandas/,865,mid col,
pandas/,877,last col,
pandas/,889,all col,
pandas/,903,column name,
pandas/,917,index,
pandas/,931,index name,
pandas/,946,all,
pandas/,961,MultiIndex,
pandas/,978,truncate,
pandas/,1010,ambiguous unicode,
pandas/,1033,this should work,
pandas/,1043,GH 8230,
pandas/,1044,col_space wasn't being applied with header=False,
pandas/,1092,"11594, 12045",
pandas/,1093,when truncated the dtypes of the splits can differ,
pandas/,1095,11594,
pandas/,1108,12045,
pandas/,1117,GH#13000,
pandas/,1127,GH 12211,
pandas/,1195,GH19030,
pandas/,1196,Check that high-precision time values for the end of day are,
pandas/,1197,included in repr for DatetimeIndex,
pandas/,1224,representing infs poses no problems,
pandas/,1372,GH 2850,
pandas/,1382,multi-index,
pandas/,1391,index,
pandas/,1400,with append (this failed in 0.12),
pandas/,1409,all-nan in mi,
pandas/,1420,partial nan in mi,
pandas/,1450,big mixed,
pandas/,1467,print in right order,
pandas/,1479,"expected = ['B', 'A']",
pandas/,1480,assert header == expected,
pandas/,1516,"GH 16839, GH 13032",
pandas/,1520,Leading space is expected for positive numbers.,
pandas/,1529,"GH 13998, GH 22505",
pandas/,1604,GH 21625,
pandas/,1609,GH 22270,
pandas/,1618,sadness per above,
pandas/,1635,but not all exactly zero,
pandas/,1649,"GH #25514, 25745",
pandas/,1681,it works!,
pandas/,1752,Issue #24861,
pandas/,1793,Issue #23614,
pandas/,1998,GH#21746 For tests inside a terminal (i.e. not CI) we need to detect,
pandas/,1999,"the terminal size to ensure that we try to print something ""too big""",
pandas/,2004,Long,
pandas/,2011,Wide,
pandas/,2021,GH #6939,
pandas/,2043,test verbose overrides,
pandas/,2044,"fmt.set_option('display.max_info_columns', 4)  # exceeded",
pandas/,2049,Long,
pandas/,2056,Wide,
pandas/,2077,info fallback,
pandas/,2087,obviously simplified,
pandas/,2090,just don't die,
pandas/,2118,GH 12615,
pandas/,2171,pass float_format,
pandas/,2178,empty string,
pandas/,2185,name and length,
pandas/,2206,but don't count NAs as floats,
pandas/,2232,GH 11729 Test index=False option,
pandas/,2241,should not raise exception,
pandas/,2244,not aligned properly because of east asian width,
pandas/,2246,unicode index,
pandas/,2251,unicode values,
pandas/,2256,both,
pandas/,2263,unicode footer,
pandas/,2273,MultiIndex,
pandas/,2286,"object dtype, shorter than unicode repr",
pandas/,2293,"object dtype, longer than unicode repr",
pandas/,2305,truncate,
pandas/,2324,Emable Unicode option -----------------------------------------,
pandas/,2327,unicode index,
pandas/,2335,unicode values,
pandas/,2343,both,
pandas/,2353,unicode footer,
pandas/,2368,MultiIndex,
pandas/,2382,"object dtype, shorter than unicode repr",
pandas/,2390,"object dtype, longer than unicode repr",
pandas/,2403,truncate,
pandas/,2422,ambiguous unicode,
pandas/,2457,nat in index,
pandas/,2463,nat in summary,
pandas/,2479,GH19030,
pandas/,2480,Check that high-precision time values for the end of day are,
pandas/,2481,included in repr for DatetimeIndex,
pandas/,2499,GH2146,
pandas/,2501,adding NaTs,
pandas/,2508,with frac seconds,
pandas/,2514,rounding?,
pandas/,2533,neg time,
pandas/,2546,no boxing of the actual elements,
pandas/,2559,GH 12615,
pandas/,2585,periods with mixed freq,
pandas/,2600,GH 7101,
pandas/,2602,doc example (indexing.rst),
pandas/,2604,multi-index,
pandas/,2624,index,
pandas/,2638,Make sure #8532 is fixed,
pandas/,2714,gh-7117,
pandas/,2731,default setting no truncation even if above min_rows,
pandas/,2736,default of max_rows 60 triggers truncation if above,
pandas/,2740,truncated after first two rows,
pandas/,2745,"when set to None, follow value of max_rows",
pandas/,2749,"when set value higher as max_rows, use the minimum",
pandas/,2753,max_rows of None -> never truncate,
pandas/,2804,GH 16718,
pandas/,2830,Issue #9764,
pandas/,2832,In case default display precision changes:,
pandas/,2834,DataFrame example from issue #9764,
pandas/,2903,GH 10451,
pandas/,2905,need both a number > 1e6 and something that normally formats to,
pandas/,2906,having length > display.precision + 6,
pandas/,3045,10170,
pandas/,3046,make sure that we are consistently display date formatting,
pandas/,3221,Issue #26660,
pandas/,41,No colon,
pandas/,48,Unclosed string fail,
pandas/,49,Invalid size,
pandas/,63,TODO: we should be checking that in other cases no warnings are raised,
pandas/,188,invariant to inherited size,
pandas/,71,check that col_space affects HTML generation,
pandas/,72,and be very brittle about it.,
pandas/,82,"GH 3547, to_html regards empty string labels as repeated labels",
pandas/,103,GH 28663,
pandas/,111,GH 12031,
pandas/,137,GH 8452,
pandas/,173,Test that ... appears in a middle level,
pandas/,178,GH 14882 - Issue on truncation with odd length DataFrame,
pandas/,234,it works,
pandas/,248,issue-28469,
pandas/,256,issue-25955,
pandas/,309,TODO: split this test,
pandas/,393,GH 17527,
pandas/,402,TODO: split this test,
pandas/,431,must be the same result as normal index,
pandas/,449,GH 14998,
pandas/,457,GH 6131,
pandas/,478,GH 22579,
pandas/,523,"GH 22747, GH 22579",
pandas/,582,"GH 22747, GH 22579",
pandas/,605,GH 15019,
pandas/,627,GH 22783,
pandas/,656,GH 16493,
pandas/,663,GH 8496,
pandas/,677,"GH 21625, GH 22270",
pandas/,689,GH 2679,
pandas/,705,regression case,
pandas/,710,see gh-17004,
pandas/,720,GH 25608,
pandas/,729,GH 17280,
pandas/,740,GH 25941,
pandas/,753,gh-27991,
pandas/,755,default setting no truncation even if above min_rows,
pandas/,761,default of max_rows 60 triggers truncation if above,
pandas/,771,truncated after first two rows,
pandas/,773,"when set to None, follow value of max_rows",
pandas/,775,"when set value higher as max_rows, use the minimum",
pandas/,777,max_rows of None -> never truncate,
pandas/,782,gh-27991,
pandas/,17,FONT,
pandas/,18,- name,
pandas/,28,- family,
pandas/,37,- size,
pandas/,47,- bold,
pandas/,59,- italic,
pandas/,62,- underline,
pandas/,66,- strike,
pandas/,76,- color,
pandas/,80,- shadow,
pandas/,90,FILL,
pandas/,91,"- color, fillType",
pandas/,104,BORDER,
pandas/,105,- style,
pandas/,167,- color,
pandas/,187,ALIGNMENT,
pandas/,188,- horizontal,
pandas/,193,- vertical,
pandas/,199,- wrap_text,
pandas/,204,NUMBER FORMAT,
pandas/,271,see gh-18392,
pandas/,298,see gh-18392,
pandas/,211,Issue #11981,
pandas/,231,Issue #11981,
pandas/,109,see gh-9770,
pandas/,127,"see gh-18071, gh-24130",
pandas/,73,"see gh-3611: with an odd float format, we can't match",
pandas/,74,"the string ""999.0"" exactly but still need float matching",
pandas/,275,see gh-4318: passing na_values=None and,
pandas/,276,"keep_default_na=False yields 'None"" as a na_value",
pandas/,301,see gh-19227,
pandas/,312,see gh-19227,
pandas/,313,,
pandas/,314,Scalar values shouldn't cause the parsing to crash or fail.,
pandas/,324,see gh-19227,
pandas/,378,Trailing columns should be all NaN.,
pandas/,407,see gh-12224,
pandas/,433,see gh-14203,
pandas/,456,see gh-14983,
pandas/,463,see gh-15835,
pandas/,476,see gh-5239,
pandas/,477,,
pandas/,478,Don't parse NA-values in index unless na_filter=True,
pandas/,488,see gh-17128,
pandas/,492,Don't fail with OverflowError with inf's and integer index column.,
pandas/,502,see gh-20377,
pandas/,506,na_filter=True --> missing value becomes NaN.,
pandas/,507,na_filter=False --> missing value remains empty string.,
pandas/,544,see gh-21131,
pandas/,28,constant,
pandas/,31,Strategy for hypothesis,
pandas/,39,Regression test for gh-4678,
pandas/,40,,
pandas/,41,Make sure thousands separator and,
pandas/,42,date parsing do not conflict.,
pandas/,195,Python can sometimes be flaky about how,
pandas/,196,"the aggregated columns are entered, so",
pandas/,197,this standardizes the order.,
pandas/,424,Python can sometimes be flaky about how,
pandas/,425,"the aggregated columns are entered, so",
pandas/,426,this standardizes the order.,
pandas/,583,see gh-3071,
pandas/,635,see gh-3062,
pandas/,693,Bug in https://github.com/dateutil/dateutil/issues/217,
pandas/,694,"has been addressed, but we just don't pass in the `yearfirst`",
pandas/,756,Out of order.,
pandas/,822,See gh-1693,
pandas/,1071,see gh-5636,
pandas/,1101,if we have an invalid date make sure that we handle this with,
pandas/,1102,and w/o the cache properly,
pandas/,1117,see gh-2263,
pandas/,1160,see gh-14066,
pandas/,1266,Python can sometimes be flaky about how,
pandas/,1267,"the aggregated columns are entered, so",
pandas/,1268,this standardizes the order.,
pandas/,1354,see gh-10245,
pandas/,1387,see gh-6428,
pandas/,1412,see gh-2697,
pandas/,1413,,
pandas/,1414,"Date parsing should fail, so we leave the data untouched",
pandas/,1415,(i.e. float precision should remain unchanged).,
pandas/,1423,see gh-22256,
pandas/,1459,%d/%m/%Y; month > 12 thus replacement,
pandas/,1462,%m/%d/%Y; day > 12 thus there will be no replacement,
pandas/,1465,%d/%m/%Y; dayfirst==True thus replacement,
pandas/,1543,gh-31251 column names provided in parse_dates could be missing.,
pandas/,28,see gh-27779,
pandas/,44,see gh-27779,
pandas/,58,see gh-6114,
pandas/,392,see gh-2539,
pandas/,402,See gh-7773,
pandas/,436,see gh-16338,
pandas/,446,see gh-7757,
pandas/,494,see gh-18062,
pandas/,506,see gh-23687,
pandas/,507,,
pandas/,508,"When specifying a multi-index header, make sure that",
pandas/,509,we don't error just because one of the rows in our header,
pandas/,510,"has ALL column names containing the string ""Unnamed"". The",
pandas/,511,correct condition to check is whether the row contains,
pandas/,512,ALL columns that did not have names (and instead were given,
pandas/,513,placeholder ones).,
pandas/,535,Unnamed.,
pandas/,546,GH#6051,
pandas/,50,should this be optional?,
pandas/,129,"too many lines, see #2430 for why",
pandas/,190,handling of new line at EOF,
pandas/,309,GH5664,
pandas/,340,GH14867,
pandas/,28,see gh-12935,
pandas/,37,see gh-6607,
pandas/,41,specify C engine with unsupported options (raise),
pandas/,51,specify C-unsupported options without python-unsupported options,
pandas/,108,see gh-16530,
pandas/,27,see gh-17351,
pandas/,28,,
pandas/,29,Usecols needs to be sorted in _set_noconvert_columns based,
pandas/,30,on the test_usecols_with_parse_dates test from test_usecols.py,
pandas/,39,"self.usecols is a set, which is documented as unordered",
pandas/,40,"but in practice, a CPython set of integers is sorted.",
pandas/,41,In other implementations this assumption does not hold.,
pandas/,42,"The following code simulates a different order, which",
pandas/,43,before GH 17351 would cause the wrong columns to be,
pandas/,44,converted via the parse_dates parameter,
pandas/,77,Parsers support only length-1 decimals,
pandas/,86,see gh-13652,
pandas/,87,,
pandas/,88,This test validates that both the Python engine and C engine will,
pandas/,89,raise UnicodeDecodeError instead of C engine raising ParserError,
pandas/,90,and swallowing the exception that caused read to fail.,
pandas/,97,Stream must be binary UTF8.,
pandas/,165,see gh-8217,
pandas/,166,,
pandas/,167,Series should not be a view.,
pandas/,172,see gh-6607,
pandas/,234,see gh-21141,
pandas/,309,Too few columns.,
pandas/,425,see gh-10476,
pandas/,512,see gh-15755,
pandas/,568,see gh-12185,
pandas/,585,see gh-23509,
pandas/,611,see gh-6607,
pandas/,697,gh-3967: stopping iteration when chunksize is specified,
pandas/,819,No index names in headless data.,
pandas/,870,see gh-14545,
pandas/,908,TODO: FTP testing,
pandas/,936,Fails on some systems.,
pandas/,957,gh-2428: pls no segfault,
pandas/,958,gh-14086: raise more helpful FileNotFoundError,
pandas/,959,"GH#29233 ""File foo"" instead of ""File b'foo'""",
pandas/,969,os.chmod does not work in windows,
pandas/,971,GH 23784,
pandas/,976,make file unreadable,
pandas/,1058,see gh-2442,
pandas/,1071,https://stackoverflow.com/questions/13824840/feature-request-for-,
pandas/,1072,pandas-read-csv,
pandas/,1076,noqa,
pandas/,1089,see gh-2599,
pandas/,1136,Coercions should work without warnings.,
pandas/,1150,see gh-3866: if chunks are different types and can't,
pandas/,1151,"be coerced using numerical types, then issue warning.",
pandas/,1162,see gh-2601,
pandas/,1172,see gh-5156,
pandas/,1191,"see gh-3374, gh-6607",
pandas/,1201,see gh-10022,
pandas/,1211,see gh-10184,
pandas/,1221,see gh-10467,
pandas/,1244,see gh-9565,
pandas/,1254,see gh-12215,
pandas/,1277,"13007854817840016671868 > UINT64_MAX, so this",
pandas/,1278,will overflow and return object as the dtype.,
pandas/,1294,"13007854817840016671868 > UINT64_MAX, so attempts",
pandas/,1295,to cast to either int64 or uint64 will result in,
pandas/,1296,an OverflowError being raised.,
pandas/,1311,These numbers fall right inside the int64-uint64,
pandas/,1312,"range, so they should be parsed as string.",
pandas/,1324,These numbers fall just outside the int64-uint64,
pandas/,1325,"range, so they should be parsed as string.",
pandas/,1335,No numerical dtype can hold both negative and uint64,
pandas/,1336,"values, so they should be cast as string.",
pandas/,1347,see gh-9535,
pandas/,1365,gh-10728: WHITESPACE_LINE,
pandas/,1372,gh-10548: EAT_LINE_COMMENT,
pandas/,1379,EAT_CRNL_NOP,
pandas/,1386,EAT_COMMENT,
pandas/,1393,SKIP_LINE,
pandas/,1400,EAT_LINE_COMMENT,
pandas/,1407,IN_FIELD,
pandas/,1414,EAT_CRNL,
pandas/,1421,ESCAPED_CHAR,
pandas/,1428,ESCAPE_IN_QUOTED_FIELD,
pandas/,1435,IN_QUOTED_FIELD,
pandas/,1458,"see gh-10728, gh-10548",
pandas/,1471,see gh-12203,
pandas/,1479,Make sure that an error is still raised,
pandas/,1480,"when the ""usecols"" parameter is not provided.",
pandas/,1494,"First, check to see that the response of parser when faced with no",
pandas/,1495,"provided columns raises the correct error, with or without usecols.",
pandas/,1511,see gh-12493,
pandas/,1526,"gh-8661, gh-8679: this should ignore six lines, including",
pandas/,1527,lines with trailing whitespace and blank lines.,
pandas/,1537,gh-8983: test skipping set of rows after a row with trailing spaces.,
pandas/,1547,noqa,
pandas/,1555,see gh-6607,
pandas/,1565,see gh-9710,
pandas/,1657,see gh-6607,
pandas/,1675,Engines are verbose in different ways.,
pandas/,1682,Python engine,
pandas/,1701,Engines are verbose in different ways.,
pandas/,1705,Python engine,
pandas/,1840,see gh-2741,
pandas/,1856,see gh-13398,
pandas/,1872,see gh-5500,
pandas/,1882,see gh-16559,
pandas/,1897,see gh-16893,
pandas/,1907,gh-14418,
pandas/,1908,,
pandas/,1909,Don't close user provided file handles.,
pandas/,1919,gh-14418,
pandas/,1920,,
pandas/,1921,Don't close user provided file handles.,
pandas/,1931,see gh-15337,
pandas/,1943,see gh-15337,
pandas/,1955,"gh-16135: we want to ensure that ""tell"" and ""seek""",
pandas/,1956,aren't actually being used when we call `read_csv`,
pandas/,1957,,
pandas/,1958,"Thus, while the object may look ""invalid"" (these",
pandas/,1959,"methods are attributes of the `StringIO` class),",
pandas/,1960,it is still a valid file-object for our purposes.,
pandas/,1978,Default is True.  # Explicitly pass in.,
pandas/,1984,see gh-15925,
pandas/,1995,see gh-15925,
pandas/,2009,see gh-15925,
pandas/,2025,see gh-15086.,
pandas/,2037,see gh-24805,
pandas/,2038,,
pandas/,2039,Let's just make sure that we don't crash,
pandas/,2040,as we iteratively process all chunks.,
pandas/,2055,gh-27394,
pandas/,2066,see gh-21948,
pandas/,2067,"As of 0.25.0, read_table is undeprecated",
pandas/,2076,see gh-26545,
pandas/,2086,Gh 7072,
pandas/,2096,GH 31488,
pandas/,2110,GH 28071,
pandas/,2122,GH 26218,
pandas/,29,see gh-9205: test certain malformed input files that cause,
pandas/,30,buffer overflows in tokenizer.c,
pandas/,39,see gh-12098: src->buffer in the C parser can be freed twice leading,
pandas/,40,"to a segfault if a corrupt gzip file is read with 'read_csv', and the",
pandas/,41,buffer is filled more than once before gzip raises an Exception.,
pandas/,59,See gh-12912,
pandas/,69,see gh-8833: passing both dtype and names,
pandas/,70,resulting in an error reporting issue,
pandas/,77,base cases,
pandas/,86,fallback casting,
pandas/,99,"fallback casting, but not castable",
pandas/,113,"For each of these cases, all of the dtypes are valid, just unsupported.",
pandas/,158,test numbers between 1 and 2,
pandas/,160,25 decimal digits of precision,
pandas/,178,round-trip should match float(),
pandas/,215,see gh-2090,
pandas/,264,"too many columns, cause segfault if not careful",
pandas/,276,see gh-3453,
pandas/,290,See gh-12494,
pandas/,291,,
pandas/,292,Cause of error was that the C parser,
pandas/,293,was not increasing the buffer size when,
pandas/,294,the desired space would fill the buffer,
pandas/,295,"to capacity, which would later cause a",
pandas/,296,buffer overflow error when checking the,
pandas/,297,EOF terminator of the CSV stream.,
pandas/,311,This test is part of a bugfix for gh-13703. It attempts to,
pandas/,312,"to stress the system memory allocator, to cause it to move the",
pandas/,313,"stream buffer and either let the OS reclaim the region, or let",
pandas/,314,other memory requests of parser otherwise modify the contents,
pandas/,315,"of memory space, where it was formally located.",
pandas/,316,This test is designed to cause a `segfault` with unpatched,
pandas/,317,"`tokenizer.c`. Sometimes the test fails on `segfault`, other",
pandas/,318,"times it fails due to memory corruption, which causes the",
pandas/,319,loaded DataFrame to differ from the expected one.,
pandas/,323,Generate a large mixed-type CSV file on-the-fly (one record is,
pandas/,324,approx 1.5KiB).,
pandas/,357,Set the number of lines so that a call to `parser_trim_buffers`,
pandas/,358,is triggered: after a couple of full chunks are consumed a,
pandas/,359,relatively small 'residual' chunk would cause reallocation,
pandas/,360,within the parser.,
pandas/,364,We will use StringIO to load the CSV from this text buffer.,
pandas/,365,pd.read_csv() will iterate over the file in chunks and will,
pandas/,366,finally read a residual chunk of really small size.,
pandas/,368,Generate the expected output: manually create the dataframe,
pandas/,369,by splitting by comma and repeating the `n_lines` times.,
pandas/,375,Iterate over the CSV file in chunks of `chunksize` lines,
pandas/,381,Check for data corruption if there was no segfault,
pandas/,384,This extra test was added to replicate the fault in gh-5291.,
pandas/,385,"Force 'utf-8' encoding, so that `_string_convert` would take",
pandas/,386,a different execution branch.,
pandas/,399,see gh-14012,
pandas/,400,,
pandas/,401,The null byte ('\x00') should not be used as a,
pandas/,402,"true line terminator, escape character, or comment",
pandas/,403,"character, only as a placeholder to indicate that",
pandas/,404,none was specified.,
pandas/,405,,
pandas/,406,This test should be moved to test_common.py ONLY when,
pandas/,407,Python's csv class supports parsing '\x00'.,
pandas/,419,gh-7626 - Read only nrows of data in for large inputs (>262144b),
pandas/,433,see gh-15140,
pandas/,440,see gh-14125,
pandas/,456,see gh-15910,
pandas/,488,"skipped lines 2, 3, 4, 9",
pandas/,496,"gh-16530: the file-like need not have a ""next"" or ""__next__""",
pandas/,497,"attribute despite having an ""__iter__"" attribute.",
pandas/,498,,
pandas/,499,"NOTE: This is only true for the C engine, not Python engine.",
pandas/,516,see gh-22748,
pandas/,526,see gh-16530,
pandas/,527,,
pandas/,528,"Unfortunately, Python's CSV library can't handle",
pandas/,529,"tarfile objects (expects string, not bytes when",
pandas/,530,iterating through a file-like).,
pandas/,544,see gh-16798,
pandas/,545,,
pandas/,546,"Read from a ""CSV"" that has a column larger than 2GB.",
pandas/,558,see gh-9735: this issue is C parser-specific (bug when,
pandas/,559,parsing whitespace and characters at chunk boundary),
pandas/,560,,
pandas/,561,This test case has a field too large for the Python parser / CSV library.,
pandas/,573,gh-14418,
pandas/,574,,
pandas/,575,Don't close user provided file handles.,
pandas/,587,see gh-23779,
pandas/,601,GH 11020,
pandas/,66,This should ignore the first four lines (including comments).,
pandas/,83,Header should begin at the second non-comment line.,
pandas/,102,"Skiprows should skip the first 4 lines (including comments),",
pandas/,103,"while header should start from the second non-commented line,",
pandas/,104,starting with line 5.,
pandas/,126,see gh-4623,
pandas/,40,"quoting must be in the range [0, 3]",
pandas/,80,Sanity checking.,
pandas/,94,Test default.,
pandas/,95,"QUOTE_MINIMAL only applies to CSV writing, so no effect on reading.",
pandas/,97,"QUOTE_MINIMAL only applies to CSV writing, so no effect on reading.",
pandas/,99,QUOTE_NONE tells the reader to do no special handling,
pandas/,100,of quote characters and leave them alone.,
pandas/,102,QUOTE_NONNUMERIC tells the reader to cast,
pandas/,103,all non-quoted fields to float,
pandas/,131,see gh-14477,
pandas/,142,see gh-22789.,
pandas/,147,Re-balance the quoting and read in without errors.,
pandas/,93,From Thomas Kluyver:,
pandas/,94,,
pandas/,95,"Apparently, some non-space filler characters can be seen, this is",
pandas/,96,supported by specifying the 'delimiter' character:,
pandas/,97,,
pandas/,98,http://publib.boulder.ibm.com/infocenter/dmndhelp/v6r1mx/index.jsp?topic=/com.ibm.wbit.612.help.config.doc/topics/rfixwidth.html,
pandas/,225,see gh-7079,
pandas/,239,"infer_nrows --> colspec == [(2, 3), (5, 6)]",
pandas/,241,infer_nrows > number of rows,
pandas/,246,see gh-15138,
pandas/,258,see gh-3594,
pandas/,259,,
pandas/,260,"Turns out ""T060"" is parsable as a datetime slice!",
pandas/,305,noqa,
pandas/,363,see gh-6114,
pandas/,377,File with all values.,
pandas/,394,File with missing values.,
pandas/,411,File with spaces in columns.,
pandas/,430,File with spaces and missing values in columns.,
pandas/,449,Completely messed up file.,
pandas/,524,see gh-11256,
pandas/,567,see gh-16772,
pandas/,20,see gh-17333,
pandas/,21,,
pandas/,22,"csv.Sniffer in Python treats ""o"" as separator.",
pandas/,33,see gh-15925 (comment),
pandas/,43,see gh-15925 (comment),
pandas/,117,see gh-6607: sniff separator,
pandas/,127,see gh-6607,
pandas/,146,see gh-6607,
pandas/,168,see gh-6607,
pandas/,193,see gh-6893,
pandas/,208,see gh-6971,
pandas/,214,The stray footer line should not mess with the,
pandas/,215,casting of the first two lines if we skip it.,
pandas/,232,see gh-3404,
pandas/,247,see gh-13374,
pandas/,259,"We expect no match, so there should be an assertion",
pandas/,260,error out of the inner context manager.,
pandas/,268,see gh-13374 and gh-17465,
pandas/,273,We expect the third line in the data to be,
pandas/,274,"skipped because it is malformed, but we do",
pandas/,275,not expect any errors to occur.,
pandas/,288,see gh-13879 and gh-15910,
pandas/,299,"We expect no match, so there should be an assertion",
pandas/,300,error out of the inner context manager.,
pandas/,23,"see gh-3795, gh-6607",
pandas/,47,see gh-12048,
pandas/,95,see gh-10153,
pandas/,114,see gh-10153,
pandas/,128,see gh-10153,
pandas/,146,see gh-10153,
pandas/,165,see gh-18186,
pandas/,178,see gh-10153,
pandas/,191,see gh-10153,
pandas/,205,see gh-10153,
pandas/,223,see gh-10153,
pandas/,343,see gh-20498,
pandas/,356,Unexpected c,
pandas/,432,see gh-9424,
pandas/,446,see gh-9424,
pandas/,460,see gh-2631,
pandas/,482,Dtype spec ignored if converted specified.,
pandas/,535,see gh-14712,
pandas/,40,see gh-2298,
pandas/,93,Basic test,
pandas/,95,"""Regular"" quoting",
pandas/,97,Test in a data row instead of header,
pandas/,99,Test in empty data row with skipping,
pandas/,101,Test in empty data row without skipping,
pandas/,110,see gh-4793,
pandas/,124,see gh-13549,
pandas/,144,gh-23779: Python csv engine shouldn't error on files opened in binary.,
pandas/,145,gh-31575: Python csv engine shouldn't error on files opened in raw binary.,
pandas/,166,see gh-24130,
pandas/,181,see gh-31819,
pandas/,38,see gh-11786,
pandas/,49,Read all files in many threads.,
pandas/,130,see gh-11786,
pandas/,26,See gh-12678,
pandas/,85,see gh-5766,
pandas/,118,see gh-20558,
pandas/,132,see gh-9082,
pandas/,144,see gh-4201: test that index_col as integer reflects usecols,
pandas/,154,see gh-4201: test that index_col as integer reflects usecols,
pandas/,168,see gh-2654,
pandas/,178,see gh-2733,
pandas/,199,Column selection by index.,
pandas/,201,Column selection by name.,
pandas/,217,see gh-9755,
pandas/,234,see gh-13604,
pandas/,267,see gh-14792,
pandas/,320,Names span all columns in original data.,
pandas/,321,Names span only the selected columns.,
pandas/,325,see gh-9755,
pandas/,344,see gh-13219,
pandas/,362,see gh-13219,
pandas/,419,see gh-12546,
pandas/,450,see gh-14154,
pandas/,463,see gh-6710,
pandas/,476,see gh-8985,
pandas/,483,see gh-9549,
pandas/,499,see gh-8985,
pandas/,527,see gh-14671,
pandas/,20,see gh-505,
pandas/,46,see gh-4382,
pandas/,61,see gh-9832,
pandas/,120,see gh-12775 and gh-10911,
pandas/,127,see gh-12775 and gh-10911,
pandas/,168,see gh-12775 and gh-10911,
pandas/,177,"""LF""  # ""CRLF""  # ""CR""",
pandas/,180,see gh-9079,
pandas/,213,see gh-14459,
pandas/,86,see gh-23761.,
pandas/,96,arg=None tests when we pass in the dialect without any other arguments.,
pandas/,98,No conflict --> no warning.,
pandas/,100,Default --> no warning.,
pandas/,104,Non-default + conflict with dialect --> warning.,
pandas/,117,sep is default --> sep_override=True,
pandas/,118,sep isn't default --> sep_override=False,
pandas/,119,No conflict,
pandas/,120,Default arguments --> sep_override=True,
pandas/,121,Conflict,
pandas/,122,Conflict,
pandas/,134,see gh-23761.,
pandas/,28,Produce integer.,
pandas/,46,see gh-2184,
pandas/,53,Column 0 should not be casted to numeric and should remain as object.,
pandas/,59,see gh-583,
pandas/,91,Example converters.,
pandas/,151,see gh-1835,
pandas/,32,test reading compressed urls with various engines and,
pandas/,33,extension inference,
pandas/,60,more of an integration test due to the not-public contents portion,
pandas/,61,can probably mock this though.,
pandas/,68,Read public file from bucket with not-public contents,
pandas/,76,"Read from AWS s3 as ""s3n"" URL",
pandas/,83,"Read from AWS s3 as ""s3a"" URL",
pandas/,97,Read with a chunksize,
pandas/,105,Read a couple of chunks and make sure we see them,
pandas/,106,properly.,
pandas/,114,Read with a chunksize using the Python parser,
pandas/,125,Read a couple of chunks and make sure we see them properly.,
pandas/,166,Receive a permission error when trying to read a private bucket.,
pandas/,167,It's irrelevant here that this isn't actually a table.,
pandas/,172,see gh-16135,
pandas/,186,"8 MB, S3FS usees 5MB chunks",
pandas/,199,Possibly some state leaking in between tests.,
pandas/,200,"If we don't clear this cache, we saw `GetObject operation: Forbidden`.",
pandas/,201,"Presumably the s3fs instance is being cached, with the directory listing",
pandas/,202,from *before* we add the large-file.csv in the pandas-test bucket.,
pandas/,207,"log of fetch_range (start, stop)",
pandas/,211,GH 25945,
pandas/,24,noqa,
pandas/,60,see gh-9798,
pandas/,131,see gh-10413,
pandas/,153,"We don't want empty index names being replaced with ""Unnamed: 0""",
pandas/,179,GH 10984,
pandas/,16,"TODO: add test for condition ""mangle_dupe_cols=False""",
pandas/,17,once it is actually supported (gh-12935),
pandas/,28,See gh-7160,
pandas/,39,See gh-7160,
pandas/,68,see gh-17060,
pandas/,107,see gh-17095,
pandas/,115,xref gh-13017,
pandas/,122,This test recursively updates `df`.,
pandas/,33,The `ensure_clean_path` context mgr removes the temp file upon exit.,
pandas/,60,This is a regression test for pandas-dev/pandas/issues/11188,
pandas/,67,This is a regression test for pandas-dev/pandas/issues/11188,
pandas/,74,This is a regression test for pandas-dev/pandas/issues/11188,
pandas/,21,compare the zones on each element,
pandas/,34,use maybe_get_tz instead of dateutil.tz.gettz to handle the windows,
pandas/,35,filename issues.,
pandas/,40,as columns,
pandas/,59,select with tz aware,
pandas/,64,ensure we include dates in DST and STD time here.,
pandas/,88,this is ok,
pandas/,95,can't append with diff timezone,
pandas/,106,as index,
pandas/,109,GH 4098 example,
pandas/,136,as columns,
pandas/,154,select with tz aware,
pandas/,158,ensure we include dates in DST and STD time here.,
pandas/,181,this is ok,
pandas/,188,can't append with diff timezone,
pandas/,199,as index,
pandas/,202,GH 4098 example,
pandas/,224,GH7777,
pandas/,225,selecting a UTC datetimeindex column did,
pandas/,226,not preserve UTC tzinfo set before storing,
pandas/,228,check that no tz still works,
pandas/,237,check utc,
pandas/,246,double check non-utc,
pandas/,259,index,
pandas/,266,as data,
pandas/,267,GH11411,
pandas/,296,GH2852,
pandas/,297,issue storing datetime.date with a timezone as it resets when read,
pandas/,298,back in a new timezone,
pandas/,300,original method,
pandas/,309,with tz setting,
pandas/,324,legacy from < 0.17.0,
pandas/,325,8260,
pandas/,340,make sure we are not failing on transitions,
pandas/,359,GH 11926,
pandas/,374,"The test HDF5 file was created in Python 2, but could not be read in",
pandas/,375,Python 3.,
pandas/,376,,
pandas/,377,GH26443,
pandas/,53,noqa: E402 isort:skip,
pandas/,54,noqa: E402 isort:skip,
pandas/,76,GH 13291,
pandas/,121,table,
pandas/,132,GH6166,
pandas/,145,GH4584,
pandas/,146,API issue when to_hdf doesn't accept append AND format args,
pandas/,154,append to False,
pandas/,166,append to False,
pandas/,196,append to False,
pandas/,202,formats,
pandas/,214,Invalid.,
pandas/,233,File path doesn't exist,
pandas/,242,default_format option,
pandas/,301,GH 20523,
pandas/,302,Puts a softlink into HDF file and rereads,
pandas/,313,Should ignore the softlink,
pandas/,319,GH 12221,
pandas/,350,make a random group in hdf space,
pandas/,357,storers,
pandas/,382,gh-2694: tables.NaturalNameWarning,
pandas/,400,write a file and wipe its versioning,
pandas/,404,"this is an error because its table_type is appendable, but no",
pandas/,405,version info,
pandas/,421,constructor,
pandas/,433,context,
pandas/,436,noqa,
pandas/,444,conv write,
pandas/,452,conv read,
pandas/,466,read_hdf uses default mode,
pandas/,485,invalid mode change,
pandas/,492,truncation ok here,
pandas/,502,reopen as read,
pandas/,510,reopen as append,
pandas/,518,reopen as append (again),
pandas/,532,create an in memory store,
pandas/,544,the file should not have actually been written,
pandas/,591,GH10143,
pandas/,598,Next 3 items aren't pandas objects and should be ignored,
pandas/,610,Create non-pandas objects,
pandas/,636,test attribute access,
pandas/,647,errors,
pandas/,652,not stores,
pandas/,669,"not OK, not a table",
pandas/,673,"node does not currently exist, test _is_table_type returns False",
pandas/,674,in this case,
pandas/,679,can't put to a table (use append instead),
pandas/,683,overwrite table,
pandas/,701,mixed length,
pandas/,722,can't compress if format='fixed',
pandas/,732,can't compress if format='fixed',
pandas/,740,GH15943,
pandas/,743,Set complevel and check if complib is automatically set to,
pandas/,744,default value,
pandas/,755,Set complib and check to see if compression is disabled,
pandas/,766,Check if not setting complib or complevel results in no compression,
pandas/,777,Check if file-defaults can be overridden on a per table basis,
pandas/,793,GH14478,
pandas/,796,Building list of all complibs and complevels tuples,
pandas/,798,Remove lzo if its not available on this platform,
pandas/,801,Remove bzip2 if its not available on this platform,
pandas/,812,Write and read file to see if data is consistent,
pandas/,817,Open file and check metadata,
pandas/,818,for correct amount of compression,
pandas/,829,"non-date, non-string index",
pandas/,853,PerformanceWarning,
pandas/,868,this is allowed by almost always don't want to do it,
pandas/,869,tables.NaturalNameWarning):,
pandas/,888,this is allowed by almost always don't want to do it,
pandas/,889,tables.NaturalNameWarning,
pandas/,895,dtype issues - mizxed type in a single object column,
pandas/,903,uints - test storage of uints,
pandas/,926,uints - test storage of uints in indexable columns,
pandas/,928,64-bit indices not yet supported,
pandas/,936,basic,
pandas/,957,select on the values,
pandas/,962,select on the index and values,
pandas/,967,multi-index,
pandas/,979,GH5386,
pandas/,980,test storing various index types,
pandas/,1002,period index currently broken for table,
pandas/,1003,seee GH7796 FIXME,
pandas/,1005,"check('table',tm.makePeriodIndex)",
pandas/,1007,unicode,
pandas/,1075,some nans,
pandas/,1082,first column,
pandas/,1090,2nd column,
pandas/,1098,datetimes,
pandas/,1116,nan some entire rows (dropna=True),
pandas/,1122,nan some entire rows (dropna=False),
pandas/,1128,tests the option io.hdf.dropna_table,
pandas/,1141,nan some entire rows (string are still written!),
pandas/,1164,nan some entire rows (but since we have dates they are still,
pandas/,1165,written!),
pandas/,1190,Test to make sure defaults are to not drop.,
pandas/,1191,Corresponding to Issue 9382,
pandas/,1202,GH 25766,
pandas/,1210,smoke test to test that file is properly closed after,
pandas/,1211,read with KeyError before another write,
pandas/,1215,GH 28699,
pandas/,1225,Test that the file is still open after a KeyError and that we can,
pandas/,1226,still read from it.,
pandas/,1232,column oriented,
pandas/,1243,selection on the non-indexable,
pandas/,1248,this isn't supported,
pandas/,1254,"GH 4096; using same frames, but different block orderings",
pandas/,1276,test a different ordering but with more fields (like invalid,
pandas/,1277,combinate),
pandas/,1285,store additional fields in different blocks,
pandas/,1290,store multiple additional fields in different blocks,
pandas/,1306,avoid truncation on elements,
pandas/,1312,appending smaller string ok,
pandas/,1319,avoid truncation on elements,
pandas/,1325,bigger string on next append,
pandas/,1333,min_itemsize on Series index (GH 11412),
pandas/,1338,"same as above, with data_columns=True",
pandas/,1344,min_itemsize in index without appending (GH 10381),
pandas/,1346,just make sure there is a longer string:,
pandas/,1351,"same as above, with a Series",
pandas/,1358,with nans,
pandas/,1380,a min_itemsize that creates a data_column,
pandas/,1386,a min_itemsize that creates a data_column2,
pandas/,1392,a min_itemsize that creates a data_column2,
pandas/,1399,infer the .typ on subsequent appends,
pandas/,1405,invalid min_itemsize keys,
pandas/,1415,with all empty strings (GH 12242),
pandas/,1425,min_itemsize in index with to_hdf (GH 10381),
pandas/,1428,just make sure there is a longer string:,
pandas/,1433,"same as above, with a Series",
pandas/,1448,GH 20835,
pandas/,1464,check that we have indices created,
pandas/,1468,data column searching,
pandas/,1473,data column searching (with an indexable and a data_columns),
pandas/,1479,data column selection with a string data_column,
pandas/,1490,using min_itemsize and a data column,
pandas/,1528,multiple data columns,
pandas/,1555,yield an empty frame,
pandas/,1561,doc example,
pandas/,1585,doc example part 2,
pandas/,1597,on-disk operations,
pandas/,1617,data columns,
pandas/,1626,specify index=columns,
pandas/,1634,try to index a non-table,
pandas/,1653,GH 3748,
pandas/,1665,GH 4710,
pandas/,1666,recreate multi-indexes properly,
pandas/,1693,appending multi-column on existing table (see GH 6167),
pandas/,1700,non_index_axes name,
pandas/,1717,validate multi-index names,
pandas/,1718,GH 5527,
pandas/,1732,no names,
pandas/,1738,partial names,
pandas/,1748,series,
pandas/,1755,dup with column,
pandas/,1765,dup within level,
pandas/,1775,fully names,
pandas/,1787,GH 6169,
pandas/,1788,recreate multi-indexes when columns is passed,
pandas/,1789,in the `where` argument,
pandas/,1796,With a DataFrame,
pandas/,1807,With a Series,
pandas/,1814,GH 14435,
pandas/,1851,more chunksize in append tests,
pandas/,1868,"empty frame, GH4273",
pandas/,1871,0 len,
pandas/,1877,repeated append of 0/non-zero frames,
pandas/,1884,store,
pandas/,1893,test append with invalid input to get good error messages,
pandas/,1895,list in column,
pandas/,1902,multiple invalid columns,
pandas/,1908,datetime with embedded nans as object,
pandas/,1918,directly ndarray,
pandas/,1922,series directly,
pandas/,1926,appending an incompatible table,
pandas/,1954,incompatible dtype,
pandas/,1958,check creation/storage/retrieval of float32 (a bit hacky to,
pandas/,1959,actually create them thought),
pandas/,1965,check with mixed dtypes,
pandas/,2001,frame,
pandas/,2027,currently not supported dtypes,
pandas/,2034,frame,
pandas/,2042,this fails because we have a date in the object block......,
pandas/,2056,8591,
pandas/,2057,doc example from tseries holiday section,
pandas/,2083,GH 17618,
pandas/,2094,GH 3577,
pandas/,2095,append timedelta,
pandas/,2111,table,
pandas/,2126,a bit hacky here as we don't really deal with the NaT properly,
pandas/,2136,fixed,
pandas/,2157,nonexistence,
pandas/,2163,pathing,
pandas/,2175,__delitem__,
pandas/,2194,some invalid terms,
pandas/,2198,more invalid,
pandas/,2205,from the docs,
pandas/,2214,check ok,
pandas/,2220,catch the invalid reference,
pandas/,2244,noqa,
pandas/,2249,noqa,
pandas/,2251,"technically an error, but allow it",
pandas/,2276,GH #454,
pandas/,2284,GH #492,
pandas/,2364,put in some random NAs,
pandas/,2381,not consolidated,
pandas/,2387,empty,
pandas/,2431,check that the names are stored,
pandas/,2447,GH 13884,
pandas/,2460,GH #13492,
pandas/,2471,"This used to fail, returning numpy strings instead of python strings.",
pandas/,2517,check that can store Series of all of these types,
pandas/,2542,single dtypes,
pandas/,2561,dups across dtypes,
pandas/,2592,duplicates on both index and columns,
pandas/,2617,select with columns=,
pandas/,2625,equivalently,
pandas/,2630,with a data column,
pandas/,2637,all a data columns,
pandas/,2644,"with a data column, but different columns",
pandas/,2654,with a Timestamp data column (GH #2637),
pandas/,2665,bool columns (GH #2849),
pandas/,2673,noqa,
pandas/,2678,noqa,
pandas/,2683,integer index,
pandas/,2691,float index,
pandas/,2707,floats w/o NaN,
pandas/,2716,floats with NaN,
pandas/,2724,https://github.com/PyTables/PyTables/issues/282,
pandas/,2725,bug in selection when 0th row has a np.nan and an index,
pandas/,2726,"store.append('df3',df,data_columns=True)",
pandas/,2727,result = store.select(,
pandas/,2728,"'df3', where='values>2.0')",
pandas/,2729,"tm.assert_frame_equal(expected, result)",
pandas/,2731,not in first position float with NaN ok too,
pandas/,2742,test selection with comparison against numpy scalar,
pandas/,2743,GH 11283,
pandas/,2750,noqa,
pandas/,2772,regular select,
pandas/,2777,small selector,
pandas/,2786,big selector along the columns,
pandas/,2800,big selector along the index,
pandas/,2809,single table,
pandas/,2854,multiple,
pandas/,2866,full selection,
pandas/,2876,GH 8014,
pandas/,2877,using iterator and where clause,
pandas/,2880,no iterator,
pandas/,2890,select w/o iteration and no where clause works,
pandas/,2894,"select w/o iterator and where clause, single term, begin",
pandas/,2895,"of range, works",
pandas/,2900,"select w/o iterator and where clause, single term, end",
pandas/,2901,"of range, works",
pandas/,2906,"select w/o iterator and where clause, inclusive range,",
pandas/,2907,works,
pandas/,2912,"with iterator, full range",
pandas/,2922,select w/iterator and no where clause works,
pandas/,2927,"select w/iterator and where clause, single term, begin of range",
pandas/,2933,"select w/iterator and where clause, single term, end of range",
pandas/,2939,"select w/iterator and where clause, inclusive range",
pandas/,2947,GH 8014,
pandas/,2948,using iterator and where clause,
pandas/,2951,"with iterator, non complete range",
pandas/,2961,"select w/iterator and where clause, single term, begin of range",
pandas/,2968,"select w/iterator and where clause, single term, end of range",
pandas/,2975,"select w/iterator and where clause, inclusive range",
pandas/,2984,"with iterator, empty where",
pandas/,2993,"select w/iterator and where clause, single term, begin of range",
pandas/,3000,GH 8014,
pandas/,3001,using iterator and where clause can return many empty,
pandas/,3002,frames.,
pandas/,3005,"with iterator, range limited to the first chunk",
pandas/,3015,"select w/iterator and where clause, single term, begin of range",
pandas/,3022,"select w/iterator and where clause, single term, end of range",
pandas/,3031,"select w/iterator and where clause, inclusive range",
pandas/,3035,"should be 1, is 10",
pandas/,3043,select w/iterator and where clause which selects,
pandas/,3044,*nothing*.,
pandas/,3045,,
pandas/,3046,To be consistent with Python idiom I suggest this should,
pandas/,3047,return [] e.g. `for e in []: print True` never prints,
pandas/,3048,True.,
pandas/,3053,should be [],
pandas/,3061,"GH 3499, losing frequency info on index recreation",
pandas/,3079,try to append a table with a different frequency,
pandas/,3092,this is ok,
pandas/,3179,invalid terms,
pandas/,3185,can't select if not written as table,
pandas/,3186,store['frame'] = df,
pandas/,3187,with pytest.raises(ValueError):,
pandas/,3188,"store.select('frame', [crit1, crit2])",
pandas/,3191,select via complex criteria,
pandas/,3200,empty,
pandas/,3209,or,
pandas/,3223,invert,
pandas/,3228,invert not implemented in numexpr :(,
pandas/,3232,invert ok for filters,
pandas/,3237,in,
pandas/,3248,use non-trivial selection criteria,
pandas/,3265,scope with list like,
pandas/,3266,noqa,
pandas/,3275,index,
pandas/,3276,noqa,
pandas/,3289,scope with index,
pandas/,3308,can't use more than one filter (atm),
pandas/,3315,not implemented,
pandas/,3319,in theory we could deal with this,
pandas/,3324,GH 2973,
pandas/,3329,test string ==/!=,
pandas/,3351,int ==/!=,
pandas/,3372,GH 17912,
pandas/,3373,HDFStore.select_column should raise a KeyError,
pandas/,3374,exception if the key is not a valid store,
pandas/,3379,error,
pandas/,3388,valid,
pandas/,3393,not a data indexable column,
pandas/,3397,a data column,
pandas/,3404,"a data column with NaNs, result excludes the NaNs",
pandas/,3412,start/stop,
pandas/,3431,GH 10392 - make sure column name is preserved,
pandas/,3446,all,
pandas/,3450,get coordinates back & test vs frame,
pandas/,3468,multiple tables,
pandas/,3485,pass array/mask as the coordinates,
pandas/,3496,locations,
pandas/,3500,boolean,
pandas/,3504,invalid,
pandas/,3517,selection with filter,
pandas/,3523,list,
pandas/,3530,boolean,
pandas/,3537,start/stop,
pandas/,3550,exceptions,
pandas/,3562,regular operation,
pandas/,3580,dropna=True should guarantee rows are synchronized,
pandas/,3600,dropna=False shouldn't synchronize row indexes,
pandas/,3618,no tables stored,
pandas/,3625,exceptions,
pandas/,3646,default select,
pandas/,3657,multiple,
pandas/,3665,multiple (diff selector),
pandas/,3673,test exception for diff rows,
pandas/,3697,write w/o the index on that particular column,
pandas/,3706,table,
pandas/,3714,out of range,
pandas/,3722,GH 16209,
pandas/,3740,"fixed, GH 8287",
pandas/,3755,out of range,
pandas/,3760,series,
pandas/,3771,sparse; not implemented,
pandas/,3803,GH 17021,
pandas/,3804,ValueError when reading a contiguous mixed-data table ft. VLArray,
pandas/,3891,gh-4409: open & close multiple times,
pandas/,3898,single,
pandas/,3911,multiples,
pandas/,3920,multiples,
pandas/,3941,nested close,
pandas/,3955,double closing,
pandas/,3968,ops on a closed store,
pandas/,4033,GH 24510,
pandas/,4034,legacy table with fixed format written in Python 2,
pandas/,4047,GH 31750,
pandas/,4048,legacy table with fixed format and datetime64 column written in Python 2,
pandas/,4062,issue: 24925,
pandas/,4063,legacy table written in Python 2,
pandas/,4089,check keys,
pandas/,4094,check indices & nrows,
pandas/,4102,check propindixes,
pandas/,4117,new table,
pandas/,4184,PerformanceWarning,
pandas/,4191,GH 11234,
pandas/,4213,FIXME: don't leave commented-out code,
pandas/,4214,def test_cant_write_multiindex_table(self):,
pandas/,4215,"# for now, #1848",
pandas/,4216,"df = DataFrame(np.random.randn(10, 4),",
pandas/,4217,"index=[np.arange(5).repeat(2),",
pandas/,4218,"np.tile(np.arange(2), 5)])",
pandas/,4219,,
pandas/,4220,with pytest.raises(Exception):,
pandas/,4221,"store.put('foo', df, format='table')",
pandas/,4255,Basic,
pandas/,4286,Dtypes,
pandas/,4299,Multiple,
pandas/,4307,Make sure the metadata is OK,
pandas/,4310,assert '/df2/meta/values_block_0/meta' in info,
pandas/,4313,unordered,
pandas/,4326,Query,
pandas/,4345,Appending with same categories is ok,
pandas/,4353,Appending must have the same categories,
pandas/,4360,"Remove, and make sure meta data is removed (its a recursive",
pandas/,4361,removal so should be).,
pandas/,4373,GH13322,
pandas/,4374,Check that read_hdf with categorical columns doesn't return rows if,
pandas/,4375,where criteria isn't met.,
pandas/,4380,Test without categories,
pandas/,4383,We are expecting an empty DataFrame matching types of df,
pandas/,4390,Test with categories,
pandas/,4394,We are expecting an empty DataFrame matching types of df,
pandas/,4402,GH18413,
pandas/,4403,Check that read_hdf with categorical columns with NaN-only values can,
pandas/,4404,be read back.,
pandas/,4437,GH 9330,
pandas/,4448,GH9635,
pandas/,4449,Storing TimedeltaIndexed DataFrames in fixed stores did not preserve,
pandas/,4450,the type of the index.,
pandas/,4460,BUG: 7212,
pandas/,4461,read_hdf store.select modified the passed columns parameters,
pandas/,4462,when multi-indexed.,
pandas/,4480,noqa,
pandas/,4485,GH9057,
pandas/,4486,Writing HDF5 table format should only work for string-like,
pandas/,4487,column types,
pandas/,4519,GH10330,
pandas/,4520,"No check for non-string path_or-buf, and no test of open store",
pandas/,4572,GH10443,
pandas/,4577,"Categorical dtype not supported for ""fixed"" format. So no need",
pandas/,4578,to test with that dtype in the dataframe here.,
pandas/,4589,GH13231,
pandas/,4611,GH11773,
pandas/,4626,GH11773,
pandas/,4641,GH 14241,
pandas/,4662,GH 15492,
pandas/,4676,noqa,
pandas/,4682,non strings to string column always fail,
pandas/,4688,strings to other columns must be convertible to type,
pandas/,4711,GH 16583,
pandas/,4712,Tests that reading a Series saved to an HDF file,
pandas/,4713,still works if a mode='r' argument is supplied,
pandas/,4726,GH 16781,
pandas/,4728,tests reading a PeriodIndex DataFrame written in Python2 in Python3,
pandas/,4730,the file was generated in Python 2.7 like so:,
pandas/,4731,,
pandas/,4732,"df = pd.DataFrame([1.,2,3], index=pd.PeriodIndex(",
pandas/,4733,"['2015-01-01', '2015-01-02', '2015-01-05'], freq='B'))",
pandas/,4734,"df.to_hdf('periodindex_0.20.1_x86_64_darwin_2.7.13.h5', 'p')",
pandas/,4752,GH26610,
pandas/,4754,"Using keyword `where` as '' or (), or [None], etc",
pandas/,4755,while reading from HDF store raises,
pandas/,4756,"""SyntaxError: only a single expression is allowed""",
pandas/,4773,GH 7775,
pandas/,15,GH10447,
pandas/,10,set these parameters so we don't have file sharing,
pandas/,37,contextmanager to ensure the file cleanup,
pandas/,43,put in the temporary path if we don't have one already,
pandas/,2,noqa,
pandas/,7,"noqa: F403, F401",
pandas/,10,-----------------------------------------------------------------------------,
pandas/,11,Global formatting options,
pandas/,28,try again for something better,
pandas/,33,"can be raised by locale.setlocale(), which is",
pandas/,34,called by getpreferredencoding,
pandas/,35,"(on some systems, see stdlib locale docs)",
pandas/,38,"when all else fails. this will usually be ""ascii""",
pandas/,42,"GH#3360, save the reported defencoding at import time",
pandas/,43,MPL backends may change it. Make available for debugging.,
pandas/,68,horrible name for a Exception subclass,
pandas/,136,"Raised on (some? all?) Windows platforms because Note: ""locale -a""",
pandas/,137,is not defined,
pandas/,141,"raw_locales is ""\n"" separated list of locales",
pandas/,142,"it may contain non-decodable parts, so split",
pandas/,143,extract what we can and then rejoin.,
pandas/,150,'locale -a' is used to populated 'raw_locales' and on,
pandas/,151,Redhat 7 Linux (and maybe others) prints locale names,
pandas/,152,using windows-1252 encoding.  Bug only triggered by,
pandas/,153,a few special characters and when there is an,
pandas/,154,extensive list of installed locales.,
pandas/,62,holds deprecated option metadata,
pandas/,65,holds registered option metadata,
pandas/,68,holds the current values for registered options,
pandas/,71,keys which have a special meaning,
pandas/,82,,
pandas/,83,User API,
pandas/,107,walk the nested dict,
pandas/,113,must at least 1 arg deal with constraints later,
pandas/,118,default to false,
pandas/,132,walk the nested dict,
pandas/,193,you can't set new keys,
pandas/,194,can you can't overwrite subtrees,
pandas/,218,"For user convenience,  we'd like to have the available options described",
pandas/,219,in the docstring. For dev convenience we'd like to generate the docstrings,
pandas/,220,"dynamically instead of maintaining them by hand. To this, we use the",
pandas/,221,"class below which wraps functions inside a callable, and converts",
pandas/,222,__doc__ into a property function. The doctsrings below are templates,
pandas/,223,using the py2.6+ advanced formatting syntax to plug in a concise list,
pandas/,224,"of options, and option descriptions.",
pandas/,370,bind the functions with their docstrings into a Callable,
pandas/,371,and use that as the functions exposed in pd.api,
pandas/,378,,
pandas/,379,"Functions for use by pandas developers, in addition to User - api",
pandas/,455,the default value should be legal,
pandas/,459,"walk the nested dict, creating dicts as needed along the path",
pandas/,463,NOTE: tokenize.Name is not a public constant,
pandas/,464,"error: Module has no attribute ""Name""  [attr-defined]",
pandas/,465,type: ignore,
pandas/,483,initialize,
pandas/,485,save the option metadata,
pandas/,535,,
pandas/,536,functions internal to the module,
pandas/,545,short-circuit for exact key,
pandas/,549,else look through all of them,
pandas/,551,reserved key,
pandas/,695,,
pandas/,696,helpers,
pandas/,724,"Note: reset_option relies on set_option, and on key directly",
pandas/,725,it does not fit in to this monkey-patching scheme,
pandas/,748,These factories and methods are handy for use as the validator,
pandas/,749,arg in register_option,
pandas/,843,"common type validators, for convenience",
pandas/,844,"usage: register_option(... , validator = is_int)",
pandas/,17,Needed upstream of `_libs` because these are used in tslibs.parsing,
pandas/,19,noqa:F401,
pandas/,42,"try checking equality directly with '=' operator,",
pandas/,43,as comparison may have been overridden for the left,
pandas/,44,hand object,
pandas/,49,check for None-ness otherwise we could end up,
pandas/,50,comparing a numpy array vs None,
pandas/,59,"could not compare them directly, so try comparison",
pandas/,60,using the 'is' operator,
pandas/,105,We do this so that we can provide a more informative,
pandas/,106,error message about the parameters that we are not,
pandas/,107,supporting in the pandas implementation of 'fname',
pandas/,117,set(dict) --> set of the dictionary's keys,
pandas/,188,Check that the total number of arguments passed in (i.e.,
pandas/,189,args and kwargs) does not exceed the length of compat_args,
pandas/,194,Check there is no overlap with the positional and keyword,
pandas/,195,"arguments, similar to what is done in actual Python functions",
pandas/,253,TODO: Change to keyword-only args and remove all this,
pandas/,256,Goal: fill 'out' with index/columns-style arguments,
pandas/,257,"like out = {'index': foo, 'columns': bar}",
pandas/,259,Start by validating for consistency,
pandas/,264,First fill with explicit values provided by the user...,
pandas/,273,"More user-provided arguments, now from kwargs",
pandas/,282,All user-provided kwargs have been handled now.,
pandas/,283,"Now we supplement with positional arguments, emitting warnings",
pandas/,284,when there's ambiguity and raising when there's conflicts,
pandas/,287,It's up to the function to decide if this is valid,
pandas/,293,Unambiguously wrong,
pandas/,68,xlrd uses a capitalized attribute name,
pandas/,79,TODO:,
pandas/,80,remove when gh-24839 is fixed.,
pandas/,81,this affects numpy 1.16 and pytables 3.4.4,
pandas/,36,calculate required number of cells,
pandas/,69,include margin for titles,
pandas/,75,left,
pandas/,81,right,
pandas/,89,left,
pandas/,96,right,
pandas/,116,insert is destructive,
pandas/,146,must be convert here to get index levels for colorization,
pandas/,53,required,
pandas/,57,"install / build,",
pandas/,61,test,
pandas/,64,docs,
pandas/,66,"Other, need a min version",
pandas/,75,"Other, not imported.",
pandas/,114,needed for mypy,
pandas/,119,needed for mypy,
pandas/,36,For introspection purposes.,
pandas/,59,a rename,
pandas/,90,The object is actually located in another module.,
pandas/,16,noqa,
pandas/,1,noqa,
pandas/,4,noqa,
pandas/,6,compatibility for import pandas; pandas.util.testing,
pandas/,7,noqa,
pandas/,54,adding deprecated directive to the docstring,
pandas/,63,"when python is running in optimized mode (i.e. `-OO`), docstrings are",
pandas/,64,"removed, so we check that a docstring with correct formatting is used",
pandas/,65,but we allow empty docstrings,
pandas/,327,https://github.com/python/typing/issues/598,
pandas/,328,type: ignore,
pandas/,359,collecting docstring and docstring templates,
pandas/,366,type: ignore,
pandas/,370,formatting templates and concatenating docstring,
pandas/,380,type: ignore,
pandas/,387,Substitution and Appender are derived from matplotlib.docstring (1.1.0),
pandas/,388,module https://matplotlib.org/users/license.html,
pandas/,3,noqa,
pandas/,45,we require a newer version of pyarrow than we support for parquet,
pandas/,5,flake8: noqa,
pandas/,11,since pandas is a dependency of pandas-gbq,
pandas/,12,we need to import on first use,
pandas/,167,START: new kwargs.  Don't populate unless explicitly set.,
pandas/,173,END: new kwargs,
pandas/,33,-----------------------------------------------------------------------------,
pandas/,34,-- Helper functions,
pandas/,50,noqa: F811,
pandas/,61,test if params is a mapping,
pandas/,70,handle non-list entries for parse_dates gracefully,
pandas/,83,Allow passing of formatting string for integers,
pandas/,84,GH17855,
pandas/,93,coerce to UTC timezone,
pandas/,94,GH11216,
pandas/,107,we want to coerce datetime64_tz dtypes for now to UTC,
pandas/,108,we could in theory do a 'nice' conversion from a FixedOffset tz,
pandas/,109,GH11216,
pandas/,161,-----------------------------------------------------------------------------,
pandas/,162,-- Read and write to DataFrames,
pandas/,416,using generic exception to catch errors from sql drivers (GH24988),
pandas/,573,"When support for DBAPI connections is removed,",
pandas/,574,is_cursor should not be necessary.,
pandas/,593,TODO: support for multiIndex,
pandas/,619,We want to initialize based on a dataframe,
pandas/,622,"no data provided, read-only mode",
pandas/,637,"Inserting table into database, add to MetaData object",
pandas/,701,"store as integers, see GH#6921, GH#7076",
pandas/,709,Note: this will miss timedeltas since they are converted to int,
pandas/,719,set insert method,
pandas/,811,for writing: index=True to include index in sql table,
pandas/,814,"if index_label is specified, set this as index name(s)",
pandas/,825,return the used column labels for the index columns,
pandas/,838,for reading: index=(list of) string to specify column to set as index,
pandas/,880,"At this point, attach to new metadata, only attach to self.meta",
pandas/,881,once table is created.,
pandas/,907,Handle date parsing upfront; don't try to convert columns,
pandas/,908,twice,
pandas/,917,the type the dataframe column should have,
pandas/,925,Convert tz-aware Datetime SQL columns to UTC,
pandas/,929,"floats support NA, can always convert!",
pandas/,933,"No NA values, can convert ints and bools",
pandas/,937,this column not in results,
pandas/,945,"Infer type of column, while ignoring missing values.",
pandas/,946,"Needed for inserting typed data containing NULLs, GH 8778.",
pandas/,962,GH 9086: TIMESTAMP is the suggested type if the column contains,
pandas/,963,timezone information,
pandas/,968,The column is actually a DatetimeIndex,
pandas/,969,GH 26761 or an Index with date-like data e.g. 9999-01-01,
pandas/,1008,TODO: Refine integer size.,
pandas/,1011,we have a timezone capable type,
pandas/,1016,Caution: np.datetime64 is also a subclass of np.number.,
pandas/,1315,check for potentially case sensitivity issues (GH7815),
pandas/,1316,Only check when name is not a number and name is not lower case,
pandas/,1347,Avoid casting double-precision floats into decimals,
pandas/,1370,---- SQL without SQLAlchemy ---,
pandas/,1371,sqlite-specific sql strings and handler class,
pandas/,1372,dictionary used for readability purposes,
pandas/,1393,See https://stackoverflow.com/questions/6514274/how-do-you-escape-strings\,
pandas/,1394,-for-sqlite-table-column-names-in-python,
pandas/,1395,Ensure the string can be encoded as UTF-8.,
pandas/,1396,Ensure the string does not include any NUL characters.,
pandas/,1397,"Replace all "" with """".",
pandas/,1398,Wrap the entire thing in double quotes.,
pandas/,1423,GH 8341,
pandas/,1424,register an adapter callable for datetime.time object,
pandas/,1427,"this will transform time(12,34,56,789) into '12:34:56.000789'",
pandas/,1428,(this is what sqlalchemy does),
pandas/,1442,wildcard char,
pandas/,1526,"Infer type of column, while ignoring missing values.",
pandas/,1527,"Needed for inserting typed data containing NULLs, GH 8778.",
pandas/,1592,pragma: no cover,
pandas/,1737,TODO(wesm): unused?,
pandas/,1738,escape = _get_valid_sqlite_name,
pandas/,1739,esc_name = escape(name),
pandas/,1747,not supported in fallback mode,
pandas/,171,1) try standard library Pickle,
pandas/,172,2) try pickle_compat (older pandas version) to handle subclass changes,
pandas/,173,3) try pickle_compat with latin-1 encoding upon a UnicodeDecodeError,
pandas/,179,"We want to silence any warnings about, e.g. moved modules.",
pandas/,183,e.g.,
pandas/,184,"""No module named 'pandas.core.sparse.series'""",
pandas/,185,"""Can't get attribute '__nat_unpickle' on <module 'pandas._libs.tslib""",
pandas/,188,e.g. can occur for files written in py27; see GH#28645 and GH#31988,
pandas/,33,validate index,
pandas/,34,--------------,
pandas/,36,validate that we have only a default index,
pandas/,37,raise on anything else as we don't serialize the index,
pandas/,57,validate columns,
pandas/,58,----------------,
pandas/,60,must have value column names (strings only),
pandas/,74,BOM character (byte order mark),
pandas/,75,This exists at the beginning of a file to indicate endianness,
pandas/,76,"of a file (stream). Unfortunately, this marker screws up parsing,",
pandas/,77,so we need to remove it if we see it.,
pandas/,427,TODO: get_filepath_or_buffer could return,
pandas/,428,"Union[FilePathOrBuffer, s3fs.S3File, gcsfs.GCSFile]",
pandas/,429,though mypy handling of conditional imports is difficult.,
pandas/,430,See https://github.com/python/mypy/issues/1297,
pandas/,440,Extract some of the arguments (pass chunksize on).,
pandas/,445,Check for duplicates in names.,
pandas/,448,Create the parser.,
pandas/,493,"'engine': 'c',",
pandas/,499,"'iterator': False,",
pandas/,535,Column and Index Locations and Names,
pandas/,543,General Parsing Configuration,
pandas/,553,NA and Missing Data Handling,
pandas/,559,Datetime Handling,
pandas/,566,Iteration,
pandas/,569,"Quoting, Compression, and File Format",
pandas/,581,Error Handling,
pandas/,584,Internal,
pandas/,591,gh-23761,
pandas/,592,,
pandas/,593,"When a dialect is passed, it overrides any of the overlapping",
pandas/,594,parameters passed in directly. We don't want to warn if the,
pandas/,595,default parameters were passed in (since it probably means,
pandas/,596,that the user didn't pass them in explicitly in the first place).,
pandas/,597,,
pandas/,598,"""delimiter"" is the annoying corner case because we alias it to",
pandas/,599,"""sep"" before doing comparison to the dialect values later on.",
pandas/,600,"Thus, we need a flag to indicate that we need to ""override""",
pandas/,601,the comparison to dialect values by checking if default values,
pandas/,602,"for BOTH ""delimiter"" and ""sep"" were provided.",
pandas/,609,Alias sep -> delimiter.,
pandas/,764,Check input arguments.,
pandas/,770,"Compute 'colspecs' from 'widths', if specified.",
pandas/,807,Any valid dialect should have these attributes.,
pandas/,808,"If any are missing, we will raise automatically.",
pandas/,826,Messages for conflicting values between the dialect,
pandas/,827,instance and the actual parameters provided.,
pandas/,830,"Don't warn if the default parameter was passed in,",
pandas/,831,even if it conflicts with the dialect (gh-23761).,
pandas/,839,Annoying corner case for not warning about,
pandas/,840,conflicts between dialect and delimiter parameter.,
pandas/,841,"Refer to the outer ""_read_"" function for more info.",
pandas/,862,miscellanea,
pandas/,873,might mutate self.engine,
pandas/,893,see gh-12935,
pandas/,924,see gh-16530,
pandas/,928,"The C engine doesn't need the file-like to have the ""next"" or",
pandas/,929,"""__next__"" attribute. However, the Python engine explicitly calls",
pandas/,930,"""next(...)"" when iterating through such an object, meaning it",
pandas/,931,"needs to have that attribute (""next"" for Python 2.x, ""__next__""",
pandas/,932,for Python 3.x),
pandas/,948,C engine not supported yet,
pandas/,967,wait until regex engine integrated,
pandas/,1070,type conversion-related,
pandas/,1080,Converting values to NA,
pandas/,1084,handle skiprows; this is internally handled by the,
pandas/,1085,"c-engine, so only need for python parsers",
pandas/,1094,put stuff back,
pandas/,1132,May alter columns / col_dict,
pandas/,1137,Any column is actually fine:,
pandas/,1300,see gh-20529,
pandas/,1301,,
pandas/,1302,Ensure it is iterable container but not string.,
pandas/,1372,validate header options for mi,
pandas/,1390,validate index_col that only contains integers,
pandas/,1403,GH 27394,
pandas/,1408,GH 16338,
pandas/,1411,GH 27779,
pandas/,1422,GH 13932,
pandas/,1423,keep references to file handles opened by the parser itself,
pandas/,1448,a column in parse_dates could be represented,
pandas/,1449,"ColReference = Union[int, str]",
pandas/,1450,DateGroups = List[ColReference],
pandas/,1451,"ParseDates = Union[DateGroups, List[DateGroups],",
pandas/,1452,"Dict[ColReference, DateGroups]]",
pandas/,1459,"get only columns that are references using names (str), not by index",
pandas/,1515,the names are the tuples of the header that are not the index cols,
pandas/,1516,"0 is the name of the index, assuming index_col is a list of column",
pandas/,1517,numbers,
pandas/,1526,clean the index_names,
pandas/,1532,extract the columns,
pandas/,1541,If we find unnamed columns all in a single,
pandas/,1542,"level, then our header was too long.",
pandas/,1551,Clean the column names (if we have an index_col).,
pandas/,1565,see gh-7160 and gh-9424: this helps to provide,
pandas/,1566,immediate alleviation of the duplicate names,
pandas/,1567,"issue and appears to be satisfactory to users,",
pandas/,1568,"but ultimately, not needing to butcher the names",
pandas/,1569,would be nice!,
pandas/,1571,so we can index,
pandas/,1593,possibly create a column mi here,
pandas/,1614,add names for the index,
pandas/,1619,maybe create a mi on the columns,
pandas/,1639,"remove index items from content and columns, don't pop in",
pandas/,1640,loop,
pandas/,1667,"remove index items from content and columns, don't pop in",
pandas/,1668,loop,
pandas/,1714,single dtype or None,
pandas/,1725,conv_f applied to data before inference,
pandas/,1749,skip inference if specified dtype is object,
pandas/,1750,or casting to an EA,
pandas/,1753,general type inference and conversion,
pandas/,1758,type specified in dtype param or cast_type is an EA,
pandas/,1771,invalid input to is_bool_dtype,
pandas/,1807,exclude e.g DatetimeIndex here,
pandas/,1811,e.g. encountering datetime string gets ValueError,
pandas/,1812,TypeError can be raised in floatify,
pandas/,1854,XXX this is for consistency with,
pandas/,1855,c-parser which parses all categories,
pandas/,1856,as strings,
pandas/,1864,use the EA's implementation of casting,
pandas/,1866,ensure cast_type is an actual dtype and not a string,
pandas/,1887,"returns data, columns",
pandas/,1921,Handle the file object with universal line mode enabled.,
pandas/,1922,We will handle the newline character ourselves later on.,
pandas/,1928,#2442,
pandas/,1931,"GH20529, validate usecol arg before TextReader",
pandas/,1944,we have a multi index in the columns,
pandas/,1964,gh-9755,
pandas/,1965,,
pandas/,1966,need to set orig_names here first,
pandas/,1967,so that proper indexing can be done,
pandas/,1968,with _set_noconvert_columns,
pandas/,1969,,
pandas/,1970,"once names has been filtered, we will",
pandas/,1971,then set orig_names again to names,
pandas/,1977,GH 14671,
pandas/,2018,close additional handles opened by C parser (for compression),
pandas/,2033,A set of integers will be converted to a list in,
pandas/,2034,the correct order every single time.,
pandas/,2038,The names attribute should have the correct columns,
pandas/,2039,in the proper order for indexing with parse_dates.,
pandas/,2042,Usecols is empty.,
pandas/,2107,"Done with first read, next time raise StopIteration",
pandas/,2116,"implicit index, no index names",
pandas/,2135,rename dict keys,
pandas/,2142,rename dict keys,
pandas/,2145,"ugh, mutation",
pandas/,2152,columns as list,
pandas/,2160,maybe create a mi on the columns,
pandas/,2166,hackish,
pandas/,2318,Set self.data to something that can read lines.,
pandas/,2324,"Get columns in two steps: infer from data, then",
pandas/,2325,infer column indices from self.usecols if it is specified.,
pandas/,2337,Now self.columns has the set of columns that we will process.,
pandas/,2338,The original set is stored in self.original_columns.,
pandas/,2340,we are processing a multi index column,
pandas/,2349,Update list of original names to include all indices.,
pandas/,2354,get popped off for index,
pandas/,2357,needs to be cleaned/refactored,
pandas/,2358,multiple date column thing turning into a real spaghetti factory,
pandas/,2383,Create a set of column ids that are not to be stripped of thousands,
pandas/,2384,operators.,
pandas/,2441,"attempt to sniff the delimiter from the first valid line,",
pandas/,2442,i.e. no comment line and not in skiprows,
pandas/,2450,"since `line` was a string, lines will be a list containing",
pandas/,2451,only a single string,
pandas/,2459,Note: self.encoding is irrelevant here,
pandas/,2463,Note: self.encoding is irrelevant here,
pandas/,2490,"done with first read, next time raise StopIteration",
pandas/,2494,pragma: no cover,
pandas/,2495,"DataFrame with the right metadata, even though it's length 0",
pandas/,2503,handle new style for names in index,
pandas/,2538,legacy,
pandas/,2545,apply converters,
pandas/,2557,handles single dtype applied to all columns,
pandas/,2562,Apply NA values.,
pandas/,2600,"we have a mi columns, so read an extra line",
pandas/,2622,"We have an empty file, so check",
pandas/,2623,if columns are provided. That will,
pandas/,2624,serve as the 'line' for parsing,
pandas/,2666,"if we have grabbed an extra line, but its not in our",
pandas/,2667,"format so save in the buffer, and create an blank extra",
pandas/,2668,line for the rest of the parsing code,
pandas/,2700,Set _use_cols. We don't store columns because they are,
pandas/,2701,overwritten.,
pandas/,2738,Ignore output but set used columns.,
pandas/,2796,"first_row will be a list, so we need to check",
pandas/,2797,that that list is not empty before proceeding.,
pandas/,2801,The first element of this row is the one that could have the,
pandas/,2802,BOM that we want to remove. Check that the first element is a,
pandas/,2803,string before proceeding.,
pandas/,2807,"Check that the string is not empty, as that would",
pandas/,2808,obviously not have a BOM at the start of it.,
pandas/,2812,"Since the string is non-empty, check that it does",
pandas/,2813,in fact begin with a BOM.,
pandas/,2825,Extract the data between the quotation marks,
pandas/,2828,Extract any remaining data after the second,
pandas/,2829,quotation mark.,
pandas/,2837,"First row is just the BOM, so we",
pandas/,2838,return an empty string.,
pandas/,2865,either uncommented or blank to begin with,
pandas/,2898,"This was the first line of the file,",
pandas/,2899,which could contain the BOM at the,
pandas/,2900,beginning of it.,
pandas/,3001,Remove empty lines and lines with only one whitespace value,
pandas/,3073,implicitly index_col=0 b/c 1 fewer column names,
pandas/,3076,"leave it 0, #2442",
pandas/,3077,Case 1,
pandas/,3081,Case 0,
pandas/,3084,column and index names on diff rows,
pandas/,3091,Update list of original names to include all indices.,
pandas/,3097,Case 1,
pandas/,3105,Case 2,
pandas/,3120,Check that there are no rows with too many,
pandas/,3121,elements in their row (rows with too few,
pandas/,3122,elements are padded with NaN).,
pandas/,3155,see gh-13374,
pandas/,3164,see gh-13320,
pandas/,3187,already fetched some number,
pandas/,3189,we already have the lines in the buffer,
pandas/,3193,need some lines,
pandas/,3208,Check for stop rows. n.b.: self.skiprows is a set.,
pandas/,3333,list of column lists,
pandas/,3352,dict of new name to column list,
pandas/,3405,Prevent aliasing.,
pandas/,3407,Convert the values in the na_values dictionary,
pandas/,3408,into array-likes for further use. This is also,
pandas/,3409,"where we append the default NaN values, provided",
pandas/,3410,that `keep_default_na=True`.,
pandas/,3441,don't mutate,
pandas/,3457,Only clean index names that were placeholders.,
pandas/,3468,Convert `dtype` to a defaultdict of some kind.,
pandas/,3469,This will enable us to write `dtype[col_name]`,
pandas/,3470,without worrying about KeyError issues later on.,
pandas/,3472,"if dtype == None, default will be np.object.",
pandas/,3476,Save a copy of the dictionary.,
pandas/,3480,Convert column indexes to column names.,
pandas/,3485,"Even though we have no data, the ""index"" of the empty DataFrame",
pandas/,3486,"could for example still be an empty MultiIndex. Thus, we need to",
pandas/,3487,"check whether we have any index columns specified, via either:",
pandas/,3488,,
pandas/,3489,1) index_col (column indices),
pandas/,3490,2) index_names (column names),
pandas/,3491,,
pandas/,3492,"Both must be non-null to ensure a successful construction. Otherwise,",
pandas/,3493,we have to create a generic empty Index.,
pandas/,3510,create float versions of the na_values,
pandas/,3531,we are like 999 here,
pandas/,3667,Regex escape the delimiters,
pandas/,3695,Note: 'colspecs' is a sequence of half-open intervals.,
pandas/,3706,"Support iterators, convert to a list.",
pandas/,31,boto3 has troubles when trying to access a public file,
pandas/,32,when credentialed...,
pandas/,33,"An OSError is raised if you have credentials, but they",
pandas/,34,aren't valid for that bucket.,
pandas/,35,A NoCredentialsError is raised if you don't have creds,
pandas/,36,for that bucket.,
pandas/,20,try engines in this order,
pandas/,55,must have value column names (strings only),
pandas/,59,index level names must be strings,
pandas/,80,import utils to register the pyarrow extension types,
pandas/,81,noqa,
pandas/,128,since pandas is a dependency of fastparquet,
pandas/,129,we need to import on first use,
pandas/,145,thriftpy/protocol/compact.py:339:,
pandas/,146,DeprecationWarning: tostring() is deprecated.,
pandas/,147,Use tobytes() instead.,
pandas/,161,if path is s3:// or gs:// we need to open the file in 'wb' mode.,
pandas/,162,TODO: Support 'ab',
pandas/,165,And pass the opened file to the fastparquet internal impl.,
pandas/,184,When path is s3:// an S3File is returned.,
pandas/,185,We need to retain the original path(str) while also,
pandas/,186,pass the S3File().open function to fsatparquet impl.,
pandas/,40,pyreadstat requires a list,
pandas/,31,import things we need,
pandas/,32,but make this done on a first use basis,
pandas/,55,,
pandas/,56,READ HTML,
pandas/,57,,
pandas/,234,Both lxml and BeautifulSoup have the same implementation:,
pandas/,407,The table has no <thead>. Move the top all-<th> rows from,
pandas/,408,body_rows to header_rows. (This is a common case because many,
pandas/,409,tables in the wild have no <thead> or <tfoot>,
pandas/,438,"list of rows, each a list of str",
pandas/,439,"list of (index, text, nrows)",
pandas/,442,the output for this row,
pandas/,448,Append texts from previous rows with rowspan>1 that come,
pandas/,449,before this <td>,
pandas/,457,"Append the text from this <td>, colspan times",
pandas/,468,Append texts from previous rows at the final position,
pandas/,477,Append rows that only appear because the previous row had non-1,
pandas/,478,rowspan,
pandas/,578,HTML spec: at most one of these lists has content,
pandas/,618,give class attribute as class_ because class is a python keyword,
pandas/,656,"Look for direct children only: the ""row"" element here may be a",
pandas/,657,<thead> or <tfoot> (see _parse_thead_tr).,
pandas/,663,1. check all descendants for the given pattern and only search tables,
pandas/,664,2. go up the tree until we find a table,
pandas/,667,if any table attributes were given build an xpath expression to,
pandas/,668,search for them,
pandas/,677,lxml utilizes XPATH 1.0 which does not have regex,
pandas/,678,"support. As a result, we find all elements with a style",
pandas/,679,attribute and iterate them to check for display:none,
pandas/,717,try to parse the input in the simplest way,
pandas/,724,if the input is a blob of html goop,
pandas/,745,HACK: lxml does not clean up the clearly-erroneous,
pandas/,746,<thead><th>foo</th><th>bar</th></thead>. (Missing <tr>). Add,
pandas/,747,the <thead> and _pretend_ it's a <tr>; _parse_td() will find its,
pandas/,748,children as though it's a <tr>.,
pandas/,749,,
pandas/,750,Better solution would be to use html5lib.,
pandas/,760,HTML spec: at most one of these lists has content,
pandas/,785,Infer header when there is a <thead> or top <th>-only rows,
pandas/,790,ignore all-empty-text rows,
pandas/,796,"fill out elements of body that are ""ragged""",
pandas/,843,"Although we call this above, we want to raise here right before use.",
pandas/,844,noqa:F841,
pandas/,887,you can pass a compiled regex here,
pandas/,897,"if `io` is an io-like object, check if it's seekable",
pandas/,898,and try to rewind it before trying the next parser,
pandas/,902,"if we couldn't rewind it, let the user know",
pandas/,920,empty table,
pandas/,1075,Type check here. We don't want to parse only to fail because of an,
pandas/,1076,invalid value of an integer skiprows.,
pandas/,60,noqa:F401,
pandas/,63,versioning attribute,
pandas/,66,encoding,
pandas/,78,set the encoding if we need,
pandas/,107,only consider list/tuple here as an ndarray is automatically a coordinate,
pandas/,108,list,
pandas/,165,formats,
pandas/,168,axes map,
pandas/,171,register our configuration options,
pandas/,191,oh the troubles to reduce import time,
pandas/,204,set the file open policy,
pandas/,205,return the file open policy; this changes as of pytables 3.1,
pandas/,206,depending on the HDF5 version,
pandas/,217,interface to/from,
pandas/,252,NB: dropna is not passed to `put`,
pandas/,355,grab the scope,
pandas/,374,if filepath is too long,
pandas/,382,can't auto open/close if we are using an iterator,
pandas/,383,so delegate to the iterator,
pandas/,393,"For the HDF file to have only one dataset, all other groups",
pandas/,394,should then be metadata groups for that candidate group. (This,
pandas/,395,assumes that the groups() method enumerates parent groups,
pandas/,396,before their children.),
pandas/,416,"if there is an error, close the store if we opened it.",
pandas/,616,"if we are changing a write mode to read, ok",
pandas/,621,"this would truncate, raise here",
pandas/,630,close and reopen the handle,
pandas/,641,pragma: no cover,
pandas/,650,trap PyTables >= 3.1 FILE_OPEN_POLICY exception,
pandas/,651,to provide an updated message,
pandas/,669,trying to read from a non-existent file causes an error which,
pandas/,670,"is not part of IOError, make it one",
pandas/,776,create the storer and axes,
pandas/,781,function to call on iteration,
pandas/,785,create the iterator,
pandas/,890,default to single select,
pandas/,915,collect the tables,
pandas/,919,validate rows,
pandas/,935,"The isinstance checks here are redundant with the check above,",
pandas/,936,but necessary for mypy; see GH#29757,
pandas/,939,axis is the concentration axes,
pandas/,944,"retrieve the objs, _where is always passed as a set of",
pandas/,945,coordinates here,
pandas/,951,concat and return,
pandas/,954,create the iterator,
pandas/,1054,"the key is not a valid store, re-raising KeyError",
pandas/,1057,surface any assertion errors for e.g. debugging,
pandas/,1060,"In tests we get here with ClosedFileError, TypeError, and",
pandas/,1061,_table_mod.NoSuchNodeError.  TODO: Catch only these?,
pandas/,1068,we are actually trying to remove a node (with children),
pandas/,1074,remove the node,
pandas/,1078,delete from the table,
pandas/,1217,figure out the splitting axis (the non_index_axis),
pandas/,1220,figure out how to split the value,
pandas/,1238,data_columns,
pandas/,1242,ensure rows are synchronized across the tables,
pandas/,1250,append,
pandas/,1254,compute the val,
pandas/,1289,version requirements,
pandas/,1379,for mypy,
pandas/,1482,surface any assertion errors for e.g. debugging,
pandas/,1497,------------------------------------------------------------------------,
pandas/,1498,private methods,
pandas/,1506,validate,
pandas/,1529,return instead of raising so mypy can tell where we are raising,
pandas/,1538,infer the pt from the passed value,
pandas/,1543,for mypy,
pandas/,1558,we are actually a table,
pandas/,1562,a storer node,
pandas/,1571,existing node (and must be a table),
pandas/,1574,"if we are a writer, determine the tt",
pandas/,1629,we make this assertion for mypy; the get_node call will already,
pandas/,1630,have raised if this is incorrect,
pandas/,1633,remove the node if we are not appending,
pandas/,1638,we don't want to store a table node at all if our object is 0-len,
pandas/,1639,as there are not dtypes,
pandas/,1646,recursively create the groups,
pandas/,1662,"raise if we are trying to append to a Fixed format,",
pandas/,1663,or a table that exists (and we are putting),
pandas/,1674,write the object,
pandas/,1741,set start/stop if they are not set if we are a table,
pandas/,1767,iterate,
pandas/,1787,return the actual iterator,
pandas/,1796,if specified read via coordinates (necessary for multiple selections,
pandas/,1806,directly return the result,
pandas/,1872,These are ensured as long as the passed arguments match the,
pandas/,1873,constructor annotations.,
pandas/,1879,Assumes self.typ has already been initialized,
pandas/,1917,"e.g. if infer hasn't been called yet, self.table will be None.",
pandas/,1927,values is a recarray,
pandas/,1940,making an Index instance could throw a number of different errors,
pandas/,1944,"if the output freq is different that what we recorded,",
pandas/,1945,it should be None (see also 'doc example part 2'),
pandas/,2005,validate this column for string truncation (or reset to the max size),
pandas/,2023,check for backwards incompatibility,
pandas/,2044,frequency/name just warn,
pandas/,2049,reset,
pandas/,2222,"EA, use block shape pretending it is 2D",
pandas/,2254,we store as integer,
pandas/,2314,values is a recarray,
pandas/,2320,"Note: in tests we never have timedelta64 or datetime64,",
pandas/,2321,so the _get_data_and_dtype_name may be unnecessary,
pandas/,2329,for mypy,
pandas/,2331,use the meta if needed,
pandas/,2338,convert to the correct dtype,
pandas/,2341,reverse converts,
pandas/,2344,recreate with tz if indicated,
pandas/,2361,we have a categorical,
pandas/,2365,if we have stored a NaN in the categories,
pandas/,2366,then strip it; in theory we could have BOTH,
pandas/,2367,-1s in the codes and nulls :<,
pandas/,2369,Handle case of NaN-only categorical columns in which case,
pandas/,2370,"the categories are an empty array; when this is stored,",
pandas/,2371,"pytables cannot write a zero-len array, so on readback",
pandas/,2372,the categories would be None and `read_hdf()` would fail.,
pandas/,2391,convert nans / decode,
pandas/,2414,TODO: should the message here be more specifically non-str?,
pandas/,2454,GH#30962 needed by dask,
pandas/,2471,needed for mypy,
pandas/,2625,indexer helpders,
pandas/,2630,pragma: no cover,
pandas/,2631,compat: for a short period of time master stored types,
pandas/,2639,"data are already in UTC, localize and convert if tz present",
pandas/,2709,length 0 axis,
pandas/,2716,reconstruct a timezone if indicated,
pandas/,2739,pragma: no cover,
pandas/,2771,write the level,
pandas/,2783,write the name,
pandas/,2786,write the labels,
pandas/,2817,If the index was an empty array write_array_empty() will,
pandas/,2818,have written a sentinel. Here we relace it with the original.,
pandas/,2839,created by python2,
pandas/,2842,created by python3,
pandas/,2867,ugly hack for length 0 axes,
pandas/,2875,"TODO: we only have one test that gets here, the only EA",
pandas/,2876,"that gets passed is DatetimeArray, and we never have",
pandas/,2877,both self._filters and EA,
pandas/,2883,Transform needed to interface with pytables row/col notation,
pandas/,2894,ExtensionArrays (1d) may not have transpose.,
pandas/,2901,get the atom for this datatype,
pandas/,2907,We only get here if self._filters is non-None and,
pandas/,2908,the Atom.from_dtype call succeeded,
pandas/,2910,create an empty chunked array and fill it from value,
pandas/,2922,"infer the type, warn if we have a non-string type here (for",
pandas/,2923,performance),
pandas/,2942,store as UTC,
pandas/,2943,with a zone,
pandas/,3000,items,
pandas/,3008,data shape,
pandas/,3029,"start, stop applied to rows, so 0th axis only",
pandas/,3071,Supporting mixed-type DataFrame objects...nontrivial,
pandas/,3074,"I have no idea why, but writing values before items fixed #2299",
pandas/,3111,GH#30962 needed by dask,
pandas/,3189,show the error for the specific axes,
pandas/,3198,should never get here,
pandas/,3276,"mypy doesn't recognize DataFrame._AXIS_NAMES, so we re-write it here",
pandas/,3279,compute the values_axes queryables,
pandas/,3286,type: ignore,
pandas/,3287,error: List comprehension has incompatible type,
pandas/,3288,"List[Tuple[Any, None]]; expected List[Tuple[str, IndexCol]]",
pandas/,3292,Note: each `i.cname` below is assured to be a str.,
pandas/,3374,"ok, apply generally",
pandas/,3391,"Note: each of the `name` kwargs below are str, ensured",
pandas/,3392,by the definition in index_cols.,
pandas/,3393,index columns,
pandas/,3414,values columns,
pandas/,3427,TODO: why kind_attr here?,
pandas/,3433,TODO: figure out why these two versions of `meta` dont always match.,
pandas/,3434,"meta = ""category"" if md is not None else None",
pandas/,3451,Note: the definition of `values_cols` ensures that each,
pandas/,3452,`c` below is a str.,
pandas/,3490,index all indexables and data_columns,
pandas/,3507,remove the index if the kind/optlevel have changed,
pandas/,3523,create the index,
pandas/,3551,create the selection,
pandas/,3556,convert the data,
pandas/,3590,"evaluate the passed data_columns, True == use all columns",
pandas/,3591,take only valide axis labels,
pandas/,3597,"if min_itemsize is a dict, add the keys (exclude 'values')",
pandas/,3601,ensure we do not modify,
pandas/,3610,return valid columns in the order of our axis,
pandas/,3652,set the default axes if needed,
pandas/,3656,map axes to numbers,
pandas/,3659,"do we have an existing table (if so, use its axes & data_columns)",
pandas/,3665,TODO: do we always have validate=True here?,
pandas/,3671,"with next check, we must have len(axes) == 1",
pandas/,3672,currently support on ndim-1 axes,
pandas/,3678,create according to the new data,
pandas/,3681,nan_representation,
pandas/,3685,"We construct the non-index-axis first, since that alters new_info",
pandas/,3689,we might be able to change the axes on the appending data if necessary,
pandas/,3692,i.e. 0,
pandas/,3696,ahah! -> reindex,
pandas/,3702,the non_index_axes info,
pandas/,3709,Now we can construct our new index axis,
pandas/,3716,"Because we are always 2D, there is only one new_index, so",
pandas/,3717,we know it will have pos=0,
pandas/,3720,check for column conflicts,
pandas/,3723,i.e. 1,
pandas/,3726,reindex by our non_index_axes & compute data_columns,
pandas/,3736,figure out data_columns and get out blocks,
pandas/,3747,add my values,
pandas/,3751,shape of the data column are the indexable axes,
pandas/,3755,we have a data_column,
pandas/,3760,TODO: should the message here be more specifically non-str?,
pandas/,3763,make sure that we match up the existing columns,
pandas/,3764,if we have an existing table,
pandas/,3837,"TODO: get this into constructor, only for appropriate subclass",
pandas/,3851,Helper to clarify non-state-altering parts of _create_axes,
pandas/,3871,reorder the blocks in the same order as the existing table if we can,
pandas/,3898,make a copy to avoid side effects,
pandas/,3902,make sure to include levels if we have them,
pandas/,3904,assured by is_multi_index,
pandas/,3909,reorder by any non_index_axes & limit to the select columns,
pandas/,3913,apply the selection filters (but keep in the same order),
pandas/,3924,see if the field is the name of an axis,
pandas/,3927,"if we have a multi-index, then need to include",
pandas/,3928,the levels,
pandas/,3935,this might be the name of a file IN an axis,
pandas/,3938,we need to filter on this dimension,
pandas/,3942,hack until we support reversed dim flags,
pandas/,3962,provided expected rows if its passed,
pandas/,3968,description from the axes & values,
pandas/,3992,validate the version,
pandas/,3995,infer the data kind,
pandas/,3999,create the selection,
pandas/,4022,validate the version,
pandas/,4025,infer the data kind,
pandas/,4032,find the axes,
pandas/,4042,column must be an indexable or a data column,
pandas/,4110,create the axes,
pandas/,4125,create the table,
pandas/,4133,set the table attributes,
pandas/,4136,create the table,
pandas/,4139,update my info,
pandas/,4142,validate the axes and set the kinds,
pandas/,4146,add the rows,
pandas/,4156,"if dropna==True, then drop ALL nan rows",
pandas/,4162,figure the mask: only do if we can successfully process this,
pandas/,4163,"column, otherwise ignore the mask",
pandas/,4168,consolidate masks,
pandas/,4177,broadcast the indexes if needed,
pandas/,4180,ensures we dont need to broadcast,
pandas/,4182,transpose the values so first dimension is last,
pandas/,4183,reshape the values if needed,
pandas/,4191,write the chunks,
pandas/,4225,0 len,
pandas/,4236,indexes,
pandas/,4240,values,
pandas/,4244,mask,
pandas/,4258,delete all rows (and return the nrows),
pandas/,4264,pytables<3.0 would remove a single row with stop=None,
pandas/,4271,infer the data kind,
pandas/,4275,create the selection,
pandas/,4280,delete the rows in reverse order,
pandas/,4286,construct groups of consecutive rows,
pandas/,4290,1 group,
pandas/,4294,final element,
pandas/,4298,initial element,
pandas/,4302,we must remove in reverse order!,
pandas/,4313,return the number of rows removed,
pandas/,4344,validate the version,
pandas/,4347,infer the data kind,
pandas/,4371,we could have a multi-index constructor here,
pandas/,4372,ensure_index doesn't recognized our list-of-tuples here,
pandas/,4391,"if we have a DataIndexableCol, its shape will only be 1 dim",
pandas/,4400,Categorical,
pandas/,4411,apply the selection filters & axis orderings,
pandas/,4450,needed for mypy,
pandas/,4460,remove the default name,
pandas/,4513,TODO: can we get a typ for this?  AFAICT it is the only place,
pandas/,4514,where we aren't passing one,
pandas/,4515,the index columns is just a simple index,
pandas/,4581,remove names for 'level_%d',
pandas/,4593,try not to reindex even if other is provided,
pandas/,4594,if it equals our current index,
pandas/,4610,tz to/from coercion,
pandas/,4635,"If values is tzaware, the tz gets dropped in the values.ravel()",
pandas/,4636,call below (which returns an ndarray).  So we are only non-lossy,
pandas/,4637,if `tz` matches `values.tz`.,
pandas/,4661,"Includes Int64Index, RangeIndex, DatetimeIndex, TimedeltaIndex, PeriodIndex,",
pandas/,4662,"in which case ""kind"" is ""integer"", ""integer"", ""datetime64"",",
pandas/,4663,"""timedelta64"", and ""integer"", respectively.",
pandas/,4678,"we won't get inferred_type of ""datetime64"" or ""timedelta64"" as these",
pandas/,4679,would go through the DatetimeIndex/TimedeltaIndex paths above,
pandas/,4733,pragma: no cover,
pandas/,4751,after GH#8260,
pandas/,4752,this only would be hit for a multi-timezone dtype which is an error,
pandas/,4762,"Note: because block is always object dtype, fillna goes",
pandas/,4763,through a path such that the result is always a 1-element list,
pandas/,4767,see if we have a valid string type,
pandas/,4771,"we cannot serialize this data, so report an exception on a column",
pandas/,4772,by column basis,
pandas/,4784,itemsize is the maximum length of a string (along any dimension),
pandas/,4789,specified min_itemsize?,
pandas/,4794,check for column in the values conflicts,
pandas/,4819,encode if needed,
pandas/,4827,create the sized dtype,
pandas/,4889,pragma: no cover,
pandas/,4947,We store the `freq` attr so we can restore from integers,
pandas/,4964,For datetime64tz we need to drop the TZ in tests TODO: why?,
pandas/,4969,"TODO: we used to reshape for the dt64tz case, but no longer",
pandas/,4970,doing that doesn't seem to break anything.  why?,
pandas/,5009,see if we have a passed coordinate like,
pandas/,5037,create the numexpr & the filter,
pandas/,5050,"raise a nice message, suggesting that the user should use",
pandas/,5051,data_columns,
pandas/,171,TODO: Add typing. As of January 2020 it is not possible to type this function since,
pandas/,172,mypy doesn't understand that a Series and an int can be combined using mathematical,
pandas/,173,"operations. (+, -).",
pandas/,279,"TODO: If/when pandas supports more than datetime64[ns], this should be",
pandas/,280,"improved to use correct range, e.g. datetime[Y] for yearly",
pandas/,286,Replace with NaT,
pandas/,289,Delta ms relative to base,
pandas/,300,Delta days relative to base,
pandas/,305,does not count leap days - 7 days is a week.,
pandas/,306,52nd week may have more than 7 days,
pandas/,311,Delta months relative to base,
pandas/,315,Delta quarters relative to base,
pandas/,319,Delta half-years relative to base,
pandas/,323,Years -- not delta,
pandas/,330,Restore NaT for bad values,
pandas/,357,microseconds,
pandas/,510,"original, if small, if large",
pandas/,523,Cast from unsupported types to supported types,
pandas/,530,Warn if necessary,
pandas/,536,Check values and upcast if necessary,
pandas/,599,Compute lengths and setup lists of offsets and labels,
pandas/,610,+1 for the padding,
pandas/,621,Ensure int32,
pandas/,625,Total length,
pandas/,646,len,
pandas/,649,labname,
pandas/,655,padding - 3 bytes,
pandas/,659,value_label_table,
pandas/,660,n - int32,
pandas/,663,textlen  - int32,
pandas/,666,off - int32 array (n elements),
pandas/,670,val - int32 array (n elements),
pandas/,674,"txt - Text labels, null terminated",
pandas/,719,Construct a dictionary of missing values,
pandas/,723,Conversion to long to avoid hash issues on 32 bit platforms #8968,
pandas/,758,Conversion to int to avoid hash issues on 32 bit platforms #8968,
pandas/,819,type          code.,
pandas/,820,--------------------,
pandas/,821,str1        1 = 0x01,
pandas/,822,str2        2 = 0x02,
pandas/,823,...,
pandas/,824,str244    244 = 0xf4,
pandas/,825,byte      251 = 0xfb  (sic),
pandas/,826,int       252 = 0xfc,
pandas/,827,long      253 = 0xfd,
pandas/,828,float     254 = 0xfe,
pandas/,829,double    255 = 0xff,
pandas/,830,--------------------,
pandas/,831,NOTE: the byte type seems to be reserved for categorical variables,
pandas/,832,"with a label, but the underlying variable is -127 to 100",
pandas/,833,we're going to drop the label and cast to int,
pandas/,846,Keys to GSO,
pandas/,857,"Not really a Q, unclear how to handle byteswap",
pandas/,866,"NOTE: technically, some of these are wrong. there are more numbers",
pandas/,867,that can be represented. it's the 27 ABOVE and BELOW the max listed,
pandas/,868,numeric data type in [U] 12.2.2 of the 11.2 manual,
pandas/,888,byte,
pandas/,889,int,
pandas/,890,long,
pandas/,891,float,
pandas/,892,don't know old code for double,
pandas/,895,"These missing values are the generic '.' in Stata, and are used",
pandas/,896,to replace nans,
pandas/,915,Reserved words cannot be used as variable names,
pandas/,998,Arguments to the reader (can be temporarily overridden in,
pandas/,999,calls to read).,
pandas/,1010,State variables for the file,
pandas/,1028,"Copy to BytesIO, and ensure no encoding",
pandas/,1068,calculate size of a data record,
pandas/,1072,The first part of the header is common to 117 - 119.,
pandas/,1073,stata_dta><header><release>,
pandas/,1078,</release><byteorder>,
pandas/,1080,</byteorder><K>,
pandas/,1086,</K><N>,
pandas/,1089,</N><label>,
pandas/,1091,</label><timestamp>,
pandas/,1093,</timestamp></header><map>,
pandas/,1094,0x0000000000000000,
pandas/,1095,position of <map>,
pandas/,1113,Requires version-specific treatment,
pandas/,1116,<characteristics>,
pandas/,1147,"Get data type information, works for versions 117-119.",
pandas/,1181,"33 in order formats, 129 in formats 118 and 119",
pandas/,1185,Returns the format list,
pandas/,1198,Returns the label list,
pandas/,1255,"<variable_labels>, throw away",
pandas/,1256,Stata 117 data files do not follow the described format.  This is,
pandas/,1257,"a work around that uses the previous label, 33 bytes for each",
pandas/,1258,"variable, 20 for the closing tag and 17 for the opening tag",
pandas/,1274,unused,
pandas/,1283,descriptors,
pandas/,1294,bytes,
pandas/,1326,ignore expansion fields (Format 105 and later),
pandas/,1327,"When reading, read five bytes; the last four bytes now tell you",
pandas/,1328,"the size of the next read, which you discard.  You then continue",
pandas/,1329,like this until you read 5 bytes of zeros.,
pandas/,1348,necessary data to continue parsing,
pandas/,1356,Convert struct data types to numpy data type,
pandas/,1372,"have bytes not strings, so must decode",
pandas/,1377,"GH 25960, fallback to handle incorrect format produced when 117",
pandas/,1378,files are converted to 118 files in Stata,
pandas/,1390,Don't read twice,
pandas/,1393,Value labels are not supported in version 108 and earlier.,
pandas/,1410,<lbl>,
pandas/,1411,end of value label table,
pandas/,1415,end of value label table (format < 117),
pandas/,1420,padding,
pandas/,1439,</lbl>,
pandas/,1444,Wrap v_o in a string to allow uint64 values as keys on 32bit OS,
pandas/,1454,Only tested on little endian file on little endian machine.,
pandas/,1459,"This path may not be correct, impossible to test",
pandas/,1468,"Stata says typ 129 can be binary, so use str",
pandas/,1470,Wrap v_o in a string to allow uint64 values as keys on 32bit OS,
pandas/,1505,Handle empty file or chunk.  If reading incrementally raise,
pandas/,1506,StopIteration.  If reading the whole thing return an empty,
pandas/,1507,data frame.,
pandas/,1514,Handle options,
pandas/,1537,Read data,
pandas/,1544,"Iterator has finished, should never be here unless",
pandas/,1545,we are reading the file incrementally,
pandas/,1561,"if necessary, swap the byte order to native here",
pandas/,1574,"If index is not specified, use actual row number rather than",
pandas/,1575,restarting at 0 for each chunk.,
pandas/,1587,Decode strings,
pandas/,1596,Convert columns (if needed) to match input type,
pandas/,1659,"Check for missing values, and replace if found",
pandas/,1673,Replacement follows Stata notation,
pandas/,1682,All replacements are identical,
pandas/,1702,Wrap v_o in a string to allow uint64 values as keys on 32bit OS,
pandas/,1719,Copy information for retained columns for later processing,
pandas/,1753,Explicit call with ordered=True,
pandas/,1760,Partially labeled,
pandas/,1767,GH 25772,
pandas/,1780,TODO: is the next line needed above in the data(...) method?,
pandas/,1873,See https://github.com/python/mypy/issues/1424 for hasattr challenges,
pandas/,1874,type: ignore,
pandas/,1886,pragma : no cover,
pandas/,1919,Stata expects doubles for SIFs,
pandas/,1927,make sure proper fmts,
pandas/,1954,TODO: expand to handle datetime to integer conversion,
pandas/,1955,try to coerce it to the biggest string,
pandas/,1956,"not memory efficient, what else could we",
pandas/,1957,do?,
pandas/,1970,pragma : no cover,
pandas/,1991,TODO: Refactor to combine type with format,
pandas/,1992,TODO: expand this to handle a default datetime format?,
pandas/,2015,pragma : no cover,
pandas/,2105,"attach nobs, nvars, data, varlist, typlist",
pandas/,2155,Upcast if needed so that correct missing values can be set,
pandas/,2165,Replace missing values with Stata missing value for type,
pandas/,2173,return data,
pandas/,2248,Variable name must not be a reserved word,
pandas/,2252,Variable name may not start with a number,
pandas/,2259,check for duplicates,
pandas/,2261,prepend ascending number to avoid duplicates,
pandas/,2271,"Check date conversion, and fix key if needed",
pandas/,2300,NOTE: we might need a different API / class for pandas objects so,
pandas/,2301,we can set different semantics - handle this with a PR to pandas.io,
pandas/,2310,Ensure column names are strings,
pandas/,2313,"Check columns for compatibility with stata, upcast if necessary",
pandas/,2314,Raise if outside the supported range,
pandas/,2317,Replace NaNs with Stata missing values,
pandas/,2320,"Convert categoricals to int data, and strip labels",
pandas/,2329,Ensure all date columns are converted,
pandas/,2343,Verify object arrays are strings and encode to bytes,
pandas/,2348,set the given format for the datetime cols,
pandas/,2363,_convert_strl is not available in dta 114,
pandas/,2366,Skip columns marked for date conversion or strl conversion,
pandas/,2384,If larger than _max_string_length do nothing,
pandas/,2435,Some file-like objects might not support flush,
pandas/,2474,ds_format - just use 114,
pandas/,2476,byteorder,
pandas/,2478,filetype,
pandas/,2480,unused,
pandas/,2482,"number of vars, 2 bytes",
pandas/,2484,"number of obs, 4 bytes",
pandas/,2486,"data label 81 bytes, char, null terminated",
pandas/,2493,"time stamp, 18 bytes, char, null terminated",
pandas/,2494,format dd Mon yyyy hh:mm,
pandas/,2499,GH #13856,
pandas/,2500,Avoid locale-specific month conversion,
pandas/,2528,varlist names are checked by _check_column_names,
pandas/,2529,"varlist, requires null terminated",
pandas/,2536,"srtlist, 2*(nvar+1), int array, encoded by byteorder",
pandas/,2541,"fmtlist, 49*nvar, char array",
pandas/,2546,"lbllist, 33*nvar, char array",
pandas/,2548,Use variable name when categorical,
pandas/,2554,Default is empty label,
pandas/,2558,Missing labels are 80 blank characters plus null termination,
pandas/,2589,1. Convert dates,
pandas/,2596,2. Convert strls,
pandas/,2599,3. Convert bad string data to '' and pad to correct length,
pandas/,2646,TODO: expand to handle datetime to integer conversion,
pandas/,2649,try to coerce it to the biggest string,
pandas/,2650,"not memory efficient, what else could we",
pandas/,2651,do?,
pandas/,2667,pragma : no cover,
pandas/,2727,uint32,
pandas/,2728,uint64,
pandas/,2732,117 used uint32,
pandas/,2736,version == 119,
pandas/,2784,Allow columns with mixed str and None (GH 23633),
pandas/,2788,Stata prefers human numbers,
pandas/,2816,Format information,
pandas/,2817,Length includes null term,
pandas/,2818,117,
pandas/,2819,GSOvvvvooootllllxxxxxxxxxxxxxxx...x,
pandas/,2820,3  u4  u4 u1 u4  string + null term,
pandas/,2821,,
pandas/,2822,"118, 119",
pandas/,2823,GSOvvvvooooooootllllxxxxxxxxxxxxxxx...x,
pandas/,2824,3  u4   u8   u1 u4    string + null term,
pandas/,2838,GSO,
pandas/,2841,vvvv,
pandas/,2844,oooo / oooooooo,
pandas/,2847,t,
pandas/,2850,llll,
pandas/,2854,xxx...xxx,
pandas/,2950,Copy to new list since convert_strl might be modified later,
pandas/,2989,ds_format - 117,
pandas/,2991,byteorder,
pandas/,2993,"number of vars, 2 bytes in 117 and 118, 4 byte in 119",
pandas/,2996,"117 uses 4 bytes, 118 uses 8",
pandas/,2999,"data label 81 bytes, char, null terminated",
pandas/,3006,"time stamp, 18 bytes, char, null terminated",
pandas/,3007,format dd Mon yyyy hh:mm,
pandas/,3012,Avoid locale-specific month conversion,
pandas/,3033,'\x11' added due to inspection of Stata file,
pandas/,3065,Move to start of map,
pandas/,3084,118 scales by 4 to accommodate utf-8 data worst case encoding,
pandas/,3110,118 scales by 4 to accommodate utf-8 data worst case encoding,
pandas/,3113,Use variable name when categorical,
pandas/,3114,default name,
pandas/,3124,Missing labels are 80 blank characters plus null termination,
pandas/,3127,118 scales by 4 to accommodate utf-8 data worst case encoding,
pandas/,3195,Update convert_strl if names changed,
pandas/,3356,Override version set in StataWriter117 init,
pandas/,3379,High code points appear to be acceptable,
pandas/,23,noqa,
pandas/,35,noqa,
pandas/,53,noqa: F401,
pandas/,130,https://github.com/python/mypy/issues/1424,
pandas/,131,type: ignore,
pandas/,191,Override compression based on Content-Encoding header,
pandas/,233,lazify expensive import (~30ms),
pandas/,301,No compression has been explicitly specified,
pandas/,305,Infer compression,
pandas/,307,Convert all path types (e.g. pathlib.Path) to strings,
pandas/,310,"Cannot infer compression of a buffer, assume no compression",
pandas/,313,Infer compression from the filename/URL extension,
pandas/,319,Compression has been specified. Check that it's valid,
pandas/,393,Convert pathlib.Path/py.path.local or string,
pandas/,403,GH33398 the type ignores here seem related to mypy issue #5382;,
pandas/,404,it may be possible to remove them once that is resolved.,
pandas/,406,GZ Compression,
pandas/,410,type: ignore,
pandas/,414,type: ignore,
pandas/,417,BZ Compression,
pandas/,421,type: ignore,
pandas/,424,type: ignore,
pandas/,426,ZIP Compression,
pandas/,429,Ensure the container is closed as well.,
pandas/,445,XZ Compression,
pandas/,449,Unrecognized Compression,
pandas/,458,Encoding,
pandas/,461,No explicit encoding,
pandas/,464,Binary mode,
pandas/,468,Convert BytesIO or file objects passed with an encoding,
pandas/,483,we catch any errors that may have occurred,
pandas/,484,because that is consistent with the lower-level,
pandas/,485,"functionality of the C engine (pd.read_csv), so",
pandas/,486,leave the file handler as is then,
pandas/,492,type: ignore,
pandas/,501,GH 17778,
pandas/,550,"readline returns bytes, not str, but Python's CSV reader",
pandas/,551,"expects str, so convert the output to str before continuing",
pandas/,554,mmap doesn't raise if reading past the allocated,
pandas/,555,"data but instead returns an empty string, so raise",
pandas/,556,if that is returned,
pandas/,10,pragma: no cover,
pandas/,30,only utf-8 is valid for passed value because that's what clipboard,
pandas/,31,supports,
pandas/,40,"Try to decode (if needed, as ""text"" might already be a string here).",
pandas/,46,Excel copies into clipboard with \t separation,
pandas/,47,"inspect no more then the 10 first lines, if they",
pandas/,48,"all contain an equal number (>0) of tabs, infer",
pandas/,49,that this came from excel and set 'sep' accordingly,
pandas/,52,"Need to remove leading white space, since read_csv",
pandas/,53,accepts:,
pandas/,54,a  b,
pandas/,55,0  1  2,
pandas/,56,1  3  4,
pandas/,62,"Edge case where sep is specified to be None, return to default",
pandas/,66,Regex separator currently only works with python engine.,
pandas/,67,Default to python if separator is multi-character (regex),
pandas/,78,pragma: no cover,
pandas/,103,testing if an invalid encoding is passed to clipboard,
pandas/,118,clipboard_set (pyperclip) expects unicode,
pandas/,132,"str(df) has various unhelpful defaults, like truncation",
pandas/,317,Cannot directly use as_type with timezone data on object; raise for now,
pandas/,321,"No ISO constructor for Timedelta as of yet, so need to raise",
pandas/,1,---------------------------------------------------------------------,
pandas/,2,JSON normalization routines,
pandas/,22,Determine we have a JSON list to turn to lines otherwise just return the,
pandas/,23,"json object, only lists can",
pandas/,83,each key gets renamed with prefix,
pandas/,91,flatten if type is dict and,
pandas/,92,current dict level  < maximum level provided and,
pandas/,93,only dicts gets recurse-flattened,
pandas/,94,only at level>1 do we rename the rest of the keys,
pandas/,98,"so we skip copying for top level, common case",
pandas/,250,"GH 31507 GH 30145, if result is not Iterable, raise TypeError if not",
pandas/,251,"null, otherwise return an empty list",
pandas/,265,A bit of a hackjob,
pandas/,271,"naive normalization, this is idempotent for flat records",
pandas/,272,and potentially will inflate the data considerably for,
pandas/,273,deeply nested structures:,
pandas/,274,"{VeryLong: { b: 1,c:2}} -> {VeryLong.b:1 ,VeryLong.c:@}",
pandas/,275,,
pandas/,276,"TODO: handle record value which are lists, at least error",
pandas/,277,reasonably,
pandas/,290,Disastrously inefficient for now,
pandas/,317,For repeating the metadata later,
pandas/,343,"Data types, a problem",
pandas/,33,interface to/from,
pandas/,118,type: ignore,
pandas/,291,NotImplemented on a column MultiIndex,
pandas/,295,TODO: Do this timedelta properly in objToJSON.c See GH #15137,
pandas/,308,Convert PeriodIndex to datetimes before serializing,
pandas/,312,exclude index from obj if index=False,
pandas/,698,gh-5874: if the filepath is too long will raise here,
pandas/,781,Make sure that the returned objects have the right index.,
pandas/,851,try numpy,
pandas/,884,"don't try to coerce, unless a force conversion",
pandas/,891,dtype to force,
pandas/,911,try float,
pandas/,922,coerce floats to 64,
pandas/,929,don't coerce 0-len data,
pandas/,932,coerce ints if we can,
pandas/,941,coerce ints to 64,
pandas/,944,coerce floats to 64,
pandas/,960,no conversion on empty,
pandas/,971,ignore numbers that are out of range,
pandas/,1128,possibly handle dup columns,
pandas/,1147,our columns to parse,
pandas/,39,SAS7BDAT represents a SAS data file in SAS7BDAT format.,
pandas/,137,Check magic number,
pandas/,144,Get alignment information,
pandas/,163,Get endianness information,
pandas/,170,Get encoding information,
pandas/,177,Get platform information,
pandas/,198,Timestamp is epoch 01/01/1960,
pandas/,213,Read the rest of the header into cached_page.,
pandas/,274,Read a single float of the given width (4 or 8).,
pandas/,283,"Read a single signed integer of the given width (1, 2, 4 or 8).",
pandas/,467,Unknown purpose,
pandas/,582,unknown purpose,
pandas/,101,"Incomplete list of encodings, using SAS nomenclature:",
pandas/,102,http://support.sas.com/documentation/cdl/en/nlsref/61893/HTML/default/viewer.htm#a002607278.htm,
pandas/,160,List of frequently used SAS date and datetime formats,
pandas/,161,http://support.sas.com/documentation/cdl/en/etsug/60372/HTML/default/viewer.htm#etsug_intervals_sect009.htm,
pandas/,162,https://github.com/epam/parso/blob/master/src/main/java/com/epam/parso/impl/SasFileConstants.java,
pandas/,138,"e.g. ""16FEB11:10:07:55""",
pandas/,167,"This feature is not well documented, but some SAS XPORT files",
pandas/,168,"have 2-7 byte ""truncated"" floats.  To read these truncated",
pandas/,169,"floats, pad them with zeros on the right to make 8 byte floats.",
pandas/,170,,
pandas/,171,References:,
pandas/,172,https://github.com/jcushman/xport/pull/3,
pandas/,173,"The R ""foreign"" library",
pandas/,195,Start by setting first half of ieee number to first half of IBM,
pandas/,196,number sans exponent,
pandas/,199,The fraction bit to the left of the binary point in the ieee,
pandas/,200,"format was set and the number was shifted 0, 1, 2, or 3",
pandas/,201,places. This will tell us how to adjust the ibm exponent to be a,
pandas/,202,power of 2 ieee exponent and how to shift the fraction bits to,
pandas/,203,restore the correct magnitude.,
pandas/,209,shift the ieee number down the correct number of places then,
pandas/,210,set the second half of the ieee number to be the second half,
pandas/,211,"of the ibm number shifted appropriately, ored with the bits",
pandas/,212,from the first half that would have been shifted in if we,
pandas/,213,could shift a double. All we are worried about are the low,
pandas/,214,order 3 bits of the first half since we're only shifting by,
pandas/,215,"1, 2, or 3.",
pandas/,219,clear the 1 bit to the left of the binary point,
pandas/,222,set the exponent of the ieee number to be the actual exponent,
pandas/,223,plus the shift count + 1023. Or this into the first half of the,
pandas/,224,ieee number. The ibm exponent is excess 64 but is adjusted by 65,
pandas/,225,since during conversion to ibm format the exponent is,
pandas/,226,incremented by 1 and the fraction bits left 4 positions to the,
pandas/,227,right of the radix point.  (had to add >> 24 because C treats &,
pandas/,228,0x7f as 0x7f000000 and Python doesn't),
pandas/,265,"Since xport files include non-text byte sequences, xport files",
pandas/,266,should already be opened in binary mode in Python 3.,
pandas/,280,read file header,
pandas/,298,read member header,
pandas/,306,"usually 140, could be 135",
pandas/,309,member info,
pandas/,326,read field names,
pandas/,330,round up to nearest 80,
pandas/,337,pull data for one field,
pandas/,343,"rest at end gets ignored, so if field is short, pad out",
pandas/,344,to match struct pattern below,
pandas/,378,Setup the dtype.,
pandas/,412,8 byte blank,
pandas/,1,noqa,
pandas/,12,Use the xlwt module as the Excel writer.,
pandas/,37,Write the frame cells using xlwt.,
pandas/,20,This will call load_workbook on the filepath or buffer,
pandas/,21,And set the result to the book-attribute,
pandas/,33,TODO: hack in buffer capability,
pandas/,34,This might need some modifications to the Pyxlsb library,
pandas/,35,"Actual work for opening it is in xlsbpackage.py, line 20-ish",
pandas/,47,pyxlsb sheets are indexed from 1 onwards,
pandas/,48,"There's a fix for this in the source, but the pypi package doesn't have it",
pandas/,52,TODO: there is no way to distinguish between floats and datetimes in pyxlsb,
pandas/,53,This means that there is no way to read datetime types from an xlsb file yet,
pandas/,55,Prevents non-named columns from not showing up as Unnamed: i,
pandas/,160,"freeze_panes wasn't specified, return False so it won't be applied",
pandas/,161,to output sheet,
pandas/,166,trim header row so auto-index inference works,
pandas/,167,"xlrd uses '' , openpyxl None",
pandas/,224,Pop out header name and fill w/blank.,
pandas/,95,"Queue up empty values, writing only if content succeeds them",
pandas/,110,add blank rows to our table,
pandas/,116,Make our table square,
pandas/,159,GH5394,
pandas/,162,NA handling,
pandas/,66,Use the newer xlrd datetime handling.,
pandas/,72,"Excel doesn't distinguish between dates and time,",
pandas/,73,so we treat dates on the epoch as times only.,
pandas/,74,"Also, Excel supports 1900 and 1904 epochs.",
pandas/,91,GH5394 - Excel 'numbers' are always floats,
pandas/,92,it's a minimal perf hit and less surprising,
pandas/,17,Use the openpyxl module as the Excel writer.,
pandas/,22,Load from existing workbook,
pandas/,28,Create workbook object with default optimized_write=True.,
pandas/,36,compat - for openpyxl <= 2.4,
pandas/,404,Write the frame cells using openpyxl.,
pandas/,450,When cells are merged only the top-left cell is preserved,
pandas/,451,The behaviour of the other cells in a merged range is,
pandas/,452,undefined,
pandas/,462,Ignore first cell. It is already handled.,
pandas/,496,https://stackoverflow.com/questions/31416842/,
pandas/,497,openpyxl-does-not-close-excel-workbook-in-read-only-mode,
pandas/,512,TODO: replace with openpyxl constants,
pandas/,520,compat with xlrd,
pandas/,522,GH5394,
pandas/,339,"If filepath_or_buffer is a url, load the data into a BytesIO",
pandas/,348,N.B. xlrd.Book has a read attribute too,
pandas/,418,Keep sheetname to maintain backwards compatibility.,
pandas/,428,handle same-type duplicates.,
pandas/,439,assume an integer if not a string,
pandas/,452,forward fill and pull out names for MultiIndex column,
pandas/,469,Forward fill values for MultiIndex index.,
pandas/,475,Check if we have an empty dataset,
pandas/,476,before trying to collect data.,
pandas/,489,GH 12292 : error when read one empty column from excel file,
pandas/,523,"No Data, return an empty DataFrame",
pandas/,598,Defining an ExcelWriter implementation (see abstract methods for more...),
pandas/,600,- Mandatory,
pandas/,601,"- ``write_cells(self, cells, sheet_name=None, startrow=0, startcol=0)``",
pandas/,602,--> called to write additional DataFrames to disk,
pandas/,603,"- ``supported_extensions`` (tuple of supported extensions), used to",
pandas/,604,check that engine supports the given extension.,
pandas/,605,- ``engine`` - string that gives the engine name. Necessary to,
pandas/,606,instantiate class directly and bypass ``ExcelWriterMeta`` engine,
pandas/,607,lookup.,
pandas/,608,- ``save(self)`` --> called to save file to disk,
pandas/,609,- Mostly mandatory (i.e. should at least exist),
pandas/,610,"- book, cur_sheet, path",
pandas/,612,- Optional:,
pandas/,613,"- ``__init__(self, path, engine=None, **kwargs)`` --> always called",
pandas/,614,with path as first argument.,
pandas/,616,You also need to register the class with ``register_writer()``.,
pandas/,617,"Technically, ExcelWriter implementations don't need to subclass",
pandas/,618,ExcelWriter.,
pandas/,620,only switch class if generic(ExcelWriter),
pandas/,639,declare external properties you can count on,
pandas/,692,validate that this engine can handle the extension,
pandas/,721,pragma: no cover,
pandas/,772,Allow use as a contextmanager,
pandas/,819,"could be a str, ExcelFile, Book, etc.",
pandas/,821,Always a string,
pandas/,910,"Ensure we don't leak file descriptors, but put in try/except in case",
pandas/,911,attributes are already deleted,
pandas/,8,Map from openpyxl-oriented styles to flatter xlsxwriter representation,
pandas/,9,Ordering necessary for both determinism and because some are keyed by,
pandas/,10,prefixes of others.,
pandas/,88,Create a XlsxWriter format object.,
pandas/,103,src is a sequence of keys into a nested dict,
pandas/,104,dst is a flat key,
pandas/,117,TODO: support other fill patterns,
pandas/,172,Use the xlsxwriter module as the Excel writer.,
pandas/,198,Write the frame cells using xlsxwriter.,
pandas/,61,"NB: Most of the methods here could be classmethods, as only __init__",
pandas/,62,and __call__ make use of instance attributes.  We leave them as,
pandas/,63,instancemethods so that users can easily experiment with extensions,
pandas/,64,without monkey-patching.,
pandas/,90,TODO: memoize?,
pandas/,103,TODO: handle cell width and height: needs support in pandas.io.excel,
pandas/,125,"OpenXML also has 'justify', 'distributed'",
pandas/,129,"TODO: text-indent, padding-left -> alignment.indent",
pandas/,153,"convert styles and widths to openxml, one of:",
pandas/,154,'dashDot',
pandas/,155,'dashDotDot',
pandas/,156,'dashed',
pandas/,157,'dotted',
pandas/,158,'double',
pandas/,159,'hair',
pandas/,160,'medium',
pandas/,161,'mediumDashDot',
pandas/,162,'mediumDashDotDot',
pandas/,163,'mediumDashed',
pandas/,164,'slantDashDot',
pandas/,165,'thick',
pandas/,166,'thin',
pandas/,185,not handled,
pandas/,202,TODO: perhaps allow for special properties,
pandas/,203,-excel-pattern-bgcolor and -excel-pattern-type,
pandas/,257,roman,
pandas/,260,swiss,
pandas/,263,script,
pandas/,266,decorative,
pandas/,284,shadow if nonzero digit before shadow color,
pandas/,290,FIXME: dont leave commented-out,
pandas/,291,"'vertAlign':,",
pandas/,292,"'charset': ,",
pandas/,293,"'scheme': ,",
pandas/,294,"'outline': ,",
pandas/,295,"'condense': ,",
pandas/,399,"all missing, raise",
pandas/,404,"Deprecated in GH#17295, enforced in 1.0.0",
pandas/,472,Format multi-index as a merged cells.,
pandas/,496,Format in legacy format with dots to indicate levels.,
pandas/,558,output index and index_label?,
pandas/,560,check aliases,
pandas/,561,if list only take first as this is not a MultiIndex,
pandas/,566,if string good to go,
pandas/,578,write index_values,
pandas/,602,check for aliases,
pandas/,608,MultiIndex columns require an extra row,
pandas/,609,with index names (blank if None) for,
pandas/,610,"unambiguous round-trip, unless not merging,",
pandas/,611,in which case the names all go on one row Issue #11328,
pandas/,615,if index labels are not empty go ahead and dump,
pandas/,622,Format hierarchical rows as merged cells.,
pandas/,656,Format hierarchical rows with non-merged values.,
pandas/,679,Write the body of the frame data series by series.,
pandas/,19,Consider,
pandas/,20,"interactive shell terminal, can detect term size",
pandas/,21,"interactive non-shell terminal (ipnb/ipqtconsole), cannot detect term",
pandas/,22,"size non-interactive script, should disregard term size",
pandas/,24,in addition,
pandas/,25,"width,height have default values, but setting to 'None' signals",
pandas/,26,"should use Auto-Detection, But only in interactive shell-terminal.",
pandas/,27,Simple. yeah.,
pandas/,31,sane defaults for interactive non-shell terminal,
pandas/,32,"match default for width,height in config_init",
pandas/,38,pure terminal,
pandas/,43,Note if the User sets width/Height to None (auto-detection),
pandas/,44,"and we're in a script (non-inter), this will return (None,None)",
pandas/,45,caller needs to deal.,
pandas/,49,----------------------------------------------------------------------,
pandas/,50,Detect our environment,
pandas/,72,noqa,
pandas/,86,noqa,
pandas/,192,Levels are added in a newline,
pandas/,269,"truncation determined by max_rows, actual truncated number of rows",
pandas/,270,used below by min_rows,
pandas/,276,"if min_rows is set (not None or 0), set max_rows to minimum",
pandas/,277,of both,
pandas/,320,"level infos are added to the end and in a new line, like it is done",
pandas/,321,for Categoricals,
pandas/,369,Series uses mode=center because it has single value columns,
pandas/,370,DataFrame uses mode=left,
pandas/,411,Definition of East Asian Width,
pandas/,412,https://unicode.org/reports/tr11/,
pandas/,413,Ambiguous width can be changed by option,
pandas/,430,re-calculate padding space per str considering East Asian Width,
pandas/,497,GH#30034 open instead of codecs.open prevents a file leak,
pandas/,498,if we have an invalid encoding argument.,
pandas/,499,"newline="""" is needed to roundtrip correctly on",
pandas/,500,windows test_to_latex_filename,
pandas/,619,Cut the data to the information actually printed,
pandas/,625,assume we are in the terminal,
pandas/,634,assume we only get here if self.header is boolean.,
pandas/,635,i.e. not to_latex() where self.header may be List[str],
pandas/,638,rows available to fill with actual data,
pandas/,642,Format only rows and columns that could potentially fit the,
pandas/,643,screen,
pandas/,652,"if truncated, set max_rows showed to min_rows",
pandas/,666,"cast here since if truncate_h is True, max_cols_adj is not None",
pandas/,679,truncate formatter,
pandas/,688,"cast here since if truncate_v is True, max_rows_adj is not None",
pandas/,709,this method is not used by to_html where self.col_space,
pandas/,710,could be a string so safe to cast,
pandas/,714,may include levels names also,
pandas/,731,cast here since can't be bool if is_list_like,
pandas/,765,Add ... to signal truncated,
pandas/,775,"cast here since if truncate_v is True, self.tr_row_num is not None",
pandas/,778,infer from above row,
pandas/,817,no need to wrap around just print,
pandas/,818,the whole frame,
pandas/,822,need to wrap around,
pandas/,824,max_cols == 0. Try to fit frame to terminal,
pandas/,827,plus truncate dot col,
pandas/,829,'+ 1' to avoid too wide repr (GH PR #17023),
pandas/,839,adjoin adds one,
pandas/,843,subtract index column,
pandas/,845,GH-21180. Ensure that we print at least two.,
pandas/,849,Call again _chk_truncate to cut frame appropriately,
pandas/,850,and then generate string representation,
pandas/,877,"cast here since if truncate_v is True, max_rows_adj is not None",
pandas/,984,"if we have a Float level, they don't use leading space at all",
pandas/,1012,self.str_columns = str_columns,
pandas/,1032,"Note: this is only used by to_string() and to_latex(), not by",
pandas/,1033,to_html(). so safe to cast col_space here.,
pandas/,1060,empty space for columns,
pandas/,1081,----------------------------------------------------------------------,
pandas/,1082,Array formatters,
pandas/,1211,try block for np.isnat specifically,
pandas/,1212,determine na_rep if x is None or NaT-like,
pandas/,1220,np.isnat only handles datetime or timedelta objects,
pandas/,1226,object dtype,
pandas/,1244,"False specifically, so that the default is",
pandas/,1245,to include a space if we get here.,
pandas/,1262,float_format is expected to be a string,
pandas/,1263,formatter should be used to pass a function,
pandas/,1265,"GH21625, GH22270",
pandas/,1277,the float_format parameter supersedes self.float_format,
pandas/,1281,"we are going to compose different functions, to first convert to",
pandas/,1282,"a string, then replace the decimal symbol, and finally chop according",
pandas/,1283,to the threshold,
pandas/,1285,"when there is no float_format, we use str instead of '%g'",
pandas/,1286,because str(0.0) = '0.0' while '%g' % 0.0 = '0',
pandas/,1332,"if we have a fixed_width, we'll need to try different float_format",
pandas/,1336,default formatter leaves a space to the left when formatting,
pandas/,1337,"floats, must be consistent for left-justifying NaNs (GH #25061)",
pandas/,1343,separate the wheat from the chaff,
pandas/,1363,There is a special default string when we are fixed-width,
pandas/,1364,The default is otherwise to use str instead of a formatting string,
pandas/,1381,we need do convert to engineering format if some values are too small,
pandas/,1382,"and would appear as 0, or if some values are too big and take too",
pandas/,1383,much space,
pandas/,1393,this is pretty arbitrary for now,
pandas/,1394,large values: more that 8 characters including decimal symbol,
pandas/,1395,"and first digit, hence > 1e6",
pandas/,1408,shortcut,
pandas/,1459,"Categorical is special for now, so that we can preserve tzinfo",
pandas/,1515,It checks for np.NaN as well,
pandas/,1535,Least precision that keeps percentiles unique after rounding,
pandas/,1549,return a boolean if we are only dates (and don't have a timezone),
pandas/,1614,"We don't actually care about the order of values, and DatetimeIndex",
pandas/,1615,only accepts 1D values,
pandas/,1761,leave one 0 after the decimal points if need be.,
pandas/,1779,The SI engineering prefixes,
pandas/,1836,pragma: no cover,
pandas/,1859,pragma: no cover,
pandas/,59,string representation of the columns,
pandas/,76,reestablish the MultiIndex that has been joined by _to_str_column,
pandas/,85,index.format will sparsify repeated entries with empty strings,
pandas/,86,so pad these with some empty space,
pandas/,95,Add empty spaces for each column level,
pandas/,99,Add the column names to the last index column,
pandas/,105,Get rid of old multiindex column and add new ones,
pandas/,114,pragma: no cover,
pandas/,138,End of header,
pandas/,151,escape backslashes first,
pandas/,172,bold row labels,
pandas/,180,sum up columns to multicolumns,
pandas/,183,sum up rows to multirows,
pandas/,210,write multicolumn if needed,
pandas/,216,don't modify where not needed,
pandas/,221,"if next col has text, write the previous",
pandas/,227,"if not, add it to the previous multicolumn",
pandas/,230,write last column name,
pandas/,256,overwrite non-multirow entry,
pandas/,258,save when to end the current block with \cline,
pandas/,269,remove entries that have been written to buffer,
pandas/,288,then write output in a nested table/tabular environment,
pandas/,301,then write output only in a tabular environment,
pandas/,353,a double-backslash is required at the end of the line,
pandas/,354,as discussed here:,
pandas/,355,https://tex.stackexchange.com/questions/219138,
pandas/,62,"Extract compression mode as given, if dict",
pandas/,87,prevents crash in _csv,
pandas/,100,validate mi options,
pandas/,117,update columns to include possible multiplicity of dupes,
pandas/,118,and make sure sure cols is just a list of labels,
pandas/,130,save it,
pandas/,133,preallocate data 2d list,
pandas/,160,GH21227 internal compression is not used when file-like passed.,
pandas/,168,when zip compression is called.,
pandas/,174,zipfile doesn't support writing string to archive. uses string,
pandas/,175,buffer to receive csv writing and dump into zip compression,
pandas/,176,"file handle. GH21241, GH21118",
pandas/,192,Note: self.encoding is irrelevant here,
pandas/,207,GH17778 handles zip compression separately.,
pandas/,250,should write something for index label,
pandas/,268,given a string for a DF with Index,
pandas/,279,write out the mi,
pandas/,282,"write out the names for each level, then ALL of the values for",
pandas/,283,each level,
pandas/,286,we need at least 1 index column to write our col names,
pandas/,290,name is the first column,
pandas/,300,Write out the index line if it's not empty.,
pandas/,301,"Otherwise, we will print out an extraneous",
pandas/,302,blank line between the mi and the data rows.,
pandas/,312,write in chunksize bites,
pandas/,327,create the data for a chunk,
pandas/,344,self.data is a preallocated list,
pandas/,174,"display_funcs maps (row, col) -> formatting function",
pandas/,261,for sparsifying a MultiIndex,
pandas/,282,Blank for Index columns...,
pandas/,293,... except maybe the last for columns.names,
pandas/,392,only add an id if the cell has a style,
pandas/,398,have to handle empty styles like [''],
pandas/,488,"formatter must be callable, so '{}' are converted to lambdas",
pandas/,495,single scalar to format all cells with,
pandas/,541,TODO: namespace all the pandas keys,
pandas/,543,"filter out empty styles, every cell will have a class",
pandas/,544,"but the list of props may just be [['', '']].",
pandas/,545,so we have the neested anys below,
pandas/,717,applymap doesn't take kwargs?,
pandas/,985,-----------------------------------------------------------------------,
pandas/,986,"A collection of ""builtin"" styles",
pandas/,987,-----------------------------------------------------------------------,
pandas/,1121,"extend lower / upper bounds, compresses color range",
pandas/,1123,matplotlib colors.Normalize modifies inplace?,
pandas/,1124,https://github.com/matplotlib/matplotlib/issues/5427,
pandas/,1200,Get input value range.,
pandas/,1207,"For ""zero"" mode, we want the range to be symmetrical around zero.",
pandas/,1210,Transform to percent-range of linear-gradient,
pandas/,1231,avoid deprecated indexing `colors[x > zero]`,
pandas/,1405,Series from .apply,
pandas/,1407,DataFrame from .tee,
pandas/,1547,"even if its hidden, keep track of it in case",
pandas/,1548,length >1 and later elements are visible,
pandas/,153,pragma: no cover,
pandas/,169,hack,
pandas/,199,pragma: no cover,
pandas/,251,returns size in human readable format,
pandas/,260,"specifically set to False, not nesc None",
pandas/,268,groupby dtype.name to collect e.g. Categorical columns,
pandas/,276,append memory usage of df to display,
pandas/,281,size_qualifier is just a best effort; not guaranteed to catch,
pandas/,282,"all cases (e.g., it misses categorical data even with object",
pandas/,283,categories),
pandas/,72,showing (row) index,
pandas/,75,see gh-22579,
pandas/,76,Column misalignment also occurs for,
pandas/,77,a standard index when the columns index is named.,
pandas/,78,If the row index is not displayed a column of,
pandas/,79,blank cells need to be included before the DataFrame values.,
pandas/,81,not showing (row) index,
pandas/,87,https://github.com/python/mypy/issues/1237,
pandas/,89,type: ignore,
pandas/,143,escape & first to prevent double escaping of &,
pandas/,192,×,
pandas/,203,Default class.,
pandas/,240,GH3547,
pandas/,249,modify the header lines,
pandas/,253,Increment tags after ... col.,
pandas/,264,sparse col headers do not receive a ...,
pandas/,272,"if ins_col lies between tags, all col headers",
pandas/,273,get ...,
pandas/,292,see gh-22579,
pandas/,293,Column Offset Bug with to_html(index=False) with,
pandas/,294,MultiIndex Columns and Index.,
pandas/,295,Initially fill row with blank cells before column names.,
pandas/,296,TODO: Refactor to remove code duplication with code,
pandas/,297,block below for standard columns index.,
pandas/,300,see gh-22747,
pandas/,301,If to_html(index_names=False) do not show columns,
pandas/,302,index names.,
pandas/,303,TODO: Refactor to use _get_column_name_list from,
pandas/,304,DataFrameFormatter class and create a,
pandas/,305,_get_formatted_column_labels function for code,
pandas/,306,parity with DataFrameFormatter class.,
pandas/,325,see gh-22579,
pandas/,326,Column misalignment also occurs for,
pandas/,327,a standard index when the columns index is named.,
pandas/,328,Initially fill row with blank cells before column names.,
pandas/,329,TODO: Refactor to remove code duplication with code block,
pandas/,330,above for columns MultiIndex.,
pandas/,333,see gh-22747,
pandas/,334,If to_html(index_names=False) do not show columns,
pandas/,335,index names.,
pandas/,336,TODO: Refactor to use _get_column_name_list from,
pandas/,337,DataFrameFormatter class.,
pandas/,378,write values,
pandas/,417,see gh-22579,
pandas/,418,Column misalignment also occurs for,
pandas/,419,a standard index when the columns index is named.,
pandas/,420,Add blank cell before data cells.,
pandas/,446,GH3547,
pandas/,453,Insert ... row and adjust idx_values and,
pandas/,454,level_lengths to take this into account.,
pandas/,456,"cast here since if truncate_v is True, self.fmt.tr_row_num is not None",
pandas/,467,GH 14882 - Make sure insertion done once,
pandas/,479,"If ins_row lies between tags, all cols idx cols",
pandas/,480,receive ...,
pandas/,488,GH 14882 - Place ... in correct level,
pandas/,573,"We use the ""scoped"" attribute here so that the desired",
pandas/,574,style properties for the data frame are not then applied,
pandas/,575,throughout the entire notebook.,
pandas/,51,not the last one,
pandas/,76,Unicode consolidation,
pandas/,77,---------------------,
pandas/,78,,
pandas/,79,pprinting utility functions for generating Unicode text or,
pandas/,80,bytes(3.x)/str(2.x) representations of objects.,
pandas/,81,Try to use these as much as possible rather than rolling your own.,
pandas/,82,,
pandas/,83,When to use,
pandas/,84,-----------,
pandas/,85,,
pandas/,86,"1) If you're writing code internal to pandas (no I/O directly involved),",
pandas/,87,use pprint_thing().,
pandas/,88,,
pandas/,89,It will always return unicode text which can handled by other,
pandas/,90,parts of the package without breakage.,
pandas/,91,,
pandas/,92,"2) if you need to write something out to file, use",
pandas/,93,pprint_thing_encoded(encoding).,
pandas/,94,,
pandas/,95,"If no encoding is specified, it defaults to utf-8. Since encoding pure",
pandas/,96,ascii with utf-8 is a no-op you can safely use the default utf-8 if you're,
pandas/,97,working with straight ascii.,
pandas/,120,"handle sets, no slicing",
pandas/,242,get unicode representation of object,
pandas/,248,definitely not in IPython,
pandas/,254,still not in IPython,
pandas/,262,define tableschema formatter,
pandas/,269,register it:,
pandas/,271,enable it if it's been disabled:,
pandas/,274,unregister tableschema mime-type,
pandas/,334,space for the opening '[',
pandas/,338,"If we want to vertically align on each value of obj, we need to",
pandas/,339,separate values by a line break and indent the values,
pandas/,345,are we a truncated display,
pandas/,348,adj can optionally handle unicode eastern asian width,
pandas/,388,adjust all values to max length if needed,
pandas/,391,"Justify each string in the values of head and tail, so the",
pandas/,392,strings will right align when head and tail are stacked,
pandas/,393,vertically.,
pandas/,399,Each string in head and tail should align with each other,
pandas/,403,If we are not truncated and we are only a single,
pandas/,404,"line, then don't justify",
pandas/,407,Now head and tail are of type List[Tuple[str]]. Below we,
pandas/,408,"convert them into List[str], so there will be one string per",
pandas/,409,value. Also truncate items horizontally if wider than,
pandas/,410,max_space,
pandas/,428,remove trailing space of last line,
pandas/,436,"last value: no sep added + 1 space of width used for trailing ','",
pandas/,440,"right now close is either '' or ', '",
pandas/,441,"Now we want to include the ']', but not the maybe space.",
pandas/,447,one row,
pandas/,450,remove initial space,
pandas/,480,"For each position for the sequences in ``combined``,",
pandas/,481,find the length of the largest string.,
pandas/,487,justify each item in each list-like in head and tail using max_length,
pandas/,494,https://github.com/python/mypy/issues/4975,
pandas/,495,"error: Incompatible return value type (got ""Tuple[List[Sequence[str]],",
pandas/,496,"List[Sequence[str]]]"", expected ""Tuple[List[Tuple[str, ...]],",
pandas/,497,"List[Tuple[str, ...]]]"")",
pandas/,498,type: ignore,
pandas/,522,"error: ""Sequence[Any]"" has no attribute ""dtype""",
pandas/,523,type: ignore,
pandas/,525,"error: ""Sequence[Any]"" has no attribute ""name""",
pandas/,526,type: ignore,
pandas/,527,"error: ""Sequence[Any]"" has no attribute ""names""",
pandas/,528,type: ignore,
pandas/,529,"error: ""Sequence[Any]"" has no attribute ""names""",
pandas/,530,type: ignore,
pandas/,80,"1. resolve inherited, initial",
pandas/,92,we do not define a complete initial stylesheet,
pandas/,97,2. resolve relative font size,
pandas/,113,3. TODO: resolve other font-relative units,
pandas/,125,TODO: support %,
pandas/,135,'ch':,
pandas/,172,Default: medium only if solid,
pandas/,186,hack for 'large' etc.,
pandas/,256,TODO: don't lowercase case sensitive parts of values (strings),
pandas/,54,`import PyQt4` sys.exit()s if DISPLAY is not in the environment.,
pandas/,55,"Thus, we need to detect the presence of $DISPLAY manually",
pandas/,56,and not load PyQt4 if it is absent.,
pandas/,67,"The ""which"" unix command finds where a command is.",
pandas/,83,Exceptions,
pandas/,106,Converts non-str values to str.,
pandas/,121,Converts non-str values to str.,
pandas/,139,$DISPLAY should exist,
pandas/,141,"Try to import from qtpy, but if that fails try PyQt5 then PyQt4",
pandas/,155,Converts non-str values to str.,
pandas/,171,Converts non-str values to str.,
pandas/,191,Intentionally ignore extraneous output on stderr when clipboard is empty,
pandas/,202,Converts non-str values to str.,
pandas/,226,Converts non-str values to str.,
pandas/,248,Workaround for https://bugs.kde.org/show_bug.cgi?id=342874,
pandas/,249,TODO: https://github.com/asweigart/pyperclip/issues/43,
pandas/,251,"even if blank, Klipper will append a newline at the end",
pandas/,253,make sure that newline is there,
pandas/,264,Converts non-str values to str.,
pandas/,295,Windows-related clipboard functions:,
pandas/,395,"we really just need the hwnd, so setting ""STATIC""",
pandas/,396,as predefined lpClass is just fine.,
pandas/,411,We may not get the clipboard handle immediately because,
pandas/,412,some other application is accessing it (?),
pandas/,413,We try for at least 500ms to get the clipboard.,
pandas/,430,This function is heavily based on,
pandas/,431,http://msdn.com/ms649016#_win32_Copying_Information_to_the_Clipboard,
pandas/,433,Converts non-str values to str.,
pandas/,436,http://msdn.com/ms649048,
pandas/,437,"If an application calls OpenClipboard with hwnd set to NULL,",
pandas/,438,EmptyClipboard sets the clipboard owner to NULL;,
pandas/,439,this causes SetClipboardData to fail.,
pandas/,440,=> We need a valid hwnd to copy something.,
pandas/,445,http://msdn.com/ms649051,
pandas/,446,"If the hMem parameter identifies a memory object,",
pandas/,447,the object must have been allocated using the,
pandas/,448,function with the GMEM_MOVEABLE flag.,
pandas/,466,GetClipboardData may return NULL with errno == NO_ERROR,
pandas/,467,if the clipboard is empty.,
pandas/,468,"(Also, it may return a handle to an empty buffer,",
pandas/,469,but technically that's not empty),
pandas/,478,Converts non-str values to str.,
pandas/,490,"WSL appends ""\r\n"" to the contents.",
pandas/,496,Automatic detection of clipboard mechanisms,
pandas/,497,and importing is done in deteremine_clipboard():,
pandas/,505,Setup for the CYGWIN platform:,
pandas/,508,"Cygwin has a variety of values returned by platform.system(),",
pandas/,509,such as 'CYGWIN_NT-6.1',
pandas/,510,"FIXME: pyperclip currently does not support Cygwin,",
pandas/,511,see https://github.com/asweigart/pyperclip/issues/55,
pandas/,519,Setup for the WINDOWS platform:,
pandas/,528,Setup for the MAC OS X platform:,
pandas/,531,check if pyobjc is installed,
pandas/,538,Setup for the LINUX platform:,
pandas/,548,qtpy is a small abstraction layer that lets you write applications,
pandas/,549,using a single api call to either PyQt or PySide.,
pandas/,550,https://pypi.python.org/project/QtPy,
pandas/,551,check if qtpy is installed,
pandas/,553,"If qtpy isn't installed, fall back on importing PyQt4.",
pandas/,555,check if PyQt5 is installed,
pandas/,558,check if PyQt4 is installed,
pandas/,560,We want to fail fast for all non-ImportError exceptions.,
pandas/,590,"TODO - split this into 'qtpy', 'pyqt4', and 'pyqt5'",
pandas/,604,Sets pyperclip's copy() and paste() functions:,
pandas/,656,"Initially, copy() and paste() are set to lazy loading wrappers which will",
pandas/,657,"set `copy` and `paste` to real functions the first time they're used, unless",
pandas/,658,set_clipboard() or determine_clipboard() is called first.,
pandas/,664,pandas aliases,
pandas/doc/make.py,1,!/usr/bin/env python3,
pandas/doc/make.py,83,noqa: F821,
pandas/doc/make.py,166,do not generate any warning when parsing the rst,
pandas/doc/make.py,196,"the file can be an ipynb and not an rst, or docutils",
pandas/doc/make.py,197,may not be able to read the rst because it has some,
pandas/doc/make.py,198,sphinx specific stuff,
pandas/doc/make.py,338,Below we update both os.environ and sys.path. The former is used by,
pandas/doc/make.py,339,external libraries (namely Sphinx) to compile this module and resolve,
pandas/doc/make.py,340,the import of `python_path` correctly. The latter is used to resolve,
pandas/doc/make.py,341,"the import within the module, injecting it into the global namespace",
pandas/doc/make.py,346,Set the matplotlib backend to the non-interactive Agg backend for all,
pandas/doc/make.py,347,child processes.,
pandas/doc/sphinxext/announce.py,1,!/usr/bin/env python3,
pandas/doc/sphinxext/announce.py,2,-*- encoding:utf-8 -*-,
pandas/doc/sphinxext/announce.py,61,e.g. v1.0.1|HEAD,
pandas/doc/sphinxext/announce.py,70,"authors, in current release and previous to current release.",
pandas/doc/sphinxext/announce.py,71,"We need two passes over the log for cur and prev, one to get the",
pandas/doc/sphinxext/announce.py,72,"""Co-authored by"" commits, which come from backports by the bot,",
pandas/doc/sphinxext/announce.py,73,and one for regular commits.,
pandas/doc/sphinxext/announce.py,87,"Homu is the author of auto merges, clean him out.",
pandas/doc/sphinxext/announce.py,91,Append '+' to new authors.,
pandas/doc/sphinxext/announce.py,100,From regular merges,
pandas/doc/sphinxext/announce.py,105,From Homu merges (Auto merges),
pandas/doc/sphinxext/announce.py,109,From fast forward squash-merges,
pandas/doc/sphinxext/announce.py,116,get PR data from github repo,
pandas/doc/sphinxext/announce.py,138,Don't change this to an fstring. It breaks the formatting.,
pandas/doc/sphinxext/announce.py,151,document authors,
pandas/doc/source/conf.py,1,,
pandas/doc/source/conf.py,2,"pandas documentation build configuration file, created by",
pandas/doc/source/conf.py,3,,
pandas/doc/source/conf.py,4,This file is execfile()d with the current directory set to its containing,
pandas/doc/source/conf.py,5,dir.,
pandas/doc/source/conf.py,6,,
pandas/doc/source/conf.py,7,Note that not all possible configuration values are present in this,
pandas/doc/source/conf.py,8,autogenerated file.,
pandas/doc/source/conf.py,9,,
pandas/doc/source/conf.py,10,All configuration values have a default; values that are commented out,
pandas/doc/source/conf.py,11,serve to show the default.,
pandas/doc/source/conf.py,26,https://github.com/sphinx-doc/sphinx/pull/2325/files,
pandas/doc/source/conf.py,27,Workaround for sphinx-build recursion limit overflow:,
pandas/doc/source/conf.py,28,"pickle.dump(doctree, f, pickle.HIGHEST_PROTOCOL)",
pandas/doc/source/conf.py,29,RuntimeError: maximum recursion depth exceeded while pickling an object,
pandas/doc/source/conf.py,30,,
pandas/doc/source/conf.py,31,Python's default allowed recursion depth is 1000.,
pandas/doc/source/conf.py,34,"If extensions (or modules to document with autodoc) are in another directory,",
pandas/doc/source/conf.py,35,add these directories to sys.path here. If the directory is relative to the,
pandas/doc/source/conf.py,36,"documentation root, use os.path.abspath to make it absolute, like shown here.",
pandas/doc/source/conf.py,37,sys.path.append(os.path.abspath('.')),
pandas/doc/source/conf.py,41,numpy standard doc extensions,
pandas/doc/source/conf.py,46,-- General configuration -----------------------------------------------,
pandas/doc/source/conf.py,48,"Add any Sphinx extension module names here, as strings. They can be",
pandas/doc/source/conf.py,49,extensions coming with Sphinx (named 'sphinx.ext.*') or your custom ones.,
pandas/doc/source/conf.py,50,sphinxext.,
pandas/doc/source/conf.py,58,handle NumPy documentation formatted docstrings,
pandas/doc/source/conf.py,68,custom pandas extension,
pandas/doc/source/conf.py,84,"sphinx_pattern can be '-api' to exclude the API pages,",
pandas/doc/source/conf.py,85,"the path to a file, or a Python object",
pandas/doc/source/conf.py,86,(e.g. '10min.rst' or 'pandas.DataFrame.head'),
pandas/doc/source/conf.py,114,numpydoc,
pandas/doc/source/conf.py,117,matplotlib plot directive,
pandas/doc/source/conf.py,125,nbsphinx do not use requirejs (breaks bootstrap),
pandas/doc/source/conf.py,128,"Add any paths that contain templates here, relative to this directory.",
pandas/doc/source/conf.py,131,The suffix of source filenames.,
pandas/doc/source/conf.py,134,The encoding of source files.,
pandas/doc/source/conf.py,137,The master toctree document.,
pandas/doc/source/conf.py,140,General information about the project.,
pandas/doc/source/conf.py,144,"The version info for the project you're documenting, acts as replacement for",
pandas/doc/source/conf.py,145,"|version| and |release|, also used in various other places throughout the",
pandas/doc/source/conf.py,146,built documents.,
pandas/doc/source/conf.py,147,,
pandas/doc/source/conf.py,148,The short X.Y version.,
pandas/doc/source/conf.py,149,noqa: E402 isort:skip,
pandas/doc/source/conf.py,151,"version = '%s r%s' % (pandas.__version__, svn_version())",
pandas/doc/source/conf.py,154,"The full version, including alpha/beta/rc tags.",
pandas/doc/source/conf.py,157,The language for content autogenerated by Sphinx. Refer to documentation,
pandas/doc/source/conf.py,158,for a list of supported languages.,
pandas/doc/source/conf.py,159,language = None,
pandas/doc/source/conf.py,161,"There are two options for replacing |today|: either, you set today to some",
pandas/doc/source/conf.py,162,"non-false value, then it is used:",
pandas/doc/source/conf.py,163,today = '',
pandas/doc/source/conf.py,164,"Else, today_fmt is used as the format for a strftime call.",
pandas/doc/source/conf.py,165,"today_fmt = '%B %d, %Y'",
pandas/doc/source/conf.py,167,List of documents that shouldn't be included in the build.,
pandas/doc/source/conf.py,168,unused_docs = [],
pandas/doc/source/conf.py,170,"List of directories, relative to source directory, that shouldn't be searched",
pandas/doc/source/conf.py,171,for source files.,
pandas/doc/source/conf.py,174,The reST default role (used for this markup: `text`) to use for all,
pandas/doc/source/conf.py,175,documents. default_role = None,
pandas/doc/source/conf.py,177,"If true, '()' will be appended to :func: etc. cross-reference text.",
pandas/doc/source/conf.py,178,add_function_parentheses = True,
pandas/doc/source/conf.py,180,"If true, the current module name will be prepended to all description",
pandas/doc/source/conf.py,181,unit titles (such as .. function::).,
pandas/doc/source/conf.py,182,add_module_names = True,
pandas/doc/source/conf.py,184,"If true, sectionauthor and moduleauthor directives will be shown in the",
pandas/doc/source/conf.py,185,output. They are ignored by default.,
pandas/doc/source/conf.py,186,show_authors = False,
pandas/doc/source/conf.py,188,The name of the Pygments (syntax highlighting) style to use.,
pandas/doc/source/conf.py,191,A list of ignored prefixes for module index sorting.,
pandas/doc/source/conf.py,192,modindex_common_prefix = [],
pandas/doc/source/conf.py,195,-- Options for HTML output ---------------------------------------------,
pandas/doc/source/conf.py,197,The theme to use for HTML and HTML Help pages.  Major themes that come with,
pandas/doc/source/conf.py,198,Sphinx are currently 'default' and 'sphinxdoc'.,
pandas/doc/source/conf.py,201,The style sheet to use for HTML and HTML Help pages. A file of that name,
pandas/doc/source/conf.py,202,"must exist either in Sphinx' static/ path, or in one of the custom paths",
pandas/doc/source/conf.py,203,given in html_static_path.,
pandas/doc/source/conf.py,204,html_style = 'statsmodels.css',
pandas/doc/source/conf.py,206,Theme options are theme-specific and customize the look and feel of a theme,
pandas/doc/source/conf.py,207,"further.  For a list of options available for each theme, see the",
pandas/doc/source/conf.py,208,documentation.,
pandas/doc/source/conf.py,216,"Add any paths that contain custom themes here, relative to this directory.",
pandas/doc/source/conf.py,217,"html_theme_path = [""themes""]",
pandas/doc/source/conf.py,219,"The name for this set of Sphinx documents.  If None, it defaults to",
pandas/doc/source/conf.py,220,"""<project> v<release> documentation"".",
pandas/doc/source/conf.py,221,html_title = None,
pandas/doc/source/conf.py,223,A shorter title for the navigation bar.  Default is the same as html_title.,
pandas/doc/source/conf.py,224,html_short_title = None,
pandas/doc/source/conf.py,226,The name of an image file (relative to this directory) to place at the top,
pandas/doc/source/conf.py,227,of the sidebar.,
pandas/doc/source/conf.py,230,"Add any paths that contain custom static files (such as style sheets) here,",
pandas/doc/source/conf.py,231,"relative to this directory. They are copied after the builtin static files,",
pandas/doc/source/conf.py,232,"so a file named ""default.css"" will overwrite the builtin ""default.css"".",
pandas/doc/source/conf.py,240,The name of an image file (within the static path) to use as favicon of the,
pandas/doc/source/conf.py,241,docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32,
pandas/doc/source/conf.py,242,pixels large.,
pandas/doc/source/conf.py,245,"If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
pandas/doc/source/conf.py,246,using the given strftime format.,
pandas/doc/source/conf.py,247,"html_last_updated_fmt = '%b %d, %Y'",
pandas/doc/source/conf.py,249,"If true, SmartyPants will be used to convert quotes and dashes to",
pandas/doc/source/conf.py,250,typographically correct entities.,
pandas/doc/source/conf.py,251,html_use_smartypants = True,
pandas/doc/source/conf.py,253,"Custom sidebar templates, maps document names to template names.",
pandas/doc/source/conf.py,254,html_sidebars = {},
pandas/doc/source/conf.py,256,"Additional templates that should be rendered to pages, maps page names to",
pandas/doc/source/conf.py,257,template names.,
pandas/doc/source/conf.py,259,Add redirect for previously existing API pages,
pandas/doc/source/conf.py,260,"each item is like `(from_old, to_new)`",
pandas/doc/source/conf.py,261,"To redirect a class and all its methods, see below",
pandas/doc/source/conf.py,262,https://github.com/pandas-dev/pandas/issues/16186,
pandas/doc/source/conf.py,293,"Again, tuples of (from_old, to_new)",
pandas/doc/source/conf.py,300,the class itself...,
pandas/doc/source/conf.py,310,... and each of its public methods,
pandas/doc/source/conf.py,342,"If false, no module index is generated.",
pandas/doc/source/conf.py,345,"If false, no index is generated.",
pandas/doc/source/conf.py,346,html_use_index = True,
pandas/doc/source/conf.py,348,"If true, the index is split into individual pages for each letter.",
pandas/doc/source/conf.py,349,html_split_index = False,
pandas/doc/source/conf.py,351,"If true, links to the reST sources are added to the pages.",
pandas/doc/source/conf.py,352,html_show_sourcelink = True,
pandas/doc/source/conf.py,354,"If true, an OpenSearch description file will be output, and all pages will",
pandas/doc/source/conf.py,355,contain a <link> tag referring to it.  The value of this option must be the,
pandas/doc/source/conf.py,356,base URL from which the finished HTML is served.,
pandas/doc/source/conf.py,357,html_use_opensearch = '',
pandas/doc/source/conf.py,359,"If nonempty, this is the file name suffix for HTML files (e.g. "".xhtml"").",
pandas/doc/source/conf.py,360,html_file_suffix = '',
pandas/doc/source/conf.py,362,Output file base name for HTML help builder.,
pandas/doc/source/conf.py,365,-- Options for nbsphinx ------------------------------------------------,
pandas/doc/source/conf.py,369,-- Options for LaTeX output --------------------------------------------,
pandas/doc/source/conf.py,373,The paper size ('letter' or 'a4').,
pandas/doc/source/conf.py,374,latex_paper_size = 'letter',
pandas/doc/source/conf.py,376,"The font size ('10pt', '11pt' or '12pt').",
pandas/doc/source/conf.py,377,latex_font_size = '10pt',
pandas/doc/source/conf.py,379,Grouping the document tree into LaTeX files. List of tuples (source start,
pandas/doc/source/conf.py,380,"file, target name, title, author, documentclass [howto/manual]).",
pandas/doc/source/conf.py,391,The name of an image file (relative to this directory) to place at the top of,
pandas/doc/source/conf.py,392,the title page.,
pandas/doc/source/conf.py,393,latex_logo = None,
pandas/doc/source/conf.py,395,"For ""manual"" documents, if this is true, then toplevel headings are parts,",
pandas/doc/source/conf.py,396,not chapters.,
pandas/doc/source/conf.py,397,latex_use_parts = False,
pandas/doc/source/conf.py,399,Additional stuff for the LaTeX preamble.,
pandas/doc/source/conf.py,400,latex_preamble = '',
pandas/doc/source/conf.py,402,Documents to append as an appendix to all manuals.,
pandas/doc/source/conf.py,403,latex_appendices = [],
pandas/doc/source/conf.py,405,"If false, no module index is generated.",
pandas/doc/source/conf.py,406,latex_use_modindex = True,
pandas/doc/source/conf.py,422,extlinks alias,
pandas/doc/source/conf.py,433,This ensures correct rendering on system with console encoding != utf8,
pandas/doc/source/conf.py,434,(windows). It forces pandas to encode its output reprs using utf8,
pandas/doc/source/conf.py,435,"wherever the docs are built. The docs' target is the browser, not",
pandas/doc/source/conf.py,436,"the console, so this is fine.",
pandas/doc/source/conf.py,441,Add custom Documenter to handle attributes/methods of an AccessorProperty,
pandas/doc/source/conf.py,442,eg pandas.Series.str and pandas.Series.dt (see GH9322),
pandas/doc/source/conf.py,444,noqa: E402 isort:skip,
pandas/doc/source/conf.py,445,noqa: E402 isort:skip,
pandas/doc/source/conf.py,446,noqa: E402 isort:skip,
pandas/doc/source/conf.py,451,noqa: E402 isort:skip,
pandas/doc/source/conf.py,462,lower than MethodDocumenter so this is not chosen for normal methods,
pandas/doc/source/conf.py,466,"this method gives an error/warning for the accessors, therefore",
pandas/doc/source/conf.py,467,overriding it (accessor has no arguments),
pandas/doc/source/conf.py,477,This is the simple straightforward version,
pandas/doc/source/conf.py,478,"modname is None, base the last elements (eg 'hour')",
pandas/doc/source/conf.py,479,and path the part before (eg 'Series.dt'),
pandas/doc/source/conf.py,480,"def resolve_name(self, modname, parents, path, base):",
pandas/doc/source/conf.py,481,modname = 'pandas',
pandas/doc/source/conf.py,482,mod_cls = path.rstrip('.'),
pandas/doc/source/conf.py,483,mod_cls = mod_cls.split('.'),
pandas/doc/source/conf.py,484,,
pandas/doc/source/conf.py,485,"return modname, mod_cls + [base]",
pandas/doc/source/conf.py,492,"if documenting a class-level object without path,",
pandas/doc/source/conf.py,493,"there must be a current class, either from a parent",
pandas/doc/source/conf.py,494,auto directive ...,
pandas/doc/source/conf.py,496,... or from a class directive,
pandas/doc/source/conf.py,499,"... if still None, there's no way to know",
pandas/doc/source/conf.py,502,HACK: this is added in comparison to ClassLevelDocumenter,
pandas/doc/source/conf.py,503,"mod_cls still exists of class.accessor, so an extra",
pandas/doc/source/conf.py,504,rpartition is needed,
pandas/doc/source/conf.py,508,"if the module name is still missing, get it like above",
pandas/doc/source/conf.py,516,"... else, it stays None, which means invalid",
pandas/doc/source/conf.py,524,lower than AttributeDocumenter so this is not chosen for normal,
pandas/doc/source/conf.py,525,attributes,
pandas/doc/source/conf.py,533,lower than MethodDocumenter so this is not chosen for normal methods,
pandas/doc/source/conf.py,546,lower than MethodDocumenter; otherwise the doc build prints warnings,
pandas/doc/source/conf.py,560,this a hack: ideally we should extract the signature from the,
pandas/doc/source/conf.py,561,.__call__ method instead of hard coding this,
pandas/doc/source/conf.py,594,based on numpy doc/source/conf.py,
pandas/doc/source/conf.py,644,remove the docstring of the flags attribute (inherited from numpy ndarray),
pandas/doc/source/conf.py,645,because these give doc build errors (see GH issue 5331),
pandas/doc/source/conf.py,691,"We ""overwrite"" autosummary with our PandasAutosummary, but",
pandas/doc/source/conf.py,692,still want the regular autosummary setup to run. So we just,
pandas/doc/source/conf.py,693,suppress this warning.,
pandas/doc/source/conf.py,697,When building a single document we don't want to warn because references,
pandas/doc/source/conf.py,698,"to other documents are unknown, as it's expected",
pandas/doc/source/conf.py,706,https://www.ericholscher.com/blog/2016/jul/25/integrating-jinja-rst-sphinx/,
pandas/doc/source/conf.py,707,Make sure we're outputting HTML,
pandas/ci/print_skipped.py,1,!/usr/bin/env python3,
pandas/scripts/generate_pip_deps_from_conda.py,1,!/usr/bin/env python3,
pandas/scripts/validate_rst_title_capitalization.py,1,!/usr/bin/env python,
pandas/scripts/validate_rst_title_capitalization.py,139,"Skip modification no matter what if title begins by "":"" to exclude specific",
pandas/scripts/validate_rst_title_capitalization.py,140,syntax that is needed to build links.,
pandas/scripts/validate_rst_title_capitalization.py,144,Strip all non-word characters from the beginning of the title to the,
pandas/scripts/validate_rst_title_capitalization.py,145,first word character.,
pandas/scripts/validate_rst_title_capitalization.py,148,Remove a URL from the title. We do this because words in a URL must,
pandas/scripts/validate_rst_title_capitalization.py,149,"stay lowercase, even if they are a capitalization exception.",
pandas/scripts/validate_rst_title_capitalization.py,152,Split a title into a list using non-word character delimiters.,
pandas/scripts/validate_docstrings.py,1,!/usr/bin/env python3,
pandas/scripts/validate_docstrings.py,33,Template backend makes matplotlib to not plot anything. This is useful,
pandas/scripts/validate_docstrings.py,34,to avoid that plot windows are open from the doctests while running the,
pandas/scripts/validate_docstrings.py,35,script. Setting here before matplotlib is loaded.,
pandas/scripts/validate_docstrings.py,36,"We don't warn for the number of open plots, as none is actually being opened",
pandas/scripts/validate_docstrings.py,38,noqa: E402 isort:skip,
pandas/scripts/validate_docstrings.py,42,noqa: E402 isort:skip,
pandas/scripts/validate_docstrings.py,47,noqa: E402 isort:skip,
pandas/scripts/validate_docstrings.py,50,noqa: E402 isort:skip,
pandas/scripts/validate_docstrings.py,173,F401 is needed to not generate flake8 errors in examples,
pandas/scripts/validate_docstrings.py,174,that do not user numpy or pandas,
pandas/scripts/validate_docstrings.py,191,We need this to avoid flake8 printing the names of the files to,
pandas/scripts/validate_docstrings.py,192,the standard output,
pandas/scripts/validate_docstrings.py,359,Failing examples are printed at the end,
pandas/scripts/validate_unwanted_patterns.py,1,!/usr/bin/env python3,
pandas/scripts/validate_unwanted_patterns.py,107,"Means that there are arguments that are being passed in,",
pandas/scripts/validate_unwanted_patterns.py,108,now we validate that `match` is one of the passed in arguments,
pandas/scripts/validate_unwanted_patterns.py,268,Checking if we are in a block of concated string,
pandas/scripts/validate_unwanted_patterns.py,273,"Striping the quotes, with the string litteral prefix",
pandas/scripts/validate_unwanted_patterns.py,397,type: ignore,
pandas/scripts/tests/test_validate_docstrings.py,139,Examples tests,
pandas/scripts/tests/test_validate_docstrings.py,295,GH25466,
pandas/scripts/tests/test_validate_docstrings.py,297,the list of pep8 errors should be empty,
pandas/asv_bench/benchmarks/rolling.py,160,GH 25926,
pandas/asv_bench/benchmarks/rolling.py,161,This is to detect memory leaks in rolling operations.,
pandas/asv_bench/benchmarks/rolling.py,162,To save time this is only ran on one method.,
pandas/asv_bench/benchmarks/rolling.py,163,6000 iterations is enough for most types of leaks to be detected,
pandas/asv_bench/benchmarks/rolling.py,190,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/multiindex_object.py,230,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/dtypes.py,65,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/period.py,49,GH#21582 limited by comparisons of Period objects,
pandas/asv_bench/benchmarks/algorithms.py,85,cache is_unique,
pandas/asv_bench/benchmarks/algorithms.py,166,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/timeseries.py,175,GH 7754,
pandas/asv_bench/benchmarks/timeseries.py,210,test speed of pre-computing NAs.,
pandas/asv_bench/benchmarks/timeseries.py,214,should be roughly the same as above.,
pandas/asv_bench/benchmarks/timeseries.py,218,test speed of the code path for a scalar index,
pandas/asv_bench/benchmarks/timeseries.py,219,without *while* loop,
pandas/asv_bench/benchmarks/timeseries.py,223,test speed of the code path for a scalar index,
pandas/asv_bench/benchmarks/timeseries.py,224,before the start. should be the same as above.,
pandas/asv_bench/benchmarks/timeseries.py,228,test the speed of the code path for a scalar index,
pandas/asv_bench/benchmarks/timeseries.py,229,with a long *while* loop. should still be much,
pandas/asv_bench/benchmarks/timeseries.py,230,faster than pre-computing all the NAs.,
pandas/asv_bench/benchmarks/timeseries.py,426,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/,8,Compatibility import for lib,
pandas/asv_bench/benchmarks/,16,Compatibility import for the testing module,
pandas/asv_bench/benchmarks/,18,noqa,
pandas/asv_bench/benchmarks/,20,noqa,
pandas/asv_bench/benchmarks/,57,This function just needs to be imported into each benchmark file to,
pandas/asv_bench/benchmarks/,58,set up the random seed before each function.,
pandas/asv_bench/benchmarks/,59,https://asv.readthedocs.io/en/latest/writing_benchmarks.html,
pandas/asv_bench/benchmarks/,75,"On Windows, attempting to remove a file that is in use",
pandas/asv_bench/benchmarks/,76,causes an exception to be raised,
pandas/asv_bench/benchmarks/indexing.py,114,warm up index mapping,
pandas/asv_bench/benchmarks/indexing.py,323,GH#33032 single-row lookups with non-unique columns were,
pandas/asv_bench/benchmarks/indexing.py,324,15x slower than with unique columns,
pandas/asv_bench/benchmarks/indexing.py,378,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/replace.py,41,GH#28099,
pandas/asv_bench/benchmarks/replace.py,53,"the 1 can be held in self._df.blocks[0], while the inf and -inf cant",
pandas/asv_bench/benchmarks/replace.py,77,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/index_object.py,169,GH 13166,
pandas/asv_bench/benchmarks/index_object.py,180,GH 24813,
pandas/asv_bench/benchmarks/index_object.py,228,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/indexing_engines.py,45,code belows avoids populating the mapping etc. while timing.,
pandas/asv_bench/benchmarks/indexing_engines.py,67,code belows avoids populating the mapping etc. while timing.,
pandas/asv_bench/benchmarks/reshape.py,63,the category branch is ~20x slower than int. So we,
pandas/asv_bench/benchmarks/reshape.py,64,cut down the size a bit. Now it's only ~3x slower.,
pandas/asv_bench/benchmarks/reshape.py,248,GH 27668,
pandas/asv_bench/benchmarks/reshape.py,252,GH 27668,
pandas/asv_bench/benchmarks/reshape.py,269,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/strings.py,122,str.cat self-concatenates only for others=None,
pandas/asv_bench/benchmarks/strings.py,130,"before the concatenation (one caller + other_cols columns), the total",
pandas/asv_bench/benchmarks/strings.py,131,expected fraction of rows containing any NaN is:,
pandas/asv_bench/benchmarks/strings.py,132,"reduce(lambda t, _: t + (1 - t) * na_frac, range(other_cols + 1), 0)",
pandas/asv_bench/benchmarks/strings.py,133,"for other_cols=3 and na_frac=0.15, this works out to ~48%",
pandas/asv_bench/benchmarks/strings.py,185,GH 2602,
pandas/asv_bench/benchmarks/categoricals.py,297,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/reindex.py,133,"blog ""pandas escaped the zoo""",
pandas/asv_bench/benchmarks/reindex.py,163,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/stat_ops.py,15,GH-33036,
pandas/asv_bench/benchmarks/stat_ops.py,144,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/series_methods.py,47,runtime is dominated by creation of the lookup-table,
pandas/asv_bench/benchmarks/series_methods.py,51,runtime is dominated by creation of the lookup-table,
pandas/asv_bench/benchmarks/series_methods.py,55,runtime is dominated by creation of the lookup-table,
pandas/asv_bench/benchmarks/series_methods.py,67,because of nans floats are special:,
pandas/asv_bench/benchmarks/series_methods.py,74,"if nan-objects are different objects,",
pandas/asv_bench/benchmarks/series_methods.py,75,this has the potential to trigger O(n^2) running time,
pandas/asv_bench/benchmarks/series_methods.py,79,running time dominated by the preprocessing,
pandas/asv_bench/benchmarks/series_methods.py,83,running time dominated by look-up,
pandas/asv_bench/benchmarks/series_methods.py,87,no dominating part,
pandas/asv_bench/benchmarks/series_methods.py,91,no dominating part,
pandas/asv_bench/benchmarks/series_methods.py,167,construct mapper,
pandas/asv_bench/benchmarks/series_methods.py,216,https://github.com/pandas-dev/pandas/issues/19764,
pandas/asv_bench/benchmarks/series_methods.py,274,Skip argmax for nullable int since this doesn't work yet (GH-24382),
pandas/asv_bench/benchmarks/series_methods.py,283,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/ctors.py,64,"Generators get exhausted on use, so run setup before every call",
pandas/asv_bench/benchmarks/ctors.py,118,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/sparse.py,139,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/join_merge.py,151,outer join of non-unique,
pandas/asv_bench/benchmarks/join_merge.py,152,GH 6329,
pandas/asv_bench/benchmarks/join_merge.py,386,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/package.py,13,"on py37+ we the ""-X importtime"" usage gives us a more precise",
pandas/asv_bench/benchmarks/package.py,14,"measurement of the import time we actually care about,",
pandas/asv_bench/benchmarks/package.py,15,without the subprocess or interpreter overhead,
pandas/asv_bench/benchmarks/package.py,21,microseconds,
pandas/asv_bench/benchmarks/groupby.py,94,ensure that the group name is available (see GH #15062),
pandas/asv_bench/benchmarks/groupby.py,153,with datetimes (GH7555),
pandas/asv_bench/benchmarks/groupby.py,163,insert missing data,
pandas/asv_bench/benchmarks/groupby.py,407,skip benchmark,
pandas/asv_bench/benchmarks/groupby.py,443,GH 21237,
pandas/asv_bench/benchmarks/groupby.py,463,GH 13335,
pandas/asv_bench/benchmarks/groupby.py,514,GH 14338,
pandas/asv_bench/benchmarks/groupby.py,533,GH 2692,
pandas/asv_bench/benchmarks/groupby.py,543,GH 9049,
pandas/asv_bench/benchmarks/groupby.py,618,GH 12737,
pandas/asv_bench/benchmarks/groupby.py,629,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/gil.py,41,isort:skip,
pandas/asv_bench/benchmarks/gil.py,304,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/arithmetic.py,55,GH#31300,
pandas/asv_bench/benchmarks/arithmetic.py,150,Division,
pandas/asv_bench/benchmarks/arithmetic.py,164,Modulo,
pandas/asv_bench/benchmarks/arithmetic.py,172,Dot product,
pandas/asv_bench/benchmarks/arithmetic.py,270,from GH 7332,
pandas/asv_bench/benchmarks/arithmetic.py,297,from GH 7332,
pandas/asv_bench/benchmarks/arithmetic.py,352,These offsets currently raise a NotImplimentedError with .apply_index(),
pandas/asv_bench/benchmarks/arithmetic.py,415,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/attrs_caching.py,69,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/frame_ctor.py,11,For compatibility with older versions,
pandas/asv_bench/benchmarks/frame_ctor.py,12,noqa,
pandas/asv_bench/benchmarks/frame_ctor.py,41,"nested dict, integer indexes, regression described in #621",
pandas/asv_bench/benchmarks/frame_ctor.py,75,"Generators get exhausted on use, so run setup before every call",
pandas/asv_bench/benchmarks/frame_ctor.py,84,issue-6700,
pandas/asv_bench/benchmarks/frame_ctor.py,166,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/plotting.py,97,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/frame_methods.py,107,mem_itertuples_* benchmarks are slow,
pandas/asv_bench/benchmarks/frame_methods.py,120,(monitor no-copying behaviour),
pandas/asv_bench/benchmarks/frame_methods.py,444,"this is the worst case, where every column has NaNs.",
pandas/asv_bench/benchmarks/frame_methods.py,467,frame shift speedup issue-5609,
pandas/asv_bench/benchmarks/frame_methods.py,561,2807,
pandas/asv_bench/benchmarks/frame_methods.py,635,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/inference.py,78,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/eval.py,66,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/tslibs/offsets.py,12,noqa,
pandas/asv_bench/benchmarks/tslibs/offsets.py,17,These offsets currently raise a NotImplimentedError with .apply_index(),
pandas/asv_bench/benchmarks/io/excel.py,73,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/io/csv.py,235,1000 x 3 strings csv,
pandas/asv_bench/benchmarks/io/csv.py,323,cache_dates is a new keyword in 0.25,
pandas/asv_bench/benchmarks/io/csv.py,339,see gh-24805.,
pandas/asv_bench/benchmarks/io/csv.py,391,cache_dates is a new keyword in 0.25,
pandas/asv_bench/benchmarks/io/csv.py,407,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/io/sql.py,146,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/io/pickle.py,28,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/io/parsers.py,9,Avoid whole benchmark suite import failure on asv (currently 0.4),
pandas/asv_bench/benchmarks/io/sas.py,12,Read files that are located in 'pandas/tests/io/sas/data',
pandas/asv_bench/benchmarks/io/json.py,241,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/io/hdf.py,130,noqa: F401 isort:skip,
pandas/asv_bench/benchmarks/io/stata.py,53,noqa: F401 isort:skip,
