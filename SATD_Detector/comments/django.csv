file path,line #,comment,satd
django/setup.py,10,This check and everything above must remain compatible with Python 2.7.,
django/setup.py,36,Warn if we are installing over top of an existing installation. This can,
django/setup.py,37,cause issues where files that were deleted from a more recent Django are,
django/setup.py,38,still present in site-packages. See #18115.,
django/setup.py,43,We have to try also with an explicit prefix of /usr/local in order to,
django/setup.py,44,catch Debian's custom user site-packages directory.,
django/setup.py,49,"We note the need for the warning here, but present it after the",
django/setup.py,50,"command is run, so it's more likely to be seen.",
django/,51,If it is a model class or anything else with ._default_manager,
django/,115,"If it's a model, use get_absolute_url()",
django/,120,"Expand the lazy instance, as it can cause issues when it is passed",
django/,121,further to some Python functions like urlparse.,
django/,125,Handle relative URLs,
django/,129,Next try a reverse URL resolution.,
django/,133,"If this is a callable, re-raise.",
django/,136,"If this doesn't ""feel"" like a URL, re-raise.",
django/,140,"Finally, fall back and assume it's a URL",
django/,47,The encoding used in GET/POST dicts. None means use default setting.,
django/,52,WARNING: The `WSGIRequest` subclass doesn't call `super`.,
django/,53,Any variable assignment made here should also happen in,
django/,54,`WSGIRequest.__init__()`.,
django/,105,"We try three options, in order of decreasing preference.",
django/,112,Reconstruct the host using the algorithm from PEP 333.,
django/,123,Allow variants of localhost if ALLOWED_HOSTS is empty and DEBUG=True.,
django/,154,RFC 3986 requires query string arguments to be in the ASCII range.,
django/,155,"Rather than crash if this doesn't happen, we encode defensively.",
django/,206,Make it an absolute url (but schemeless and domainless) for the,
django/,207,edge case that the path starts with '//'.,
django/,210,Coerce lazy locations.,
django/,214,"Handle the simple, most common case. If the location is absolute",
django/,215,"and a scheme or host (netloc) isn't provided, skip an expensive",
django/,216,urljoin() as long as no path segments are '.' or '..'.,
django/,219,"If location starts with '//' but has no netloc, reuse the",
django/,220,schema and netloc from the current request. Strip the double,
django/,221,slashes and continue as if it wasn't specified.,
django/,226,"Join the constructed URL with the provided location, which",
django/,227,allows the provided location to apply query strings to the,
django/,228,base path.,
django/,292,"If there are no upload handlers defined, initialize them from settings.",
django/,317,Limit the maximum request data size that will be handled in-memory.,
django/,344,Use already read data,
django/,351,An error occurred while parsing POST data. Since when,
django/,352,formatting the error the request handler might access,
django/,353,"self.POST, set self._post and self._file to prevent",
django/,354,attempts to parse POST data again.,
django/,367,File-like and iterator interface.,
django/,368,,
django/,369,Expects self._stream to be set to an appropriate source of bytes by,
django/,370,a corresponding request subclass (e.g. WSGIRequest).,
django/,371,Also when request data has already been read by request.POST or,
django/,372,"request.body, self._stream points to a BytesIO instance",
django/,373,containing that data.,
django/,398,PEP 333 gives two headers which aren't prepended with HTTP_.,
django/,437,"These are both reset in __init__, but is specified here at the class",
django/,438,level so that unpickling will have valid values,
django/,452,"query_string normally contains URL-encoded data, a subset of ASCII.",
django/,456,... but some user agents are misbehaving :-(,
django/,614,It's neither necessary nor appropriate to use,
django/,615,"django.utils.encoding.force_str() for parsing URLs and form inputs. Thus,",
django/,616,"this slightly more restricted function, used by QueryDict.",
django/,644,It's an IPv6 address without a port.,
django/,648,Remove a trailing dot (if present) from the domain.,
django/,64,Content-Type should contain multipart and the boundary information.,
django/,69,Parse the header to get the boundary to split the parts.,
django/,78,Content-Length should contain the length of the body we are about,
django/,79,to receive.,
django/,86,This means we shouldn't continue...raise an error.,
django/,94,"For compatibility with low-level network APIs (with 32-bit integers),",
django/,95,"the chunk size should be < 2^31, but still divisible by 4.",
django/,116,HTTP spec says that Content-Length >= 0 is valid,
django/,117,handling content-length == 0 before continuing,
django/,121,See if any of the handlers take care of the parsing.,
django/,122,This allows overriding everything if need be.,
django/,131,Check to see if it was handled,
django/,135,Create the data structures to be used later.,
django/,139,Instantiate the parser and stream:,
django/,142,Whether or not to signal a file-completion at the beginning of the loop.,
django/,146,Number of bytes that have been read.,
django/,148,To count the number of keys in the request.,
django/,150,To limit the amount of data read from the request.,
django/,156,We run this at the beginning of the next loop,
django/,157,since we cannot be sure a file is complete until,
django/,158,we hit the next boundary/part of the multipart content.,
django/,174,Avoid storing more than DATA_UPLOAD_MAX_NUMBER_FIELDS.,
django/,183,Avoid reading more than DATA_UPLOAD_MAX_MEMORY_SIZE.,
django/,187,"This is a post field, we can just set it in the post",
django/,199,Add two here to make the check consistent with the,
django/,200,x-www-form-urlencoded check that includes '&='.,
django/,208,"This is a file, use the handler...",
django/,238,We only special-case base64 transfer encoding,
django/,239,"We should always decode base64 chunks by multiple of 4,",
django/,240,ignoring whitespace.,
django/,253,"Since this is only a chunk, any error is an unfixable error.",
django/,261,Don't continue if the chunk received by,
django/,262,the handler is None.,
django/,267,Just use up the rest of this file...,
django/,270,Handle file upload completions on next iteration.,
django/,273,"If this is neither a FIELD or a FILE, just exhaust the stream.",
django/,280,Make sure that the request data is all fed,
django/,283,Signal that the upload has completed.,
django/,284,any() shortcircuits if a handler's upload_complete() returns a value.,
django/,296,"If it returns a file object, then set the files dict.",
django/,305,Free up all file handles.,
django/,306,FIXME: this currently assumes that upload handlers store the file as 'file',
django/,307,We should document that... (Maybe add handler.free_file to complement new_file),
django/,342,do the whole thing in one shot if no limit was provided.,
django/,347,otherwise do some bookkeeping to return exactly enough,
django/,348,of the stream and stashing any extra content we get from,
django/,349,the producer,
django/,485,rollback an additional six bytes because the format is like,
django/,486,this: CRLF<boundary>[--CRLF],
django/,489,Try to use mx fast string search if available. Otherwise,
django/,490,use Python find. Wrap the latter for consistency.,
django/,530,make sure we don't treat a partial boundary (and,
django/,531,its separators) as data,
django/,532,and len(chunk) >= (len(self._boundary) + 6):,
django/,533,"There's nothing left, we should just return and mark as done.",
django/,555,backup over CRLF,
django/,571,consume iterator quickly.,
django/,578,"Stream at beginning of header, look for end of header",
django/,579,and parse it if found. The header must fit within one,
django/,580,chunk.,
django/,583,"'find' returns the top of these four bytes, so we'll",
django/,584,need to munch them later to prevent them from polluting,
django/,585,the payload.,
django/,597,"we find no header, so we just mark this fact and pass on",
django/,598,the stream verbatim,
django/,604,"here we place any excess chunk back onto the stream, as",
django/,605,well as throwing away the CRLFCRLF bytes from above.,
django/,611,Eliminate blank lines,
django/,613,"This terminology (""main value"" and ""dictionary of",
django/,614,"parameters"") is from the Python docs.",
django/,641,Iterate over each part,
django/,661,"Lang/encoding embedded in the value (like ""filename*=UTF-8''file.ext"")",
django/,662,http://tools.ietf.org/html/rfc2231#section-4,
django/,3,For backwards compatibility in Django 2.1.,
django/,6,Add support for the SameSite attribute (obsolete when PY37 is unsupported).,
django/,19,Assume an empty name per,
django/,20,https://bugzilla.mozilla.org/show_bug.cgi?id=169091,
django/,24,unquote using Python's algorithm.,
django/,40,_headers is a mapping of the lowercase name to the original case of,
django/,41,the header (required for working with legacy systems) and the header,
django/,42,value. Both the name of the header and its value are ASCII strings.,
django/,45,This parameter is set by the handler. It's necessary to preserve the,
django/,46,historical behavior of request_finished.,
django/,68,Leave self._reason_phrase unset in order to use the default,
django/,69,reason phrase for status code.,
django/,83,Extract the charset and strip its double quotes,
django/,122,Ensure string is valid in given charset,
django/,125,Convert bytestring using given charset,
django/,175,Add one second so the date matches exactly (a fraction of,
django/,176,time gets lost between converting to a timedelta and,
django/,177,then the date string).,
django/,179,Just set max_age - the max_age logic will set expires.,
django/,188,"IE requires expires, so set it if hasn't been already.",
django/,214,Most browsers ignore the Set-Cookie header if the cookie name starts,
django/,215,with __Host- or __Secure- and the cookie doesn't use the secure flag.,
django/,222,Common methods used by subclasses,
django/,226,"Per PEP 3333, this response body must be bytes. To avoid returning",
django/,227,"an instance of a subclass, this function returns `bytes(value)`.",
django/,228,This doesn't make a copy when `value` already contains bytes.,
django/,230,Handle string types -- we can't rely on force_bytes here because:,
django/,231,- Python attempts str conversion first,
django/,232,- when self._charset != 'utf-8' it re-encodes the content,
django/,237,Handle non-string types.,
django/,240,These methods partially implement the file-like object interface.,
django/,241,See https://docs.python.org/library/io.html#io.IOBase,
django/,243,The WSGI server must call this method upon completion of the request.,
django/,244,See http://blog.dscpl.com.au/2012/10/obligations-for-calling-close-on.html,
django/,251,Free resources that were still referenced.,
django/,265,These methods partially implement a stream-like object interface.,
django/,266,See https://docs.python.org/library/io.html#io.IOBase,
django/,292,Content is a bytestring. See the `content` property methods.,
django/,314,Consume iterators upon assignment to allow repeated iteration.,
django/,324,Create a list of properly encoded bytestrings to support write().,
django/,360,`streaming_content` should be an iterable of bytestrings.,
django/,361,See the `streaming_content` property methods.,
django/,380,"Ensure we can never iterate on ""value"" more than once.",
django/,435,Encoding isn't set to prevent browsers from automatically,
django/,436,uncompressing files.,
django/,1,!/usr/bin/env python,
django/,2,"When the django-admin.py deprecation ends, remove this script.",
django/,86,Only set the 'errors_occurred' flag for errors that may make,
django/,87,the connection unusable.,
django/,93,Note that we are intentionally not using @wraps here for performance,
django/,94,reasons. Refs #21109.,
django/,106,This backend was renamed in Django 1.9.,
django/,113,The database backend wasn't found. Display a helpful error message,
django/,114,listing all built-in database backends.,
django/,128,"If there's some other error, this must be an error in Django",
django/,143,"Connections needs to still be an actual thread local, as it's truly",
django/,144,thread-critical. Database backends should use @async_unsafe to protect,
django/,145,"their code from async contexts, but this will give those contexts",
django/,146,separate connections in case it's needed as well. There's no cleanup,
django/,147,"after async contexts, though, so we don't allow that if we can help it.",
django/,267,"If the router doesn't have a method, skip to the next one.",
django/,287,"If the router doesn't have a method, skip to the next one.",
django/,300,"If the router doesn't have a method, skip to the next one.",
django/,131,,
django/,132,Decorators / context managers,
django/,133,,
django/,172,Reset state when entering an outermost atomic block.,
django/,176,Pretend we're already in an atomic block to bypass the code,
django/,177,"that disables autocommit to enter a transaction, and make a",
django/,178,note to deal with this case in __exit__.,
django/,183,"We're already in a transaction; create a savepoint, unless we",
django/,184,were told not to or we're already waiting for a rollback. The,
django/,185,second condition avoids creating useless savepoints and prevents,
django/,186,overwriting needs_rollback until the rollback is performed.,
django/,202,Prematurely unset this flag to allow using commit or rollback.,
django/,207,The database will perform a rollback by itself.,
django/,208,Wait until we exit the outermost block.,
django/,213,Release savepoint if there is one,
django/,220,The savepoint won't be reused. Release it to,
django/,221,minimize overhead for the database server.,
django/,224,"If rolling back to a savepoint fails, mark for",
django/,225,rollback at a higher level and avoid shadowing,
django/,226,the original exception.,
django/,230,Commit transaction,
django/,237,An error during rollback means that something,
django/,238,went wrong with the connection. Drop it.,
django/,242,This flag will be set to True again if there isn't a savepoint,
django/,243,allowing to perform the rollback at this level.,
django/,246,"Roll back to savepoint if there is one, mark for rollback",
django/,247,otherwise.,
django/,253,The savepoint won't be reused. Release it to,
django/,254,minimize overhead for the database server.,
django/,257,"If rolling back to a savepoint fails, mark for",
django/,258,rollback at a higher level and avoid shadowing,
django/,259,the original exception.,
django/,262,Roll back transaction,
django/,266,An error during rollback means that something,
django/,267,went wrong with the connection. Drop it.,
django/,271,Outermost block exit when autocommit was enabled.,
django/,277,Outermost block exit when autocommit was disabled.,
django/,286,Bare decorator: @atomic -- although the first argument is called,
django/,287,"`using`, it's actually the function being decorated.",
django/,290,Decorator: @atomic(...) or context manager: with atomic(...): ...,
django/,40,For backwards compatibility. Prefer connections['default'] instead.,
django/,44,Register an event to reset saved queries when a Django request is started.,
django/,53,Register an event to reset transaction state and close connections past,
django/,54,their lifetime.,
django/,36,Close instead of passing through to avoid backend-specific behavior,
django/,37,(#17671). Catch errors liberally because errors in cleanup code,
django/,38,aren't useful.,
django/,44,"The following methods cannot be implemented in __getattr__, because the",
django/,45,"code must run when the method is invoked, not just when it is accessed.",
django/,48,"Keyword parameters for callproc aren't supported in PEP 249, but the",
django/,49,database driver may support them (e.g. cx_Oracle).,
django/,81,params default might be backend specific.,
django/,94,XXX callproc isn't instrumented at this time.,
django/,117,params could be an iterator.,
django/,132,,
django/,133,Converters from database (string) to Python,
django/,134,,
django/,137,return None if s is null,
django/,140,does NOT store time zone information,
django/,144,check whether seconds have a fractional part,
django/,151,does NOT store time zone information,
django/,152,"""2005-07-29 15:48:00.590358-05""",
django/,153,"""2005-07-29 09:56:00-05""",
django/,159,Remove timezone information.,
django/,167,check whether seconds have a fractional part,
django/,178,,
django/,179,Converters from Python to database (string),
django/,180,,
django/,117,Index.__init__() guarantees that self.opclasses is the same,
django/,118,length as self.columns.,
django/,43,"Some of these import psycopg2, so import them after checking if it's installed.",
django/,44,NOQA isort:skip,
django/,45,NOQA isort:skip,
django/,46,NOQA isort:skip,
django/,47,NOQA isort:skip,
django/,48,NOQA isort:skip,
django/,49,NOQA isort:skip,
django/,54,Register support for inet[] manually so we don't have to handle the Inet(),
django/,55,object on load all the time.,
django/,68,This dictionary maps Field objects to their associated PostgreSQL column,
django/,69,"types, as strings. Column-type strings can contain format strings; they'll",
django/,70,be interpolated against the values of Field.__dict__ before being output.,
django/,71,"If a column type is set to None, it won't be included in the output.",
django/,123,The patterns below are used to generate SQL pattern lookup clauses when,
django/,124,the right-hand side of the lookup isn't a raw string (it might be an expression,
django/,125,or the result of a bilateral transformation).,
django/,126,"In those cases, special characters for LIKE operators (e.g. \, *, _) should be",
django/,127,escaped on database side.,
django/,128,,
django/,129,Note: we use str.format() here for readability as '%' is used as a wildcard for,
django/,130,the LIKE operator.,
django/,143,Classes instantiated in __init__().,
django/,149,PostgreSQL backend-specific attributes.,
django/,154,None may be used to connect to the default 'postgres' db,
django/,188,self.isolation_level must be set:,
django/,189,- after connecting to the database in order to obtain the database's,
django/,190,default when no value is explicitly specified in options.,
django/,191,"- before calling _set_autocommit() because if autocommit is on, that",
django/,192,will set connection.isolation_level to ISOLATION_LEVEL_AUTOCOMMIT.,
django/,199,Set the isolation level to the value from OPTIONS.,
django/,221,Commit after setting the time zone (see #17062),
django/,228,"In autocommit mode, the cursor will be used outside of a",
django/,229,"transaction, hence use a holdable cursor.",
django/,242,Get the current async task,
django/,243,"Note that right now this is behind @async_unsafe, so this is",
django/,244,"unreachable, but in future we'll start loosening this restriction.",
django/,245,"For now, it's here so that every use of ""threading"" is",
django/,246,also async-compatible.,
django/,249,Python 3.7 and up,
django/,252,Python 3.6,
django/,256,Current task can be none even if the current_task call didn't error,
django/,261,Use that and the thread ident to get a unique name,
django/,264,Avoid reusing name in other threads / tasks,
django/,286,"Use a psycopg cursor directly, bypassing Django's utilities.",
django/,8,Maps type codes to Django Field types.,
django/,19,blank-padded,
django/,62,Query the pg_catalog tables as cursor.description does not reliably,
django/,63,return the nullable property and information_schema.columns does not,
django/,64,contain details of materialized views.,
django/,144,"Loop over the key table, collecting things as constraints. The column",
django/,145,array must return column names in the same order in which they were,
django/,146,created.,
django/,178,Now get indexes,
django/,46,Allow SIGINT to pass to psql to abort queries.,
django/,50,Restore the original SIGINT handler.,
django/,22,Setting the constraint to IMMEDIATE to allow changing data in the same,
django/,23,transaction.,
django/,28,Setting the constraint to IMMEDIATE runs any deferred checks to allow,
django/,29,dropping it in the same transaction.,
django/,37,getquoted() returns a quoted bytestring of the adapted value.,
django/,56,Yield base data types for array fields.,
django/,69,Fields with database column types of `varchar` and `text` need,
django/,70,"a second index that specifies their operator class, which is",
django/,71,needed when performing correct LIKE queries outside the,
django/,72,C locale. See #12234.,
django/,73,,
django/,74,The same doesn't apply to array fields such as varchar[size],
django/,75,"and text[size], so skip them.",
django/,86,Cast when data type changed.,
django/,91,Compare base data types for array fields.,
django/,96,Make ALTER TYPE with SERIAL make sense.,
django/,156,Drop indexes on varchar/text/citext columns that are changing to a,
django/,157,different type.,
django/,170,Added an index? Create any PostgreSQL-specific indexes.,
django/,177,Removed an index? Drop any PostgreSQL-specific indexes.,
django/,19,PostgreSQL will resolve a union as type 'text' if input types are,
django/,20,'unknown'.,
django/,21,https://www.postgresql.org/docs/current/typeconv-union-case.html,
django/,22,These fields cannot be implicitly cast back in the default,
django/,23,PostgreSQL configuration so we need to explicitly cast them.,
django/,24,We must also remove components of the type within brackets:,
django/,25,varchar(255) -> varchar.,
django/,30,https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT,
django/,32,"For consistency across backends, we return Sunday=1, Saturday=7.",
django/,42,https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC,
django/,71,https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC,
django/,90,Cast text lookups to text to allow things like filter(x__contains=4),
django/,100,Use UPPER(x) for case-insensitive lookups; it's faster.,
django/,114,Quoting once is enough.,
django/,122,"Perform a single SQL 'TRUNCATE x, y, z...;' statement.  It allows",
django/,123,us to truncate tables referenced by a foreign key in any other,
django/,124,table.,
django/,144,'ALTER SEQUENCE sequence_name RESTART WITH 1;'... style SQL statements,
django/,145,to reset sequence indices,
django/,149,'id' will be the case if it's an m2m using an autogenerated,
django/,150,intermediate table (see BaseDatabaseIntrospection.sequence_list).,
django/,170,"Use `coalesce` to set the sequence for each model to the max pk value if there are records,",
django/,171,or 1 if there are none. Set the `is_called` property (the third argument to `setval`) to true,
django/,172,"if there are records (as the max pk value is already in use), otherwise set it to false.",
django/,173,Use pg_get_serial_sequence to get the underlying sequence name from the table name,
django/,174,and column name (available since PostgreSQL 8),
django/,191,"Only one AutoField is allowed per model, so don't bother continuing.",
django/,233,https://www.psycopg.org/docs/cursor.html#cursor.query,
django/,234,The query attribute is a Psycopg extension to the DB API 2.0.,
django/,58,A query will error on invalid options.,
django/,39,"If the database should be kept and it already exists, don't",
django/,40,try to create a new one.,
django/,45,"All errors except ""database already exists"" cancel tests.",
django/,49,"If the database should be kept, ignore ""database already",
django/,50,"exists"".",
django/,54,CREATE DATABASE ... WITH TEMPLATE ... requires closing connections,
django/,55,to the template database.,
django/,22,isort:skip,
django/,23,isort:skip,
django/,25,"Some of these import MySQLdb, so import them after checking if it's installed.",
django/,26,isort:skip,
django/,27,isort:skip,
django/,28,isort:skip,
django/,29,isort:skip,
django/,30,isort:skip,
django/,31,isort:skip,
django/,32,isort:skip,
django/,39,MySQLdb returns TIME columns as timedelta -- they are more like timedelta in,
django/,40,terms of actual behavior as they are signed and include days -- and Django,
django/,41,expects time.,
django/,47,This should match the numerical portion of the version numbers (we can treat,
django/,48,versions like 5.0.24 and 5.0.24a as the same).,
django/,61,Column cannot be null,
django/,62,BIGINT UNSIGNED value is out of range,
django/,63,CHECK constraint is violated,
django/,64,CHECK constraint failed,
django/,72,args is None means no string interpolation,
django/,75,"Map some error codes to IntegrityError, since they seem to be",
django/,76,misclassified and Django would prefer the more logical place.,
django/,85,"Map some error codes to IntegrityError, since they seem to be",
django/,86,misclassified and Django would prefer the more logical place.,
django/,100,This dictionary maps Field objects to their associated MySQL column,
django/,101,"types, as strings. Column-type strings can contain format strings; they'll",
django/,102,be interpolated against the values of Field.__dict__ before being output.,
django/,103,"If a column type is set to None, it won't be included in the output.",
django/,134,For these data types:,
django/,135,- MySQL < 8.0.13 and MariaDB < 10.2.1 don't accept default values and,
django/,136,implicitly treat them as nullable,
django/,137,- all versions of MySQL and MariaDB don't support full width database,
django/,138,indexes,
django/,159,The patterns below are used to generate SQL pattern lookup clauses when,
django/,160,the right-hand side of the lookup isn't a raw string (it might be an expression,
django/,161,or the result of a bilateral transformation).,
django/,162,"In those cases, special characters for LIKE operators (e.g. \, *, _) should be",
django/,163,escaped on database side.,
django/,164,,
django/,165,Note: we use str.format() here for readability as '%' is used as a wildcard for,
django/,166,the LIKE operator.,
django/,186,Classes instantiated in __init__().,
django/,212,We need the number of potentially affected rows after an,
django/,213,"""UPDATE"", not the number of changed rows.",
django/,215,"Validate the transaction isolation level, if specified.",
django/,238,SQL_AUTO_IS_NULL controls whether an AUTO_INCREMENT column on,
django/,239,a recently inserted row will return when the field is tested,
django/,240,for NULL. Disabling this brings this aspect of MySQL in line,
django/,241,with SQL standards.,
django/,280,Override needs_rollback in case constraint_checks_disabled is,
django/,281,nested inside transaction.atomic.,
django/,69,information_schema database gives more accurate results for some figures:,
django/,70,"- varchar length returned by cursor.description is an internal length,",
django/,71,not visible length (#5725),
django/,72,- precision and scale (for decimal fields) (#5014),
django/,73,- auto_increment is not available in cursor.description,
django/,109,MySQL allows only one auto-increment column per table.,
django/,173,Get the actual constraint names and columns,
django/,195,Now get the constraint types,
django/,210,Add check constraints.,
django/,238,Ensure uniqueness of unnamed constraints. Unnamed unique,
django/,239,and check columns constraints have the same name as,
django/,240,a column.,
django/,252,Now add in the indexes,
django/,266,Convert the sorted sets to lists,
django/,21,Seems to be no good way to set sql_mode with CLI.,
django/,13,No 'CASCADE' which works as a no-op in MySQL but is undocumented,
django/,33,The name of the column check constraint is the same as the field,
django/,34,name on MariaDB. Adding IF EXISTS clause prevents migrations,
django/,35,"crash. Constraint is removed during a ""MODIFY"" column statement.",
django/,41,MariaDB >= 10.5.2 and MySQL >= 8.0.4 support an,
django/,42,"""ALTER TABLE ... RENAME COLUMN"" statement.",
django/,54,"MySQLdb escapes to string, PyMySQL to bytes.",
django/,71,MariaDB >= 10.2.1 and MySQL >= 8.0.13 supports defaults for BLOB,
django/,72,and TEXT.,
django/,83,MySQL supports defaults for BLOB and TEXT columns only if the,
django/,84,default value is written as an expression i.e. in parentheses.,
django/,91,Simulate the effect of a one-off default.,
django/,92,"field.default may be unhashable, so a set isn't used for ""in"" check.",
django/,105,No need to create an index for ForeignKey fields except if,
django/,106,db_constraint=False because the index from that constraint won't be,
django/,107,created.,
django/,13,MySQL stores positive fields as UNSIGNED ints.,
django/,38,https://dev.mysql.com/doc/mysql/en/date-and-time-functions.html,
django/,40,"DAYOFWEEK() returns an integer, 1-7, Sunday=1.",
django/,43,"WEEKDAY() returns an integer, 0-6, Monday=0.",
django/,46,Override the value of default_week_format for consistency with,
django/,47,other database backends.,
django/,48,"Mode 3: Monday, 1-53, with 4 or more days this year.",
django/,51,"Get the year part from the YEARWEEK function, which returns a",
django/,52,number as year * 100 + week.,
django/,55,EXTRACT returns 1-53 based on ISO-8601 for the week number.,
django/,62,Use double percents to escape.,
django/,108,Use double percents to escape.,
django/,136,Use double percents to escape.,
django/,165,"With MySQLdb, cursor objects have an (undocumented) ""_executed""",
django/,166,attribute where the exact query sent to the database is saved.,
django/,167,See MySQLdb/cursors.py in the source distribution.,
django/,168,"MySQLdb returns string, PyMySQL bytes.",
django/,172,"2**64 - 1, as recommended by the MySQL documentation",
django/,177,Quoting once is enough.,
django/,184,MySQL and MariaDB < 10.5.0 don't support an INSERT...RETURNING,
django/,185,statement.,
django/,202,It's faster to TRUNCATE tables that require a sequence reset since,
django/,203,ALTER TABLE AUTO_INCREMENT is slower than TRUNCATE.,
django/,210,Otherwise issue a simple DELETE since it's faster than TRUNCATE,
django/,211,and preserves sequences.,
django/,233,MySQLism: zero in AUTO_INCREMENT field does not work. Refs #17653.,
django/,243,Expression values are adapted by the database.,
django/,247,MySQL doesn't support tz-aware datetimes,
django/,259,Expression values are adapted by the database.,
django/,263,MySQL doesn't support tz-aware times,
django/,280,Convert the result to a signed integer since MySQL's binary operators,
django/,281,return an unsigned integer.,
django/,325,MariaDB includes the microsecond component in TIME_TO_SEC as,
django/,326,a decimal. MySQL returns an integer without microseconds.,
django/,338,Alias MySQL's TRADITIONAL to TEXT for consistency with other backends.,
django/,342,Use TREE by default (if supported) as it's more informative.,
django/,347,MariaDB uses ANALYZE instead of EXPLAIN ANALYZE.,
django/,350,Only MariaDB supports the analyze option with formats.,
django/,353,"ANALYZE, EXTENDED, and FORMAT are mutually exclusive options.",
django/,358,REGEXP BINARY doesn't work correctly in MySQL 8+ and REGEXP_LIKE,
django/,359,doesn't exist in MySQL 5.6 or in MariaDB.,
django/,11,MySQL doesn't support sliced subqueries with IN/ALL/ANY/SOME.,
django/,51,Neither MySQL nor MariaDB support partial indexes.,
django/,81,Test if the time zone definitions are installed. CONVERT_TZ returns,
django/,82,NULL if 'UTC' timezone isn't loaded into the mysql.time_zone.,
django/,129,EXTENDED is deprecated (and not required) in MySQL 5.7.,
django/,138,Alias MySQL's TRADITIONAL to TEXT for consistency with other,
django/,139,backends.,
django/,161,To be added in https://jira.mariadb.org/browse/MDEV-12981.,
django/,20,MySQL and MariaDB < 10.3.2 doesn't support deletion with a subquery,
django/,21,which is what the default implementation of SQLDeleteCompiler uses,
django/,22,when multiple tables are involved. Use the MySQL/MariaDB specific,
django/,23,DELETE table FROM table syntax instead to avoid performing the,
django/,24,operation in two queries.,
django/,25,"All errors except ""database exists"" (1007) cancel tests.",
django/,43,"If the database should be kept, skip everything else.",
django/,65,Allow dump_proc to receive a SIGPIPE if the load process exits.,
django/,29,isort:skip,
django/,30,isort:skip,
django/,31,isort:skip,
django/,32,isort:skip,
django/,33,isort:skip,
django/,34,isort:skip,
django/,84,"SQLite doesn't actually support most of these types, but it ""does the right",
django/,85,"thing"" given more verbose field definitions, so leave them as is so that",
django/,86,schema inspection is more useful.,
django/,126,SQLite requires LIKE statements to include an ESCAPE clause if the value,
django/,127,being escaped has a percent or underscore in it.,
django/,128,See https://www.sqlite.org/lang_expr.html for an explanation.,
django/,146,The patterns below are used to generate SQL pattern lookup clauses when,
django/,147,the right-hand side of the lookup isn't a raw string (it might be an expression,
django/,148,or the result of a bilateral transformation).,
django/,149,"In those cases, special characters for LIKE operators (e.g. \, *, _) should be",
django/,150,escaped on database side.,
django/,151,,
django/,152,Note: we use str.format() here for readability as '%' is used as a wildcard for,
django/,153,the LIKE operator.,
django/,166,Classes instantiated in __init__().,
django/,180,TODO: Remove str() when dropping support for PY36.,
django/,181,https://bugs.python.org/issue33496,
django/,186,Always allow the underlying SQLite connection to be shareable,
django/,187,between multiple threads. The safe-guarding will be handled at a,
django/,188,higher level by the `BaseDatabaseWrapper.allow_thread_sharing`,
django/,189,property. This is necessary as the shareability is disabled by,
django/,190,default in pysqlite and it cannot be changed once a connection is,
django/,191,opened.,
django/,272,"If database is in memory, closing the connection destroys the",
django/,273,"database. To prevent accidental data loss, ignore close requests on",
django/,274,an in-memory db.,
django/,279,"When 'isolation_level' is not None, sqlite3 commits before each",
django/,280,"savepoint; it's a bug. When it is None, savepoints don't make sense",
django/,281,because autocommit is enabled. The only exception is inside 'atomic',
django/,282,"blocks. To work around that bug, on SQLite, 'atomic' starts a",
django/,283,transaction explicitly rather than simply disable autocommit.,
django/,290,sqlite3's internal default is ''. It's different from None.,
django/,291,See Modules/_sqlite/connection.c.,
django/,293,'isolation_level' is a misleading API.,
django/,294,SQLite always runs at the SERIALIZABLE isolation level.,
django/,301,Foreign key constraints cannot be turned off while in a multi-,
django/,302,statement transaction. Fetch the current state of the pragma,
django/,303,to determine if constraints are effectively disabled.,
django/,328,See https://www.sqlite.org/pragma.html#pragma_foreign_key_check,
django/,558,typecast_timestamp returns a date or a datetime without timezone.,
django/,559,"It will be formatted as ""%Y-%m-%d"" or ""%Y-%m-%d %H:%M:%S[.%f]""",
django/,23,"This light wrapper ""fakes"" a dictionary interface, because some SQLite data",
django/,24,"types include variables in them -- e.g. ""varchar(30)"" -- and can't be matched",
django/,25,as a simple dictionary lookup.,
django/,27,Maps SQL types to Django Field types. Some of the SQL types have multiple,
django/,28,entries here because SQLite allows for anything and doesn't normalize the,
django/,29,field type; it uses whatever was given.,
django/,63,No support for BigAutoField or SmallAutoField as SQLite treats,
django/,64,all integer primary keys as signed 64-bit integers.,
django/,70,Skip the sqlite_sequence system table used for autoincrement key,
django/,71,generation.,
django/,101,Dictionary of relations to return,
django/,104,Schema for this table,
django/,112,"It might be a view, then no results will be returned",
django/,116,Walk through and look for references to other tables. SQLite doesn't,
django/,117,"really have enforced references, but since it echoes out the SQL used",
django/,118,to create the table we can look for REFERENCES statements used there.,
django/,130,Find name of the target FK field,
django/,161,Schema for this table,
django/,166,Walk through and look for references to other tables. SQLite doesn't,
django/,167,"really have enforced references, but since it echoes out the SQL used",
django/,168,to create the table we can look for REFERENCES statements used there.,
django/,178,"This will append (column_name, referenced_table_name, referenced_column_name) to key_columns",
django/,185,Don't use PRAGMA because that causes issues with some transactions,
django/,196,Views don't have a primary key.,
django/,210,Remaining on_update/on_delete/match values are of no interest.,
django/,238,End of columns and constraints for table definition.,
django/,241,End of current column or constraint definition.,
django/,243,Detect column or constraint definition by first token.,
django/,249,Detect constraint name by second token.,
django/,255,Start constraint columns parsing after UNIQUE keyword.,
django/,262,Stop constraint parsing.,
django/,270,Detect field name by first token.,
django/,278,Start constraint columns parsing after CHECK keyword.,
django/,285,Stop constraint parsing.,
django/,313,Check constraint parsing is based of SQLite syntax diagram.,
django/,314,https://www.sqlite.org/syntaxdiagrams.html#table-constraint,
django/,319,Go to columns and constraint definition,
django/,323,Parse columns and constraint definition,
django/,348,Find inline check constraints.,
django/,356,table_name is a view.,
django/,362,Get the index info,
django/,365,"SQLite 3.8.9+ has 5 columns, however older versions only give 3",
django/,366,columns. Discard last 2 columns if there.,
django/,372,There's at most one row.,
django/,374,Inline constraints are already detected in,
django/,375,_parse_table_constraints(). The reasons to avoid fetching inline,
django/,376,constraints from `PRAGMA index_list` are:,
django/,377,- Inline constraints can have a different name and information,
django/,378,than what `PRAGMA index_list` gives.,
django/,379,- Not all inline constraints may appear in `PRAGMA index_list`.,
django/,381,An inline constraint,
django/,383,Get the index info for that index,
django/,396,Add type and column orders for indexes,
django/,398,SQLite doesn't support any index type other than b-tree,
django/,403,Get the PK,
django/,406,"SQLite doesn't actually give a name to the PK constraint,",
django/,407,"so we invent one. This is fine, as the SQLite backend never",
django/,408,"deletes PK constraints by name, as you can't delete constraints",
django/,409,in SQLite; we remake the table with a new PK instead.,
django/,413,It's not actually a unique constraint.,
django/,10,TODO: Remove str() when dropping support for PY37.,
django/,11,args parameter accepts path-like objects on Windows since Python 3.8.,
django/,22,Some SQLite schema alterations need foreign key constraints to be,
django/,23,disabled. Enforce it here for the duration of the schema edition.,
django/,40,"The backend ""mostly works"" without this function and there are use",
django/,41,cases for compiling Python without the sqlite3 libraries (e.g.,
django/,42,security hardening).,
django/,50,Manual emulation of SQLite parameter quoting,
django/,60,"Bytes are only allowed for BLOB fields, encoded as string",
django/,61,"literals containing hexadecimal data and preceded by a single ""X""",
django/,62,character.,
django/,116,Follow SQLite's documented procedure for performing changes,
django/,117,that don't affect the on-disk content.,
django/,118,https://sqlite.org/lang_altertable.html#otheralter,
django/,129,The integrity check will raise an exception and rollback,
django/,130,the transaction if the sqlite_master updates corrupt the,
django/,131,database.,
django/,133,Perform a VACUUM to refresh the database representation from,
django/,134,the sqlite_master table.,
django/,156,Self-referential fields must be recreated rather than copied from,
django/,157,the old model to ensure their remote_field.field_name doesn't refer,
django/,158,to an altered field.,
django/,161,Work out the new fields dict / mapping,
django/,166,"Since mapping might mix column names and default values,",
django/,167,its values must be already quoted.,
django/,169,This maps field names (not columns) for things like unique_together,
django/,171,"If any of the new or altered fields is introducing a new PK,",
django/,172,remove the old one,
django/,183,Add in any created fields,
django/,186,Choose a default and insert it into the copy map,
django/,191,Add in any altered fields,
django/,206,Remove any deleted fields,
django/,210,Remove any implicit M2M tables,
django/,213,Work inside a new app registry,
django/,216,"Work out the new value of unique_together, taking renames into",
django/,217,account,
django/,223,"Work out the new value for index_together, taking renames into",
django/,224,account,
django/,239,Provide isolated instances of the fields to the new model body so,
django/,240,that the existing model's internals aren't interfered with when,
django/,241,the dummy model is constructed.,
django/,244,Construct a new model with the new fields to allow self referential,
django/,245,primary key to resolve to. This model won't ever be materialized as a,
django/,246,table and solely exists for foreign key reference resolution purposes.,
django/,247,This wouldn't be required if the schema editor was operating on model,
django/,248,states instead of rendered models.,
django/,263,Construct a model with a renamed table name.,
django/,279,Create a new table with the updated schema.,
django/,282,Copy data from the old table into the new table,
django/,290,Delete the old table to make way for the new,
django/,293,Rename the new table to take way for the old,
django/,299,Run deferred SQL on correct table,
django/,303,Fix any PK-removed field,
django/,311,Delete the table (and only that),
django/,315,Remove all deferred statements referencing the deleted table.,
django/,325,Special-case implicit M2M tables,
django/,335,M2M fields are a special case,
django/,337,"For implicit M2M tables, delete the auto-created table",
django/,340,"For explicit ""through"" M2M fields, do nothing",
django/,341,"For everything else, remake.",
django/,343,It might not actually have a column behind it,
django/,351,"Use ""ALTER TABLE ... RENAME COLUMN"" if only the column name",
django/,352,changed and there aren't any constraints.,
django/,359,Alter by remaking table,
django/,361,Rebuild tables with FKs pointing to this field if the PK type changed.,
django/,370,"The field name didn't change, but some options did; we have to propagate this altering.",
django/,374,"We need the field that points to the target model, so we can tell alter_field to change it -",
django/,375,"this is m2m_reverse_field_name() (as opposed to m2m_field_name, which points to our model)",
django/,382,Make a new through table,
django/,384,Copy the data across,
django/,399,Delete the old through table,
django/,49,Not every subexpression has an output_field which is fine,
django/,50,to ignore.,
django/,125,This function is limited both by SQLITE_LIMIT_VARIABLE_NUMBER (the,
django/,126,"number of parameters, default = 999) and SQLITE_MAX_COLUMN (the",
django/,127,"number of return values, default = 2000). Since Python's sqlite3",
django/,128,"module doesn't expose the get_limit() C API, assume the default",
django/,129,limits are in effect and split the work in batches if needed.,
django/,139,Bypass Django's wrappers and use the underlying sqlite3 connection,
django/,140,to avoid logging this query - it would trigger infinite recursion.,
django/,142,Native sqlite3 cursors cannot be used as context managers.,
django/,149,Python substitutes parameters in Modules/_sqlite/cursor.c with:,
django/,150,"pysqlite_statement_bind_parameters(self->statement, parameters, allow_8bit_chars);",
django/,151,"Unfortunately there is no way to reach self->statement from Python,",
django/,152,so we quote and substitute parameters manually.,
django/,161,"For consistency with SQLiteCursorWrapper.execute(), just return sql",
django/,162,when there are no parameters. See #13648 and #17158.,
django/,168,Quoting once is enough.,
django/,195,512 is large enough to fit the ~330 tables (as of this writing) in,
django/,196,Django's test suite.,
django/,201,Simulate TRUNCATE CASCADE by recursively collecting the tables,
django/,202,referencing the tables to be flushed.,
django/,204,Note: No requirement for reset of auto-incremented indices (cf. other,
django/,205,sql_flush() implementations). Just return SQL at this point,
django/,216,Expression values are adapted by the database.,
django/,220,SQLite doesn't support tz-aware datetimes,
django/,233,Expression values are adapted by the database.,
django/,237,SQLite doesn't support tz-aware datetimes,
django/,281,SQLite stores only 15 significant digits. Digits coming from,
django/,282,float inaccuracy must be removed.,
django/,311,"SQLite doesn't have a ^ operator, so use the user-defined POWER",
django/,312,function that's registered in connect().,
django/,328,SQLite doesn't enforce any integer constraints,
django/,7,"SQLite can read from a cursor since SQLite 3.6.5, subject to the caveat",
django/,8,that statements within a connection aren't isolated from each other. See,
django/,9,https://sqlite.org/isolation.html.,
django/,36,"Is ""ALTER TABLE ... RENAME COLUMN"" supported?",
django/,39,Deferred constraint checks can be emulated on SQLite < 3.20 but not in a,
django/,40,reasonably performant way.,
django/,29,Erase the old test database,
django/,63,Forking automatically makes a copy of an in-memory database.,
django/,65,Erase the old test database,
django/,86,Remove the SQLite database file,
django/,22,Cygwin requires some special voodoo to set the environment variables,
django/,23,properly so that Oracle will see them.,
django/,39,Oracle takes client-side character set encoding from the environment.,
django/,41,This prevents unicode from getting mangled by getting encoded into the,
django/,42,potentially non-unicode database character set.,
django/,52,"Some of these import cx_Oracle, so import them after checking if it's installed.",
django/,53,NOQA isort:skip,
django/,54,NOQA isort:skip,
django/,55,NOQA isort:skip,
django/,56,NOQA isort:skip,
django/,57,NOQA isort:skip,
django/,58,NOQA isort:skip,
django/,59,NOQA isort:skip,
django/,60,NOQA isort:skip,
django/,68,cx_Oracle raises a cx_Oracle.DatabaseError exception with the,
django/,69,following attributes and values:,
django/,70,code = 2091,
django/,71,message = 'ORA-02091: transaction rolled back,
django/,72,'ORA-02291: integrity constraint (TEST_DJANGOTEST.SYS,
django/,73,_C00102056) violated - parent key not found',
django/,74,Convert that case to Django's IntegrityError exception.,
django/,84,If connection.operators is looked up before a connection has been,
django/,85,"created, transparently initialize connection.operators to avert an",
django/,86,AttributeError.,
django/,89,Creating a cursor will initialize the operators.,
django/,97,This dictionary maps Field objects to their associated Oracle column,
django/,98,"types, as strings. Column-type strings can contain format strings; they'll",
django/,99,be interpolated against the values of Field.__dict__ before being output.,
django/,100,"If a column type is set to None, it won't be included in the output.",
django/,101,,
django/,102,"Any format strings starting with ""qn_"" are quoted before being used in the",
django/,103,"output (the ""qn_"" prefix is stripped before the lookup is performed.",
django/,142,Oracle doesn't support a database index on these columns.,
django/,172,The patterns below are used to generate SQL pattern lookup clauses when,
django/,173,the right-hand side of the lookup isn't a raw string (it might be an expression,
django/,174,or the result of a bilateral transformation).,
django/,175,"In those cases, special characters for LIKE operators (e.g. \, %, _)",
django/,176,should be escaped on the database side.,
django/,177,,
django/,178,Note: we use str.format() here for readability as '%' is used as a wildcard for,
django/,179,the LIKE operator.,
django/,198,Classes instantiated in __init__().,
django/,239,Set the territory first. The territory overrides NLS_DATE_FORMAT,
django/,240,and NLS_TIMESTAMP_FORMAT to the territory default. When all of,
django/,241,these are set in single statement it isn't clear what is supposed,
django/,242,to happen.,
django/,244,Set Oracle date to ANSI date format.  This only needs to execute,
django/,245,once when we create a new connection. We also set the Territory,
django/,246,to 'AMERICA' which forces Sunday to evaluate to a '1' in,
django/,247,TO_CHAR().,
django/,255,Ticket #14149: Check whether our LIKE implementation will,
django/,256,work for this connection or we need to fall back on LIKEC.,
django/,257,This check is performed only once per DatabaseWrapper,
django/,258,"instance per thread, since subsequent connections will use",
django/,259,the same settings.,
django/,273,Ensure all changes are preserved even when AUTOCOMMIT is False.,
django/,286,Oracle doesn't support releasing savepoints. But we fake them when query,
django/,287,logging is enabled to keep query counts consistent with other backends.,
django/,333,"With raw SQL queries, datetimes can reach this function",
django/,334,without being converted by DateTimeField.get_db_prep_value.,
django/,340,Oracle doesn't recognize True and False correctly.,
django/,350,"To transmit to the database, we need Unicode if supported",
django/,351,"To get size right, we must consider bytes.",
django/,354,We could optimize by only converting up to 4000 bytes here,
django/,357,"If parameter has `input_size` attribute, use that.",
django/,360,Mark any string param greater than 4000 characters as a CLOB.,
django/,425,NUMBER column: decimal-precision floating point.,
django/,426,"This will normally be an integer from a sequence,",
django/,427,but it could be a decimal value.,
django/,430,FLOAT column: binary-precision floating point.,
django/,431,This comes from FloatField columns.,
django/,434,"NUMBER(p,s) column: decimal-precision fixed point.",
django/,435,This comes from IntegerField and DecimalField columns.,
django/,438,No type information. This normally comes from a,
django/,439,mathematical expression in the SELECT list. Guess int,
django/,440,or Decimal based on whether it has a decimal point.,
django/,456,"Try dict handling; if that fails, treat as sequence",
django/,466,It's not a list of dicts; it's a list of sequences,
django/,476,"Try dict handling; if that fails, treat as sequence",
django/,483,"cx_Oracle wants no trailing ';' for SQL statements.  For PL/SQL, it",
django/,484,"it does want a trailing ';' but not a trailing '/'.  However, these",
django/,485,characters must be included in the original query in case the query,
django/,486,is being passed to SQL*Plus.,
django/,492,Handle params as dict,
django/,496,Handle params as a dict with unified query parameters by their,
django/,497,values. It can be used only in single query execute() because,
django/,498,executemany() shares the formatted query with each of the params,
django/,499,"list. e.g. for input params = [0.75, 2, 0.75, 'sth', 0.75]",
django/,500,"params_dict = {0.75: ':arg0', 2: ':arg1', 'sth': ':arg2'}",
django/,501,"args = [':arg0', ':arg1', ':arg0', ':arg2', ':arg0']",
django/,502,"params = {':arg0': 0.75, ':arg1': 2, ':arg2': 'sth'}",
django/,511,Handle params as sequence,
django/,524,"No params given, nothing to do",
django/,526,uniform treatment for sequences and iterables,
django/,529,we build a list of formatted params; as we're going to traverse it,
django/,530,"more than once, we can't make it lazy by using a generator",
django/,540,already closed,
django/,14,Maps type objects to Django Field types.,
django/,74,user_tab_columns gives data default for columns,
django/,101,"cx_Oracle, for some reason, doubles percent signs.",
django/,128,Oracle allows only one identity column per table.,
django/,136,To keep backward compatibility for AutoFields that aren't Oracle,
django/,137,identity columns.,
django/,200,"Loop over the constraints, getting PKs, uniques, and checks",
django/,234,All uniques come with an index,
django/,236,Foreign key constraints,
django/,264,Now get indexes,
django/,35,"If the column is an identity column, drop the identity before",
django/,36,removing the field.,
django/,42,Run superclass action,
django/,44,Clean up manually created sequence.,
django/,62,If we're changing type to an unsupported type we need a,
django/,63,SQLite-ish workaround,
django/,66,"If an identity column is changing to a non-numeric type, drop the",
django/,67,identity first.,
django/,71,"If a primary key column is changing to an identity column, drop",
django/,72,the primary key first.,
django/,90,Make a new field that's like the new one but with a temporary,
django/,91,column name.,
django/,95,Add it,
django/,97,Explicit data type conversion,
django/,98,https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf,
django/,99,/Data-Type-Comparison-Rules.html#GUID-D0C5A47E-6F93-4C2D-9E49-4F2B86B359DD,
django/,112,TimeField are stored as TIMESTAMP with a 1900-01-01 date part.,
django/,114,Transfer values across,
django/,120,Drop the old field,
django/,122,Rename and possibly make the new field NOT NULL,
django/,22,"Oracle uses NUMBER(5), NUMBER(11), and NUMBER(19) for integer fields.",
django/,23,"SmallIntegerField uses NUMBER(11) instead of NUMBER(5), which is used by",
django/,24,"SmallAutoField, to preserve backward compatibility.",
django/,38,"TODO: colorize this SQL code with style.SQL_KEYWORD(), etc.",
django/,63,Oracle doesn't support string without precision; use the max string size.,
django/,77,"TO_CHAR(field, 'D') returns an integer from 1-7, where 1=Sunday.",
django/,82,IW = ISO week number,
django/,89,https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/EXTRACT-datetime.html,
django/,93,https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/ROUND-and-TRUNC-Date-Functions.html,
django/,103,"Oracle crashes with ""ORA-03113: end-of-file on communication channel""",
django/,104,if the time zone name is passed in parameter. Use interpolation instead.,
django/,105,https://groups.google.com/forum/#!msg/django-developers/zwQju7hbG78/9l934yelwfsJ,
django/,106,This regexp matches all time zone names from the zoneinfo database.,
django/,121,"Convert from connection timezone to the local time, returning",
django/,122,TIMESTAMP WITH TIME ZONE and cast it back to TIMESTAMP to strip the,
django/,123,TIME ZONE details.,
django/,137,Since `TimeField` values are stored as TIMESTAMP where only the date,
django/,138,"part is ignored, convert the field to the specified timezone.",
django/,147,https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/ROUND-and-TRUNC-Date-Functions.html,
django/,161,Cast to DATE removes sub-second precision.,
django/,165,The implementation is similar to `datetime_trunc_sql` as both,
django/,166,`DateTimeField` and `TimeField` are stored as TIMESTAMP where,
django/,167,the date part of the later is ignored.,
django/,173,Cast to DATE removes sub-second precision.,
django/,194,Oracle stores empty strings as null. If the field accepts the empty,
django/,195,"string, undo this to adhere to the Django convention of using",
django/,196,the empty string instead of null.,
django/,220,cx_Oracle always returns datetime.datetime objects for,
django/,221,"DATE and TIMESTAMP columns, but Django wants to see a",
django/,222,"python datetime.date, .time, or .datetime.",
django/,260,"cx_Oracle < 6.3 returns None, >= 6.3 returns empty list.",
django/,267,"cx_Oracle < 7 returns value, >= 7 returns list with single value.",
django/,288,https://cx-oracle.readthedocs.io/en/latest/cursor.html#Cursor.statement,
django/,289,The DB API definition does not define this attribute.,
django/,291,"Unlike Psycopg's `query` and MySQLdb`'s `_executed`, cx_Oracle's",
django/,292,`statement` doesn't contain the query parameters. Substitute,
django/,293,parameters manually.,
django/,330,SQL92 requires delimited (quoted) names to be case-sensitive.  When,
django/,331,"not quoted, Oracle has case-insensitive behavior for identifiers, but",
django/,332,always defaults to uppercase.,
django/,333,We simplify things by making Oracle identifiers always uppercase.,
django/,336,"Oracle puts the query text into a (query % args) construct, so % signs",
django/,337,in names need to be escaped. The '%%' will be collapsed back to '%' at,
django/,338,that stage so we aren't really making the name longer here.,
django/,403,512 is large enough to fit the ~330 tables (as of this writing) in,
django/,404,Django's test suite.,
django/,411,Oracle's TRUNCATE CASCADE only works with ON DELETE CASCADE,
django/,412,foreign keys which Django doesn't define. Emulate the,
django/,413,PostgreSQL behavior which truncates all dependent tables by,
django/,414,manually retrieving all foreign key constraints and resolving,
django/,415,dependencies.,
django/,448,"Since we've just deleted all the rows, running our sequence",
django/,449,ALTER code will reset the sequence to 0.,
django/,487,"Only one AutoField is allowed per model, so don't",
django/,488,continue to loop,
django/,535,Expression values are adapted by the database.,
django/,539,cx_Oracle doesn't support tz-aware datetimes,
django/,552,Expression values are adapted by the database.,
django/,559,Oracle doesn't support tz-aware times,
django/,606,A model without any fields has fields=[None].,
django/,610,"Add columns aliases to the first select to avoid ""ORA-00918:",
django/,611,"column ambiguously defined"" when two or more columns in the",
django/,612,first select have the same value.,
django/,617,Bulk insert to tables with Oracle identity columns causes Oracle to,
django/,618,add sequence.nextval to it. Sequence.nextval cannot be used with the,
django/,619,"UNION operator. To prevent incorrect SQL, move UNION to a subquery.",
django/,31,"select for update with limit can be achieved on Oracle, but not with the current backend.",
django/,34,Oracle doesn't ignore quoted identifiers case but the current backend,
django/,35,does by uppercasing all identifiers.,
django/,38,"All errors except ""tablespace already exists"" cancel tests",
django/,55,Ran into a database error that isn't about leftover objects in the tablespace,
django/,77,"All errors except ""user already exists"" cancel tests",
django/,98,done with main user -- test user and tablespaces created,
django/,131,There are objects in the test tablespace which prevent dropping it,
django/,132,The easy fix is to drop the test user -- but are we allowed to do so?,
django/,216,"Ignore ""tablespace already exists"" error when keepdb is on.",
django/,237,"Ignore ""user already exists"" error when keepdb is on",
django/,240,"If the password was randomly generated, change the user accordingly.",
django/,244,"Most test suites can be run without ""create view"" and",
django/,245,"""create materialized view"" privileges. But some need it.",
django/,290,Statement can fail when acceptable_ora_err is not None,
django/,343,Oracle passwords are limited to 30 chars and can't contain symbols.,
django/,28,Mapping of Field objects to their column types.,
django/,30,Mapping of Field objects to their SQL suffix such as AUTOINCREMENT.,
django/,32,Mapping of Field objects to their SQL for CHECK constraints.,
django/,38,Classes instantiated in __init__().,
django/,49,Connection related attributes.,
django/,50,The underlying database connection.,
django/,52,`settings_dict` should be a dictionary containing keys such as,
django/,53,"NAME, USER, etc. It's called `settings_dict` instead of `settings`",
django/,54,to disambiguate it from Django settings modules.,
django/,57,Query logging in debug mode or when explicitly enabled.,
django/,61,Transaction related attributes.,
django/,62,"Tracks if the connection is in autocommit mode. Per PEP 249, by",
django/,63,"default, it isn't.",
django/,65,Tracks if the connection is in a transaction managed by 'atomic'.,
django/,67,Increment to generate unique savepoint ids.,
django/,69,List of savepoints created by 'atomic'.,
django/,71,"Tracks if the outermost 'atomic' block should commit on exit,",
django/,72,ie. if autocommit was active on entry.,
django/,74,Tracks if the transaction should be rolled back to the next,
django/,75,available savepoint because of an exception in an inner block.,
django/,78,Connection termination related attributes.,
django/,83,Thread-safety related attributes.,
django/,88,A list of no-argument functions to run when the transaction commits.,
django/,89,"Each entry is an (sids, func) tuple, where sids is a set of the",
django/,90,active savepoint IDs when this function was registered.,
django/,93,Should we run the on-commit hooks the next time set_autocommit(True),
django/,94,is called?,
django/,97,A stack of wrappers to be invoked around execute()/executemany(),
django/,98,"calls. Each entry is a function taking five arguments: execute, sql,",
django/,99,"params, many, and context. It's the function's responsibility to",
django/,100,"call execute(sql, params, many, context).",
django/,164,##### Backend-specific methods for creating connections and cursors,
django/,182,##### Backend-specific methods for creating connections,
django/,187,Check for invalid configurations.,
django/,189,In case the previous connection was closed while in an atomic block,
django/,193,Reset parameters defining when to close the connection,
django/,198,Establish the connection,
django/,221,##### Backend-specific wrappers for PEP-249 connection methods,
django/,254,##### Generic wrappers for PEP-249 connection methods,
django/,267,A successful commit means that the database connection works.,
django/,277,A successful rollback means that the database connection works.,
django/,288,Don't call validate_no_atomic_block() to avoid making it difficult,
django/,289,to get rid of a connection in an invalid state. The next connect(),
django/,290,will reset the transaction state anyway.,
django/,302,##### Backend-specific savepoint management methods,
django/,317,Savepoints cannot be created outside a transaction,
django/,320,##### Generic savepoint management methods,
django/,354,Remove any callbacks registered while this savepoint was active.,
django/,377,##### Backend-specific transaction management methods,
django/,385,##### Generic transaction management methods,
django/,451,##### Foreign key constraints checks handling,
django/,488,##### Connection termination handling,
django/,508,"If the application didn't restore the original autocommit setting,",
django/,509,"don't take chances, drop the connection.",
django/,514,If an exception other than DataError or IntegrityError occurred,
django/,515,"since the last commit / rollback, check if the connection works.",
django/,527,##### Thread safety handling,
django/,560,##### Miscellaneous,
django/,636,Transaction in progress; save for execution on commit.,
django/,641,No transaction in progress and in autocommit mode; execute,
django/,642,immediately.,
django/,3,Structure returned by DatabaseIntrospection.get_table_list(),
django/,6,Structure returned by the DB-API cursor.description interface (PEP 249),
django/,128,"If this is an m2m using an intermediate table,",
django/,129,we don't need to reset the sequence.,
django/,3,This should be a string representing the name of the executable,
django/,4,"(e.g., ""psql""). Subclasses must override this.",
django/,8,connection is an instance of BaseDatabaseWrapper.,
django/,22,M2M reverse field,
django/,25,"Foreign key constraint on the primary key, which is being altered.",
django/,27,Is the constraint targeting the field being altered?,
django/,36,Filter out m2m objects from reverse relations.,
django/,37,"Return (old_relation, new_relation) tuples.",
django/,51,Overrideable SQL templates,
django/,103,State-managing methods,
django/,119,Core utility functions,
django/,123,Don't perform the transactional DDL check if SQL is being collected,
django/,124,as it's not going to be executed anyway.,
django/,130,Account for non-string statement objects.,
django/,132,"Log the command we're running, then run it",
django/,149,"Add any unique_togethers (always deferred, as some fields might be",
django/,150,"created afterwards, like geometry fields with some backends).",
django/,154,"Create column SQL, add FK deferreds if needed.",
django/,158,SQL.,
django/,162,Check constraints can go on the column SQL here.,
django/,166,Autoincrement SQL (for backends with inline variant).,
django/,171,FK.,
django/,182,Add the SQL to our big list.,
django/,187,Autoincrement SQL (for backends with post table definition,
django/,188,variant).,
django/,204,Field <-> database mapping functions,
django/,211,Get the column's type and use that as the basis of the SQL,
django/,215,Check for fields that aren't actually columns (e.g. M2M),
django/,218,Work out nullability,
django/,220,"If we were told to include a default value, do so",
django/,227,Some databases can't take defaults as a parameter (oracle),
django/,228,"If this is the case, the individual schema backend should",
django/,229,implement prepare_default,
django/,234,"Oracle treats the empty string ('') as null, so coerce the null",
django/,235,option whenever '' is a possible value.,
django/,243,Primary key/unique outputs,
django/,248,Optionally add the tablespace if it's an implicitly indexed column,
django/,252,Return the sql,
django/,280,This method allows testing its logic without a connection.,
django/,315,Actions,
django/,323,"Prevent using [] as params, in the case a literal '%' is used in the definition",
django/,326,Add any field index and index_together's (deferred as SQLite _remake_table needs it),
django/,329,Make M2M tables,
django/,336,Handle auto-created intermediary models,
django/,341,Delete the table,
django/,345,Remove all deferred statements referencing the deleted table.,
django/,378,Deleted uniques,
django/,381,Created uniques,
django/,394,Deleted indexes,
django/,397,Created indexes,
django/,428,Rename all references to the old table name.,
django/,446,Special-case implicit M2M tables,
django/,449,Get the column's definition,
django/,451,It might not actually have a column behind it,
django/,454,Check constraints can go on the column SQL here,
django/,460,"Add FK constraint inline, if supported.",
django/,471,"Otherwise, add FK constraints later.",
django/,474,Build the SQL and run it,
django/,481,Drop the default if we need to,
django/,482,(Django usually does not use in-database defaults),
django/,490,"Add an index, if required",
django/,492,Reset connection if required,
django/,501,Special-case implicit M2M tables,
django/,504,It might not actually have a column behind it,
django/,507,"Drop any FK constraints, MySQL requires explicit deletion",
django/,512,Delete the column,
django/,518,Reset connection if required,
django/,521,Remove all deferred statements referencing the deleted column.,
django/,534,Ensure this field is even column-based,
django/,555,Both sides have through models; this is a no-op.,
django/,570,"Drop any FK constraints, we'll remake them later",
django/,587,Has unique been removed?,
django/,589,Find the unique constraint for this field,
django/,603,"Drop incoming FK constraints if the field is a primary key or unique,",
django/,604,"which might be a to_field target, and things are going to change.",
django/,612,"'_meta.related_field' also contains M2M reverse fields, these",
django/,613,will be filtered out,
django/,620,"Removed an index? (no strict check, as multiple indexes are possible)",
django/,621,Remove indexes if db_index switched to False or a unique constraint,
django/,622,will now be used in lieu of an index. The following lines from the,
django/,623,truth table show all True cases; the rest are False:,
django/,624,,
django/,625,old_field.db_index | old_field.unique | new_field.db_index | new_field.unique,
django/,626,------------------------------------------------------------------------------,
django/,627,True               | False            | False              | False,
django/,628,True               | False            | False              | True,
django/,629,True               | False            | True               | True,
django/,631,Find the index for this field,
django/,633,Retrieve only BTREE indexes since this is what's created with,
django/,634,db_index=True.,
django/,640,The only way to check if an index was created with,
django/,641,"db_index=True or with Index(['field'], name='foo')",
django/,642,is to look at its name (refs #28053).,
django/,644,Change check constraints?,
django/,659,Have they renamed the column?,
django/,662,Rename all references to the renamed column.,
django/,666,"Next, start accumulating actions to do",
django/,670,Type change?,
django/,675,When changing a column NULL constraint to NOT NULL with a given,
django/,676,"default value, we need to perform 4 steps:",
django/,677,1. Add a default for new incoming writes,
django/,678,2. Update existing NULL rows with new default,
django/,679,3. Replace NULL constraint with NOT NULL,
django/,680,4. Drop the default again.,
django/,681,Default change?,
django/,693,Nullability change?,
django/,698,Only if we have a default and there is a change from NULL to NOT NULL,
django/,705,If we don't have to do a 4-way default alteration we can,
django/,706,directly run a (NOT) NULL alteration,
django/,708,Combine actions together if we can (e.g. postgres),
django/,712,Apply those actions,
django/,722,Update existing rows with default value,
django/,731,Since we didn't run a NOT NULL change before we need to do it,
django/,732,now,
django/,744,"If primary_key changed to False, delete the primary key constraint.",
django/,747,Added a unique?,
django/,750,Added an index? Add an index if db_index switched to True or a unique,
django/,751,constraint will no longer be used in lieu of an index. The following,
django/,752,lines from the truth table show all True cases; the rest are False:,
django/,753,,
django/,754,old_field.db_index | old_field.unique | new_field.db_index | new_field.unique,
django/,755,------------------------------------------------------------------------------,
django/,756,False              | False            | True               | False,
django/,757,False              | True             | True               | False,
django/,758,True               | True             | True               | False,
django/,761,Type alteration on primary key? Then we need to alter the column,
django/,762,referring to us.,
django/,766,Changed to become primary key?,
django/,768,Make the new one,
django/,770,Update all referencing columns,
django/,772,Handle our type alters on the other end of rels from the PK stuff above,
django/,788,Does it have a foreign key?,
django/,793,Rebuild FKs that pointed to us if we previously had to drop them,
django/,798,Does it have check constraints we need to add?,
django/,802,Drop the default if we need to,
django/,803,(Django usually does not use in-database defaults),
django/,811,Reset connection if required,
django/,824,"The field is nullable in the database anyway, leave it alone.",
django/,851,Some databases (Oracle) can't take defaults as a parameter,
django/,852,"If this is the case, the SchemaEditor for that database should",
django/,853,implement prepare_default().,
django/,891,Rename the through table,
django/,895,Repoint the FK to the other side,
django/,898,"We need the field that points to the target model, so we can tell alter_field to change it -",
django/,899,"this is m2m_reverse_field_name() (as opposed to m2m_field_name, which points to our model)",
django/,905,for self-referential models we need to alter field from the other end too,
django/,920,"If everything fits into max_length, use that name.",
django/,924,Shorten a long suffix.,
django/,933,Prepend D if needed to prevent the name from starting with an,
django/,934,underscore or a number (not permitted on Oracle).,
django/,1070,Databases support conditional unique constraints via a unique,
django/,1071,index.,
django/,21,Integer field safe ranges by `internal_type` as documented,
django/,22,in docs/ref/models/fields.txt.,
django/,39,Mapping of Field.get_internal_type() (typically the model field's class,
django/,40,"name) to the data type to use for the Cast() function, if different from",
django/,41,DatabaseWrapper.data_types.,
django/,43,CharField data type if the max_length argument isn't provided.,
django/,46,Start and end points for window expressions.,
django/,53,"Prefix for EXPLAIN queries, or None EXPLAIN isn't supported.",
django/,239,Convert params to contain string values.,
django/,426,No sequence reset required by default.,
django/,453,"Same as prep_for_like_query(), but called for ""iexact"" matches, which",
django/,454,"need not necessarily be implemented using ""LIKE"" in the backend.",
django/,473,must be before date,
django/,12,Does the backend distinguish between '' and None?,
django/,15,Does the backend allow inserting duplicate NULL rows in a nullable,
django/,16,"unique field? All core backends implement this correctly, but other",
django/,17,databases such as SQL Server do not.,
django/,20,Does the backend allow inserting duplicate rows when a unique_together,
django/,21,constraint exists and some fields are nullable but not all of them?,
django/,31,"If True, don't use integer foreign keys referring to, e.g., positive",
django/,32,integer primary keys.,
django/,39,Does the database's SELECT FOR UPDATE OF syntax require a column rather,
django/,40,than a table?,
django/,43,Does the default test database allow multiple connections?,
django/,44,Usually an indication that the test database is in-memory,
django/,47,Can an object be saved without an explicit primary key?,
django/,50,"Can a fixture contain forward references? i.e., are",
django/,51,"FK constraints checked at the end of transaction, or",
django/,52,at the end of each save operation?,
django/,55,Does the backend truncate names properly when they are too long?,
django/,58,Is there a REAL datatype in addition to floats/doubles?,
django/,62,Is there a true datatype for uuid?,
django/,65,Is there a true datatype for timedeltas?,
django/,68,Does the database driver supports same type temporal data subtraction,
django/,69,by returning the type used to store duration field?,
django/,72,Does the __regex lookup support backreferencing and grouping?,
django/,75,Can date/datetime lookups be performed using a string?,
django/,78,Can datetimes with timezones be used?,
django/,81,Does the database have a copy of the zoneinfo database?,
django/,84,"When performing a GROUP BY, is an ORDER BY NULL required",
django/,85,to remove any ordering?,
django/,88,Does the backend order NULL values as largest or smallest?,
django/,91,Does the backend support NULLS FIRST and NULLS LAST in ORDER BY?,
django/,94,Does the backend orders NULLS FIRST by default?,
django/,97,The database's limit on the number of query parameters.,
django/,100,Can an object have an autoincrement primary key of 0? MySQL says No.,
django/,103,"Do we need to NULL a ForeignKey out, or can the constraint check be",
django/,104,deferred,
django/,107,date_interval_sql can properly handle mixed Date/DateTime fields and timedeltas,
django/,110,Does the backend support tablespaces? Default to False because it isn't,
django/,111,in the SQL standard.,
django/,114,Does the backend reset sequences between tests?,
django/,117,Can the backend introspect the default value of a column?,
django/,120,Confirm support for introspected foreign keys,
django/,121,"Every database can do this reliably, except MySQL,",
django/,122,which can't do it for MyISAM tables,
django/,125,"Can the backend introspect an AutoField, instead of an IntegerField?",
django/,128,"Can the backend introspect a BigIntegerField, instead of an IntegerField?",
django/,131,"Can the backend introspect an BinaryField, instead of an TextField?",
django/,134,"Can the backend introspect an DecimalField, instead of an FloatField?",
django/,137,"Can the backend introspect a DurationField, instead of a BigIntegerField?",
django/,140,"Can the backend introspect an IPAddressField, instead of an CharField?",
django/,143,"Can the backend introspect a PositiveIntegerField, instead of an IntegerField?",
django/,146,"Can the backend introspect a SmallIntegerField, instead of an IntegerField?",
django/,149,"Can the backend introspect a TimeField, instead of a DateTimeField?",
django/,152,Some backends may not be able to differentiate BigAutoField or,
django/,153,SmallAutoField from other fields such as AutoField.,
django/,157,Some backends may not be able to differentiate BooleanField from other,
django/,158,fields such as IntegerField.,
django/,161,Can the backend introspect the column order (ASC/DESC) for indexes?,
django/,164,Does the backend support introspection of materialized views?,
django/,167,Support for the DISTINCT ON clause,
django/,170,Does the backend prevent running SQL queries in broken transactions?,
django/,173,Can we roll back DDL in a transaction?,
django/,176,Does it support operations requiring references rename in a transaction?,
django/,179,Can we issue more than one ALTER COLUMN clause in an ALTER TABLE?,
django/,182,Does it support foreign keys?,
django/,185,Can it create foreign key constraints inline when adding columns?,
django/,188,Does it support CHECK constraints?,
django/,191,Does the backend support introspection of CHECK constraints?,
django/,194,"Does the backend support 'pyformat' style (""... %(name)s ..."", {'name': value})",
django/,195,parameter passing? Note this can be provided by the backend even if not,
django/,196,supported by the Python driver,
django/,199,"Does the backend require literal defaults, rather than parameterized ones?",
django/,202,Does the backend require a connection reset after each material schema change?,
django/,205,What kind of error does the backend throw when accessing closed cursor?,
django/,208,Does 'a' LIKE 'A' match?,
django/,211,"Suffix for backends that don't support ""SELECT xxx;"" queries.",
django/,214,If NULL is implied on columns without needing to be explicitly specified,
django/,217,"Does the backend support ""select for update"" queries with limit (and offset)?",
django/,220,Does the backend ignore null expressions in GREATEST and LEAST queries unless,
django/,221,every expression is null?,
django/,224,Can the backend clone databases for parallel test execution?,
django/,225,Defaults to False to allow third-party backends to opt-in.,
django/,228,Does the backend consider table names with different casing to,
django/,229,be equal?,
django/,232,Place FOR UPDATE right after FROM clause. Used on MSSQL.,
django/,235,Combinatorial flags,
django/,242,Does the database support SQL 2003 FILTER (WHERE ...) in aggregate,
django/,243,expressions?,
django/,246,Does the backend support indexing a TextField?,
django/,249,Does the backend support window expressions (expression OVER (...))?,
django/,254,Does the backend support CAST with precision?,
django/,257,How many second decimals does the database return when casting a value to,
django/,258,a type with time?,
django/,261,SQL to create a procedure for use by the Django test suite. The,
django/,262,functionality of the procedure isn't important.,
django/,266,Does the backend support keyword parameters for cursor.callproc()?,
django/,269,Convert CharField results from bytes to str in database functions.,
django/,272,What formats does the backend EXPLAIN syntax support?,
django/,275,Does DatabaseOperations.explain_query_prefix() raise ValueError if,
django/,276,unknown kwargs are passed to QuerySet.explain()?,
django/,279,Does the backend support the default parameter in lead() and lag()?,
django/,282,Does the backend support ignoring constraint or uniqueness errors during,
django/,283,INSERT?,
django/,286,Does this backend require casting the results of CASE expressions used,
django/,287,in UPDATE statements to ensure the expression has the correct type?,
django/,290,Does the backend support partial indexes (CREATE INDEX ... WHERE ...)?,
django/,294,Does the database allow more than one constraint or index on the same,
django/,295,field(s)?,
django/,298,Does the backend support boolean expressions in the SELECT clause?,
django/,11,The prefix to put on the default database name when creating,
django/,12,the test database.,
django/,35,Don't import django.core.management if it isn't needed.,
django/,50,"We could skip this call if keepdb is True, but we instead",
django/,51,give it the keepdb param. This is to handle the case,
django/,52,"where the test DB doesn't exist, in which case we need to",
django/,53,"create it, then just not destroy it. If we instead skip",
django/,54,"this, we will get an exception.",
django/,62,We report migrate messages at one level lower than that,
django/,63,requested. This ensures we don't get flooded with messages during,
django/,64,testing (unless you really ask to be flooded).,
django/,73,We then serialize the current state of the database into a string,
django/,74,and store it on the connection. This slightly horrific process is so people,
django/,75,who are testing on databases without transactions or who are using,
django/,76,a TransactionTestCase still get a clean database on every test run.,
django/,82,Ensure a connection for the side effect of initializing the test database.,
django/,100,Iteratively return every object for all models to serialize.,
django/,119,Serialize to a string,
django/,130,Load data in a transaction to handle forward references and cycles.,
django/,132,"Disable constraint checks, because some databases (MySQL) doesn't",
django/,133,support deferred checks.,
django/,137,"Manually check for any invalid keys that might have been added,",
django/,138,because constraint checks were disabled.,
django/,173,Create the test database and connect to it.,
django/,178,"if we want to keep the db, then no need to do any of the below,",
django/,179,just return and skip it all.,
django/,220,"We could skip this call if keepdb is True, but we instead",
django/,221,give it the keepdb param. See create_test_db for details.,
django/,228,"When this function is called, the test database has been created",
django/,229,already and its name has been copied to settings_dict['NAME'] so,
django/,230,we don't need to call _get_test_db_name.,
django/,262,if we want to preserve the database,
django/,263,skip the actual destroying piece.,
django/,267,Restore the original database name,
django/,276,Remove the test database to clean up after,
django/,277,ourselves. Connect to the previous database (not the test database),
django/,278,"to do so, because it's not allowed to delete a database while being",
django/,279,connected to it.,
django/,11,Backends may implement a check_field_type() method.,
django/,13,Ignore any related fields.,
django/,15,Ignore fields with unsupported features.,
django/,22,Ignore non-concrete fields.,
django/,52,Override the base class implementations with null,
django/,53,implementations. Anything that tries to actually,
django/,54,do something raises complain; anything that tries,
django/,55,to rollback or undo something raises ignore.,
django/,65,Classes instantiated in __init__().,
django/,147,Further error checking,
django/,155,Qualname can include <locals>,
django/,165,Serialize functools.partial() arguments,
django/,169,Add any imports needed by arguments,
django/,190,"When len(strings)==0, the empty iterable should be serialized as",
django/,191,"""()"", not ""(,)"" because (,) is invalid Python syntax.",
django/,216,"Nested operation, trailing comma is handled in upper OperationWriter._write()",
django/,223,Turn off default implicit flags (e.g. re.U) because regexes with the,
django/,224,same implicit and explicit flags aren't equal.,
django/,241,Serialize as a set literal except when value is empty because {},
django/,242,is an empty dict.,
django/,253,"When len(value)==0, the empty tuple should be serialized as ""()"",",
django/,254,"not ""(,)"" because (,) is invalid Python syntax.",
django/,282,Some of these are order-dependent.,
django/,318,The unwrapped value is returned as the first item of the arguments,
django/,319,tuple.,
django/,330,Anything that knows how to deconstruct itself.,
django/,37,Reverse accessors of foreign keys to proxy models are attached to their,
django/,38,concrete proxied model.,
django/,87,"Apps to include from main registry, usually unmigrated ones",
django/,94,hasattr would cache the property,
django/,99,hasattr would cache the property,
django/,101,Need to do this explicitly since unregister_model() doesn't clear,
django/,102,the cache automatically (#24513),
django/,116,"Get all relations to and from the old model before reloading,",
django/,117,as _meta.apps may change,
django/,123,Get all outgoing references from the model to be rendered,
django/,125,"Directly related models are the models pointed to by ForeignKeys,",
django/,126,"OneToOneFields, and ManyToManyFields.",
django/,135,For all direct related models recursively get all related models.,
django/,148,Include the model itself,
django/,154,hasattr would cache the property,
django/,159,hasattr would cache the property,
django/,166,Unregister all related models,
django/,172,Gather all models states of those models that will be rerendered.,
django/,173,This includes:,
django/,174,1. All related models of unmigrated apps,
django/,179,2. All related models of migrated apps,
django/,188,Render all models,
django/,230,"Not used, but required by AppConfig.__init__",
django/,235,"App-label and app-name are not the same thing, so technically passing",
django/,236,"in the label here is wrong. In practice, migrations don't care about",
django/,237,"the app name, but we need something unique, and the label works fine.",
django/,250,Any apps in self.real_apps should have all their models included,
django/,251,in the render. We don't use the original model instances as there,
django/,252,are some variables that refer to the Apps object.,
django/,253,FKs/M2Ms from real apps are also not included as they just,
django/,254,mess things up with partial states (due to lack of dependencies),
django/,260,Populate the app registry with a stub for each application.,
django/,265,"These locks get in the way of copying as implemented in clone(),",
django/,266,which is called whenever Django duplicates a StateApps before,
django/,267,updating it.,
django/,273,There shouldn't be any operations pending at this point.,
django/,282,"Avoid clearing each model's cache for each change. Instead, clear",
django/,283,all caches when we're finished updating the model instances.,
django/,293,"We keep trying to render the models in a loop, ignoring invalid",
django/,294,"base errors, until the size of the unrendered models doesn't",
django/,295,"decrease by at least one, meaning there's a base dependency loop/",
django/,296,missing base.,
django/,299,Prevent that all model caches are expired for each render.,
django/,323,Set the pointer to the correct app registry.,
django/,326,"No need to actually clone them, they'll never change",
django/,368,Sanity-check that fields is NOT a dict. It must be ordered.,
django/,372,Sanity-check that fields are NOT already bound to a model.,
django/,377,Sanity-check that relation fields are NOT referring to a model class.,
django/,388,Sanity-check that indexes have their name set.,
django/,403,Deconstruct the fields,
django/,430,Extract the options,
django/,433,Ignore some special options,
django/,453,"If we're ignoring relationships, remove all field-listing model",
django/,454,"options (that option basically just means ""make a stub model"")",
django/,459,"Private fields are ignored, so remove options that refer to them.",
django/,472,We can't rely on __mro__ directly because we only want to flatten,
django/,473,abstract models and not the whole tree. However by recursing on,
django/,474,"__bases__ we may end up with duplicates and ordering issues, we",
django/,475,therefore discard any duplicates and reorder the bases according,
django/,476,to their index in the MRO.,
django/,479,Make our record,
django/,488,Ensure at least one base inherits from models.Model,
django/,497,Skip overridden managers.,
django/,500,Copy managers usable in migrations.,
django/,504,Shim custom managers used as default and base managers.,
django/,515,Ignore a shimmed default manager called objects if it's the only one.,
django/,519,Construct the new ModelState,
django/,531,Sort all managers by their creation counter,
django/,548,"Since options are shallow-copied here, operations such as",
django/,549,AddIndex must replace their option (e.g 'indexes') rather,
django/,550,than mutating it.,
django/,558,"First, make a Meta object",
django/,561,"Then, work out our bases",
django/,569,"Turn fields into a dict for the body, add other bits",
django/,574,Restore managers,
django/,576,"Then, make a Model object (apps.register_model is called in __new__)",
django/,23,"Operations to apply during this migration, in order.",
django/,26,Other migrations that should be run before this migration.,
django/,27,"Should be a list of (app, migration_name).",
django/,30,Other migrations that should be run after this one (i.e. have,
django/,31,this migration added to their dependencies). Useful to make third-party,
django/,32,"apps' migrations run after your AUTH_USER replacement, for example.",
django/,35,Migration names in this app that this migration replaces. If this is,
django/,36,"non-empty, this migration will only be applied if all these migrations",
django/,37,are not applied.,
django/,40,Is this an initial migration? Initial migrations are skipped on,
django/,41,"--fake-initial if the table or fields already exist. If None, check if",
django/,42,the migration has any dependencies to determine if there are dependencies,
django/,43,"to tell if db introspection needs to be done. If True, always perform",
django/,44,"introspection. If False, never perform introspection.",
django/,47,Whether to wrap the whole migration in a transaction. Only has an effect,
django/,48,on database backends which support transactional DDL.,
django/,54,Copy dependencies & other attrs as we might mutate them at runtime,
django/,100,"If this operation cannot be represented as SQL, place a comment",
django/,101,there instead,
django/,112,Save the state before the operation has run,
django/,115,Run the operation,
django/,118,Force a transaction on a non-transactional-DDL backend or an,
django/,119,atomic operation inside a non-atomic migration.,
django/,123,Normal behaviour,
django/,140,Construct all the intermediate states we need for a reverse migration,
django/,143,Phase 1,
django/,145,"If it's irreversible, error out",
django/,148,Preserve new state from previous run to not tamper the same state,
django/,149,over all operations,
django/,155,Phase 2,
django/,169,Force a transaction on a non-transactional-DDL backend or an,
django/,170,atomic operation inside a non-atomic migration.,
django/,174,Normal behaviour,
django/,61,"If the table's there, that's fine - we've never changed its schema",
django/,62,in the codebase.,
django/,65,Make the table,
django/,80,"If the django_migrations table doesn't exist, then no migrations",
django/,81,are applied.,
django/,29,Internal tracking variable for test assertions about # of loops,
django/,44,Should we reduce on the right or on the left.,
django/,45,Compare it to each operation after it,
django/,54,Perform a left reduction if all of the in-between,
django/,55,operations can optimize through other.,
django/,59,Otherwise keep trying.,
django/,65,Can't perform a right reduction.,
django/,128,Cast list of replaced keys to set to speed up lookup later.,
django/,144,We don't want to create dependencies between the replaced,
django/,145,node and the replacement node as this would lead to,
django/,146,self-referencing on the replacement node at a later iteration.,
django/,152,"Again, to avoid self-referencing.",
django/,180,"We're only interested in the latest replaced node, so filter out",
django/,181,replaced nodes that are parents of other replaced nodes.,
django/,190,NOTE: There is no need to remap parent dependencies as we can,
django/,191,assume the replaced nodes already have the correct ancestry.,
django/,260,Algo from GvR:,
django/,261,https://neopythonic.blogspot.com/2009/01/detecting-cycles-in-directed-graph.html,
django/,269,Use child.key instead of child to speed up the frequent,
django/,270,hashing.,
django/,8,SettingsReference imported for backwards compatibility in Django 2.2.,
django/,9,NOQA,
django/,78,"See if this operation is in django.db.migrations. If it is,",
django/,79,"We can just use the fact we already have that imported,",
django/,80,"otherwise, we need to add an import for the operation class.",
django/,95,Only iterate over remaining arguments,
django/,97,Don't sort to maintain signature order,
django/,138,Deconstruct operations,
django/,146,Format dependencies and write out swappable dependencies right,
django/,156,"Format imports nicely, swapping imports of functions from migration files",
django/,157,for comments,
django/,165,"django.db.migrations is always used, but models import may not be.",
django/,166,"If models import exists, merge it with migrations import.",
django/,173,Sort imports by the package / module to be imported (the part after,
django/,174,"""from"" in ""from ... import ..."" or after ""import"" in ""import ..."").",
django/,184,"If there's a replaces, make a string for it",
django/,187,Hinting that goes into comment,
django/,212,See if we can import the migrations module directly,
django/,223,"Alright, see if it's a direct submodule of the app",
django/,229,In case of using MIGRATION_MODULES setting and the custom package,
django/,230,"doesn't exist, create one, starting from an existing package",
django/,74,Get the migrations module directory,
django/,83,"I hate doing this, but I don't want to squash other import errors.",
django/,84,Might be better to try a directory check directly.,
django/,91,Module is not a package (e.g. migrations.py).,
django/,95,Force a reload if it's already loaded (tests need this),
django/,106,Load migrations,
django/,136,Do the search,
django/,153,"Special-case __first__, which means ""the first migration"" for",
django/,154,"migrated apps, and is ignored for unmigrated apps. It allows",
django/,155,makemigrations to declare dependencies on apps before they even have,
django/,156,migrations.,
django/,158,Ignore __first__ references to the same app (#22325),
django/,161,"This app isn't migrated, but something depends on it.",
django/,162,"The models will get auto-added into the state, though",
django/,163,so we're fine.,
django/,169,"""__latest__""",
django/,184,Ignore __first__ references to the same app.,
django/,190,Skip internal dependencies,
django/,207,Load disk data,
django/,209,Load database data,
django/,215,"To start, populate the migration graph with nodes for ALL migrations",
django/,216,and their dependencies. Also make note of replacing migrations at this step.,
django/,221,Replacing migrations.,
django/,225,Internal (same app) dependencies.,
django/,227,Add external dependencies now that the internal ones have been resolved.,
django/,230,Carry out replacements where possible and if enabled.,
django/,233,Get applied status of each of this migration's replacement,
django/,234,targets.,
django/,236,The replacing migration is only marked as applied if all of,
django/,237,its replacement targets are.,
django/,242,A replacing migration can be used if either all or none of,
django/,243,its replacement targets have been applied.,
django/,247,This replacing migration cannot be used because it is,
django/,248,partially applied. Remove it from the graph and remap,
django/,249,dependencies to it (#25945).,
django/,251,Ensure the graph is consistent.,
django/,255,Check if the missing node could have been replaced by any squash,
django/,256,migration but wasn't because the squash migration was partially,
django/,257,applied before. In that case raise a more understandable exception,
django/,258,(#23556).,
django/,259,Get reverse replacements.,
django/,264,Try to reraise exception with more detail.,
django/,290,"If the migration is unknown, skip it.",
django/,295,Skip unapplied squashed migrations that have all of their,
django/,296,`replaces` applied.,
django/,27,"If it was specified on the command line, definitely true",
django/,30,"Otherwise, we look to see if it has a migrations module",
django/,31,"without any Python files in it, apart from __init__.py.",
django/,32,Apps from the new app template will have these; the Python,
django/,33,file check will ensure we skip South ones.,
django/,36,It's a fake app.,
django/,40,It's an application with migrations disabled.,
django/,47,getattr() needed on PY36 and older (replace with attribute access).,
django/,58,None means quit,
django/,63,None means quit,
django/,80,None means quit,
django/,230,"We can't ask the user, so act like the user aborted.",
django/,234,"We can't ask the user, so set as not provided.",
django/,238,"We can't ask the user, so act like the user aborted.",
django/,32,"If the target is (app_label, None), that means unmigrate everything",
django/,40,"If the migration is already applied, do backwards mode,",
django/,41,otherwise do forwards mode.,
django/,43,Don't migrate backwards all the way to the target node (that,
django/,44,may roll back dependencies in other apps that don't need to,
django/,45,be rolled back); instead roll back through target's immediate,
django/,46,"child(ren) in the same app, and no further.",
django/,71,Create the forwards plan Django would follow on an empty database,
django/,89,The django_migrations table must be present to record applied,
django/,90,migrations.,
django/,95,Create the forwards plan Django would follow on an empty database,
django/,103,The resulting state should include applied migrations.,
django/,106,This should only happen if there's a mixed plan,
django/,115,The resulting state should still include applied migrations.,
django/,119,"No need to check for `elif all_backwards` here, as that condition",
django/,120,would always evaluate to true.,
django/,135,We remove every migration that we applied from these sets so,
django/,136,that we can bail out once the last migration has been applied,
django/,137,and don't always run until the very end of the migration,
django/,138,process.,
django/,144,Render all -- performance critical,
django/,163,Holds all migration states prior to the migrations being unapplied,
django/,174,We remove every migration that we applied from this set so,
django/,175,that we can bail out once the last migration has been applied,
django/,176,and don't always run until the very end of the migration,
django/,177,process.,
django/,181,Render all -- performance critical,
django/,182,The state before this migration,
django/,184,"The old state keeps as-is, we continue with the new state",
django/,188,Only mutate the state if the migration is actually applied,
django/,189,to make sure the resulting state doesn't include changes,
django/,190,from unrelated migrations.,
django/,199,Generate the post migration state by starting from the state before,
django/,200,the last migration is unapplied and mutating it to include all the,
django/,201,remaining applied migrations.,
django/,220,Test to see if this is an already-applied initial migration,
django/,225,"Alright, do it normally",
django/,232,Report progress,
django/,238,"For replacement migrations, record individual statuses",
django/,252,"For replacement migrations, record individual statuses",
django/,258,Report progress,
django/,300,Bail if the migration isn't the first one in its app,
django/,304,Bail if it's NOT an initial migration,
django/,319,Make sure all create model and add field operations are done,
django/,324,We have to fetch the model to test with from the,
django/,325,"main app cache, as it's not a direct dependency.",
django/,338,We have to fetch the model to test with from the,
django/,339,"main app cache, as it's not a direct dependency.",
django/,347,Handle implicit many-to-many tables created by AddField.,
django/,370,"If we get this far and we found at least one CreateModel or AddField migration,",
django/,371,the migration is considered implicitly applied.,
django/,1,NOQA,
django/,2,NOQA,
django/,69,"If this is a type that implements 'deconstruct' as an instance method,",
django/,70,avoid treating this as being deconstructible itself - see #22951,
django/,75,we have a field which also returns a name,
django/,118,The first phase is generating all the operations for each app,
django/,119,and gathering them into a big per-app list.,
django/,120,"Then go through that list, order it, and split into migrations to",
django/,121,resolve dependencies caused by M2Ms and FKs.,
django/,126,"Prepare some old/new state and model lists, separating",
django/,127,proxy models and ignoring unmigrated apps.,
django/,159,Renames have to come first,
django/,162,Prepare lists of fields and generate through model map,
django/,166,Generate non-rename model operations,
django/,174,Create the altered indexes and store them in self.altered_indexes.,
django/,175,This avoids the same computation in generate_removed_indexes(),
django/,176,and generate_added_indexes().,
django/,179,Generate index removal operations before field is removed,
django/,182,Generate field operations,
django/,265,"On every iteration, we step through all the apps and see if there",
django/,266,is a completed set of operations.,
django/,267,If we find that a subset of the operations are complete we can,
django/,268,"try to chop it off from the rest and continue, but we only",
django/,269,do this if we've already been through the list once before,
django/,270,without any chopping and nothing has changed.,
django/,278,Temporarily resolve the swappable dependency to,
django/,279,prevent circular references. While keeping the,
django/,280,"dependency checks on the resolved model, add the",
django/,281,swappable dependencies.,
django/,285,External app dependency. See if it's not yet,
django/,286,satisfied.,
django/,299,"If we can't find the other app, we add a first/last dependency,",
django/,300,but only if we've already been through once and checked everything,
django/,302,"If the app already exists, we add a dependency on the last migration,",
django/,303,as we don't know which migration contains the target field.,
django/,304,"If it's not yet migrated or has no migrations, we use __first__",
django/,317,"Make a migration! Well, only if there's stuff to put in it",
django/,343,construct a dependency graph for intra-app dependencies,
django/,347,Resolve intra-app dependencies to handle circular,
django/,348,references involving a swappable model.,
django/,355,we use a stable sort for deterministic tests & general behavior,
django/,359,Add in internal dependencies among the migrations,
django/,364,De-dupe dependencies,
django/,369,Optimize migrations,
django/,379,Created model,
django/,385,Created field,
django/,399,Removed field,
django/,406,Removed model,
django/,412,Field being altered,
django/,419,order_with_respect_to being unset for a field,
django/,426,Field is removed and part of an index/unique_together,
django/,433,Unknown dependency. Raise an error.,
django/,438,"Dependencies are (app_label, model_name, field_name, create/delete as True/False)",
django/,531,Gather related fields,
django/,541,through will be none on M2Ms on swapped-out models;,
django/,542,"we can treat lack of through as auto_created=True, though.",
django/,551,Are there indexes/unique|index_together to defer?,
django/,557,Depend on the deletion of any possible proxy version of us,
django/,561,Depend on all bases,
django/,566,Depend on the other end of the primary key if it's a relation,
django/,574,Generate creation operation,
django/,588,Don't add operations which modify the database for unmanaged models,
django/,592,Generate operations for each related field,
django/,595,Depend on our own model being created,
django/,597,Make operation,
django/,607,Generate other opns,
django/,662,Fix relationships if the model changed from a proxy model to a,
django/,663,concrete model.,
django/,687,Depend on the deletion of any possible non-proxy version of us,
django/,691,Depend on all bases,
django/,696,Generate creation operation,
django/,706,Depend on the deletion of any possible non-proxy version of us,
django/,727,Gather related fields,
django/,733,through will be none on M2Ms on swapped-out models;,
django/,734,"we can treat lack of through as auto_created=True, though.",
django/,743,Generate option removal first,
django/,762,Then remove each related field,
django/,771,"Finally, remove the model.",
django/,772,This depends on both the removal/alteration of all incoming fields,
django/,773,"and the removal of all its own related fields, and if it's",
django/,774,a through model the field that references it.,
django/,786,We're referenced in another field's through=,
django/,790,"Finally, make the operation, deduping any dependencies",
django/,819,Scan to see if this is actually a rename!,
django/,832,Was the field renamed and db_column equal to the,
django/,833,old field's column added?,
django/,857,Fields that are foreignkeys/m2ms depend on stuff,
django/,861,You can't just add NOT NULL fields with no default or fields,
django/,862,which don't allow empty strings as default.,
django/,898,We might need to depend on the removal of an,
django/,899,order_with_respect_to or index/unique_together operation;,
django/,900,this is safely ignored if there isn't one,
django/,913,Did the field change?,
django/,919,Implement any model renames on relations; these are handled by RenameModel,
django/,920,so we need to exclude them from the comparison,
django/,928,Handle ForeignKey which can only have a single to_field.,
django/,933,Repoint both model and field name because to_field,
django/,934,inclusion in ForeignKey.deconstruct() is based on,
django/,935,both.,
django/,938,Handle ForeignObjects which can have multiple from_fields/to_fields.,
django/,964,Either both fields are m2m or neither is,
django/,986,We cannot alter between m2m and concrete fields,
django/,1071,Account for FKs to swappable models,
django/,1096,We run the old version through the field renames to account for those,
django/,1158,unmanaged converted to managed,
django/,1160,managed converted to unmanaged,
django/,1192,Make sure it comes second if we're adding,
django/,1193,(removal dependency is part of RemoveField),
django/,1202,Actually generate the operation,
django/,1237,Find the app label's current leaf node,
django/,1243,Do they want an initial migration for this app?,
django/,1245,They don't.,
django/,1250,Work out the next number in the sequence,
django/,1255,Name each migration,
django/,1269,Now fix dependencies,
django/,1282,Gather other app dependencies in a first pass,
django/,1289,Keep resolving till there's no change,
django/,1294,Remove all migrations that aren't needed,
django/,41,Check if this operation locally references the field.,
django/,47,Check if this operation remotely references the field.,
django/,86,"If preserve default is off, don't use the default for future state",
django/,93,Delay rendering of relationships if it's not a relational field,
django/,165,Delay rendering of relationships if it's not a relational field,
django/,225,TODO: investigate if old relational fields must be reloaded or if it's,
django/,226,sufficient if the new field is (#27737).,
django/,227,Delay rendering of relationships if it's not a relational field and,
django/,228,not referenced by a foreign key.,
django/,300,Rename the field,
django/,307,Fix from_fields to refer to the new field.,
django/,318,Fix index/unique_together to refer to the new field,
django/,326,Fix to_fields to refer to the new field.,
django/,384,Skip `FieldOperation.reduce` as we want to run `references_field`,
django/,385,against self.new_name.,
django/,20,If this migration can be run in reverse.,
django/,21,"Some operations are impossible to reverse, like deleting data.",
django/,24,Can this migration be represented as SQL? (things like RunPython cannot),
django/,27,Should this operation be forced as atomic even on backends with no,
django/,28,"DDL transaction support (i.e., does it have no DDL, like RunPython)",
django/,31,Should this operation be considered safe to elide and optimize across?,
django/,37,We capture the arguments to make returning them trivial,
django/,60,Unspecified to_field(s).,
django/,62,Reference to primary key.,
django/,64,Reference to field.,
django/,73,Unspecified through_fields.,
django/,75,Reference to field.,
django/,37,We calculate state separately in here since our state functions aren't useful,
django/,45,We calculate state separately in here since our state functions aren't useful,
django/,51,to_state now has the states of all the database_operations applied,
django/,52,which is the from_state for the backwards migration of the last,
django/,53,operation.,
django/,142,Forwards code,
django/,146,Reverse code,
django/,177,"RunPython objects have no state effect. To add some, combine this",
django/,178,with SeparateDatabaseAndState.,
django/,182,RunPython has access to all models. Ensure that all models are,
django/,183,reloaded in case any are delayed.,
django/,186,We now execute the Python code in a context that contains a 'models',
django/,187,"object, representing the versioned models as an app registry.",
django/,188,"We could try to override the global cache, but then people will still",
django/,189,"use direct imports, so we go with a documentation approach instead.",
django/,52,"Sanity-check that there are no duplicated field names, bases, or",
django/,53,manager names,
django/,107,Check we didn't inherit from the model,
django/,114,Check we have no FKs/M2Ms with it,
django/,269,The deleted model could be referencing the specified model through,
django/,270,related fields.,
django/,305,Add a new model.,
django/,309,Repoint all fields pointing to the old model to the new one.,
django/,325,Reload models related to old model before removing the old model.,
django/,327,Remove the old model.,
django/,335,Move the main table,
django/,341,Alter the fields pointing to us,
django/,360,Rename M2M fields whose name is based on this model's name.,
django/,363,Skip self-referential fields as these are renamed above.,
django/,366,Rename the M2M table that's based on this model's name.,
django/,374,Rename the column in the M2M table that's based on this,
django/,375,model's name.,
django/,409,Skip `ModelOperation.reduce` as we want to run `references_model`,
django/,410,against self.new_name.,
django/,455,Rename M2M fields whose name is based on this model's db_table,
django/,581,Remove a field if we need to,
django/,584,Add a field if we need to (altering the column is untouched as,
django/,585,it's likely a rename),
django/,618,Model options we want to compare and preserve in an AlterModelOptions op,
django/,37,Arithmetic connectors,
django/,43,The following is a quoted % operator - it is quoted because it can be,
django/,44,used in strings that also have parameter substitution.,
django/,47,Bitwise operators - note that these are generated by .bitand(),
django/,48,"and .bitor(), the '&' and '|' are reserved for boolean operator",
django/,49,usage.,
django/,58,everything must be resolvable to an expression,
django/,68,,
django/,69,OPERATORS,
django/,70,,
django/,155,aggregate specific fields,
django/,158,Can the expression be used in a WHERE clause?,
django/,160,Can the expression can be used as a source expression in Window?,
django/,466,order of precedence,
django/,502,order of precedence,
django/,569,FIXME: Rename possibly_multivalued to multivalued and fix detection,
django/,570,for non-multivalued JOINs (e.g. foreign key fields). This should take,
django/,571,into account only many-to-many and one-to-many relationships.,
django/,597,The number of arguments the function accepts.,
django/,647,Use the first supplied value in this order: the parameter to this,
django/,648,"method, a value supplied in __init__()'s **extra (the value in",
django/,649,"`data`), or the value defined on the class.",
django/,695,cx_Oracle does not always convert None to the appropriate,
django/,696,"NULL type (like in case expressions using numbers), so we",
django/,697,use a literal SQL NULL,
django/,735,Resolve parents fields used in raw SQL.,
django/,819,"The sub-expression `source` has already been resolved, as this is",
django/,820,just a reference to the name of `source`.,
django/,875,"This isn't a complete conditional expression, must be used in Case().",
django/,905,We're only interested in the fields of the result expressions.,
django/,930,This is not a complete expression and cannot be used in GROUP BY.,
django/,1073,"As a performance optimization, remove ordering since EXISTS doesn't",
django/,1074,"care about it, just whether or not a row matches.",
django/,1091,Wrap EXISTS() with a CASE WHEN expression if a database backend,
django/,1092,(e.g. Oracle) doesn't support boolean expression in the SELECT list.,
django/,1150,Oracle doesn't allow ORDER BY EXISTS() unless it's wrapped in,
django/,1151,a CASE WHEN.,
django/,1184,Although the main expression may either be an aggregate or an,
django/,1185,"expression with an aggregate function, the GROUP BY that will",
django/,1186,be introduced in the query as a result is not desired.,
django/,5,Separator used to split filter strings apart.,
django/,17,"This partial takes a single optional argument named ""sender"".",
django/,51,Normalize everything to tuples,
django/,54,"If the value of option_together isn't valid, return it",
django/,55,verbatim; this will be picked up by the check framework later.,
django/,107,For any class that is a proxy (including automatically created,
django/,108,"classes for deferred object loading), proxy_for_model tells us",
django/,109,which class this model is proxying. Note that proxy_for_model,
django/,110,"can create a chain of proxy models. For non-proxy models, the",
django/,111,variable is always None.,
django/,113,"For any non-abstract class, the concrete class is the model",
django/,114,"in the end of the proxy_for_model chain. In particular, for",
django/,115,"concrete models, the concrete_model is always the class itself.",
django/,121,List of all lookups defined in ForeignKey 'limit_choices_to' options,
django/,122,from *other* models. Needed for some admin checks. Internal use only.,
django/,125,"A custom app registry to use, if you're making a separate model set.",
django/,140,Don't go through get_app_config to avoid triggering imports.,
django/,153,"First, construct the default values for these options.",
django/,158,"Store the original user-defined values for each option,",
django/,159,for use when serializing the model definition,
django/,162,"Next, apply any overridden values from 'class Meta'.",
django/,166,Ignore any private attributes that Django doesn't care about.,
django/,167,NOTE: We can't modify a dictionary's contents while looping,
django/,168,"over it, so we loop over the *original* dictionary instead.",
django/,181,App label/class name interpolation for names of constraints and,
django/,182,indexes.,
django/,188,verbose_name_plural is a special case because it uses a 's',
django/,189,by default.,
django/,193,order_with_respect_and ordering are mutually exclusive.,
django/,196,Any leftover attributes must be invalid.,
django/,203,"If the db_table wasn't provided, use the app_label + model_name.",
django/,222,"The app registry will not be ready at this point, so we cannot",
django/,223,use get_field().,
django/,241,Promote the first parent link in lieu of adding yet another,
django/,242,field.,
django/,244,Look for a local field with the same name as the,
django/,245,first parent link. If a local field has already been,
django/,246,"created, use it instead of promoting the parent",
django/,261,"Insert the given field in the order in which it was created, using",
django/,262,"the ""creation_counter"" attribute of the field.",
django/,263,Move many-to-many related fields from self.fields into,
django/,264,self.many_to_many.,
django/,273,"If the field being added is a relation to another known field,",
django/,274,expire the cache on this field and the forward cache on the field,
django/,275,"being referenced, because there will be new relationships in the",
django/,276,"cache. Otherwise, expire the cache of references *to* this field.",
django/,277,The mechanism for getting at the related model is slightly odd -,
django/,278,"ideally, we'd just ask for field.related_model. However, related_model",
django/,279,"is a cached property, and all the models haven't been loaded yet, so",
django/,280,we need to make sure we don't cache a string reference.,
django/,347,setting not in the format app_label.model_name,
django/,348,raising ImproperlyConfigured here causes problems with,
django/,349,test cleanup code - instead it is raised in get_user_model,
django/,350,or as part of validation.,
django/,385,Get the first parent's base_manager_name if there's one.,
django/,413,Get the first parent's default_manager_name if there's one.,
django/,443,"For legacy reasons, the fields property should only contain forward",
django/,444,fields that are not private or with a m2m cardinality. Therefore we,
django/,445,pass these three filters as filters to the generator.,
django/,446,The third lambda is a longwinded way of checking f.related_model - we don't,
django/,447,"use that property directly because related_model is a cached property,",
django/,448,and all the models may not have been loaded yet; we don't want to cache,
django/,449,the string reference to the related_model.,
django/,530,"Due to the way Django's internals work, get_field() should also",
django/,531,be able to fetch a field by attname. In the case of a concrete,
django/,532,"field with relation, includes the *_id name too",
django/,545,"Due to the way Django's internals work, get_field() should also",
django/,546,be able to fetch a field by attname. In the case of a concrete,
django/,547,"field with relation, includes the *_id name too",
django/,559,In order to avoid premature loading of the relation tree,
django/,560,(expensive) we prefer checking if the field is a forward field.,
django/,563,"If the app registry is not ready, reverse fields are",
django/,564,"unavailable, therefore we throw a FieldDoesNotExist exception.",
django/,573,Retrieve field instance by name from cached or just-computed,
django/,574,field map.,
django/,619,Tries to get a link field from the immediate parent,
django/,622,"In case of a proxied model, the first link",
django/,623,of the chain to the ancestor is that parent,
django/,624,links,
django/,635,Skip the chain of proxy to the concrete proxied model.,
django/,666,Get a reversed base chain including both the current and parent,
django/,667,models.,
django/,671,Construct a list of the PathInfos between models in chain.,
django/,691,"Abstract model's fields are copied to child models, hence we will",
django/,692,see the fields from the child models.,
django/,705,Set the relation_tree using the internal __dict__. In this way,
django/,706,"we avoid calling the cached property. In attribute lookup,",
django/,707,__dict__ takes precedence over a data descriptor (such as,
django/,708,@cached_property). This means that the _meta._relation_tree is,
django/,709,only called if related_objects is not in __dict__.,
django/,712,"It seems it is possible that self is not in all_models, so guard",
django/,713,against that with default for get().,
django/,721,"This method is usually called by apps.cache_clear(), when the",
django/,722,"registry is finalized, or when a new field is added.",
django/,762,This helper function is used to allow recursion in ``get_fields()``,
django/,763,implementation and to provide a fast way for Django's internals to,
django/,764,access specific subsets of fields.,
django/,766,We must keep track of which models we have already seen. Otherwise we,
django/,767,could include the same field multiple times from different models.,
django/,773,Creates a cache key composed of all arguments,
django/,777,In order to avoid list manipulation. Always return a shallow copy,
django/,778,of the results.,
django/,784,"Recursively call _get_fields() on each parent, with the same",
django/,785,options provided in this call.,
django/,788,In diamond inheritance it is possible that we see the same,
django/,789,"model from two different routes. In that case, avoid adding",
django/,790,fields from the same parent again.,
django/,802,Tree is computed once and cached until the app cache is expired.,
django/,803,It is composed of a list of fields pointing to the current model,
django/,804,from other models.,
django/,807,If hidden fields should be included or the relation is not,
django/,808,"intentionally hidden, add to the fields dict.",
django/,815,"Private fields are recopied to each child model, and they get a",
django/,816,different model as field.model in each child. Hence we have to,
django/,817,add the private fields separately from the topmost call. If we,
django/,818,"did this recursively similar to local_fields, we would get field",
django/,819,instances with field.model != self.model.,
django/,823,In order to avoid list manipulation. Always,
django/,824,return a shallow copy of the results,
django/,827,Store result into cache for later access,
django/,68,Only call contribute_to_class() if it's bound.,
django/,77,Also ensure initialization is only performed for subclasses of Model,
django/,78,(excluding Model class itself).,
django/,83,Create the class.,
django/,90,Pass all attrs without a (Django-specific) contribute_to_class(),
django/,91,method to type.__new__() so that they're properly initialized,
django/,92,(i.e. __set_name__()).,
django/,107,Look for an application configuration to attach the model to.,
django/,143,Non-abstract child classes inherit some attributes from their,
django/,144,non-abstract parent (unless an ABC comes before it in the,
django/,145,method resolution order).,
django/,153,"If the model is a proxy, ensure that the base class",
django/,154,hasn't been swapped out.,
django/,158,Add remaining attributes (those with a contribute_to_class() method),
django/,159,to the class.,
django/,163,All the fields of any type declared on this model,
django/,171,Basic setup for proxy models.,
django/,194,Collect the parent links for multi-table inheritance.,
django/,197,Conceptually equivalent to `if base is Model`.,
django/,200,Skip concrete parent classes.,
django/,203,Locate OneToOneField instances.,
django/,209,Track fields inherited from base models.,
django/,211,Do the appropriate setup for any model parents.,
django/,214,"Things without _meta aren't functional models, so they're",
django/,215,uninteresting parents.,
django/,221,Check for clashes between locally declared fields and those,
django/,222,on the base classes.,
django/,236,Concrete classes...,
django/,262,Only add the ptr field if it's not already present;,
django/,263,e.g. migrations will already have it specified,
django/,272,Add fields from abstract base class if it wasn't overridden.,
django/,279,Replace parent links defined on this base by the new,
django/,280,field. It will be appropriately resolved if required.,
django/,286,Pass any non-abstract parent classes onto child.,
django/,289,Inherit private fields (like GenericForeignKey) from the parent,
django/,290,class,
django/,308,Copy indexes so that index names are unique when models extend an,
django/,309,abstract model.,
django/,313,Abstract base models can't be instantiated and don't appear in,
django/,314,the list of models for an app. We do the final setup for them a,
django/,315,little differently from normal models.,
django/,339,Defer creating accessors on the foreign class until it has been,
django/,340,"created and registered. If remote_field is None, we're ordering",
django/,341,with respect to a GenericForeignKey and don't know what the,
django/,342,foreign class is - we'll add those accessors later in,
django/,343,contribute_to_class().,
django/,349,Give the class a docstring -- its definition.,
django/,367,Set the name of _meta.indexes. This can't be done in,
django/,368,Options.contribute_to_class() because fields haven't been added to,
django/,369,the model at that point.,
django/,396,"If true, uniqueness validation checks will consider this a new, unsaved",
django/,397,object. Necessary for correct validation of new instances of objects with,
django/,398,explicit (non-auto) PKs. This impacts validation only; it has no effect,
django/,399,on the actual save.,
django/,407,Alias some things as locals to avoid repeat global lookups,
django/,415,Set up the storage for instance state,
django/,418,"There is a rather weird disparity here; if kwargs, it's set, then args",
django/,419,overrides it. It should be one or the other; don't duplicate the work,
django/,420,The reason for the kwargs check is that standard iterator passes in by,
django/,421,"args, and instantiation for iteration is 33% faster.",
django/,423,"Daft, but matches old exception sans the err msg.",
django/,428,The ordering of the zip calls matter - zip throws StopIteration,
django/,429,"when an iter throws it. So if the first iter throws it, the second",
django/,430,"is *not* consumed. We rely on this, so don't change the order",
django/,431,without changing the logic.,
django/,437,"Slower, kwargs-ready version.",
django/,445,Now we're left with the unprocessed fields that *must* come from,
django/,446,"keywords, or default.",
django/,450,Virtual field,
django/,456,Assume object instance was passed in.,
django/,461,Object instance wasn't passed in -- must be an ID.,
django/,469,This is done with an exception rather than the,
django/,470,default argument on pop because we don't want,
django/,471,"get_default() to be evaluated, and then not used.",
django/,472,Refs #12057.,
django/,478,"If we are passed a related instance, set it using the",
django/,479,"field.name instead of field.attname (e.g. ""user"" instead of",
django/,480,"""user_id"") so that the object gets properly cached (and type",
django/,481,checked) by the RelatedObjectDescriptor.,
django/,492,Any remaining kwargs must correspond to properties or,
django/,493,virtual fields.,
django/,621,"Use provided fields, if not set then reload all non-deferred fields.",
django/,635,This field wasn't refreshed - skip ahead.,
django/,638,Clear cached foreign keys.,
django/,642,Clear cached relations.,
django/,676,Ensure that a model instance without a PK hasn't been assigned to,
django/,677,a ForeignKey or OneToOneField on this model. If the field is,
django/,678,"nullable, allowing the save() would result in silent data loss.",
django/,680,"If the related field isn't cached, then an instance hasn't",
django/,681,been assigned and there's no need to worry about this check.,
django/,686,A pk may have been assigned manually to a model instance not,
django/,687,saved to the database (or auto-generated in a case like,
django/,688,"UUIDField), but we allow the save to proceed and rely on the",
django/,689,database to raise an IntegrityError if applicable. If,
django/,690,"constraints aren't supported by the database, there's the",
django/,691,unavoidable risk of data corruption.,
django/,693,Remove the object from a related instance cache.,
django/,701,Use pk from related object if it has been saved after,
django/,702,an assignment.,
django/,704,"If the relationship's pk/to_field was changed, clear the",
django/,705,cached relationship.,
django/,715,"If update_fields is empty, skip the save. We do also check for",
django/,716,no-op saves later on for inheritance cases. This bailout is,
django/,717,still needed for skipping signal sending.,
django/,738,"If saving to the same database, and this model is deferred, then",
django/,739,"automatically do an ""update_fields"" save on the loaded fields.",
django/,768,"Skip proxies, but keep the origin as the proxy model.",
django/,777,A transaction isn't needed if one query is issued.,
django/,790,Store the database on which the object was saved,
django/,792,"Once saved, this is no longer a to-be-added instance.",
django/,795,Signal that the save is complete,
django/,809,Make sure the link fields are synced between parent and self.,
django/,820,Set the parent's PK value to self.,
django/,823,Since we didn't have an instance of the parent handy set,
django/,824,"attname directly, bypassing the descriptor. Invalidate",
django/,825,"the related object cache, in case it's been accidentally",
django/,826,populated. A fresh instance will be re-built from the,
django/,827,database if necessary.,
django/,853,Skip an UPDATE when adding an instance and primary key has a default.,
django/,862,"If possible, try an UPDATE. If that doesn't update anything, do an INSERT.",
django/,876,If this is a model with an order_with_respect_to,
django/,877,autopopulate the _order field,
django/,904,We can end up here when saving a model in inheritance chain where,
django/,905,update_fields doesn't target any field in current model. In that,
django/,906,case we just say the update succeeded. Another case ending up here,
django/,907,is a model with just PK - in that case check that the PK still,
django/,908,exists.,
django/,913,It may happen that the object is deleted from the DB right after,
django/,914,"this check, causing the subsequent UPDATE to return zero matching",
django/,915,rows. The same result can occur in some rare cases when the,
django/,916,database returns zero despite the UPDATE being executed,
django/,917,successfully (a row is matched and updated). In order to,
django/,918,"distinguish these two cases, the object's existence in the",
django/,919,database is again checked for if the UPDATE query returns 0.,
django/,950,force_str() to coerce lazy strings.,
django/,1039,Add the check if the field isn't excluded.,
django/,1047,These are checks for the unique_for_<date/year/month>.,
django/,1050,Gather a list of checks for fields declared as unique and add them to,
django/,1051,the list of checks.,
django/,1076,Try to look up an existing object with the same values as this,
django/,1077,object's values for all the unique field.,
django/,1083,TODO: Handle multiple backends with different feature flags.,
django/,1086,"no value, skip the lookup",
django/,1089,no need to check for unique primary key when editing,
django/,1093,"some fields were skipped, no reason to do the check",
django/,1099,Exclude the current object from the query if we are editing an,
django/,1100,instance (as opposed to creating a new one),
django/,1101,"Note that we need to use the pk as defined by model_class, not",
django/,1102,self.pk. These can be different fields because model inheritance,
django/,1103,allows single model to have effectively multiple primary keys.,
django/,1104,Refs #17615.,
django/,1121,"there's a ticket to add a date lookup, we can remove this special",
django/,1122,case if that makes it's way in,
django/,1135,Exclude the current object from the query if we are editing an,
django/,1136,instance (as opposed to creating a new one),
django/,1173,A unique field,
django/,1183,unique_together,
django/,1209,"Form.clean() is run even if other validation fails, so do the",
django/,1210,same with Model.clean() for consistency.,
django/,1216,"Run unique checks, but only for fields that passed validation.",
django/,1241,Skip validation for empty fields with blank=True. The developer,
django/,1242,is responsible for making sure they have a valid value.,
django/,1272,"If there are field name clashes, hide consequent column name",
django/,1273,clashes.,
django/,1354,Skip when the target model wasn't found.,
django/,1357,Skip when the relationship model wasn't found.,
django/,1380,"fields is empty or consists of the invalid ""id"" field",
django/,1397,name or attname -> field,
django/,1399,Check that multi-inheritance doesn't cause field name shadowing.,
django/,1419,Check that fields defined in the model don't clash with fields from,
django/,1420,"parents, including auto-generated fields like multi-table inheritance",
django/,1421,child accessors.,
django/,1429,Note that we may detect clash between user-defined non-unique,
django/,1430,"field ""id"" and automatically added unique field ""id"", both",
django/,1431,defined at the same model. This special case is considered in,
django/,1432,_check_id_field and here we ignore it.,
django/,1452,Store a list of column names which have already been used by other fields.,
django/,1459,Ensure the column name is not already in use.,
django/,1592,"Index name can't start with an underscore or a number, restricted",
django/,1593,for cross-database compatibility with Oracle.,
django/,1642,"In order to avoid hitting the relation tree prematurely, we use our",
django/,1643,own fields_map instead of using get_field(),
django/,1718,Skip expressions and '?' fields.,
django/,1721,"Convert ""-field"" to ""field"".",
django/,1724,Separate related fields and non-related fields.,
django/,1734,Check related fields.,
django/,1740,pk is an alias that won't be found by opts.get_field.,
django/,1760,Skip ordering on pk. This is always a valid order_by field,
django/,1761,but is an alias and therefore won't be found by opts.get_field.,
django/,1764,Check for invalid or nonexistent fields in ordering.,
django/,1767,Any field name that is not present in field_names does not exist.,
django/,1768,"Also, ordering by m2m fields is not allowed.",
django/,1800,Find the minimum max allowed length among all specified db_aliases.,
django/,1802,skip databases where the model won't be created,
django/,1823,Check if auto-generated name for the field is too long,
django/,1824,for the database.,
django/,1838,Skip nonexistent models.,
django/,1842,Check if auto-generated name for the M2M field is too long,
django/,1843,for the database.,
django/,1910,,
django/,1911,HELPER FUNCTIONS (CURRIED MODEL METHODS),
django/,1912,,
django/,1914,ORDERING METHODS,
django/,1945,,
django/,1946,MISC,
django/,1947,,
django/,1955,Backwards compat - the model was cached directly in earlier versions.,
django/,25,Use dict.__setitem__() to suppress defenses against double,
django/,26,assignment in enum's classdict.,
django/,30,Add a label property to instances of enum which uses the enum member,
django/,31,"that is passed in as ""self"" as the value to use when looking up the",
django/,32,label in the choices.,
django/,39,Allow non-enums to match against member values.,
django/,30,Warn the user as soon as possible if they are trying to apply,
django/,31,a bilateral transformation on a nested QuerySet: that won't work.,
django/,32,avoid circular import,
django/,90,Do not call get_db_prep_lookup here as the value will be,
django/,91,transformed before being used for lookup,
django/,120,Oracle doesn't allow EXISTS() to be compared to another expression,
django/,121,unless it's wrapped in a CASE WHEN.,
django/,196,"For relational fields, use the 'target_field' attribute of the",
django/,197,output_field.,
django/,221,An expression will be handled by the database but can coexist,
django/,222,alongside real values.,
django/,231,rhs should be an iterable of values. Use batch_process_rhs(),
django/,232,to prepare/transform those values.,
django/,247,The params list may contain expressions which compile to a,
django/,248,sql/param pair. Zip them to get sql and param pairs that refer to the,
django/,249,same argument and attempt to replace them with the result of,
django/,250,compiling the param step.,
django/,289,Avoid comparison against direct rhs if lhs is a boolean value. That,
django/,290,"turns ""boolfield__exact=True"" into ""WHERE boolean_field"" instead of",
django/,291,"""WHERE boolean_field = True"" when allowed.",
django/,371,Unhashable items in self.rhs,
django/,377,rhs should be an iterable; use batch_process_rhs() to,
django/,378,prepare/transform those values.,
django/,398,This is a special case for databases which limit the number of,
django/,399,elements which can appear in an 'IN' clause.,
django/,425,Assume we are in startswith. We need to produce SQL like:,
django/,426,"col LIKE %s, ['thevalue%']",
django/,427,"For python values we can (and should) do that directly in Python,",
django/,428,"but if the value is for example reference to other column, then",
django/,429,we need to add the % pattern match to the lookup by something like,
django/,430,col LIKE othercol || '%%',
django/,431,"So, for Python values we don't need any special pattern, but for",
django/,432,SQL reference values or SQL transformations we need the correct,
django/,433,pattern added.,
django/,494,"When the deprecation ends, replace with:",
django/,495,raise ValueError(,
django/,496,'The QuerySet value for an isnull lookup must be True or ',
django/,497,'False.',
django/,498,),
django/,541,Avoid the extract operation if the rhs is a direct value to allow,
django/,542,indexes to be used.,
django/,544,"Skip the extract part by directly using the originating field,",
django/,545,that is self.lhs.lhs.,
django/,10,The max length of the name of the index (restricted to 30 for,
django/,11,cross-database compatibility with Oracle),
django/,30,A list of 2-tuple with the field name and ordering ('' or 'DESC').,
django/,93,The length of the parts of the name is based on the default max,
django/,94,length of 30 characters.,
django/,30,The maximum number of results to fetch in a get() query.,
django/,33,The maximum number of items to display in a QuerySet.__repr__,
django/,51,"Execute the query. This will also fill compiler.select, klass_info,",
django/,52,and annotations.,
django/,78,Add the known related objects to the model.,
django/,80,"Avoid overwriting objects loaded by, e.g., select_related().",
django/,87,May happen in qs1 | qs2 scenarios.,
django/,104,extra(select=...) cols are always at the start of the row.,
django/,127,extra(select=...) cols are always at the start of the row.,
django/,135,Reorder according to fields.,
django/,154,Cache namedtuple() with @lru_cache() since it's too slow to be,
django/,155,called for every QuerySet evaluation.,
django/,197,{rel_field: {pk: rel_obj}},
django/,216,Address the circular dependency between `Queryset` and `Manager`.,
django/,224,,
django/,225,PYTHON MAGIC METHODS,
django/,226,,
django/,239,Force the cache to be fully populated.,
django/,351,,
django/,352,METHODS THAT DO DATABASE QUERIES,
django/,353,,
django/,380,The default_alias property raises TypeError if default_alias,
django/,381,can't be set automatically or AttributeError if it isn't an,
django/,382,attribute.,
django/,459,When you bulk insert you don't get the primary keys back (if it's an,
django/,460,"autoincrement, except if can_return_rows_from_bulk_insert=True), so",
django/,461,you can't insert into the child tables which references this. There,
django/,462,are two workarounds:,
django/,463,1) This could be implemented if you didn't have an autoincrement pk,
django/,464,2) You could do it by doing O(n) normal inserts into the parent,
django/,465,tables to get the primary keys back and then doing a single bulk,
django/,466,insert into the childmost table.,
django/,467,We currently set the primary keys on the objects when using,
django/,468,PostgreSQL via the RETURNING ID clause. It should be possible for,
django/,469,"Oracle as well, but the semantics for extracting the primary keys is",
django/,470,trickier so it's not done yet.,
django/,472,Check that the parents share the same concrete model with the our,
django/,473,model to detect the inheritance pattern ConcreteGrandParent ->,
django/,474,MultiTableParent -> ProxyChild. Simply checking self.model._meta.proxy,
django/,475,would not identify that case as involving multiple tables.,
django/,533,"PK is used twice in the resulting update query, once in the filter",
django/,534,and once in the WHEN. Each field will also have one CAST.,
django/,565,The get() needs to be targeted at the write database in order,
django/,566,to avoid potential transaction consistency problems.,
django/,588,Lock the row so that a concurrent update is blocked until,
django/,589,after update_or_create() has performed its save.,
django/,630,It's okay to use a model's property if it has a setter.,
django/,697,If the database has a limit on the number of query parameters,
django/,698,"(e.g. SQLite), retrieve objects in batches if necessary.",
django/,721,"The delete is actually 2 queries - one to find related objects,",
django/,722,and one to delete. Make sure that the discovery of related,
django/,723,objects is performed on the same database as the deletion.,
django/,726,Disable non-supported fields.,
django/,735,"Clear the result cache, in case this QuerySet gets reused.",
django/,767,Clear any annotations so that they won't be present in subqueries.,
django/,786,Clear any annotations so that they won't be present in subqueries.,
django/,799,This method can only be called once the result cache has been filled.,
django/,806,,
django/,807,PUBLIC METHODS THAT RETURN A QUERYSET SUBCLASS,
django/,808,,
django/,911,,
django/,912,PUBLIC METHODS THAT ALTER ATTRIBUTES AND RETURN A NEW QUERYSET,
django/,913,,
django/,975,Clone the query to inherit the select list and everything,
django/,977,Clear limits and ordering so they can be reapplied,
django/,986,"If the query is an EmptyQuerySet, combine all nonempty querysets.",
django/,993,"If any query is an EmptyQuerySet, return it.",
django/,1002,"If the query is an EmptyQuerySet, return it.",
django/,1076,The default_alias property may raise a TypeError.,
django/,1178,"Can only pass None to defer(), not only(), as the rest option.",
django/,1179,"That won't stop people trying to do this, so let's be explicit.",
django/,1195,,
django/,1196,PUBLIC INTROSPECTION ATTRIBUTES,
django/,1197,,
django/,1221,,
django/,1222,PRIVATE METHODS,
django/,1223,,
django/,1327,values() queryset can only be used as nested queries,
django/,1328,if they are set up to select only a single field.,
django/,1453,Cache some things for performance reasons outside the loop.,
django/,1475,Associate fields to values,
django/,1483,"Done iterating the Query. If it has its own cursor, close it.",
django/,1514,Adjust any column names which don't match field names,
django/,1516,Ignore translations for nonexistent column names,
django/,1538,`prefetch_through` is the path we traverse to perform the prefetch.,
django/,1540,`prefetch_to` is the path to the attribute that stores the result.,
django/,1561,Prevent the QuerySet from being evaluated,
django/,1613,nothing to do,
django/,1615,We need to be able to dynamically add to the list of prefetch_related,
django/,1616,lookups that we look up (see below).  So we need some book keeping to,
django/,1617,ensure we don't do duplicate work.,
django/,1618,dictionary of things like 'foo__bar': [results],
django/,1620,we add to this as we go through.,
django/,1621,recursion protection,
django/,1633,"Top level, the list of objects to decorate is the result cache",
django/,1634,from the primary QuerySet. It won't be for deeper levels.,
django/,1639,Prepare main instances,
django/,1645,"Skip any prefetching, and any object preparation",
django/,1649,Prepare objects:,
django/,1652,"Since prefetching can re-use instances, it is possible to have",
django/,1653,"the same instance multiple times in obj_list, so obj might",
django/,1654,already be prepared.,
django/,1659,Must be an immutable object from,
django/,1660,"values_list(flat=True), for example (TypeError) or",
django/,1661,a QuerySet subclass that isn't returning Model,
django/,1662,"instances (AttributeError), either in Django or a 3rd",
django/,1663,"party. prefetch_related() doesn't make sense, so quit.",
django/,1669,Descend down tree,
django/,1671,We assume that objects retrieved are homogeneous (which is the premise,
django/,1672,"of prefetch_related), so what applies to first object applies to all.",
django/,1683,"Last one, this *must* resolve to something that supports",
django/,1684,"prefetching, otherwise there is no point adding it and the",
django/,1685,developer asking for it has made a mistake.,
django/,1692,We need to ensure we don't keep adding lookups from the,
django/,1693,"same relationships to stop infinite recursion. So, if we",
django/,1694,"are already on an automatically added lookup, don't add",
django/,1695,the new lookups from relationships we've seen already.,
django/,1703,Either a singly related object that has already been fetched,
django/,1704,"(e.g. via select_related), or hopefully some other property",
django/,1705,that doesn't support prefetching but needs to be traversed.,
django/,1707,We replace the current list of parent objects with the list,
django/,1708,"of related objects, filtering out empty or missing values so",
django/,1709,that we can continue with nullable or reverse relations.,
django/,1713,"If related objects have been prefetched, use the",
django/,1714,cache rather than the object's through_attr.,
django/,1723,We special-case `list` rather than something more generic,
django/,1724,like `Iterable` because we don't want to accidentally match,
django/,1725,user models that define __iter__.,
django/,1746,"For singly related objects, we have to avoid getting the attribute",
django/,1747,"from the object, as this will trigger the query. So we first try",
django/,1748,"on the class, in order to get the descriptor object.",
django/,1755,"singly related object, descriptor object has the",
django/,1756,get_prefetch_queryset() method.,
django/,1762,"descriptor doesn't support prefetching, so we go ahead and get",
django/,1763,the attribute on the instance rather than the class to,
django/,1764,support many related managers,
django/,1769,Special case cached_property instances because hasattr,
django/,1770,triggers attribute computation and assignment.,
django/,1790,prefetcher must have a method get_prefetch_queryset() which takes a list,
django/,1791,"of instances, and returns a tuple:",
django/,1793,"(queryset of instances of self.model that are related to passed in instances,",
django/,1794,"callable that gets value to be matched for returned instances,",
django/,1795,"callable that gets value to be matched for passed in instances,",
django/,1796,"boolean that is True for singly related objects,",
django/,1797,"cache or field name to assign to,",
django/,1798,boolean that is True when the previous argument is a cache name vs a field name).,
django/,1800,The 'values to be matched' must be hashable as they will be used,
django/,1801,in a dictionary.,
django/,1805,We have to handle the possibility that the QuerySet we just got back,
django/,1806,contains some prefetch_related lookups. We don't want to trigger the,
django/,1807,"prefetch_related functionality by evaluating the query. Rather, we need",
django/,1808,to merge in the prefetch_related lookups.,
django/,1809,Copy the lookups in case it is a Prefetch object which could be reused,
django/,1810,later (happens in nested prefetch_related).,
django/,1816,Don't need to clone because the manager should have given us a fresh,
django/,1817,"instance, so we access an internal instead of using public interface",
django/,1818,for performance reasons.,
django/,1829,Make sure `to_attr` does not conflict with a field.,
django/,1831,We assume that objects retrieved are homogeneous (which is the premise,
django/,1832,"of prefetch_related), so what applies to first object applies to all.",
django/,1842,Whether or not we're prefetching the last part of the lookup.,
django/,1852,A to_attr has been given for the prefetch.,
django/,1855,cache_name points to a field name in obj.,
django/,1856,This field is a descriptor for a related object.,
django/,1859,No to_attr has been given for this prefetch operation and the,
django/,1860,cache_name does not point to a descriptor. Store the value of,
django/,1861,the field in the object's field cache.,
django/,1873,"We don't want the individual qs doing prefetch_related now,",
django/,1874,since we have merged this into the current work.,
django/,1897,Pre-compute needed attributes. The attributes are:,
django/,1898,- model_cls: the possibly deferred model class to instantiate,
django/,1899,- either:,
django/,1900,"- cols_start, cols_end: usually the columns in the row are",
django/,1901,"in the same order model_cls.__init__ expects them, so we",
django/,1902,can instantiate by model_cls(*row[cols_start:cols_end]),
django/,1903,- reorder_for_init: When select_related descends to a child,
django/,1904,"class, then we want to reuse the already selected parent",
django/,1905,"data. However, in this case the parent data isn't necessarily",
django/,1906,"in the same order that Model.__init__ expects it to be, so",
django/,1907,we have to reorder the parent data. The reorder_for_init,
django/,1908,attribute contains a function used to reorder the field data,
django/,1909,in the order __init__ expects it.,
django/,1910,- pk_idx: the index of the primary key field in the reordered,
django/,1911,model data. Used to check if a related object exists at all.,
django/,1912,- init_list: the field attnames fetched from the database. For,
django/,1913,deferred models this isn't the same as all attnames of the,
django/,1914,model's fields.,
django/,1915,- related_populators: a list of RelatedPopulator instances if,
django/,1916,select_related() descends to related models from this model.,
django/,1917,"- local_setter, remote_setter: Methods to set cached values on",
django/,1918,the object being populated and on the remote object. Usually,
django/,1919,these are Field.set_cached_value() methods.,
django/,32,Don't return the filter expression since it's not a source field.,
django/,46,"Aggregates are not allowed in UPDATE queries, so ignore for_save",
django/,50,Call Aggregate.get_source_expressions() to avoid,
django/,51,returning self.filter and including that in this loop.,
django/,3,NOQA,
django/,5,NOQA,
django/,11,NOQA,
django/,18,NOQA,
django/,22,NOQA,
django/,29,Imports that would create circular imports if sorted,
django/,30,isort:skip,
django/,31,isort:skip,
django/,71,The candidate relations are the ones that come from N-1 and 1-1 relations.,
django/,72,"N-N  (i.e., many-to-many) relations aren't candidates for deletion.",
django/,82,"Initially, {model: {instances}}, later values become lists.",
django/,84,"{model: {(field, value): {instances}}}",
django/,86,{model: {field: {instances}}},
django/,88,fast_deletes is a list of queryset-likes that can be deleted without,
django/,89,fetching the objects into memory.,
django/,92,Tracks deletion-order dependency for databases without transactions,
django/,93,or ability to defer constraint checks. Only concrete model classes,
django/,94,"should be included, as the dependencies exist only between actual",
django/,95,database tables; proxy models are represented here by their concrete,
django/,96,parent.,
django/,97,{model: {models}},
django/,116,Nullable relationships can be ignored -- they are nulled out before,
django/,117,"deleting, and therefore do not affect the order in which objects have",
django/,118,to be deleted.,
django/,186,The use of from_field comes from the need to avoid cascade back to,
django/,187,parent when parent delete is cascading to child.,
django/,191,Foreign keys pointing to this model.,
django/,196,Something like generic foreign key.,
django/,251,"Recursively collect concrete model's parent models, but not their",
django/,252,related objects. These will be found by meta.get_fields(),
django/,270,Preserve parent reverse relationships if keep_parents=True.,
django/,283,Non-referenced fields can be deferred if no signal receivers,
django/,284,are connected for the related model as they'll never be,
django/,285,exposed to the user. Skip field deferring when some,
django/,286,relationships are select_related as interactions between both,
django/,287,features are hard to get right. This should only happen in,
django/,288,the rare cases where .related_objects is overridden anyway.,
django/,317,It's something like generic foreign key.,
django/,322,Raise an error if collected restricted objects (RESTRICT) aren't,
django/,323,candidates for deletion also collected via CASCADE.,
django/,380,sort instance collections,
django/,384,"if possible, bring the models in an order suitable for databases that",
django/,385,don't support transactions or cannot defer constraint checks until the,
django/,386,end of a transaction.,
django/,388,number of objects deleted for each model label,
django/,391,Optimize for the case with a single obj and no dependencies,
django/,401,send pre_delete signals,
django/,408,fast deletes,
django/,413,update fields,
django/,420,reverse instance collections,
django/,424,delete instances,
django/,437,update collected instances,
django/,10,"To retain order, track each time a Manager instance is created.",
django/,13,Set to True for the 'objects' managers that are automatically created.,
django/,16,: If set to True the manager will be serialized into migrations and will,
django/,17,: thus be available in e.g. RunPython operations.,
django/,21,Capture the arguments to make returning them trivial.,
django/,47,using MyQuerySet.as_manager(),
django/,49,as_manager,
django/,50,manager_class,
django/,51,qs_class,
django/,52,args,
django/,53,kwargs,
django/,58,Make sure it's actually there and not an inner class,
django/,68,as_manager,
django/,69,manager_class,
django/,70,qs_class,
django/,71,args,
django/,72,kwargs,
django/,89,Only copy missing methods.,
django/,92,Only copy public methods or methods with the attribute `queryset_only=False`.,
django/,96,Copy the method onto the manager.,
django/,135,,
django/,136,PROXIES TO QUERYSET,
django/,137,,
django/,147,We can't proxy this method through the `QuerySet` like we do for the,
django/,148,rest of the `QuerySet` methods. This is because `QuerySet.all()`,
django/,149,"works by creating a ""copy"" of the current queryset and in making said",
django/,150,"copy, all the cached `prefetch_related` lookups are lost. See the",
django/,151,implementation of `RelatedManager.get_queryset()` for a better,
django/,152,understanding of how this comes into play.,
django/,19,PathInfo is used when converting lookups (fk__somecol). The contents,
django/,20,describe the relation in Model terms (model Options and Fields for both,
django/,21,sides of the relation. The join_field is the field backing the relation.,
django/,62,Connection types,
django/,75,"If the other Q() is empty, ignore it and just use `self`.",
django/,78,"Or if this Q is empty, ignore it and just use `other`.",
django/,101,We must promote any new joins to left outer joins so that when Q is,
django/,102,"used as an expression, rows aren't filtered due to joins.",
django/,145,Let's see if the field is part of the parent chain. If so we,
django/,146,might be able to reuse the already loaded value. Refs #18343.,
django/,297,"If the field is a primary key, then doing a query against the field's",
django/,298,"model is ok, too. Consider the case:",
django/,299,class Restaurant(models.Model):,
django/,300,"place = OneToOneField(Place, primary_key=True):",
django/,301,Restaurant.objects.filter(pk__in=Restaurant.objects.all()).,
django/,302,"If we didn't have the primary key check, then pk__in (== place__in) would",
django/,303,"give Place's opts as the target opts, but Restaurant isn't compatible",
django/,304,"with that. This logic applies only to primary keys, as when doing __in=qs,",
django/,305,we are going to turn this into __in=qs.values('pk') later on.,
django/,348,Resolve the condition in Join.filtered_relation.,
django/,5,"Size of each ""chunk"" for get_iterator calls.",
django/,6,Larger values are slightly faster at the expense of more storage space.,
django/,9,Namedtuples for sql.* internal use.,
django/,11,How many results to expect from a cursor.execute call,
django/,22,SQL join types.,
django/,9,Connection types,
django/,41,"If the effective connector is OR and this node contains an aggregate,",
django/,42,then we need to push the whole branch to HAVING clause.,
django/,90,Check if this node matches nothing or everything.,
django/,91,First check the amount of full nodes and empty nodes,
django/,92,to make this node empty/full.,
django/,93,"Now, check if this node is full/empty using the",
django/,94,counts.,
django/,109,Some backends (Oracle at least) need parentheses,
django/,110,"around the inner SQL in the negated case, even if the",
django/,111,inner SQL contains just a single expression.,
django/,137,For example another WhereNode,
django/,218,The contents are a black box - assume no aggregates are used.,
django/,231,"Even if aggregates would be used in a subquery, the outer query isn't",
django/,232,interested about those.,
django/,36,number of objects deleted,
django/,107,Resolve expressions here so that annotations are no longer needed,
django/,77,Mirror some properties of a normal query so that,
django/,78,the compiler can be used to process results.,
django/,79,Used for offset/limit,
django/,97,Always execute a new query for a new iterator.,
django/,98,This could be optimized with a cache at the expense of RAM.,
django/,101,If the database can't use chunked reads we need to make sure we,
django/,102,evaluate the entire query up front.,
django/,121,"Adapt parameters to the database, as much as possible considering",
django/,122,that the target type isn't known. See #17755.,
django/,147,alias_map is the most important data structure regarding joins.,
django/,148,It's used for recording which joins exist in the query and what,
django/,149,types they are. The key is the alias of the joined table (possibly,
django/,150,the table name) and the value is a Join-like object (see,
django/,151,sql.datastructures.Join for more information).,
django/,153,Whether to provide alias to columns during reference resolving.,
django/,155,Sometimes the query contains references to aliases in outer queries (as,
django/,156,a result of split_exclude). Correct alias quoting needs to know these,
django/,157,aliases too.,
django/,158,Map external tables to whether they are aliased.,
django/,160,Maps table names to list of aliases.,
django/,168,SQL-related attributes,
django/,169,Select and related select clauses are expressions to use in the,
django/,170,SELECT clause of the query.,
django/,171,The select is used for cases where we want to set up the select,
django/,172,"clause to contain other than default fields (values(), subqueries...)",
django/,173,Note that annotations go to annotations dictionary.,
django/,177,The group_by attribute can have one of the following forms:,
django/,178,- None: no group by at all in the query,
django/,179,- A tuple of expressions: group by (at least) those expressions.,
django/,180,String refs are also allowed for now.,
django/,181,- True: group by all select fields of the model,
django/,182,See compiler.get_group_by() for details.,
django/,185,Used for offset/limit,
django/,194,Arbitrary limit for select_related to prevents infinite recursion.,
django/,197,Holds the selects defined by a call to values() or values_list(),
django/,198,excluding annotation_select and extra_select.,
django/,201,SQL annotation-related attributes,
django/,202,Maps alias -> Annotation Expression,
django/,206,Set combination attributes,
django/,211,These are for extensions. The contents are more or less appended,
django/,212,verbatim to the appropriate clause.,
django/,213,"Maps col_alias -> (col_sql, params).",
django/,220,"A tuple that is a set of model field names and either True, if these",
django/,221,"are the fields to defer, or False if these are the only fields to",
django/,222,load.,
django/,294,Copy references to everything.,
django/,296,Clone attributes that can't use shallow copy.,
django/,307,"_annotation_select_cache cannot be copied, as doing so breaks the",
django/,308,(necessary) state in which both annotations and,
django/,309,_annotation_select_cache point to the same underlying objects.,
django/,310,It will get re-populated in the cloned queryset the next time it's,
django/,311,used.,
django/,323,Use deepcopy because select_related stores fields in nested,
django/,324,dicts.,
django/,330,Clear the cached_property,
django/,363,We must make sure the inner query has the referred columns in it.,
django/,364,"If we are aggregating over an annotation, then Django uses Ref()",
django/,365,"instances to note this. However, if we are annotating over a column",
django/,366,"of a related model, then it might be that column isn't part of the",
django/,367,"SELECT clause of the inner query, and we must manually make sure",
django/,368,the column is selected. An example case is:,
django/,369,.aggregate(Sum('author__awards')),
django/,370,"Resolving this expression results in a join to author, but there",
django/,371,is no guarantee the awards column of author is in the select clause,
django/,372,of the query. Thus we must manually add the column to the inner,
django/,373,query.,
django/,377,FIXME: These conditions are fairly arbitrary. Identify a better,
django/,378,method of having expressions decide which code path they should,
django/,379,take.,
django/,381,Its already a Ref to subquery (see resolve_ref() for,
django/,382,details),
django/,385,Decompose the subexpressions further. The code here is,
django/,386,"copied from the else clause, but this condition must appear",
django/,387,before the contains_aggregate/is_summary condition below.,
django/,391,Reuse aliases of expressions already selected in subquery.,
django/,397,An expression that is not selected the subquery.,
django/,399,Reference column or another aggregate. Select it,
django/,400,under a non-conflicting alias.,
django/,407,Some other expression not referencing database values,
django/,408,directly. Its subexpression might contain Cols.,
django/,425,Decide if we need to use a subquery.,
django/,426,,
django/,427,Existing annotations would cause incorrect results as get_aggregation(),
django/,428,must produce just one result and thus must not use GROUP BY. But we,
django/,429,aren't smart enough to remove the existing annotations from the,
django/,430,"query, so those would force us to use GROUP BY.",
django/,431,,
django/,432,"If the query has limit or distinct, or uses set operations, then",
django/,433,those operations must be done in a subquery so that the query,
django/,434,aggregates on the limit and/or distinct results instead of applying,
django/,435,the distinct and limit after the aggregation.,
django/,445,Queries with distinct_fields need ordering and when a limit,
django/,446,is applied we must take the slice from the ordered query.,
django/,447,Otherwise no need for ordering.,
django/,450,If the inner query uses default select and it has some,
django/,451,"aggregate annotations, then we must make sure the inner",
django/,452,"query is grouped by the main model's primary key. However,",
django/,453,clearing the select clause can alter results if distinct is,
django/,454,used.,
django/,465,Remove any aggregates marked for reduction from the subquery,
django/,466,and move them to the outer AggregateQuery.,
django/,475,Make sure the annotation_select wont use cached results.,
django/,478,"In case of Model.objects[0:3].count(), there would be no",
django/,479,"field selected in the inner query, yet we must use a subquery.",
django/,480,"So, make sure at least one field is selected.",
django/,528,Disable GROUP BY aliases to avoid orphaning references to the,
django/,529,SELECT clause which is about to be cleared.,
django/,563,"Work out how to relabel the rhs aliases, if necessary.",
django/,567,Determine which existing joins can be reused. When combining the,
django/,568,query with AND we must recreate all joins for m2m filters. When,
django/,569,combining with OR we can reuse joins. The reason is that in AND,
django/,570,case a single row can't fulfill a condition like:,
django/,571,revrel__col=1 & revrel__col=2,
django/,572,"But, there might be two different related rows matching this",
django/,573,"condition. In OR case a single True is enough, so single row is",
django/,574,"enough, too.",
django/,575,,
django/,576,Note that we will be creating duplicate joins for non-m2m joins in,
django/,577,the AND case. The results will be correct but this creates too many,
django/,578,joins. This is something that could be fixed later on.,
django/,580,Base table must be present in the query - this is the same,
django/,581,table on both sides.,
django/,587,"Now, add the joins from rhs query into the new query (skipping base",
django/,588,table).,
django/,592,"If the left side of the join was already relabeled, use the",
django/,593,updated alias.,
django/,598,We can't reuse the same join again in the query. If we have two,
django/,599,"distinct joins for the same connection in rhs query, then the",
django/,600,"combined query must have two joins, too.",
django/,605,The alias was unused in the rhs query. Unref it so that it,
django/,606,"will be unused in the new query, too. We have to add and",
django/,607,unref the alias so that join promotion has information of,
django/,608,the join type for the unused alias.,
django/,613,Now relabel a copy of the rhs where-clause and add it to the current,
django/,614,one.,
django/,619,Selection columns and extra extensions are those provided by 'rhs'.,
django/,626,"It would be nice to be able to handle this, but the queries don't",
django/,627,really make sense (or return consistent value sets). Not worth,
django/,628,the extra complexity when you can write a real query instead.,
django/,641,"Ordering uses the 'rhs' ordering, unless it has none, in which case",
django/,642,the current ordering is used.,
django/,680,"Even if we're ""just passing through"" this model, we must add",
django/,681,both the current model's pk and the related reference field,
django/,682,(if it's not a reverse relation) to the things we select.,
django/,696,"We need to load all fields for each model, except those that",
django/,697,"appear in ""seen"" (for all models that appear in ""seen""). The only",
django/,698,slight complexity here is handling fields that exist on parent,
django/,699,models.,
django/,707,"If we haven't included a model in workset, we don't add the",
django/,708,"corresponding must_include fields for that model, since an",
django/,709,"empty set means ""include all fields"". That's why there's no",
django/,710,"""else"" branch here.",
django/,720,"As we've passed through this model, but not explicitly",
django/,721,"included any fields, we have to make sure it's mentioned",
django/,722,"so that only the ""must include"" fields are pulled in.",
django/,724,Now ensure that every model in the inheritance chain is mentioned,
django/,725,"in the parent list. Again, it must be mentioned to ensure that",
django/,726,"only ""must include"" fields are pulled in.",
django/,746,Create a new alias for this table.,
django/,751,The first occurrence of a table uses the table name directly.,
django/,780,This is the base table (first FROM entry) - this table,
django/,781,"isn't really joined at all in the query, so we should not",
django/,782,alter its join type.,
django/,784,Only the first alias (skipped above) should have None join_type,
django/,792,"Join type of 'alias' changed, so re-examine all aliases that",
django/,793,refer to this one.,
django/,835,"1. Update references in ""select"" (normal columns plus aliases),",
django/,836,"""group by"" and ""where"".",
django/,845,2. Rename the alias in the internal table/alias datastructures.,
django/,861,Table is aliased or it's being changed and thus is aliased.,
django/,892,No clashes between self and outer query should be possible.,
django/,895,Explicitly avoid infinite loop. The constant divider is based on how,
django/,896,much depth recursive subquery references add to the stack. This value,
django/,897,might need to be adjusted when adding or removing function calls from,
django/,898,the code path in charge of performing these operations.,
django/,965,Reuse the most recent alias of the joined table,
django/,966,(a many-to-many relation may be joined multiple times).,
django/,971,"No reuse is possible, so we need a new alias.",
django/,1003,Proxy model have elements in base chain,
django/,1004,"with no parents, assign the new options",
django/,1005,object and skip to the next base in that,
django/,1006,case,
django/,1025,Subqueries need to use a different set of aliases than the outer query.,
django/,1028,"It's safe to drop ordering if the queryset isn't using slicing,",
django/,1029,distinct(*fields) or select_for_update().,
django/,1040,Outer query's aliases are considered external.,
django/,1067,The items of the iterable may be expressions and therefore need,
django/,1068,to be resolved independently.,
django/,1107,Check that the field and the queryset use the same model in a,
django/,1108,"query like .filter(author=Author.objects.all()). For example, the",
django/,1109,opts would be Author's (from the author field) and value.model,
django/,1110,would be Author.objects.all() queryset's .model (Author also).,
django/,1111,The field is the related field on the lhs side.,
django/,1144,__exact is the default lookup if one isn't given.,
django/,1148,First try get_lookup() so that the lookup takes precedence if the lhs,
django/,1149,supports both transform and lookup for the name.,
django/,1154,A lookup wasn't found. Try to interpret the name as a transform,
django/,1155,and do an Exact lookup against it.,
django/,1163,"Interpret '__exact=None' as the sql 'is NULL'; otherwise, reject all",
django/,1164,uses of None as a query value unless the lookup supports it.,
django/,1170,For Oracle '' is equivalent to null. The check must be done at this,
django/,1171,stage because join promotion can't be done in the compiler. Using,
django/,1172,DEFAULT_DB_ALIAS isn't nice but it's the best that can be done here.,
django/,1173,"A similar thing is done in is_nullable(), too.",
django/,1286,Prevent iterator from being consumed by check_related_objects(),
django/,1291,split_exclude() needs to know which joins were generated for the,
django/,1292,lookup parts,
django/,1297,Update used_joins before trimming since they are reused to determine,
django/,1298,which joins could be later promoted to INNER.,
django/,1305,No support for transforms for relational fields,
django/,1326,The condition added here will be SQL like this:,
django/,1327,"NOT (col IS NOT NULL), where the first NOT is added in",
django/,1328,upper layers of code. The reason for addition is that if col,
django/,1329,"is null, then col != someval will result in SQL ""unknown""",
django/,1330,which isn't the same as in Python. The Python None handling,
django/,1331,"is wanted, and it can be gotten by",
django/,1332,(col IS NULL OR col != someval),
django/,1333,<=>,
django/,1334,NOT (col IS NOT NULL AND col = someval).,
django/,1348,For join promotion this case is doing an AND for the added q_object,
django/,1349,"and existing conditions. So, any existing inner join forces the join",
django/,1350,type to remain inner. Existing outer joins can however be demoted.,
django/,1351,(Consider case where rel_a is LOUTER and rel_a__col=1 is added - if,
django/,1352,"rel_a doesn't produce any rows, then the whole condition must fail.",
django/,1353,"So, demotion is OK.",
django/,1452,Fields that contain one-to-many relations with a generic,
django/,1453,model (like a GenericForeignKey) cannot generate reverse,
django/,1454,relations and therefore cannot be used for reverse querying.,
django/,1465,QuerySet.annotate() may introduce fields that aren't,
django/,1466,attached to a model.,
django/,1469,"We didn't find the current field, so move position back",
django/,1470,one step.,
django/,1481,Check if we need any joins for concrete inheritance cases (the,
django/,1482,"field lives in parent, but we are currently in one of its",
django/,1483,children),
django/,1506,Local non-relational field.,
django/,1549,"The transform can't be applied yet, as joins must be trimmed later.",
django/,1550,To avoid making every caller of this method look up transforms,
django/,1551,"directly, compute transforms here and create a partial that converts",
django/,1552,fields to the appropriate wrapped version.,
django/,1557,"Try resolving all the names as fields first. If there's an error,",
django/,1558,treat trailing names as lookups until a field can be resolved.,
django/,1567,"The first item cannot be a lookup, so it's safe",
django/,1568,to raise the field error here.,
django/,1573,The transforms are the remaining items that couldn't be,
django/,1574,resolved into fields.,
django/,1583,FieldError is raised if the transform doesn't exist.,
django/,1589,"Then, add the path to the query's joins. Note that we can't trim",
django/,1590,joins at this stage - we will need the information about join type,
django/,1591,of the trimmed joins.,
django/,1671,Summarize currently means we are doing an aggregate() query,
django/,1672,which is executed as a wrapped subquery if any of the,
django/,1673,aggregate() elements reference an existing annotation. In,
django/,1674,that case we need to return a Ref to the subquery's annotation.,
django/,1687,Verify that the last lookup in name is a field or a transform:,
django/,1688,transform_function() raises FieldError if not.,
django/,1718,Generate the inner query.,
django/,1723,Try to have as simple as possible subquery -> trim leading joins from,
django/,1724,the subquery.,
django/,1727,Add extra check to make sure the selected field will not be null,
django/,1728,since we are adding an IN <subquery> clause. This prevents the,
django/,1729,"database from tripping over IN (...,NULL,...) selects and returning",
django/,1730,nothing,
django/,1740,Need to add a restriction so that outer query's filters are in effect for,
django/,1741,"the subquery, too.",
django/,1744,Note that the query.select[0].alias is different from alias,
django/,1745,due to bump_prefix above.,
django/,1759,Note that the end result will be:,
django/,1760,(outercol NOT IN innerq AND outercol IS NOT NULL) OR outercol IS NULL.,
django/,1761,"This might look crazy but due to how IN works, this seems to be",
django/,1762,correct. If the IS NOT NULL check is removed then outercol NOT,
django/,1763,"IN will return UNKNOWN. If the IS NULL check is removed, then if",
django/,1764,outercol IS NULL we will not match the row.,
django/,1858,"Join promotion note - we must not remove any rows here, so",
django/,1859,"if there is no existing joins, use outer join.",
django/,1874,"For lookups spanning over relationships, show the error",
django/,1875,from the model on which the lookup failed.,
django/,1914,names_to_path() validates the lookup. A descriptive,
django/,1915,FieldError will be raise if it's not.,
django/,1950,Column names from JOINs to check collisions with aliases.,
django/,1954,Skip base table.,
django/,2004,We need to pair any placeholder markers in the 'select',
django/,2005,dictionary with their parameters in 'select_params' so that,
django/,2006,subsequent updates to the select dictionary also adjust the,
django/,2007,parameters appropriately.,
django/,2042,Fields on related models are stored in the literal double-underscore,
django/,2043,"format, so that we can use a set datastructure. We do the foo__bar",
django/,2044,splitting and handling when computing the SQL column names (as part of,
django/,2045,get_columns()).,
django/,2048,Add to existing deferred names.,
django/,2051,"Remove names from the set of any existing ""immediate load"" names.",
django/,2071,Remove any existing deferred names from the current set before,
django/,2072,setting the new names.,
django/,2075,"Replace any existing ""immediate load"" field names.",
django/,2087,We cache this because we call this function multiple times,
django/,2088,"(compiler.fill_related_selections, query.iterator)",
django/,2134,"Shortcut - if there are no extra or annotations, then",
django/,2135,the values() clause must be just field names.,
django/,2150,Selected annotations must be known before setting the GROUP BY,
django/,2151,clause.,
django/,2154,Disable GROUP BY aliases to avoid orphaning references to the,
django/,2155,SELECT clause which is about to be cleared.,
django/,2213,Trim and operate only on tables that were generated for,
django/,2214,"the lookup part of the query. That is, avoid trimming",
django/,2215,joins generated for F() expressions.,
django/,2227,"The path.join_field is a Rel, lets get the other side's field",
django/,2229,Build the filter prefix.,
django/,2240,Lets still see if we can trim the first join from the inner query,
django/,2241,"(that is, self). We can't do this for:",
django/,2242,- LEFT JOINs because we would miss those rows that have nothing on,
django/,2243,"the outer side,",
django/,2244,- INNER JOINs from filtered relations because we would miss their,
django/,2245,filters.,
django/,2256,TODO: It might be possible to trim more joins from the start of the,
django/,2257,inner query if it happens to have a longer join chain containing the,
django/,2258,values in select_fields. Lets punt this one for now.,
django/,2261,The found starting point is likely a Join instead of a BaseTable reference.,
django/,2262,But the first entry in the query's FROM clause must not be a JOIN.,
django/,2278,"We need to use DEFAULT_DB_ALIAS here, as QuerySet does not have",
django/,2279,(nor should it have) knowledge of which connection is going to be,
django/,2280,used. The proper fix would be to defer all decisions where,
django/,2281,"is_nullable() is needed to the compiler stage, but that is not easy",
django/,2282,to do currently.,
django/,2339,Maps of table alias to how many times it is seen as required for,
django/,2340,inner and/or outer joins.,
django/,2359,The effective_connector is used so that NOT (a AND b) is treated,
django/,2360,similarly to (a OR b) for join promotion.,
django/,2362,We must use outer joins in OR case when the join isn't contained,
django/,2363,in all of the joins. Otherwise the INNER JOIN itself could remove,
django/,2364,valid results. Consider the case where a model with rel_a and,
django/,2365,"rel_b relations is queried with rel_a__col=1 | rel_b__col=2. Now,",
django/,2366,if rel_a join doesn't produce any results is null (for example,
django/,2367,"reverse foreign key or null value in direct foreign key), and",
django/,2368,"there is a matching row in rel_b with col=2, then an INNER join",
django/,2369,"to rel_a would remove a valid match from the query. So, we need",
django/,2370,to promote any existing INNER to LOUTER (it is possible this,
django/,2371,promotion in turn will be demoted later on).,
django/,2374,If connector is AND and there is a filter that can match only,
django/,2375,"when there is a joinable row, then use INNER. For example, in",
django/,2376,"rel_a__col=1 & rel_b__col=2, if either of the rels produce NULL",
django/,2377,"as join output, then the col=1 or col=2 can't match (as",
django/,2378,NULL=anything is always false).,
django/,2379,"For the OR case, if all children voted for a join to be inner,",
django/,2380,then we can use INNER for the join. For example:,
django/,2381,(rel_a__col__icontains=Alex | rel_a__col__icontains=Russell),
django/,2382,"then if rel_a doesn't produce any rows, the whole condition",
django/,2383,can't match. Hence we can safely use INNER join.,
django/,2387,"Finally, what happens in cases where we have:",
django/,2388,(rel_a__col=1|rel_b__col=2) & rel_a__col__gte=0,
django/,2389,"Now, we first generate the OR clause, and promote joins for it",
django/,2390,in the first if branch above. Both rel_a and rel_b are promoted,
django/,2391,to LOUTER joins. After that we do the AND case. The OR case,
django/,2392,voted no inner joins but the rel_a__col__gte=0 votes inner join,
django/,2393,for rel_a. We demote it back to INNER join (in AND case a single,
django/,2394,"vote is enough). The demotion is OK, if rel_a doesn't produce",
django/,2395,"rows, then the rel_a__col__gte=0 clause can't be true, and thus",
django/,2396,"the whole clause must be false. So, it is safe to use INNER",
django/,2397,join.,
django/,2398,Note that in this example we could just as well have the __gte,
django/,2399,clause and the OR clause swapped. Or we could replace the __gte,
django/,2400,"clause with an OR clause containing rel_a__col=1|rel_a__col=2,",
django/,2401,and again we could safely demote to INNER.,
django/,1,NOQA,
django/,3,NOQA,
django/,27,"The select, klass_info, and annotations are needed by QuerySet.iterator()",
django/,28,these are set as a side-effect of executing the query. Note that we calculate,
django/,29,separately a list of extra select columns needed for grammatical correctness,
django/,30,"of the query, but these columns are not included in self.select.",
django/,34,Multiline ordering SQL clause may appear from RawSQL.,
django/,66,Some examples:,
django/,67,SomeModel.objects.annotate(Count('somecol')),
django/,68,GROUP BY: all fields of the model,
django/,69,,
django/,70,SomeModel.objects.values('name').annotate(Count('somecol')),
django/,71,GROUP BY: name,
django/,72,,
django/,73,SomeModel.objects.annotate(Count('somecol')).values('name'),
django/,74,GROUP BY: all cols of the model,
django/,75,,
django/,76,"SomeModel.objects.values('name', 'pk').annotate(Count('somecol')).values('pk')",
django/,77,"GROUP BY: name, pk",
django/,78,,
django/,79,SomeModel.objects.values('name').annotate(Count('somecol')).values('pk'),
django/,80,"GROUP BY: name, pk",
django/,81,,
django/,82,"In fact, the self.query.group_by is the minimal set to GROUP BY. It",
django/,83,"can't be ever restricted to a smaller set, but additional columns in",
django/,84,"HAVING, ORDER BY, and SELECT clauses are added to it. Unfortunately",
django/,85,the end result is that it is impossible to force the query to have,
django/,86,a chosen GROUP BY clause - you can almost do this by using the form:,
django/,87,.values(*wanted_cols).annotate(AnAggregate()),
django/,88,"but any later annotations, extra selects, values calls that",
django/,89,"refer some column outside of the wanted_cols, order_by, or even",
django/,90,filter calls can alter the GROUP BY clause.,
django/,92,"The query.group_by is either None (no GROUP BY at all), True",
django/,93,"(group by select fields), or a list of expressions to be added",
django/,94,to the group by.,
django/,99,"If the group by is set to a list (by .values() call most likely),",
django/,100,then we need to add everything in it to the GROUP BY clause.,
django/,101,Backwards compatibility hack for setting query.group_by. Remove,
django/,102,when  we have public API way of forcing the GROUP BY clause.,
django/,103,Converts string references to expressions.,
django/,109,"Note that even if the group_by is set, it is only the minimal",
django/,110,"set to group by. So, we need to add cols in select, order_by, and",
django/,111,having into the select in any case.,
django/,116,Skip members of the select clause that are already included,
django/,117,by reference.,
django/,124,"Skip References to the select clause, as all expressions in the",
django/,125,select clause are already part of the group by.,
django/,144,"If the DB can group by primary key, then group by the primary key of",
django/,145,query's main model. Note that for PostgreSQL the GROUP BY clause must,
django/,146,"include the primary key of every table, but for MySQL it is enough to",
django/,147,have the main table's primary key.,
django/,149,Determine if the main model's primary key is in the query.,
django/,152,Is this a reference to query's base table primary key? If the,
django/,153,"expression isn't a Col-like, then skip the expression.",
django/,158,"If the main model's primary key is in the query, group by that",
django/,159,"field, HAVING expressions, and expressions associated with tables",
django/,160,that don't have a primary key included in the grouped columns.,
django/,173,Filter out all expressions associated with a table's primary key,
django/,174,present in the grouped columns. This is done by identifying all,
django/,175,tables that have their primary key included in the grouped,
django/,176,columns and removing non-primary key columns referring to them.,
django/,177,Unmanaged models are excluded because they could be representing,
django/,178,database views on which the optimization might not be allowed.,
django/,223,self.query.select is a special case. These columns never go to,
django/,224,any model.,
django/,258,Select a predicate that's always False.,
django/,294,output_field must be resolved for constants.,
django/,303,random,
django/,311,Reference to expression in SELECT clause,
django/,317,References to an expression which is masked out of the SELECT,
django/,318,clause.,
django/,321,output_field must be resolved for constants.,
django/,327,This came in through an extra(order_by=...) addition. Pass it,
django/,328,on verbatim.,
django/,338,'col' is of the form 'field' or 'field1__field2' or,
django/,339,"'-field1__field2__field', etc.",
django/,358,Relabel order by columns to raw numbers if this is a combined,
django/,359,query; necessary since the columns can't be referenced by the,
django/,360,fully qualified name and the simple column names may collide.,
django/,372,Add column used in ORDER BY clause without an alias to,
django/,373,the selected columns.,
django/,377,"Don't add the same column twice, but the order direction is",
django/,378,not taken into account so we strip it. When this entire method,
django/,379,"is refactored into expressions, then we can check each part as we",
django/,380,generate it.,
django/,439,"If the columns list is limited, then all combined queries",
django/,440,must have the same columns list. Set the selects defined on,
django/,441,"the query on all combined queries, if not already set.",
django/,451,Wrap in a subquery if wrapping in parentheses isn't,
django/,452,supported.,
django/,455,Add parentheses when combining with compound query if not,
django/,456,already added for all compound queries.,
django/,461,Omit the empty queryset with UNION and with DIFFERENCE if the,
django/,462,first queryset is nonempty.,
django/,491,Is a LIMIT/OFFSET clause needed?,
django/,501,"This must come after 'select', 'ordering', and 'distinct'",
django/,502,(see docstring of get_from_clause() for details).,
django/,543,If it's a NOWAIT/SKIP LOCKED/OF query but the backend,
django/,544,"doesn't support it, raise NotSupportedError to prevent a",
django/,545,possible deadlock.,
django/,600,"If the query is used as a subquery, the extra selects would",
django/,601,result in more columns than the left-hand side expression is,
django/,602,expecting. This can happen when a subquery uses a combination,
django/,603,"of order_by() and distinct(), forcing the ordering expressions",
django/,604,to be selected as well. Wrap the query in another subquery,
django/,605,to exclude extraneous selects.,
django/,628,Finally do cleanup - get rid of the joins we created above.,
django/,648,The 'seen_models' is used to optimize checking the needed parent,
django/,649,alias for a given field. This also includes None -> start_alias to,
django/,650,be used by local fields.,
django/,655,A proxy model will have a different model and concrete_model. We,
django/,656,will assign None if the field belongs to this model.,
django/,661,Avoid loading data for already loaded parents.,
django/,662,We end up here in the case select_related() resolution,
django/,663,proceeds from parent model to child model. In that case the,
django/,664,"parent model data is already present in the SELECT clause,",
django/,665,and we want to avoid reloading the same data again.,
django/,711,"If we get to this point and the field is a relation to another model,",
django/,712,append the default ordering for that model unless it is the pk,
django/,713,shortcut or the attribute name of the field that is specified.,
django/,715,"Firstly, avoid infinite loops.",
django/,767,"Extra tables can end up in self.tables, but not in the",
django/,768,alias_map if they aren't in a join. That's OK. We skip them.,
django/,775,Only add the alias if it's not already present (the table_alias(),
django/,776,"call increments the refcount, so an alias refcount of one means",
django/,777,this is the only reference).,
django/,800,We've recursed far enough; bail out.,
django/,808,Setup for the case when only particular related fields should be,
django/,809,included in the related selection.,
django/,826,"If a non-related field is used like a relation,",
django/,827,or if a single non-relational field is given.,
django/,904,Set a reverse fk object when relation is non-empty.,
django/,912,Filtered relations work only on the topmost level.,
django/,973,Selected columns from a model or its parents.,
django/,1107,"This is always executed on a query clone, so we can modify self.query",
django/,1142,Might fail for server-side cursors (e.g. connection closed),
django/,1147,Give the caller the cursor to process and close.,
django/,1156,done with the cursor,
django/,1169,"If we are using non-chunked reads, we return the same data",
django/,1170,"structure as normally, but ensure it is all read into memory",
django/,1171,"before going any further. Use chunked_fetch if requested,",
django/,1172,unless the database doesn't support it.,
django/,1175,done with the cursor,
django/,1194,"Some backends return 1 item tuples with strings, and others return",
django/,1195,tuples with integers and strings. Flatten them out into strings.,
django/,1217,A field value of None means the value is raw.,
django/,1220,"This is an expression, let's compile it.",
django/,1223,Some fields (e.g. geo fields) need special munging before,
django/,1224,they can be inserted.,
django/,1227,Return the common case for the placeholder,
django/,1230,"The following hook is only used by Oracle Spatial, which sometimes",
django/,1231,needs to yield 'NULL' and [] as its placeholder and params instead,
django/,1232,of '%s' and [None]. The 'NULL' placeholder is produced earlier by,
django/,1233,OracleOperations.get_geom_placeholder(). The following line removes,
django/,1234,the corresponding None parameter. See ticket #10888.,
django/,1246,Don't allow values containing Col expressions. They refer to,
django/,1247,"existing columns on a row, but in the case of insert the row",
django/,1248,doesn't exist yet.,
django/,1292,"list of (sql, [params]) tuples for each object to be saved",
django/,1293,Shape: [n_objs][n_fields][2],
django/,1299,"tuple like ([sqls], [[params]s]) for each object to be saved",
django/,1300,Shape: [n_objs][2][n_fields],
django/,1303,Extract separate lists for placeholders and params.,
django/,1304,Each of these has shape [n_objs][n_fields],
django/,1307,"Params for each field are still lists, and need to be flattened.",
django/,1313,"We don't need quote_name_unless_alias() here, since these are all",
django/,1314,going to be column names (so we can avoid the extra overhead).,
django/,1328,An empty object.,
django/,1332,Currently the backends just accept values when generating bulk,
django/,1333,queries and generate their own placeholders. Doing that isn't,
django/,1334,necessary and it should be possible to use placeholders and,
django/,1335,expressions in bulk inserts too.,
django/,1352,Skip empty r_sql to allow subclasses to customize behavior for,
django/,1353,3rd party backends. Refs #19096.,
django/,1467,Getting the placeholder for the field.,
django/,1523,Ensure base table is in the query,
django/,1538,Now we adjust the current query: reset the where clause and get rid,
django/,1539,of all the tables we don't need (since they're in the sub-select).,
django/,1542,Either we're using the idents in multiple update queries (so,
django/,1543,"don't want them to change), or the db backend doesn't support",
django/,1544,selecting from the updating table (e.g. MySQL).,
django/,1551,The fast path. Filters and updates in one query.,
django/,16,"The path travelled, this includes the path to the multijoin.",
django/,43,Join table,
django/,46,Note: table_alias is not necessarily known at instantiation time.,
django/,48,LOUTER or INNER,
django/,50,A list of 2-tuples to use in the ON clause of the JOIN.,
django/,51,Each 2-tuple will create one join condition in the ON clause.,
django/,53,Along which field (or ForeignObjectRel in the reverse join case),
django/,55,Is this join nullabled?,
django/,70,Add a join condition for each pair of joining columns.,
django/,79,Add a single condition inside parentheses for whatever,
django/,80,get_extra_restriction() returns.,
django/,93,This might be a rel on the other end of an actual declared field.,
django/,39,"This function is usually ATan2(y, x), returning the inverse tangent",
django/,40,"of y / x, but it's ATan2(x, y) on SpatiaLite < 5.0.0.",
django/,41,Cast integers to float to avoid inconsistent/buggy behavior if the,
django/,42,arguments are mixed between integer and float or decimal.,
django/,43,https://www.gaia-gis.it/fossil/libspatialite/tktview?name=0f72cca3a2,
django/,107,"This function is usually Log(b, x) returning the logarithm of x to",
django/,108,"the base b, but on SpatiaLite it's Log(x, b).",
django/,20,Use strftime as datetime/time don't keep fractional seconds.,
django/,32,MySQL doesn't support explicit cast to float.,
django/,37,"CAST would be valid too, but the :: shortcut syntax is more readable.",
django/,38,'expressions' is wrapped in parentheses in case it's a complex,
django/,39,expression.,
django/,53,"Oracle prohibits mixing TextField (NCLOB) and CharField (NVARCHAR2),",
django/,54,so convert all fields to NCLOB when that type is expected.,
django/,18,Timezone conversions must happen to the input datetime *before*,
django/,19,applying a function. 2015-12-31 23:00:00 -02:00 is stored in the,
django/,20,database as 2016-01-01 01:00:00 +00:00. Any results should be,
django/,21,based on the input datetime not the stored datetime.,
django/,58,resolve_expression has already validated the output_field so this,
django/,59,assert should never be hit.,
django/,71,Passing dates to functions expecting datetimes is most likely a mistake.,
django/,177,"PostgreSQL's CURRENT_TIMESTAMP means ""the time at the start of the",
django/,178,"transaction"". Use STATEMENT_TIMESTAMP to be cross-compatible with",
django/,179,other databases.,
django/,208,DateTimeField is a subclass of DateField so this works for both.,
django/,212,"If self.output_field was None, then accessing the field will trigger",
django/,213,the resolver to assign it to self.lhs.output_field.,
django/,216,Passing dates or times to functions expecting datetimes is most,
django/,217,likely a mistake.,
django/,293,Cast to date rather than truncate to date.,
django/,306,Cast to time rather than truncate to time.,
django/,24,comparison and conversion,
django/,26,datetime,
django/,32,math,
django/,36,text,
django/,41,window,
django/,10,Cast FloatField to DecimalField as PostgreSQL doesn't support the,
django/,11,following function signatures:,
django/,12,"- LOG(double, double)",
django/,13,"- MOD(double, double)",
django/,95,Use CONCAT_WS with an empty separator so that NULLs are ignored.,
django/,103,"null on either side results in null for expression, wrap with coalesce",
django/,127,wrap pairs of expressions in successive concat functions,
django/,128,"exp = [a, b, c, d]",
django/,129,"-> ConcatPair(a, ConcatPair(b, ConcatPair(c, d))))",
django/,232,REVERSE in Oracle is undocumented and doesn't support multi-byte,
django/,233,strings. Use a special subquery instead.,
django/,23,Older code may be expecting FileField values to be simple strings.,
django/,24,"By overriding the == operator, it can remain backwards compatibility.",
django/,32,"The standard File contains most of the necessary properties, but",
django/,33,"FieldFiles can be instantiated without a name, so that needs to",
django/,34,be checked for here.,
django/,78,"open() doesn't alter the file's contents, but it does reset the pointer",
django/,81,"In addition to the standard File API, FieldFiles have extra methods",
django/,82,"to further manipulate the underlying file, as well as update the",
django/,83,associated model instance.,
django/,91,"Save the object because it has changed, unless save is False",
django/,99,"Only close the file if it's already open, which we know by the",
django/,100,presence of self._file,
django/,126,"FieldFile needs access to its associated model field, an instance and",
django/,127,"the file's name. Everything else will be restored later, by",
django/,128,FileDescriptor below.,
django/,164,"This is slightly complicated, so worth an explanation.",
django/,165,"instance.file`needs to ultimately return some instance of `File`,",
django/,166,"probably a subclass. Additionally, this returned object needs to have",
django/,167,the FieldFile API so that users can easily do things like,
django/,168,instance.file.path and have that delegated to the file storage engine.,
django/,169,"Easy enough if we're strict about assignment in __set__, but if you",
django/,170,peek below you can see that we're not. So depending on the current,
django/,171,value of the field we have to dynamically construct some sort of,
django/,172,"""thing"" to return.",
django/,174,The instance dict contains whatever was originally assigned,
django/,175,in __set__.,
django/,182,"If this value is a string (instance.file = ""path/to/file"") or None",
django/,183,then we simply wrap it with the appropriate attribute class according,
django/,184,to the file field. [This is FieldFile for FileFields and,
django/,185,ImageFieldFile for ImageFields; it's also conceivable that user,
django/,186,subclasses might also want to subclass the attribute class]. This,
django/,187,"object understands how to convert a path to a file, and also how to",
django/,188,handle None.,
django/,193,"Other types of files may be assigned as well, but they need to have",
django/,194,"the FieldFile interface added to them. Thus, we wrap any other type of",
django/,195,"File inside a FieldFile (well, the field's attr_class, which is",
django/,196,usually FieldFile).,
django/,203,"Finally, because of the (some would say boneheaded) way pickle works,",
django/,204,the underlying FieldFile might not actually itself have an associated,
django/,205,file. So we need to reset the details of the FieldFile in those cases.,
django/,211,Make sure that the instance is correct.,
django/,215,"That was fun, wasn't it?",
django/,224,The class to wrap instance attributes in. Accessing the file object off,
django/,225,the instance will always return an instance of attr_class.,
django/,228,The descriptor to use for accessing the attribute off of the class.,
django/,296,Need to convert File objects provided via a form to string for database insertion,
django/,304,Commit the file to storage prior to saving the model,
django/,327,"Important: None means ""no change"", other false value means ""clear""",
django/,328,This subtle distinction (rather than a more explicit marker) is,
django/,329,needed because we need to consume values that are also sane for a,
django/,330,regular (non Model-) Form to find in its cleaned_data dictionary.,
django/,332,This value will be converted to str and stored in the,
django/,333,"database, so leaving False as-is is not acceptable.",
django/,353,To prevent recalculating image dimensions when we are instantiating,
django/,354,"an object from the database (bug #11084), only update dimensions if",
django/,355,the field had a value before this assignment.  Since the default,
django/,356,"value for FileField subclasses is an instance of field.attr_class,",
django/,357,previous_file will only be None when we are called from,
django/,358,Model.__init__().  The ImageField.update_dimension_fields method,
django/,359,hooked up to the post_init signal handles the Model.__init__() cases.,
django/,360,Assignment happening outside of Model.__init__() will trigger the,
django/,361,update right here.,
django/,368,Clear the image dimensions cache,
django/,391,NOQA,
django/,415,Attach update_dimension_fields so that dimension fields declared,
django/,416,after their corresponding image field don't stay cleared by,
django/,417,"Model.__init__, see bug #11196.",
django/,418,Only run post-initialization dimension update on non-abstract models,
django/,435,Nothing to update if the field doesn't have dimension fields or if,
django/,436,the field is deferred.,
django/,441,"getattr will call the ImageFileDescriptor's __get__ method, which",
django/,442,coerces the assigned value into an instance of self.attr_class,
django/,443,(ImageFieldFile in this case).,
django/,446,Nothing to update if we have no file and not being forced to update.,
django/,454,"When both dimension fields have values, we are most likely loading",
django/,455,data from the database or updating an image field that already had,
django/,456,"an image stored.  In the first case, we don't want to update the",
django/,457,dimension fields because we are already getting their values from the,
django/,458,"database.  In the second case, we do want to update the dimensions",
django/,459,fields and will skip this return because force will be True since we,
django/,460,were called from ImageFileDescriptor.__set__.,
django/,464,file should be an instance of ImageFieldFile or should be None.,
django/,469,"No file, so clear dimensions fields.",
django/,473,Update the width and height fields.,
django/,27,Field flags,
django/,33,Reverse relations are always nullable (Django can't enforce that a,
django/,34,foreign key on the related model points to this model).,
django/,50,Some of the following cached_properties can't be initialized in,
django/,51,__init__ as the field doesn't have its model yet. Calling these methods,
django/,52,before field.contribute_to_class() has been called will result in,
django/,53,AttributeError,
django/,152,By default foreign object doesn't relate to any remote field (for,
django/,153,example custom multicolumn joins currently have no remote field).,
django/,157,This method encapsulates the logic that decides what name to give an,
django/,158,accessor descriptor that retrieves related many-to-one or,
django/,159,"many-to-many objects. It uses the lowercased object_name + ""_set"",",
django/,160,"but this can be overridden with the ""related_name"" option. Due to",
django/,161,backwards compatibility ModelForms need to be able to provide an,
django/,162,alternate model. See BaseInlineFormSet.get_default_prefix().,
django/,166,"If this is a symmetrical m2m relation on self, there is no reverse accessor.",
django/,50,Check for recursive relations,
django/,54,"Look for an ""app.Model"" relation",
django/,86,Field flags,
django/,94,Can't cache this property until all the models are loaded.,
django/,197,`f.remote_field.model` may be a string instead of a model. Skip if model name is,
django/,198,not resolved.,
django/,202,Consider that we are checking field `Model.foreign` and the models,
django/,203,are:,
django/,204,,
django/,205,class Target(models.Model):,
django/,206,model = models.IntegerField(),
django/,207,model_set = models.IntegerField(),
django/,208,,
django/,209,class Model(models.Model):,
django/,210,foreign = models.ForeignKey(Target),
django/,211,m2m = models.ManyToManyField(Target),
django/,213,"rel_opts.object_name == ""Target""",
django/,215,If the field doesn't install a backward relation on the target model,
django/,216,"(so `is_hidden` returns True), then there are no clashes to check",
django/,217,and we can skip these fields.,
django/,219,"i. e. ""model_set""",
django/,220,"i. e. ""model""",
django/,221,"i. e. ""Model.field""",
django/,223,Check clashes between accessor or reverse query name of `field`,
django/,224,and any other field name -- i.e. accessor for Model.foreign is,
django/,225,model_set and it clashes with Target.model_set.,
django/,228,"i.e. ""Target.model_set""",
django/,251,Check clashes between accessors/reverse query names of `field` and,
django/,252,any other field accessor -- i. e. Model.foreign accessor clashes with,
django/,253,Model.m2m accessor.,
django/,256,"i. e. ""Model.m2m""",
django/,285,By default related field will not have a column as it relates to,
django/,286,columns from another table.,
django/,369,"Work out string form of ""to""",
django/,411,"If this is a callable, do not invoke it here. Just pass",
django/,412,it in the defaults for when the form class will later be,
django/,413,instantiated.,
django/,449,Field flags,
django/,488,Skip nonexistent models.,
django/,588,"If swappable is True, then see if we're actually pointing to the target",
django/,589,of a swap.,
django/,592,"If it's already a settings reference, error",
django/,600,Set it,
django/,653,Gotcha: in some cases (like fixture loading) a model can have,
django/,654,"different values in parent_ptr_id and parent's id. So, use",
django/,655,"instance.pk (that is, parent_ptr_id) when asked for instance.id.",
django/,747,"Internal FK's - i.e., those with a related name ending with '+' -",
django/,748,and swapped models don't get a related descriptor.,
django/,751,"While 'limit_choices_to' might be a callable, simply pass",
django/,752,it along for later - this is too early because it's still,
django/,753,model load time.,
django/,776,Field flags,
django/,804,"For backwards compatibility purposes, we need to *try* and set",
django/,805,the to_field during FK construction. It won't be guaranteed to,
django/,806,be correct until contribute_to_class is called. Refs #12190.,
django/,874,Handle the simpler arguments,
django/,881,Rel needs more work.,
django/,928,'pk' is included for backwards compatibility,
django/,1031,Field flags,
django/,1063,Remote field object must be cleared otherwise Model.save(),
django/,1064,will reassign attname using the related object pk.,
django/,1069,Override ForeignKey since check isn't applicable here.,
django/,1099,Construct and return the new class.,
django/,1130,Field flags,
django/,1241,The relationship model is not installed.,
django/,1257,Set some useful local variables,
django/,1266,Count foreign keys in intermediate model,
django/,1288,Count foreign keys in relationship model,
django/,1350,Validate `through_fields`.,
django/,1352,Validate that we're given an iterable of at least two items,
django/,1353,"and that none of them is ""falsy"".",
django/,1367,Validate the given through fields -- they should be actual,
django/,1368,"fields on the through model, and also be foreign keys to the",
django/,1369,expected models.,
django/,1434,The second condition allows multiple m2m relations on a model if,
django/,1435,some point to a through model that proxies another through model.,
django/,1469,Handle the simpler arguments.,
django/,1474,Rel needs more work.,
django/,1490,"If swappable is True, then see if we're actually pointing to the target",
django/,1491,of a swap.,
django/,1494,"If it's already a settings reference, error.",
django/,1521,Get join infos between the last model of join 1 and the first model,
django/,1522,of join 2. Assume the only reason these may differ is due to model,
django/,1523,inheritance.,
django/,1588,"If this is an m2m-intermediate to self,",
django/,1589,the first foreign key you find will be,
django/,1590,the source column. Keep searching for,
django/,1591,the second foreign key.,
django/,1603,"To support multiple relations to self, it's useful to have a non-None",
django/,1604,related name on symmetrical relations for internal reasons. The,
django/,1605,"concept doesn't make a lot of sense externally (""you want me to",
django/,1606,"specify *what* on my non-reversible relation?!""), so we set it up",
django/,1607,automatically. The funky name reduces the chance of an accidental,
django/,1608,clash.,
django/,1615,"If the backwards relation is disabled, replace the original",
django/,1616,related_name with one generated from the m2m field name. Django,
django/,1617,still uses backwards relations internally and we need to avoid,
django/,1618,clashes between multiple m2m fields with related_name == '+'.,
django/,1623,The intermediate m2m model is not auto created if:,
django/,1624,"1) There is a manually specified intermediate, or",
django/,1625,2) The class owning the m2m field is abstract.,
django/,1626,3) The class owning the m2m field has been swapped out.,
django/,1635,Add the descriptor for the m2m relation.,
django/,1638,Set up the accessor for the m2m table name for the relation.,
django/,1642,"Internal M2Ms (i.e., those with a related name ending with '+')",
django/,1643,and swapped models don't get a related descriptor.,
django/,1647,Set up the accessors for the column names on the m2m table.,
django/,1674,"If initial is passed in, it's a list of related objects, but the",
django/,1675,MultipleChoiceField takes a list of IDs.,
django/,1687,"A ManyToManyField is not represented by a single column,",
django/,1688,so return None.,
django/,100,The exception can't be created at initialization time since the,
django/,101,related model might not be resolved yet; `self.field.model` might,
django/,102,still be a string model reference.,
django/,131,FIXME: This will need to be revisited when we introduce support for,
django/,132,composite fields. In the meantime we take this practical approach to,
django/,133,solve a regression on 1.6 when the reverse manager in hidden,
django/,134,(related_name ends with a '+'). Refs #21410.,
django/,135,The check for len(...) == 1 is a special case that allows the query,
django/,136,to be join-less and smaller. Refs #21760.,
django/,143,"Since we're going to assign directly in the cache,",
django/,144,we must manage the reverse relation cache manually.,
django/,153,"Assuming the database enforces foreign keys, this won't fail.",
django/,169,The related instance is loaded from the database and then cached,
django/,170,by the field on the model instance state. It can also be pre-cached,
django/,171,by the reverse accessor (ReverseOneToOneDescriptor).,
django/,178,An ancestor link will exist if this field is defined on a,
django/,179,multi-table inheritance parent of the instance's class.,
django/,181,The value might be cached on an ancestor if the instance,
django/,182,originated from walking down the inheritance chain.,
django/,189,"If this is a one-to-one relation, set the reverse accessor",
django/,190,cache on the related object to the current instance to avoid,
django/,191,an extra SQL query if it's accessed later on.,
django/,213,An object must be an instance of the related class.,
django/,232,"If we're setting the value of a OneToOneField to None, we need to clear",
django/,233,"out the cache on any old related object. Otherwise, deleting the",
django/,234,"previously-related object will also cause this object to be deleted,",
django/,235,which is wrong.,
django/,237,"Look up the previously-related object, which may still be available",
django/,238,since we've not yet cleared out the related field.,
django/,239,"Use the cache directly, instead of the accessor; if we haven't",
django/,240,"populated the cache, then we don't care - we're only accessing",
django/,241,"the object to invalidate the accessor cache, so there's no",
django/,242,need to populate the cache just to expire it again.,
django/,245,"If we've got an old related object, we need to clear out its",
django/,246,cache. This cache also might not exist if the related object,
django/,247,hasn't been accessed yet.,
django/,254,Set the values of the related field.,
django/,259,Set the related instance cache used by __get__ to avoid an SQL query,
django/,260,when accessing the attribute we just set.,
django/,263,"If this is a one-to-one relation, set the reverse accessor cache on",
django/,264,the related object to the current instance to avoid an extra SQL,
django/,265,query if it's accessed later on.,
django/,293,"Because it's a parent link, all the data is available in the",
django/,294,"instance, so populate the parent model with this data.",
django/,298,"If any of the related model's fields are deferred, fallback to",
django/,299,fetching all fields from the related model. This avoids a query,
django/,300,on the related model for every deferred field.,
django/,311,If the primary key is a link to a parent model and a parent instance,
django/,312,"is being set, update the value of the inherited pk(s).",
django/,315,Inherited primary key fields from this object's base classes.,
django/,340,"Following the example above, `related` is an instance of OneToOneRel",
django/,341,which represents the reverse restaurant field (place.restaurant).,
django/,346,The exception isn't created at initialization time for the sake of,
django/,347,consistency with `ForwardManyToOneDescriptor`.,
django/,376,"Since we're going to assign directly in the cache,",
django/,377,we must manage the reverse relation cache manually.,
django/,398,The related instance is loaded from the database and then cached,
django/,399,by the field on the model instance state. It can also be pre-cached,
django/,400,by the forward accessor (ForwardManyToOneDescriptor).,
django/,414,Set the forward accessor cache on the related object to,
django/,415,the current instance to avoid an extra SQL query if it's,
django/,416,accessed later on.,
django/,442,The similarity of the code below to the code in,
django/,443,"ForwardManyToOneDescriptor is annoying, but there's a bunch",
django/,444,of small differences that would make a common base class convoluted.,
django/,447,Update the cached related instance (if any) & clear the cache.,
django/,448,"Following the example above, this would be the cached",
django/,449,``restaurant`` instance (if any).,
django/,452,Remove the ``restaurant`` instance from the ``place``,
django/,453,instance cache.,
django/,455,Set the ``place`` field on the ``restaurant``,
django/,456,instance to None.,
django/,459,An object must be an instance of the related class.,
django/,477,Set the value of the related field to the value of the related object's related field,
django/,481,Set the related instance cache used by __get__ to avoid an SQL query,
django/,482,when accessing the attribute we just set.,
django/,485,Set the forward accessor cache on the related object to the current,
django/,486,instance to avoid an extra SQL query if it's accessed later on.,
django/,490,Same purpose as ForwardManyToOneDescriptor.__reduce__().,
django/,590,Guard against field-like objects such as GenericRelation,
django/,591,that abuse create_reverse_many_to_one_manager() with reverse,
django/,592,one-to-many relationships instead and break known related,
django/,593,objects assignment.,
django/,597,The relationship has multiple target fields. Use a tuple,
django/,598,for related object id.,
django/,612,nothing to clear from cache,
django/,634,"Since we just bypassed this class' get_queryset(), we must manage",
django/,635,the reverse relation manually.,
django/,692,remove() and clear() are only provided if the ForeignKey can have a value of null.,
django/,704,Is obj actually part of this descriptor set?,
django/,723,`QuerySet.update()` is intrinsically atomic.,
django/,733,Force evaluation of `objs` in case it's a queryset whose value,
django/,734,could be affected by `manager.clear()`. Refs #19816.,
django/,785,through is provided so that you have easy access to the through,
django/,786,"model (Book.authors.through) for inlines, etc. This is done as",
django/,787,a property to ensure that the fully resolved value is returned.,
django/,854,"Even if this relation is not to pk, we require still pk value.",
django/,855,"The wish is that the instance has been already saved to DB,",
django/,856,although having a pk value isn't a guarantee of that.,
django/,870,No need to add a subquery condition if removed_vals is a QuerySet without,
django/,871,filters.,
django/,898,nothing to clear from cache,
django/,917,M2M: need to annotate the query in order to get the primary model,
django/,918,that the secondary model was actually related to. We know that,
django/,919,"there will already be a join on the join table, so we can just add",
django/,920,the select.,
django/,922,"For non-autocreated 'through' models, can't assume we are",
django/,923,dealing with PK values.,
django/,954,"If this is a symmetrical m2m relation to self, add the mirror",
django/,955,entry in the m2m table.,
django/,990,Force evaluation of `objs` in case it's a queryset whose value,
django/,991,could be affected by `manager.clear()`. Refs #19816.,
django/,1028,We only need to add() if created because if we got an object back,
django/,1029,from get() then the relationship already exists.,
django/,1038,We only need to add() if created because if we got an object back,
django/,1039,from get() then the relationship already exists.,
django/,1098,Conflicts can be ignored when the intermediary model is,
django/,1099,auto-created as the only possible collision is on the,
django/,1100,"(source_id, target_id) tuple. The same assertion doesn't hold for",
django/,1101,user-defined intermediary models as they could have other fields,
django/,1102,causing conflicts which must be surfaced.,
django/,1107,Don't send the signal when inserting duplicate data row,
django/,1108,for symmetrical reverse entries.,
django/,1112,Fast addition through bulk insertion can only be performed,
django/,1113,if no m2m_changed listeners are connected for self.through,
django/,1114,as they require the added set of ids to be provided via,
django/,1115,pk_set.,
django/,1119,source_field_name: the PK fieldname in join table for the source object,
django/,1120,target_field_name: the PK fieldname in join table for the target object,
django/,1121,"*objs - objects to add. Either object instances, or primary keys of object instances.",
django/,1149,Add the ones that aren't there already.,
django/,1166,source_field_name: the PK colname in join table for the source object,
django/,1167,target_field_name: the PK colname in join table for the target object,
django/,1168,"*objs - objects to remove. Either object instances, or primary",
django/,1169,keys of object instances.,
django/,1173,Check that all the objects are of the right type,
django/,1184,Send a signal to the other end if need be.,
django/,37,"A case like Restaurant.objects.filter(place=restaurant_instance),",
django/,38,where place is a OneToOneField and the primary key of Restaurant.,
django/,49,"If we get here, we are dealing with single-column relations.",
django/,51,We need to run the related field's get_prep_value(). Consider case,
django/,52,ForeignKey to IntegerField given value 'abc'. The ForeignKey itself,
django/,53,"doesn't have validation for non-integers, so we must run validation",
django/,54,using the target field.,
django/,56,Run the target field's get_prep_value. We can safely assume there is,
django/,57,only one as we don't get to the direct value branch otherwise.,
django/,64,For multicolumn lookups we need to build a multicolumn where clause.,
django/,65,This clause is either a SubqueryConstraint (for values that need to be compiled to,
django/,66,SQL) or an OR-combined list of (col1 = val1 AND col2 = val2 AND ...) clauses.,
django/,92,"A case like Restaurant.objects.filter(place__in=restaurant_qs),",
django/,93,where place is a OneToOneField and the primary key of,
django/,94,Restaurant.,
django/,105,"If we get here, we are dealing with single-column relations.",
django/,107,We need to run the related field's get_prep_value(). Consider case,
django/,108,ForeignKey to IntegerField given value 'abc'. The ForeignKey itself,
django/,109,"doesn't have validation for non-integers, so we must run validation",
django/,110,using the target field.,
django/,112,Get the target field. We can safely assume there is only one,
django/,113,as we don't get to the direct value branch otherwise.,
django/,50,"The values to use for ""blank"" in SelectFields. Will be appended to the start",
django/,51,"of most ""choices"" lists.",
django/,59,A guide to Field parameters:,
django/,60,,
django/,61,* name:      The name of the field specified in the model.,
django/,62,* attname:   The attribute to use on the model object. This is the same as,
django/,63,"""name"", except in the case of ForeignKeys, where ""_id"" is",
django/,64,appended.,
django/,65,* db_column: The db_column specified in the model (or None).,
django/,66,* column:    The database column for this field. This is the same as,
django/,67,"""attname"", except if db_column is specified.",
django/,68,,
django/,69,"Code that introspects values, or does other dynamic things, should use",
django/,70,"attname. For example, this gets the primary key value of object ""obj"":",
django/,71,,
django/,72,"getattr(obj, opts.pk.attname)",
django/,88,Designates whether empty strings fundamentally are allowed at the,
django/,89,database level.,
django/,93,These track each time a Field instance is created. Used to retain order.,
django/,94,The auto_creation_counter is used for fields that Django implicitly,
django/,95,"creates, creation_counter is used for all user-specified fields.",
django/,98,Default set of validators,
django/,105,"Translators: The 'lookup_type' is one of 'date', 'year' or 'month'.",
django/,106,"Eg: ""Title must be unique for pub_date year""",
django/,113,Field flags,
django/,124,"Generic field type description, usually overridden by subclasses",
django/,139,May be set by set_attributes_from_name,
django/,140,Store original for deconstruction,
django/,161,"Adjust the appropriate creation counter, and save our local copy.",
django/,169,Store for deconstruction later,
django/,175,Store for deconstruction later,
django/,258,"Expect [group_name, [value, display]]",
django/,263,Containing non-pairs,
django/,277,"No groups, choices in the form [value, display]",
django/,284,Special case: choices=['ab'],
django/,323,We cannot reliably check this for backends like Oracle which,
django/,324,consider NULL and '' to be equal (and thus set up,
django/,325,character-based fields a little differently).,
django/,449,Short-form way of fetching all the default parameters,
django/,483,Unroll anything iterable for choices into a concrete list,
django/,486,Do correct kind of comparison,
django/,493,Work out path - we shorten it for known Django core fields,
django/,503,Return basic info - other fields should override this.,
django/,515,Needed for @total_ordering,
django/,521,This is needed because bisect does not take a comparison function.,
django/,530,"We don't have to deepcopy very much here, since most things are not",
django/,531,intended to be altered after initial creation.,
django/,541,"We need to avoid hitting __reduce__, so define this",
django/,542,slightly weird copy construct.,
django/,555,Fields are sometimes used without attaching them to models (for,
django/,556,example in aggregation). In this case give back a plain field,
django/,557,instance. The code below will create a new empty instance of,
django/,558,"class self.__class__, then update its dict with self.__dict__",
django/,559,"values - so, this is very close to normal pickle.",
django/,561,The _get_default cached_property can't be pickled due to lambda,
django/,562,usage.,
django/,617,Skip validation for non-editable fields.,
django/,623,"This is an optgroup, so look inside the group for",
django/,624,options.,
django/,673,The default implementation of this method looks at the,
django/,674,"backend-specific data_types dictionary, looking up the field by its",
django/,675,"""internal type"".",
django/,676,,
django/,677,A Field class can implement the get_internal_type() method to specify,
django/,678,"which *preexisting* Django Field class it's most similar to -- i.e.,",
django/,679,"a custom field might be represented by a TEXT column type, which is",
django/,680,"the same as the TextField Django field type, which means the custom",
django/,681,field's get_internal_type() returns 'TextField'.,
django/,682,,
django/,683,But the limitation of the get_internal_type() / data_types approach,
django/,684,is that it cannot handle database column types that aren't already,
django/,685,"mapped to one of the built-in Django field types. In this case, you",
django/,686,can implement db_type() instead of get_internal_type() to specify,
django/,687,exactly which wacky database column type you want to use.,
django/,764,Don't override classmethods with the descriptor. This means that,
django/,765,"if you have a classmethod and a field with the same name, then",
django/,766,such fields can't be deferred (we don't have a check for this).,
django/,770,Don't override a get_FOO_display() method defined explicitly on,
django/,771,"this class, but don't check methods derived from inheritance, to",
django/,772,allow overriding inherited choices. For more complex inheritance,
django/,773,structures users should override contribute_to_class().,
django/,840,return empty string,
django/,905,Fields with choices get special treatment.,
django/,916,"Many of the subclass-specific formfield arguments (min_value,",
django/,917,"max_value) don't apply for choice fields, so be sure to only pass",
django/,918,the values that TypedChoiceField will understand.,
django/,949,1/0 are equal to True/False. bool() converts former to latter.,
django/,973,"In HTML checkboxes, 'required' means ""must be checked"" which is",
django/,974,"different from the choices case (""must select some value"").",
django/,975,required=False allows unchecked checkboxes.,
django/,1032,Passing max_length to forms.CharField means that the value's length,
django/,1033,will be validated twice. This is considered acceptable since we want,
django/,1034,the value in the form field (to pass into widget for example).,
django/,1036,TODO: Handle multiple backends with different feature flags.,
django/,1069,"auto_now, auto_now_add, and default are mutually exclusive",
django/,1070,options. The use of more than one of these options together,
django/,1071,will trigger an Error,
django/,1126,"Nothing to do, as dates don't have tz information",
django/,1129,No explicit date / datetime value -- no checks necessary,
django/,1168,Convert aware datetimes to the default time zone,
django/,1169,before casting them to dates (#17742).,
django/,1218,Casts dates into the format expected by the backend,
django/,1247,__init__ is inherited from DateField,
django/,1275,No explicit date / datetime value -- no checks necessary,
django/,1303,"For backwards compatibility, interpret naive datetimes in",
django/,1304,"local time. This won't work during DST change, but we can't",
django/,1305,"do much about it, so we let the exceptions percolate up the",
django/,1306,call stack.,
django/,1351,"contribute_to_class is inherited from DateField, it registers",
django/,1352,get_next_by_FOO and get_prev_by_FOO,
django/,1358,"For backwards compatibility, interpret naive datetimes in local",
django/,1359,"time. This won't work during DST change, but we can't do much",
django/,1360,"about it, so we let the exceptions percolate up the call stack.",
django/,1374,Casts datetimes into the format expected by the backend,
django/,1590,max_length=254 to be compliant with RFCs 3696 and 5321,
django/,1596,We do not exclude max_length if it matches default as we want to change,
django/,1597,the default in future.,
django/,1601,"As with CharField, this will cause email validation to be performed",
django/,1602,twice.,
django/,1740,These validators can't be added at field initialization time since,
django/,1741,they're based on values retrieved from `connection`.,
django/,2060,Passing max_length to forms.CharField means that the value's length,
django/,2061,will be validated twice. This is considered acceptable since we want,
django/,2062,the value in the form field (to pass into widget for example).,
django/,2114,No explicit time / datetime value -- no checks necessary,
django/,2151,Not usually a good idea to pass in a datetime here (it loses,
django/,2152,"information), but this can be a side-effect of interacting with a",
django/,2153,"database backend (e.g. Oracle), so we'll be accommodating.",
django/,2186,Casts times into the format expected by the backend,
django/,2217,"As with CharField, this will cause URL validation to be performed",
django/,2218,twice.,
django/,2283,"If it's a string, it should be base64-encoded data",
django/,42,Attempt to import the app's module.,
django/,49,Reset the registry to the state before the last import,
django/,50,as this import will have to reoccur on the next request and,
django/,51,this could raise NotRegistered and AlreadyRegistered,
django/,52,exceptions (see #8245).,
django/,56,Decide whether to bubble up this error. If the app just,
django/,57,"doesn't have the module in question, we can ignore the error",
django/,58,"attempting to import it, otherwise we want it to bubble up.",
django/,69,package isn't a package.,
django/,76,"When module_name is an invalid dotted path, Python raises",
django/,77,ModuleNotFoundError. AttributeError is raised on PY36 (fixed in PY37),
django/,78,if the penultimate part of the path is not a package.,
django/,89,Convert to list because _NamespacePath does not support indexing.,
django/,25,Fail loudly when content has control chars (unsupported in XML 1.0),
django/,26,See https://www.w3.org/International/questions/qa-controls,
django/,31,Sort attrs for a deterministic output.,
django/,12,"Mapping of an escape character to a representative of that class. So, e.g.,",
django/,13,"""\w"" is replaced by ""x"" in a reverse URL. A value of None means to ignore",
django/,14,this sequence. Any missing key is mapped to itself.,
django/,61,Do a linear scan to work out the special features of this pattern. The,
django/,62,idea is that we scan once here and collect all the information we need to,
django/,63,make future decisions.,
django/,70,"A ""while"" loop is used here because later on we need to be able to peek",
django/,71,at the next character and possibly go around without consuming another,
django/,72,one at the top of the loop.,
django/,83,"Replace ""any character"" with an arbitrary representative.",
django/,86,"FIXME: One day we'll should do this, but not in 1.0.",
django/,93,"This can only be the end of a non-capturing group, since all",
django/,94,other unescaped parentheses are handled by the grouping,
django/,95,section later (and the full group is handled there).,
django/,96,,
django/,97,We regroup everything inside the capturing group so that it,
django/,98,"can be quantified, if necessary.",
django/,103,Replace ranges with the first character in the range.,
django/,110,Some kind of group.,
django/,113,A positional group,
django/,121,All of these are ignorable. Walk to the end of the,
django/,122,group.,
django/,125,Non-capturing group,
django/,128,"Anything else, other than a named group, is something",
django/,129,we cannot reverse.,
django/,135,We are in a named capturing group. Extra the name and,
django/,136,then skip to the end.,
django/,139,We are in a named backreference.,
django/,148,Named backreferences have already consumed the,
django/,149,parenthesis.,
django/,156,Quantifiers affect the previous item in the result list.,
django/,159,"We had to look ahead, but it wasn't need to compute the",
django/,160,"quantifier, so use this character next time around the",
django/,161,main loop.,
django/,166,If we are quantifying a capturing group (or,
django/,167,something containing such a group) and the minimum is,
django/,168,"zero, we must also handle the case of one occurrence",
django/,169,"being present. All the quantifiers (except {0,0},",
django/,170,which we conveniently ignore) that have a 0 minimum,
django/,171,also allow a single occurrence.,
django/,178,Anything else is a literal.,
django/,187,A case of using the disjunctive form. No results for you!,
django/,262,"Consume the trailing '?', if necessary.",
django/,343,Compile the regex if it was not passed pre-compiled.,
django/,166,Some corrupt tar files seem to produce this,
django/,167,(specifically bad symlinks),
django/,203,A directory,
django/,211,Convert ZipInfo.external_attr to mode,
django/,1,These classes override date and datetime to ensure that strftime('%Y'),
django/,2,returns four digits (with leading zeros) on years < 1000.,
django/,3,https://bugs.python.org/issue13305,
django/,4,,
django/,5,Based on code submitted to comp.lang.python by Andrew Dalke,
django/,6,,
django/,7,">>> datetime_safe.date(10, 8, 2).strftime(""%Y/%m/%d was a %A"")",
django/,8,'0010/08/02 was a Monday',
django/,56,"This library does not support strftime's ""%s"" or ""%y"" format strings.",
django/,57,"Allowed if there's an even number of ""%""s because they are escaped.",
django/,62,Also finds overlaps,
django/,82,"For every non-leap year century, advance by",
django/,83,6 years to get into the 28-year repeat cycle,
django/,88,Move to around the year 2000,
django/,63,Determine the number of comma-separated sections and number of words in,
django/,64,each section for this sentence.,
django/,67,Convert to sentence case and add end punctuation.,
django/,25,remove current from todo's nodes & dependencies,
django/,29,The input is the result of a gettext_lazy() call.,
django/,55,Handle the common case first for performance reasons.,
django/,77,The input is the result of a gettext_lazy() call.,
django/,89,Handle the common case first for performance reasons.,
django/,131,"The list of safe characters here is constructed from the ""reserved"" and",
django/,132,"""unreserved"" characters specified in sections 2.2 and 2.3 of RFC 3986:",
django/,133,reserved    = gen-delims / sub-delims,
django/,134,"gen-delims  = "":"" / ""/"" / ""?"" / ""#"" / ""["" / ""]"" / ""@""",
django/,135,"sub-delims  = ""!"" / ""$"" / ""&"" / ""'"" / ""("" / "")""",
django/,136,"/ ""*"" / ""+"" / "","" / "";"" / ""=""",
django/,137,"unreserved  = ALPHA / DIGIT / ""-"" / ""."" / ""_"" / ""~""",
django/,138,"Of the unreserved characters, urllib.parse.quote() already considers all",
django/,139,but the ~ safe.,
django/,140,"The % character is also added to the list of safe characters here, as the",
django/,141,end of section 3.1 of RFC 3987 specifically mentions that % must not be,
django/,142,converted.,
django/,150,List of byte values that uri_to_iri() decodes from percent encoding.,
django/,151,"First, the unreserved characters from RFC 3986:",
django/,159,"And then everything above 128, because bytes ≥ 128 are part of multibyte",
django/,160,unicode characters.,
django/,181,"Fast selective unqote: First, split on '%' and then starting with the",
django/,182,"second block, decode the first 2 bytes if they represent a hex code to",
django/,183,"decode. The rest of the block is the part after '%AB', not containing",
django/,184,any '%'. Add that to the output without further processing.,
django/,209,"These are the ""reserved"" and ""unreserved"" characters specified in",
django/,210,sections 2.2 and 2.3 of RFC 2396:,
django/,211,"reserved    = "";"" | ""/"" | ""?"" | "":"" | ""@"" | ""&"" | ""="" | ""+"" | ""$"" | "",""",
django/,212,unreserved  = alphanum | mark,
django/,213,"mark        = ""-"" | ""_"" | ""."" | ""!"" | ""~"" | ""*"" | ""'"" | ""("" | "")""",
django/,214,"The list of safe characters here is constructed subtracting "";"", ""="",",
django/,215,"and ""?"" according to section 3.3 of RFC 2396.",
django/,216,"The reason for not subtracting and escaping ""/"" is that we are escaping",
django/,217,"the entire path, not a path segment.",
django/,236,CVE-2019-14235: A recursion shouldn't be used since the exception,
django/,237,handling uses massive amounts of memory,
django/,254,I know about `os.sep` and `os.altsep` but I want to leave,
django/,255,some flexibility for hardcoding separators.,
django/,68,no-cache supports multiple field names.,
django/,73,If there's already a max-age header but we're being asked to set a new,
django/,74,"max-age, use the minimum of the two ages. In practice this happens when",
django/,75,a decorator and a piece of middleware both operate on a given view.,
django/,79,Allow overriding private caching and vice versa,
django/,88,no-cache supports multiple field names.,
django/,97,True takes precedence.,
django/,139,"Preserve the headers required by Section 4.1 of RFC 7232, as well as",
django/,140,Last-Modified.,
django/,145,"Preserve cookies as per the cookie specification: ""If a proxy server",
django/,146,"receives a response which contains a Set-cookie header, it should",
django/,147,"propagate the Set-cookie header to the client, regardless of whether",
django/,148,the response was 304 (Not Modified) or 200 (OK).,
django/,149,https://curl.haxx.se/rfc/cookie_spec.html,
django/,155,Only return conditional responses on successful requests.,
django/,159,Get HTTP request headers.,
django/,167,Step 1 of section 6 of RFC 7232: Test the If-Match precondition.,
django/,171,Step 2: Test the If-Unmodified-Since precondition.,
django/,176,Step 3: Test the If-None-Match precondition.,
django/,183,Step 4: Test the If-Modified-Since precondition.,
django/,189,Step 5: Test the If-Range precondition (not supported).,
django/,190,Step 6: Return original response since there isn't a conditional response.,
django/,199,"If there isn't an ETag, then there can't be a match.",
django/,202,"The existence of an ETag means that there is ""a current",
django/,203,"representation for the target resource"", even if the ETag is weak,",
django/,204,so there is a match to '*'.,
django/,207,A weak ETag can never strongly match another ETag.,
django/,210,"Since the ETag is strong, this will only return True if there's a",
django/,211,strong match.,
django/,228,"If there isn't an ETag, then there isn't a match.",
django/,231,"The existence of an ETag means that there is ""a current",
django/,232,"representation for the target resource"", so there is a match to '*'.",
django/,235,"The comparison should be weak, so look for a match after stripping",
django/,236,off any weak indicators.,
django/,262,Can't have max-age negative,
django/,283,"Note that we need to keep the original order intact, because cache",
django/,284,"implementations may rely on the order of the Vary contents in, say,",
django/,285,computing an MD5 hash.,
django/,290,Use .lower() here so we treat headers as case-insensitive.,
django/,315,first check if LocaleMiddleware or another middleware added,
django/,316,"LANGUAGE_CODE to request, then fall back to the active language",
django/,317,which in turn can also fall back to settings.LANGUAGE_CODE,
django/,389,"If i18n or l10n are used, the generated cache key will be suffixed",
django/,390,with the current locale. Adding the raw value of Accept-Language is,
django/,391,redundant in that case and would result in storing the same content,
django/,392,under multiple keys in the cache. See #18191 for details.,
django/,402,"if there is no Vary header, we still need a cache key",
django/,403,for the request.build_absolute_uri(),
django/,175,"datetime.now(tz=utc) is slower, as documented in django.utils.timezone.now",
django/,243,Spec: https://cyber.harvard.edu/rss/rss.html,
django/,252,Author information.,
django/,274,Enclosure.,
django/,289,Categories.,
django/,295,Spec: https://tools.ietf.org/html/rfc4287,
django/,351,Author information.,
django/,361,Unique ID.,
django/,368,Summary.,
django/,372,Enclosures.,
django/,381,Categories.,
django/,385,Rights.,
django/,390,"This isolates the decision of what the system default is, so calling code can",
django/,391,"do ""feedgenerator.DefaultFeed"" instead of ""feedgenerator.Rss201rev2Feed"".",
django/,1,Copyright (c) 2010 Guilherme Gondim. All rights reserved.,
django/,2,Copyright (c) 2009 Simon Willison. All rights reserved.,
django/,3,Copyright (c) 2002 Drew Perttula. All rights reserved.,
django/,4,,
django/,5,License:,
django/,6,Python Software Foundation License version 2,
django/,7,,
django/,8,"See the file ""LICENSE"" for terms & conditions for usage, and a DISCLAIMER OF",
django/,9,ALL WARRANTIES.,
django/,10,,
django/,11,This Baseconv distribution contains no GNU General Public Licensed (GPLed),
django/,12,code so it may be used in proprietary projects just like prior ``baseconv``,
django/,13,distributions.,
django/,14,,
django/,15,All trademarks referenced herein are property of their respective holders.,
django/,16,,
django/,79,make an integer out of the number,
django/,84,create the result in base 'len(to_digits)',
django/,2,needed when logging_config doesn't start with logging.config,
django/,13,Default logging for Django. This sends an email to the site admins on every,
django/,14,"HTTP 500 error. Depending on DEBUG, all other log records are either sent to",
django/,15,the console (DEBUG=True) or discarded (DEBUG=False) by means of the,
django/,16,require_debug_true filter.,
django/,68,First find the logging configuration function ...,
django/,73,... then invoke it with the logging settings,
django/,108,"Since we add a nicely formatted traceback on our own, create a copy",
django/,109,of the log record without the exception data.,
django/,173,"Put 2XX first, since it should be the common case",
django/,186,"Any 5XX, or any other status code",
django/,207,Check if the response has already been logged. Multiple requests to log,
django/,208,"the same response can be received in some cases, e.g., when the",
django/,209,response is the result of an exception and is logged at the time the,
django/,210,exception is caught so that the exc_info can be recorded.,
django/,13,"format_cache is a mapping from (format_type, lang) to the format string.",
django/,14,"By using the cache, it is possible to avoid running get_format_modules",
django/,15,repeatedly.,
django/,117,The requested format_type has not been cached yet. Try to find it in any,
django/,118,of the format_modules for the given lang if l10n is enabled. If it's not,
django/,119,"there or if l10n is disabled, fall back to the project settings.",
django/,131,If a list of input formats from one of the format_modules was,
django/,132,"retrieved, make sure the ISO_INPUT_FORMATS are in this list.",
django/,195,Handle strings first for performance reasons.,
django/,197,Make sure booleans don't get treated as numbers,
django/,215,Handle strings first for performance reasons.,
django/,217,Don't treat booleans as numbers.,
django/,249,Special case where we suspect a dot meant decimal separator (see #22171),
django/,24,Make the common case fast,
django/,27,sign,
django/,29,Treat potentially very large/small floats as Decimals.,
django/,35,If the provided number is too small to affect any of the visible,
django/,36,"decimal places, consider it equal to '0'.",
django/,41,Format values with more than 200 digits (an arbitrary cutoff) using,
django/,42,scientific notation to avoid high memory usage in {:f}'.format().,
django/,47,Format the coefficient.,
django/,60,decimal part,
django/,70,grouping,
django/,73,if grouping is a sequence,
django/,76,grouping is a single value,
django/,22,Ignore 'self',
django/,3,We're using regular expressions rather than time.strptime because:,
django/,4,- They provide both validation and parsing.,
django/,5,- They're more flexible for datetimes.,
django/,6,- The date/datetime/time constructors produce friendlier error messages.,
django/,40,Support the sections of ISO 8601 date representation that are accepted by,
django/,41,timedelta,
django/,54,"Support PostgreSQL's day-time interval format, e.g. ""3 days 04:05:06"". The",
django/,55,year-month and mixed intervals cannot be converted to a timedelta and thus,
django/,56,aren't accepted.,
django/,39,We need to generate a derived key from our base key.  We can do this by,
django/,40,passing the key_salt and our base key through a pseudo-random function.,
django/,42,"If len(key_salt + secret) > block size of the hash algorithm, the above",
django/,43,"line is redundant and could be replaced by key = key_salt + secret, since",
django/,44,the hmac module does the same thing for keys longer than the block size.,
django/,45,"However, we need to ensure that we *always* do this.",
django/,49,RemovedInDjango40Warning.,
django/,52,"RemovedInDjango40Warning: when the deprecation ends, replace with:",
django/,53,"def get_random_string(length, allowed_chars='...'):",
django/,60,Define the new method if missing and complain about it,
django/,69,Define the old method as a wrapped call to the new method.,
django/,89,"RemovedInDjango40Warning: when the deprecation ends, replace with:",
django/,90,"def __init__(self, get_response):",
django/,103,"Mark the class as async-capable, but do the actual switch",
django/,104,inside __call__ to avoid swapping out dunder methods,
django/,108,"Exit out to async mode, if needed",
django/,19,Ensure final_path starts with base_path (using normcase to ensure we,
django/,20,"don't false-negative on case insensitive operating systems like Windows),",
django/,21,"further, one of the following conditions must be true:",
django/,22,a) The next character is the path separator (to prevent conditions like,
django/,23,"safe_join(""/dir"", ""/../d""))",
django/,24,b) The final path must be the same as the base path.,
django/,25,"c) The base path must be the most root path (meaning either ""/"" or ""C:\\"")",
django/,10,"Try hash to avoid converting a hashable iterable (e.g. string, frozenset)",
django/,11,to a tuple.,
django/,17,"Non-hashable, non-iterable.",
django/,30,"If an error is raised while importing a file, it's not placed in sys.modules.",
django/,31,This means that any future modifications aren't caught. Keep a list of these,
django/,32,file paths to allow watching them in the future.,
django/,60,get the filename from the last item in the stack,
django/,99,This is a hot path during reloading. Create a stable sorted list of,
django/,100,modules based on the module name and pass it to iter_modules_and_files().,
django/,101,This ensures cached results are returned in the usual case that modules,
django/,102,aren't loaded on the fly.,
django/,113,During debugging (with PyDev) the 'typing.io' and 'typing.re' objects,
django/,114,"are added to sys.modules, however they are types not modules and so",
django/,115,cause issues here.,
django/,119,__main__ (usually manage.py) doesn't always have a __spec__ set.,
django/,120,"Handle this by falling back to using __file__, resolved below.",
django/,121,See https://docs.python.org/reference/import.html#main-spec,
django/,122,"__file__ may not exists, e.g. when running ipdb debugger.",
django/,129,Modules could be loaded from places without a concrete location. If,
django/,130,"this is the case, skip them.",
django/,143,"The module could have been removed, don't fail loudly if this",
django/,144,is the case.,
django/,147,Network filesystems may return null bytes in file paths.,
django/,162,Inspired from Werkzeug:,
django/,163,https://github.com/pallets/werkzeug/blob/7477be2853df70a022d9613e765581b9411c3c39/werkzeug/_reloader.py,
django/,164,"Create a sorted list of the path components, longest first.",
django/,169,Add each part of the path to the tree.,
django/,172,Clear the last leaf in the tree.,
django/,175,Turn the tree into a list of Path instances.,
django/,196,"If the path is a file (like a zip file), watch the parent directory.",
django/,213,The server was started with `python -m django runserver`.,
django/,289,Prevent a race condition where URL modules aren't loaded when the,
django/,290,reloader starts by accessing the urlconf_module property.,
django/,294,Loading the urlconf can result in errors during development.,
django/,295,If this occurs then swallow the error and continue.,
django/,330,These are primarily used for testing.,
django/,340,Check for changes once per second.,
django/,359,watched_files may produce duplicate paths if globs overlap.,
django/,367,This is thrown when the file does not exist.,
django/,393,"In practice this shouldn't occur, however, it's possible that a",
django/,394,directory that doesn't exist yet is being watched. If it's outside of,
django/,395,sys.path then this will end up a new root. How to handle this isn't,
django/,396,clear: Not adding the root will likely break when subscribing to the,
django/,397,"changes, however, as this is currently an internal API,  no files",
django/,398,will be being watched outside of sys.path. Fixing this by checking,
django/,399,"inside watch_glob() and watch_dir() is expensive, instead this could",
django/,400,could fall back to the StatReloader if this case is detected? For,
django/,401,"now, watching its parent, if possible, is sufficient.",
django/,478,"Setup initial roots for performance, shortest roots first.",
django/,483,Group sorted watched_files by their parent directory.,
django/,486,These paths need to be relative to the parent directory.,
django/,493,"If the service is still available, raise the original exception.",
django/,503,"When using watch-project, it's not simple to get the relative",
django/,504,directory without storing some specific state. Store the full,
django/,505,"path to the directory in the subscription name, prefixed by its",
django/,506,"type (glob, files).",
django/,555,The service is down?,
django/,558,Watchman 4.9 includes multiple improvements to watching project,
django/,559,directories as well as case insensitive filesystems.,
django/,586,It's possible that the watchman service shuts down or otherwise,
django/,587,"becomes unavailable. In that case, use the StatReloader.",
django/,22,month names in Associated Press style,
django/,36,required for long date representation by some locales,
django/,21,"based on RFC 7232, Appendix C",
django/,128,"Consume generators and iterators, when doseq=True, to",
django/,129,work around https://bugs.python.org/issue31706.,
django/,168,email.utils.parsedate() does the job for RFC1123 dates; unfortunately,
django/,169,RFC7231 makes it mandatory to support RFC850 dates too. So we roll,
django/,170,our own RFC-compliant parsing.,
django/,183,year that appears to be more than 50 years in the future are,
django/,184,interpreted as representing the past.,
django/,209,Base 36 functions: useful for generating compact URLs,
django/,216,"To prevent overconsumption of server resources, reject any",
django/,217,base36 string that is longer than 13 base36 digits (13 digits,
django/,218,is sufficient to base36-encode any 64-bit integer),
django/,267,"Parse each ETag individually, and return any that are valid.",
django/,323,Chrome treats \ completely as / in paths but it could be part of some,
django/,324,basic auth credentials so we need to check both URLs.,
django/,340,Copied from urllib.parse.urlparse() but uses fixed urlsplit() function.,
django/,358,Copied from urllib.parse.urlsplit() with,
django/,359,https://github.com/python/cpython/pull/661 applied.,
django/,390,"Chrome considers any URL with more than two slashes to be absolute, but",
django/,391,urlparse is not so flexible. Treat any url with three slashes as unsafe.,
django/,396,e.g. invalid IPv6 addresses,
django/,398,"Forbid URLs like http:///example.com - with a scheme, but without a hostname.",
django/,399,"In that URL, example.com is not the hostname but, a path component. However,",
django/,400,"Chrome will still consider example.com to be the hostname, so we must not",
django/,401,allow this syntax.,
django/,404,Forbid URLs that start with control characters. Some browsers (like,
django/,405,Chrome) ignore quite a few control characters at the start of a,
django/,406,URL and might consider the URL as scheme relative.,
django/,410,Consider URLs without a scheme (e.g. //example.com/p) to be http.,
django/,457,Handle case of a control-name with no equal sign,
django/,24,UTC time zone as a tzinfo instance.,
django/,38,"In order to avoid accessing settings at compile time,",
django/,39,wrap the logic in a function and cache the result.,
django/,50,This function exists for consistency with get_current_timezone_name,
django/,73,Timezone selection functions.,
django/,75,These functions don't change os.environ['TZ'] and call time.tzset(),
django/,76,because it isn't thread safe.,
django/,133,Templates,
django/,153,Utilities,
django/,169,Emulate the behavior of astimezone() on Python < 3.6.,
django/,193,timeit shows that datetime.now(tz=utc) is 24% slower,
django/,199,"By design, these four functions don't perform any checks on their arguments.",
django/,200,The caller should ensure that they don't receive an invalid value like None.,
django/,233,This method is available for pytz time zones.,
django/,236,Check that we won't overwrite the timezone of an aware datetime.,
django/,240,This may be wrong around DST changes!,
django/,248,Emulate the behavior of astimezone() on Python < 3.6.,
django/,15,We capture the arguments to make returning them trivial,
django/,25,Fallback version,
django/,31,Make sure it's actually there and not an inner class,
django/,53,"We only support timezone when formatting datetime objects,",
django/,54,"not date objects (timezone information not appropriate),",
django/,55,or time objects (against established django policy).,
django/,125,NOQA: E743,
django/,171,pytz raises AmbiguousTimeError during the autumn DST change.,
django/,172,This happens mainly when __init__ receives a naive datetime,
django/,173,and sets self.timezone = get_default_timezone().,
django/,197,pytz raises AmbiguousTimeError during the autumn DST change.,
django/,198,This happens mainly when __init__ receives a naive datetime,
django/,199,and sets self.timezone = get_default_timezone().,
django/,202,`offset` is a datetime.timedelta. For negative values (to the west of,
django/,203,UTC) only days can be negative (days=-1) and seconds are always,
django/,204,"positive. e.g. UTC-1 -> timedelta(days=-1, seconds=82800, microseconds=0)",
django/,205,Positive offsets have days=0,
django/,237,NOQA: E743,
django/,245,pytz raises AmbiguousTimeError during the autumn DST change.,
django/,246,This happens mainly when __init__ receives a naive datetime,
django/,247,and sets self.timezone = get_default_timezone().,
django/,254,NOQA: E743,
django/,297,Special case,
django/,18,Configuration for urlize() function.,
django/,22,List of possible strings used for bullets in bulleted lists.,
django/,61,Escape every ASCII character with a value less than 32.,
django/,182,Note: in typical case this loop executes _strip_once once. Loop condition,
django/,183,"is redundant, but helps to reduce number of executions of _strip_once.",
django/,188,_strip_once wasn't able to detect more tags.,
django/,204,Tilde is part of RFC3986 Unreserved Characters,
django/,205,https://tools.ietf.org/html/rfc3986#section-2.3,
django/,206,See also https://bugs.python.org/issue16285,
django/,209,Handle IDN before quoting.,
django/,213,invalid IPv6 URL (normally square brackets in hostname part).,
django/,217,IDN -> ACE,
django/,218,invalid domain part,
django/,222,"Separately unquoting key/value, so as to not mix querystring separators",
django/,223,included in query values. See #22267.,
django/,226,urlencode will take care of quoting,
django/,264,Continue trimming until middle remains unchanged.,
django/,268,Trim wrapping punctuation.,
django/,274,Keep parentheses at the end only if they're balanced.,
django/,280,"Trim trailing punctuation (after trimming wrapping punctuation,",
django/,281,as encoded entities contain ';'). Unescape entities to avoid,
django/,282,breaking them by removing ';'.,
django/,293,An @ must be in the middle of the value.,
django/,299,value contains more than one @.,
django/,301,Dot must be in p2 (e.g. example.com),
django/,309,lead: Current punctuation trimmed from the beginning of the word.,
django/,310,middle: Current state of the word.,
django/,311,trail: Current punctuation trimmed from the end of the word.,
django/,313,Deal with punctuation.,
django/,316,Make URL we want to point to.,
django/,332,Make link.,
django/,40,For backwards compatibility since Django 2.0.,
django/,2,Originally from https://bitbucket.org/ned/jslex,
django/,87,"Because these tokens are matched as alternatives in a regex, longer",
django/,88,"possibilities must appear in the list before shorter ones, for example,",
django/,89,'>>' before '>'.,
django/,90,,
django/,91,"Note that we don't have to detect malformed Javascript, only properly",
django/,92,"lex correct Javascript, so much of this is simplified.",
django/,94,Details of Javascript lexical structure are taken from,
django/,95,http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf,
django/,97,A useful explanation of automatic semicolon insertion is at,
django/,98,http://inimino.org/~inimino/blog/javascript_semicolons,
django/,147,slash will mean division,
django/,152,slash will mean regex,
django/,205,"C doesn't grok regexes, and they aren't needed for gettext,",
django/,206,so just output a string instead.,
django/,209,"C doesn't have single-quoted strings, so make all strings",
django/,210,double-quoted.,
django/,215,C can't deal with Unicode escapes in identifiers.  We don't,
django/,216,"need them for gettext anyway, so replace them with something",
django/,217,innocuous,
django/,17,Standard connector type. Clients usually won't use this at all and,
django/,18,subclasses will usually override the value.,
django/,27,Required because django.db.models.query_utils.Q. Q. __init__() is,
django/,28,"problematic, but it is a natural Node subclass in all other respects.",
django/,99,We can reuse self.children to append or squash the node other.,
django/,102,We can squash the other node's children directly into this,
django/,103,"node. We are just doing (AB)(CD) == (ABCD) here, with the",
django/,104,addition that if the length of the other node is 1 the,
django/,105,"connector doesn't matter. However, for the len(self) == 1",
django/,106,"case we don't want to do the squashing, as it would alter",
django/,107,self.connector.,
django/,111,We could use perhaps additional logic here to see if some,
django/,112,children could be used for pushdown here.,
django/,114,"All __promise__ return the same wrapper method, they",
django/,115,look up the correct implementation when called.,
django/,131,Builds a wrapper around some magic method,
django/,133,Automatically triggers the evaluation of a lazy value and,
django/,134,applies the given magic method of the result type.,
django/,157,"object defines __str__(), so __prepare_class__() won't overload",
django/,158,a __str__() method from the proxied class.,
django/,180,Instances of this class are effectively immutable. It's just a,
django/,181,collection of functions. So we don't need to do anything,
django/,182,complicated for copying.,
django/,188,"Creates the proxy object, instead of the actual value.",
django/,254,Avoid infinite recursion when tracing __init__ (#19456).,
django/,258,"Note: if a subclass overrides __init__(), it will likely need to",
django/,259,override __copy__() and __deepcopy__() as well.,
django/,266,Assign to __dict__ to avoid infinite __setattr__ loops.,
django/,286,"Because we have messed with __class__ below, we confuse pickle as to what",
django/,287,class we are pickling. We're going to have to initialize the wrapped,
django/,288,"object to successfully pickle it, so we might as well just pickle the",
django/,289,wrapped object since they're supposed to act the same way.,
django/,290,,
django/,291,"Unfortunately, if we try to simply act like the wrapped object, the ruse",
django/,292,will break down when pickle gets our id(). Thus we end up with pickle,
django/,293,"thinking, in effect, that we are a distinct object from the wrapped",
django/,294,"object, but with the same __dict__. This can cause problems (see #25389).",
django/,295,,
django/,296,"So instead, we define our own __reduce__ method and custom unpickler. We",
django/,297,"pickle the wrapped object as the unpickler's argument, so that pickle",
django/,298,"will pickle it normally, and then the unpickler simply returns its",
django/,299,argument.,
django/,307,"If uninitialized, copy the wrapper. Use type(self), not",
django/,308,"self.__class__, because the latter is proxied.",
django/,311,"If initialized, return a copy of the wrapped object.",
django/,316,"We have to use type(self), not self.__class__, because the",
django/,317,latter is proxied.,
django/,327,Introspection support,
django/,330,"Need to pretend to be the wrapped class, for the sake of objects that",
django/,331,care about this (especially in equality tests),
django/,339,List/Tuple/Dictionary methods support,
django/,378,Return a meaningful representation of the lazy object for debugging,
django/,379,without evaluating the wrapped object.,
django/,389,"If uninitialized, copy the wrapper. Use SimpleLazyObject, not",
django/,390,"self.__class__, because the latter is proxied.",
django/,393,"If initialized, return a copy of the wrapped object.",
django/,398,"We have to use SimpleLazyObject, not self.__class__, because the",
django/,399,latter is proxied.,
django/,47,Convert datetime.date to datetime.datetime for comparison.,
django/,59,Deal with leapyears by subtracing the number of leapdays,
django/,68,ignore microseconds,
django/,71,"d is in the future compared to now, stop processing.",
django/,79,Now get the second item,
django/,14,_multi_decorate()'s bound_method isn't available in this scope. Cheat by,
django/,15,using it on a dummy function.,
django/,28,Apply a list/tuple of decorators if 'decorators' is one. Decorator,
django/,29,functions are applied so that the call order is the same as the,
django/,30,order in which they appear in the iterable.,
django/,36,bound_method has the signature that 'decorator' expects i.e. no,
django/,37,"'self' argument, but it's a closure over self so it can call",
django/,38,"'func'. Also, wrap method.__get__() in a function because new",
django/,39,"attributes can't be set on bound method objects, only on functions.",
django/,45,Copy any attributes that a decorator adds to the function it decorates.,
django/,48,"Preserve any existing attributes of 'method', including the name.",
django/,57,'obj' can be a class or a function. If 'obj' is a function at the time it,
django/,58,"is passed to _dec,  it will eventually be a method of the class it is",
django/,59,"defined on. If 'obj' is a class, the 'name' is required to be the name",
django/,60,of the method that will be decorated.,
django/,79,Don't worry about making _dec look similar to a list/tuple as it's rather,
django/,80,meaningless.,
django/,83,Change the name to aid debugging.,
django/,140,Defer running of process_response until after the template,
django/,141,has been rendered:,
django/,8,"Private, stable API for detecting the Python version. PYXY means ""Python X.Y",
django/,9,"or later"". So that third-party apps can use these values, each constant",
django/,10,should remain as long as the oldest supported Django version supports that,
django/,11,Python version.,
django/,22,Now build the two parts of the version number:,
django/,23,main = X.Y[.Z],
django/,24,sub = .devN - for pre-alpha releases,
django/,25,"| {a|b|rc}N - for alpha, beta, and rc releases",
django/,171,Split the color configuration into parts,
django/,176,A default palette has been specified,
django/,179,Process a palette defining string,
django/,182,"Break the definition into the role,",
django/,183,plus the list of specific instructions.,
django/,184,The role must be in upper case,
django/,191,The first instruction can contain a slash,
django/,192,to break apart fg/bg.,
django/,201,All remaining instructions are options,
django/,206,The nocolor palette has all available roles.,
django/,207,Use that palette as the basis for determining,
django/,208,if the role is valid.,
django/,212,"If there are no colors specified, return the empty palette.",
django/,20,Set up regular expressions,
django/,24,Used in normalize_newlines,
django/,41,True keeps trailing linebreaks,
django/,73,The truncation text didn't contain the %(truncated_text)s string,
django/,74,replacement argument so just append it to the text.,
django/,76,But don't append the truncation text if the current text already,
django/,77,ends in this.,
django/,93,Calculate the length to truncate to (max length - end_text length),
django/,110,Don't consider combining characters,
django/,111,as adding to the string length,
django/,117,Return the truncated string,
django/,121,Return the original string since no truncation was necessary,
django/,164,Count non-HTML chars/words and keep note of open tags,
django/,175,Checked through whole string,
django/,179,It's an actual non-HTML word or char,
django/,184,Check for tag,
django/,187,Don't worry about non tags or tags after our truncate point,
django/,190,Element names are always case-insensitive,
django/,195,Check for match in open tags list,
django/,201,"SGML: An end tag closes, back to the matching start tag,",
django/,202,all unclosed intervening start tags with omitted end tags,
django/,205,Add it to the start of the open tags list,
django/,214,Close any tags still open,
django/,217,Return string,
django/,254,Translators: This string is used as a separator between list elements,
django/,277,From http://www.xhaus.com/alan/python/httpcomp.html#gzip,
django/,278,Used with permission.,
django/,294,"Like compress_string, but for iterators of strings.",
django/,298,Output headers...,
django/,308,"Expression to match some_token and some_token=""with spaces"" (and similarly",
django/,309,for single-quoted strings).,
django/,17,Detect a running event loop in this thread.,
django/,25,Pass onwards.,
django/,28,"If the message is actually a function, then be a no-arguments decorator.",
django/,154,Do not return default here because __setitem__() may store,
django/,155,another value -- QueryDict.__setitem__() does. Look it up.,
django/,163,Do not return default_list here because setlist() may store,
django/,164,another value -- QueryDict.setlist() does. Look it up.,
django/,239,All list mutation functions complain.,
django/,22,Translations are cached in a dictionary for every language.,
django/,23,The active translations are stored by threadid to make them thread local.,
django/,27,The default translation is based on the settings file.,
django/,30,magic gettext number to separate context from message,
django/,33,"Format of Accept-Language header values. From RFC 2616, section 14.4 and 3.9",
django/,34,"and RFC 3066, section 2.1",
django/,93,"Merge if plural function is the same, else prepend.",
django/,139,"If a language doesn't have a catalog, use the Germanic default for",
django/,140,pluralization: anything except one is pluralized.,
django/,145,A module-level cache is used for caching 'django' translations,
django/,159,default lang should have at least one translation file available.,
django/,163,"No catalogs found for this language, set an empty catalog.",
django/,214,Don't set a fallback for the default language or any English variant,
django/,215,"(as it's empty, so it'll ALWAYS fall back to the default language)",
django/,219,Get from cache,
django/,230,NullTranslations() has no _catalog,
django/,232,Take plural and _info from first catalog found (generally Django's).,
django/,309,"If we don't have a real translation object, assume it's the default language.",
django/,360,Return an empty value of the corresponding type if an empty message,
django/,361,"is given, instead of metadata, which is the default gettext behavior.",
django/,374,Translation not found,
django/,416,Translation not found,
django/,446,"First, a quick check to make sure lang_code is well-formed (#21458)",
django/,477,"If 'fr-ca' is not supported, try special fallback or language-only 'fr'.",
django/,491,"if fr-fr is not supported, try fr-ca.",
django/,1,These are versions of the functions in django.utils.translation.trans_real,
django/,2,"that don't actually do anything. This is purely for performance, so that",
django/,3,settings.USE_I18N = False can use this module rather than trans_real.py.,
django/,34,"Here be dragons, so a short explanation of the logic won't hurt:",
django/,35,"We are trying to solve two problems: (1) access settings, in particular",
django/,36,"settings.USE_I18N, as late as possible, so that modules can be imported",
django/,37,"without having to first configure Django, and (2) if some other code creates",
django/,38,"a reference to one of these functions, don't break that reference when we",
django/,39,replace the functions with their real counterparts (once we do access the,
django/,40,settings).,
django/,70,"The Trans class is no more needed, so remove it from the namespace.",
django/,188,String doesn't contain a placeholder for the number.,
django/,277,A language with > 2 characters after the dash only has its first,
django/,278,character after the dash capitalized; e.g. sr-latn becomes sr_Latn.,
django/,279,A language with 2 characters after the dash has both characters,
django/,280,capitalized; e.g. en-us becomes en_US.,
django/,22,Match the trans/translate 'some text' part.,
django/,24,Match and ignore optional filters,
django/,26,Match the optional context part,
django/,52,Adding the u prefix allows gettext to recognize the string (#26093).,
django/,142,Handle comment tokens (`{# ... #}`) plus other constructs on,
django/,143,the same line:,
django/,175,A context is provided,
django/,192,A context is provided,
django/,151,The object_list is converted to a list so that if it was a QuerySet,
django/,152,it won't be a database hit per __getitem__.,
django/,177,"Special case, return zero if no items.",
django/,187,Special case for the last page because there can be orphans.,
django/,77,SECRET_KEY may be str or bytes.,
django/,111,Flag for if it's been compressed or not,
django/,115,Avoid zlib dependency unless compress is being used,
django/,132,TimestampSigner.unsign() returns str but base64 and zlib compression,
django/,133,operate on bytes.,
django/,137,It's compressed; uncompress it first,
django/,192,Check timestamp is not older than max_age,
django/,13,"These values, if given to validate(), will trigger the self.required check.",
django/,64,unicode letters range (must not be a raw string),
django/,66,IP patterns,
django/,68,"(simple regex, validated later)",
django/,70,Host patterns,
django/,72,Max length for domain name labels is 63 characters per RFC 1034 sec. 3.1,
django/,75,dot,
django/,76,can't start with a dash,
django/,77,domain label,
django/,78,or punycode label,
django/,79,can't end with a dash,
django/,80,may have a trailing dot,
django/,85,scheme is validated separately,
django/,86,user:pass authentication,
django/,88,port,
django/,89,resource path,
django/,100,Check first if the scheme is valid,
django/,105,Then check full URL,
django/,109,Trivial case failed. Try for possible IDN domain,
django/,113,"for example, ""Invalid IPv6 URL""",
django/,116,IDN -> ACE,
django/,117,invalid domain part,
django/,124,Now verify IPv6 in the netloc part,
django/,133,The maximum length of a full host name is 253 characters per RFC 1034,
django/,134,"section 3.1. It's defined to be 255 bytes or less, but this includes",
django/,135,one byte for the length of the name and one byte for the trailing dot,
django/,136,that's used to indicate absolute names in DNS.,
django/,157,dot-atom,
django/,158,quoted-string,
django/,161,max length for domain name labels is 63 characters per RFC 1034,
django/,165,"literal form, ipv4 or ipv6 address (SMTP 4.1.3)",
django/,189,Try for possible IDN domain-part,
django/,227,"Translators: ""letters"" means latin letters: a-z and A-Z.",
django/,412,A positive exponent adds that many trailing zeros.,
django/,416,If the absolute value of the negative exponent is larger than the,
django/,417,"number of digits, then it's the same as the number of digits,",
django/,418,because it'll consume all of the digits in digit_tuple and then,
django/,419,add abs(exponent) - len(digit_tuple) leading zeros after the,
django/,420,decimal point.,
django/,130,Normalize plain strings to instances of ValidationError.,
django/,146,Trigger an AttributeError if this ValidationError,
django/,147,doesn't have an error_dict.,
django/,99,HTTP/1.1 requires support for persistent connections. Send 'close' if,
django/,100,the content length is unknown to prevent clients from reusing the,
django/,101,connection.,
django/,104,Persistent connections require threading server.,
django/,107,Mark the connection for closing if it's set as such above or if the,
django/,108,application sent the header.,
django/,117,"Ignore broken pipe errors, otherwise pass on",
django/,126,Short-circuit parent method to not call socket.getfqdn,
django/,135,"0x16 = Handshake, 0x03 = SSL 3.0 or TLS 1.x",
django/,160,Strip all headers with underscores in the name before constructing,
django/,161,the WSGI environ. This prevents header-spoofing based on ambiguity,
django/,162,between underscores and dashes both normalized to underscores in WSGI,
django/,163,env vars. Nginx and Apache 2.4+ both do this as well.,
django/,190,"An error code has been sent, just exit",
django/,196,backpointer for logging & connection closing,
django/,208,ThreadingMixIn.daemon_threads indicates how threads will behave on an,
django/,209,abrupt shutdown; like quitting the server by the user or restarting,
django/,210,by the auto-reloader. True means the server will not wait for thread,
django/,211,termination before it quits. This will make auto-reloader faster,
django/,212,and will prevent the need to kill the server manually if a thread,
django/,213,isn't terminating correctly.,
django/,34,Try to get the CACHES entry for the given backend name first,
django/,39,"Trying to import the given backend, in case it's a dotted path",
django/,117,Some caches -- python-memcached in particular -- need to do a cleanup at the,
django/,118,end of a request cycle. If not implemented in a particular backend,
django/,119,cache.close is a no-op,
django/,17,Stub class to ensure not passing in a `timeout` argument results in,
django/,18,the default timeout,
django/,21,Memcached does not accept keys longer than this.,
django/,85,ticket 21147 - avoid time.time() related precision issues,
django/,170,Fetch the value again to avoid a race condition if another,
django/,171,caller added a value between the first get() and the add(),
django/,172,above.,
django/,205,"This is a separate method, rather than just a copy of has_key(),",
django/,206,"so that it always has the same functionality as has_key(), even",
django/,207,if a subclass overrides it.,
django/,47,Cache dir can be deleted at any time.,
django/,49,make some room if necessary,
django/,87,The file may have been removed by another process.,
django/,107,return early if no culling is required,
django/,109,Clear the cache when CULL_FREQUENCY = 0,
django/,110,Delete a random selection of entries,
django/,143,An empty file is considered expired.,
django/,145,On Windows a file has to be closed before deleting,
django/,42,This class uses cursors provided by the database connection. This means,
django/,43,"it reads expiration values as aware or naive datetimes, depending on the",
django/,44,value of USE_TZ and whether the database supports time zones. The ORM's,
django/,45,conversion and adaptation infrastructure is then used to avoid comparing,
django/,46,aware and naive datetimes accidentally.,
django/,134,"The DB column is expecting a string, so make sure the value is a",
django/,135,"string, not bytes. Refs #19274.",
django/,138,Note: typecasting for datetimes is needed by some 3rd party,
django/,139,"database backends. All core backends work without typecasting,",
django/,140,so be careful about changes here - test suite will NOT pick,
django/,141,regressions.,
django/,192,touch failed.,
django/,194,"To be threadsafe, updates/inserts are allowed to fail silently",
django/,9,"Global in-memory store of cache data. Keyed by name, to provide",
django/,10,multiple named local memory caches.,
django/,19,The exception type to catch from the underlying library for a key,
django/,20,"that was not found. This is a ValueError for python-memcache,",
django/,21,"pylibmc.NotFound for pylibmc, and cmemcache will return None without",
django/,22,raising an exception.,
django/,47,Using 0 in memcache sets a non-expiring timeout.,
django/,50,Other cache backends treat 0 as set-and-expire. To achieve this,
django/,51,"in memcache backends, a negative timeout must be passed.",
django/,54,"60*60*24*30, 30 days",
django/,55,See https://github.com/memcached/memcached/wiki/Programming#expiration,
django/,56,"""Expiration times can be set from 0, meaning ""never expire"", to",
django/,57,30 days. Any time higher than 30 days is interpreted as a Unix,
django/,58,timestamp date. If you want to expire an object on January 1st of,
django/,59,"next year, this is how you do that.""",
django/,60,,
django/,61,This means that we have to switch to absolute timestamps.,
django/,76,make sure the key doesn't keep its old value in case of failure to set (memcached's 1MB limit),
django/,89,Many clients don't clean up connections properly.,
django/,94,memcached doesn't support a negative delta,
django/,100,python-memcache responds to incr on nonexistent keys by,
django/,101,"raising a ValueError, pylibmc by raising a pylibmc.NotFound",
django/,102,"and Cmemcache returns None. In all cases,",
django/,103,we should raise a ValueError though.,
django/,112,memcached doesn't support a negative delta,
django/,118,python-memcache responds to incr on nonexistent keys by,
django/,119,"raising a ValueError, pylibmc by raising a pylibmc.NotFound",
django/,120,"and Cmemcache returns None. In all cases,",
django/,121,we should raise a ValueError though.,
django/,166,python-memcached doesn't support default values in get().,
django/,167,https://github.com/linsomniac/python-memcached/issues/159,
django/,168,Remove this method if that issue is fixed.,
django/,174,python-memcached's delete() returns True when key doesn't exist.,
django/,175,https://github.com/linsomniac/python-memcached/issues/170,
django/,176,Call _deletetouch() without the NOT_FOUND in expected results.,
django/,198,libmemcached manages its own connections. Don't call disconnect_all(),
django/,199,as it resets the failover state and creates unnecessary reconnects.,
django/,32,The supported URL schemes,
django/,34,Rewrite the following suffixes when determining the target filename.,
django/,36,Allow shipping invalid .py files without byte-compilation.,
django/,66,"if some directory is given, make sure it's nicely expanded",
django/,110,Setup a stub settings environment for template rendering,
django/,133,Ignore some files as they cause various breakages.,
django/,142,Only rewrite once,
django/,152,"Only render the Python files, as we don't want to",
django/,153,accidentally render Django templates files,
django/,200,downloads the file and returns the path,
django/,216,Check it's a valid directory name.,
django/,226,Check it cannot be imported.,
django/,271,Trying to get better name from response headers,
django/,279,Falling back to content type guessing,
django/,287,Move the temporary file to a filename that has better,
django/,288,chances of being recognized by the archive utils,
django/,294,Giving up,
django/,51,Catch missing argument for a better error message,
django/,216,Metadata about this command.,
django/,219,Configuration shortcuts that alter various logic.,
django/,221,"Whether to wrap the output in a ""BEGIN; COMMIT;""",
django/,224,"Arguments, common to all commands, which aren't defined by the argument",
django/,225,parser.,
django/,227,Command-specific options not defined by the argument parser.,
django/,324,Move positional args out of options to mimic legacy optparse,
django/,333,SystemCheckError takes care of its own formatting.,
django/,343,Ignore if connections aren't setup at this point (e.g. no,
django/,344,configured settings).,
django/,398,excludes silenced warnings,
django/,459,No databases are configured (or the dummy one),
django/,19,"isatty is not always implemented, #6223.",
django/,39,The nocolor palette has all available roles.,
django/,40,Use that palette as the basis for populating,
django/,41,the palette as defined in the environment.,
django/,51,"For backwards compatibility,",
django/,52,set style for ERROR_OUTPUT == ERROR,
django/,21,Emit the pre_migrate signal for every application.,
django/,38,Emit the post_migrate signal for every application.,
django/,57,"check if there are funny path extensions for executables, e.g. Windows",
django/,60,don't use extensions if the command ends with one of them,
django/,65,check if we find the command on PATH,
django/,97,Command object passed in.,
django/,101,Load the command object by name.,
django/,108,"If the command is already loaded, use it directly.",
django/,113,Simulate argument parsing to get the option defaults (see #10080 for details).,
django/,115,Use the `dest` option name from the parser option,
django/,124,Parser actions and actions from sub-parser choices.,
django/,138,Any required arguments which are passed in via **options must be passed,
django/,139,to parse_args().,
django/,149,Raise an error if any unknown options were passed.,
django/,163,Move positional args out of options to mimic legacy optparse,
django/,206,Output an extra note if settings are not properly configured,
django/,221,Get commands outside of try block to prevent swallowing exceptions,
django/,227,"If `subcommand` is missing due to misconfigured settings, the",
django/,228,following line will retrigger an ImproperlyConfigured exception,
django/,229,(get_commands() swallows the original one) so the user is,
django/,230,informed about it.,
django/,241,"If the command is already loaded, use it directly.",
django/,268,Don't complete if user hasn't sourced bash_completion file.,
django/,283,subcommand,
django/,286,subcommand options,
django/,287,special case: the 'help' subcommand has no options,
django/,290,special case: add the names of installed apps to options,
django/,294,Get the last part of the dotted path as the app name.,
django/,297,Fail silently if DJANGO_SETTINGS_MODULE isn't set. The,
django/,298,user will find out once they execute the command.,
django/,305,filter out previously specified options from available options,
django/,309,filter options by current input,
django/,312,append '=' to options which require args,
django/,316,Exit code of the bash completion function is never passed back to,
django/,317,"the user, so it's safe to always exit with 0.",
django/,318,For more details see #25420.,
django/,329,Display help if no arguments were given.,
django/,331,Preprocess options to extract --settings and --pythonpath.,
django/,332,"These options could affect the commands that are available, so they",
django/,333,must be processed early.,
django/,337,catch-all,
django/,342,Ignore any option errors at this point.,
django/,352,Start the auto-reloading dev server even if the code is broken.,
django/,353,The hardcoded condition is a code smell but we can't rely on a,
django/,354,flag on the command class because we haven't located it yet.,
django/,359,The exception will be raised later in the child process,
django/,360,started by the autoreloader. Pretend it didn't happen by,
django/,361,loading an empty list of applications.,
django/,366,Remove options not compatible with the built-in runserver,
django/,367,(e.g. options for the contrib.staticfiles' runserver).,
django/,368,Changes here require manually testing as described in,
django/,369,#27522.,
django/,375,"In all other cases, django.setup() is required to succeed.",
django/,388,Special-cases: We want 'django-admin --version' and,
django/,389,"'django-admin --help' to work, for backwards compatibility.",
django/,36,"Legacy behavior, tablename specified as argument",
django/,57,"""key"" is a reserved word in MySQL, so use ""cache_key"" instead.",
django/,19,Known side effect: updating file access/modified time to current time if,
django/,20,it is writable.,
django/,75,"Walk entire tree, looking for locale directories",
django/,83,Gather existing directories.,
django/,91,Build locale list,
django/,97,Account for excluded locales,
django/,136,Check writability on first location,
django/,33,Create a test database.,
django/,36,Import the fixture data into the test database.,
django/,39,Run the development server. Turn off auto-reloading because it causes,
django/,40,a strange error -- it causes this handle() method to be called,
django/,41,multiple times.,
django/,12,DiscoverRunner runs the checks after databases are set up.,
django/,55,Validate app_label.,
django/,60,"Load the current graph state, check the app and migration they asked for exists",
django/,70,Work out the list of predecessor migrations,
django/,92,Tell them what we're doing and optionally ask if we should proceed,
django/,110,"Load the operations from all those migrations and concat together,",
django/,111,along with collecting external dependencies and detecting,
django/,112,double-squashing,
django/,115,We need to take all dependencies from the first migration in the list,
django/,116,as it may be 0002 depending on 0001,
django/,156,Work out the value of replaces (any squashed ones we're re-squashing),
django/,157,need to feed their replaces into ours,
django/,165,Make a new migration with those operations,
django/,173,Use the name from --squashed-name.,
django/,177,Generate a name.,
django/,185,Write out the new migration file,
django/,80,"Import the 'management' module within each installed app, to register",
django/,81,dispatcher events.,
django/,86,Get the database we're operating from,
django/,89,Hook for backends needing any database preparation,
django/,91,Work out which apps have migrations and which do not,
django/,94,Raise an error if any migrations are applied before their dependencies.,
django/,97,"Before anything else, see if there's conflicting apps and drop out",
django/,98,hard if there are any,
django/,111,"If they supplied command line arguments, work out what they mean.",
django/,115,Validate app_label.,
django/,169,"At this point, ignore run_syncdb if there aren't any apps to sync.",
django/,171,Print some useful info,
django/,206,Run the syncdb phase.,
django/,215,Migrate!,
django/,221,"If there's changes that aren't in migrations yet, tell them how to fix it.",
django/,246,post_migrate signals have access to all models. Ensure that all models,
django/,247,are reloaded in case any are delayed.,
django/,251,Re-render models of real apps to include relationships now that,
django/,252,we've got a final state. This wouldn't be necessary if real apps,
django/,253,models were rendered with relationships in the first place.,
django/,264,"Send the post_migrate signal, so individual apps can do whatever they need",
django/,265,to do at this point.,
django/,309,Build the manifest of apps and models that are to be synchronized.,
django/,332,Create the tables for each model,
django/,338,"Never install unmanaged models, etc.",
django/,349,Deferred SQL is executed when exiting the editor's context.,
django/,17,Create a random SECRET_KEY to put it in the main settings.,
django/,40,'table_name_filter' is a stealth option,
django/,61,Determine types of tables and/or views to be introspected.,
django/,96,Holds column names used in the table so far,
django/,97,Maps column names to names of model fields,
django/,99,"Holds Field notes, to be displayed in a Python comment.",
django/,100,Holds Field parameters such as 'db_column'.,
django/,112,"Add primary_key and unique, if necessary.",
django/,132,Calling `get_field_type` to get the field type string and any,
django/,133,additional parameters and notes.,
django/,140,"Don't output 'id = meta.AutoField(primary_key=True)', because",
django/,141,that's assumed if it doesn't exist.,
django/,148,"Add 'null' and 'blank', if the 'null_ok' flag was present in the",
django/,149,table description.,
django/,150,If it's NULL...,
django/,156,Custom fields will have a dotted path,
django/,200,Only add the comment if the double underscore was in the original name,
django/,246,Add max_length for all CharFields.,
django/,58,no invalid tags,
django/,73,Make sure the app they asked for exists,
django/,85,Load the current graph state. Pass in None for the connection so,
django/,86,the loader doesn't try to resolve replaced migrations from DB.,
django/,89,Raise an error if any migrations are applied before their dependencies.,
django/,91,Non-default databases are only checked if database routers used.,
django/,96,At least one model must be migrated to the database.,
django/,103,"Before anything else, see if there's conflicting apps and drop out",
django/,104,hard if there are any and they don't want to merge,
django/,107,"If app_labels is specified, filter out conflicting migrations for unspecified apps",
django/,125,"If they want to merge and there's nothing to merge, then politely exit",
django/,130,"If they want to merge and there is something to merge, then",
django/,131,divert into the merge code,
django/,139,Set up autodetector,
django/,146,"If they want to make an empty migration, make one for each app",
django/,150,Make a fake changes() result we can pass to arrange_for_graph,
django/,163,Detect changes,
django/,172,No changes? Tell them.,
django/,195,Describe the migration,
django/,198,Display a relative path if it's below the current working,
django/,199,"directory, or an absolute path otherwise.",
django/,210,Write the migrations file to the disk.,
django/,217,We just do this once per app,
django/,223,"Alternatively, makemigrations --dry-run --verbosity 3",
django/,224,will output the migrations to stdout rather than saving,
django/,225,the file to the disk.,
django/,242,"Grab out the migrations in question, and work out their",
django/,243,common ancestor.,
django/,261,Now work out the operations along each divergent branch,
django/,267,"In future, this could use some of the Optimizer code",
django/,268,(can_optimize_through) to automatically see if they're,
django/,269,"mergeable. For now, we always just prompt the user.",
django/,277,"If they still want to merge it, then write out an empty",
django/,278,file depending on the migrations needing merging.,
django/,298,Write the merge migrations file to the disk,
django/,304,"Alternatively, makemigrations --merge --dry-run --verbosity 3",
django/,305,will output the merge migrations to stdout rather than saving,
django/,306,the file to the disk.,
django/,44,"Because settings are imported lazily, we need to explicitly load them.",
django/,58,"Inspired by Postfix's ""postconf -n"".",
django/,74,Close the DB connection -- unless we're still in a transaction. This,
django/,75,is required as a workaround for an edge case in MySQL: if the same,
django/,76,"connection is used to create tables, load data, and query, the query",
django/,77,"can return incorrect results. See Django #7572, MySQL #37735.",
django/,84,Keep a count of the installed objects and fixtures,
django/,91,Forcing binary mode may be revisited after dropping Python 2 support (see #22399),
django/,101,Django's test suite repeatedly tries to load initial_data fixtures,
django/,102,from apps that don't have any fixtures. Because disabling constraint,
django/,103,"checks can be expensive on some database (especially MSSQL), bail",
django/,104,out early if no fixtures are found.,
django/,118,"Since we disabled constraint checks, we must manually check for",
django/,119,any invalid keys that might have been added,
django/,127,"If we found even one object in a fixture, we need to reset the",
django/,128,database sequences.,
django/,187,psycopg2 raises ValueError if data contains NUL chars.,
django/,199,Add a newline after progress indicator.,
django/,209,Warn if the fixture we loaded contains 0 objects.,
django/,255,Save the fixture_dir and fixture_name for future error messages.,
django/,262,Check kept for backwards-compatibility; it isn't clear why,
django/,263,duplicates are only allowed in different directories.,
django/,127,Remove '.py' suffix,
django/,129,Preserve '.\' prefix on Windows to respect gettext behavior,
django/,148,This check is needed for the case of a symlinked file and its,
django/,149,source being processed inside a single group (locale dir);,
django/,150,removing either of those two removes both.,
django/,164,Ensure last line has its EOL,
django/,177,Strip the header,
django/,191,Force newlines of POT files to '\n' to work around,
django/,192,https://savannah.gnu.org/bugs/index.php?52395,
django/,297,Avoid messing with mutable class variables,
django/,354,Allow to run makemessages inside an app dir,
django/,361,Build locale list,
django/,369,Account for excluded locales,
django/,384,Build po files for each selected locale,
django/,396,"Gettext tools will output system-encoded bytestrings instead of UTF-8,",
django/,397,when looking up the version. It's especially a problem on Windows.,
django/,574,Print warnings,
django/,44,"Set up a dictionary to serve as the environment for the shell, so",
django/,45,that tab completion works on objects that are imported at runtime.,
django/,47,"Try activating rlcompleter, because it's handy.",
django/,52,"We don't have to wrap the following import in a 'try', because",
django/,53,we already know 'readline' was imported successfully.,
django/,56,Enable tab completion on systems using libedit (e.g. macOS).,
django/,57,These lines are copied from Python's Lib/site.py.,
django/,64,"We want to honor both $PYTHONSTARTUP and .pythonrc.py, so follow system",
django/,65,conventions and get $PYTHONSTARTUP first then .pythonrc.py.,
django/,74,Match the behavior of the cpython shell where an error in,
django/,75,PYTHONSTARTUP prints an exception and continues.,
django/,84,Execute the command and exit.,
django/,89,Execute stdin if it has anything to read and exit.,
django/,90,Not supported on Windows due to select.select() limitations.,
django/,45,Get the database we're operating from,
django/,70,Load migrations from disk/DB,
django/,73,"If we were passed a list of apps, validate it",
django/,76,"Otherwise, show all apps in alphabetic order",
django/,79,"For each app, print its migrations in order from oldest (roots) to",
django/,80,newest (leaves).,
django/,87,Give it a nice title if it's a squashed one,
django/,92,Mark it as applied/unapplied,
django/,101,"If we didn't print anything, then a small message",
django/,110,Load migrations from disk/DB,
django/,121,Generate the plan,
django/,129,Output,
django/,113,"We may have previously seen an ""all-models"" request for",
django/,114,this app (no model qualifier was given). In this case,
django/,115,there is no need adding specific models to the list.,
django/,122,This is just an app - no model qualifier,
django/,132,Check that the serialization format exists; this is a shortcut to,
django/,133,avoid collating all the objects and _then_ failing.,
django/,150,There is no need to sort dependencies when natural foreign,
django/,151,keys are not used.,
django/,184,"If dumpdata is outputting to stdout, there is no way to display progress",
django/,24,Note that we're assuming OSError means that the client program,
django/,25,isn't installed. There's a possibility OSError would be raised,
django/,26,"for some other reason, in which case this error message would be",
django/,27,"inaccurate. Still, this message catches the common case.",
django/,32,The following are stealth options used by Django's internals.,
django/,39,"Import the 'management' module within each installed app, to register",
django/,40,dispatcher events.,
django/,76,Empty sql_list may signify an empty database and post_migrate would then crash,
django/,78,Emit the post migrate signal. This allows individual applications to,
django/,79,respond as if the database had been migrated from scratch.,
django/,25,sqlmigrate doesn't support coloring its output but we need to force,
django/,26,no_color=True so that the BEGIN/COMMIT statements added by,
django/,27,output_transaction don't get colored either.,
django/,32,Get the database we're operating from,
django/,35,"Load up an loader to get all the migration data, but don't replace",
django/,36,migrations.,
django/,39,Resolve command-line arguments into a migration,
django/,41,Validate app_label,
django/,58,"Show begin/end around output for atomic migrations, if the database",
django/,59,supports transactional DDL.,
django/,62,Make a plan that represents just the requested migrations and show SQL,
django/,63,for it,
django/,27,Validation is called explicitly each time the server is reloaded.,
django/,57,We rely on the environment because it's currently the only,
django/,58,way to reach WSGIRequestHandler. This seems an acceptable,
django/,59,compromise considering `runserver` runs indefinitely.,
django/,108,If an exception was silenced in ManagementUtility.execute in order,
django/,109,"to be raised in the child process, raise it now.",
django/,113,'shutdown_message' is a stealth option.,
django/,119,"Need to check migrations here, so can't use the",
django/,120,requires_migrations_check attribute.,
django/,142,Use helpful error messages instead of ugly tracebacks.,
django/,153,Need to use an OS exit because sys.exit doesn't work in a thread,
django/,81,"POST data can't be accessed again, otherwise the original",
django/,82,exception would be raised.,
django/,85,The request logger receives events for any problematic request,
django/,86,The security logger receives events for all SuspiciousOperations,
django/,98,Allow sys.exit() to actually exit. See tickets #1023 and #4701,
django/,111,Force a TemplateResponse to be rendered.,
django/,140,Return an HttpResponse that displays a friendly error message.,
django/,53,"Adapt handler, if needed.",
django/,82,The exception-handling stack is still always synchronous for,
django/,83,"now, so adapt that way.",
django/,91,"Adapt the top of the stack, if needed.",
django/,93,We only assign to this when initialization is complete as it is used,
django/,94,as a flag for initialization being complete.,
django/,126,Setup default url resolver for this thread,
django/,146,Setup default url resolver for this thread.,
django/,167,Apply view middleware,
django/,175,"If it is an asynchronous view, run it in a subthread.",
django/,183,Complain if the view returned None (a common error).,
django/,186,"If the response supports deferred rendering, apply template",
django/,187,response middleware and then render the response,
django/,191,Complain if the template response middleware returned None (a common error).,
django/,215,Apply view middleware.,
django/,223,"If it is a synchronous view, run it in a subthread",
django/,234,Complain if the view returned None or an uncalled coroutine.,
django/,237,"If the response supports deferred rendering, apply template",
django/,238,response middleware and then render the response,
django/,242,Complain if the template response middleware returned None or,
django/,243,an uncalled coroutine.,
django/,262,Make sure the response is not a coroutine,
django/,272,Work out the resolver.,
django/,279,"Resolve the view, and assign the match object back to the request.",
django/,291,FBV,
django/,293,CBV,
django/,310,Other utility methods.,
django/,27,Number of seconds until a Request gives up on trying to read a request,
django/,28,body and aborts.,
django/,38,"TODO: Better is-prefix checking, slash handling?",
django/,42,"The Django path is different from ASGI scope path args, it should",
django/,43,combine with script name.,
django/,51,HTTP basics.,
django/,53,Ensure query string is encoded correctly.,
django/,62,WSGI-expecting code will need these for a while,
django/,76,Headers go into META.,
django/,85,"HTTP/2 say only ASCII chars are allowed in headers, but decode",
django/,86,latin1 just in case.,
django/,91,"Pull out request encoding, if provided.",
django/,93,Directly assign the body file to be our stream.,
django/,95,Other bits.,
django/,129,Size to chunk response bodies into for multiple response messages.,
django/,140,Serve only HTTP connections.,
django/,141,FIXME: Allow to override this.,
django/,147,Receive the HTTP request body as a stream object.,
django/,152,Request is complete and can be served.,
django/,155,Get the request and check for basic issues.,
django/,160,"Get the response, using the async mode of BaseHandler.",
django/,163,Increase chunk size on file responses (ASGI servers handles low-level,
django/,164,chunking).,
django/,167,Send the response.,
django/,172,Use the tempfile that auto rolls-over to a disk file as it fills up.,
django/,177,Early client disconnect.,
django/,179,"Add a body chunk from the message, if provided.",
django/,182,Quit out if that's the end.,
django/,207,There's no WSGI server to catch the exception further up,
django/,208,"if this fails, so translate it into a plain text response.",
django/,219,Collect cookies into headers. Have to preserve header case as there,
django/,220,are some non-RFC compliant clients that require e.g. Content-Type.,
django/,232,Initial response message.,
django/,238,Streaming responses need to be pinned to their iterator.,
django/,240,Access `__iter__` and not `streaming_content` directly in case,
django/,241,it has been overridden in a subclass.,
django/,247,"Ignore ""more"" as there may be more parts; instead,",
django/,248,use an empty final closing message with False.,
django/,251,Final closing message.,
django/,253,Other responses just need chunking.,
django/,255,Yield chunks of response.,
django/,39,size >= len(self.buffer),
django/,48,"since size is not None here, len(self.buffer) < size",
django/,67,If PATH_INFO is empty (e.g. accessing the SCRIPT_NAME URL without a,
django/,68,"trailing slash), operate as if '/' was requested.",
django/,72,be careful to only replace the first slash in the path because of,
django/,73,http://test/something and http://test//something being different as,
django/,74,stated in https://www.ietf.org/rfc/rfc2396.txt,
django/,81,"Set content_type, content_params, and encoding.",
django/,96,The WSGI spec says 'QUERY_STRING' may be absent.,
django/,144,If `wsgi.file_wrapper` is used the WSGI server does not call,
django/,145,".close on the response, but on the file wrapper. Patch it to use",
django/,146,response.close instead which takes care of closing all files.,
django/,170,"If Apache's mod_rewrite had a whack at the URL, Apache set either",
django/,171,SCRIPT_URL or REDIRECT_URL to the full resource URL before applying any,
django/,172,rewrites. Unfortunately not every Web server (lighttpd!) passes this,
django/,173,"information through all the time, so FORCE_SCRIPT_NAME, above, is still",
django/,174,needed.,
django/,179,"mod_wsgi squashes multiple successive slashes in PATH_INFO,",
django/,180,do the same with script_url before manipulating paths (#17133).,
django/,197,Non-ASCII values in the WSGI environ are arbitrarily decoded with,
django/,198,ISO-8859-1. This is wrong for Django websites where UTF-8 is the default.,
django/,199,Re-encode to recover the original bytestring.,
django/,69,Indicates if the implemented serializer is only available for,
django/,70,internal Django use.,
django/,92,Use the concrete parent class' _meta instead of the object's _meta,
django/,93,This is to avoid local_fields problems for proxy models. Refs #17717.,
django/,95,"When using natural primary keys, retrieve the pk field of the",
django/,96,parent for multi-table inheritance child models. That field must,
django/,97,"be serialized, otherwise deserialization isn't possible.",
django/,220,Call save on the Model baseclass directly. This bypasses any,
django/,221,model-defined save. The save is also forced to be raw.,
django/,222,raw=True is passed to any pre/post_save signals.,
django/,228,prevent a second (possibly accidental) call to save() from saving,
django/,229,the m2m data twice.,
django/,317,If this is a natural foreign key to an object that has a FK/O2O as,
django/,318,"the foreign key, use the FK value.",
django/,76,"Get a ""string version"" of the object's data.",
django/,98,"If related object has a natural key, use it",
django/,100,Iterable natural keys are rolled out as subelements,
django/,120,"If the objects in the m2m have a natural key, use it",
django/,123,Iterable natural keys are rolled out as subelements,
django/,173,"Look up the model using the model loading mechanism. If this fails,",
django/,174,bail.,
django/,177,Start building a data dictionary from the object.,
django/,183,Also start building a dict of m2m data (this is saved as,
django/,184,{m2m_accessor_attribute : [list_of_related_objects]}),
django/,189,Deserialize each field.,
django/,191,"If the field is missing the name attribute, bail (are you",
django/,192,sensing a pattern here?),
django/,197,Get the field from the Model. This will raise a,
django/,198,"FieldDoesNotExist if, well, the field doesn't exist, which will",
django/,199,be propagated correctly unless ignorenonexistent=True is used.,
django/,204,"As is usually the case, relation fields get the special treatment.",
django/,235,Return a DeserializedObject so that the m2m data has a place to live.,
django/,242,"Check if there is a child node named 'None', returning None if so.",
django/,250,"If there are 'natural' subelements, it must be a natural key",
django/,260,If this is a natural foreign key to an object that,
django/,261,"has a FK/O2O as the foreign key, use the FK value",
django/,265,"Otherwise, treat like a normal PK",
django/,283,"If there are 'natural' subelements, it must be a natural key",
django/,287,"Otherwise, treat like a normal PK value.",
django/,325,inspired by https://mail.python.org/pipermail/xml-sig/2005-March/011022.html,
django/,337,Below code based on Christian Heimes' defusedxml,
django/,359,expat 1.2,
django/,43,"Protected types (i.e., primitives like None, numbers, dates,",
django/,44,and Decimals) are passed through as is. All other values are,
django/,45,converted to string first.,
django/,86,Model: <list of field_names>,
django/,89,Look up the model and starting build a dict of data for it.,
django/,110,Handle each field,
django/,114,skip fields no longer on model,
django/,119,Handle M2M relations,
django/,129,Handle FK fields,
django/,139,Handle all other fields,
django/,19,Use the C (faster) implementation if possible,
django/,37,Workaround to represent dictionaries in insertion order.,
django/,38,See https://github.com/yaml/pyyaml/pull/143.,
django/,48,A nasty special case: base YAML doesn't support serialization of time,
django/,49,"types (as opposed to dates or datetimes, which it does support). Since",
django/,50,"we want to use the ""safe"" serializer for better interoperability, we",
django/,51,need to do something with those pesky times. Converting 'em to strings,
django/,52,"isn't perfect, but it's better than a ""!!python/time"" type which would",
django/,53,halt deserialization under any other language.,
django/,63,Grandparent super,
django/,29,Prevent trailing spaces,
django/,45,self._current has the field data,
django/,57,Grandparent super,
django/,82,"See ""Date Time String Format"" in the ECMA-262 specification.",
django/,25,Built-in serializers,
django/,169,"Process the list of models, and get the list of dependencies",
django/,178,Add any explicitly defined dependencies,
django/,186,Now add a dependency for any FK relation with a model that,
django/,187,defines a natural key,
django/,193,Also add a dependency for any simple M2M relation with a model,
django/,194,that defines a natural key.  M2M relations with explicit through,
django/,195,models don't count as dependencies.,
django/,204,Now sort the models to ensure that dependencies are met. This,
django/,205,is done by repeatedly iterating over the input list of models.,
django/,206,"If all the dependencies of a given model are in the final list,",
django/,207,that model is promoted to the end of the final list. This process,
django/,208,"continues until the input list is empty, or we do a full iteration",
django/,209,over the input models without promoting a model to the final list.,
django/,210,"If we do a full iteration without a promotion, that means there are",
django/,211,circular dependencies in the list.,
django/,219,If all of the models in the dependency list are either already,
django/,220,"on the final model list, or not on the original serialization list,",
django/,221,then we've found another model with all it's dependencies satisfied.,
django/,229,"If cycles are allowed, add the last skipped model and ignore",
django/,230,its dependencies. This could be improved by some graph,
django/,231,analysis to ignore as few dependencies as possible.,
django/,31,The following methods represent a public interface to private methods.,
django/,32,These shouldn't be overridden by subclasses unless absolutely necessary.,
django/,44,"Get the proper name for the file, as it will actually be saved.",
django/,54,"These methods are part of the public API, with default implementations.",
django/,78,"If the filename already exists, generate an alternative filename",
django/,79,until it doesn't exist.,
django/,80,"Truncate original name if required, so the new filename does not",
django/,81,exceed the max_length.,
django/,83,file_ext includes the dot.,
django/,87,Truncate file_root if max_length exceeded.,
django/,91,Entire file_root was truncated in attempt to find an available filename.,
django/,106,`filename` may include a path as returned by FileField.upload_to.,
django/,118,"The following methods form the public API for storage systems, but with",
django/,119,no default implementations. Subclasses must implement *all* of these.,
django/,181,The combination of O_CREAT and O_EXCL makes os.open() raise OSError if,
django/,182,the file already exists before it's opened.,
django/,236,Create any intermediate directories that do not exist.,
django/,240,"os.makedirs applies the global umask, so we reset it,",
django/,241,for consistency with file_permissions_mode behavior.,
django/,252,There's a potential race condition between get_available_name and,
django/,253,saving the file; it's possible that two threads might return the,
django/,254,"same name, at which point all sorts of fun happens. So we need to",
django/,255,"try to create the file, but if it already exists we have to go back",
django/,256,to get_available_name() and try again.,
django/,260,This file has a file path that we can move.,
django/,264,This is a normal uploadedfile that we can stream.,
django/,266,The current umask value is masked out by os.open!,
django/,283,A new name is needed if the file exists.,
django/,287,"OK, the file save worked. Break out of the loop.",
django/,293,"Store filenames with forward slashes, even on Windows.",
django/,299,"If the file or directory exists, delete it from the filesystem.",
django/,306,FileNotFoundError is raised if the file or directory was removed,
django/,307,concurrently.,
django/,343,Safe to use .replace() because UTC doesn't have DST,
django/,76,Iterate over this file-like object by newlines,
django/,82,Line split after a \r newline; yield buffer_.,
django/,84,Continue with line.,
django/,86,Line either split without a newline (line,
django/,87,continues after buffer_) or with \r\n,
django/,88,newline (line == b'\n').,
django/,90,"buffer_ handled, clear it.",
django/,93,"If this is the end of a \n or \r\n line, yield.",
django/,144,Clear the computed size.,
django/,65,: The default chunk size is 64 KB.,
django/,161,Check the content-length header to see if we should,
django/,162,"If the post is too large, we cannot use the Memory handler.",
django/,35,the default,
django/,36,LOCKFILE_FAIL_IMMEDIATELY,
django/,37,LOCKFILE_EXCLUSIVE_LOCK,
django/,39,--- Adapted from the pyserial project ---,
django/,40,detect size of ULONG_PTR,
django/,47,--- Union inside Structure by stackoverflow:3480240 ---,
django/,69,--- Define function prototypes for extra safety ---,
django/,91,shared lock,
django/,92,non-blocking,
django/,95,File locking is not supported.,
django/,98,Dummy functions that don't do anything.,
django/,100,File is not locked,
django/,104,File is unlocked,
django/,39,Sanitize the file name so that it can't be dangerous.,
django/,41,Just use the basename of the file -- anything else is dangerous.,
django/,44,File names longer than 255 characters can cause problems on older OSes.,
django/,72,The file was moved or deleted before the tempfile could unlink,
django/,73,it. Still sets self.file.close_called and calls,
django/,74,self.file.file.close() before the exception.,
django/,95,"Since it's in memory, we'll never have multiple chunks.",
django/,18,"Macintosh, Unix.",
django/,25,All other platforms: check for same pathname.,
django/,40,There's no reason to move if we don't have to.,
django/,51,OSError happens with os.rename() if moving to another filesystem or,
django/,52,when moving opened files on certain operating systems.,
django/,55,"first open the old file, so that it won't go away",
django/,57,"now open the new file, not forgetting allow_overwrite",
django/,73,Certain filesystems (e.g. CIFS) fail to copy the file's metadata if,
django/,74,the type of the destination filesystem isn't the same as the source,
django/,75,filesystem; ignore that.,
django/,82,Certain operating systems (Cygwin and Windows),
django/,83,"fail when deleting opened files, ignore it.  (For the",
django/,84,"systems where this happens, temporary files will be auto-deleted",
django/,85,on close anyway.),
django/,50,Most of the time Pillow only needs a small chunk to parse the image,
django/,51,"and get the dimensions, but with some TIFF files Pillow needs to",
django/,52,parse the whole file.,
django/,61,"ignore zlib complaining on truncated stream, just feed more",
django/,62,data to parser (ticket #19457).,
django/,68,Ignore PIL failing on a too short buffer when reads return,
django/,69,less bytes than expected. Skip and feed more data to the,
django/,70,parser (ticket #24544).,
django/,73,"e.g. ""RuntimeError: could not create decoder object"" for",
django/,74,WebP files. A different chunk_size may work.,
django/,43,Because close can be called during shutdown,
django/,44,we need to cache os.unlink and access it,
django/,45,as self.unlink only,
django/,102,Short circuit if there aren't any errors.,
django/,137,Here are several functions which return CheckMessage instances for the,
django/,138,most common usages of lazy operations throughout Django. These functions,
django/,139,"take the model that was being waited on as an (app_label, modelname)",
django/,140,"pair, the original lazy function, and its positional and keyword args as",
django/,141,determined by extract_operation().,
django/,161,The receiver is either a function or an instance of class,
django/,162,defining a `__call__` method.,
django/,187,Maps common uses of lazy operations to corresponding error functions,
django/,188,"defined above. If a key maps to None, no error will be produced.",
django/,189,default_error() will be used for usages that don't appear in this dict.,
django/,7,Import these to force registration of checks,
django/,8,NOQA isort:skip,
django/,9,NOQA isort:skip,
django/,10,NOQA isort:skip,
django/,11,NOQA isort:skip,
django/,12,NOQA isort:skip,
django/,13,NOQA isort:skip,
django/,14,NOQA isort:skip,
django/,15,NOQA isort:skip,
django/,16,NOQA isort:skip,
django/,17,NOQA isort:skip,
django/,1,Levels,
django/,32,We need to hardcode ModelBase and Field cases because its __str__,
django/,33,"method doesn't return ""applabel.modellabel"" and cannot be changed.",
django/,218,Support a comma-separated string or iterable of values to allow fallback.,
django/,10,"Cache the hostname, but do it lazily: socket.getfqdn() can take a couple of",
django/,11,"seconds, which slows down the restart of the server.",
django/,21,Don't BASE64-encode UTF-8 messages so that we avoid unwanted attention from,
django/,22,some spam filters.,
django/,24,Python defaults to BASE64,
django/,28,Default MIME type to use on attachments (if it is not explicitly given,
django/,29,and cannot be guessed).,
django/,39,Header names that contain structured address data (RFC #5322),
django/,58,val may be lazy,
django/,87,The entire email address must be parsed.,
django/,100,"Avoid UTF-8 encode, if it's possible.",
django/,142,message/rfc822 attachments must be ASCII,
django/,163,Quoted-Printable encoding has the side effect of shortening long,
django/,164,"lines, if any (#22561).",
django/,184,None => use settings default,
django/,246,"Email header names are case-insensitive (RFC 2045), so we have to",
django/,247,accommodate that when doing comparisons.,
django/,250,"formatdate() uses stdlib methods to format the date, which use",
django/,251,"the stdlib/OS concept of a timezone, however, Django sets the",
django/,252,TZ environment variable based on the TIME_ZONE setting which,
django/,253,will get picked up by formatdate().,
django/,256,Use cached DNS_NAME for performance,
django/,259,From is already handled,
django/,273,Don't bother creating the network connection if there's nobody to,
django/,274,send to.,
django/,304,If mimetype suggests the file is text but it's,
django/,305,"actually binary, read() raises a UnicodeDecodeError.",
django/,355,"Bug #18967: per RFC2046 s5.2.1, message/rfc822 attachments",
django/,356,must not be base64 encoded.,
django/,358,convert content into an email.Message first,
django/,361,"For compatibility with existing code, parse the message",
django/,362,into an email.Message object if it is not one already.,
django/,367,Encode non-text attachments with base64.,
django/,5,Imported for backwards compatibility and for the sake,
django/,6,of a cleaner namespace. These symbols used to be in,
django/,7,django/core/mail.py before the introduction of email,
django/,8,backends and the subsequent reorganization (See #10355),
django/,35,flush after each message,
django/,31,Make sure that self.file_path is writable.,
django/,34,"Finally, call super().",
django/,35,"Since we're using the console-based backend as a base,",
django/,36,"force the stream to be None, so we don't default to stdout",
django/,26,.message() triggers header validation,
django/,1,Mail backends shipped with Django.,
django/,48,Nothing to do if the connection is already open.,
django/,51,"If local_hostname is not specified, socket.getfqdn() gets used.",
django/,52,"For performance, we use the cached FQDN for local_hostname.",
django/,64,"TLS/SSL are mutually exclusive, so only attempt TLS over",
django/,65,non-secure connections.,
django/,83,This happens when calling quit() on a TLS connection,
django/,84,"sometimes, or when the connection was already disconnected",
django/,85,by the server.,
django/,104,We failed silently on open().,
django/,105,Trying to send would be pointless.,
django/,36,Maybe the language code is missing in the URL? Try adding the,
django/,37,language prefix and redirecting to that URL.,
django/,49,Insert language after the script prefix and before the,
django/,50,rest of the URL,
django/,25,Don't set it if it's already in the response,
django/,29,Don't set it if they used @xframe_options_exempt,
django/,9,"RemovedInDjango40Warning: when the deprecation ends, replace with:",
django/,10,"def __init__(self, get_response):",
django/,51,Support a comma-separated string or iterable of values to allow,
django/,52,fallback.,
django/,64,"RemovedInDjango40Warning: when the deprecation ends, replace with:",
django/,65,"def __init__(self, get_response):",
django/,81,"We don't need to update the cache, just return.",
django/,87,Don't cache responses that set a user-specific (and maybe security,
django/,88,sensitive) cookie in response to a cookie-less request.,
django/,92,Don't cache a response with 'Cache-Control: private',
django/,96,"Page timeout takes precedence over the ""max-age"" and the default",
django/,97,cache timeout.,
django/,100,"The timeout from the ""max-age"" section of the ""Cache-Control""",
django/,101,header takes precedence over the default cache timeout.,
django/,106,"max-age was set to 0, don't cache.",
django/,128,"RemovedInDjango40Warning: when the deprecation ends, replace with:",
django/,129,"def __init__(self, get_response):",
django/,144,Don't bother checking the cache.,
django/,146,try and get the cached GET response,
django/,150,"No cache information available, need to rebuild.",
django/,152,"if it wasn't found and we are looking for a HEAD, try looking just for that",
django/,159,"No cache information available, need to rebuild.",
django/,161,"hit, return cached response",
django/,173,"RemovedInDjango40Warning: when the deprecation ends, replace with:",
django/,174,"def __init__(self, get_response, cache_timeout=None, page_timeout=None, **kwargs):",
django/,178,"We need to differentiate between ""provided, but using default value"",",
django/,179,"and ""not provided"". If the value is provided using a default, then",
django/,180,"we fall back to system defaults. If it is not provided at all,",
django/,181,we need to use middleware defaults.,
django/,67,Note negative values are ok,
django/,106,Allow only ASCII alphanumerics,
django/,112,Older Django versions set cookies to values of CSRF_SECRET_LENGTH,
django/,113,"alphanumeric characters. For backwards compatibility, accept",
django/,114,such values as unmasked secrets.,
django/,115,"It's easier to mask here and be consistent later, rather than add",
django/,116,"different code paths in the checks, although that might be a tad more",
django/,117,efficient.,
django/,123,"Assume both arguments are sanitized -- that is, strings of",
django/,124,"length CSRF_TOKEN_LENGTH, all CSRF_ALLOWED_CHARS.",
django/,139,The _accept and _reject methods currently only exist for the sake of the,
django/,140,requires_csrf_token decorator.,
django/,142,Avoid checking the request twice by adding a custom attribute to,
django/,143,request.  This will be relevant when both decorator and middleware,
django/,144,are used.,
django/,176,Cookie token needed to be replaced;,
django/,177,the cookie needs to be reset.,
django/,196,Set the Vary header since content varies with the CSRF cookie.,
django/,202,Use same token next time.,
django/,209,"Wait until request.META[""CSRF_COOKIE""] has been manipulated before",
django/,210,"bailing out, so that get_token still works",
django/,214,Assume that anything not defined as 'safe' by RFC7231 needs protection,
django/,217,Mechanism to turn off CSRF checks for test suite.,
django/,218,"It comes after the creation of CSRF cookies, so that",
django/,219,everything else continues to work exactly the same,
django/,220,"(e.g. cookies are sent, etc.), but before any",
django/,221,branches that call reject().,
django/,225,Suppose user visits http://example.com/,
django/,226,"An active network attacker (man-in-the-middle, MITM) sends a",
django/,227,POST form that targets https://example.com/detonate-bomb/ and,
django/,228,submits it via JavaScript.,
django/,229,,
django/,230,"The attacker will need to provide a CSRF cookie and token, but",
django/,231,that's no problem for a MITM and the session-independent,
django/,232,secret we're using. So the MITM can circumvent the CSRF,
django/,233,"protection. This is true for any HTTP connection, but anyone",
django/,234,"using HTTPS expects better! For this reason, for",
django/,235,https://example.com/ we need additional protection that treats,
django/,236,"http://example.com/ as completely untrusted. Under HTTPS,",
django/,237,Barth et al. found that the Referer header is missing for,
django/,238,"same-domain requests in only about 0.2% of cases or less, so",
django/,239,we can use strict Referer checking.,
django/,246,Make sure we have a valid URL for Referer.,
django/,250,Ensure that our Referer is also secure.,
django/,254,"If there isn't a CSRF_COOKIE_DOMAIN, require an exact match",
django/,255,"match on host:port. If not, obey the cookie rules (or those",
django/,256,"for the session cookie, if CSRF_USE_SESSIONS).",
django/,268,request.get_host() includes the port.,
django/,273,"Create a list of all acceptable HTTP referers, including the",
django/,274,current host if it's permitted by ALLOWED_HOSTS.,
django/,283,Access csrf_token via self._get_token() as rotate_token() may,
django/,284,have been called by an authentication middleware during the,
django/,285,process_request() phase.,
django/,288,"No CSRF cookie. For POST requests, we insist on a CSRF cookie,",
django/,289,"and in this way we can avoid all CSRF attacks, including login",
django/,290,CSRF.,
django/,293,Check non-cookie token for match.,
django/,299,Handle a broken connection before we've completed reading,
django/,300,the POST data. process_view shouldn't raise any,
django/,301,"exceptions, so we'll ignore and serve the user a 403",
django/,302,"(assuming they're still listening, which they probably",
django/,303,aren't because of the error).,
django/,307,"Fall back to X-CSRFToken, to make things easier for AJAX,",
django/,308,and possible for PUT/DELETE.,
django/,325,"Set the CSRF cookie even if it's already set, so we renew",
django/,326,the expiry timer.,
django/,15,"It's too late to prevent an unsafe request with a 412 response, and",
django/,16,"for a HEAD request, the response body is always empty so computing",
django/,17,an accurate ETag isn't possible.,
django/,16,It's not worth attempting to compress really short responses.,
django/,20,Avoid gzipping if we've already got a content-encoding.,
django/,31,"Delete the `Content-Length` header for streaming content, because",
django/,32,we won't know the compressed size until we stream it.,
django/,36,Return the compressed content only if it's actually shorter.,
django/,43,"If there is a strong ETag, make it weak to fulfill the requirements",
django/,44,of RFC 7232 section-2.1 while also allowing conditional request,
django/,45,matches on ETags.,
django/,40,Check for denied User-Agents,
django/,47,Check for a redirect based on settings.PREPEND_WWW,
django/,52,Check if a slash should be appended,
django/,58,Return a redirect if necessary,
django/,84,Prevent construction of scheme relative urls.,
django/,104,"If the given URL is ""Not Found"", then check if we should redirect to",
django/,105,a path with a slash appended.,
django/,110,Add the Content-Length header to non-streaming responses if not,
django/,111,already set.,
django/,146,Different subdomains are treated as different domains.,
django/,155,The referer is empty.,
django/,159,APPEND_SLASH is enabled and the referer is equal to the current URL,
django/,160,without a trailing slash indicating an internal redirect.,
django/,164,A '?' in referer is identified as a search engine source.,
django/,168,"The referer is equal to the current URL, ignoring the scheme (assumed",
django/,169,to be a poorly implemented bot).,
django/,9,Imports are inside the function because its point is to avoid importing,
django/,10,the Site models when django.contrib.sites isn't installed.,
django/,37,First attempt to look up the site by host with or without port.,
django/,42,Fallback to looking up site after stripping port from the host.,
django/,21,"The default settings set SITE_ID = 1, and some tests in Django's test",
django/,22,"suite rely on this value. However, if database sequences are reused",
django/,23,"(e.g. in the test suite after flush/syncdb), it isn't guaranteed that",
django/,24,"the next id will be 1, so we coerce it. See #15573 and #16353. This",
django/,25,can also crop up outside of tests - see #15346.,
django/,30,"We set an explicit pk instead of relying on auto-incrementation,",
django/,31,so we need to reset the database sequence. See #17415.,
django/,21,Human-readable title to appear in the right sidebar.,
django/,25,This dictionary will eventually contain the request's query string,
django/,26,parameters actually used by this filter.,
django/,63,The parameter that should be used in the query string for that filter.,
django/,139,Fields may raise a ValueError or ValidationError when converting,
django/,140,the parameters to the correct type.,
django/,146,This is to allow overriding the default filters for certain types,
django/,147,of fields with some custom filters. The first found in the list,
django/,148,is used in priority.,
django/,311,"When time zone support is enabled, convert ""now"" to the user's time",
django/,312,"zone so Django's definition of ""Today"" matches what the user expects.",
django/,318,field is a models.DateField,
django/,375,"This should be registered last, because it's a last resort. For example,",
django/,376,"if a field is eligible to use the BooleanFieldListFilter, that'd be much",
django/,377,"more appropriate, and the AllValuesFieldListFilter won't get used for it.",
django/,386,Obey parent ModelAdmin queryset when deciding which options to show,
django/,60,"Since this module gets imported in the application's root package,",
django/,61,it cannot import models from other applications at the module level.,
django/,74,Defaults for formfield_overrides. ModelAdmin subclasses can change this,
django/,75,by adding to ModelAdmin.formfield_overrides.,
django/,123,Merge FORMFIELD_FOR_DBFIELD_DEFAULTS with the formfield_overrides,
django/,124,rather than simply overwriting.,
django/,137,"If the field specifies choices, we don't need to look for special",
django/,138,admin widgets - we just need to use a select widget of some kind.,
django/,142,ForeignKey or ManyToManyFields,
django/,144,Combine the field kwargs with any options for formfield_overrides.,
django/,145,Make sure the passed in **kwargs override anything in,
django/,146,"formfield_overrides because **kwargs is more specific, and should",
django/,147,always win.,
django/,151,Get the correct formfield.,
django/,157,"For non-raw_id fields, wrap the widget with a wrapper that adds",
django/,158,"extra HTML -- the ""add other"" interface -- to the end of the",
django/,159,rendered output. formfield can be None if it came from a,
django/,160,OneToOneField with parent_link=True or a M2M intermediary.,
django/,177,"If we've got overrides for the formfield defined, use 'em. **kwargs",
django/,178,passed to formfield_for_dbfield override the defaults.,
django/,184,"For any other type of field, just call its formfield() method.",
django/,191,"If the field is named as a radio_field, use a RadioSelect",
django/,193,Avoid stomping on custom widget/choices arguments.,
django/,246,"If it uses an intermediary model that isn't auto created, don't show",
django/,247,a field in admin.,
django/,290,use the ContentType lookup if view_on_site is True,
django/,317,_get_form_for_get_fields() is implemented in subclasses.,
django/,337,"otherwise we might try to *None, which is bad ;)",
django/,357,TODO: this should be handled by some parameter to the ChangeList.,
django/,371,"Check FKey lookups that are allowed, so that popups produced by",
django/,372,"ForeignKeyRawIdWidget, on the basis of ForeignKey.limit_choices_to,",
django/,373,are allowed to work.,
django/,375,"As ``limit_choices_to`` can be a callable, invoke it here.",
django/,387,"Lookups on nonexistent fields are ok, since they're ignored",
django/,388,later.,
django/,390,It is allowed to filter on values that would be found from local,
django/,391,"model anyways. For example, if you filter on employee__department__id,",
django/,392,then the id value would be found already from employee__department_id.,
django/,397,"This is not a relational field, so further parts",
django/,398,must be transforms.,
django/,404,"Either a local field filter, or no fields at all.",
django/,415,Is it a valid relational lookup?,
django/,433,Always allow referencing the primary key since it's already possible,
django/,434,to get this information from the change view URL.,
django/,438,Allow reverse relationships to models defining m2m fields if they,
django/,439,target the specified field.,
django/,444,Make sure at least one of the models registered for this site,
django/,445,references this field through a FK or a M2M relationship.,
django/,560,Custom templates (designed to be over-ridden in subclasses),
django/,569,Actions,
django/,619,For backwards compatibility (was the change url before 1.9),
django/,673,Exclude all fields if it's a change form and the user doesn't have,
django/,674,the change permission.,
django/,678,Take the custom ModelForm's Meta.exclude into account only if the,
django/,679,ModelAdmin doesn't define its own.,
django/,681,if exclude is an empty list we pass None to be consistent with the,
django/,682,default on modelform_factory,
django/,685,Remove declared form fields which are in readonly_fields.,
django/,722,Add the action checkboxes if any actions are available.,
django/,854,Gather actions from the admin site first,
django/,858,Add actions from this ModelAdmin.,
django/,860,"get_action might have returned None, so filter any of those out.",
django/,884,If self.actions is set to None that means actions are disabled on,
django/,885,this page.,
django/,908,"If the action is a callable, just use it.",
django/,913,"Next, look for a method. Grab it off self.__class__ to get an unbound",
django/,914,method instead of a bound one; this ensures that the calling,
django/,915,conventions are the same for functions and methods.,
django/,919,"Finally, look for a named method on the admin site",
django/,948,Use only the first item in list_display as link,
django/,977,Apply keyword searches.,
django/,985,Use field_name if it includes a lookup.,
django/,988,"Go through the fields, following all relations.",
django/,996,Use valid query lookups.,
django/,1002,Update opts to follow the relation.,
django/,1004,"Otherwise, use the field with icontains.",
django/,1056,attempt to get the level if passed a string,
django/,1168,Add a link to the object's change form if the user can edit the obj.,
django/,1177,"Here, we distinguish between different save types by checking for",
django/,1178,the presence of keys in request.POST.,
django/,1200,"Redirecting after ""Save as new"".",
django/,1343,There can be multiple action forms on the page (at the top,
django/,1344,"and bottom of the change list, for example). Get the action",
django/,1345,whose button was pushed.,
django/,1351,Construct the action form.,
django/,1356,Use the action whose button was pushed,
django/,1360,If we didn't get an action from the chosen form that's invalid,
django/,1361,"POST data, so by deleting action it'll fail the validation check",
django/,1362,below. So no need to do anything here,
django/,1368,If the form's valid we can handle the action.,
django/,1374,"Get the list of selected PKs. If nothing's selected, we can't",
django/,1375,"perform an action on it, so bail. Except we want to perform",
django/,1376,the action explicitly on all objects.,
django/,1379,Reminder that something needs to be selected or nothing will happen,
django/,1386,Perform the action only on the selected objects,
django/,1391,"Actions may return an HttpResponse-like object, which will be",
django/,1392,"used as the response from the POST. If not, we'll be a good",
django/,1393,little HTTP citizen and redirect back to the changelist page.,
django/,1466,Edit permissions on parent model are required for editable inlines.,
django/,1477,"Disable all edit-permissions, and overide formset settings.",
django/,1500,We have to special-case M2Ms as a list of comma-separated PKs.,
django/,1594,Clear prepopulated fields on a view-only form to avoid a crash.,
django/,1624,"Hide the ""Save"" and ""Save and continue"" buttons if ""Save as New"" was",
django/,1625,previously chosen to prevent the interface from getting confusing.,
django/,1629,Use the change template instead of the add template.,
django/,1664,Disable the optimization if the POST data was tampered with.,
django/,1682,"Wacky lookup parameters were given, so redirect to the main",
django/,1683,"changelist page, without parameters, and pass an 'invalid=1'",
django/,1684,parameter via the query string. If wacky parameters were given,
django/,1685,"and the 'invalid=1' parameter was already in the query string,",
django/,1686,"something is screwed up with the database, so display an error",
django/,1687,page.,
django/,1694,"If the request was POSTed, this might be a bulk action or a bulk",
django/,1695,"edit. Try to look up an action or confirmation first, but if this",
django/,1696,"isn't an action the POST will fall through to the bulk edit check,",
django/,1697,below.,
django/,1702,Actions with no confirmation,
django/,1717,Actions with confirmation,
django/,1729,Redirect back to the changelist page to avoid resubmitting the,
django/,1730,"form if the user refreshes the browser or uses the ""No, take",
django/,1731,"me back"" button on the action confirmation page.",
django/,1734,"If we're allowing changelist editing, we need to construct a formset",
django/,1735,for the changelist given all the fields to be edited. Then we'll,
django/,1736,use the formset to validate/process POSTed data.,
django/,1739,Handle POSTed bulk-edit data.,
django/,1770,Handle GET -- construct a formset for display.,
django/,1775,Build the list of media to be used by the formset.,
django/,1781,Build the action form and populate it with available actions.,
django/,1852,"Populate deleted_objects, a data structure of all related objects that",
django/,1853,will also be deleted.,
django/,1856,The user has confirmed the deletion.,
django/,1896,First check if the user can see this history.,
django/,1905,Then get the history for this object.,
django/,1965,Bypass validation of each view-only inline form (since the form's,
django/,1966,"data won't be in request.POST), unless the form was deleted.",
django/,2044,Take the custom ModelForm's Meta.exclude into account only if the,
django/,2045,InlineModelAdmin doesn't define its own.,
django/,2047,"If exclude is an empty list we use None, since that's the actual",
django/,2048,default.,
django/,2087,"Translators: Model verbose name and instance representation,",
django/,2088,suitable to be an item in a list.,
django/,2109,Protect against unauthorized edits.,
django/,2140,Find the target model of an auto-created many-to-many relationship.,
django/,2152,Auto-created intermediate models don't have their own,
django/,2153,permissions. The user needs to have the change permission for the,
django/,2154,related model in order to be able to do anything with the,
django/,2155,intermediate model.,
django/,2161,Same comment as has_add_permission().,
django/,2167,Same comment as has_add_permission().,
django/,2173,Same comment as has_add_permission(). The 'change' permission,
django/,2174,also implies the 'view' permission.,
django/,94,A django.forms.Form instance,
django/,125,A django.forms.BoundField instance,
django/,126,Whether this field is first on the line,
django/,141,checkboxes should not have a label suffix as the checkbox appears,
django/,142,to the left of the label.,
django/,154,Make self.field look a little bit like a field. This means that,
django/,155,{{ field.name }} must be a useful class name to identify the field.,
django/,156,"For convenience, store other field-related data here too.",
django/,202,This isn't elegant but suffices for contrib.auth's,
django/,203,ReadOnlyPasswordHashWidget.,
django/,357,"Auto fields are editable, so check for auto or non-editable pk.",
django/,359,Also search any parents for an auto field. (The pk info is,
django/,360,propagated to child models so that does not need to be checked,
django/,361,in parents.),
django/,32,Go through the fields (following all relations) and look for an m2m.,
django/,39,Ignore query lookups.,
django/,43,This field is a relation; update opts to follow the relation.,
django/,47,This field is a m2m relation so distinct must be called.,
django/,56,"if key ends with __in, split parameter into separate values",
django/,59,"if key ends with __isnull, special case '' and the string literals 'false' and '0'",
django/,138,Change url doesn't exist -- don't display link to edit,
django/,141,Display a link to the admin page.,
django/,147,"Don't display link to edit, because it either has no",
django/,148,admin or is edited inline.,
django/,162,{from_instance: [to_instances]},
django/,266,"For non-field values, the value is either a method, property or",
django/,267,returned via a callable.,
django/,297,Generic foreign keys OR reverse relations,
django/,301,Avoid coercing <FK>_id fields to FK,
django/,322,field is likely a ForeignObjectRel,
django/,385,"BooleanField needs special-case null-handling, so it comes before the",
django/,386,general null test.,
django/,450,skip trailing data field if extant:,
django/,451,final iteration,
django/,457,Field should point to another model,
django/,494,Evaluating `form.changed_data` prior to disabling translations is required,
django/,495,"to avoid fields affected by localization from being included incorrectly,",
django/,496,e.g. where date formats differ such as MM/DD/YYYY vs DD/MM/YYYY.,
django/,499,Deactivate translations while fetching verbose_name for form,
django/,500,"field labels and using `field_name`, if verbose_name is not provided.",
django/,501,Translations will happen later on LogEntry access.,
django/,41,Text to put at the end of each page's <title>.,
django/,44,Text to put in each page's <h1>.,
django/,47,Text to put at the top of the admin index page.,
django/,50,"URL for the ""View site"" link at the top of each admin page.",
django/,64,model_class class -> admin_class instance,
django/,77,Speed up lookups below,
django/,113,Most likely registered without a ModelAdmin subclass.,
django/,119,Ignore the registration if the model has been,
django/,120,swapped out.,
django/,122,If we got **options then dynamically construct a subclass of,
django/,123,admin_class with those **options.,
django/,125,"For reasons I don't quite understand, without a __module__",
django/,126,"the created class appears to ""live"" in the wrong place,",
django/,127,which causes issues later on.,
django/,131,Instantiate the admin class to save in the registry,
django/,224,Inner import to prevent django.contrib.admin (app) from,
django/,225,importing django.contrib.auth.models.User (unrelated model).,
django/,234,We add csrf_protect here so this function can be used as a utility,
django/,235,"function for any view, without having to repeat 'csrf_protect'.",
django/,242,"Since this module gets imported in the application's root package,",
django/,243,"it cannot import models from other applications at the module level,",
django/,244,and django.contrib.contenttypes.views imports ContentType.,
django/,253,Admin-site-wide views.,
django/,272,"Add in each model's views, and create a list of valid URLS for the",
django/,273,app_index,
django/,282,"If there were ModelAdmins registered, we should have a list of app",
django/,283,"labels for which we need to allow access to the app_index view,",
django/,364,"Since the user isn't logged out at this point, the value of",
django/,365,has_permission must be overridden.,
django/,381,"Already logged-in, redirect to admin index",
django/,386,"Since this module gets imported in the application's root package,",
django/,387,"it cannot import models from other applications at the module level,",
django/,388,and django.contrib.admin.forms eventually imports User.,
django/,433,Check whether user has any perm for this module.,
django/,434,"If so, add the module to the model_list.",
django/,484,Sort the apps alphabetically.,
django/,487,Sort the models alphabetically within each app.,
django/,516,Sort the models alphabetically within each app.,
django/,541,"This global object represents the default admin site, for the common case.",
django/,542,You can provide your own AdminSite using the (Simple)AdminConfig.default_site,
django/,543,attribute. You can also instantiate AdminSite in your own code to create a,
django/,544,custom admin site.,
django/,26,"Populate deletable_objects, a data structure of all related objects that",
django/,27,will also be deleted.,
django/,30,The user has already confirmed the deletion.,
django/,31,Do the deletion and return None to display the change list view again.,
django/,44,Return None to display the change list page again.,
django/,70,Display the confirmation page,
django/,81,"Note that we're calling MultiWidget, not SplitDateTimeWidget, because",
django/,82,we want to define widgets.,
django/,137,The related object is registered with the same AdminSite,
django/,151,The JavaScript code looks for this class.,
django/,190,Admin not registered for target model.,
django/,205,The related object is registered with the same AdminSite,
django/,239,Backwards compatible check for whether a user can add related,
django/,240,objects.,
django/,244,XXX: The UX does not support multiple selected values.,
django/,247,XXX: The deletion UX can be confusing when dealing with cascading deletion.,
django/,251,so we can check if the related object is registered with this AdminSite,
django/,363,Mapping of lowercase language codes [returned by Django's get_language()] to,
django/,364,language codes supported by select2.,
django/,365,See django/contrib/admin/static/admin/js/vendor/select2/i18n/*,
django/,413,Allows clearing of the input.,
django/,122,Wait for the next page to be loaded,
django/,165,Prevent the `find_elements_by_css_selector` call from blocking,
django/,166,if the selector doesn't match any options as we expect it,
django/,167,to be the case.,
django/,43,ImportErrors are raised elsewhere.,
django/,328,Stuff can be put in fields that isn't actually a model field if,
django/,329,"it's in readonly_fields, readonly_fields will handle the",
django/,330,validation of such things.,
django/,336,"If we can't find a field on the model that matches, it could",
django/,337,be an extra field on the form.,
django/,357,default value is None,
django/,536,ordering = None,
django/,537,The default value is None,
django/,569,Skip ordering in the format field1__field2 (FIXME: checking,
django/,570,"this format would be nice, but it's a little fiddly).",
django/,762,Check only if ModelAdmin.get_list_display() isn't overridden.,
django/,805,"If item is option 3, it should be a ListFilter...",
django/,809,...  but not a FieldListFilter.,
django/,821,item is option #2,
django/,828,item is option #1,
django/,831,Validate the field string,
django/,904,"If list_display[0] is in list_editable, check that",
django/,905,list_display_links is set. See #22792 and #26229 for use cases.,
django/,1021,Do not perform more specific checks if the base checks result in an,
django/,1022,error.,
django/,1027,Skip if `fk_name` is invalid.,
django/,57,Translators: 'repr' means representation (https://docs.python.org/library/functions.html#repr),
django/,60,change_message is either a string or a JSON structure,
django/,1,!/usr/bin/env python,
django/,11,No database changes; removes auto_add and adds default/editable.,
django/,10,No database changes; adds choices to action_flag.,
django/,27,Changelist settings,
django/,42,"Populate ""fields"" dynamically because SEARCH_VAR is a variable:",
django/,71,Get search parameters from the query string.,
django/,113,a dictionary of the query string,
django/,114,Remove all the parameters that are globally and systematically,
django/,115,ignored.,
django/,132,This is simply a custom list filter class.,
django/,137,This is a custom FieldListFilter class for a given field.,
django/,140,"This is simply a field name, so use the default",
django/,141,FieldListFilter class that has been registered for the,
django/,142,type of the given field.,
django/,153,field_list_filter_class removes any lookup_params it,
django/,154,"processes. If that happened, check if distinct() is needed to",
django/,155,remove duplicate results.,
django/,162,Create bounded lookup parameters so that the query is more,
django/,163,efficient.,
django/,179,"In this branch, from_date will always be the first of a",
django/,180,"month, so advancing 32 days gives the next month.",
django/,192,"At this point, all the parameters used by the various ListFilters",
django/,193,"have been removed from lookup_params, which now only contains other",
django/,194,parameters passed via the query string. We now loop through the,
django/,195,remaining parameters both to ensure that all the parameters are valid,
django/,196,fields and to determine if at least one of them needs distinct(). If,
django/,197,"the lookup parameters aren't real fields, then bail out.",
django/,226,"Get the number of objects, with admin filters applied.",
django/,229,"Get the total number of objects, with no admin filters applied.",
django/,237,Get the list of objects to display on this page.,
django/,248,Admin actions are shown if there is at least one entry,
django/,249,or if entries are not counted because show_full_result_count is disabled,
django/,277,See whether field_name is a name of a non-field,
django/,278,that allows sorting.,
django/,301,Clear ordering and used params,
django/,310,"No 'admin_order_field', skip it",
django/,317,order_field is an expression.,
django/,319,"reverse order if order_field has already ""-"" as prefix",
django/,325,"Invalid ordering specified, skip it.",
django/,327,"Add the given query's ordering fields, if any.",
django/,346,Search for single field providing a total ordering.,
django/,355,Normalize attname references by using get_field().,
django/,359,"Could be ""?"" for random ordering or a related field",
django/,360,lookup. Skip this part of introspection for now.,
django/,362,Ordering by a related field name orders by the referenced,
django/,363,model's ordering. Skip this part of introspection for now.,
django/,370,"No single total ordering field, try unique_together and total",
django/,371,unique constraints.,
django/,380,Normalize attname references by using get_field().,
django/,382,Composite unique constraints containing a nullable column,
django/,383,cannot ensure total ordering.,
django/,389,"If no set of unique fields is present in the ordering, rely",
django/,390,on the primary key to provide total ordering.,
django/,398,We must cope with more than one column having the same underlying sort,
django/,399,"field, so we base things on column numbers.",
django/,403,"for ordering specified on ModelAdmin or model Meta, we don't know",
django/,404,"the right column numbers absolutely, because there might be more",
django/,405,"than one column associated with that ordering, so we guess.",
django/,430,skip it,
django/,435,"First, we collect all the declared list filters.",
django/,439,"Then, we let every list filter modify the queryset to its liking.",
django/,447,"Finally, we apply the remaining lookup parameters from the query",
django/,448,string (i.e. those that haven't already been processed by the,
django/,449,filters).,
django/,452,Allow certain types of errors to be re-raised as-is so that the,
django/,453,caller can treat them in a special way.,
django/,456,"Every other error is caught with a naked except, because we don't",
django/,457,have any other way of validating lookup parameters. They might be,
django/,458,"invalid if the keyword arguments are incorrect, or if the values",
django/,459,"are not in the correct type, so we might get FieldError,",
django/,460,"ValueError, ValidationError, or ?.",
django/,466,Set ordering.,
django/,470,Apply search results,
django/,473,"Remove duplicates from results, if necessary",
django/,499,<FK>_id field names don't require a join.,
django/,26,Load template for this render call. (Setting self.filename isn't,
django/,27,thread-safe.),
django/,107,Hidden cell with hidden 'id' field,
django/,109,Loop through all the fields (one per cell),
django/,114,Delete checkbox,
django/,61,"If there are 10 or fewer pages, display links to every page.",
django/,62,"Otherwise, do some fancy",
django/,66,"Insert ""smart"" pagination links, so that there are always ON_ENDS",
django/,67,"links at either end of the list of pages, and there are always",
django/,68,"ON_EACH_SIDE links at either end of the ""current page"" link.",
django/,120,Potentially not sortable,
django/,122,if the field is the action checkbox: no sorting and special class,
django/,132,"Set ordering for attr that is a property, if defined.",
django/,139,Not sortable,
django/,147,"OK, it is sortable if we got this far",
django/,152,Is it currently being sorted on?,
django/,160,build new ordering param,
django/,161,URL for making this field the primary sort,
django/,162,URL for removing this field from sort,
django/,163,URL for toggling order type for this field,
django/,169,Same column,
django/,171,We want clicking on this header to bring the ordering to the,
django/,172,front,
django/,175,o_list_remove - omit,
django/,259,"If list_display_links not defined, add the link tag to the first field",
django/,264,"Display link to the result's change_view if the url exists, else",
django/,265,display just the result's representation.,
django/,272,Convert the pk to something that can be used in Javascript.,
django/,273,Problem cases are non-ASCII strings.,
django/,289,"By default the fields come from ModelAdmin.list_editable, but if we pull",
django/,290,the fields out of the form instead of list_editable custom admins,
django/,291,can provide fields on a per request basis,
django/,382,select appropriate start level,
django/,11,Defined as class-level attributes to be subclassing-friendly.,
django/,24,No need to check for a redirect for non-404 responses.,
django/,49,No redirect was found. Return the response.,
django/,30,"Translators: Ordinal format for 11 (11th), 12 (12th), and 13 (13th).",
django/,34,"Translators: Ordinal format when value ends with 0, e.g. 80th.",
django/,36,"Translators: Ordinal format when value ends with 1, e.g. 81st, except 11.",
django/,38,"Translators: Ordinal format when value ends with 2, e.g. 82nd, except 12.",
django/,40,"Translators: Ordinal format when value ends with 3, e.g. 83th, except 13.",
django/,42,"Translators: Ordinal format when value ends with 4, e.g. 84th.",
django/,44,"Translators: Ordinal format when value ends with 5, e.g. 85th.",
django/,46,"Translators: Ordinal format when value ends with 6, e.g. 86th.",
django/,48,"Translators: Ordinal format when value ends with 7, e.g. 87th.",
django/,50,"Translators: Ordinal format when value ends with 8, e.g. 88th.",
django/,52,"Translators: Ordinal format when value ends with 9, e.g. 89th.",
django/,56,Mark value safe so i18n does not break with <sup> or <sub> see #19988,
django/,82,A tuple of standard large number to their converters,
django/,183,Perform the comparison in the default time zone when USE_TZ = True,
django/,184,(unless a specific time zone has been applied with the |timezone filter).,
django/,196,Passed value wasn't a date object,
django/,209,This filter doesn't require expects_localtime=True because it deals properly,
django/,210,with both naive and aware datetimes. Therefore avoid the cost of conversion.,
django/,222,"Translators: delta will contain a string like '2 months' or '1 month, 2 weeks'",
django/,224,Translators: please keep a non-breaking space (U+00A0) between count,
django/,225,and time unit.,
django/,227,Translators: please keep a non-breaking space (U+00A0) between count,
django/,228,and time unit.,
django/,230,Translators: please keep a non-breaking space (U+00A0) between count,
django/,231,and time unit.,
django/,234,Translators: please keep a non-breaking space (U+00A0) between count,
django/,235,and time unit.,
django/,237,Translators: please keep a non-breaking space (U+00A0) between count,
django/,238,and time unit.,
django/,240,Translators: please keep a non-breaking space (U+00A0) between count,
django/,241,and time unit.,
django/,243,"Translators: delta will contain a string like '2 months' or '1 month, 2 weeks'",
django/,247,Translators: 'naturaltime-past' strings will be included in '%(delta)s ago',
django/,256,Translators: 'naturaltime-future' strings will be included in '%(delta)s from now',
django/,267,datetime is a subclass of date,
django/,22,Clear sessions with no data.,
django/,13,"RemovedInDjango40Warning: when the deprecation ends, replace with:",
django/,14,"def __init__(self, get_response):",
django/,38,First check if we need to delete this cookie.,
django/,39,The session should be deleted only if the session is entirely empty.,
django/,58,Save the session data and refresh the client cookie.,
django/,59,"Skip session save for 500 responses, refs #3881.",
django/,17,"This doesn't handle non-default expiry dates, see #19201",
django/,22,"BadSignature, ValueError, or unpickling exceptions. If any of",
django/,23,"these happen, reset the session.",
django/,28,Some backends (e.g. memcache) raise an exception on invalid,
django/,29,"cache keys. If this happens, reset the session. See #17810.",
django/,37,"Because a cache can fail silently (e.g. memcache), we don't know if",
django/,38,we are failing to create a new session because of a key collision or,
django/,39,because the cache is missing. So we try for a (large) number of times,
django/,40,and then raise an exception. That's the risk you shoulder if using,
django/,41,cache backing.,
django/,19,session_key should not be case sensitive because some backends can store it,
django/,20,on case insensitive file systems.,
django/,105,RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.,
django/,119,"RemovedInDjango40Warning: when the deprecation ends, handle here",
django/,120,exceptions similar to what _legacy_decode() does now.,
django/,125,RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.,
django/,128,could produce ValueError if there is no ':',
django/,136,"ValueError, SuspiciousOperation, unpickling exceptions. If any of",
django/,137,"these happen, just return an empty dictionary (an empty session).",
django/,160,"To avoid unnecessary persistent storage accesses, we set up the",
django/,161,"internals directly (loading data wastes time, since we are going to",
django/,162,set it to an empty dict anyway).,
django/,238,"Make the difference between ""expiry=None passed in kwargs"" and",
django/,239,"""expiry not passed in kwargs"", in order to guarantee not to trigger",
django/,240,self.load() when expiry is provided.,
django/,246,Checks both None and 0 cases,
django/,263,Same comment as in get_expiry_age,
django/,290,Remove any custom expiration for this session.,
django/,331,Methods that child classes must implement.,
django/,31,Make sure the storage path is valid.,
django/,48,Make sure we're not vulnerable to directory traversal. Session keys,
django/,49,"should always be md5s, so they should never contain directory",
django/,50,components.,
django/,80,Don't fail if there is no data in the session file.,
django/,81,We may have opened the empty placeholder file.,
django/,91,Remove expired sessions.,
django/,114,"Get the session data now, before we start messing",
django/,115,with the file it is stored within.,
django/,121,"Make sure the file exists.  If it does not already exist, an",
django/,122,empty placeholder file is created.,
django/,135,Write the session file without interfering with other threads,
django/,136,or processes.  By writing to an atomically generated temporary,
django/,137,file and then using the atomic os.rename() to make the complete,
django/,138,"file visible, we avoid having to lock the session file, while",
django/,139,still maintaining its integrity.,
django/,140,,
django/,141,"Note: Locking the session file was explored, but rejected in part",
django/,142,"because in order to be atomic and cross-platform, it required a",
django/,143,"long-lived lock file for each session, doubling the number of",
django/,144,files in the session storage directory at any given time.  This,
django/,145,rename solution is cleaner and avoids any additional overhead,
django/,146,"when reading the session data, which is the more common case",
django/,147,unless SESSION_SAVE_EVERY_REQUEST = True.,
django/,148,,
django/,149,See ticket #8616.,
django/,161,This will atomically rename the file (os.rename) if the OS,
django/,162,supports it. Otherwise this will result in a shutil.copy2,
django/,163,and os.unlink (for example on Windows). See #9084.,
django/,198,"When an expired session is loaded, its file is removed, and a",
django/,199,new file is immediately created. Prevent this by disabling,
django/,200,the create() method.,
django/,21,Avoids a circular import and allows importing SessionStore when,
django/,22,django.contrib.sessions is not in INSTALLED_APPS.,
django/,53,Save immediately to ensure we have a unique entry in the,
django/,54,database.,
django/,57,Key wasn't unique. Try again.,
django/,30,Some backends (e.g. memcache) raise an exception on invalid,
django/,31,"cache keys. If this happens, reset the session. See #17810.",
django/,18,Support network-path reference (see #16753) - RSS requires a protocol,
django/,43,"if item_pubdate or item_updateddate is defined for the feed, set",
django/,44,header so as ConditionalGetMiddleware is able to send 304 NOT MODIFIED,
django/,51,Titles should be double escaped by default (see #6533),
django/,83,Check co_argcount rather than try/excepting the function and,
django/,84,"catching the TypeError, because something inside the function",
django/,85,may raise the TypeError. This technique is more accurate.,
django/,90,one argument is 'self',
django/,29,Exclude methods starting with these strings from documentation,
django/,40,Display an error message for people without docutils,
django/,64,Non-trivial TEMPLATES settings aren't supported (#24125).,
django/,95,Non-trivial TEMPLATES settings aren't supported (#24125).,
django/,145,"Separate the module and function, e.g.",
django/,146,"'mymodule.views.myview' -> 'mymodule.views', 'myview').",
django/,149,"Import may fail because view contains a class name, e.g.",
django/,150,"'mymodule.views.ViewContainer.my_view', so mod takes the form",
django/,151,'mymodule.views.ViewContainer'. Parse it again to separate,
django/,152,the module and class.,
django/,188,Get the model class.,
django/,204,Gather fields/field descriptions.,
django/,207,ForeignKey is a special case since the field will actually be a,
django/,208,descriptor that returns the other object,
django/,229,Gather many-to-many fields.,
django/,249,Gather model methods.,
django/,262,Show properties and methods without arguments as fields.,
django/,263,"Otherwise, show as a 'method with arguments'.",
django/,278,"Join arguments with ', ' and in case of default value,",
django/,279,join it with '='. Use repr() so that strings will be,
django/,280,correctly displayed.,
django/,291,Gather related objects,
django/,327,Non-trivial TEMPLATES settings aren't supported (#24125).,
django/,330,This doesn't account for template loaders (#24128).,
django/,350,,
django/,351,Helper functions,
django/,352,,
django/,410,clean up any outstanding regex-y characters.,
django/,69,"Wrap ``text`` in some reST that sets the default role to ``cmsreference``,",
django/,70,then restores it.,
django/,86,,
django/,87,reST roles,
django/,88,,
django/,137,Match the beginning of a named or unnamed group.,
django/,154,"Tuples of (named capture group pattern, group name).",
django/,156,Loop over the groups and their start and end indices.,
django/,158,"Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.",
django/,161,Check for unescaped `(` and `)`. They mark the start and end of a,
django/,162,nested group.,
django/,168,"If brackets are balanced, the end of the string for the current",
django/,169,named capture group pattern has been reached.,
django/,174,Replace the string for named capture groups with their group names.,
django/,189,Indices of the start of unnamed capture groups.,
django/,191,Loop over the start indices of the groups.,
django/,193,"Handle nested parentheses, e.g. '^b/((x|y)\w+)$'.",
django/,196,Check for unescaped `(` and `)`. They mark the start and end of,
django/,197,a nested group.,
django/,207,Remove unnamed group matches inside other unnamed capture groups.,
django/,216,Replace unnamed groups with <var>. Handle the fact that replacing the,
django/,217,string between indices will change string length and thus indices,
django/,218,will point to the wrong substring if not corrected.,
django/,30,all sections' sitemap URLs,
django/,32,"For each section label, add links of all pages of its sitemap",
django/,33,(usually generated by the `sitemap` view).,
django/,40,Add links to all pages of the sitemap.,
django/,89,"if lastmod is defined for all sites, set header so as",
django/,90,ConditionalGetMiddleware is able to send 304 NOT MODIFIED,
django/,36,"First, try to get the ""index"" sitemap URL.",
django/,40,"Next, try for the ""global"" sitemap URL.",
django/,55,This limit is defined by Google. See the index documentation at,
django/,56,https://www.sitemaps.org/protocol.html#index.,
django/,59,"If protocol is None, the URLs in the sitemap will use the protocol",
django/,60,with which the sitemap was requested.,
django/,83,Determine protocol,
django/,89,Determine domain,
django/,119,track if all items have a lastmod,
django/,154,Make sure to return a clone; we don't want premature evaluation.,
django/,8,NumPy supported?,
django/,9,Initially the pointer is NULL.,
django/,16,Raise an exception if the pointer isn't valid so that NULL pointers,
django/,17,aren't passed to routines -- that's very bad.,
django/,24,Only allow the pointer to be set with pointers of the compatible,
django/,25,type or None (NULL).,
django/,38,Some part might already have been garbage collected,
django/,34,Getting the Geometry object.,
django/,38,Special case if a tuple/list was passed in.  The tuple may be,
django/,39,a point or a box,
django/,42,"Box: ( (X0, Y0), (X1, Y1) )",
django/,49,"Point: (X, Y)",
django/,52,"Box: (X0, Y0, X1, Y1)",
django/,56,If a GeoRSS box was given via tuple.,
django/,62,Getting the lowercase geometry type.,
django/,69,For formatting consistent w/the GeoRSS simple standard:,
django/,70,http://georss.org/1.0#simple,
django/,74,Only support the exterior ring.,
django/,80,### SyndicationFeed subclasses,
django/,126,### Feed subclass,
django/,5,Regular expression for recognizing HEXEWKB and WKT.  A prophylactic measure,
django/,6,to prevent potentially malicious input from reaching the underlying C,
django/,7,library.  Not a substitute for good Web security programming practices.,
django/,1,"Copyright (c) 2007, Robert Coup <robert.coup@onetrackmind.co.nz>",
django/,2,All rights reserved.,
django/,3,,
django/,4,"Redistribution and use in source and binary forms, with or without modification,",
django/,5,are permitted provided that the following conditions are met:,
django/,6,,
django/,7,"1. Redistributions of source code must retain the above copyright notice,",
django/,8,this list of conditions and the following disclaimer.,
django/,9,,
django/,10,2. Redistributions in binary form must reproduce the above copyright,
django/,11,"notice, this list of conditions and the following disclaimer in the",
django/,12,documentation and/or other materials provided with the distribution.,
django/,13,,
django/,14,3. Neither the name of Distance nor the names of its contributors may be used,
django/,15,to endorse or promote products derived from this software without,
django/,16,specific prior written permission.,
django/,17,,
django/,18,"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND",
django/,19,"ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",
django/,20,WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE,
django/,21,DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR,
django/,22,"ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES",
django/,23,"(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;",
django/,24,"LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON",
django/,25,"ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",
django/,26,(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS,
django/,27,"SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
django/,28,,
django/,84,**** Comparison methods ****,
django/,98,**** Operators methods ****,
django/,257,Unit aliases for `UNIT` terms encountered in Spatial Reference WKT.,
django/,318,Getting the square units values and the alias dictionary.,
django/,333,Shortcuts,
django/,15,The default map settings that may be overloaded -- still subject,
django/,16,to API changes.,
django/,59,Setting the widget with the newly defined widget.,
django/,107,likely should get from object,
django/,8,Creating a template context that contains Django settings,
django/,9,values needed by admin map templates.,
django/,19,Update the template parameters with any attributes passed in.,
django/,26,Defaulting the WKT value to a blank string -- this,
django/,27,will be tested in the JavaScript and the appropriate,
django/,28,interface will be constructed.,
django/,31,If a string reaches here (via a validation error on another,
django/,32,field) then just reconstruct the Geometry.,
django/,44,Constructing the dictionary of the map options.,
django/,47,Constructing the JavaScript module name using the name of,
django/,48,the GeometryField (passed in via the `attrs` keyword).,
django/,49,Use the 'name' attr for the field name (rather than 'field'),
django/,51,note: we must switch out dashes for underscores since js,
django/,52,functions are created using the module variable,
django/,57,Transforming the geometry to the projection used on the,
django/,58,OpenLayers map.,
django/,74,Setting the parameter WKT with that of the transformed,
django/,75,geometry.,
django/,83,JavaScript construction utilities for the Bounds and Projection.,
django/,90,"An array of the parameter name, the name of their OpenLayers",
django/,91,"counterpart, and the type of variable they are.",
django/,102,Building the map options hash.,
django/,39,Split raster header from data,
django/,43,Parse band data,
django/,47,Get pixel type for this band,
django/,52,Convert datatype from PostGIS to GDAL & get pack type and size,
django/,57,Parse band nodata value. The nodata value is part of the,
django/,58,"PGRaster string even if the nodata flag is True, so it always",
django/,59,has to be chunked off the data string.,
django/,63,Chunk and unpack band data (pack size times nr of pixels),
django/,67,Set the nodata value if the nodata flag is set.,
django/,71,Append band data to band list,
django/,74,Store pixeltype of this band in pixeltypes array,
django/,77,Check that all bands have the same pixeltype.,
django/,78,This is required by GDAL. PostGIS rasters could have different pixeltypes,
django/,79,for bands of the same raster.,
django/,98,Prepare the raster header data as a tuple. The first two numbers are,
django/,99,"the endianness and the PostGIS Raster Version, both are fixed by",
django/,100,PostGIS at the moment.,
django/,107,Pack raster header.,
django/,111,"The PostGIS raster band header has exactly two elements, a 8BUI byte",
django/,112,and the nodata value.,
django/,113,,
django/,114,The 8BUI stores both the PostGIS pixel data type and a nodata flag.,
django/,115,It is composed as the datatype with BANDTYPE_FLAG_HASNODATA (1 << 6),
django/,116,for existing nodata values:,
django/,117,8BUI_VALUE = PG_PIXEL_TYPE (0-11) | BANDTYPE_FLAG_HASNODATA,
django/,118,,
django/,119,"For example, if the byte value is 71, then the datatype is",
django/,120,71 & ~BANDTYPE_FLAG_HASNODATA = 7 (32BSI),
django/,121,and the nodata value is True.,
django/,124,Get band pixel type in PostGIS notation,
django/,127,Set the nodata flag,
django/,131,Pack band header,
django/,134,Add packed header and band data to result,
django/,137,Convert raster to hex string before passing it to the DB.,
django/,24,Check that postgis extension is installed.,
django/,6,Populated when introspection is performed.,
django/,18,Query PostgreSQL's pg_type table to determine the OID integers,
django/,19,for the PostGIS data types used in reverse lookup (the integers,
django/,20,may be different across versions). To prevent unnecessary,
django/,21,"requests upon connection initialization, the `data_types_reverse`",
django/,22,dictionary isn't updated until introspection is performed here.,
django/,49,OGRGeomType does not require GDAL and makes it easy to convert,
django/,50,from OGC geom type name to Django field.,
django/,52,Getting any GeometryField keyword arguments that are not the default.,
django/,29,"For raster fields, wrap index creation SQL statement with ST_ConvexHull.",
django/,30,Indexes on raster columns are based on the convex hull of the raster.,
django/,33,"Use ""nd"" ops which are fast on multidimensional cases",
django/,18,"Getting the WKB (in string form, to allow easy pickling of",
django/,19,the adaptor) and the SRID from the geometry or raster.,
django/,58,Psycopg will figure out whether to use E'\\000' or '\000'.,
django/,64,"For rasters, add explicit type cast to WKB string.",
django/,24,Identifier to mark raster lookups as bilateral.,
django/,30,Only a subset of the operators and functions are available for the,
django/,31,geography type.,
django/,33,Only a subset of the operators and functions are available for the,
django/,34,raster type. Lookups that don't support raster will be converted to,
django/,35,"polygons. If the raster argument is set to BILATERAL, then the",
django/,36,operator cannot handle mixed geom-raster lookups.,
django/,51,Check which input is a raster.,
django/,55,Look for band indices and inject them if provided.,
django/,66,Convert rasters to polygons if necessary.,
django/,68,Operators without raster support.,
django/,74,Operators with raster support but don't support mixed (rast-geom),
django/,75,lookups.,
django/,127,alias of same_as,
django/,163,Trying to get the PostGIS version because the function,
django/,164,signatures will depend on the version used.  The cost,
django/,165,"here is a database query to determine the version, which",
django/,166,can be mitigated by setting `POSTGIS_VERSION` with a 3-tuple,
django/,167,"comprising user-supplied values for the major, minor, and",
django/,168,subminor revision of PostGIS.,
django/,172,Run a basic query to check the status of the connection so we're,
django/,173,sure we only raise the error below if the problem comes from,
django/,174,PostGIS and not from PostgreSQL itself (see #24862).,
django/,223,Type-based geometries.,
django/,224,TODO: Support 'M' extension.,
django/,247,Getting the distance parameter,
django/,250,Shorthand boolean flags.,
django/,265,Assuming the distance is in the units of the field.,
django/,284,Get the srid for this object,
django/,290,Adding Transform() to the SQL placeholder if the value srid,
django/,291,is not equal to the field srid.,
django/,303,Close out the connection.  See #9437.,
django/,355,Routines for getting the OGC-compliant models.,
django/,4,Lookup to convert pixel type values from GDAL to PostGIS,
django/,7,Lookup to convert pixel type values from PostGIS to GDAL,
django/,10,"Struct pack structure for raster header, the raster header has the",
django/,11,following structure:,
django/,12,,
django/,13,"Endianness, PostGIS raster version, number of bands, scale, origin,",
django/,14,"skew, srid, width, and height.",
django/,15,,
django/,16,"Scale, origin, and skew have x and y values. PostGIS currently uses",
django/,17,a fixed endianness (1) and there is only one version (0).,
django/,20,Lookup values to convert GDAL pixel types to struct characters. This is,
django/,21,used to pack and unpack the pixel values of PostGIS raster bands.,
django/,27,Size of the packed value in bytes for different numerical types.,
django/,28,This is needed to cut chunks of band data out of PostGIS raster strings,
django/,29,when decomposing them into GDALRasters.,
django/,30,See https://docs.python.org/library/struct.html#format-characters,
django/,32,Signed char,
django/,33,Unsigned char,
django/,34,_Bool,
django/,35,Short,
django/,36,Unsigned short,
django/,37,Integer,
django/,38,Unsigned Integer,
django/,39,Long,
django/,40,Unsigned Long,
django/,41,Float,
django/,42,Double,
django/,45,Pixel type specifies type of pixel values in a band. Storage flag specifies,
django/,46,whether the band data is stored as part of the datum or is to be found on the,
django/,47,"server's filesystem. There are currently 11 supported pixel value types, so 4",
django/,48,bits are enough to account for all. Reserve the upper 4 bits for generic,
django/,49,flags.,
django/,50,See https://trac.osgeo.org/postgis/wiki/WKTRaster/RFC/RFC1_V0SerialFormat#Pixeltypeandstorageflag,
django/,13,Classes instantiated in __init__().,
django/,8,Updating the data_types_reverse dictionary with the appropriate,
django/,9,type for Geometry fields.,
django/,15,"In order to get the specific geometry type of the field,",
django/,16,we introspect on the table definition using `DESCRIBE`.,
django/,19,Increment over description info until we get to the geometry,
django/,20,column.,
django/,23,Using OGRGeomType to convert from OGC name to Django field.,
django/,24,"MySQL does not support 3D or SRIDs, so the field params",
django/,25,are empty.,
django/,32,"Supported with MyISAM/Aria, or InnoDB on MySQL 5.7.5+/MariaDB 10.2.2+",
django/,19,"Geometry fields are stored as BLOB/TEXT, for which MySQL < 8.0.13 and",
django/,20,MariaDB < 10.2.1 don't support defaults.,
django/,27,MySQL doesn't support spatial indexes on NULL columns,
django/,33,For consistency w/PostGIS API,
django/,34,...,
django/,35,...,
django/,24,Not supported in MySQL since https://dev.mysql.com/worklog/task/?id=11808,
django/,18,Classes instantiated in __init__().,
django/,25,Trying to find the location of the SpatiaLite library.,
django/,26,Here we are figuring out the path to the SpatiaLite library,
django/,27,"(`libspatialite`). If it's not in the system library path (e.g., it",
django/,28,"cannot be found by `ctypes.util.find_library`), then it may be set",
django/,29,manually in the settings via the `SPATIALITE_LIBRARY_PATH` setting.,
django/,40,Enabling extension loading on the SQLite connection.,
django/,48,Load the SpatiaLite library extension on the connection.,
django/,70,Check if spatial metadata have been initialized in the database,
django/,29,Querying the `geometry_columns` table to get additional metadata.,
django/,39,OGRGeomType does not require GDAL and makes it easy to convert,
django/,40,from OGC geom type name to Django field.,
django/,43,"SpatiaLite uses SFSQL 1.2 offsets 1000 (Z), 2000 (M), and",
django/,44,3000 (ZM) to indicate the presence of higher dimensional,
django/,45,coordinates (M not yet supported by Django).,
django/,49,Getting any GeometryField keyword arguments that are not the default.,
django/,42,Geometry columns are created by the `AddGeometryColumn` function,
django/,79,Create geometry columns,
django/,86,Drop spatial metadata (dropping the table does not automatically remove them),
django/,90,Make sure all geom stuff is gone,
django/,106,Populate self.geometry_sql,
django/,116,"NOTE: If the field is a geometry field, the table is just recreated,",
django/,117,the parent's remove_field can't be used cause it will skip the,
django/,118,recreation if the field does not have a database type. Geometry fields,
django/,119,do not have a db type cause they are added and removed via stored,
django/,120,procedures.,
django/,128,Remove geometry-ness from temp table,
django/,137,Alter table,
django/,139,Repoint any straggler names,
django/,151,Re-add geometry-ness and rename spatial index tables,
django/,40,Binary predicates,
django/,52,Returns true if B's bounding box completely contains A's bounding box.,
django/,54,Returns true if A's bounding box completely contains B's bounding box.,
django/,56,Returns true if A's bounding box overlaps B's bounding box.,
django/,58,These are implemented here as synonyms for Equals,
django/,61,Distance predicates,
django/,190,Routines for getting the OGC-compliant models.,
django/,13,Classes instantiated in __init__().,
django/,7,"Associating any OBJECTVAR instances with GeometryField.  Of course,",
django/,8,"this won't work right on Oracle objects that aren't MDSYS.SDO_GEOMETRY,",
django/,9,but it is the only object type supported within Django anyways.,
django/,15,Querying USER_SDO_GEOM_METADATA to get the SRID and dimension information.,
django/,29,TODO: Research way to find a more specific geometry field type for,
django/,30,the column's contents.,
django/,33,Getting the field parameters.,
django/,38,Size of object array (SDO_DIM_ARRAY) is number of dimensions.,
django/,92,Oracle doesn't allow object names > 30 characters. Use this scheme,
django/,93,instead of self._create_index_name() for backwards compatibility.,
django/,88,We want to get SDO Geometries as WKT because it is much easier to,
django/,89,instantiate GEOS proxies from WKT than SDO_GEOMETRY(...) strings.,
django/,90,"However, this adversely affects performance (i.e., Java is called",
django/,91,to convert to WKT on every query).  If someone wishes to write a,
django/,92,"SDO_GEOMETRY(...) parser in Python, let me know =)",
django/,100,TODO: Is this really the same as ST_Intersects()?,
django/,105,"Oracle uses a different syntax, e.g., 'mask=inside+touch'",
django/,122,"Generally, Oracle returns a polygon for the extent -- however,",
django/,123,it can return a single point if there's only one Point in the,
django/,124,table.,
django/,128,Construct the 4-tuple from the coordinates in the polygon.,
django/,168,dwithin lookups on Oracle require a special string parameter,
django/,169,"that starts with ""distance="".",
django/,187,Routines for getting the OGC-compliant models.,
django/,19,TODO: Add support for `diminfo` column (type MDSYS.SDO_DIM_ARRAY).,
django/,53,Optional geometry representing the bounds of this coordinate,
django/,54,"system.  By default, all are NULL in the table.",
django/,11,"Quick booleans for the type of this spatial backend, and",
django/,12,an attribute for the spatial database version tuple (if applicable),
django/,19,How the geometry column should be selected.,
django/,26,Does the spatial database have a geometry or geography type?,
django/,30,Aggregates,
django/,35,"Mapping between Django function names and backend names, when names do not",
django/,36,match; used in spatial_function_name().,
django/,39,Blacklist/set of known unsupported functions of the backend,
django/,49,Constructors,
django/,52,Default conversion functions for aggregates; will be overridden if implemented,
django/,53,for the spatial backend.,
django/,60,"For quoting column values, rather than columns.",
django/,64,GeometryField operations,
django/,96,Add Transform() to the SQL placeholder.,
django/,104,For backwards compatibility on MySQL (#27464).,
django/,122,Routines for getting the OGC-compliant models.,
django/,9,Does the database contain a SpatialRefSys model to store SRID information?,
django/,12,Does the backend support the django.contrib.gis.utils.add_srs_entry() utility?,
django/,14,Does the backend introspect GeometryField to its subtypes?,
django/,17,Does the backend support storing 3D geometries?,
django/,19,Reference implementation of 3D functions is:,
django/,20,https://postgis.net/docs/PostGIS_Special_Functions_Index.html#PostGIS_3D_Functions,
django/,22,Does the database support SRID transform operations?,
django/,24,Can geometry fields be null?,
django/,26,Are empty geometries supported?,
django/,28,Can the function be applied on geodetic coordinate systems?,
django/,33,Is the database able to count vertices on polygons (with `num_points`)?,
django/,36,The following properties indicate if the database backend support,
django/,37,"certain lookups (dwithin, left and right, relate, ...)",
django/,39,Does the backend support expressions for specifying distance in the,
django/,40,dwithin lookup?,
django/,43,Does the database have raster support?,
django/,46,Does the database support a unique index on geometry fields?,
django/,77,Is the aggregate supported by the database?,
django/,14,TODO: Is caching really necessary here?  Is complexity worth it?,
django/,16,Returning a clone of the cached SpatialReference object.,
django/,19,Attempting to cache a SpatialReference object.,
django/,21,Trying to get from WKT first.,
django/,125,`string` parameter used to place in format acceptable by PostGIS,
django/,14,"Local cache of the spatial_ref_sys table, which holds SRID data for each",
django/,15,spatial database alias. This cache exists so that the database isn't queried,
django/,16,for SRID info each time a distance query is constructed.,
django/,33,The SpatialRefSys model for the spatial backend.,
django/,82,Setting the index flag with the value of the `spatial_index` keyword.,
django/,85,Setting the SRID and getting the units.  Unit information must be,
django/,86,easily available in the field instance for distance queries.,
django/,89,Setting the verbose_name keyword argument with the positional,
django/,90,"first parameter, so this works like normal fields.",
django/,97,Always include SRID for less fragility; include spatial index if it's,
django/,98,not the default value.,
django/,137,SRID of given geometry.,
django/,172,"When the input is not a geometry or raster, attempt to construct one",
django/,173,from the given string input.,
django/,177,Check if input is a candidate for conversion to raster or geometry.,
django/,179,Try to convert the input to raster.,
django/,192,Assigning the SRID value.,
django/,203,The OpenGIS Geometry name.,
django/,226,Setting the dimension of the geometry field.,
django/,229,Is this a geography rather than a geometry column?,
django/,232,Oracle-specific private attributes for creating the entry in,
django/,233,`USER_SDO_GEOM_METADATA`,
django/,241,Include kwargs if they're not the default values.,
django/,255,Setup for lazy-instantiated Geometry object.,
django/,280,The OpenGIS Geometry Type Fields,
django/,353,Make sure raster fields are used only on backends with raster support.,
django/,366,"Setup for lazy-instantiated Raster object. For large querysets, the",
django/,367,instantiation of all GDALRasters can potentially be expensive. This,
django/,368,delays the instantiation of the objects to the moment of evaluation,
django/,369,of the raster attribute.,
django/,29,"Accessed on a class, not an instance",
django/,32,Getting the value of the field.,
django/,43,"Otherwise, a geometry or raster object is built using the field's",
django/,44,"contents, and the model's corresponding attribute is set.",
django/,57,The geographic type of the field.,
django/,61,"For raster fields, assure input is None or a string, dict, or",
django/,62,raster instance.,
django/,65,The geometry type must match that of the field -- unless the,
django/,66,general GeometryField is used.,
django/,68,Assigning the field SRID if the geometry has no SRID.,
django/,71,"Set geometries with None, WKT, HEX, or WKB",
django/,77,"Setting the objects dictionary with the value, and returning.",
django/,29,Check if a band index was passed in the query argument.,
django/,42,"PostGIS band indices are 1-based, so the band index needs to be",
django/,43,increased to be consistent with the GDALRaster band indices.,
django/,57,get_db_prep_lookup is called by process_rhs from super class,
django/,62,"If rhs is some Query, don't touch it.",
django/,71,"Unlike BuiltinLookup, the GIS get_rhs_op() implementation should return",
django/,72,an object (SpatialOperator) with an as_sql() method to allow for more,
django/,73,complex computations (where the lhs part can be mixed in).,
django/,86,------------------,
django/,87,Geometry operators,
django/,88,------------------,
django/,201,------------------,
django/,202,Geometry functions,
django/,203,------------------,
django/,257,Check the pattern argument,
django/,288,Check if the second parameter is a band index.,
django/,25,Ensure that value expressions are geometric.,
django/,58,Ensure that expressions are geometric.,
django/,74,Automatic SRID conversion so objects are comparable.,
django/,279,Geometry fields with geodetic (lon/lat) coordinates need special distance functions,
django/,281,DistanceSpheroid is more accurate and resource intensive than DistanceSphere,
django/,283,Replace boolean param by the real spheroid of the base field,
django/,291,SpatiaLite returns NULL instead of zero on geodetic coordinates,
django/,316,"If no precision is provided, set it to the maximum.",
django/,361,Geometry fields with geodetic (lon/lat) coordinates need length_spheroid,
django/,449,Reverse origin and size param ordering,
django/,479,Always provide the z parameter for ST_Translate,
django/,19,"this will be called again in parent, but it's needed now - before",
django/,20,we get the spatial_aggregate_name,
django/,1,NOQA isort:skip,
django/,2,isort:skip,
django/,3,NOQA,
django/,4,NOQA,
django/,5,NOQA,
django/,31,"If the database returns a Decimal, convert it to a float as expected",
django/,32,by the Python geometric objects.,
django/,35,"If the units are known, convert value into area measure.",
django/,45,"If argument is not a `SpatialReference` instance, use it as parameter",
django/,46,to construct a `SpatialReference` instance.,
django/,54,Initializing the keyword arguments dictionary for both PostGIS,
django/,55,and SpatiaLite.,
django/,62,Backend-specific fields for the SpatialRefSys model.,
django/,67,SpatiaLite specific,
django/,70,Creating the spatial_ref_sys model.,
django/,72,"Try getting via SRID only, because using all kwargs may",
django/,73,differ from exact wkt/proj in database.,
django/,17,Checking the parameters.,
django/,28,Instantiating the DataSource from the string.,
django/,35,Creating the dictionary.,
django/,38,Generating the field name for each field in the layer.,
django/,129,Getting the DataSource,
django/,137,Getting the layer corresponding to the layer key and getting,
django/,138,a string listing of all OGR fields in the Layer.,
django/,142,"Creating lists from the `null`, `blank`, and `decimal`",
django/,143,keyword arguments.,
django/,155,Gets the `null` and `blank` keywords for the given field name.,
django/,167,For those wishing to disable the imports.,
django/,178,The model field name.,
django/,183,Getting the keyword args string.,
django/,187,"By default OFTReals are mapped to `FloatField`, however, they",
django/,188,may also be mapped to `DecimalField` if specified in the,
django/,189,`decimal` keyword.,
django/,211,TODO: Autodetection of multigeometry types (see #7218).,
django/,217,Setting up the SRID keyword string.,
django/,226,WGS84 is already the default.,
django/,1,LayerMapping -- A Django Model/OGR Layer Mapping Utility,
django/,26,LayerMapping exceptions.,
django/,50,Acceptable 'base' types for a multi-geometry type.,
django/,59,Acceptable Django field types and corresponding acceptable OGR,
django/,60,counterparts.,
django/,95,Getting the DataSource and the associated Layer.,
django/,105,Setting the mapping & model attributes.,
django/,109,Checking the layer -- initialization of the object will fail if,
django/,110,things don't check out before hand.,
django/,113,Getting the geometry column associated with the model (an,
django/,114,exception will be raised if there is no geometry column).,
django/,120,"Checking the source spatial reference system, and getting",
django/,121,the coordinate transformation object (unless the `transform`,
django/,122,keyword is set to False),
django/,129,"Setting the encoding for OFTString fields, if specified.",
django/,131,"Making sure the encoding exists, if not a LookupError",
django/,132,exception will be thrown.,
django/,141,Has to be set to autocommit.,
django/,146,Setting the transaction decorator with the function in the,
django/,147,transaction modes dictionary.,
django/,156,#### Checking routines used during initialization,
django/,175,The geometry field of the model is set here.,
django/,176,"TODO: Support more than one geometry field / model.  However, this",
django/,177,depends on the GDAL Driver in use.,
django/,181,Getting lists of the field names and the field types available in,
django/,182,the OGR Layer.,
django/,186,Function for determining if the OGR mapping field is in the Layer.,
django/,194,"No need to increment through each feature in the model, simply check",
django/,195,the Layer metadata against what was given in the mapping dictionary.,
django/,197,Ensuring that a corresponding field exists in the model,
django/,198,for the given field name in the mapping.,
django/,204,"Getting the string name for the Django field class (e.g., 'PointField').",
django/,211,Getting the coordinate dimension of the geometry field.,
django/,222,Making sure that the OGR Layer's Geometry is compatible.,
django/,229,Setting the `geom_field` attribute w/the name of the model field,
django/,230,that is a Geometry.  Also setting the coordinate dimension,
django/,231,attribute.,
django/,237,Is every given related model mapping field in the Layer?,
django/,250,Is the model field type supported by LayerMapping?,
django/,254,Is the OGR field in the Layer?,
django/,258,Can the OGR field type be mapped to the Django field type?,
django/,276,Otherwise just pulling the SpatialReference from the layer,
django/,287,List of fields to determine uniqueness with,
django/,292,Only a single field passed in.,
django/,298,Keyword argument retrieval routines,
django/,304,The keyword arguments for model construction.,
django/,307,Incrementing through each model field and OGR field in the,
django/,308,dictionary mapping.,
django/,313,Verify OGR geometry.,
django/,319,"The related _model_, not a field was passed in -- indicating",
django/,320,another mapping for the related Model.,
django/,323,"Otherwise, verify OGR Field type.",
django/,326,Setting the keyword arguments for the field name with the,
django/,327,value obtained above.,
django/,343,#### Verification routines used in constructing model keyword arguments.,
django/,352,The encoding for OGR data sources may be specified here,
django/,353,"(e.g., 'cp437' for Census Bureau boundary files).",
django/,362,Creating an instance of the Decimal value to use.,
django/,367,Getting the decimal value as a tuple.,
django/,370,index where the decimal is,
django/,372,"Maximum amount of precision, or digits to the left of the decimal.",
django/,375,Getting the digits to the left of the decimal place for the,
django/,376,given decimal.,
django/,382,"If we have more than the maximum digits allowed, then throw an",
django/,383,InvalidDecimal exception.,
django/,392,Attempt to convert any OFTReal and OFTString value to an OFTInteger.,
django/,406,TODO: It is expensive to retrieve a model for every record --,
django/,407,explore if an efficient mechanism exists for caching related,
django/,408,ForeignKey models.,
django/,410,Constructing and verifying the related model keyword arguments.,
django/,415,Attempting to retrieve and return the related model.,
django/,430,"Downgrade a 3D geom to a 2D one, if necessary.",
django/,435,Constructing a multi-geometry type to contain the single geometry,
django/,442,"Transforming the geometry with our Coordinate Transformation object,",
django/,443,but only if the class variable `transform` is set w/a CoordTransform,
django/,444,object.,
django/,448,Returning the WKT of the geometry.,
django/,451,#### Other model methods,
django/,456,Getting the target spatial reference system,
django/,459,Creating the CoordTransform object,
django/,468,Use `get_field()` on the model's options so that we,
django/,469,get the correct field instance if there's model inheritance.,
django/,522,Getting the default Feature ID range.,
django/,525,"Setting the progress interval, if requested.",
django/,540,Getting the keyword arguments,
django/,544,Something borked the validation,
django/,550,Constructing the model using the keyword args,
django/,553,"If we want unique models on a particular field, handle the",
django/,554,geometry appropriately.,
django/,556,Getting the keyword arguments and retrieving,
django/,557,the unique model.,
django/,562,"Getting the geometry (in OGR form), creating",
django/,563,"one from the kwargs WKT, adding in additional",
django/,564,"geometries, and update the attribute with the",
django/,565,just-updated geometry WKT.,
django/,576,"No unique model exists yet, create.",
django/,582,Attempting to save.,
django/,589,Bailing out if the `strict` keyword is set.,
django/,600,"Printing progress information, if requested.",
django/,604,Only used for status output purposes -- incremental saving uses the,
django/,605,values returned here.,
django/,613,Incremental saving is requested at the given interval (step),
django/,621,Constructing the slice to use for this step; the last slice is,
django/,622,"special (e.g, [100:] instead of [90:100]).",
django/,631,Deliberately catch everything,
django/,635,"Otherwise, just calling the previously defined _save() function.",
django/,4,NOQA,
django/,5,NOQA,
django/,6,NOQA,
django/,10,"LayerMapping requires DJANGO_SETTINGS_MODULE to be set,",
django/,11,and ImproperlyConfigured is raised if that's not the case.,
django/,12,NOQA,
django/,33,Database will take care of transformation.,
django/,36,"If the database offers no KML method, we use the `kml`",
django/,37,attribute of the lazy geometry instead.,
django/,49,Getting the render function and rendering to the correct.,
django/,15,"If no locations specified, then we try to build for",
django/,16,every model in installed applications.,
django/,1,Geo-enabled Sitemap classes.,
django/,12,Getting a more specific field type and any additional parameters,
django/,13,from the `get_geometry_type` routine for the spatial backend.,
django/,101,Getting the OGR DataSource from the string parameter.,
django/,107,Returning the output of ogrinspect with the given arguments,
django/,108,and options.,
django/,110,Filter options to params accepted by `_ogrinspect`,
django/,116,"Constructing the keyword arguments for `mapping`, and",
django/,117,calling it on the data source.,
django/,124,This extra legwork is so that the dictionary definition comes,
django/,125,out in the same order as the fields in the model definition.,
django/,12,"Creating the settings dictionary with any settings, if needed.",
django/,25,The flags for GeoIP memory caching.,
django/,26,"Try MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that order.",
django/,28,Use the C extension with memory map.,
django/,30,Read from memory map. Pure Python.,
django/,32,Read database as standard file. Pure Python.,
django/,34,Load database into memory. Pure Python.,
django/,38,Paths to the city & country binary databases.,
django/,42,"Initially, pointers to GeoIP file references are NULL.",
django/,69,Checking the given cache option.,
django/,75,Getting the GeoIP data path.,
django/,82,Constructing the GeoIP database filenames using the settings,
django/,83,dictionary. If the database files for the GeoLite country,
django/,84,"and/or city datasets exist, then try to open them.",
django/,97,"Otherwise, some detective work will be needed to figure out",
django/,98,whether the given database path is for the GeoIP country or city,
django/,99,databases.,
django/,104,GeoLite City database detected.,
django/,108,GeoIP Country database detected.,
django/,128,Cleanup any GeoIP file handles lying around.,
django/,144,Making sure a string was passed in for the query.,
django/,148,Extra checks for the existence of country and city databases.,
django/,156,Return the query string back to the caller. GeoIP2 only takes IP addresses.,
django/,189,Returning the country code and name,
django/,193,#### Coordinate retrieval routines,
django/,218,#### GeoIP Database Information Routines,
django/,17,NOQA,
django/,20,cache of CoordTransform's,
django/,32,Find the first declared geometry field,
django/,48,"If needed, transform the geometry in the srid of the global geojson srid",
django/,46,"For more information, see the OGR C API source code:",
django/,47,https://www.gdal.org/ogr__api_8h.html,
django/,48,,
django/,49,The OGR_DS_* routines are relevant here.,
django/,55,The write flag.,
django/,60,See also https://trac.osgeo.org/gdal/wiki/rfc23_ogr_unicode,
django/,66,The data source driver is a void pointer.,
django/,69,OGROpen will auto-detect the data source type.,
django/,72,Making the error message more clear rather than something,
django/,73,"like ""Invalid pointer returned from OGROpen"".",
django/,84,Raise an exception if the returned pointer is NULL,
django/,55,"For more information, see the OGR C API source code:",
django/,56,https://www.gdal.org/ogr__api_8h.html,
django/,57,,
django/,58,The OGR_G_* routines are relevant here.,
django/,67,"If HEX, unpack input to a binary buffer.",
django/,72,"Constructing the geometry,",
django/,78,"If there's EWKT, set the SRS w/value of the SRID.",
django/,81,OGR_G_CreateFromWkt doesn't work with LINEARRING WKT.,
django/,82,See https://trac.osgeo.org/gdal/ticket/1992.,
django/,90,Seeing if the input is a valid short-hand string,
django/,91,"(e.g., 'Point', 'POLYGON').",
django/,95,WKB was passed in,
django/,98,"OGRGeomType was passed in, an empty geometry will be created.",
django/,101,OGR pointer (c_void_p) was the input.,
django/,106,Now checking the Geometry pointer before finishing initialization,
django/,107,by setting the pointer for the object.,
django/,112,"Assigning the SpatialReference object to the geometry, if valid.",
django/,116,Setting the class depending upon the OGR Geometry Type,
django/,119,Pickle routines,
django/,159,### Geometry set-like operations,
django/,160,g = g1 | g2,
django/,165,g = g1 & g2,
django/,170,g = g1 - g2,
django/,175,g = g1 ^ g2,
django/,188,#### Geometry Properties,
django/,244,TODO: Fix Envelope() for Point geometries.,
django/,256,#### SpatialReference-related Properties,
django/,258,The SRS property,
django/,269,Do not have to clone the `SpatialReference` object pointer because,
django/,270,when it is assigned to this `OGRGeometry` it's internal OGR,
django/,271,"reference count is incremented, and will likewise be released",
django/,272,(decremented) when this geometry's destructor is called.,
django/,286,The SRID property,
django/,301,#### Output Methods,
django/,344,wkbNDR (from ogr_core.h),
django/,346,wkbXDR,
django/,348,"Creating the unsigned character buffer, and passing it in by reference.",
django/,351,Returning a buffer of the string at the pointer.,
django/,368,#### Geometry Methods,
django/,379,Closing the open rings.,
django/,395,"Depending on the input type, use the appropriate OGR routine",
django/,396,to perform the transformation.,
django/,408,#### Topology Methods,
django/,415,Returning the output of the given function with the other geometry's,
django/,416,pointer.,
django/,451,#### Geometry-generation Methods,
django/,501,The subclasses for OGR Geometry.,
django/,589,LinearRings are used in Polygons.,
django/,607,Polygon Properties,
django/,611,First ring is the shell,
django/,623,Summing up the number of points in each ring of the Polygon.,
django/,629,"The centroid is a Point, create a geometry for this.",
django/,635,Geometry Collection base class.,
django/,667,Summing up the number of points in each geometry in this collection,
django/,677,Multiple Geometry types.,
django/,690,Class mapping dictionary (using the OGRwkbGeometryType as the key),
django/,17,"For more information, see the OGR C API source code:",
django/,18,https://www.gdal.org/ogr__api_8h.html,
django/,19,,
django/,20,The OGR_L_* routines are relevant here.,
django/,36,Does the Layer support random reading?,
django/,42,An integer index was given -- we cannot do a check based on the,
django/,43,number of features because the beginning and ending feature IDs,
django/,44,"are not guaranteed to be 0 and len(layer)-1, respectively.",
django/,49,A slice was given,
django/,57,ResetReading() must be called before iteration is to begin.,
django/,78,"If the Layer supports random reading, return.",
django/,84,"Random access isn't supported, have to increment through",
django/,85,each feature until the given feature ID is encountered.,
django/,89,"Should have returned a Feature, raise an IndexError.",
django/,92,#### Layer properties,
django/,175,Map c_double onto params -- if a bad type is passed in it,
django/,176,will be caught here.,
django/,186,#### Layer Methods,
django/,12,Custom library path set?,
django/,22,Windows NT shared libraries,
django/,25,*NIX library names.,
django/,30,Using the ctypes `find_library` utility  to find the,
django/,31,path to the GDAL library from the list of library names.,
django/,45,This loads the GDAL/OGR C library,
django/,48,"On Windows, the GDAL binaries have some OSR routines exported with",
django/,49,"STDCALL, while others are not.  Thus, the library will also need to",
django/,50,be loaded up as WinDLL for said OSR functions that require the,
django/,51,different calling convention.,
django/,68,#### Version-information functions.,
django/,70,Return GDAL library version information with the given key.,
django/,104,Set library error handling so as errors are logged,
django/,59,"If SRID is a string, e.g., '4326', then make acceptable",
django/,60,as user input.,
django/,66,EPSG integer code was input.,
django/,75,Input is already an SRS pointer.,
django/,78,"Creating a new SRS pointer, using the string buffer.",
django/,82,"If the pointer is NULL, throw an exception.",
django/,88,Importing from either the user input string or an integer SRID.,
django/,126,#### SpatialReference Methods,
django/,167,#### Name & SRID properties,
django/,188,#### Unit Properties,
django/,228,#### Spheroid/Ellipsoid Properties,
django/,252,#### Boolean Properties,
django/,274,#### Import Routines,
django/,295,#### Export Properties,
django/,10,"For more information, see the OGR C API source code:",
django/,11,https://www.gdal.org/ogr__api_8h.html,
django/,12,,
django/,13,The OGR_Fld_* routines are relevant here.,
django/,24,Setting the feature pointer and index.,
django/,28,Getting the pointer for this field.,
django/,34,Setting the class depending upon the OGR Field Type (OFT),
django/,41,#### Field Methods,
django/,73,#### Field Properties,
django/,103,Default is to get the field as a string.,
django/,112,### The Field sub-classes for each OGR Field type.,
django/,138,"String & Binary fields, just subclasses",
django/,151,"OFTDate, OFTTime, OFTDateTime fields.",
django/,167,TODO: Adapt timezone information.,
django/,168,See https://lists.osgeo.org/pipermail/gdal-dev/2006-February/007990.html,
django/,169,"The `tz` variable has values of: 0=unknown, 1=localtime (ambiguous),",
django/,170,"100=GMT, 104=GMT+1, 80=GMT-5, etc.",
django/,193,List fields are also just subclasses,
django/,214,Class mapping dictionary for OFT Types and reverse mapping.,
django/,228,New 64-bit integer types in GDAL 2,
django/,8,#### GDAL & SRS Exceptions,
django/,17,#### GDAL/OGR error checking codes and routine,
django/,19,OGR Error Codes,
django/,31,CPL Error Codes,
django/,32,https://www.gdal.org/cpl__error_8h.html,
django/,18,The OGR definition of an Envelope is a C structure containing four doubles.,
django/,19,See the 'ogr_core.h' source file for more information:,
django/,20,https://www.gdal.org/ogr__core_8h_source.html,
django/,45,OGREnvelope (a ctypes Structure) was passed in.,
django/,48,A tuple was passed in.,
django/,56,Individual parameters passed in.,
django/,57,Thanks to ww for the help,
django/,62,"Checking the x,y coordinates",
django/,100,"We provide a number of different signatures for this method,",
django/,101,and the logic here is all about converting them into a,
django/,102,4-tuple single parameter which does the actual work of,
django/,103,expanding the envelope.,
django/,110,A tuple was passed in.,
django/,128,An x and an y parameter were passed in,
django/,131,Individual parameters passed in.,
django/,174,TODO: Fix significant figures.,
django/,16,Case-insensitive aliases for some GDAL/OGR Drivers.,
django/,17,For a complete list of original driver names see,
django/,18,https://www.gdal.org/ogr_formats.html (vector),
django/,19,https://www.gdal.org/formats_list.html (raster),
django/,21,vector,
django/,27,raster,
django/,39,If a string name of the driver was passed in,
django/,42,Checking the alias dictionary (case-insensitive) to see if an,
django/,43,alias exists for the given driver.,
django/,49,Attempting to get the GDAL/OGR driver by the string name.,
django/,65,Making sure we get a valid pointer to the OGR Driver,
django/,78,Only register all if the driver counts are 0 (or else all drivers,
django/,79,will be registered over and over again),
django/,9,"For more information, see the OGR C API source code:",
django/,10,https://www.gdal.org/ogr__api_8h.html,
django/,11,,
django/,12,The OGR_F_* routines are relevant here.,
django/,56,#### Feature Properties,
django/,91,Retrieving the geometry pointer for the feature.,
django/,100,#### Feature Methods,
django/,9,Dictionary of acceptable OGRwkbGeometryType s and their string names.,
django/,30,"Reverse type dictionary, keyed by lowercase of the name.",
django/,51,Setting the OGR geometry type number.,
django/,10,Shortcut generation for routines with known parameters.,
django/,27,Creation & destruction.,
django/,34,"Getting the semi_major, semi_minor, and flattening functions.",
django/,39,"WKT, PROJ, EPSG, XML importation routines.",
django/,46,Morphing to/from ESRI WKT.,
django/,50,Identifying the EPSG,
django/,53,"Getting the angular_units, linear_units functions",
django/,57,"For exporting to WKT, PROJ.4, ""Pretty"" WKT, and XML.",
django/,65,Memory leak fixed in GDAL 1.5; still exists in 1.4.,
django/,68,String attribute retrieval routines.,
django/,73,SRS Properties,
django/,78,Coordinate transformation,
django/,14,For more detail about c function names and definitions see,
django/,15,https://gdal.org/gdal_8h.html,
django/,16,https://gdal.org/gdalwarper_8h.html,
django/,17,https://www.gdal.org/gdal__utils_8h.html,
django/,19,Prepare partial functions that use cpl error codes,
django/,24,Raster Driver Routines,
django/,31,Raster Data Source Routines,
django/,64,Raster Band Routines,
django/,94,Reprojection routine,
django/,104,Create VSI gdal raster files from in-memory buffers.,
django/,105,https://gdal.org/cpl__vsi_8h.html,
django/,15,shortcut type,
django/,17,Driver Routines,
django/,25,DataSource,
django/,34,Layer Routines,
django/,50,Feature Definition Routines,
django/,57,Feature Routines,
django/,79,Field Routines,
django/,45,Setting the argument types,
django/,49,When a geometry pointer is directly returned.,
django/,53,"Error code returned, geometry is returned by-reference.",
django/,118,Use subclass of c_char_p so the error checking routine,
django/,119,can free the memory at the pointer's address.,
django/,122,Error code is returned,
django/,125,Dynamically defining our error-checking function with the,
django/,126,given offset.,
django/,144,`errcheck` keyword may be set to False for routines that,
django/,145,"return void, rather than a status code.",
django/,13,Helper routines for retrieving pointers and/or values from,
django/,14,arguments passed in by reference.,
django/,25,### String checking Routines,
django/,48,For routines that return a string.,
django/,55,Error-code return specified.,
django/,58,Getting the string value,
django/,60,Correctly freeing the allocated memory behind GDAL pointer,
django/,61,with the VSIFree routine.,
django/,66,"### DataSource, Layer error-checking",
django/,69,### Envelope checking,
django/,75,### Geometry error-checking routines,
django/,78,"OGR_G_Clone may return an integer, even though the",
django/,79,restype is set to c_void_p,
django/,94,### Spatial Reference error-checking routines,
django/,103,### Other error-checking routines,
django/,12,### Generation routines specific to this module,
django/,33,### OGR_G ctypes function prototypes,
django/,35,GeoJSON routines.,
django/,40,"GetX, GetY, GetZ all return doubles.",
django/,45,Geometry creation routines.,
django/,59,Geometry modification routines.,
django/,63,Destroys a geometry,
django/,66,Geometry export routines.,
django/,67,special handling for WKB.,
django/,72,Geometry spatial-reference related routines.,
django/,76,Geometry properties,
django/,94,Topology routines.,
django/,104,Transformation routines.,
django/,108,For retrieving the envelope of the geometry.,
django/,69,"Preprocess json inputs. This converts json strings to dictionaries,",
django/,70,which are parsed below the same way as direct dictionary inputs.,
django/,74,"If input is a valid file path, try setting file as source.",
django/,84,GDALOpen will auto-detect the data source type.,
django/,89,Create a new raster in write mode.,
django/,91,Get size of buffer.,
django/,93,"Pass data to ctypes, keeping a reference to the ctypes object so",
django/,94,that the vsimem file remains available until the GDALRaster is,
django/,95,deleted.,
django/,97,Create random name to reference in vsimem filesystem.,
django/,99,Create vsimem file from buffer.,
django/,106,Open the new vsimem file as a GDALRaster.,
django/,110,Remove the broken file from the VSI filesystem.,
django/,114,A new raster needs to be created in write mode,
django/,117,Create driver (in memory by default),
django/,120,"For out of memory drivers, check filename argument",
django/,124,Check if width and height where specified,
django/,128,Check if srid was specified,
django/,132,Create null terminated gdal options array.,
django/,139,Convert papszlist to ctypes array.,
django/,142,Create GDAL Raster,
django/,153,Set band data if provided,
django/,158,Instantiate band filled with nodata values if only,
django/,159,partial input data has been provided.,
django/,165,Set band data values from input.,
django/,173,Set SRID,
django/,176,Set additional properties if provided,
django/,186,Instantiate the object using an existing pointer to a gdal raster.,
django/,193,Remove the temporary file from the VSI in-memory filesystem.,
django/,213,Raise an Exception if the value is being changed in read mode.,
django/,222,Prepare an integer that will contain the buffer length.,
django/,224,Get the data using the vsi file name.,
django/,230,Read the full buffer pointer.,
django/,317,Create empty ctypes double array for data,
django/,327,Create ctypes double array with input and write data,
django/,358,Calculate boundary values based on scale and size,
django/,361,Calculate min and max values,
django/,390,"Get the parameters defining the geotransform, srid, and size of the raster",
django/,397,"Get the driver, name, and datatype of the target raster",
django/,406,Instantiate raster bands filled with nodata values.,
django/,409,Create target raster,
django/,412,Select resampling algorithm,
django/,415,Reproject image,
django/,423,Make sure all data is written to file,
django/,433,Convert the resampling algorithm name into an algorithm id,
django/,436,Instantiate target spatial reference system,
django/,439,Create warped virtual dataset in the target reference system,
django/,446,Construct the target warp dictionary from the virtual raster,
django/,456,Set the driver and filepath if provided,
django/,463,Warp the raster into new srid,
django/,16,The initial metadata domain list contains the default domain.,
django/,17,The default is returned if domain name is None.,
django/,20,Get additional metadata domains from the raster.,
django/,23,"The number of domains is unknown, so retrieve data until there",
django/,24,are no more values in the ctypes array.,
django/,32,Free domain list array.,
django/,35,Retrieve metadata values for each domain.,
django/,38,Get metadata for this domain.,
django/,45,"The number of metadata items is unknown, so retrieve data until",
django/,46,there are no more values in the ctypes array.,
django/,55,The default domain values are returned if domain is None.,
django/,65,Loop through domains.,
django/,67,"Set the domain to None for the default, otherwise encode.",
django/,69,Set each metadata entry separately.,
django/,79,Prepare array with arguments for capi function,
django/,89,Add additional argument to force computation if there is no,
django/,90,existing PAM file to take the values from.,
django/,95,Computation of statistics fails for empty bands.,
django/,139,Get value and nodata exists flag,
django/,144,"If the pixeltype is an integer, convert to int",
django/,198,Create ctypes type array generator,
django/,202,Set read mode,
django/,204,Prepare empty ctypes array,
django/,207,Set write mode,
django/,210,Instantiate ctypes array holding the input data,
django/,216,Access band,
django/,221,"Return data as numpy array if possible, otherwise as list",
django/,226,reshape() needs a reshape parameter with the height first.,
django/,8,See https://www.gdal.org/gdal_8h.html#a22e22ce0a55036a96f652765793fb7a4,
django/,10,Unknown or unspecified type,
django/,11,Eight bit unsigned integer,
django/,12,Sixteen bit unsigned integer,
django/,13,Sixteen bit signed integer,
django/,14,Thirty-two bit unsigned integer,
django/,15,Thirty-two bit signed integer,
django/,16,Thirty-two bit floating point,
django/,17,Sixty-four bit floating point,
django/,18,Complex Int16,
django/,19,Complex Int32,
django/,20,Complex Float32,
django/,21,Complex Float64,
django/,24,A list of gdal datatypes that are integers.,
django/,27,Lookup values to convert GDAL pixel type indices into ctypes objects.,
django/,28,The GDAL band-io works with ctypes arrays to hold data to be written,
django/,29,or to hold the space for data to be read into. The lookup below helps,
django/,30,selecting the right ctypes object for a given gdal pixel type.,
django/,36,List of resampling algorithms that can be used to warp a GDALRaster.,
django/,47,See https://www.gdal.org/gdal_8h.html#ace76452d94514561fffa8ea1d2a5968c,
django/,49,"Undefined, default value, i.e. not known",
django/,50,Greyscale,
django/,51,Paletted,
django/,52,Red band of RGBA image,
django/,53,Green band of RGBA image,
django/,54,Blue band of RGBA image,
django/,55,"Alpha (0=transparent, 255=opaque)",
django/,56,Hue band of HLS image,
django/,57,Saturation band of HLS image,
django/,58,Lightness band of HLS image,
django/,59,Cyan band of CMYK image,
django/,60,Magenta band of CMYK image,
django/,61,Yellow band of CMYK image,
django/,62,Black band of CMLY image,
django/,63,Y Luminance,
django/,64,Cb Chroma,
django/,65,"Cr Chroma, also GCI_Max",
django/,68,Fixed base path for buffer-based GDAL in-memory files.,
django/,71,"Should the memory file system take ownership of the buffer, freeing it when",
django/,72,"the file is deleted? (No, GDALRaster.__del__() will delete the buffer.)",
django/,75,Should a VSI file be removed when retrieving its buffer?,
django/,52,Try to set the srid,
django/,71,Ensuring that the geometry is of the correct type (indicated,
django/,72,using the OGC string label).,
django/,76,Transforming the geometry if the SRID was set.,
django/,95,Only do a geographic comparison if both values are available,
django/,98,"If the initial value was not added by the browser, the geometry",
django/,99,"provided may be slightly different, the first time it is saved.",
django/,100,The comparison is done with a very low tolerance.,
django/,103,Check for change of state of existence,
django/,25,set on subclasses,
django/,46,If a string reaches here (via a validation error on another,
django/,47,field) then just reconstruct the Geometry.,
django/,52,Check that srid of value and map match,
django/,66,JS-safe,
django/,97,GeoJSON assumes WGS84 (4326). Use the map's SRID instead.,
django/,1,NOQA,
django/,3,NOQA,
django/,8,NOQA,
django/,1,"Copyright (c) 2008-2009 Aryeh Leib Taurog, all rights reserved.",
django/,2,Released under the New BSD license.,
django/,60,### Python initialization and special list interface methods,
django/,85,calculate new length and dimensions,
django/,109,### Special methods for arithmetic operations,
django/,147,self must be shorter,
django/,159,self must be shorter,
django/,167,### Public list interface Methods,
django/,168,## Non-mutating,
django/,184,## Mutating,
django/,217,### Private routines,
django/,254,CAREFUL: index.step and step are not the same!,
django/,255,step will never be None,
django/,264,"extended slice, only allow assigning slice of same size",
django/,270,we're not changing the length of the sequence,
django/,286,"extended slice, only allow assigning slice of same size",
django/,26,Here a tuple or list was passed in under the `x` parameter.,
django/,29,"Here X, Y, and (optionally) Z were passed in individually, as parameters.",
django/,39,Initializing using the address returned from the GEOS,
django/,40,createPoint factory.,
django/,86,can this happen?,
django/,148,### Tuple setting and retrieval routines.,
django/,159,The tuple and coords properties,
django/,33,Getting the ext_ring and init_holes parameters from the argument list,
django/,37,"If initialized as Polygon(shell, (LinearRing, LinearRing)) [for backward-compatibility]",
django/,68,### These routines are needed for list-like operation w/ListMixin,
django/,70,"Instantiate LinearRing objects if necessary, but don't clone them yet",
django/,71,_construct_ring will throw a TypeError if a parameter isn't a valid ring,
django/,72,"If we cloned the pointers here, we wouldn't be able to clean up",
django/,73,in case of error.,
django/,113,"Getting the current pointer, replacing with the newly constructed",
django/,114,"geometry, and destroying the old geometry.",
django/,137,"Getting the interior ring, have to subtract 1 from the index.",
django/,146,#### Polygon Properties,
django/,150,Getting the number of rings,
django/,161,Properties for the exterior ring/shell.,
django/,22,Custom library path set?,
django/,29,Setting the appropriate names for the GEOS-C library.,
django/,33,Windows NT libraries,
django/,36,*NIX libraries,
django/,41,Using the ctypes `find_library` utility to find the path to the GEOS,
django/,42,shared library.  This is better than manually specifying each library name,
django/,43,"and extension (e.g., libgeos_c.[so|so.1|dylib].).",
django/,50,No GEOS library could be found.,
django/,57,Getting the GEOS C library.  The C interface (CDLL) is used for,
django/,58,both *NIX and Windows.,
django/,59,See the GEOS C API source code for more details on the library function calls:,
django/,60,https://geos.osgeo.org/doxygen/geos__c_8h_source.html,
django/,62,Here we set up the prototypes for the initGEOS_r and finishGEOS_r,
django/,63,routines.  These functions aren't actually called until they are,
django/,64,attached to a GEOS context handle -- this actually occurs in,
django/,65,geos/prototypes/threadsafe.py.,
django/,68,Set restype for compatibility across 32 and 64-bit platforms.,
django/,73,The notice and error handler C function callback definitions.,
django/,74,Supposed to mimic the GEOS message handler (C below):,
django/,75,"typedef void (*GEOSMessageHandler)(const char *fmt, ...);",
django/,104,"#### GEOS Geometry C data structures, and utility functions.",
django/,107,"Opaque GEOS geometry structures, used for GEOM_PTR and CS_PTR",
django/,124,Pointers to opaque GEOS geometry structures.,
django/,26,"If only one argument provided, set the coords array appropriately",
django/,35,If SRID was passed in with the keyword arguments,
django/,54,Using numpy's shape.,
django/,60,Getting the number of coords and the number of dimensions -- which,
django/,61,"must stay the same, e.g., no LineString((1, 2), (1, 2, 3)).",
django/,63,Incrementing through each of the coordinates and verifying,
django/,74,Creating a coordinate sequence object because it is easier to,
django/,75,set the points using its methods.,
django/,88,Calling the base geometry initialization with the returned pointer,
django/,89,from the function.,
django/,108,I don't understand why these are different,
django/,111,create a new coordinate sequence and populate accordingly,
django/,124,can this happen?,
django/,134,#### Sequence Properties,
django/,148,ARRRR!,
django/,176,LinearRings are LineStrings used within Polygons.,
django/,14,"Public classes for (WKB|WKT)Reader, which return GEOSGeometry",
django/,20,Checking the arguments,
django/,22,If only one geometry provided or a list of geometries is provided,
django/,23,in the first argument.,
django/,31,Ensuring that only the permitted geometries are allowed in this collection,
django/,32,this is moved to list mixin super class,
django/,35,Creating the geometry pointer array.,
django/,48,### Methods for compatibility with ListMixin,
django/,50,Creating the geometry pointer array.,
django/,52,"this is a little sloppy, but makes life easier",
django/,53,allow GEOSGeometry types (python wrappers) or pointer types,
django/,63,Checking the index and returning the corresponding GEOS geometry.,
django/,90,"MultiPoint, MultiLineString, and MultiPolygon class definitions.",
django/,106,Setting the allowed types here since GeometryCollection is defined before,
django/,107,its subclasses.,
django/,30,"Only Point, LineString, LinearRing have coordinate sequences",
django/,35,"Setting the class type (e.g., Point, Polygon, etc.)",
django/,39,Inner imports avoid import conflicts with GEOSGeometry.,
django/,62,Setting the coordinate sequence for the geometry (will be None on,
django/,63,geometries that do not have coordinate sequences),
django/,89,Pickling support,
django/,97,The pickled state is simply a tuple of the WKB (in string form),
django/,98,and the SRID.,
django/,102,Instantiating from the tuple state that was pickled.,
django/,140,Comparison operators,
django/,156,### Geometry set-like operations,
django/,157,Thanks to Sean Gillies for inspiration:,
django/,158,http://lists.gispython.org/pipermail/community/2007-July/001034.html,
django/,159,g = g1 | g2,
django/,164,g = g1 & g2,
django/,169,g = g1 - g2,
django/,174,g = g1 ^ g2,
django/,179,#### Coordinate Sequence Routines,
django/,186,#### Geometry Info,
django/,221,#### Unary predicates,
django/,257,#### Binary predicates.,
django/,333,#### SRID Routines,
django/,348,#### Output Routines,
django/,369,"A possible faster, all-python, implementation:",
django/,370,str(self.wkb).encode('hex'),
django/,422,#### GDAL-specific output routines,
django/,457,short-circuit where source & dest SRIDs match,
django/,464,We don't care about SRID because CoordTransform presupposes,
django/,465,source SRS.,
django/,470,"Creating an OGR Geometry, which is then transformed.",
django/,473,Getting a new GEOS pointer,
django/,476,User wants a cloned transformed geometry returned.,
django/,479,"Reassigning pointer, and performing post-initialization setup",
django/,480,again due to the reassignment.,
django/,488,#### Topology Routines,
django/,595,#### Other Routines,
django/,702,Handle WKT input.,
django/,707,Handle HEXEWKB input.,
django/,710,Handle GeoJSON input.,
django/,717,When the input is a pointer to a geometry (GEOM_PTR).,
django/,720,When the input is a buffer (WKB).,
django/,735,"Set the SRID, if given.",
django/,47,Checking the input value,
django/,54,Checking the dims of the input,
django/,66,#### Internal Routines,
django/,116,#### Ordinate getting and setting routines,
django/,153,### Dimensions,
django/,172,### Other Methods,
django/,180,Getting the substitution string depending on whether the coordinates have,
django/,181,a Z dimension.,
django/,202,A modified shoelace algorithm to determine polygon orientation.,
django/,203,See https://en.wikipedia.org/wiki/Shoelace_formula.,
django/,15,Keeping a reference to the original geometry object to prevent it,
django/,16,from being garbage collected which could then crash the prepared one,
django/,17,See #21662,
django/,5,NOQA,
django/,8,NOQA,
django/,9,NOQA,
django/,10,NOQA,
django/,11,NOQA,
django/,12,NOQA,
django/,13,NOQA,
django/,14,NOQA,
django/,15,NOQA,
django/,9,"If given a file name, get a real handle.",
django/,16,"If we get WKB need to wrap in memoryview(), so run through regexes.",
django/,11,## Binary & unary predicate factories,
django/,24,## Unary Predicates,
django/,32,## Binary Predicates,
django/,15,### The WKB/WKT Reader/Writer structures and pointers,
django/,37,WKTReader routines,
django/,44,WKTWriter routines,
django/,62,WKBReader routines,
django/,68,Although the function definitions take `const unsigned char *`,
django/,69,"as their parameter, we use c_char_p here so the function may",
django/,70,take Python strings directly as parameters.  Inside Python there,
django/,71,"is not a difference between signed and unsigned characters, so",
django/,72,it is not a problem.,
django/,81,WKBWriter routines,
django/,86,WKB Writing prototypes.,
django/,97,WKBWriter property getter/setter prototypes.,
django/,115,### Base I/O Class,
django/,119,Getting the pointer with the constructor.,
django/,121,Loading the real destructor function at this point as doing it in,
django/,122,__del__ is too late (import error).,
django/,125,### Base WKB/WKT Reading and Writing objects,
django/,128,Non-public WKB/WKT reader classes for internal use because,
django/,129,their `read` methods return _pointers_ instead of GEOSGeometry,
django/,130,objects.,
django/,158,### WKB/WKT Writer Classes,
django/,226,PostGIS uses POINT(NaN NaN) for WKB representation of empty,
django/,227,points. Use it for EWKB as it's a PostGIS specific format.,
django/,228,https://trac.osgeo.org/postgis/ticket/3181,
django/,240,Fix GEOS output for empty polygon.,
django/,241,See https://trac.osgeo.org/geos/ticket/680.,
django/,254,### WKBWriter Properties,
django/,256,Property for getting/setting the byteorder.,
django/,267,Property for getting/setting the output dimension.,
django/,278,Property for getting/setting the include srid flag.,
django/,288,`ThreadLocalIO` object holds instances of the WKT and WKB reader/writer,
django/,289,objects that are local to the thread.  The `GEOSGeometry` internals,
django/,290,"access these instances by calling the module-level functions, defined",
django/,291,below.,
django/,303,These module-level routines return the I/O object that is local to the,
django/,304,thread. If the I/O object does not exist yet it will be initialized.,
django/,19,Status code returned,
django/,23,### ctypes prototypes,
django/,25,"Area, distance, and length prototypes.",
django/,15,Initializing the context handler for this thread with,
django/,16,the notice and error handler.,
django/,20,Defining a thread-local object and creating an instance,
django/,21,to hold a reference to GEOSContextHandle for this thread.,
django/,35,GEOS thread-safe function signatures end with '_r' and take an,
django/,36,additional context handle parameter.,
django/,38,Create a reference to thread_context so it's not garbage-collected,
django/,39,before an attempt to call this object.,
django/,43,Create a context handle if one doesn't exist for this thread.,
django/,45,Call the threaded GEOS routine with the pointer of the context handle,
django/,46,as the first argument.,
django/,52,argtypes property,
django/,61,restype property,
django/,70,errcheck property,
django/,9,## Error-checking routines specific to coordinate sequences.,
django/,21,"Object in by reference, return its value.",
django/,25,## Coordinate sequence prototype factory classes.,
django/,39,Get routines have double parameter passed-in by reference.,
django/,47,Get/Set ordinate routines have an extra uint parameter.,
django/,68,## Coordinate Sequence ctypes prototypes,
django/,70,Coordinate Sequence constructors & cloning.,
django/,75,"Getting, setting ordinate",
django/,79,"For getting, x, y, z",
django/,84,"For setting, x, y, z",
django/,89,These routines return size & dimensions.,
django/,8,Prepared geometry constructor and destructors.,
django/,13,Prepared geometry binary predicate support.,
django/,7,NOQA,
django/,12,NOQA,
django/,19,NOQA,
django/,20,NOQA,
django/,26,NOQA,
django/,9,Getting the `free` routine used to free the memory allocated for,
django/,10,string pointers returned by GEOS.,
django/,22,Checking the status code,
django/,25,"Double passed in by reference, return its value.",
django/,62,A c_size_t object is passed in by reference for the second,
django/,63,"argument on these routines, and its needed to determine the",
django/,64,correct size.,
django/,66,Freeing the memory allocated within GEOS,
django/,79,Getting the string value at the pointer address.,
django/,81,Freeing the memory allocated within GEOS,
django/,8,"This is the return type used by binary output (WKB, HEX) routines.",
django/,12,We create a simple subclass of c_char_p here because when the response,
django/,13,"type is set to c_char_p, you get a _Python_ string and there's no way",
django/,14,to access the string's address inside the error checking function.,
django/,15,"In other words, you can't free the memory allocated inside GEOS.  Previously,",
django/,16,the return type would just be omitted and the integer address would be,
django/,17,used -- but this allows us to be specific in the function definition and,
django/,18,keeps the reference so it may be free'd.,
django/,23,### ctypes factory classes,
django/,44,### ctypes prototypes,
django/,46,"The GEOS geometry type, typeid, num_coordinates and number of geometries",
django/,54,Geometry creation factories,
django/,59,Polygon and collection creation routines are special and will not,
django/,60,have their argument types defined.,
django/,65,Ring routines,
django/,70,Collection Routines,
django/,73,Cloning,
django/,76,Destruction routine.,
django/,79,SRID routines,
django/,21,Topology Routines,
django/,39,"GEOSRelate returns a string, not a geometry.",
django/,44,Linear referencing routines,
django/,29,Field flags,
django/,170,"This should never happen. I love comments like this, don't you?",
django/,177,"For efficiency, group the instances by content type and then do one",
django/,178,query per model,
django/,180,We need one instance for each group in order to get the right db:,
django/,184,We avoid looking for values if either ct_id or fkey value is None,
django/,198,"For doing the join in Python, we have to match both the FK val and the",
django/,199,"content type, so we use a callable that returns a (fk, class) pair.",
django/,223,"Don't use getattr(instance, self.ct_field) here because that might",
django/,224,"reload the same ContentType over and over (#5570). Instead, get the",
django/,225,"content type ID here, and later when the actual instance is needed,",
django/,226,"use ContentType.objects.get_for_id(), which has a global cache.",
django/,278,Field flags,
django/,303,This construct is somewhat of an abuse of ForeignObject. This field,
django/,304,"represents a relation from pk to object_id field. But, this relation",
django/,305,"isn't direct, the join is generated reverse along foreign key. So,",
django/,306,"the from_field is object_id field, to_field is pk because of the",
django/,307,reverse join.,
django/,362,With an inheritance chain ChildTag -> Tag and Tag defines the,
django/,363,"GenericForeignKey, and a TaggedItem model has a GenericRelation to",
django/,364,"ChildTag, then we need to generate a join from TaggedItem to Tag",
django/,365,"(as Tag.object_id == TaggedItem.pk), and another join from Tag to",
django/,366,ChildTag (as that is where the relation is to). Do this by first,
django/,367,"generating a join to the parent model, then generating joins to the",
django/,368,child models.,
django/,382,Collect joins needed for the parent -> child chain. This is easiest,
django/,383,to do if we collect joins for the child -> parent chain and then,
django/,384,reverse the direction (call to reverse() and use of,
django/,385,field.remote_field.get_path_info()).,
django/,434,Disable the reverse relation for fields inherited by subclasses of a,
django/,435,model in multi-table inheritance. The reverse relation points to the,
django/,436,field of the base model.,
django/,442,Add get_RELATED_order() and set_RELATED_order() to the model this,
django/,443,"field belongs to, if the model on the other end of this relation",
django/,444,is ordered with respect to its corresponding GenericForeignKey.,
django/,555,nothing to clear from cache,
django/,570,Group instances by content types.,
django/,582,We (possibly) need to convert object IDs to the type of the,
django/,583,instances' PK in order to match up instances:,
django/,647,`QuerySet.delete()` creates its own atomic block which,
django/,648,contains the `pre_delete` and `post_delete` signal handlers.,
django/,657,Force evaluation of `objs` in case it's a queryset whose value,
django/,658,could be affected by `manager.clear()`. Refs #19816.,
django/,13,"Look up the object, making sure it's got a get_absolute_url() function.",
django/,37,"Try to figure out the object's domain, so we can do a cross-site redirect",
django/,38,if necessary.,
django/,40,"If the object actually defines a domain, we're done.",
django/,44,"Otherwise, we need to introspect the object's relationships for a",
django/,45,relation to the Site object,
django/,56,Look for a many-to-many relationship to Site.,
django/,60,The current site's domain matches a site attached to the,
django/,61,object.,
django/,63,"Caveat: In the case of multiple related Sites, this just",
django/,64,"selects the *first* one, which is arbitrary.",
django/,70,No many-to-many relationship to Site found. Look for a,
django/,71,many-to-one relationship to Site.,
django/,82,"If all that malarkey found an object domain, use it. Otherwise, fall back",
django/,83,to whatever get_absolute_url() returned.,
django/,67,if there is no field called `ct_field` let the exception propagate,
django/,71,let the exception propagate,
django/,13,Cache shared by all the get_for_* methods to speed up,
django/,14,ContentType retrieval.,
django/,46,"The ContentType entry was not found in the cache, therefore we",
django/,47,proceed to load or create it.,
django/,49,Start with get() and not get_or_create() in order to use,
django/,50,the db_for_read (see #20401).,
django/,53,Not found in the database; we proceed to create it. This time,
django/,54,use get_or_create to take care of any race conditions.,
django/,67,Models that aren't already in the cache.,
django/,70,Mapping of opts to the list of models requiring it.,
django/,83,Lookup required content types from the DB.,
django/,93,Create content types that weren't in the cache or DB.,
django/,112,This could raise a DoesNotExist; that's correct behavior and will,
django/,113,make sure that only correct ctypes get stored in the cache dict.,
django/,126,Note it's possible for ContentType objects to be stale; model_class() will return None.,
django/,127,"Hence, there is no reliance on model._meta.app_label here, just using the model fields instead.",
django/,17,"There's no FK to exclude, so no exclusion checks are required.",
django/,21,"There's no FK, but we do need to confirm that the ct_field and ct_fk_field are valid,",
django/,22,and that they are part of a GenericForeignKey.,
django/,39,Check that the ct_field and ct_fk_fields exist,
django/,66,There's one or more GenericForeignKeys; make sure that one of them,
django/,67,uses the right ct_field and ct_fk_field.,
django/,97,Take the custom ModelForm's Meta.exclude into account only if the,
django/,98,GenericInlineModelAdmin doesn't define its own.,
django/,30,Gracefully fallback if a stale content type causes a,
django/,31,conflict as remove_stale_contenttypes will take care of,
django/,32,asking the user what should be done next.,
django/,35,Clear the cache as the `get_by_natural_key()` call will cache,
django/,36,the renamed ContentType instance by its old model name.,
django/,54,Determine whether or not the ContentType model is available.,
django/,66,There's no point in going forward if the initial contenttypes,
django/,67,migration is unapplied as the ContentType model will be,
django/,68,unavailable from this point.,
django/,74,The ContentType model is not available yet.,
django/,47,Confirm that the content type is stale before deletion.,
django/,20,A higher middleware layer may return a request which does not contain,
django/,21,"messages storage, so make no assumption that it will be there.",
django/,1,NOQA,
django/,2,NOQA,
django/,139,Check that the message level is not less than the recording level.,
django/,143,Add the message.,
django/,26,"If the backend hasn't been used, no more retrieval is necessary.",
django/,32,"If this storage class contained all the messages, no further",
django/,33,retrieval is necessary,
django/,49,"Even if there are no more messages, continue iterating to ensure",
django/,50,storages which contained messages are flushed.,
django/,19,Using 0/1 here instead of False/True to produce more compact json,
django/,55,uwsgi's default configuration enforces a maximum size of 4kb for all the,
django/,56,"HTTP headers. In order to leave some room for other cookies and headers,",
django/,57,restrict the session cookie to 1/2 of 4kb. See #18781.,
django/,77,remove the sentinel value,
django/,109,"data is going to be stored eventually by SimpleCookie, which",
django/,110,"adds its own overhead, which we must account for.",
django/,111,create outside the loop,
django/,132,The class wide key salt is not reused here since older Django,
django/,133,versions had it fixed and making it dynamic would break old hashes if,
django/,134,self.key_salt is changed.,
django/,163,"RemovedInDjango40Warning: when the deprecation ends, replace",
django/,164,with:,
django/,165,decoded = None.,
django/,172,Mark the data as used (so it gets removed) since something was wrong,
django/,173,with the data.,
django/,178,RemovedInDjango40Warning: pre-Django 3.1 hashes will be invalid.,
django/,23,Register the handler only if UserModel.last_login is a field.,
django/,44,Run the default password hasher once to reduce the timing,
django/,45,difference between an existing and a nonexistent user (#20760).,
django/,180,Create a User object if not already in the database?,
django/,197,"Note that this could be accomplished in one try-except clause, but",
django/,198,instead we use get_or_create when creating unknown users since it has,
django/,199,built-in safeguards for multiple threads.,
django/,1,The views used below are normally mapped in django.contrib.admin.urls.py,
django/,2,This URLs file is used to provide a reliable view deployment for test purposes.,
django/,3,It is also provided as a convenience to those who want to deploy these URLs,
django/,4,elsewhere.,
django/,4,Avoid shadowing the login() and logout() views below.,
django/,121,Redirect to this page until the session has been cleared.,
django/,148,Security check -- Ensure the user-originating redirection URL is,
django/,149,safe.,
django/,189,Class-based password reset views,
django/,190,- PasswordResetView sends the mail,
django/,191,- PasswordResetDoneView shows a success message for the above,
django/,192,- PasswordResetConfirmView checks the link the user clicked and,
django/,193,prompts for a new password,
django/,194,- PasswordResetCompleteView shows a success message for the above,
django/,270,"If the token is valid, display the password reset form.",
django/,275,Store the token in the session and redirect to the,
django/,276,password reset form at a URL without the token. That,
django/,277,avoids the possibility of leaking the token in the,
django/,278,HTTP Referer header.,
django/,283,"Display the ""Password reset unsuccessful"" page.",
django/,288,urlsafe_base64_decode() decodes to bytestring,
django/,349,Updating the password logs out all other sessions for the user,
django/,350,except the current one.,
django/,61,Always return initial because the widget doesn't,
django/,62,render an input field.,
django/,124,Validate the password after self.instance is updated with form data,
django/,125,by super().,
django/,166,"Regardless of what the user provides, return the initial value.",
django/,167,"This is done here, rather than on the field, because the",
django/,168,field does not have access to the initial value,
django/,201,"Set the max length and label for the ""username"" field.",
django/,263,Email subject *must not* contain newlines,
django/,40,Name of request header to grab username from.  This will be the key as,
django/,41,"used in the request.META dictionary, i.e. the normalization of headers to",
django/,42,"all uppercase and the addition of ""HTTP_"" prefix apply.",
django/,47,AuthenticationMiddleware is required so that request.user exists.,
django/,58,If specified header doesn't exist then remove any existing,
django/,59,"authenticated remote-user, or return (leaving request.user set to",
django/,60,AnonymousUser by the AuthenticationMiddleware).,
django/,64,If the user is already authenticated and that user is the user we are,
django/,65,"getting passed in the headers, then the correct user is already",
django/,66,persisted in the session and we don't need to continue.,
django/,71,"An authenticated user is associated with the request, but",
django/,72,it does not match the authorized user in the header.,
django/,75,"We are seeing this user for the first time in this session, attempt",
django/,76,to authenticate the user.,
django/,79,User is valid.  Set request.user and persist user in the session,
django/,80,by logging the user in.,
django/,93,Backend has no clean_username method.,
django/,105,backend failed to load,
django/,18,This will never be a valid encoded hash,
django/,19,number of random chars to add after UNUSABLE_PASSWORD_PREFIX,
django/,45,encoded is gibberish or uses a hasher that's no longer installed.,
django/,52,If the hasher didn't change (we don't protect against enumeration if it,
django/,53,"does) and the password should get updated, try to close the timing gap",
django/,54,between the work factor of the current encoded password and the default,
django/,55,work factor.,
django/,141,Ancient versions of Django created plain MD5 passwords and accepted,
django/,142,MD5 passwords with an empty salt.,
django/,146,Ancient versions of Django accepted SHA1 passwords with an empty salt.,
django/,193,"12 returns a 71-bit value, log_2((26+26+10)^12) =~ 71 bits",
django/,362,The runtime for Argon2 is too complicated to implement a sensible,
django/,363,hardening algorithm.,
django/,375,Argon2 < 1.3,
django/,415,Hash the password prior to using bcrypt to prevent password,
django/,416,truncation as described in #20138.,
django/,418,Use binascii.hexlify() because a hex encoded bytestring is str.,
django/,447,Length of the salt in bcrypt.,
django/,449,"work factor is logarithmic, adding one doubles the load.",
django/,622,A platform like OpenBSD with a dummy crypt module.,
django/,623,"we don't need to store the salt, but Django used to do this",
django/,30,Parse the token,
django/,41,Check that the timestamp/uid has not been tampered with,
django/,43,"RemovedInDjango40Warning: when the deprecation ends, replace",
django/,44,with:,
django/,45,return False,
django/,52,Check the timestamp is within limit.,
django/,59,"timestamp is number of seconds since 2001-1-1. Converted to base 36,",
django/,60,this gives us a 6 digit string until about 2069.,
django/,66,"RemovedInDjango40Warning: when the deprecation ends, remove the",
django/,67,legacy argument and replace with:,
django/,68,"algorithm=self.algorithm,",
django/,70,Limit to 20 characters to shorten the URL.,
django/,88,Truncate microseconds so that tokens are consistent even if the,
django/,89,database doesn't support microseconds.,
django/,97,Used for mocking in tests,
django/,1,PermWrapper and PermLookupDict proxy the permissions system into objects that,
django/,2,the template system can understand.,
django/,16,To fix 'item in perms.someapp' and __getitem__ interaction we need to,
django/,17,define __iter__. See #18979 for details.,
django/,32,"I am large, I contain multitudes.",
django/,40,The name refers to module.,
django/,21,Checks might be run against a set of app configs that don't,
django/,22,include the specified user model. In this case we simply don't,
django/,23,perform the checks defined below.,
django/,28,Check that REQUIRED_FIELDS is a list,
django/,38,Check that the USERNAME FIELD isn't included in REQUIRED_FIELDS.,
django/,54,Check that the username field is unique,
django/,116,Check builtin permission name length.,
django/,136,Check builtin permission codename length.,
django/,160,Check custom permission name length.,
django/,172,Check custom permission codename length.,
django/,186,Check custom permissions codename clashing.,
django/,186,A few helper functions for common logic between User and AnonymousUser.,
django/,289,Active superusers have all permissions.,
django/,293,Otherwise we need to check the backends.,
django/,308,Active superusers have all permissions.,
django/,411,instances always return the same hash value,
django/,56,"This value in the session is always serialized to a string, so we need",
django/,57,to convert it back to Python whenever we access it.,
django/,70,This backend doesn't accept these credentials as arguments. Try the next one.,
django/,75,This backend says to stop in our tracks - this user should not be allowed in at all.,
django/,79,Annotate the user object with the path of the backend.,
django/,83,"The credentials supplied are invalid to all backends, fire signal",
django/,103,"To avoid reusing another user's session, create a new, empty",
django/,104,session if the existing session corresponds to a different,
django/,105,authenticated user.,
django/,140,Dispatch the signal before the user is logged out so the receivers have a,
django/,141,chance to find out *who* logged out.,
django/,182,Verify the session,
django/,24,If the login url is the same scheme and net location then just,
django/,25,"use the path as the ""next"" url.",
django/,65,First check if the user has the permission (even anon users),
django/,68,In case the 403 handler should be called raise the exception,
django/,71,"As the last resort, show the login form",
django/,55,Stores the raw password if set_password() is called so that it can,
django/,56,be passed to password_changed() after the model is saved.,
django/,108,Password hash upgrades shouldn't be considered password changes.,
django/,114,Set a value that will never be a valid hash,
django/,34,Avoid a major performance hit resolving permission names which,
django/,35,triggers a content_type load:,
django/,92,Don't allow lookups involving passwords.,
django/,102,It's an error for a user to have add permission but NOT change,
django/,103,"permission for users. If we allowed such users to add users, they",
django/,104,"could create superusers, which would mean they would essentially have",
django/,105,"the permission to change users. To avoid the problem entirely, we",
django/,106,disallow users from adding users if they don't have change,
django/,107,permission.,
django/,110,Raise Http404 in debug mode so that the user gets a helpful,
django/,111,error message.,
django/,197,We should allow further modification of the user just added i.e. the,
django/,198,'Save' button should behave like the 'Save and continue editing',
django/,199,button except in two scenarios:,
django/,200,* The user has pressed the 'Save and add another' button,
django/,201,* We are adding a user in a popup,
django/,11,No database changes; modifies validators and error_messages (#13147).,
django/,12,Ensure the contenttypes migration is applied before sending,
django/,13,post_migrate signals (which create ContentTypes).,
django/,39,Ensure that contenttypes are created for this app. Needed if,
django/,40,'django.contrib.auth' is in INSTALLED_APPS before,
django/,41,'django.contrib.contenttypes'.,
django/,55,This will hold the permissions we're looking for as,
django/,56,"(content_type, (codename, name))",
django/,58,The codenames and ctypes that should exist.,
django/,61,Force looking up the content types in the current database,
django/,62,before creating foreign keys to them.,
django/,69,Find all the Permissions that have a content_type for a model we're,
django/,70,looking for.  We don't need to check for codenames since we already have,
django/,71,a list of the ones we're going to create.,
django/,97,KeyError will be raised by os.getpwuid() (called by getuser()),
django/,98,if there is no corresponding entry in the /etc/passwd file,
django/,99,"(a very restricted chroot environment, for example).",
django/,113,"This file is used in apps.py, it should not trigger models import.",
django/,116,"If the User model has been swapped out, we can't make any assumptions",
django/,117,about the default user name.,
django/,131,Run the username validator,
django/,137,Don't return the default username if it is already taken.,
django/,78,Used for testing,
django/,91,"If not provided, create the user with an unusable password.",
django/,95,Same as user_data but without many to many fields and with,
django/,96,foreign keys as fake model instances instead of raw IDs.,
django/,108,Prompt for username.,
django/,123,Prompt for required fields.,
django/,140,Wrap any foreign keys in fake model instances,
django/,144,Prompt for a password if the model has one.,
django/,150,Don't validate passwords that don't match.,
django/,154,Don't validate blank passwords.,
django/,165,Non-interactive mode.,
django/,166,"Use password from environment variable, if provided.",
django/,169,"Use username from environment variable, if not provided in",
django/,170,options.,
django/,51,To make them initially mismatch.,
django/,59,Don't validate passwords that don't match.,
django/,14,db connection state is managed similarly to the wsgi handler,
django/,15,as mod_wsgi may call these functions outside of a request/response cycle,
django/,12,This view is called from FlatpageFallbackMiddleware.process_response,
django/,13,"when a 404 is raised, which often means CsrfViewMiddleware.process_view",
django/,14,has not been called even if CsrfViewMiddleware is installed. So we need,
django/,15,"to use @csrf_protect, in case the template needs {% csrf_token %}.",
django/,16,"However, we can't just wrap this view; if no matching flatpage exists,",
django/,17,"or a redirect is required for authentication, the 404 needs to be returned",
django/,18,"without any CSRF checks. Therefore, we only",
django/,19,CSRF protect the internal implementation.,
django/,53,"If registration is required for accessing this page, and the user isn't",
django/,54,"logged in, redirect to the login page.",
django/,63,"To avoid having to always use the ""|safe"" filter in flatpage templates,",
django/,64,mark the title and content as already safe (since they are raw HTML,
django/,65,content in the first place).,
django/,10,No need to check for a flatpage for non-404 responses.,
django/,13,Return the original response if any errors happened. Because this,
django/,14,"is a middleware, we can't assume the errors will be caught elsewhere.",
django/,46,Handle script prefix manually because we bypass reverse(),
django/,27,"If a prefix was specified, add a filter",
django/,32,"If the provided user is not authenticated, or no user",
django/,33,"was provided, filter the list to only public flatpages.",
django/,76,Must have at 3-6 bits in the tag,
django/,78,"If there's an even number of bits, there's no prefix",
django/,84,The very last bit must be the context name,
django/,89,"If there are 5 or 6 bits, there is a user defined",
django/,33,Disconnect this receiver until the next time this app is installed,
django/,34,and ready() connects it again to prevent unnecessary processing on,
django/,35,each setting change.,
django/,46,Connections may already exist before we are called.,
django/,45,Hstore is not available on the database.,
django/,46,,
django/,47,If someone tries to create an hstore field it will error there.,
django/,48,This is necessary as someone may be using PSQL without extensions,
django/,49,installed but be using other features of contrib.postgres.,
django/,50,,
django/,51,This is also needed in order to create the connection in order to,
django/,52,install the hstore extension.,
django/,60,citext is not available on the database.,
django/,61,,
django/,62,The same comments in the except block of the above call to,
django/,63,register_hstore() also apply here.,
django/,14,We can't simply concatenate messages since they might require,
django/,15,their associated parameters to be expressed correctly which,
django/,16,"is not something `format_lazy` does. For example, proxied",
django/,17,ngettext calls require a count parameter and are converted,
django/,18,to an empty string if they are missing it.,
django/,68,Treat None lookup values as null.,
django/,7,Ranges are implemented in psycopg2._range but the public import,
django/,8,location is psycopg2.extras.,
django/,15,Allow an index name longer than 30 characters when the suffix is,
django/,16,longer than the usual 3 character limit. The 30 character limit for,
django/,17,cross-database compatibility isn't applicable to PostgreSQL-specific,
django/,18,indexes.,
django/,144,"On Combinable, these are not implemented to reduce confusion with Q. In",
django/,145,this case we are actually (ab)using them to do logical combination so,
django/,146,it's consistent with other usage in Django.,
django/,269,getquoted() returns a quoted bytestring of the adapted value.,
django/,25,"Clear cached, stale oids.",
django/,28,Registering new type handlers cannot be done before the extension is,
django/,29,"installed, otherwise a subsequent data migration would use the same",
django/,30,connection.,
django/,37,"Clear cached, stale oids.",
django/,1,NOQA,
django/,2,NOQA,
django/,10,Transform minus sign prefixed strings into an OrderBy() expression.,
django/,37,Extract the ordering expressions because ORDER BY clause is handled,
django/,38,in a custom way.,
django/,128,See the comment for RadioSelect.id_for_label(),
django/,43,Cast everything to strings for ease.,
django/,54,"For purposes of seeing whether something has changed, None is",
django/,55,"the same as an empty dict, if the data or initial value we get",
django/,56,"is None, replace it w/ {}.",
django/,59,"For purposes of seeing whether something has changed, True isn't the",
django/,60,same as 1 and the order of keys doesn't matter.,
django/,1,NOQA,
django/,2,NOQA,
django/,3,NOQA,
django/,4,NOQA,
django/,31,"For performance, only add a from_db_value() method if the base field",
django/,32,implements it.,
django/,64,Remove the field name checks as they are not needed here.,
django/,113,Assume we're deserializing,
django/,149,postgres uses 1-indexing,
django/,154,don't add one here because postgres slices are weird,
django/,235,Distinguish NULL and empty arrays,
django/,248,"In.process_rhs() expects values to be hashable, so convert lists",
django/,249,to tuples.,
django/,30,https://www.postgresql.org/docs/current/functions-range.html#RANGE-OPERATORS-TABLE,
django/,47,Initializing base_field here ensures that its model matches the model for self.,
django/,79,Assume we're deserializing,
django/,174,Transform rhs value for db lookup.,
django/,183,Cast the rhs if needed.,
django/,188,Skip cast if rhs has a matching range type.,
django/,215,Ignore precision for DecimalFields.,
django/,1,NOQA,
django/,2,NOQA,
django/,3,NOQA,
django/,4,NOQA,
django/,5,NOQA,
django/,30,FileSystemStorage fallbacks to MEDIA_ROOT when location,
django/,31,"is empty, so we restore the empty value.",
django/,80,`filename` is the name of file to hash if `content` isn't given.,
django/,81,`name` is the base name to construct the new hashed filename from.,
django/,92,Handle directory paths and fragments,
django/,107,"Special casing for a @font-face hack, like url(myfont.eot?#iefix"")",
django/,108,http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax,
django/,121,don't hash paths,
django/,131,"Special casing for a @font-face hack, like url(myfont.eot?#iefix"")",
django/,132,http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax,
django/,133,[sic!],
django/,166,Ignore absolute/protocol-relative and data-uri URLs.,
django/,170,Ignore absolute URLs that don't point to a static file (dynamic,
django/,171,CSS / JS?). Note that STATIC_URL cannot be empty.,
django/,175,Strip off the fragment so a path-like fragment won't interfere.,
django/,179,Otherwise the condition above would have returned prematurely.,
django/,183,We're using the posixpath module to mix paths and URLs conveniently.,
django/,187,Determine the hashed name of the target file with the storage backend.,
django/,195,Restore the fragment that was stripped off earlier.,
django/,199,Return the hashed version to the file,
django/,218,don't even dare to process the files if we're in dry run mode,
django/,222,where to store the new paths,
django/,225,build a list of adjustable files,
django/,230,"Do a single pass first. Post-process all files once, then repeat for",
django/,231,adjustable files.,
django/,249,Store the processed paths,
django/,253,Sort the files by directory level,
django/,259,"use the original, local file, not the copied-but-unprocessed",
django/,260,"file, which might be somewhere far away, like S3",
django/,266,"generate the hash with the original content, even for",
django/,267,adjustable files.,
django/,273,then get the original's file content..,
django/,280,..to apply each replacement pattern to the content,
django/,294,then save the processed result,
django/,297,Save intermediate file for reference,
django/,306,"If the file hash stayed the same, this file didn't change",
django/,312,or handle the case in which neither processing nor,
django/,313,a change to the original file happened,
django/,319,and then set the cache accordingly,
django/,331,Normalize the path to avoid multiple names for the same file like,
django/,332,../foo/bar.css and ../foo/../foo/bar.css which normalize to the same,
django/,333,path.,
django/,348,"No cached name found, recalculate it from the files.",
django/,355,Store the hashed name if there was a miss.,
django/,359,Move on to the next intermediate file.,
django/,361,"If the cache name can't be determined after the max number of passes,",
django/,362,the intermediate files on disk may be corrupt; avoid an infinite loop.,
django/,367,the manifest format standard,
django/,422,"Special casing for a @font-face hack, like url(myfont.eot?#iefix"")",
django/,423,http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax,
django/,17,Only append if urlpatterns are empty,
django/,17,May be used to differentiate between handler types (e.g. in a,
django/,18,request_finished signal),
django/,22,Middleware are already loaded for self.application; no need to reload,
django/,23,them for self.,
django/,82,Only even look at HTTP requests,
django/,84,Serve static content,
django/,85,"(the one thing super() doesn't do is __call__, apparently)",
django/,87,Hand off to the main app,
django/,25,Match only the basename.,
django/,30,Match the full file path.,
django/,16,To keep track on which directories the finder has searched the static files.,
django/,53,List of locations with static files,
django/,55,Maps dir paths to an appropriate storage instance,
django/,143,The list of apps that are handled,
django/,145,Mapping of app names to storage instances,
django/,165,check if storage location exists,
django/,191,only try to find a file if the source dir actually exists,
django/,212,Make sure we have a storage instance here.,
django/,276,No match.,
django/,105,Prefix the relative path if the source storage contains it,
django/,123,Storage backends may define a post_process() method.,
django/,130,"Add a blank line before the traceback, otherwise it's",
django/,131,too easy to miss the relevant part of the error message.,
django/,171,Destination files existence not checked; play it safe and warn.,
django/,237,Delete broken symlinks,
django/,250,When was the target file modified last time?,
django/,253,The storage doesn't support get_modified_time() or failed,
django/,257,When was the source file modified last time?,
django/,262,The full path of the target file,
django/,265,If it's --link mode and the path isn't a link (i.e.,
django/,266,the previous collectstatic wasn't with --link) or if,
django/,267,it's non-link mode and the path is a link (i.e. the,
django/,268,"previous collectstatic was with --link), the old",
django/,269,links/files must be deleted so it's not safe to skip,
django/,270,unmodified files.,
django/,273,"In remote storages, skipping is only based on the",
django/,274,modified times since symlinks aren't relevant.,
django/,276,"Avoid sub-second precision (see #14665, #19540)",
django/,286,Then delete the existing file if really needed,
django/,298,Skip this file if it was already copied earlier,
django/,301,Delete the target file if needed or break,
django/,304,The full path of the source file,
django/,306,Finally link the file,
django/,334,Skip this file if it was already copied earlier,
django/,337,Delete the target file if needed or break,
django/,340,The full path of the source file,
django/,342,Finally start copying,
django/,19,"Most setting_changed receivers are supposed to be added below,",
django/,20,except for cases where the receiver is related to a contrib app.,
django/,22,Settings that may not work well when using 'override_settings' (#19031),
django/,37,Rebuild any AppDirectoriesFinder instance.,
django/,40,Rebuild management commands cache,
django/,43,Rebuild get_app_template_dirs cache.,
django/,46,Rebuild translations cache.,
django/,54,Reset process time zone,
django/,62,Reset local time zone cache,
django/,65,Reset the database connections' time zone,
django/,140,"Considering the current implementation of the signals framework,",
django/,141,this stacklevel shows the line containing the override_settings call.,
django/,190,Some tests set an invalid AUTH_USER_MODEL.,
django/,12,List of browsers to dynamically create test classes for.,
django/,14,A selenium hub URL to test against.,
django/,16,The external host Selenium Hub can reach.,
django/,18,Sentinel value to differentiate browser-specific instances.,
django/,20,Run browsers in headless mode.,
django/,29,"If the test class is either browser-specific or a test base, return it.",
django/,33,Reuse the created test class to make it browser-specific.,
django/,34,We can't rename it to include the browser name or create a,
django/,35,subclass like we do with the remaining browsers as it would,
django/,36,either duplicate tests or prevent pickling of its instances.,
django/,39,Listen on an external interface if using a selenium hub.,
django/,43,Create subclasses for each of the remaining browsers and expose,
django/,44,them through the test's module namespace.,
django/,60,"If no browsers were specified, skip this class (it'll still be discovered).",
django/,82,Only Chrome and Firefox support the headless mode.,
django/,116,quit() the WebDriver before attempting to terminate and join the,
django/,117,single-threaded LiveServerThread to avoid a dead lock if the browser,
django/,118,kept a connection alive.,
django/,109,Executing this function twice would overwrite the saved values.,
django/,122,Add the default host of the test client.,
django/,167,Actually create the database for the first connection,
django/,183,Configure all other connections as mirrors of the first one,
django/,187,Configure the test mirrors.,
django/,207,Maps db signature to dependencies of all its aliases,
django/,210,Check that no database depends on its own alias,
django/,226,Try to find a DB that has all its dependencies met,
django/,265,"If the database is marked as a test mirror, save the alias.",
django/,268,Store a tuple with DB parameters that uniquely identify it.,
django/,269,"If we have two aliases with the same values for that tuple,",
django/,270,we only need to create the test database once.,
django/,304,Allow for relative paths,
django/,367,"If the inner function is an async function, we must execute async",
django/,368,as well so that the `with` statement executes at the right time.,
django/,406,Keep this code at the beginning to leave the settings unchanged,
django/,407,in case it raises an exception because INSTALLED_APPS is invalid.,
django/,454,Duplicate dict to prevent subclasses from altering their parent.,
django/,477,Hack used when instantiating from SimpleTestCase.setUpClass.,
django/,489,Duplicate list to prevent subclasses from altering their parent.,
django/,497,"When called from SimpleTestCase.setUpClass, values may be",
django/,498,overridden several times; cumulate changes.,
django/,503,items my be a single value or an iterable.,
django/,600,"If the string is not a complete xml document, we may need to add a",
django/,601,"root element. This allow us to compare fragments, like ""<foo/><bar/>""",
django/,607,"Parse the want and got strings, and compare the parsings.",
django/,637,Run any initialization queries if needed so that they won't be,
django/,638,included as part of the count.,
django/,671,"On OSes that don't provide tzset (Windows), we can't set the timezone",
django/,672,"in which the program runs. As a consequence, we must skip tests that",
django/,673,"don't enforce a specific timezone (with timezone.override or equivalent),",
django/,674,or attempt to interpret naive datetimes in the default timezone.,
django/,39,Structured suffix spec: https://tools.ietf.org/html/rfc6838#section-4.2.8,
django/,92,will fire request_finished,
django/,126,"Set up middleware if needed. We couldn't do this earlier, because",
django/,127,settings weren't available.,
django/,135,sneaky little hack so that we can easily get round,
django/,136,"CsrfViewMiddleware.  This makes life easier, and is probably",
django/,137,required for backwards compatibility with external tests against,
django/,138,admin views.,
django/,141,Request goes through middleware.,
django/,144,Simulate behaviors of most Web servers.,
django/,147,Attach the originating request to the response so that it could be,
django/,148,later retrieved.,
django/,151,Emulate a WSGI server by calling the close method on completion.,
django/,157,will fire request_finished,
django/,170,"Set up middleware if needed. We couldn't do this earlier, because",
django/,171,settings weren't available.,
django/,174,"Extract body file from the scope, if provided.",
django/,184,Sneaky little hack so that we can easily get round,
django/,185,"CsrfViewMiddleware. This makes life easier, and is probably required",
django/,186,for backwards compatibility with external tests against admin views.,
django/,188,Request goes through middleware.,
django/,190,Simulate behaviors of most Web servers.,
django/,192,Attach the originating ASGI request to the response so that it could,
django/,193,be later retrieved.,
django/,195,Emulate a server by calling the close method on completion.,
django/,203,Will fire request_finished.,
django/,235,"Not by any means perfect, but good enough for our purposes.",
django/,239,Each bit of the multipart form data could be either a form value or a,
django/,240,"file, or a *list* of form values and/or files. Remember that HTTP field",
django/,241,names can be duplicated!,
django/,280,"file.name might not be a string. For example, it's an int for",
django/,281,tempfile.TemporaryFile().,
django/,328,"This is a minimal valid WSGI environ dictionary, plus:",
django/,329,"- HTTP_COOKIE: for cookie support,",
django/,330,"- REMOTE_ADDR: often useful, see #8551.",
django/,331,See https://www.python.org/dev/peps/pep-3333/#environ-variables,
django/,363,Encode the content so that the byte representation is correct.,
django/,381,"If there are parameters, add them",
django/,385,Replace the behavior where non-ASCII values in the WSGI environ are,
django/,386,arbitrarily decoded with ISO-8859-1.,
django/,387,Refs comment in `get_bytes_from_wsgi()`.,
django/,450,path can be lazy,
django/,465,"If QUERY_STRING is absent or empty, we want to extract it from the URL.",
django/,467,WSGI requires latin-1 encoded strings. See get_path_info().,
django/,489,"This is a minimal valid ASGI scope, plus:",
django/,490,"- headers['cookie'] for cookie support,",
django/,491,"- 'client' often useful, see #8551.",
django/,515,"This is synchronous, which means all methods on this class are.",
django/,516,"AsyncClient, however, has an async request function, which makes all",
django/,517,its methods async.,
django/,529,path can be lazy.,
django/,545,"If QUERY_STRING is absent or empty, we want to extract it from the",
django/,546,URL.,
django/,614,Create a fake request to store login details.,
django/,622,Save the session values.,
django/,624,Set the cookie to represent the session.,
django/,694,Curry a data dictionary into an instance of the template renderer,
django/,695,callback function.,
django/,700,Capture exceptions created by the handler.,
django/,708,Check for signaled exceptions.,
django/,710,Save the client and request that stimulated the response.,
django/,713,Add any rendered template detail to the response.,
django/,717,Attach the ResolverMatch instance to the response.,
django/,719,Flatten a single context. Not really necessary anymore thanks to the,
django/,720,"__getattr__ flattening in ContextList, but has some edge case",
django/,721,backwards compatibility implications.,
django/,724,Update persistent cookie data.,
django/,823,Prepend the request path to handle relative path redirects,
django/,829,Preserve request method post-redirect for 307/308 responses.,
django/,840,Check that we're not redirecting to somewhere we've already,
django/,841,"been to, to prevent loops.",
django/,844,"Such a lengthy chain likely also means a loop, but one with",
django/,845,"a growing path, changing view, or changing query argument;",
django/,846,"20 is the value of ""network.http.redirection-limit"" from Firefox.",
django/,879,Curry a data dictionary into an instance of the template renderer,
django/,880,callback function.,
django/,885,Capture exceptions created by the handler.,
django/,893,Check for signaled exceptions.,
django/,895,Save the client and request that stimulated the response.,
django/,898,Add any rendered template detail to the response.,
django/,902,Attach the ResolverMatch instance to the response.,
django/,904,Flatten a single context. Not really necessary anymore thanks to the,
django/,905,"__getattr__ flattening in ContextList, but has some edge case",
django/,906,backwards compatibility implications.,
django/,909,Update persistent cookie data.,
django/,7,"ASCII whitespace is U+0009 TAB, U+000A LF, U+000C FF, U+000D CR, or U+0020",
django/,8,SPACE.,
django/,9,https://infra.spec.whatwg.org/#ascii-whitespace,
django/,32,removing last children if it is only whitespace,
django/,33,this can result in incorrect dom representations since,
django/,34,whitespace between inline tags like <span> is significant,
django/,64,attributes without a value is same as attribute with value that,
django/,65,equals the attributes name:,
django/,66,"<input checked> == <input checked=""checked"">",
django/,90,"child is text content and element is also text content, then",
django/,91,"make a simple ""text"" in ""text""",
django/,145,https://html.spec.whatwg.org/#void-elements,
django/,149,Deprecated tags,
django/,184,"Special case handling of 'class' attribute, so that comparisons of DOM",
django/,185,instances are not sensitive to ordering of classes.,
django/,225,Removing ROOT element if it's not necessary,
django/,149,Ensure that sys.exc_info() tuples are picklable. This displays a,
django/,150,clear multiprocessing.pool.RemoteTraceback generated in the child,
django/,151,"process instead of a multiprocessing.pool.MaybeEncodingError, making",
django/,152,the root cause easier to figure out for users who aren't familiar,
django/,153,"with the multiprocessing module. Since we're in a forked process,",
django/,154,our best chance to communicate with them is to print to stdout.,
django/,233,Follow Python 3.5's implementation of unittest.TestResult.addSubTest(),
django/,234,by not doing anything when a subtest is successful.,
django/,236,Call check_picklable() before check_subtest_picklable() since,
django/,237,check_picklable() performs the tblib check.,
django/,250,"If tblib isn't installed, pickling the traceback will always fail.",
django/,251,However we don't want tblib to be required for running the tests,
django/,252,when they pass or fail as expected. Drop the traceback when an,
django/,253,expected failure occurs.,
django/,288,The current implementation of the parallel test runner requires,
django/,289,multiprocessing to start subprocesses with fork().,
django/,318,connection.settings_dict must be updated in place for changes to be,
django/,319,reflected in django.db.connections. If the following line assigned,
django/,320,"connection.settings_dict = settings_dict, new threads would connect",
django/,321,to the default database instead of the appropriate clone.,
django/,355,In case someone wants to modify these in a subclass.,
django/,462,unittest does not export the _convert_select_pattern function,
django/,463,that converts command-line arguments to patterns.,
django/,548,"if a module, or ""module.ClassName[.method_name]"", just run those",
django/,552,Try to be a bit smarter than unittest about finding the,
django/,553,"default top-level for a given directory path, to avoid",
django/,554,breaking relative imports. (Unittest's default is to set,
django/,555,"top-level equal to the path, which means relative imports",
django/,556,"will result in ""Attempted relative import in non-package."").",
django/,558,We'd be happy to skip this and require dotted module paths,
django/,559,(which don't cause this problem) instead of file paths (which,
django/,560,"do), but in the case of a directory in the cwd, which would",
django/,561,be equally valid if considered as a top-level module or as a,
django/,562,"directory path, unittest unfortunately prefers the latter.",
django/,570,__init__.py all the way down? give up.,
django/,578,Try discovery if path is a package or directory,
django/,581,Make unittest forget the top-level dir it calculated from this,
django/,582,"run, to support running tests from two different top-levels.",
django/,602,Since tests are distributed across processes on a per-TestCase,
django/,603,"basis, there's no need for more processes than TestCases.",
django/,607,"If there's only one TestCase, parallelization isn't needed.",
django/,634,Checks are run after database creation since some checks require,
django/,635,database access.,
django/,708,Silence teardown exceptions if an exception was raised during,
django/,709,runs to avoid shadowing it.,
django/,151,The class we'll use for the test client self.client.,
django/,152,Can be overridden in derived classes.,
django/,264,Convert async test methods.,
django/,332,The request was a followed redirect,
django/,355,Not a followed redirect,
django/,365,Prepend the request path to handle relative path redirects.,
django/,371,"netloc might be empty, or in cases where Django tests the",
django/,372,"HTTP scheme, the convention is for netloc to be 'testserver'.",
django/,373,"Trust both as ""internal"" URLs here.",
django/,382,"Get the redirection page, using the same client that was used",
django/,383,to obtain the original response.,
django/,412,Coerce reverse_lazy() URLs.,
django/,423,If the response supports deferred rendering and hasn't been rendered,
django/,424,"yet, then ensure that it does get rendered before proceeding further.",
django/,491,Put context(s) into a list to simplify processing.,
django/,496,Put error(s) into a list to simplify processing.,
django/,499,Search all contexts for the error.,
django/,549,Add punctuation to msg_prefix,
django/,553,Put context(s) into a list to simplify processing.,
django/,559,Put error(s) into a list to simplify processing.,
django/,562,Search all contexts for the error.,
django/,636,use this template with context manager,
django/,651,Use assertTemplateUsed as context manager.,
django/,680,Use assertTemplateNotUsed as context manager.,
django/,699,Assertion used in context manager fashion.,
django/,702,Assertion was passed a callable.,
django/,753,test valid inputs,
django/,757,test invalid inputs,
django/,766,test required inputs,
django/,773,test that max_length and min_length are always accepted,
django/,891,Subclasses can ask for resetting of auto increment sequence before each,
django/,892,test case,
django/,895,Subclasses can enable only a subset of apps for faster tests,
django/,898,Subclasses can define fixtures which will be automatically installed.,
django/,908,"If transactions aren't available, Django will serialize the database",
django/,909,contents into a fixture during setup and flush and reload them,
django/,910,during teardown (as flush does not restore data from migrations).,
django/,911,This can be slow; this flag allows enabling on a per-case basis.,
django/,945,Clear the queries_log so that it's less likely to overflow (a single,
django/,946,"test probably won't execute 9K queries). If queries_log overflows,",
django/,947,then assertNumQueries() doesn't work.,
django/,953,"Only consider allowed database aliases, including mirrors or not.",
django/,974,Reset sequences,
django/,978,"Provide replica initial data from migrated apps, if needed.",
django/,989,We have to use this slightly awkward syntax due to the fact,
django/,990,that we're using *args and **kwargs together.,
django/,1008,Some DB cursors include SQL statements as part of cursor,
django/,1009,"creation. If you have a test that does a rollback, the effect",
django/,1010,"of these statements is lost, which can affect the operation of",
django/,1011,"tests (e.g., losing a timezone setting causing objects to be",
django/,1012,created with the wrong time). To make sure this doesn't,
django/,1013,"happen, get a clean connection at the start of every test.",
django/,1025,Allow TRUNCATE ... CASCADE and don't emit the post_migrate signal,
django/,1026,when flushing only a subset of the apps,
django/,1028,Flush the database,
django/,1031,Inhibit the post_migrate signal when using serialized,
django/,1032,rollback to avoid trying to recreate the serialized data.,
django/,1047,"For example qs.iterator() could be passed as qs, but it does not",
django/,1048,have 'ordered' attribute.,
django/,1149,"If the backend does not support transactions, we should reload",
django/,1150,class data before each test,
django/,1183,Trigger access for all bases.,
django/,1188,Override this descriptor's value and set the skip reason.,
django/,1218,Assume a class is decorated,
django/,1222,Defer raising to allow importing test class's module.,
django/,1230,Retrieve the possibly existing value from the class's dict to,
django/,1231,avoid triggering the descriptor.,
django/,1313,Emulate behavior of django.contrib.staticfiles.views.serve() when it,
django/,1314,invokes staticfiles' finders functionality.,
django/,1315,TODO: Modify if/when that internal API is refactored,
django/,1367,Override this thread's database connections with the ones,
django/,1368,provided by the main thread.,
django/,1372,Create the handler for serving static and media files,
django/,1375,"If binding to port zero, assign the port allocated by the OS.",
django/,1392,Stop the WSGI server,
django/,1427,"If using in-memory sqlite databases, pass the connections to",
django/,1428,the server thread.,
django/,1430,Explicitly enable thread-shareability for this connection,
django/,1442,Wait for the live server to be ready,
django/,1445,"Clean up behind ourselves, since tearDownClass won't get called in",
django/,1446,case of errors.,
django/,1461,There may not be a 'server_thread' attribute if setUpClass() for some,
django/,1462,reasons has raised an exception.,
django/,1464,Terminate the live server's thread,
django/,1467,Restore sqlite in-memory database connections' non-shareability.,
django/,17,A marker for caching,
django/,45,For convenience we create empty caches even if they are not used.,
django/,46,"A note about caching: if use_caching is defined, then for each",
django/,47,distinct sender we cache the receivers that sender has in,
django/,48,'sender_receivers_cache'. The cache is cleaned when .connect() or,
django/,49,.disconnect() is called and populated on send().,
django/,88,"If DEBUG is on, check that we got a good receiver",
django/,92,Check for **kwargs,
django/,104,Check for bound methods,
django/,204,Call each receiver with whatever arguments it can accept.,
django/,205,"Return a list of tuple pairs [(receiver, response), ... ].",
django/,217,Note: caller is assumed to hold self.lock.,
django/,235,We could end up here with NO_RECEIVERS even if we do check this case in,
django/,236,.send() prior to calling _live_receivers() due to concurrent .send() call.,
django/,251,"Note, we must cache the weakref versions.",
django/,256,Dereference the weak reference.,
django/,265,"Mark that the self.receivers list has dead weakrefs. If so, we will",
django/,266,"clean those up in connect, disconnect and _live_receivers while",
django/,267,holding self.lock. Note that doing the cleanup here isn't a good,
django/,268,"idea, _remove_receiver() will be called as side effect of garbage",
django/,269,"collection, and so the call can happen while we are already holding",
django/,270,self.lock.,
django/,9,NOQA,
django/,27,"This can be called when CsrfViewMiddleware.process_view has not run,",
django/,28,therefore need @requires_csrf_token in case the template needs,
django/,29,{% csrf_token %}.,
django/,45,"Try to get an ""interesting"" exception message, if any (and not the ugly",
django/,46,Resolver404 dictionary),
django/,61,Django will use 'text/html'.,
django/,64,Reraise if it's a missing custom template.,
django/,66,Render template (even though there are no substitutions) to allow,
django/,67,inspecting the context in tests.,
django/,91,Reraise if it's a missing custom template.,
django/,112,Reraise if it's a missing custom template.,
django/,118,"No exception content is passed to the template, to not disclose any sensitive information.",
django/,122,"This can be called when CsrfViewMiddleware.process_view has not run,",
django/,123,therefore need @requires_csrf_token in case the template needs,
django/,124,{% csrf_token %}.,
django/,140,Reraise if it's a missing custom template.,
django/,7,We include the template inline since we need to be able to reliably display,
django/,8,"this error message, especially for the sake of developers, and there isn't any",
django/,9,other way of making it available independent of what is in the settings file.,
django/,11,Only the text appearing with DEBUG=False is translated. Normal translation,
django/,12,tags cannot be used with this inline templates as makemessages would not be,
django/,13,able to discover the strings.,
django/,148,"If the default template doesn't exist, use the string template.",
django/,152,Raise if a developer-specified template doesn't exist.,
django/,44,HTTP_REFERER may be encoded.,
django/,61,Storing the language in the session is deprecated.,
django/,62,(RemovedInDjango40Warning),
django/,212,"If packages are not provided, default to all installed packages, as",
django/,213,DjangoTranslation without localedirs harvests them all.,
django/,229,paths of requested packages,
django/,258,This should be a compiled function of a typical plural-form:,
django/,259,Plural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 :,
django/,260,n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2;,
django/,43,Respect the If-Modified-Since header.,
django/,19,Minimal Django templates engine to render the error templates,
django/,20,regardless of the project's TEMPLATES setting. Templates are,
django/,21,read directly from the filesystem so that the error handler,
django/,22,works even if the template loader is broken.,
django/,61,Instantiate the default filter for the first time and cache it.,
django/,96,"If the key isn't regex-able, just return as-is.",
django/,158,Cleanse all parameters.,
django/,163,Cleanse only the specified parameters.,
django/,173,"If value is lazy or a complex object of another kind, this check",
django/,174,might raise an exception. isinstance checks that lazy,
django/,175,MultiValueDicts will have a return value.,
django/,181,Cleanse MultiValueDicts (request.POST is the one we usually care about),
django/,190,Loop through the frame's callers to see if the sensitive_variables,
django/,191,decorator was used.,
django/,197,"The sensitive_variables decorator was used, so we take note",
django/,198,of the sensitive variables' names.,
django/,207,Cleanse all variables,
django/,211,Cleanse specified variables,
django/,219,Potentially cleanse the request and any MultiValueDicts if they,
django/,220,are one of the frame variables.,
django/,226,"For good measure, obfuscate the decorated function's arguments in",
django/,227,"the sensitive_variables decorator's frame, in case the variables",
django/,228,associated with those arguments were meant to be obfuscated from,
django/,229,the decorated function's frame.,
django/,262,Trim large blobs of data,
django/,287,request.user may raise OperationalError if the database is,
django/,288,"unavailable, for example.",
django/,313,Check whether exception info is available,
django/,362,"If we just read the source from a file, or if the loader did not",
django/,363,apply tokenize.detect_encoding to decode the source into a,
django/,364,"string, then we should do that ourselves.",
django/,368,File coding may be specified. Match pattern from PEP-263,
django/,369,(https://www.python.org/dev/peps/pep-0263/),
django/,393,Get the exception and all its causes,
django/,400,Avoid infinite loop if there's a cyclic reference (#29393).,
django/,404,No exceptions were supplied to ExceptionReporter,
django/,408,"In case there's just one exception, take the traceback from self.tb",
django/,413,Support for __traceback_hide__ which is used by a few libraries,
django/,414,to hide internal frames.,
django/,447,"If the traceback for current exception is consumed, try the",
django/,448,other exception.,
django/,463,Trim leading slash,
django/,470,empty URLconf,
django/,472,default URLconf,
django/,46,"Go through keyword arguments, and either save their values to our",
django/,47,"instance, or raise an error.",
django/,77,take name and docstring from class,
django/,80,and possible attributes set by decorators,
django/,81,like csrf_exempt from dispatch,
django/,94,"Try to dispatch to the right method; if a method doesn't exist,",
django/,95,defer to the error handler. Also defer to the error handler if the,
django/,96,request method isn't on the approved list.,
django/,160,"RemovedInDjango40Warning: when the deprecation ends, replace with:",
django/,161,context = self.get_context_data(),
django/,167,RemovedInDjango40Warning,
django/,171,Bind into function closure.,
django/,221,week starts on Monday,
django/,223,week starts on Sunday,
django/,247,Note: the following three methods only work in subclasses that also,
django/,248,inherit SingleObjectMixin or MultipleObjectMixin.,
django/,289,"Skip self._make_date_lookup_arg, it's a no-op in this branch.",
django/,334,"When pagination is enabled, it's better to do a cheap query",
django/,335,than to load the unpaginated queryset in memory.,
django/,420,We need this to be a queryset since parent classes introspect it,
django/,421,to find information about the model.,
django/,584,Use a custom queryset if provided,
django/,596,Filter down a queryset from self.queryset using the date from the,
django/,597,"URL. This'll get passed as the queryset to DetailView.get_object,",
django/,598,which'll handle the 404,
django/,662,Bounds of the current interval,
django/,665,"If allow_empty is True, the naive result will be valid",
django/,677,"Otherwise, we'll need to go to the database to look for an object",
django/,678,whose date_field is at least (greater than/less than) the given,
django/,679,naive result,
django/,681,Construct a lookup and an ordering depending on whether we're doing,
django/,682,a previous date or a next date lookup.,
django/,690,Filter out objects in the future if appropriate.,
django/,692,"Fortunately, to match the implementation of allow_future,",
django/,693,"we need __lte, which doesn't conflict with __lt above.",
django/,702,Snag the first object from the queryset; if it doesn't exist that,
django/,703,means there's no next/previous link available.,
django/,709,Convert datetimes to dates in the current time zone.,
django/,715,Return the first day of the period.,
django/,146,"When pagination is enabled and object_list is a queryset,",
django/,147,it's better to do a cheap query than to load the unpaginated,
django/,148,queryset in memory.,
django/,173,"If template_name isn't specified, it's not a problem --",
django/,174,we just start with an empty list.,
django/,177,"If the list is a queryset, we'll invent a template name based on the",
django/,178,app and model name. This name gets put at the end of the template,
django/,179,name list so that user-supplied names override the automatically-,
django/,180,generated ones.,
django/,27,Use a custom queryset if provided; this is required for subclasses,
django/,28,like DateDetailView,
django/,32,"Next, try looking up by primary key.",
django/,38,"Next, try looking up by slug.",
django/,43,"If none of those are defined, it's an error.",
django/,51,Get the single item from the filtered queryset,
django/,128,"If template_name isn't specified, it's not a problem --",
django/,129,we just start with an empty list.,
django/,132,"If self.template_name_field is set, grab the value of the field",
django/,133,of that name from the object; this is the most specific template,
django/,134,"name, if given.",
django/,140,The least-specific option is the default <app>/<model>_detail.html;,
django/,141,only use this if the object in question is a model.,
django/,156,"If we still haven't managed to find any template names, we should",
django/,157,re-raise the ImproperlyConfigured to alert the user.,
django/,53,success_url may be lazy,
django/,84,"If a model has been explicitly provided, use it",
django/,87,"If this view is operating on a single object, use",
django/,88,the class of that object,
django/,91,Try to get a queryset and extract the model class,
django/,92,from that,
django/,146,PUT is a valid HTTP verb for creating (with a known URL) or editing an,
django/,147,"object, note that browsers only support POST for now.",
django/,216,Add support for browsers which only accept GET and POST for now.,
django/,16,Behave like CsrfViewMiddleware but don't reject requests or log warnings.,
django/,36,Force process_response to send the cookie,
django/,51,"view_func.csrf_exempt = True would also work, but decorators are nicer",
django/,52,"if they don't have side effects, so return a new function.",
django/,80,Compute values (if any) for the requested resource.,
django/,87,The value from etag_func() could be quoted or unquoted.,
django/,101,Set relevant headers on the response if they don't already exist,
django/,102,and if the request method is safe.,
django/,115,Shortcut decorators for common cases based on ETag or Last-Modified only,
django/,14,Full Python path to the application e.g. 'django.contrib.admin'.,
django/,17,Root module for the application e.g. <module 'django.contrib.admin',
django/,18,from 'django/contrib/admin/__init__.py'>.,
django/,21,Reference to the Apps registry that holds this AppConfig. Set by the,
django/,22,registry when it registers the AppConfig instance.,
django/,25,The following attributes could be defined at the class level in a,
django/,26,"subclass, hence the test-and-set pattern.",
django/,28,Last component of the Python path to the application e.g. 'admin'.,
django/,29,This value must be unique across a Django project.,
django/,33,"Human-readable name for the application e.g. ""Admin"".",
django/,37,Filesystem path to the application directory e.g.,
django/,38,'/path/to/django/contrib/admin'.,
django/,42,Module containing models e.g. <module 'django.contrib.admin.models',
django/,43,from 'django/contrib/admin/models.py'>. Set by import_models().,
django/,44,None if the application doesn't have a models module.,
django/,47,Mapping of lowercase model names to model classes. Initially set to,
django/,48,None to prevent accidental access before import_models() runs.,
django/,56,See #21874 for extended discussion of the behavior of this method in,
django/,57,various cases.,
django/,58,Convert paths to list because Python's _NamespacePath doesn't support,
django/,59,indexing.,
django/,66,"For unknown reasons, sometimes the list returned by __path__",
django/,67,contains duplicates that must be removed (#25246).,
django/,87,"If import_module succeeds, entry is a path to an app module,",
django/,88,which may specify an app config class with default_app_config.,
django/,89,"Otherwise, entry is a path to an app config class or an error.",
django/,93,Track that importing as an app module failed. If importing as an,
django/,94,"app config class fails too, we'll trigger the ImportError again.",
django/,99,Raise the original exception when entry cannot be a path to an,
django/,100,app config class.,
django/,106,"If this works, the app module specifies an app config class.",
django/,109,"Otherwise, it simply uses the default app config class.",
django/,114,"If we're reaching this point, we must attempt to load the app config",
django/,115,class located at <mod_path>.<cls_name>,
django/,121,"If importing as an app module failed, check if the module",
django/,122,contains any valid AppConfigs and show them as choices.,
django/,123,"Otherwise, that error probably contains the most informative",
django/,124,"traceback, so trigger it again.",
django/,140,"Check for obvious errors. (This check prevents duck typing, but",
django/,141,it could be removed if it became a problem in practice.),
django/,146,Obtain app name here rather than in AppClass.__init__ to keep,
django/,147,all error checking for entries in INSTALLED_APPS in one place.,
django/,154,Ensure app_name points to a valid module.,
django/,164,Entry is a path to an app config class.,
django/,205,"Dictionary of models for this app, primarily maintained in the",
django/,206,'all_models' attribute of the Apps this AppConfig is attached to.,
django/,21,installed_apps is set to None when creating the master registry,
django/,22,because it cannot be populated at that point. Other registries must,
django/,23,provide a list of installed apps and are populated immediately.,
django/,27,Mapping of app labels => model names => model classes. Every time a,
django/,28,"model is imported, ModelBase.__new__ calls apps.register_model which",
django/,29,"creates an entry in all_models. All imported models are registered,",
django/,30,regardless of whether they're defined in an installed application,
django/,31,and whether the registry has been populated. Since it isn't possible,
django/,32,to reimport a module safely (it could reexecute initialization code),
django/,33,all_models is never overridden or reset.,
django/,36,Mapping of labels to AppConfig instances for installed apps.,
django/,39,Stack of app_configs. Used to store the current state in,
django/,40,set_available_apps and set_installed_apps.,
django/,43,Whether the registry is populated.,
django/,45,For the autoreloader.,
django/,48,Lock for thread-safe population.,
django/,52,"Maps (""app_label"", ""modelname"") tuples to lists of functions to be",
django/,53,called when the corresponding model is ready. Used by this class's,
django/,54,`lazy_model_operation()` and `do_pending_operations()` methods.,
django/,57,"Populate apps and models, unless it's the master registry.",
django/,72,populate() might be called by two threads in parallel on servers,
django/,73,that create threads before initializing the WSGI callable.,
django/,78,An RLock prevents other threads from entering this section. The,
django/,79,compare and set operation below is atomic.,
django/,81,Prevent reentrant calls to avoid running AppConfig.ready(),
django/,82,methods twice.,
django/,86,Phase 1: initialize app configs and import app modules.,
django/,100,Check for duplicate app names.,
django/,112,Phase 2: import models modules.,
django/,120,Phase 3: run ready() methods of app configs.,
django/,131,"If ""not ready"" is due to unconfigured settings, accessing",
django/,132,INSTALLED_APPS raises a more helpful ImproperlyConfigured,
django/,133,exception.,
django/,164,This method is performance-critical at least for Django's test suite.,
django/,213,"Since this method is called when models are imported, it cannot",
django/,214,perform imports because of the risk of import loops. It mustn't,
django/,215,call get_app_config().,
django/,290,Is this model swapped out for the model given by to_string?,
django/,293,Is this model swappable and the one given by to_string?,
django/,368,Call expire cache on each model. This will purge,
django/,369,the relation tree and the fields cache.,
django/,372,Circumvent self.get_models() to prevent that the cache is refilled.,
django/,373,This particularly prevents that an empty value is cached while cloning.,
django/,387,"Base case: no arguments, just execute the function.",
django/,390,"Recursive case: take the head of model_keys, wait for the",
django/,391,"corresponding model class to be imported and registered, then apply",
django/,392,that argument to the supplied function. Pass the resulting partial,
django/,393,to lazy_model_operation() along with the remaining model args and,
django/,394,repeat until all models are loaded and all arguments are applied.,
django/,398,This will be executed after the class corresponding to next_model,
django/,399,has been imported and registered. The `func` attribute provides,
django/,400,duck-type compatibility with partials.,
django/,406,"If the model has already been imported and registered, partially",
django/,407,"apply it to the function now. If not, add it to the list of",
django/,408,"pending operations for the model, where it will be executed with",
django/,409,the model class as its sole argument once the model is ready.,
django/,31,,
django/,32,STRING DECORATOR,
django/,33,,
django/,48,Include a reference to the real function (used to check original,
django/,49,"arguments by the template parser, and to bear the 'is_safe' attribute",
django/,50,when multiple decorators are applied).,
django/,56,,
django/,57,STRINGS,
django/,58,,
django/,147,Set the precision high enough to avoid an exception (#15789).,
django/,153,"Avoid conversion to scientific notation by accessing `sign`, `digits`,",
django/,154,and `exponent` from Decimal.as_tuple() directly.,
django/,179,"Find the maximum width of the line count, for use with zero padding",
django/,180,string format command,
django/,254,Invalid literal for int().,
django/,255,Fail silently.,
django/,268,invalid literal for int(),
django/,269,Fail silently.,
django/,282,Invalid literal for int().,
django/,283,Fail silently.,
django/,296,invalid literal for int(),
django/,297,Fail silently.,
django/,390,,
django/,391,HTML STRINGS,
django/,392,,
django/,462,,
django/,463,LISTS,
django/,464,,
django/,532,Fail silently if arg isn't iterable.,
django/,585,Fail silently.,
django/,655,,
django/,656,INTEGERS,
django/,657,,
django/,683,Fail silently for an invalid argument,
django/,692,,
django/,693,DATES,
django/,694,,
django/,748,,
django/,749,LOGIC,
django/,750,,
django/,789,Translators: Please do not add spaces around commas.,
django/,793,Invalid arg.,
django/,797,"Unpack list of wrong size (no ""maybe"" value provided).",
django/,806,,
django/,807,MISC,
django/,808,,
django/,833,Allow formatting of negative numbers.,
django/,885,Invalid string that's not a number.,
django/,887,Value isn't a string or a number; maybe it's a list?,
django/,890,len() of unsized object.,
django/,4,"Using a simple top down parser, as described here:",
django/,5,http://effbot.org/zone/simple-top-down-parsing.htm.,
django/,6,'led' = left denotation,
django/,7,'nud' = null denotation,
django/,8,"'bp' = binding power (left = lbp, right = rbp)",
django/,16,node/token type name,
django/,17,used by literals,
django/,18,used by tree nodes,
django/,21,Null denotation - called in prefix context,
django/,27,Left denotation - called in infix context,
django/,60,Templates shouldn't throw exceptions when rendering.  We are,
django/,61,most likely to get exceptions for things like {% if foo in bar,
django/,62,"%} where 'bar' does not support 'in', so default to False",
django/,90,Operator precedence follows Python.,
django/,91,We defer variable evaluation to the lambda to ensure that terms are,
django/,92,lazily evaluated using Python's boolean parsing logic.,
django/,109,Assign 'id' to each:,
django/,118,"IfParser uses Literal in create_var, but TemplateIfParser overrides",
django/,119,create_var so that a proper implementation that actually resolves,
django/,120,"variables, filters etc. is used.",
django/,154,"Turn 'is','not' and 'not','in' into single tokens.",
django/,162,skip 'not',
django/,165,skip 'in',
django/,191,Check that we have exhausted all the tokens,
django/,71,template syntax constants,
django/,85,what to report as the origin for templates that come from non-loader sources,
django/,86,(e.g. strings),
django/,89,"match a variable or block tag and capture the entire tag, including start/end",
django/,90,delimiters,
django/,142,If Template is instantiated directly rather than from an Engine and,
django/,143,"exactly one Django template engine is configured, use that engine.",
django/,144,This is required to preserve backwards-compatibility for direct use,
django/,145,e.g. Template('...').render(Context({...})),
django/,154,May be lazy.,
django/,255,In some rare cases exc_value.args can be empty or an invalid,
django/,256,string.,
django/,320,Handle translation-marked template pieces,
django/,358,The [2:-2] ranges below strip off *_TAG_START and *_TAG_END.,
django/,359,"We could do len(BLOCK_TAG_START) to be more ""correct"", but we've",
django/,360,hard-coded the 2s here for performance. And it's not like,
django/,361,"the TAG_START values are going to change anytime, anyway.",
django/,409,"Reverse the tokens so delete_first_token(), prepend_token(), and",
django/,410,next_token() can operate at the end of the list in constant time.,
django/,440,Use the raw values here for TokenType.* for a tiny performance boost.,
django/,441,TokenType.TEXT,
django/,443,TokenType.VAR,
django/,452,TokenType.BLOCK,
django/,458,A matching token has been reached. Return control to,
django/,459,the caller. Put the token back on the token list so the,
django/,460,caller knows where it terminated.,
django/,463,Add the token to the command stack. This is used for error,
django/,464,messages if further parsing fails due to an unclosed block,
django/,465,tag.,
django/,467,Get the tag callback function from the ones registered with,
django/,468,the parser.,
django/,473,Compile the callback into a node object and add it to,
django/,474,the node list.,
django/,480,Compile success. Remove the token from the command stack.,
django/,494,Check that non-text nodes don't appear before an extends tag.,
django/,501,Set origin and token here since we can't modify the node __init__(),
django/,502,method.,
django/,572,This only matches constant *strings* (things in quotes or marked for,
django/,573,translation). Numbers are treated as variables for implementation reasons,
django/,574,(so that they retain their type when passed to filters).,
django/,581,double-quoted string,
django/,582,single-quoted string,
django/,707,"First argument, filter input, is implied.",
django/,709,Check to see if a decorator is providing the real function.,
django/,715,Not enough OR Too many,
django/,757,First try to treat this variable as a number.,
django/,758,,
django/,759,Note that this could cause an OverflowError here that we're not,
django/,760,"catching. Since this should only happen at compile time, that's",
django/,761,probably OK.,
django/,763,Try to interpret values containing a period or an 'e'/'E',
django/,764,"(possibly scientific notation) as a float;  otherwise, try int.",
django/,767,"""2."" is invalid",
django/,773,A ValueError means that the variable isn't a number.,
django/,775,The result of the lookup should be translated at rendering,
django/,776,time.,
django/,779,"If it's wrapped with quotes (single or double), then",
django/,780,we're also dealing with a literal.,
django/,784,Otherwise we'll set self.lookups so that resolve() knows we're,
django/,785,dealing with a bonafide variable,
django/,795,We're dealing with a variable that needs to be resolved,
django/,798,"We're dealing with a literal, so it's already been ""resolved""",
django/,826,catch-all for silent variable failures,
django/,828,dictionary lookup,
django/,830,ValueError/IndexError are for numpy.array lookup on,
django/,831,numpy < 1.9 and 1.9+ respectively,
django/,833,attribute lookup,
django/,834,Don't return class attributes if the class is the context:,
django/,839,Reraise if the exception was raised by a @property,
django/,842,list-index lookup,
django/,844,list index out of range,
django/,845,invalid literal for int(),
django/,846,current is a dict without `int(bit)` key,
django/,847,unsubscriptable object,
django/,850,missing attribute,
django/,857,method call (assuming no args required),
django/,863,arguments *were* required,
django/,864,invalid method call,
django/,885,Set this to True for nodes that must be first in the template (although,
django/,886,they can be preceded by text nodes.,
django/,930,Set to True the first time a non-TextNode is inserted by,
django/,931,extend_nodelist().,
django/,990,Unicode conversion can fail sometimes for reasons out of our,
django/,991,"control (e.g. exception rendering). In that case, we fail",
django/,992,quietly.,
django/,997,Regex for token keyword arguments,
django/,4,Hard-coded processor for easier use of CSRF protection.,
django/,129,flatten dictionaries because they can be put in a different order.,
django/,141,Set to the original template -- as opposed to extended or included,
django/,142,"templates -- during rendering, see bind_template.",
django/,226,placeholder for context processors output,
django/,229,empty dict for any new modifications,
django/,230,(so that context processors don't overwrite them),
django/,239,Set context processors according to the template engine's settings.,
django/,251,Unset context processors.,
django/,256,This is for backwards-compatibility: RequestContexts created via,
django/,257,Context.new don't include values from context processors.,
django/,272,The following pattern is required to ensure values from,
django/,273,context override those from template context processors.,
django/,60,It's very probable that the token is missing because of,
django/,61,"misconfiguration, so we raise a warning",
django/,79,First time the node is rendered in template,
django/,111,Apply filters.,
django/,175,Create a forloop value in the context.  We'll update counters on each,
django/,176,iteration just below.,
django/,179,Shortcuts for current loop iteration number.,
django/,182,Reverse counter iteration numbers.,
django/,185,Boolean values designating first and last times through loop.,
django/,191,"If there are multiple loop variables, unpack the item into",
django/,192,them.,
django/,195,not an iterable,
django/,197,Check loop variable count before unpacking,
django/,213,Pop the loop variables pushed on to the context to avoid,
django/,214,the context ending up in an inconsistent state when other,
django/,215,"tags (e.g., include and with) push data to context.",
django/,228,Init state storage,
django/,234,Consider multiple parameters. This behaves like an OR evaluation,
django/,235,of the multiple variables.,
django/,238,"The ""{% ifchanged %}"" syntax (without any variables) compares",
django/,239,the rendered output.,
django/,244,render true block if not already rendered,
django/,251,The Context object behaves like a stack where each template tag can create a new scope.,
django/,252,Find the place where to store the state to detect changes.,
django/,254,Ifchanged is bound to the local for loop.,
django/,255,"When there is a loop-in-loop, the state is bound to the inner loop,",
django/,256,so it resets when the outer loop continues.,
django/,259,Using ifchanged outside loops. Effectively this is a no-op because the state is associated with 'self'.,
django/,301,if / elif clause,
django/,306,else clause,
django/,342,This method is called for each object in self.target. See regroup(),
django/,343,for the reason why we temporarily put the object in the context.,
django/,350,target variable wasn't found in context; fail silently.,
django/,353,List of dictionaries in the format:,
django/,354,"{'grouper': 'key', 'list': [list of contents]}.",
django/,440,"Try to look up the URL. If it fails, raise NoReverseMatch unless the",
django/,441,"{% url ... as var %} construct is used, in which case return nothing.",
django/,502,"var and name are legacy attributes, being left in case they are used",
django/,503,by third-party subclasses of this Node.,
django/,522,token.split_contents() isn't useful here because this tag doesn't accept variable as arguments,
django/,576,Note: This returns the exact same node on each {% cycle name %} call;,
django/,577,"that is, the node object returned from {% cycle a b c as name %} and the",
django/,578,one returned from {% cycle name %} are the exact same object. This,
django/,579,"shouldn't cause problems (heh), but if it does, now you know.",
django/,580,,
django/,581,Ugly hack warning: This stuffs the named template dict into parser so,
django/,582,that names are only unique within each template (as opposed to using,
django/,583,"a global variable, which would make cycle names have to be unique across",
django/,584,*all* templates.,
django/,585,,
django/,586,It keeps the last node in the parser to be able to reset it with,
django/,587,{% resetcycle %}.,
django/,595,{% cycle foo %} case.,
django/,606,{% cycle ... as foo [silent] %} case.,
django/,669,token.split_contents() isn't useful here because this tag doesn't accept variable as arguments,
django/,871,for better error messages,
django/,950,{% if ... %},
django/,957,{% elif ... %} (repeatable),
django/,965,{% else %} (optional),
django/,971,{% endif %},
django/,1068,token.split_contents() isn't useful here because this tag doesn't accept variable as arguments,
django/,1071,from syntax is used; load individual tags from the library,
django/,1077,one or more libraries are specified; load and add them to the parser,
django/,1111,Random bit,
django/,1115,Method bit,
django/,1120,Count bit,
django/,1211,"RegroupNode will take each item in 'target', put it in the context under",
django/,1212,"'var_name', evaluate 'var_name'.'expression' in the current context, and",
django/,1213,"group by the resulting value. After all items are processed, it will",
django/,1214,"save the final result in the context under 'var_name', thus clearing the",
django/,1215,temporary values. This hack is necessary because the template engine,
django/,1216,doesn't provide a context-aware equivalent of Python's getattr.,
django/,1303,token.split_contents() isn't useful here because this tag doesn't accept variable as arguments,
django/,34,This will raise an exception if 'BACKEND' doesn't exist or,
django/,35,isn't a string containing at least one dot.,
django/,75,"If importing or initializing the backend raises an exception,",
django/,76,self._engines[alias] isn't set and this code may get executed,
django/,77,"again, so we must preserve the original params. See #24265.",
django/,106,Immutable return value because it will be cached and shared by callers.,
django/,15,It would seem obvious to call these next two members 'template' and,
django/,16,"'context', but those names are reserved as part of the test Client",
django/,17,"API. To avoid the name collision, we use different names.",
django/,25,_request stores the current request object in subclasses that know,
django/,26,"about requests, like TemplateResponse. It's defined in the base class",
django/,27,to minimize code duplication.,
django/,28,It's called self._request because self.request gets overwritten by,
django/,29,"django.test.client.Client. Unlike template_name and context_data,",
django/,30,_request should not be considered part of the public API.,
django/,33,content argument doesn't make sense here because it will be replaced,
django/,34,with rendered template so we always pass empty string in order to,
django/,35,prevent errors and provide shorter signature.,
django/,38,_is_rendered tracks whether the template and context has been baked,
django/,39,into a final response.,
django/,40,Super __init__ doesn't know any better than to set self.content to,
django/,41,"the empty string we just gave it, which wrongly sets _is_rendered",
django/,42,"True, so we initialize it to False after the call to super __init__.",
django/,71,Since Engine is imported in django.template and since,
django/,72,"DjangoTemplates is a wrapper around this Engine class,",
django/,73,local imports are required to avoid import loops.,
django/,145,template needs to be compiled,
django/,158,Django < 1.8 accepted a Context in `context` even though that's,
django/,159,unintended. Preserve this ability but don't rewrap `context`.,
django/,179,"If we get here, none of the templates could be loaded",
django/,18,Dictionary of FIFO queues.,
django/,58,Create new block so we can store context without thread-safety issues.,
django/,119,parent is a django.template.Template,
django/,122,parent is a django.template.backends.django.Template,
django/,133,Add the block nodes from this node to the block context,
django/,136,"If this block's parent doesn't have an extends node it is the root,",
django/,137,and its block nodes also need to be added to the block context.,
django/,139,The ExtendsNode has to be the first non-text node.,
django/,147,Call Template._render explicitly so the parser context stays,
django/,148,the same.,
django/,169,Does this quack like a Template?,
django/,171,"If not, try the cache and select_template().",
django/,182,Use the base.Template of a backends.django.Template.,
django/,200,token.split_contents() isn't useful here because this tag doesn't accept variable as arguments,
django/,205,"Keep track of the names of BlockNodes found in this template, so we can",
django/,206,check for duplication.,
django/,211,parser.__loaded_blocks isn't a list yet,
django/,215,This check is kept for backwards-compatibility. See #3100.,
django/,230,relative_name is a variable or a literal that doesn't contain a,
django/,231,relative path.,
django/,25,In order to be able to provide debugging info in the,
django/,26,"case of misconfiguration, we use a sentinel value",
django/,27,instead of returning an empty dict.,
django/,43,"Return a lazy reference that computes connection.queries on access,",
django/,44,to ensure it contains queries triggered after this function runs.,
django/,42,Multiple Template Engines,
django/,52,Django Template Language,
django/,54,Public exceptions,
django/,55,NOQA isort:skip,
django/,56,NOQA isort:skip,
django/,57,NOQA isort:skip,
django/,59,Template parts,
django/,60,NOQA isort:skip,
django/,64,Library management,
django/,65,NOQA isort:skip,
django/,29,@register.tag(),
django/,33,@register.tag,
django/,36,@register.tag('somename') or @register.tag(name='somename'),
django/,41,"register.tag('somename', somefunc)",
django/,63,@register.filter(),
django/,69,@register.filter,
django/,72,@register.filter('somename') or @register.filter(name='somename'),
django/,77,"register.filter('somename', somefunc)",
django/,82,set the flag on the filter for FilterExpression.resolve,
django/,84,set the flag on the innermost decorated function,
django/,85,"for decorators that need it, e.g. stringfilter",
django/,128,@register.simple_tag(...),
django/,131,@register.simple_tag,
django/,228,"Copy across the CSRF token, if present, because inclusion tags are",
django/,229,"often used for forms, and we need instructions for using CSRF",
django/,230,protection to be as simple as possible.,
django/,259,First we try to extract a potential kwarg from the bit,
django/,262,The kwarg was successfully extracted,
django/,265,An unexpected keyword argument was supplied,
django/,270,The keyword argument has already been supplied once,
django/,275,"All good, record the keyword argument",
django/,278,"If using the keyword syntax for a positional arg, then",
django/,279,consume it.,
django/,282,Same for keyword-only arguments,
django/,290,Record the positional argument,
django/,293,Consume from the list of expected positional arguments,
django/,301,"Consider the last n params handled, where n is the",
django/,302,number of defaults.,
django/,305,Some positional arguments were not supplied,
django/,11,Core methods: engines have to provide their own implementation,
django/,12,(except for from_string which is optional).,
django/,54,Utility methods: they are provided to minimize code duplication and,
django/,55,security issues in third-party backends.,
django/,62,Immutable return value because it's cached and shared by callers.,
django/,79,The joined path was located outside of this template_dir,
django/,80,"(it might be inside another one, so this isn't fatal).",
django/,104,No templatetags package defined. This is safe to ignore.,
django/,38,The joined path was located outside of this template_dir,
django/,39,"(it might be inside another one, so this isn't fatal).",
django/,13,special field names,
django/,21,default minimum number of forms in a formset,
django/,24,"default maximum number of forms in a formset, to prevent memory exhaustion",
django/,37,MIN_NUM_FORM_COUNT and MAX_NUM_FORM_COUNT are output with the rest of,
django/,38,"the management form, but only for the convenience of client-side",
django/,39,code. The POST value of them returned from the client is not checked.,
django/,108,return absolute_max if it is lower than the actual total form,
django/,109,count in the data; this is DoS protection to prevent clients,
django/,110,from forcing the server to instantiate arbitrary numbers of,
django/,111,forms,
django/,116,"Allow all existing related objects/inlines to be displayed,",
django/,117,but don't allow extra beyond max_num.,
django/,129,"Use the length of the initial data if it's there, 0 otherwise.",
django/,136,DoS protection is included in total_form_count(),
django/,157,Don't render the HTML 'required' attribute as it may cause,
django/,158,"incorrect validation for extra, optional, and deleted",
django/,159,forms in the formset.,
django/,170,"Allow extra forms to be empty, unless they're part of",
django/,171,the minimum forms.,
django/,215,construct _deleted_form_indexes which is just a list of form indexes,
django/,216,that have had their deletion widget set to True,
django/,221,"if this is an extra form and hasn't changed, don't consider it",
django/,236,"Construct _ordering, which is a list of (form_index, order_field_value)",
django/,237,"tuples. After constructing this list, we'll sort it by order_field_value",
django/,238,so we have a way to get to the form indexes in the order specified,
django/,239,by the form data.,
django/,244,"if this is an extra form and hasn't changed, don't consider it",
django/,247,don't add data marked for deletion to self.ordered_data,
django/,251,"After we're done populating self._ordering, sort it.",
django/,252,"A sort function to order things numerically ascending, but",
django/,253,None should be sorted below anything else. Allowing None as,
django/,254,a comparison value makes it so we can leave ordering fields,
django/,255,blank.,
django/,259,"+infinity, larger than any number",
django/,262,Return a list of form.cleaned_data dicts in the order specified by,
django/,263,the form data.,
django/,304,We loop over every form.errors here rather than short circuiting on the,
django/,305,first failure to make sure validation gets triggered for every form.,
django/,307,This triggers a full clean.,
django/,312,This form is going to be deleted so any of its errors,
django/,313,shouldn't cause the entire formset to be invalid.,
django/,327,Stop further processing.,
django/,331,Empty forms are unchanged forms beyond those with initial data.,
django/,334,Accessing errors calls full_clean() if necessary.,
django/,335,_should_delete_form() requires cleaned_data.,
django/,355,Give self.clean() a chance to do cross-form validation.,
django/,376,Only pre-fill the ordering field for initial forms.,
django/,408,"All the forms on a FormSet are the same, so you only need to",
django/,409,interrogate the first form for media.,
django/,417,"XXX: there is no semantic division between forms here, there",
django/,418,probably should be. It might make sense to render each form as a,
django/,419,table row with each field as a td.,
django/,442,"hard limit on forms instantiated, to prevent memory-exhaustion attacks",
django/,443,limit is simply max_num + DEFAULT_MAX_NUM (which is 2*DEFAULT_MAX_NUM,
django/,444,if max_num is None in the first place),
django/,46,Default widget to use when rendering this type of Field.,
django/,47,"Default widget to use when rendering this as ""hidden"".",
django/,48,Default set of validators,
django/,49,Add an 'invalid' entry to default_error_message if you want a specific,
django/,50,field error message not raised by the field validators.,
django/,59,required -- Boolean that specifies whether the field is required.,
django/,60,True by default.,
django/,61,"widget -- A Widget class, or instance of a Widget class, that should",
django/,62,be used for this Field when displaying it. Each Field has a,
django/,63,default Widget that it'll use if you don't specify this. In,
django/,64,"most cases, the default widget is TextInput.",
django/,65,"label -- A verbose name for this field, for use in displaying this",
django/,66,"field in a form. By default, Django will use a ""pretty""",
django/,67,"version of the form field name, if the Field is part of a",
django/,68,Form.,
django/,69,initial -- A value to use in this Field's initial display. This value,
django/,70,is *not* used as a fallback if data isn't given.,
django/,71,"help_text -- An optional string to use as ""help text"" for this Field.",
django/,72,error_messages -- An optional dictionary to override the default,
django/,73,messages that the field will raise.,
django/,74,show_hidden_initial -- Boolean that specifies if it is needed to render a,
django/,75,hidden widget with initial value after widget.,
django/,76,validators -- List of additional validators to use,
django/,77,localize -- Boolean that specifies if the field should be localized.,
django/,78,"disabled -- Boolean that specifies whether the field is disabled, that",
django/,79,is its widget is shown in the form but not editable.,
django/,80,label_suffix -- Suffix to be added to the label. Overrides,
django/,81,form's label_suffix.,
django/,93,Trigger the localization machinery if needed.,
django/,98,Let the widget know whether it should display as required.,
django/,101,Hook into self.widget_attrs() for any Field-specific HTML attributes.,
django/,175,Always return False if the field is disabled since self.bound_data,
django/,176,always uses the initial value in this case.,
django/,185,"For purposes of seeing whether something has changed, None is",
django/,186,"the same as an empty string, if the data or initial value we get",
django/,187,"is None, replace it with ''.",
django/,234,"The HTML attribute is maxlength, not max_length.",
django/,237,"The HTML attribute is minlength, not min_length.",
django/,252,Localized number input is not well supported on most browsers,
django/,271,Strip trailing decimal and zeros.,
django/,362,Use exponential notation for small values since they might,
django/,363,be parsed as 0 otherwise. ref #20765,
django/,380,Try to strptime against each input format.,
django/,562,UploadedFile objects should have name and size attributes.,
django/,580,"If the widget got contradictory inputs, we raise a validation error",
django/,583,False means the field value should be cleared; further validation is,
django/,584,not needed.,
django/,588,"If the field is required, clearing is not possible (the widget",
django/,589,shouldn't return False data in that case anyway). False is not,
django/,590,in self.empty_value; if a False value makes it this far,
django/,591,it should be validated from here on out as None (so it will be,
django/,592,caught by the required check).,
django/,627,We need to get a file object for Pillow. We might have a path or we might,
django/,628,have to read the data into memory.,
django/,638,"load() could spot a truncated JPEG, but it loads the entire",
django/,639,"image in memory, which is a DoS vector. See #3848 and #18520.",
django/,641,verify() must be called immediately after the constructor.,
django/,644,Annotating so subclasses can reuse it for their own validation,
django/,646,Pillow doesn't detect the MIME type of all formats. In those,
django/,647,"cases, content_type will be None.",
django/,650,Pillow doesn't recognize it as an image.,
django/,686,urlparse.urlsplit can raise a ValueError with some,
django/,687,misformatted URLs.,
django/,694,"If no URL scheme given, assume http://",
django/,697,"Assume that if no domain is provided, that the path segment",
django/,698,contains the domain.,
django/,701,"Rebuild the url_fields list, since the domain segment may now",
django/,702,contain the path too.,
django/,713,"Explicitly check for the string 'False', which is what a hidden field",
django/,714,"will submit for False. Also check for '0', since this is what",
django/,715,"RadioSelect will provide. Because bool(""True"") == bool('1') == True,",
django/,716,we don't need to handle that explicitly.,
django/,730,Sometimes data or initial may be a string equivalent of a boolean,
django/,731,so we should run it through to_python first to get a boolean value,
django/,789,Setting choices also sets the choices on the widget.,
django/,790,"choices can be any iterable, but we call list() on it because",
django/,791,it will be consumed more than once.,
django/,822,"This is an optgroup, so look inside the group for options",
django/,878,Validate that each value in the value list is in self.choices.,
django/,943,"Set 'required' to False on the individual fields, because the",
django/,944,"required validation will be handled by ComboField, not by those",
django/,945,individual fields.,
django/,992,"Set 'required' to False on the individual fields, because the",
django/,993,"required validation will be handled by MultiValueField, not",
django/,994,by those individual fields.,
django/,1034,Raise a 'required' error if the MultiValueField is,
django/,1035,required and any field is empty.,
django/,1039,"Otherwise, add an 'incomplete' error to the list of",
django/,1040,"collected errors and skip field cleaning, if a required",
django/,1041,field is empty.,
django/,1048,"Collect all validation errors in a single list, which we'll",
django/,1049,"raise at the end of clean(), rather than raising a single",
django/,1050,exception for the first error we encounter. Skip duplicates.,
django/,1158,Raise a validation error if time or date is empty,
django/,1159,(possible if SplitDateTimeField has required=False).,
django/,25,Collect fields from current class.,
django/,35,Walk through the MRO.,
django/,38,Collect fields from base class.,
django/,42,Field shadowing.,
django/,77,Translators: This is the default suffix added to form field labels,
django/,80,Stores the errors after clean() has been called.,
django/,82,The base_fields class attribute is the *class-wide* definition of,
django/,83,fields. Because a particular *instance* of the class might want to,
django/,84,"alter self.fields, we create self.fields here by copying base_fields.",
django/,85,Instances should always modify self.fields; they should not modify,
django/,86,self.base_fields.,
django/,100,Initialize form renderer. Use a global default if not specified,
django/,101,either as an argument or as self.default_renderer.,
django/,128,ignore unknown fields,
django/,130,add remaining fields in original order,
django/,194,Errors that should be displayed above all fields.,
django/,209,"Create a 'class=""...""' attribute if the row should have any",
django/,210,CSS classes applied.,
django/,242,Insert any hidden fields in the last row.,
django/,246,Chop off the trailing row_ender (e.g. '</td></tr>') and,
django/,247,insert the hidden fields.,
django/,249,This can happen in the as_p() case (and possibly others,
django/,250,"that users write): if there are only top errors, we may",
django/,251,"not be able to conscript the last row for our purposes,",
django/,252,"so insert a new, empty row.",
django/,265,"If there aren't any rows in the output, just append the",
django/,266,hidden fields.,
django/,327,Normalize to ValidationError and let its constructor,
django/,328,do the hard work of making sense of the input.,
django/,366,Stop further processing.,
django/,369,"If the form is permitted to be empty, and none of the form data has",
django/,370,"changed from the initial data, short circuit any validation.",
django/,380,value_from_datadict() gets the data from the data dictionaries.,
django/,381,"Each widget type knows how to retrieve its own data, because some",
django/,382,widgets split data over several HTML fields.,
django/,436,Use the BoundField's initial as this is the value passed to,
django/,437,the widget.,
django/,446,Always assume data has changed if validation fails.,
django/,495,This is a separate class from BaseForm in order to abstract the way,
django/,496,self.fields is specified. This class (Form) is the one that does the,
django/,497,fancy metaclass stuff purely for the semantic sugar -- it allows one,
django/,498,to define a form using declarative syntax.,
django/,499,BaseForm itself has no way of designating self.fields.,
django/,145,The `list` reduce function returns an iterator as the fourth element,
django/,146,that is normally used for repopulating. Since we only inherit from,
django/,147,`list` for `isinstance` backward compatibility (Refs #17413) we,
django/,148,nullify this iterator as it would otherwise result in duplicate,
django/,149,entries. (Refs #23594),
django/,154,Utilities for time zone support in DateTimeField et al.,
django/,89,"To keep rendering order consistent, we can't just iterate over items().",
django/,90,"We need to sort the keys, and iterate over the sorted list.",
django/,129,The first items depend on nothing but have to be part of the,
django/,130,dependency graph to be included in the result.,
django/,134,No self dependencies,
django/,157,"Get the media property of the superclass, if it exists",
django/,164,Get the media definition for this class,
django/,195,Determines does this widget need multipart form,
django/,283,Subclasses must define this.,
django/,353,An ID attribute was given. Add a numeric index as a suffix,
django/,354,so that the inputs don't all have the same ID attribute.,
django/,449,If the user contradicts themselves (uploads a new file AND,
django/,450,"checks the ""clear"" checkbox), we return a unique marker",
django/,451,object that FileField will turn into a ValidationError.,
django/,453,"False signals to clear any existing value, as opposed to just None",
django/,468,Use slightly better defaults than HTML's 20x2 box,
django/,502,Defined at module level so that CheckboxInput is picklable (#17976),
django/,513,check_test is a callable that takes a value and returns True,
django/,514,if the checkbox should be checked for that value.,
django/,530,A missing value means False because HTML form submission does not,
django/,531,send results for unselected checkboxes.,
django/,534,Translate true and false strings to boolean values.,
django/,541,"HTML checkboxes don't appear in POST data if not checked, so it's",
django/,542,never known if the value is actually omitted.,
django/,557,"choices can be any iterable, but we may need to render this widget",
django/,558,"multiple times. Thus, collapse it into a list so it can be consumed",
django/,559,more than once.,
django/,695,'required' is always okay for <select multiple>.,
django/,720,For backwards compatibility with Django < 2.2.,
django/,735,For backwards compatibility with Django < 2.2.,
django/,752,"An unselected <select multiple> doesn't appear in POST data, so it's",
django/,753,never known if the value is actually omitted.,
django/,770,Don't use the 'required' attribute because browser validation would,
django/,771,require all checkboxes to be checked instead of at least one.,
django/,775,"HTML checkboxes don't appear in POST data if not checked, so it's",
django/,776,never known if the value is actually omitted.,
django/,821,"value is a list of values, each corresponding to a widget",
django/,822,in self.widgets.,
django/,951,"Optional list or tuple of years to use in the ""year"" select box.",
django/,958,"Optional dict of months to use in the ""month"" select box.",
django/,964,"Optional string, list, or tuple to use as empty_label.",
django/,1028,Convert any zeros in the date to empty strings to match the,
django/,1029,empty option value.,
django/,1073,"Return pseudo-ISO dates with zeros for any unselected values,",
django/,1074,e.g. '2017-0-23'.,
django/,50,"Leave defaults for fields that aren't in POST data, except for",
django/,51,checkbox inputs because they don't appear in POST data if not checked.,
django/,58,"Defer saving file-type fields until after the other fields, so a",
django/,59,callable upload_to can use the values from other fields.,
django/,71,ModelForms,
django/,143,Avoid circular import,
django/,225,"We check if a string was passed to `fields` or `exclude`,",
django/,226,which is likely to be a mistake where the user typed ('foo') instead,
django/,227,"of ('foo',)",
django/,240,"If a model is defined, extract form fields from it.",
django/,249,"Sentinel for fields_for_model to indicate ""get the list of",
django/,250,"fields from the model""",
django/,257,limit_choices_to will be applied during ModelForm.__init__().,
django/,261,make sure opts.fields doesn't specify an invalid field,
django/,269,Override default model fields with any custom declared ones,
django/,270,"(plus, include all the other declared fields).",
django/,289,"if we didn't get an instance, instantiate a new one",
django/,295,"if initial was provided, it should override the values from instance",
django/,298,self._validate_unique will be set to True by BaseModelForm.clean().,
django/,299,It is False by default so overriding self.clean() and failing to call,
django/,300,super will stop validate_unique from being called.,
django/,316,Build up a list of fields that should be excluded from model field,
django/,317,validation and unique checks.,
django/,320,Exclude fields that aren't on the form. The developer may be,
django/,321,adding these values to the model after form validation.,
django/,325,Don't perform model validation on fields that were defined,
django/,326,manually on the form and excluded via the ModelForm's Meta,
django/,327,class. See #12901.,
django/,333,Exclude fields that failed form validation. There's no need for,
django/,334,the model fields to validate them as well.,
django/,338,"Exclude empty fields that are not required by the form, if the",
django/,339,underlying model field is required. This keeps the model field,
django/,340,from raising a required error. Note: don't exclude the field from,
django/,341,"validation if the model field allows blanks. If it does, the blank",
django/,342,"value may be included in a unique check, so cannot be excluded",
django/,343,from validation.,
django/,356,Override any validation error messages defined at the model level,
django/,357,with those defined at the form level.,
django/,360,Allow the model generated by construct_instance() to raise,
django/,361,ValidationError and have them handled in the same way as others.,
django/,388,Foreign Keys being used to represent inline relationships,
django/,389,are excluded from basic field value validation. This is for two,
django/,390,"reasons: firstly, the value may not be supplied (#12507; the",
django/,391,case of providing new values to the admin); secondly the,
django/,392,object being referred to may not yet fully exist (#12749).,
django/,393,"However, these fields *must* be included in uniqueness checks,",
django/,394,so this can't be part of _get_validation_exclusions().,
django/,409,Validate uniqueness if needed.,
django/,432,Note that for historical reasons we want to include also,
django/,433,private_fields here. (GenericRelation was previously a fake,
django/,434,m2m field).,
django/,459,"If committing, save the instance and the m2m data immediately.",
django/,463,"If not committing, add a method to the form to allow deferred",
django/,464,saving of m2m data.,
django/,509,"Create the inner Meta class. FIXME: ideally, we should be able to",
django/,510,construct a ModelForm without creating and passing in a temporary,
django/,511,inner class.,
django/,513,Build up a list of attributes that the Meta object will have.,
django/,532,"If parent form class already has an inner Meta, the Meta we're",
django/,533,creating needs to inherit from the parent's inner meta.,
django/,538,Give this new form class a reasonable name.,
django/,541,Class attributes for the new form class.,
django/,554,Instantiate type(form) in order to use the same metaclass as form.,
django/,558,ModelFormSets,
django/,566,Set of fields that must be unique among forms of this set.,
django/,603,The primary key is missing. The user may have tampered,
django/,604,with POST data.,
django/,611,The primary key exists but is an invalid value. The,
django/,612,user may have tampered with POST data.,
django/,619,Set initial values for extra forms,
django/,636,If the queryset isn't already ordered we need to add an,
django/,637,artificial ordering here to make sure that all formsets,
django/,638,constructed from this queryset have the same form order.,
django/,642,Removed queryset limiting here. As per discussion re: #13023,
django/,643,"on django-dev, max_num should not prevent existing",
django/,644,related objects/inlines from being displayed.,
django/,681,Collect unique_checks and date_checks to run from all the forms.,
django/,693,Do each of the unique checks (unique and unique_together),
django/,697,Get the data for the set of fields that must be unique among the forms.,
django/,702,Reduce Model instances to their primary key values,
django/,705,"Prevent ""unhashable type: list"" errors later on.",
django/,710,if we've already seen it then we have a uniqueness failure,
django/,712,poke error messages into the right places and mark,
django/,713,the form as invalid,
django/,716,remove the data from the cleaned_data dict since it was invalid,
django/,720,mark the data as seen,
django/,722,iterate over each of the date checks now,
django/,727,see if we have data for both fields,
django/,730,if it's a date lookup we need to get the data for all the fields,
django/,734,otherwise it's just the attribute on the date/datetime,
django/,735,object,
django/,739,if we've already seen it then we have a uniqueness failure,
django/,741,poke error messages into the right places and mark,
django/,742,the form as invalid,
django/,745,remove the data from the cleaned_data dict since it was invalid,
django/,747,mark the data as seen,
django/,786,"If the pk is None, it means either:",
django/,787,"1. The object is an unexpected empty model, created by invalid",
django/,788,POST data such as an object outside the formset's queryset.,
django/,789,2. The object was already deleted from the database.,
django/,807,"If someone has marked an add form for deletion, don't save the",
django/,808,object.,
django/,820,"If a pk isn't editable, then it won't be on the form, so we need to",
django/,821,add it here so we can tell which object is which when we get the,
django/,822,"data back. Generally, pk.editable should be false, but for some",
django/,823,"reason, auto_created pk fields and AutoField's editable attribute is",
django/,824,"True, so check for that as well.",
django/,835,"If we're adding the related instance, ignore its primary key",
django/,836,as it could be an auto-generated default which isn't actually,
django/,837,in the database.,
django/,887,InlineFormSets,
django/,907,Add the generated field to form._meta.fields if it's defined to make,
django/,908,sure validation isn't skipped on that field.,
django/,923,Allow modifying an immutable QueryDict.,
django/,926,"Remove the primary key from the form's data, we are only",
django/,927,creating new instances,
django/,929,Remove the foreign key from the form's data,
django/,934,Set the fk value here so that the form can do its validation.,
django/,947,Ensure the latest copy of the related instance is present on each,
django/,948,form (it may have been saved after the formset was originally,
django/,949,instantiated).,
django/,959,"The foreign key field might not be on the form, so we poke at the",
django/,960,"Model field to get the label, since we need that for error messages.",
django/,966,The InlineForeignKeyField assumes that the foreign key relation is,
django/,967,"based on the parent model's pk. If this isn't the case, set to_field",
django/,968,to correctly resolve the initial form value.,
django/,972,"If we're adding a new object, ignore a parent's auto-generated key",
django/,973,as it will be regenerated on the save request.,
django/,997,avoid circular import,
django/,1015,Try to discover what the ForeignKey from model to parent_model is,
django/,1059,enforce a max_num=1 when the foreign key to the parent model is unique.,
django/,1087,Fields,
django/,1115,if there is no value act as we did before.,
django/,1117,ensure the we compare the values as equal types.,
django/,1153,Can't use iterator() when queryset uses prefetch_related(),
django/,1160,count() adds a query but uses less memory since the QuerySet results,
django/,1161,"won't be cached. In most cases, the choices will only be iterated on,",
django/,1162,and __len__() won't be called.,
django/,1177,"This class is a subclass of ChoiceField for purity, but it doesn't",
django/,1178,actually use any of ChoiceField's implementation.,
django/,1189,Call Field instead of ChoiceField __init__() because we don't need,
django/,1190,ChoiceField.__init__().,
django/,1203,limit the queryset later.,
django/,1218,"Need to force a new ModelChoiceIterator to be created, bug #11183",
django/,1232,this method will be used to create object labels by the QuerySetIterator.,
django/,1233,Override it to customize the label.,
django/,1243,"If self._choices is set, then somebody must have manually set",
django/,1244,"the property self.choices. In this case, just return self._choices.",
django/,1248,"Otherwise, execute the QuerySet in self.queryset to determine the",
django/,1249,choices dynamically. Return a fresh ModelChoiceIterator that has not been,
django/,1250,consumed. Note that we're instantiating a new ModelChoiceIterator *each*,
django/,1251,"time _get_choices() is called (and, thus, each time self.choices is",
django/,1252,accessed) so that we can ensure the QuerySet has not been consumed. This,
django/,1253,construct might look complicated but it allows for lazy evaluation of,
django/,1254,the queryset.,
django/,1328,Since this overrides the inherited ModelChoiceField.clean,
django/,1329,we run custom validators here,
django/,1340,deduplicate given values to avoid creating many querysets or,
django/,1341,requiring the database backend deduplicate efficiently.,
django/,1345,"list of lists isn't hashable, for example",
django/,5,NOQA,
django/,6,NOQA,
django/,7,NOQA,
django/,8,NOQA,
django/,9,NOQA,
django/,10,NOQA,
django/,11,NOQA,
django/,54,BoundField evaluates to True even if it doesn't have subwidgets.,
django/,64,Prevent unnecessary reevaluation when accessing BoundField's attrs,
django/,65,from templates.,
django/,147,Only add the suffix if the label does not end in punctuation.,
django/,148,"Translators: If found as last label character, these punctuation",
django/,149,characters will prevent the default label_suffix to be appended to the label,
django/,194,Boolean or string,
django/,215,"If this is an auto-generated default date, nix the microseconds for",
django/,216,standardized handling. See #22502.,
django/,224,Copy attrs to avoid modifying the argument.,
django/,7,This is defined here as a do-nothing function because we can't import,
django/,8,django.utils.translation -- that module depends on the settings.,
django/,13,,
django/,14,CORE,
django/,15,,
django/,19,Whether the framework should propagate raw exceptions rather than catching,
django/,20,them. This is useful under some testing situations and should never be used,
django/,21,on a live site.,
django/,24,People who get code error notifications.,
django/,25,"In the format [('Full Name', 'email@example.com'), ('Full Name', 'anotheremail@example.com')]",
django/,28,"List of IP addresses, as strings, that:",
django/,29,"* See debug comments, when DEBUG is true",
django/,30,* Receive x-headers,
django/,33,Hosts/domain names that are valid for this site.,
django/,34,"""*"" matches anything, "".example.com"" matches example.com and all subdomains",
django/,37,Local time zone for this installation. All choices can be found here:,
django/,38,https://en.wikipedia.org/wiki/List_of_tz_zones_by_name (although not all,
django/,39,"systems may support all possibilities). When USE_TZ is True, this is",
django/,40,interpreted as the default user time zone.,
django/,43,"If you set this to True, Django will use timezone-aware datetimes.",
django/,46,Language code for this installation. All choices can be found here:,
django/,47,http://www.i18nguy.com/unicode/language-identifiers.html,
django/,50,"Languages we provide translations for, out of the box.",
django/,146,Languages using BiDi (right-to-left) layout,
django/,149,"If you set this to False, Django will make some optimizations so as not",
django/,150,to load the internationalization machinery.,
django/,154,Settings for language cookie,
django/,164,"If you set this to True, Django will format dates, numbers and calendars",
django/,165,according to user current locale.,
django/,168,Not-necessarily-technical managers of the site. They get broken link,
django/,169,notifications and other various emails.,
django/,172,"Default charset to use for all HttpResponse objects, if a MIME type isn't",
django/,173,manually specified. It's used to construct the Content-Type header.,
django/,176,Email address that error messages come from.,
django/,179,"Database connection info. If left empty, will default to the dummy backend.",
django/,182,Classes used to implement DB routing behavior.,
django/,185,The email backend to use. For possible shortcuts see django.core.mail.,
django/,186,The default is to use the SMTP backend.,
django/,187,Third-party backends can be specified by providing a Python path,
django/,188,to a module that defines an EmailBackend class.,
django/,191,Host for sending email.,
django/,194,Port for sending email.,
django/,197,Whether to send SMTP 'Date' header in the local time zone or in UTC.,
django/,200,Optional SMTP authentication information for EMAIL_HOST.,
django/,209,List of strings representing installed apps.,
django/,214,Default form rendering class.,
django/,217,Default email address to use for various automated correspondence from,
django/,218,the site managers.,
django/,221,Subject-line prefix for email messages send with django.core.mail.mail_admins,
django/,222,or ...mail_managers.  Make sure to include the trailing space.,
django/,225,Whether to append trailing slashes to URLs.,
django/,228,"Whether to prepend the ""www."" subdomain to URLs that don't have it.",
django/,231,Override the server-derived value of SCRIPT_NAME,
django/,234,List of compiled regular expression objects representing User-Agent strings,
django/,235,"that are not allowed to visit any page, systemwide. Use this for bad",
django/,236,robots/crawlers. Here are a few examples:,
django/,237,import re,
django/,238,DISALLOWED_USER_AGENTS = [,
django/,239,"re.compile(r'^NaverBot.*'),",
django/,240,"re.compile(r'^EmailSiphon.*'),",
django/,241,"re.compile(r'^SiteSucker.*'),",
django/,242,"re.compile(r'^sohu-search'),",
django/,243,],
django/,248,List of compiled regular expression objects representing URLs that need not,
django/,249,be reported by BrokenLinkEmailsMiddleware. Here are a few examples:,
django/,250,import re,
django/,251,IGNORABLE_404_URLS = [,
django/,252,"re.compile(r'^/apple-touch-icon.*\.png$'),",
django/,253,"re.compile(r'^/favicon.ico$'),",
django/,254,"re.compile(r'^/robots.txt$'),",
django/,255,"re.compile(r'^/phpmyadmin/'),",
django/,256,"re.compile(r'\.(cgi|php|pl)$'),",
django/,257,],
django/,260,A secret key for this particular Django installation. Used in secret-key,
django/,261,"hashing algorithms. Set this in your settings, or Django will complain",
django/,262,loudly.,
django/,265,Default file storage mechanism that holds media.,
django/,268,Absolute filesystem path to the directory that will hold user-uploaded files.,
django/,269,"Example: ""/var/www/example.com/media/""",
django/,272,URL that handles the media served from MEDIA_ROOT.,
django/,273,"Examples: ""http://example.com/media/"", ""http://media.example.com/""",
django/,276,Absolute path to the directory static files should be collected to.,
django/,277,"Example: ""/var/www/example.com/static/""",
django/,280,URL that handles the static files served from STATIC_ROOT.,
django/,281,"Example: ""http://example.com/static/"", ""http://static.example.com/""",
django/,284,List of upload handler classes to be applied in order.,
django/,290,"Maximum size, in bytes, of a request before it will be streamed to the",
django/,291,file system instead of into memory.,
django/,292,i.e. 2.5 MB,
django/,294,Maximum size in bytes of request data (excluding file uploads) that will be,
django/,295,read before a SuspiciousOperation (RequestDataTooBig) is raised.,
django/,296,i.e. 2.5 MB,
django/,298,Maximum number of GET/POST parameters that will be read before a,
django/,299,SuspiciousOperation (TooManyFieldsSent) is raised.,
django/,302,Directory in which upload streamed files will be temporarily saved. A value of,
django/,303,`None` will make Django use the operating system's default temporary directory,
django/,304,"(i.e. ""/tmp"" on *nix systems).",
django/,307,The numeric mode to set newly-uploaded files to. The value should be a mode,
django/,308,you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.,
django/,311,"The numeric mode to assign to newly-created directories, when uploading files.",
django/,312,The value should be a mode as you'd pass to os.chmod;,
django/,313,see https://docs.python.org/library/os.html#files-and-directories.,
django/,316,Python module path where user will place custom format definition.,
django/,317,The directory where this setting is pointing should contain subdirectories,
django/,318,"named as the locales, containing a formats.py file",
django/,319,"(i.e. ""myproject.locale"" for myproject/locale/en/formats.py etc. use)",
django/,322,Default formatting for date objects. See all available format strings here:,
django/,323,https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,326,Default formatting for datetime objects. See all available format strings here:,
django/,327,https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,330,Default formatting for time objects. See all available format strings here:,
django/,331,https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,334,Default formatting for date objects when only the year and month are relevant.,
django/,335,See all available format strings here:,
django/,336,https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,339,Default formatting for date objects when only the month and day are relevant.,
django/,340,See all available format strings here:,
django/,341,https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,344,Default short formatting for date objects. See all available format strings here:,
django/,345,https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,348,Default short formatting for datetime objects.,
django/,349,See all available format strings here:,
django/,350,https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,353,"Default formats to be used when parsing dates from input boxes, in order",
django/,354,See all available format string here:,
django/,355,https://docs.python.org/library/datetime.html#strftime-behavior,
django/,356,* Note that these format strings are different from the ones to display dates,
django/,358,"'2006-10-25', '10/25/2006', '10/25/06'",
django/,359,"'Oct 25 2006', 'Oct 25, 2006'",
django/,360,"'25 Oct 2006', '25 Oct, 2006'",
django/,361,"'October 25 2006', 'October 25, 2006'",
django/,362,"'25 October 2006', '25 October, 2006'",
django/,365,"Default formats to be used when parsing times from input boxes, in order",
django/,366,See all available format string here:,
django/,367,https://docs.python.org/library/datetime.html#strftime-behavior,
django/,368,* Note that these format strings are different from the ones to display dates,
django/,370,'14:30:59',
django/,371,'14:30:59.000200',
django/,372,'14:30',
django/,375,"Default formats to be used when parsing dates and times from input boxes,",
django/,376,in order,
django/,377,See all available format string here:,
django/,378,https://docs.python.org/library/datetime.html#strftime-behavior,
django/,379,* Note that these format strings are different from the ones to display dates,
django/,381,'2006-10-25 14:30:59',
django/,382,'2006-10-25 14:30:59.000200',
django/,383,'2006-10-25 14:30',
django/,384,'10/25/2006 14:30:59',
django/,385,'10/25/2006 14:30:59.000200',
django/,386,'10/25/2006 14:30',
django/,387,'10/25/06 14:30:59',
django/,388,'10/25/06 14:30:59.000200',
django/,389,'10/25/06 14:30',
django/,392,"First day of week, to be used on calendars",
django/,393,"0 means Sunday, 1 means Monday...",
django/,396,Decimal separator symbol,
django/,399,Boolean that sets whether to add thousand separator when formatting numbers,
django/,402,"Number of digits that will be together, when splitting them by",
django/,403,"THOUSAND_SEPARATOR. 0 means no grouping, 3 means splitting by thousands...",
django/,406,Thousand separator symbol,
django/,409,The tablespaces to use for each model when not specified otherwise.,
django/,413,Default X-Frame-Options header value,
django/,419,The Python dotted path to the WSGI application that Django's internal server,
django/,420,"(runserver) will use. If `None`, the return value of",
django/,421,"'django.core.wsgi.get_wsgi_application' is used, thus preserving the same",
django/,422,behavior as previous versions of Django. Otherwise this should point to an,
django/,423,actual WSGI application object.,
django/,426,If your Django app is behind a proxy that sets a header to specify secure,
django/,427,"connections, AND that proxy ensures that user-submitted headers with the",
django/,428,"same name are ignored (so that people can't spoof it), set this value to",
django/,429,"a tuple of (header_name, header_value). For any requests that come in with",
django/,430,"that header/value, request.is_secure() will return True.",
django/,431,"WARNING! Only set this if you fully understand what you're doing. Otherwise,",
django/,432,you may be opening yourself up to a security risk.,
django/,435,,
django/,436,MIDDLEWARE,
django/,437,,
django/,439,"List of middleware to use. Order is important; in the request phase, these",
django/,440,"middleware will be applied in the order given, and in the response",
django/,441,phase the middleware will be applied in reverse order.,
django/,444,,
django/,445,SESSIONS,
django/,446,,
django/,448,Cache to store session data if using the cache session backend.,
django/,450,Cookie name. This can be whatever you want.,
django/,452,"Age of cookie, in seconds (default: 2 weeks).",
django/,454,"A string like ""example.com"", or None for standard domain cookie.",
django/,456,Whether the session cookie should be secure (https:// only).,
django/,458,The path of the session cookie.,
django/,460,Whether to use the HttpOnly flag.,
django/,462,Whether to set the flag restricting cookie leaks on cross-site requests.,
django/,463,"This can be 'Lax', 'Strict', or None to disable the flag.",
django/,465,Whether to save the session data on every request.,
django/,467,Whether a user's session cookie expires when the Web browser is closed.,
django/,469,The module to store session data,
django/,471,"Directory to store session files if using the file session module. If None,",
django/,472,the backend will use a sensible default.,
django/,474,class to serialize session data,
django/,477,,
django/,478,CACHE,
django/,479,,
django/,481,The cache backends to use.,
django/,491,,
django/,492,AUTHENTICATION,
django/,493,,
django/,505,The number of days a password reset link is valid for,
django/,508,The minimum number of seconds a password reset link is valid for,
django/,509,(default: 3 days).,
django/,512,the first hasher in this list is the preferred algorithm.  any,
django/,513,password using different algorithms will be converted automatically,
django/,514,upon login,
django/,524,,
django/,525,SIGNING,
django/,526,,
django/,530,,
django/,531,CSRF,
django/,532,,
django/,534,Dotted path to callable to be used as view when a request is,
django/,535,rejected by the CSRF middleware.,
django/,538,Settings for CSRF cookie.,
django/,550,,
django/,551,MESSAGES,
django/,552,,
django/,554,Class to use as messages backend,
django/,557,Default values of MESSAGE_LEVEL and MESSAGE_TAGS are defined within,
django/,558,django.contrib.messages to avoid imports in this settings file.,
django/,560,,
django/,561,LOGGING,
django/,562,,
django/,564,The callable to use to configure logging,
django/,567,Custom logging configuration.,
django/,570,Default exception reporter class used in case none has been,
django/,571,specifically assigned to the HttpRequest instance.,
django/,574,Default exception reporter filter class used in case none has been,
django/,575,specifically assigned to the HttpRequest instance.,
django/,578,,
django/,579,TESTING,
django/,580,,
django/,582,The name of the class to use to run the test suite,
django/,585,Apps that don't need to be serialized at test database creation time,
django/,586,(only apps with migrations are to start with),
django/,589,,
django/,590,FIXTURES,
django/,591,,
django/,593,The list of directories to search for fixtures,
django/,596,,
django/,597,STATICFILES,
django/,598,,
django/,600,A list of locations of additional static files,
django/,603,The default file storage backend used during the build process,
django/,606,List of finder classes that know how to find static files in,
django/,607,various locations.,
django/,611,"'django.contrib.staticfiles.finders.DefaultStorageFinder',",
django/,614,,
django/,615,MIGRATIONS,
django/,616,,
django/,618,"Migration module overrides for apps, by app label.",
django/,621,,
django/,622,SYSTEM CHECKS,
django/,623,,
django/,625,List of all issues generated by system checks that should be silenced. Light,
django/,626,"issues like warnings, infos or debugs will not generate a message. Silencing",
django/,627,serious issues like errors and criticals does not result in hiding the,
django/,628,"message, but Django will not stop you from e.g. running server.",
django/,631,,
django/,632,SECURITY MIDDLEWARE,
django/,633,,
django/,67,Hardcode the class name as otherwise it yields 'Settings'.,
django/,121,Don't apply prefix to valid URLs.,
django/,127,Don't apply prefix to absolute paths.,
django/,141,Show a warning if the setting is used outside of Django.,
django/,142,"Stack index: -1 this line, -2 the caller.",
django/,163,update this dict from global settings (but only for ALL_CAPS settings),
django/,168,store the settings module in case someone later cares,
django/,202,"When we can, attempt to validate the timezone. If we can't find",
django/,203,"this file, no check happens and it's harmless.",
django/,208,Move the time zone info into os.environ. See ticket #2315 for why,
django/,209,we don't do this unconditionally (breaks Windows).,
django/,225,SETTINGS_MODULE doesn't make much sense in the manually configured,
django/,226,(standalone) case.,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,"'25.10.2006', '25.10.06'",
django/,18,"'25. 10. 2006', '25. 10. 06'",
django/,22,'25.10.2006 14:30:59',
django/,23,'25.10.2006 14:30:59.000200',
django/,24,'25.10.2006 14:30',
django/,25,'25.10.06 14:30:59',
django/,26,'25.10.06 14:30:59.000200',
django/,27,'25.10.06 14:30',
django/,28,'25. 10. 2006 14:30:59',
django/,29,'25. 10. 2006 14:30:59.000200',
django/,30,'25. 10. 2006 14:30',
django/,31,'25. 10. 06 14:30:59',
django/,32,'25. 10. 06 14:30:59.000200',
django/,33,'25. 10. 06 14:30',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,"'25.10.2006.', '25.10.06.'",
django/,18,"'25. 10. 2006.', '25. 10. 06.'",
django/,19,"'%d. %b %y.', '%d. %B %y.',     # '25. Oct 06.', '25. October 06.'",
django/,20,"'%d. %b \'%y.', '%d. %B \'%y.', # '25. Oct '06.', '25. October '06.'",
django/,21,"'%d. %b %Y.', '%d. %B %Y.',     # '25. Oct 2006.', '25. October 2006.'",
django/,24,'25.10.2006. 14:30:59',
django/,25,'25.10.2006. 14:30:59.000200',
django/,26,'25.10.2006. 14:30',
django/,27,'25.10.06. 14:30:59',
django/,28,'25.10.06. 14:30:59.000200',
django/,29,'25.10.06. 14:30',
django/,30,'25. 10. 2006. 14:30:59',
django/,31,'25. 10. 2006. 14:30:59.000200',
django/,32,'25. 10. 2006. 14:30',
django/,33,'25. 10. 06. 14:30:59',
django/,34,'25. 10. 06. 14:30:59.000200',
django/,35,'25. 10. 06. 14:30',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,7,DATETIME_FORMAT =,
django/,8,YEAR_MONTH_FORMAT =,
django/,11,SHORT_DATETIME_FORMAT =,
django/,12,FIRST_DAY_OF_WEEK =,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,DATE_INPUT_FORMATS =,
django/,17,TIME_INPUT_FORMATS =,
django/,18,DATETIME_INPUT_FORMATS =,
django/,20,Non-breaking space,
django/,21,NUMBER_GROUPING =,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,5,2016年9月5日,
django/,6,20:45,
django/,7,2016年9月5日 20:45,
django/,8,2016年9月,
django/,9,9月5日,
django/,10,2016年9月5日,
django/,11,2016年9月5日 20:45,
django/,12,星期一 (Monday),
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,'2016/09/05',
django/,18,'2016-09-05',
django/,19,'2016年9月5日',
django/,23,'20:45',
django/,24,'20:45:29',
django/,25,'20:45:29.000200',
django/,29,'2016/09/05 20:45',
django/,30,'2016-09-05 20:45',
django/,31,'2016年9月5日 14:45',
django/,32,'2016/09/05 20:45:29',
django/,33,'2016-09-05 20:45:29',
django/,34,'2016年9月5日 20:45:29',
django/,35,'2016/09/05 20:45:29.000200',
django/,36,'2016-09-05 20:45:29.000200',
django/,37,'2016年9月5日 20:45:29.000200',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,7,DATETIME_FORMAT =,
django/,11,SHORT_DATETIME_FORMAT =,
django/,12,FIRST_DAY_OF_WEEK =,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,DATE_INPUT_FORMATS =,
django/,17,TIME_INPUT_FORMATS =,
django/,18,DATETIME_INPUT_FORMATS =,
django/,21,NUMBER_GROUPING =,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,7,DATETIME_FORMAT =,
django/,11,SHORT_DATETIME_FORMAT =,
django/,12,FIRST_DAY_OF_WEEK =,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,DATE_INPUT_FORMATS =,
django/,17,TIME_INPUT_FORMATS =,
django/,18,DATETIME_INPUT_FORMATS =,
django/,21,NUMBER_GROUPING =,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Monday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,"'25.10.2006', '25.10.06'",
django/,18,'06-10-25',
django/,19,"'%d. %B %Y', '%d. %b. %Y',  # '25. October 2006', '25. Oct. 2006'",
django/,22,'25.10.2006 14:30:59',
django/,23,'25.10.2006 14:30:59.000200',
django/,24,'25.10.2006 14:30',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,10,Monday: ISO 8601,
django/,12,"'25/10/2006', '25/10/06'",
django/,13,'20061025',
django/,23,"',' is also official (less common): NOM-008-SCFI-2002",
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Sunday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,"'25/10/2006', '25/10/06'",
django/,18,"'%d de %b de %Y', '%d de %b, %Y',   # '25 de Out de 2006', '25 Out, 2006'",
django/,19,"'%d de %B de %Y', '%d de %B, %Y',   # '25 de Outubro de 2006', '25 de Outubro, 2006'",
django/,22,'25/10/2006 14:30:59',
django/,23,'25/10/2006 14:30:59.000200',
django/,24,'25/10/2006 14:30',
django/,25,'25/10/06 14:30:59',
django/,26,'25/10/06 14:30:59.000200',
django/,27,'25/10/06 14:30',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,12,"'25/10/2006', '25/10/06'",
django/,13,'20061025',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Monday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,"'05.01.2006', '05.01.06'",
django/,18,"'5. 1. 2006', '5. 1. 06'",
django/,19,"'%d. %B %Y', '%d. %b. %Y',  # '25. October 2006', '25. Oct. 2006'",
django/,21,Kept ISO formats as one is in first position,
django/,23,'04:30:59',
django/,24,'04.30',
django/,25,'04:30',
django/,28,'05.01.2006 04:30:59',
django/,29,'05.01.2006 04:30:59.000200',
django/,30,'05.01.2006 04.30',
django/,31,'05.01.2006 04:30',
django/,32,'05. 01. 2006 04:30:59',
django/,33,'05. 01. 2006 04:30:59.000200',
django/,34,'05. 01. 2006 04.30',
django/,35,'05. 01. 2006 04:30',
django/,36,'2006-01-05 04.30',
django/,39,non-breaking space,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,7,DATETIME_FORMAT =,
django/,8,YEAR_MONTH_FORMAT =,
django/,11,SHORT_DATETIME_FORMAT =,
django/,12,FIRST_DAY_OF_WEEK =,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,DATE_INPUT_FORMATS =,
django/,17,TIME_INPUT_FORMATS =,
django/,18,DATETIME_INPUT_FORMATS =,
django/,19,DECIMAL_SEPARATOR =,
django/,20,THOUSAND_SEPARATOR =,
django/,21,NUMBER_GROUPING =,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Monday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,'25.10.2006',
django/,18,'25.10.06',
django/,21,'25.10.2006 14:30:59',
django/,22,'25.10.2006 14:30:59.000200',
django/,23,'25.10.2006 14:30',
django/,24,'25.10.06 14:30:59',
django/,25,'25.10.06 14:30:59.000200',
django/,26,'25.10.06 14:30',
django/,29,non-breaking space,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,8,YEAR_MONTH_FORMAT =,
django/,12,FIRST_DAY_OF_WEEK =,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,DATE_INPUT_FORMATS =,
django/,17,TIME_INPUT_FORMATS =,
django/,18,DATETIME_INPUT_FORMATS =,
django/,21,NUMBER_GROUPING =,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Monday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,"'25.10.2006', '25.10.06'",
django/,18,'06-10-25',
django/,19,"'%d. %B %Y', '%d. %b. %Y',  # '25. October 2006', '25. Oct. 2006'",
django/,22,'25.10.2006 14:30:59',
django/,23,'25.10.2006 14:30:59.000200',
django/,24,'25.10.2006 14:30',
django/,27,non-breaking space,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,5,'26-a de julio 1887',
django/,6,'18:59',
django/,7,"'26-a de julio 1887, je 18:59'",
django/,8,'julio de 1887',
django/,9,'26-a de julio',
django/,10,'1887-07-26',
django/,11,'1887-07-26 18:59',
django/,12,Monday (lundo),
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,'1887-07-26',
django/,18,'87-07-26',
django/,19,'1887 07 26',
django/,20,'1887.07.26',
django/,21,'26-a de jul 1887',
django/,22,'26 jul 1887',
django/,23,'26-a de julio 1887',
django/,24,'26 julio 1887',
django/,25,'26 07 1887',
django/,26,'26/07/1887',
django/,29,'18:59:00',
django/,30,'18:59',
django/,33,'1887-07-26 18:59:00',
django/,34,'1887-07-26 18:59',
django/,36,'1887.07.26 18:59:00',
django/,37,'1887.07.26 18:59',
django/,39,'26/07/1887 18:59:00',
django/,40,'26/07/1887 18:59',
django/,42,'87-07-26 18:59:00',
django/,43,'87-07-26 18:59',
django/,46,non-breaking space,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Monday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,"'25.10.2006', '25.10.06'",
django/,18,"'%d. %B %Y', '%d. %b. %Y',  # '25. October 2006', '25. Oct. 2006'",
django/,21,'25.10.2006 14:30:59',
django/,22,'25.10.2006 14:30:59.000200',
django/,23,'25.10.2006 14:30',
django/,26,"these are the separators for non-monetary numbers. For monetary numbers,",
django/,27,the DECIMAL_SEPARATOR is a . (decimal point) and the THOUSAND_SEPARATOR is a,
django/,28,' (single quote).,
django/,29,"For details, please refer to http://www.bk.admin.ch/dokumentation/sprachen/04915/05016/index.html?lang=de",
django/,30,(in German) and the documentation,
django/,32,non-breaking space,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,11,SHORT_DATETIME_FORMAT =,
django/,12,FIRST_DAY_OF_WEEK =,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,DATE_INPUT_FORMATS =,
django/,17,TIME_INPUT_FORMATS =,
django/,18,DATETIME_INPUT_FORMATS =,
django/,21,NUMBER_GROUPING =,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,5,'25 Oct 2006',
django/,6,'2:30 p.m.',
django/,7,"'25 Oct 2006, 2:30 p.m.'",
django/,8,'October 2006',
django/,9,'25 October',
django/,10,'25/10/2006',
django/,11,'25/10/2006 2:30 p.m.',
django/,12,Monday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,"'25/10/2006', '25/10/06'",
django/,18,"'%b %d %Y', '%b %d, %Y',          # 'Oct 25 2006', 'Oct 25, 2006'",
django/,19,"'%d %b %Y', '%d %b, %Y',          # '25 Oct 2006', '25 Oct, 2006'",
django/,20,"'%B %d %Y', '%B %d, %Y',          # 'October 25 2006', 'October 25, 2006'",
django/,21,"'%d %B %Y', '%d %B, %Y',          # '25 October 2006', '25 October, 2006'",
django/,24,'2006-10-25 14:30:59',
django/,25,'2006-10-25 14:30:59.000200',
django/,26,'2006-10-25 14:30',
django/,27,'25/10/2006 14:30:59',
django/,28,'25/10/2006 14:30:59.000200',
django/,29,'25/10/2006 14:30',
django/,30,'25/10/06 14:30:59',
django/,31,'25/10/06 14:30:59.000200',
django/,32,'25/10/06 14:30',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,'25.10.2006',
django/,20,'25.10.2006 14:30:59',
django/,21,'25.10.2006 14:30:59.000200',
django/,22,'25.10.2006 14:30',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Monday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,"'2006-10-25', '25.10.2006', '25.10.06'",
django/,20,'14:30:59',
django/,21,'14:30:59.000200',
django/,22,'14:30',
django/,23,'14.30.59',
django/,24,'14.30.59.000200',
django/,25,'14.30',
django/,28,'2006-10-25 14:30:59',
django/,29,'2006-10-25 14:30:59.000200',
django/,30,'2006-10-25 14:30',
django/,31,'25.10.2006 14:30:59',
django/,32,'25.10.2006 14:30:59.000200',
django/,33,'25.10.2006 14:30',
django/,34,'25.10.06 14:30:59',
django/,35,'25.10.06 14:30:59.000200',
django/,36,'25.10.06 14:30',
django/,37,'25.10.06 14.30.59',
django/,38,'25.10.06 14.30.59.000200',
django/,39,'25.10.06 14.30',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,FIRST_DAY_OF_WEEK =,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,DATE_INPUT_FORMATS =,
django/,17,TIME_INPUT_FORMATS =,
django/,18,DATETIME_INPUT_FORMATS =,
django/,21,NUMBER_GROUPING =,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Monday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,'25.10.2006',
django/,18,'25 October 2006',
django/,21,'14:30:59',
django/,22,'14:30:59.000200',
django/,23,'14:30',
django/,26,'25.10.2006 14:30:59',
django/,27,'25.10.2006 14:30:59.000200',
django/,28,'25.10.2006 14:30',
django/,29,'25 October 2006 14:30:59',
django/,30,'25 October 2006 14:30:59.000200',
django/,31,'25 October 2006 14:30',
django/,34,non-breaking space,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,5,'25 Hydref 2006',
django/,6,'2:30 y.b.',
django/,7,"'25 Hydref 2006, 2:30 y.b.'",
django/,8,'Hydref 2006',
django/,9,'25 Hydref',
django/,10,'25/10/2006',
django/,11,'25/10/2006 2:30 y.b.',
django/,12,'Dydd Llun',
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,"'25/10/2006', '25/10/06'",
django/,20,'2006-10-25 14:30:59',
django/,21,'2006-10-25 14:30:59.000200',
django/,22,'2006-10-25 14:30',
django/,23,'25/10/2006 14:30:59',
django/,24,'25/10/2006 14:30:59.000200',
django/,25,'25/10/2006 14:30',
django/,26,'25/10/06 14:30:59',
django/,27,'25/10/06 14:30:59.000200',
django/,28,'25/10/06 14:30',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,5,25 Ottobre 2006,
django/,6,14:30,
django/,7,Mercoledì 25 Ottobre 2006 14:30,
django/,8,Ottobre 2006,
django/,9,25 Ottobre,
django/,10,25/12/2009,
django/,11,25/10/2009 14:30,
django/,12,Lunedì,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,"'25/10/2006', '2008/10/25'",
django/,18,"'25-10-2006', '2008-10-25'",
django/,19,"'25-10-06', '25/10/06'",
django/,22,'25/10/2006 14:30:59',
django/,23,'25/10/2006 14:30:59.000200',
django/,24,'25/10/2006 14:30',
django/,25,'25/10/06 14:30:59',
django/,26,'25/10/06 14:30:59.000200',
django/,27,'25/10/06 14:30',
django/,28,'2006-10-25 14:30:59',
django/,29,'2006-10-25 14:30:59.000200',
django/,30,'2006-10-25 14:30',
django/,31,'25-10-2006 14:30:59',
django/,32,'25-10-2006 14:30:59.000200',
django/,33,'25-10-2006 14:30',
django/,34,'25-10-06 14:30:59',
django/,35,'25-10-06 14:30:59.000200',
django/,36,'25-10-06 14:30',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,7,DATETIME_FORMAT =,
django/,8,YEAR_MONTH_FORMAT =,
django/,11,SHORT_DATETIME_FORMAT =,
django/,12,FIRST_DAY_OF_WEEK =,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,DATE_INPUT_FORMATS =,
django/,17,TIME_INPUT_FORMATS =,
django/,18,DATETIME_INPUT_FORMATS =,
django/,19,DECIMAL_SEPARATOR =,
django/,20,THOUSAND_SEPARATOR =,
django/,21,NUMBER_GROUPING =,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,5,DATE_FORMAT =,
django/,6,TIME_FORMAT =,
django/,7,DATETIME_FORMAT =,
django/,8,YEAR_MONTH_FORMAT =,
django/,9,MONTH_DAY_FORMAT =,
django/,10,SHORT_DATE_FORMAT =,
django/,11,SHORT_DATETIME_FORMAT =,
django/,12,FIRST_DAY_OF_WEEK =,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,DATE_INPUT_FORMATS =,
django/,17,TIME_INPUT_FORMATS =,
django/,18,DATETIME_INPUT_FORMATS =,
django/,19,DECIMAL_SEPARATOR =,
django/,20,THOUSAND_SEPARATOR =,
django/,21,NUMBER_GROUPING =,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Monday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,Kept ISO formats as they are in first position,
django/,18,"'2006-10-25', '25.10.2006', '25.10.06'",
django/,21,'14:30:59',
django/,22,'14:30:59.000200',
django/,23,'14:30',
django/,24,'14.30.59',
django/,25,'14.30.59.000200',
django/,26,'14.30',
django/,29,'2006-10-25 14:30:59',
django/,30,'2006-10-25 14:30:59.000200',
django/,31,'2006-10-25 14:30',
django/,32,'25.10.2006 14:30:59',
django/,33,'25.10.2006 14:30:59.000200',
django/,34,'25.10.2006 14:30',
django/,35,'25.10.06 14:30:59',
django/,36,'25.10.06 14:30:59.000200',
django/,37,'25.10.06 14:30',
django/,38,'25.10.06 14.30.59',
django/,39,'25.10.06 14.30.59.000200',
django/,40,'25.10.06 14.30',
django/,43,Non-breaking space,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Monday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,'25.10.2006',
django/,18,"'25-Oktabr, 2006-yil'",
django/,21,'25.10.2006 14:30:59',
django/,22,'25.10.2006 14:30:59.000200',
django/,23,'25.10.2006 14:30',
django/,24,"'25-Oktabr, 2006-yil 14:30:59'",
django/,25,"'25-Oktabr, 2006-yil 14:30:59.000200'",
django/,26,"'25-Oktabr, 2006-yil 14:30'",
django/,29,non-breaking space,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,5,2016年9月5日,
django/,6,20:45,
django/,7,2016年9月5日 20:45,
django/,8,2016年9月,
django/,9,9月5日,
django/,10,2016年9月5日,
django/,11,2016年9月5日 20:45,
django/,12,星期一 (Monday),
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,'2016/09/05',
django/,18,'2016-09-05',
django/,19,'2016年9月5日',
django/,23,'20:45',
django/,24,'20:45:29',
django/,25,'20:45:29.000200',
django/,29,'2016/09/05 20:45',
django/,30,'2016-09-05 20:45',
django/,31,'2016年9月5日 14:45',
django/,32,'2016/09/05 20:45:29',
django/,33,'2016-09-05 20:45:29',
django/,34,'2016年9月5日 20:45:29',
django/,35,'2016/09/05 20:45:29.000200',
django/,36,'2016-09-05 20:45:29.000200',
django/,37,'2016年9月5日 20:45:29.000200',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Pazartesi,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,"'25/10/2006', '25/10/06'",
django/,18,'06-10-25',
django/,19,"'%d %B %Y', '%d %b. %Y',  # '25 Ekim 2006', '25 Eki. 2006'",
django/,22,'25/10/2006 14:30:59',
django/,23,'25/10/2006 14:30:59.000200',
django/,24,'25/10/2006 14:30',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,5,04 نوفمبر 2020,
django/,7,DATETIME_FORMAT =,
django/,11,SHORT_DATETIME_FORMAT =,
django/,12,Sunday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,DATE_INPUT_FORMATS =,
django/,17,TIME_INPUT_FORMATS =,
django/,18,DATETIME_INPUT_FORMATS =,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,(Monday),
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,Kept ISO formats as they are in first position,
django/,18,"'2006-10-25', '10/25/2006', '10/25/06'",
django/,19,"'25.10.2006', '25.10.06'",
django/,20,"'%d %b %Y', '%d %b, %Y', '%d %b. %Y',   # '25 Oct 2006', '25 Oct, 2006', '25 Oct. 2006'",
django/,21,"'%d %B %Y', '%d %B, %Y',                # '25 October 2006', '25 October, 2006'",
django/,24,'2006-10-25 14:30:59',
django/,25,'2006-10-25 14:30:59.000200',
django/,26,'2006-10-25 14:30',
django/,27,'25.10.2006 14:30:59',
django/,28,'25.10.2006 14:30:59.000200',
django/,29,'25.10.2006 14:30',
django/,30,'25.10.06 14:30:59',
django/,31,'25.10.06 14:30:59.000200',
django/,32,'25.10.06 14:30',
django/,33,'10/25/2006 14:30:59',
django/,34,'10/25/2006 14:30:59.000200',
django/,35,'10/25/2006 14:30',
django/,36,'10/25/06 14:30:59',
django/,37,'10/25/06 14:30:59.000200',
django/,38,'10/25/06 14:30',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Monday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,'20.3.2014',
django/,18,'20.3.14',
django/,21,'20.3.2014 14.30.59',
django/,22,'20.3.2014 14.30.59.000200',
django/,23,'20.3.2014 14.30',
django/,25,'20.3.14 14.30.59',
django/,26,'20.3.14 14.30.59.000200',
django/,27,'20.3.14 14.30',
django/,30,'14.30.59',
django/,31,'14.30.59.000200',
django/,32,'14.30',
django/,36,Non-breaking space,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Monday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,Kept ISO formats as they are in first position,
django/,18,"'2006-10-25', '25.10.2006', '25.10.06'",
django/,19,"'%d. %b %Y', '%d %b %Y',            # '25. okt 2006', '25 okt 2006'",
django/,20,"'%d. %b. %Y', '%d %b. %Y',          # '25. okt. 2006', '25 okt. 2006'",
django/,21,"'%d. %B %Y', '%d %B %Y',            # '25. oktober 2006', '25 oktober 2006'",
django/,24,'2006-10-25 14:30:59',
django/,25,'2006-10-25 14:30:59.000200',
django/,26,'2006-10-25 14:30',
django/,27,'25.10.2006 14:30:59',
django/,28,'25.10.2006 14:30:59.000200',
django/,29,'25.10.2006 14:30',
django/,30,'25.10.06 14:30:59',
django/,31,'25.10.06 14:30:59.000200',
django/,32,'25.10.06 14:30',
django/,35,non-breaking space,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,7,DATETIME_FORMAT =,
django/,8,YEAR_MONTH_FORMAT =,
django/,11,SHORT_DATETIME_FORMAT =,
django/,12,FIRST_DAY_OF_WEEK =,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,DATE_INPUT_FORMATS =,
django/,17,TIME_INPUT_FORMATS =,
django/,18,DATETIME_INPUT_FORMATS =,
django/,21,NUMBER_GROUPING =,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,10,Sunday,
django/,13,"'31/12/2009', '31/12/09'",
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Monday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,"'25.10.2006', '25.10.06'",
django/,18,"'%d. %B %Y', '%d. %b. %Y',  # '25. October 2006', '25. Oct. 2006'",
django/,21,'25.10.2006 14:30:59',
django/,22,'25.10.2006 14:30:59.000200',
django/,23,'25.10.2006 14:30',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,7,DATETIME_FORMAT =,
django/,11,SHORT_DATETIME_FORMAT =,
django/,12,FIRST_DAY_OF_WEEK =,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,DATE_INPUT_FORMATS =,
django/,17,TIME_INPUT_FORMATS =,
django/,18,DATETIME_INPUT_FORMATS =,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Monday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,Kept ISO formats as they are in first position,
django/,18,"'2006-10-25', '25.10.2006', '25.10.06'",
django/,19,"'%d. %b %Y', '%d %b %Y',            # '25. okt 2006', '25 okt 2006'",
django/,20,"'%d. %b. %Y', '%d %b. %Y',          # '25. okt. 2006', '25 okt. 2006'",
django/,21,"'%d. %B %Y', '%d %B %Y',            # '25. oktober 2006', '25 oktober 2006'",
django/,24,'2006-10-25 14:30:59',
django/,25,'2006-10-25 14:30:59.000200',
django/,26,'2006-10-25 14:30',
django/,27,'25.10.2006 14:30:59',
django/,28,'25.10.2006 14:30:59.000200',
django/,29,'25.10.2006 14:30',
django/,30,'25.10.06 14:30:59',
django/,31,'25.10.06 14:30:59.000200',
django/,32,'25.10.06 14:30',
django/,35,non-breaking space,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Monday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,'2006.10.25.',
django/,20,'14:30:59',
django/,21,'14:30',
django/,24,'2006.10.25. 14:30:59',
django/,25,'2006.10.25. 14:30:59.000200',
django/,26,'2006.10.25. 14:30',
django/,29,Non-breaking space,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,Kept ISO formats as they are in first position,
django/,18,'2006-10-25',
django/,19,"'25.10.2006.', '25.10.06.'",
django/,20,"'25. 10. 2006.', '25. 10. 06.'",
django/,23,'2006-10-25 14:30:59',
django/,24,'2006-10-25 14:30:59.000200',
django/,25,'2006-10-25 14:30',
django/,26,'25.10.2006. 14:30:59',
django/,27,'25.10.2006. 14:30:59.000200',
django/,28,'25.10.2006. 14:30',
django/,29,'25.10.06. 14:30:59',
django/,30,'25.10.06. 14:30:59.000200',
django/,31,'25.10.06. 14:30',
django/,32,'25. 10. 2006. 14:30:59',
django/,33,'25. 10. 2006. 14:30:59.000200',
django/,34,'25. 10. 2006. 14:30',
django/,35,'25. 10. 06. 14:30:59',
django/,36,'25. 10. 06. 14:30:59.000200',
django/,37,'25. 10. 06. 14:30',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Monday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,'25.10.2006',
django/,18,'25.10.06',
django/,21,'25.10.2006 14:30:59',
django/,22,'25.10.2006 14:30:59.000200',
django/,23,'25.10.2006 14:30',
django/,24,'25.10.06 14:30:59',
django/,25,'25.10.06 14:30:59.000200',
django/,26,'25.10.06 14:30',
django/,29,non-breaking space,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,7,DATETIME_FORMAT =,
django/,8,YEAR_MONTH_FORMAT =,
django/,11,SHORT_DATETIME_FORMAT =,
django/,12,FIRST_DAY_OF_WEEK =,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,DATE_INPUT_FORMATS =,
django/,17,TIME_INPUT_FORMATS =,
django/,18,DATETIME_INPUT_FORMATS =,
django/,19,DECIMAL_SEPARATOR =,
django/,20,THOUSAND_SEPARATOR =,
django/,21,NUMBER_GROUPING =,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Monday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,"'31/12/2009', '31/12/09'",
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,DATE_INPUT_FORMATS =,
django/,17,TIME_INPUT_FORMATS =,
django/,18,DATETIME_INPUT_FORMATS =,
django/,21,NUMBER_GROUPING =,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,Kept ISO formats as they are in first position,
django/,18,'2006-10-25',
django/,19,'10/25/2006',
django/,20,'10/25/06',
django/,23,'2006-10-25 14:30:59',
django/,24,'2006-10-25 14:30:59.000200',
django/,25,'2006-10-25 14:30',
django/,26,'10/25/2006 14:30:59',
django/,27,'10/25/2006 14:30:59.000200',
django/,28,'10/25/2006 14:30',
django/,29,'10/25/06 14:30:59',
django/,30,'10/25/06 14:30:59.000200',
django/,31,'10/25/06 14:30',
django/,34,non-breaking space,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,8,YEAR_MONTH_FORMAT =,
django/,12,Monday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,DATE_INPUT_FORMATS =,
django/,17,TIME_INPUT_FORMATS =,
django/,18,DATETIME_INPUT_FORMATS =,
django/,21,NUMBER_GROUPING =,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,"0: Sunday, 1: Monday",
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,'31/12/2009',
django/,18,'31/12/09',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Sunday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,Kept ISO formats as they are in first position,
django/,18,"'2006-10-25', '25/10/2006', '25/10/06'",
django/,19,"'%d de %b de %Y', '%d de %b, %Y',   # '25 de Out de 2006', '25 Out, 2006'",
django/,20,"'%d de %B de %Y', '%d de %B, %Y',   # '25 de Outubro de 2006', '25 de Outubro, 2006'",
django/,23,'2006-10-25 14:30:59',
django/,24,'2006-10-25 14:30:59.000200',
django/,25,'2006-10-25 14:30',
django/,26,'25/10/2006 14:30:59',
django/,27,'25/10/2006 14:30:59.000200',
django/,28,'25/10/2006 14:30',
django/,29,'25/10/06 14:30:59',
django/,30,'25/10/06 14:30:59.000200',
django/,31,'25/10/06 14:30',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,"'25.10.2006', '25.10.06'",
django/,18,'25-10-2006',
django/,19,"'25. 10. 2006', '25. 10. 06'",
django/,23,'25.10.2006 14:30:59',
django/,24,'25.10.2006 14:30:59.000200',
django/,25,'25.10.2006 14:30',
django/,26,'25.10.06 14:30:59',
django/,27,'25.10.06 14:30:59.000200',
django/,28,'25.10.06 14:30',
django/,29,'25-10-2006 14:30:59',
django/,30,'25-10-2006 14:30:59.000200',
django/,31,'25-10-2006 14:30',
django/,32,'25. 10. 2006 14:30:59',
django/,33,'25. 10. 2006 14:30:59.000200',
django/,34,'25. 10. 2006 14:30',
django/,35,'25. 10. 06 14:30:59',
django/,36,'25. 10. 06 14:30:59.000200',
django/,37,'25. 10. 06 14:30',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,7,DATETIME_FORMAT =,
django/,8,YEAR_MONTH_FORMAT =,
django/,9,MONTH_DAY_FORMAT =,
django/,11,SHORT_DATETIME_FORMAT =,
django/,12,FIRST_DAY_OF_WEEK =,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,DATE_INPUT_FORMATS =,
django/,17,TIME_INPUT_FORMATS =,
django/,18,DATETIME_INPUT_FORMATS =,
django/,19,DECIMAL_SEPARATOR =,
django/,20,THOUSAND_SEPARATOR =,
django/,21,NUMBER_GROUPING =,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,"'25.10.2006.', '25.10.06.'",
django/,18,"'25. 10. 2006.', '25. 10. 06.'",
django/,19,"'%d. %b %y.', '%d. %B %y.',     # '25. Oct 06.', '25. October 06.'",
django/,20,"'%d. %b \'%y.', '%d. %B \'%y.', # '25. Oct '06.', '25. October '06.'",
django/,21,"'%d. %b %Y.', '%d. %B %Y.',     # '25. Oct 2006.', '25. October 2006.'",
django/,24,'25.10.2006. 14:30:59',
django/,25,'25.10.2006. 14:30:59.000200',
django/,26,'25.10.2006. 14:30',
django/,27,'25.10.06. 14:30:59',
django/,28,'25.10.06. 14:30:59.000200',
django/,29,'25.10.06. 14:30',
django/,30,'25. 10. 2006. 14:30:59',
django/,31,'25. 10. 2006. 14:30:59.000200',
django/,32,'25. 10. 2006. 14:30',
django/,33,'25. 10. 06. 14:30:59',
django/,34,'25. 10. 06. 14:30:59.000200',
django/,35,'25. 10. 06. 14:30',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Sunday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,Kept ISO formats as they are in first position,
django/,18,"'2006-10-25', '10/25/2006', '10/25/06'",
django/,19,"'%b %d %Y', '%b %d, %Y',            # 'Oct 25 2006', 'Oct 25, 2006'",
django/,20,"'%d %b %Y', '%d %b, %Y',            # '25 Oct 2006', '25 Oct, 2006'",
django/,21,"'%B %d %Y', '%B %d, %Y',            # 'October 25 2006', 'October 25, 2006'",
django/,22,"'%d %B %Y', '%d %B, %Y',            # '25 October 2006', '25 October, 2006'",
django/,25,'2006-10-25 14:30:59',
django/,26,'2006-10-25 14:30:59.000200',
django/,27,'2006-10-25 14:30',
django/,28,'10/25/2006 14:30:59',
django/,29,'10/25/2006 14:30:59.000200',
django/,30,'10/25/2006 14:30',
django/,31,'10/25/06 14:30:59',
django/,32,'10/25/06 14:30:59.000200',
django/,33,'10/25/06 14:30',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Monday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,"'25-10-2009', 25/10/2009'",
django/,18,"'25-10-09', 25/10/09'",
django/,19,"'25 Oct 2006',",
django/,20,'25 October 2006',
django/,21,"'10/25/06', '10/25/2009'",
django/,25,'14.30.59',
django/,26,'14.30',
django/,30,'25-10-2009 14.30.59',
django/,31,'25-10-2009 14.30.59.000200',
django/,32,'25-10-2009 14.30',
django/,33,'25-10-09' 14.30.59',
django/,34,'25-10-09' 14.30.59.000200',
django/,35,'25-10-09' 14.30',
django/,36,'10/25/06 14.30.59',
django/,37,'10/25/06 14.30.59.000200',
django/,38,'10/25/06 14.30',
django/,39,'25/10/2009 14.30.59',
django/,40,'25/10/2009 14.30.59.000200',
django/,41,'25/10/2009 14.30',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,7,DATETIME_FORMAT =,
django/,8,YEAR_MONTH_FORMAT =,
django/,11,SHORT_DATETIME_FORMAT =,
django/,12,FIRST_DAY_OF_WEEK =,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,DATE_INPUT_FORMATS =,
django/,17,TIME_INPUT_FORMATS =,
django/,18,DATETIME_INPUT_FORMATS =,
django/,20,Non-breaking space,
django/,21,NUMBER_GROUPING =,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,5,'25 Oct 2006',
django/,6,'2:30 p.m.',
django/,7,"'25 Oct 2006, 2:30 p.m.'",
django/,8,'October 2006',
django/,9,'25 October',
django/,10,'25/10/2006',
django/,11,'25/10/2006 2:30 p.m.',
django/,12,Sunday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,"'25/10/2006', '25/10/06'",
django/,18,"'%b %d %Y', '%b %d, %Y',          # 'Oct 25 2006', 'Oct 25, 2006'",
django/,19,"'%d %b %Y', '%d %b, %Y',          # '25 Oct 2006', '25 Oct, 2006'",
django/,20,"'%B %d %Y', '%B %d, %Y',          # 'October 25 2006', 'October 25, 2006'",
django/,21,"'%d %B %Y', '%d %B, %Y',          # '25 October 2006', '25 October, 2006'",
django/,24,'2006-10-25 14:30:59',
django/,25,'2006-10-25 14:30:59.000200',
django/,26,'2006-10-25 14:30',
django/,27,'25/10/2006 14:30:59',
django/,28,'25/10/2006 14:30:59.000200',
django/,29,'25/10/2006 14:30',
django/,30,'25/10/06 14:30:59',
django/,31,'25/10/06 14:30:59.000200',
django/,32,'25/10/06 14:30',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Monday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,DATE_INPUT_FORMATS =,
django/,17,TIME_INPUT_FORMATS =,
django/,18,DATETIME_INPUT_FORMATS =,
django/,21,NUMBER_GROUPING =,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Monday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,"'31/12/2009', '31/12/09'",
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Sunday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,25/10/2006,
django/,18,25 ต.ค. 2006,
django/,19,25 ตุลาคม 2006,
django/,22,14:30:59,
django/,23,14:30:59.000200,
django/,24,14:30,
django/,27,25/10/2006 14:30:59,
django/,28,25/10/2006 14:30:59.000200,
django/,29,25/10/2006 14:30,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Sunday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,Kept ISO formats as they are in first position,
django/,18,"'2006-10-25', '10/25/2006', '10/25/06'",
django/,19,"'%b %d %Y', '%b %d, %Y',            # 'Oct 25 2006', 'Oct 25, 2006'",
django/,20,"'%d %b %Y', '%d %b, %Y',            # '25 Oct 2006', '25 Oct, 2006'",
django/,21,"'%B %d %Y', '%B %d, %Y',            # 'October 25 2006', 'October 25, 2006'",
django/,22,"'%d %B %Y', '%d %B, %Y',            # '25 October 2006', '25 October, 2006'",
django/,25,'2006-10-25 14:30:59',
django/,26,'2006-10-25 14:30:59.000200',
django/,27,'2006-10-25 14:30',
django/,28,'10/25/2006 14:30:59',
django/,29,'10/25/2006 14:30:59.000200',
django/,30,'10/25/2006 14:30',
django/,31,'10/25/06 14:30:59',
django/,32,'10/25/06 14:30:59.000200',
django/,33,'10/25/06 14:30',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Monday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,"'25/10/2006', '25/10/06'",
django/,18,"Swiss [fr_CH), '25.10.2006', '25.10.06'",
django/,19,"'%d %B %Y', '%d %b %Y', # '25 octobre 2006', '25 oct. 2006'",
django/,22,'25/10/2006 14:30:59',
django/,23,'25/10/2006 14:30:59.000200',
django/,24,'25/10/2006 14:30',
django/,25,"Swiss [fr_CH), '25.10.2006 14:30:59'",
django/,26,"Swiss (fr_CH), '25.10.2006 14:30:59.000200'",
django/,27,"Swiss (fr_CH), '25.10.2006 14:30'",
django/,30,non-breaking space,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Sunday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,"'25/10/2006', '25/10/06', '2006-10-25',",
django/,20,'25/10/2006 14:30:59',
django/,21,'25/10/2006 14:30:59.000200',
django/,22,'25/10/2006 14:30',
django/,23,'25/10/06 14:30:59',
django/,24,'25/10/06 14:30:59.000200',
django/,25,'25/10/06 14:30',
django/,26,'2006-10-25 14:30:59',
django/,27,'2006-10-25 14:30:59.000200',
django/,28,'2006-10-25 14:30',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,FIRST_DAY_OF_WEEK =,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,DATE_INPUT_FORMATS =,
django/,17,TIME_INPUT_FORMATS =,
django/,18,DATETIME_INPUT_FORMATS =,
django/,21,NUMBER_GROUPING =,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,FIRST_DAY_OF_WEEK =,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,Kept ISO formats as they are in first position,
django/,18,"'2006-10-25', '10/25/2006', '10/25/06'",
django/,19,"'%b %d %Y', '%b %d, %Y',            # 'Oct 25 2006', 'Oct 25, 2006'",
django/,20,"'%d %b %Y', '%d %b, %Y',            # '25 Oct 2006', '25 Oct, 2006'",
django/,21,"'%B %d %Y', '%B %d, %Y',            # 'October 25 2006', 'October 25, 2006'",
django/,22,"'%d %B %Y', '%d %B, %Y',            # '25 October 2006', '25 October, 2006'",
django/,23,"'2006년 10월 25일', with localized suffix.",
django/,26,'14:30:59',
django/,27,'14:30:59.000200',
django/,28,'14:30',
django/,29,'14시 30분 59초',
django/,30,'14시 30분',
django/,33,'2006-10-25 14:30:59',
django/,34,'2006-10-25 14:30:59.000200',
django/,35,'2006-10-25 14:30',
django/,36,'10/25/2006 14:30:59',
django/,37,'10/25/2006 14:30:59.000200',
django/,38,'10/25/2006 14:30',
django/,39,'10/25/06 14:30:59',
django/,40,'10/25/06 14:30:59.000200',
django/,41,'10/25/06 14:30',
django/,43,'2006년 10월 25일 14시 30분 59초',
django/,44,'2006년 10월 25일 14시 30분',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,7,DATETIME_FORMAT =,
django/,8,YEAR_MONTH_FORMAT =,
django/,11,SHORT_DATETIME_FORMAT =,
django/,12,FIRST_DAY_OF_WEEK =,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,DATE_INPUT_FORMATS =,
django/,17,TIME_INPUT_FORMATS =,
django/,18,DATETIME_INPUT_FORMATS =,
django/,21,NUMBER_GROUPING =,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,FIRST_DAY_OF_WEEK =,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,DATE_INPUT_FORMATS =,
django/,17,TIME_INPUT_FORMATS =,
django/,18,DATETIME_INPUT_FORMATS =,
django/,21,NUMBER_GROUPING =,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,12,Astelehena,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,16,DATE_INPUT_FORMATS =,
django/,17,TIME_INPUT_FORMATS =,
django/,18,DATETIME_INPUT_FORMATS =,
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,5,'20 januari 2009',
django/,6,'15:23',
django/,7,'20 januari 2009 15:23',
django/,8,'januari 2009',
django/,9,'20 januari',
django/,10,'20-1-2009',
django/,11,'20-1-2009 15:23',
django/,12,Monday (in Dutch 'maandag'),
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,"'20-01-2009', '20-01-09'",
django/,18,"'20/01/2009', '20/01/09'",
django/,19,'2009/01/20',
django/,20,"'%d %b %Y', '%d %b %y',           # '20 jan 2009', '20 jan 09'",
django/,21,"'%d %B %Y', '%d %B %y',           # '20 januari 2009', '20 januari 09'",
django/,23,Kept ISO formats as one is in first position,
django/,25,'15:23:35',
django/,26,'15:23:35.000200',
django/,27,'15.23:35',
django/,28,'15.23:35.000200',
django/,29,'15.23',
django/,30,'15:23',
django/,33,With time in %H:%M:%S :,
django/,35,"'20-01-2009 15:23:35', '20-01-09 15:23:35', '2009-01-20 15:23:35'",
django/,37,"'20/01/2009 15:23:35', '20/01/09 15:23:35', '2009/01/20 15:23:35'",
django/,38,"'%d %b %Y %H:%M:%S', '%d %b %y %H:%M:%S',   # '20 jan 2009 15:23:35', '20 jan 09 15:23:35'",
django/,39,"'%d %B %Y %H:%M:%S', '%d %B %y %H:%M:%S',   # '20 januari 2009 15:23:35', '20 januari 2009 15:23:35'",
django/,40,With time in %H:%M:%S.%f :,
django/,42,"'20-01-2009 15:23:35.000200', '20-01-09 15:23:35.000200', '2009-01-20 15:23:35.000200'",
django/,44,"'20/01/2009 15:23:35.000200', '20/01/09 15:23:35.000200', '2009/01/20 15:23:35.000200'",
django/,45,With time in %H.%M:%S :,
django/,46,"'20-01-2009 15.23:35', '20-01-09 15.23:35'",
django/,47,"'20/01/2009 15.23:35', '20/01/09 15.23:35'",
django/,48,"'%d %b %Y %H.%M:%S', '%d %b %y %H.%M:%S',   # '20 jan 2009 15.23:35', '20 jan 09 15.23:35'",
django/,49,"'%d %B %Y %H.%M:%S', '%d %B %y %H.%M:%S',   # '20 januari 2009 15.23:35', '20 januari 2009 15.23:35'",
django/,50,With time in %H.%M:%S.%f :,
django/,51,"'20-01-2009 15.23:35.000200', '20-01-09 15.23:35.000200'",
django/,52,"'20/01/2009 15.23:35.000200', '20/01/09 15.23:35.000200'",
django/,53,With time in %H:%M :,
django/,54,"'20-01-2009 15:23', '20-01-09 15:23', '2009-01-20 15:23'",
django/,55,"'20/01/2009 15:23', '20/01/09 15:23', '2009/01/20 15:23'",
django/,56,"'%d %b %Y %H:%M', '%d %b %y %H:%M',         # '20 jan 2009 15:23', '20 jan 09 15:23'",
django/,57,"'%d %B %Y %H:%M', '%d %B %y %H:%M',         # '20 januari 2009 15:23', '20 januari 2009 15:23'",
django/,58,With time in %H.%M :,
django/,59,"'20-01-2009 15.23', '20-01-09 15.23'",
django/,60,"'20/01/2009 15.23', '20/01/09 15.23'",
django/,61,"'%d %b %Y %H.%M', '%d %b %y %H.%M',         # '20 jan 2009 15.23', '20 jan 09 15.23'",
django/,62,"'%d %B %Y %H.%M', '%d %B %y %H.%M',         # '20 januari 2009 15.23', '20 januari 2009 15.23'",
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,10,Monday: ISO 8601,
django/,12,"'25/10/2006', '25/10/06'",
django/,13,'20061025',
django/,1,This file is distributed under the same license as the Django package.,
django/,2,,
django/,3,"The *_FORMAT strings use the Django date format syntax,",
django/,4,see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date,
django/,7,DATETIME_FORMAT =,
django/,11,SHORT_DATETIME_FORMAT =,
django/,12,Saturday,
django/,14,"The *_INPUT_FORMATS strings use the Python strftime format syntax,",
django/,15,see https://docs.python.org/library/datetime.html#strftime-strptime-behavior,
django/,17,25/10/2016,
django/,18,25/10/16,
django/,19,25-10-2016,
django/,20,25-10-16,
django/,23,14:30:59,
django/,24,14:30,
django/,27,25/10/2006 14:30:59,
django/,28,25/10/2006 14:30,
django/,32,NUMBER_GROUPING =,
django/,24,No-op if not in debug mode or a non-local prefix.,
django/,11,HACK: datetime instances cannot be assigned new attributes. Define a subclass,
django/,12,in order to define new attributes in do_timezone().,
django/,17,Template filters,
django/,49,Obtain a timezone-aware datetime,
django/,54,"Filters must never raise exceptions, and pytz' exceptions inherit",
django/,55,"Exception directly, not a specific subclass. So catch everything.",
django/,59,Obtain a tzinfo instance,
django/,72,HACK: the convert_to_local_time flag will prevent,
django/,73,automatic conversion of the value to local time.,
django/,81,Template tags,
django/,185,token.split_contents() isn't useful here because this tag doesn't accept variable as arguments,
django/,90,fragment_name can't be a variable.,
django/,37,``language`` is either a language code string or a sequence,
django/,38,with the language code as its first item,
django/,86,Restore percent signs. Percent signs in template text are doubled,
django/,87,so they are not interpreted as string format flags.,
django/,132,"Update() works like a push(), so corresponding context.pop() is at",
django/,133,the end of function,
django/,166,"Either string is malformed, or it's a bug",
django/,205,token.split_contents() isn't useful here because this tag doesn't accept variable as arguments,
django/,291,token.split_contents() isn't useful here because this tag doesn't accept variable as arguments,
django/,311,token.split_contents() isn't useful here because this tag doesn't accept variable as arguments,
django/,28,token.split_contents() isn't useful here because tags using this method don't accept variable as arguments,
django/,15,Callable returning a namespace hint.,
django/,30,No namespace hint - use manually provided namespace.,
django/,45,"Make sure the patterns can be iterated through (without this, some",
django/,46,testcases will break).,
django/,59,For include(...) processing.,
django/,13,SCRIPT_NAME prefixes for each thread are stored here. If there's no entry for,
django/,14,"the current thread (which is the only one we ever access), it is assumed to",
django/,15,be empty.,
django/,18,Overridden URLconfs for each thread are stored here.,
django/,53,Lookup the name to see if it could be an app identifier.,
django/,56,Yes! Path part matches an app in the current Resolver.,
django/,58,"If we are reversing for a particular app, use that",
django/,59,namespace.,
django/,62,"The name isn't shared by one of the instances (i.e.,",
django/,63,the default) so pick the first instance as the default.,
django/,24,No '.' in lookup_view,
django/,56,Convert 'django.views.news.stories.story_detail' to,
django/,57,"['django.views.news.stories', 'story_detail']",
django/,40,"If a URLRegexResolver doesn't have a namespace or app_name, it passes",
django/,41,in an empty value.,
django/,48,A class-based view,
django/,51,A function-based view,
django/,80,Build a namespaced resolver for the given parent URLconf pattern.,
django/,81,This makes it possible to have captured parameters in the parent,
django/,82,URLconf pattern.,
django/,99,"As a performance optimization, if the given regex string is a regular",
django/,100,"string (not a lazily-translated string proxy), compile it once and",
django/,101,avoid per-language compilation.,
django/,128,Skip check as it can be useful to start a URL pattern with a slash,
django/,129,when APPEND_SLASH=False.,
django/,158,"If there are any named groups, use those as kwargs, ignoring",
django/,159,"non-named groups. Otherwise, pass all non-named arguments as",
django/,160,positional arguments.,
django/,231,"If a converter isn't specified, the default is `str`.",
django/,260,RoutePattern doesn't allow non-named groups so args are ignored.,
django/,297,This is only used by reverse() and cached in _reverse_dict.,
django/,327,the view,
django/,357,Pass any extra_kwargs as **kwargs.,
django/,378,urlconf_name is the dotted Python path to the module defining,
django/,379,urlpatterns. It may also be an object with an urlpatterns attribute,
django/,380,or urlpatterns itself.,
django/,389,set of dotted paths to all functions and classes that are used in,
django/,390,urlpatterns,
django/,397,"Don't bother to output the whole list, it can be huge",
django/,415,"All handlers take (request, exception) arguments except handler500",
django/,416,which takes (request).,
django/,444,Short-circuit if called recursively in this thread to prevent,
django/,445,infinite recursion. Concurrent threads may call this at the same,
django/,446,"time and will need to continue, so set 'populating' on a",
django/,447,thread-local variable.,
django/,472,url_pattern is a URLResolver.,
django/,540,path may be a reverse_lazy object,
django/,556,Merge captured arguments in match with submatch,
django/,558,Update the sub_match_dict with the kwargs from the sub_match.,
django/,560,"If there are *any* named groups, ignore all non-named groups.",
django/,561,"Otherwise, pass all non-named arguments as positional arguments.",
django/,588,"urlconf_module might be a valid set of patterns, so we default to it",
django/,604,"No handler specified in file; use lazy import, since",
django/,605,django.conf.urls imports this file.,
django/,634,Convert the candidate subs to text using Converter.to_url().,
django/,648,"WSGI provides decoded URLs, without %xx escapes, and the URL",
django/,649,resolver operates on such URLs. First substitute arguments,
django/,650,without quoting to build a decoded URL and look for a match.,
django/,651,"Then, if we have a match, redo the substitution with quoted",
django/,652,arguments in order to return a properly encoded URL.,
django/,655,safe characters from `pchar` definition of RFC 3986,
django/,657,Don't allow construction of scheme relative urls.,
django/,659,"lookup_view can be URL name or callable, but callables are not",
django/,660,friendly in error messages.,
django/tests/test_sqlite.py,1,This is an example test settings file for use with the Django test suite.,
django/tests/test_sqlite.py,2,,
django/tests/test_sqlite.py,3,The 'sqlite3' backend requires only the ENGINE setting (an in-,
django/tests/test_sqlite.py,4,memory database will be used). All other backends will require a,
django/tests/test_sqlite.py,5,NAME and potentially authentication information. See the,
django/tests/test_sqlite.py,6,following section in the docs for more information:,
django/tests/test_sqlite.py,7,,
django/tests/test_sqlite.py,8,https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/,
django/tests/test_sqlite.py,9,,
django/tests/test_sqlite.py,10,The different databases that Django supports behave differently in certain,
django/tests/test_sqlite.py,11,"situations, so it is recommended to run the test suite against as many",
django/tests/test_sqlite.py,12,database backends as possible.  You may want to create a separate settings,
django/tests/test_sqlite.py,13,file for each of the backends you test against.,
django/tests/test_sqlite.py,26,Use a fast hasher to speed up tests.,
django/tests/runtests.py,1,!/usr/bin/env python,
django/tests/runtests.py,36,Ignore informational warnings from QuerySet.explain().,
django/tests/runtests.py,39,Make deprecation warnings errors to ensure no usage of deprecated features.,
django/tests/runtests.py,41,Make resource and runtime warning errors to ensure no usage of error prone,
django/tests/runtests.py,42,patterns.,
django/tests/runtests.py,45,Ignore known warnings in test dependencies.,
django/tests/runtests.py,52,Create a specific subdirectory for the duration of the test suite.,
django/tests/runtests.py,54,Set the TMPDIR environment variable in addition to tempfile.tempdir,
django/tests/runtests.py,55,so that children processes inherit it.,
django/tests/runtests.py,58,Removing the temporary TMPDIR.,
django/tests/runtests.py,86,Need to add the associated contrib app to INSTALLED_APPS in some cases to,
django/tests/runtests.py,87,"avoid ""RuntimeError: Model class X doesn't declare an explicit app_label",
django/tests/runtests.py,88,"and isn't in an application in INSTALLED_APPS.""",
django/tests/runtests.py,99,GIS tests are in nested apps,
django/tests/runtests.py,119,Reduce the given test labels to just the app module path.,
django/tests/runtests.py,132,Force declaring available_apps in TransactionTestCase for faster tests.,
django/tests/runtests.py,149,Redirect some settings for the duration of these tests.,
django/tests/runtests.py,171,This lets us skip creating migrations for the test models as many of,
django/tests/runtests.py,172,them depend on one of the following contrib applications.,
django/tests/runtests.py,178,Filter out non-error logging so we don't have to capture it in lots of,
django/tests/runtests.py,179,tests.,
django/tests/runtests.py,183,ForeignKey(unique=True) -> OneToOneField,
django/tests/runtests.py,186,Load all the ALWAYS_INSTALLED_APPS.,
django/tests/runtests.py,189,It would be nice to put this validation earlier but it must come after,
django/tests/runtests.py,190,django.setup() so that connection.features.gis_enabled can be accessed,
django/tests/runtests.py,191,without raising AppRegistryNotReady when running gis_tests in isolation,
django/tests/runtests.py,192,on some backends (e.g. PostGIS).,
django/tests/runtests.py,198,Exact or ancestor match.,
django/tests/runtests.py,201,Load all the test model apps.,
django/tests/runtests.py,219,"if the module (or an ancestor) was named on the command line, or",
django/tests/runtests.py,220,"no modules were named (i.e., run all), import",
django/tests/runtests.py,221,this module and add it to INSTALLED_APPS.,
django/tests/runtests.py,234,Add contrib.gis to INSTALLED_APPS if needed (rather than requiring,
django/tests/runtests.py,235,@override_settings(INSTALLED_APPS=...) on all test cases.,
django/tests/runtests.py,248,Restore the old settings.,
django/tests/runtests.py,251,Discard the multiprocessing.util finalizer that tries to remove a,
django/tests/runtests.py,252,temporary directory that's already removed by this script's,
django/tests/runtests.py,253,"atexit.register(shutil.rmtree, TMPDIR) handler. Prevents",
django/tests/runtests.py,254,FileNotFoundError at the end of a test run (#27890).,
django/tests/runtests.py,261,This doesn't work before django.setup() on some databases.,
django/tests/runtests.py,290,"Run the test suite, including the extra validation tests.",
django/tests/runtests.py,341,Make sure the bisection point isn't in the test list,
django/tests/runtests.py,342,Also remove tests that need to be run in specific combinations,
django/tests/runtests.py,392,Make sure the constant member of the pair isn't in the test list,
django/tests/runtests.py,393,Also remove tests that need to be run in specific combinations,
django/tests/runtests.py,524,Allow including a trailing slash on app_labels for tab completion convenience,
django/tests/annotations/tests.py,306,annotate references a field in values(),
django/tests/annotations/tests.py,311,filter refs the annotated value,
django/tests/annotations/tests.py,315,can annotate an existing values with a new field,
django/tests/annotations/tests.py,321,annotate references a field in values() with pk,
django/tests/annotations/tests.py,485,and we respect deferred columns!,
django/tests/annotations/tests.py,541,LOWER function supported by:,
django/tests/annotations/tests.py,542,"oracle, postgres, mysql, sqlite, sqlserver",
django/tests/annotations/tests.py,571,group by option => sum of value * multiplier,
django/tests/annotations/models.py,55,"The order of these fields matter, do not change. Certain backends",
django/tests/annotations/models.py,56,"rely on field ordering to perform database conversions, and this",
django/tests/annotations/models.py,57,model helps to test that.,
django/tests/basic/tests.py,31,Save it into the database. You have to call save() explicitly.,
django/tests/basic/tests.py,65,"You can also mix and match position and keyword arguments, but",
django/tests/basic/tests.py,66,be sure not to duplicate field information.,
django/tests/basic/tests.py,132,You can use 'in' to test for membership...,
django/tests/basic/tests.py,134,... but there will often be more efficient ways if that is all you need:,
django/tests/basic/tests.py,138,An UPDATE attempt is skipped when a primary key has default.,
django/tests/basic/tests.py,143,An UPDATE attempt is skipped when an inherited primary key has,
django/tests/basic/tests.py,144,default.,
django/tests/basic/tests.py,190,You can manually specify the primary key when creating a new object.,
django/tests/basic/tests.py,201,You can create saved objects in a single step,
django/tests/basic/tests.py,209,Edge-case test: A year lookup should retrieve all objects in,
django/tests/basic/tests.py,210,"the given year, including Jan. 1 and Dec. 31.",
django/tests/basic/tests.py,225,"Unicode data works, too.",
django/tests/basic/tests.py,234,"Model instances have a hash function, so they can be used in sets",
django/tests/basic/tests.py,235,or as dictionary keys. Two models compare as equal if their primary,
django/tests/basic/tests.py,236,keys are equal.,
django/tests/basic/tests.py,254,The 'select' argument to extra() supports names with dashes in,
django/tests/basic/tests.py,255,"them, as long as you use values().",
django/tests/basic/tests.py,270,If you use 'select' with extra() and names containing dashes on a,
django/tests/basic/tests.py,271,"query that's *not* a values() query, those extra 'select' values",
django/tests/basic/tests.py,272,will silently be ignored.,
django/tests/basic/tests.py,292,test that assign + save works with Promise objects,
django/tests/basic/tests.py,296,test .update(),
django/tests/basic/tests.py,300,still test bulk_create(),
django/tests/basic/tests.py,314,test for #15959,
django/tests/basic/tests.py,322,A hacky test for custom QuerySet subclass - refs #17271,
django/tests/basic/tests.py,338,Tests for ticket #17712,
django/tests/basic/tests.py,348,Tests for #19426,
django/tests/basic/tests.py,368,Value based on PK,
django/tests/basic/tests.py,372,No PK value -> unhashable (because save() would then change,
django/tests/basic/tests.py,373,hash),
django/tests/basic/tests.py,394,Accessing a field after it's deleted from a model reloads its value.,
django/tests/basic/tests.py,403,Fields that weren't deleted aren't reloaded.,
django/tests/basic/tests.py,430,Create an Article.,
django/tests/basic/tests.py,436,Save it into the database. You have to call save() explicitly.,
django/tests/basic/tests.py,440,"Change values by changing the attributes, then calling save().",
django/tests/basic/tests.py,444,Article.objects.all() returns all the articles in the database.,
django/tests/basic/tests.py,448,Django provides a rich database lookup API.,
django/tests/basic/tests.py,457,"The ""__exact"" lookup type can be omitted, as a shortcut.",
django/tests/basic/tests.py,484,Django raises an Article.DoesNotExist exception for get() if the,
django/tests/basic/tests.py,485,parameters don't match any object.,
django/tests/basic/tests.py,488,To avoid dict-ordering related errors check only one lookup,
django/tests/basic/tests.py,489,in single assert.,
django/tests/basic/tests.py,496,"Lookup by a primary key is the most common case, so Django",
django/tests/basic/tests.py,497,provides a shortcut for primary-key exact lookups.,
django/tests/basic/tests.py,498,The following is identical to articles.get(id=a.id).,
django/tests/basic/tests.py,501,pk can be used as a shortcut for the primary key name in any query.,
django/tests/basic/tests.py,504,Model instances of the same type and same ID are considered equal.,
django/tests/basic/tests.py,510,Create a very similar object,
django/tests/basic/tests.py,520,Django raises an Article.MultipleObjectsReturned exception if the,
django/tests/basic/tests.py,521,lookup matches more than one object,
django/tests/basic/tests.py,546,Do not delete a directly - doing so alters its state.,
django/tests/basic/tests.py,641,"Change the manager to not return ""row matched"" for update().",
django/tests/basic/tests.py,642,We are going to change the Article's _base_manager class,
django/tests/basic/tests.py,643,"dynamically. This is a bit of a hack, but it seems hard to",
django/tests/basic/tests.py,644,"test this properly otherwise. Article's manager, because",
django/tests/basic/tests.py,645,proxy models use their parent model's _base_manager.,
django/tests/basic/tests.py,650,Make sure the _update method below is in fact called.,
django/tests/basic/tests.py,664,"This is not wanted behavior, but this is how Django has always",
django/tests/basic/tests.py,665,behaved for databases that do not return correct information,
django/tests/basic/tests.py,666,about matched rows for UPDATE.,
django/tests/basic/tests.py,723,The old related instance was thrown away (the selfref_id has,
django/tests/basic/tests.py,724,"changed). It needs to be reloaded on access, so one query",
django/tests/basic/tests.py,725,executed.,
django/tests/basic/tests.py,787,refresh_from_db() without fields=[...],
django/tests/basic/tests.py,792,Relation is cleared and prefetch cache is stale.,
django/tests/basic/tests.py,795,Cache was cleared and new results are available.,
django/tests/basic/tests.py,797,refresh_from_db() with fields=[...],
django/tests/basic/tests.py,802,Relation is added and prefetch cache is stale.,
django/tests/basic/tests.py,805,Cache was cleared and new results are available.,
django/tests/basic/models.py,42,This method intentionally doesn't work for all cases - part,
django/tests/basic/models.py,43,of the test for ticket #20278,
django/tests/save_delete_hooks/models.py,23,"Call the ""real"" save() method",
django/tests/save_delete_hooks/models.py,29,"Call the ""real"" delete() method",
django/tests/import_error_package/__init__.py,1,A package that raises an ImportError that can be shared among test apps and,
django/tests/import_error_package/__init__.py,2,excluded from test discovery.,
django/tests/validators/tests.py,22,noqa,
django/tests/validators/tests.py,32,"(validator, value, expected),",
django/tests/validators/tests.py,80,Quoted-string format (CR not allowed),
django/tests/validators/tests.py,84,Max length of domain name labels is 63 characters per RFC 1034.,
django/tests/validators/tests.py,87,Trailing newlines in username or domain not allowed,
django/tests/validators/tests.py,138,"validate_ipv6_address uses django.utils.ipv6, which",
django/tests/validators/tests.py,139,is tested in much greater detail in its own testcase,
django/tests/validators/tests.py,206,limit_value may be a callable.,
django/tests/validators/tests.py,225,Trailing newlines not accepted,
django/tests/validators/tests.py,228,Trailing junk does not take forever to reject,
django/tests/validators/tests.py,278,'Enter a number.' errors,
django/tests/validators/tests.py,303,Add valid and invalid URL tests.,
django/tests/validators/tests.py,304,This only tests the validator without extended schemes.,
django/tests/migrations2/models.py,1,Required for migration detection (#22645),
django/tests/admin_filters/tests.py,97,"Ends with '__in""",
django/tests/admin_filters/tests.py,102,"Ends with '__isnull""",
django/tests/admin_filters/tests.py,111,Intentionally not a string (Refs #19318),
django/tests/admin_filters/tests.py,276,Users,
django/tests/admin_filters/tests.py,281,Books,
django/tests/admin_filters/tests.py,304,Departments,
django/tests/admin_filters/tests.py,308,Employees,
django/tests/admin_filters/tests.py,343,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,347,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,367,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,370,In case one week ago is in the same month.,
django/tests/admin_filters/tests.py,375,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,395,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,398,In case one week ago is in the same year.,
django/tests/admin_filters/tests.py,403,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,423,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,427,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,440,Null/not null queries,
django/tests/admin_filters/tests.py,445,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,450,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,461,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,466,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,480,Regression for #17830,
django/tests/admin_filters/tests.py,490,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,494,Make sure the last choice is None and is selected,
django/tests/admin_filters/tests.py,505,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,513,Make sure that correct filters are returned with custom querysets,
django/tests/admin_filters/tests.py,521,"Should have 'All', 1999 and 2009 options i.e. the subset of years of",
django/tests/admin_filters/tests.py,522,books written by alfred (which is the filtering criteria set by,
django/tests/admin_filters/tests.py,523,BookAdminWithCustomQueryset.get_queryset()),
django/tests/admin_filters/tests.py,536,Make sure that all users are present in the author's list filter,
django/tests/admin_filters/tests.py,545,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,549,Make sure the last choice is None and is selected,
django/tests/admin_filters/tests.py,560,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,563,"order of choices depends on User model, which has no order",
django/tests/admin_filters/tests.py,628,Make sure that all users are present in the contrib's list filter,
django/tests/admin_filters/tests.py,637,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,641,Make sure the last choice is None and is selected,
django/tests/admin_filters/tests.py,652,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,662,FK relationship -----,
django/tests/admin_filters/tests.py,667,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,671,Make sure the last choice is None and is selected,
django/tests/admin_filters/tests.py,682,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,689,M2M relationship -----,
django/tests/admin_filters/tests.py,694,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,698,Make sure the last choice is None and is selected,
django/tests/admin_filters/tests.py,709,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,716,"With one book, the list filter should appear because there is also a",
django/tests/admin_filters/tests.py,717,(None) option.,
django/tests/admin_filters/tests.py,721,"With no books remaining, no list filters should appear.",
django/tests/admin_filters/tests.py,750,Make sure that only actual authors are present in author's list filter,
django/tests/admin_filters/tests.py,855,Only actual departments should be present in employee__department's,
django/tests/admin_filters/tests.py,856,list filter.,
django/tests/admin_filters/tests.py,871,Make sure that only actual contributors are present in contrib's list filter,
django/tests/admin_filters/tests.py,912,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,916,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,927,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,931,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,942,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,946,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,964,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,968,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,979,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,983,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,994,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,998,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,1019,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,1034,Make sure that the first option is 'All' ---------------------------,
django/tests/admin_filters/tests.py,1039,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,1043,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,1051,Look for books in the 1980s ----------------------------------------,
django/tests/admin_filters/tests.py,1056,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,1060,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,1068,Look for books in the 1990s ----------------------------------------,
django/tests/admin_filters/tests.py,1073,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,1077,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,1085,Look for books in the 2000s ----------------------------------------,
django/tests/admin_filters/tests.py,1090,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,1094,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,1102,Combine multiple filters -------------------------------------------,
django/tests/admin_filters/tests.py,1107,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,1111,Make sure the correct choices are selected,
django/tests/admin_filters/tests.py,1205,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,1220,When it ends with '__in' -----------------------------------------,
django/tests/admin_filters/tests.py,1226,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,1230,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,1238,When it ends with '__isnull' ---------------------------------------,
django/tests/admin_filters/tests.py,1244,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,1248,Make sure the correct choice is selected,
django/tests/admin_filters/tests.py,1308,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,1328,Filter by Department=='Development' --------------------------------,
django/tests/admin_filters/tests.py,1334,Make sure the correct queryset is returned,
django/tests/admin_filters/tests.py,1398,Allows nulls and empty strings.,
django/tests/admin_filters/tests.py,1409,Allows nulls.,
django/tests/admin_filters/tests.py,1416,Allows empty strings.,
django/tests/admin_filters/models.py,34,This field name is intentionally 2 characters long (#16080).,
django/tests/sessions_tests/tests.py,42,This does not inherit from TestCase to avoid any tests being run with this,
django/tests/sessions_tests/tests.py,43,"class, which wouldn't work, and to allow different TestCase subclasses to",
django/tests/sessions_tests/tests.py,44,be used.,
django/tests/sessions_tests/tests.py,46,subclasses must specify,
django/tests/sessions_tests/tests.py,52,NB: be careful to delete any sessions created; stale sessions fill up,
django/tests/sessions_tests/tests.py,53,the /tmp (with some backends) and eventually overwhelm it after lots,
django/tests/sessions_tests/tests.py,54,of runs (think buildbots),
django/tests/sessions_tests/tests.py,71,Need to reset these to pretend we haven't accessed it:,
django/tests/sessions_tests/tests.py,196,"Submitting an invalid session key (either by guessing, or if the db has",
django/tests/sessions_tests/tests.py,197,removed the key) results in a new key being generated.,
django/tests/sessions_tests/tests.py,205,Some backends leave a stale cache entry for the invalid,
django/tests/sessions_tests/tests.py,206,session key; make sure that entry is manually deleted,
django/tests/sessions_tests/tests.py,230,Custom session expiry,
django/tests/sessions_tests/tests.py,232,A normal session has a max age equal to settings,
django/tests/sessions_tests/tests.py,235,So does a custom session with an idle expiration time of 0 (but it'll,
django/tests/sessions_tests/tests.py,236,expire at browser close),
django/tests/sessions_tests/tests.py,254,"Mock timezone.now, because set_expiry calls it on this code path.",
django/tests/sessions_tests/tests.py,286,Tests get_expire_at_browser_close with different settings and different,
django/tests/sessions_tests/tests.py,287,set_expiry calls,
django/tests/sessions_tests/tests.py,309,Ensure we can decode what we encode,
django/tests/sessions_tests/tests.py,316,RemovedInDjango40Warning: pre-Django 3.1 sessions will be invalid.,
django/tests/sessions_tests/tests.py,330,The failed decode is logged.,
django/tests/sessions_tests/tests.py,334,this doesn't work with JSONSerializer (serializing timedelta),
django/tests/sessions_tests/tests.py,336,reinitialize after overriding settings,
django/tests/sessions_tests/tests.py,338,Regression test for #19200,
django/tests/sessions_tests/tests.py,346,"With an expiry date in the past, the session expires instantly.",
django/tests/sessions_tests/tests.py,365,"provided unknown key was cycled, not reused",
django/tests/sessions_tests/tests.py,372,Create new session.,
django/tests/sessions_tests/tests.py,377,Logout in another context.,
django/tests/sessions_tests/tests.py,381,Modify session in first context.,
django/tests/sessions_tests/tests.py,384,"This should throw an exception as the session is deleted, not",
django/tests/sessions_tests/tests.py,385,resurrect the session.,
django/tests/sessions_tests/tests.py,426,Create a session,
django/tests/sessions_tests/tests.py,431,Change it,
django/tests/sessions_tests/tests.py,433,"Clear cache, so that it will be retrieved from DB",
django/tests/sessions_tests/tests.py,443,One object in the future,
django/tests/sessions_tests/tests.py,448,One object in the past,
django/tests/sessions_tests/tests.py,454,Two sessions are in the database before clearsessions...,
django/tests/sessions_tests/tests.py,458,... and one is deleted.,
django/tests/sessions_tests/tests.py,470,One day.,
django/tests/sessions_tests/tests.py,473,Set the account ID to be picked up by a custom session storage,
django/tests/sessions_tests/tests.py,474,and saved to a custom session model database column.,
django/tests/sessions_tests/tests.py,478,Make sure that the customized create_model_instance() was called.,
django/tests/sessions_tests/tests.py,482,"Make the session ""anonymous"".",
django/tests/sessions_tests/tests.py,486,Make sure that save() on an existing session did the right job.,
django/tests/sessions_tests/tests.py,511,Some backends might issue a warning,
django/tests/sessions_tests/tests.py,519,21000 - CacheDB backend should respect SESSION_CACHE_ALIAS.,
django/tests/sessions_tests/tests.py,529,"Don't need DB flushing for these tests, so can use unittest.TestCase as base class",
django/tests/sessions_tests/tests.py,535,"Do file session tests in an isolated directory, and kill it after we're done.",
django/tests/sessions_tests/tests.py,538,Reset the file session backend's internal caches,
django/tests/sessions_tests/tests.py,556,Make sure the file backend checks for a good storage dir,
django/tests/sessions_tests/tests.py,561,Ensure we don't allow directory-traversal.,
django/tests/sessions_tests/tests.py,562,"This is tested directly on _key_to_file, as load() will swallow",
django/tests/sessions_tests/tests.py,563,a SuspiciousOperation in the same way as an OSError - by creating,
django/tests/sessions_tests/tests.py,564,"a new session, making it unclear whether the slashes were detected.",
django/tests/sessions_tests/tests.py,569,Ensure we don't allow directory-traversal,
django/tests/sessions_tests/tests.py,592,One object in the future,
django/tests/sessions_tests/tests.py,597,One object in the past,
django/tests/sessions_tests/tests.py,603,One object in the present without an expiry (should be deleted since,
django/tests/sessions_tests/tests.py,604,its modification time + SESSION_COOKIE_AGE will be in the past when,
django/tests/sessions_tests/tests.py,605,clearsessions runs).,
django/tests/sessions_tests/tests.py,610,Three sessions are in the filesystem before clearsessions...,
django/tests/sessions_tests/tests.py,613,... and two are deleted.,
django/tests/sessions_tests/tests.py,627,Some backends might issue a warning,
django/tests/sessions_tests/tests.py,647,Re-initialize the session backend to make use of overridden settings.,
django/tests/sessions_tests/tests.py,674,Handle the response through the middleware,
django/tests/sessions_tests/tests.py,683,Handle the response through the middleware,
django/tests/sessions_tests/tests.py,719,The value wasn't saved above.,
django/tests/sessions_tests/tests.py,737,Handle the response through the middleware. It will try to save,
django/tests/sessions_tests/tests.py,738,the deleted session which will cause an UpdateError that's caught,
django/tests/sessions_tests/tests.py,739,and raised as a SuspiciousOperation.,
django/tests/sessions_tests/tests.py,750,"Before deleting, there has to be an existing cookie",
django/tests/sessions_tests/tests.py,753,Handle the response through the middleware,
django/tests/sessions_tests/tests.py,756,"The cookie was deleted, not recreated.",
django/tests/sessions_tests/tests.py,757,A deleted cookie header looks like:,
django/tests/sessions_tests/tests.py,758,"Set-Cookie: sessionid=; expires=Thu, 01 Jan 1970 00:00:00 GMT; Max-Age=0; Path=/",
django/tests/sessions_tests/tests.py,766,SessionMiddleware sets 'Vary: Cookie' to prevent the 'Set-Cookie',
django/tests/sessions_tests/tests.py,767,from being cached.,
django/tests/sessions_tests/tests.py,779,"Before deleting, there has to be an existing cookie",
django/tests/sessions_tests/tests.py,782,Handle the response through the middleware,
django/tests/sessions_tests/tests.py,785,"The cookie was deleted, not recreated.",
django/tests/sessions_tests/tests.py,786,A deleted cookie header with a custom domain and path looks like:,
django/tests/sessions_tests/tests.py,787,Set-Cookie: sessionid=; Domain=.example.local;,
django/tests/sessions_tests/tests.py,788,"expires=Thu, 01 Jan 1970 00:00:00 GMT; Max-Age=0;",
django/tests/sessions_tests/tests.py,789,Path=/example/,
django/tests/sessions_tests/tests.py,806,Handle the response through the middleware,
django/tests/sessions_tests/tests.py,809,A cookie should not be set.,
django/tests/sessions_tests/tests.py,811,"The session is accessed so ""Vary: Cookie"" should be set.",
django/tests/sessions_tests/tests.py,820,Set a session key and some data.,
django/tests/sessions_tests/tests.py,827,Handle the response through the middleware.,
django/tests/sessions_tests/tests.py,830,"A cookie should be set, along with Vary: Cookie.",
django/tests/sessions_tests/tests.py,837,Empty the session data.,
django/tests/sessions_tests/tests.py,839,Handle the response through the middleware.,
django/tests/sessions_tests/tests.py,845,"While the session is empty, it hasn't been flushed so a cookie should",
django/tests/sessions_tests/tests.py,846,"still be set, along with Vary: Cookie.",
django/tests/sessions_tests/tests.py,855,"Don't need DB flushing for these tests, so can use unittest.TestCase as base class",
django/tests/sessions_tests/tests.py,878,"The cookie backend doesn't handle non-default expiry dates, see #19201",
django/tests/sessions_tests/tests.py,882,signed_cookies backend should handle unpickle exceptions gracefully,
django/tests/sessions_tests/tests.py,883,by creating a new session,
django/tests/sessions_tests/models.py,43,One day.,
django/tests/generic_inline_admin/tests.py,62,inline data,
django/tests/generic_inline_admin/tests.py,68,redirect somewhere,
django/tests/generic_inline_admin/tests.py,76,inline data,
django/tests/generic_inline_admin/tests.py,89,redirect somewhere,
django/tests/generic_inline_admin/tests.py,247,inline data,
django/tests/generic_inline_admin/tests.py,258,redirect somewhere,
django/tests/generic_inline_admin/tests.py,304,Create a formset with default arguments,
django/tests/generic_inline_admin/tests.py,309,Create a formset with custom keyword arguments,
django/tests/generic_inline_admin/tests.py,348,First with `GenericInlineModelAdmin`  -----------------,
django/tests/generic_inline_admin/tests.py,371,"Then, only with `ModelForm`  -----------------",
django/tests/generic_inline_admin/tests.py,388,get_fieldsets is called when figuring out form fields.,
django/tests/generic_inline_admin/tests.py,389,Refs #18681.,
django/tests/generic_inline_admin/models.py,29,,
django/tests/generic_inline_admin/models.py,30,Generic inline with unique_together,
django/tests/generic_inline_admin/models.py,31,,
django/tests/generic_inline_admin/models.py,52,,
django/tests/generic_inline_admin/models.py,53,Generic inline with can_delete=False,
django/tests/generic_inline_admin/models.py,54,,
django/tests/auth_tests/backend_alias.py,1,For testing that auth backends can be referenced using a convenience import,
django/tests/auth_tests/test_management.py,31,"@mock_inputs dict key: [expected prompt messages],",
django/tests/auth_tests/test_management.py,60,get() fallback because sometimes 'key' is the actual,
django/tests/auth_tests/test_management.py,61,prompt rather than a shortcut name.,
django/tests/auth_tests/test_management.py,127,'Julia' with accented 'u':,
django/tests/auth_tests/test_management.py,212,'Julia' with accented 'u':,
django/tests/auth_tests/test_management.py,240,ForeignKey(unique=True),
django/tests/auth_tests/test_management.py,252,We can use the management command to create a superuser,
django/tests/auth_tests/test_management.py,266,created password should be unusable,
django/tests/auth_tests/test_management.py,272,username (cz),
django/tests/auth_tests/test_management.py,296,We can suppress output on the management command,
django/tests/auth_tests/test_management.py,328,We can use the management command to create a superuser,
django/tests/auth_tests/test_management.py,329,We skip validation because the temporary substitution of the,
django/tests/auth_tests/test_management.py,330,swappable User model messes with validation.,
django/tests/auth_tests/test_management.py,345,created password should be unusable,
django/tests/auth_tests/test_management.py,351,We can use the management command to create a superuser,
django/tests/auth_tests/test_management.py,352,We skip validation because the temporary substitution of the,
django/tests/auth_tests/test_management.py,353,swappable User model messes with validation.,
django/tests/auth_tests/test_management.py,586,Get the default username before creating a user.,
django/tests/auth_tests/test_management.py,776,Enter an invalid (too long) username first and then a valid one.,
django/tests/auth_tests/test_management.py,821,Enter the existing username first and then a new one.,
django/tests/auth_tests/test_management.py,894,"The first two passwords do not match, but the second two do match and",
django/tests/auth_tests/test_management.py,895,are valid.,
django/tests/auth_tests/test_management.py,928,"The first two passwords are empty strings, but the second two are",
django/tests/auth_tests/test_management.py,929,valid.,
django/tests/auth_tests/test_management.py,1001,Environment variables are ignored for non-required fields.,
django/tests/auth_tests/test_management.py,1009,"Environment variables are ignored in non-interactive mode, if",
django/tests/auth_tests/test_management.py,1010,provided by a command line arguments.,
django/tests/auth_tests/test_management.py,1028,Environment variables are ignored in interactive mode.,
django/tests/auth_tests/test_management.py,1087,view/add/change/delete permission by default + custom permission,
django/tests/auth_tests/test_management.py,1096,custom permission only since default permissions is empty,
django/tests/auth_tests/test_management.py,1107,Unavailable contenttypes.ContentType,
django/tests/auth_tests/test_management.py,1110,Unavailable auth.Permission,
django/tests/auth_tests/test_management.py,1120,Warm the manager cache.,
django/tests/auth_tests/test_management.py,1122,Apply a deletion as if e.g. a database 'flush' had been executed.,
django/tests/auth_tests/test_management.py,1124,This fails with a foreign key constraint without the fix.,
django/tests/auth_tests/test_validators.py,90,help_text is marked safe and therefore unchanged by conditional_escape().,
django/tests/auth_tests/test_validators.py,145,max_similarity=1 doesn't allow passwords that are identical to the,
django/tests/auth_tests/test_validators.py,146,attribute's value.,
django/tests/auth_tests/test_validators.py,153,max_similarity=0 rejects all passwords.,
django/tests/auth_tests/test_validators.py,160,Passes validation.,
django/tests/auth_tests/urls.py,31,"*After* rendering, we check whether the session was accessed",
django/tests/auth_tests/urls.py,81,special urls for auth test cases,
django/tests/auth_tests/urls.py,158,This line is only required to render the password reset with is_admin=True,
django/tests/auth_tests/test_signals.py,44,Only a successful login will trigger the success signal.,
django/tests/auth_tests/test_signals.py,49,verify the password is cleansed,
django/tests/auth_tests/test_signals.py,53,Like this:,
django/tests/auth_tests/test_signals.py,58,Ensure there were no more failures.,
django/tests/auth_tests/test_signals.py,62,The log_out function will still trigger the signal for anonymous,
django/tests/auth_tests/test_signals.py,63,users.,
django/tests/auth_tests/test_signals.py,104,last_login is a property whose value is None.,
django/tests/auth_tests/test_auth_backends.py,81,"The custom_perms test messes with ContentTypes, which will",
django/tests/auth_tests/test_auth_backends.py,82,be cached; flush the cache to ensure there are no side effects,
django/tests/auth_tests/test_auth_backends.py,83,"Refs #14975, #14925",
django/tests/auth_tests/test_auth_backends.py,110,reloading user to purge the _perm_cache,
django/tests/auth_tests/test_auth_backends.py,217,"Re-set the password, because this tests overrides PASSWORD_HASHERS",
django/tests/auth_tests/test_auth_backends.py,375,We only support row level perms,
django/tests/auth_tests/test_auth_backends.py,391,We only support row level perms,
django/tests/auth_tests/test_auth_backends.py,405,We only support row level perms,
django/tests/auth_tests/test_auth_backends.py,431,"The get_group_permissions test messes with ContentTypes, which will",
django/tests/auth_tests/test_auth_backends.py,432,be cached; flush the cache to ensure there are no side effects,
django/tests/auth_tests/test_auth_backends.py,433,"Refs #14975, #14925",
django/tests/auth_tests/test_auth_backends.py,561,user_login_failed signal is sent.,
django/tests/auth_tests/test_auth_backends.py,611,Get a session for the test user,
django/tests/auth_tests/test_auth_backends.py,616,Prepare a request object,
django/tests/auth_tests/test_auth_backends.py,619,Remove NewModelBackend,
django/tests/auth_tests/test_auth_backends.py,622,Get the user from the request,
django/tests/auth_tests/test_auth_backends.py,625,Assert that the user retrieval is successful and the user is,
django/tests/auth_tests/test_auth_backends.py,626,anonymous as the backend is not longer available.,
django/tests/auth_tests/test_auth_backends.py,642,Doesn't accept any credentials so is skipped by authenticate().,
django/tests/auth_tests/test_auth_backends.py,696,Prepare a request object,
django/tests/auth_tests/test_models.py,54,Create test contenttypes for both databases,
django/tests/auth_tests/test_models.py,76,Now we create the test UserPermission,
django/tests/auth_tests/test_models.py,114,According to https://tools.ietf.org/html/rfc3696#section-3,
django/tests/auth_tests/test_models.py,115,"the ""@"" symbol can be part of the local part of an email address",
django/tests/auth_tests/test_models.py,173,The normalization happens in AbstractBaseUser.clean(),
django/tests/auth_tests/test_models.py,174,U+2126 OHM SIGN,
django/tests/auth_tests/test_models.py,182,U+03A9 GREEK CAPITAL LETTER OMEGA,
django/tests/auth_tests/test_models.py,195,valid send_mail parameters,
django/tests/auth_tests/test_models.py,255,Upgrade the password iterations,
django/tests/auth_tests/test_models.py,280,User with permission.,
django/tests/auth_tests/test_models.py,283,User with group permission.,
django/tests/auth_tests/test_models.py,290,Users without permissions.,
django/tests/auth_tests/test_models.py,293,Superuser.,
django/tests/auth_tests/test_models.py,297,Inactive user with permission.,
django/tests/auth_tests/test_models.py,327,Only inactive users.,
django/tests/auth_tests/test_models.py,329,All users.,
django/tests/auth_tests/test_models.py,331,Exclude superusers.,
django/tests/auth_tests/test_models.py,408,is_active is true by default,
django/tests/auth_tests/test_models.py,413,the is_active flag is saved,
django/tests/auth_tests/test_models.py,424,you can set the attribute - but it will not save,
django/tests/auth_tests/test_models.py,426,there should be no problem saving - but the attribute is not saved,
django/tests/auth_tests/test_models.py,429,the attribute is always true for newly retrieved instance,
django/tests/auth_tests/test_hashers.py,18,"On some platforms (e.g. OpenBSD), crypt.crypt() always return None.",
django/tests/auth_tests/test_hashers.py,46,Blank passwords,
django/tests/auth_tests/test_hashers.py,71,Blank passwords,
django/tests/auth_tests/test_hashers.py,86,Blank passwords,
django/tests/auth_tests/test_hashers.py,101,Blank passwords,
django/tests/auth_tests/test_hashers.py,116,Alternate unsalted syntax,
django/tests/auth_tests/test_hashers.py,121,Blank passwords,
django/tests/auth_tests/test_hashers.py,135,Raw SHA1 isn't acceptable,
django/tests/auth_tests/test_hashers.py,138,Blank passwords,
django/tests/auth_tests/test_hashers.py,154,Blank passwords,
django/tests/auth_tests/test_hashers.py,170,password truncation no longer works,
django/tests/auth_tests/test_hashers.py,178,Blank passwords,
django/tests/auth_tests/test_hashers.py,194,Blank passwords,
django/tests/auth_tests/test_hashers.py,210,Generate a password with 4 rounds.,
django/tests/auth_tests/test_hashers.py,221,No upgrade is triggered.,
django/tests/auth_tests/test_hashers.py,225,Revert to the old rounds count and ...,
django/tests/auth_tests/test_hashers.py,228,... check if the password would get updated to the new count.,
django/tests/auth_tests/test_hashers.py,247,"Increasing rounds from 4 to 6 means an increase of 4 in workload,",
django/tests/auth_tests/test_hashers.py,248,therefore hardening should run 3 times to make the timing the,
django/tests/auth_tests/test_hashers.py,249,same (the original encode() call already ran once).,
django/tests/auth_tests/test_hashers.py,252,Get the original salt (includes the original workload factor),
django/tests/auth_tests/test_hashers.py,269,Assert that the unusable passwords actually contain a random part.,
django/tests/auth_tests/test_hashers.py,270,This might fail one day due to a hash collision.,
django/tests/auth_tests/test_hashers.py,362,Generate a password with 1 iteration.,
django/tests/auth_tests/test_hashers.py,373,No upgrade is triggered,
django/tests/auth_tests/test_hashers.py,377,Revert to the old iteration count and ...,
django/tests/auth_tests/test_hashers.py,380,... check if the password would get updated to the new iteration count.,
django/tests/auth_tests/test_hashers.py,397,Encode should get called once ...,
django/tests/auth_tests/test_hashers.py,400,... with the original salt and 5 iterations.,
django/tests/auth_tests/test_hashers.py,421,No upgrade is triggered,
django/tests/auth_tests/test_hashers.py,425,Revert to the old iteration count and check if the password would get,
django/tests/auth_tests/test_hashers.py,426,updated to the new iteration count.,
django/tests/auth_tests/test_hashers.py,439,"Correct password supplied, no hardening needed",
django/tests/auth_tests/test_hashers.py,443,"Wrong password supplied, hardening needed",
django/tests/auth_tests/test_hashers.py,504,Blank passwords,
django/tests/auth_tests/test_hashers.py,510,Old hashes without version attribute,
django/tests/auth_tests/test_hashers.py,555,Generate hash with attr set to 1,
django/tests/auth_tests/test_hashers.py,566,No upgrade is triggered.,
django/tests/auth_tests/test_hashers.py,570,Revert to the old rounds count and ...,
django/tests/auth_tests/test_hashers.py,573,... check if the password would get updated to the new count.,
django/tests/auth_tests/client.py,31,Add the token to the session,
django/tests/auth_tests/test_views.py,122,"optional multipart text/html email has been added.  Make sure original,",
django/tests/auth_tests/test_views.py,123,default functionality is 100% the same,
django/tests/auth_tests/test_views.py,162,Skip any 500 handler action (like sending more mail...),
django/tests/auth_tests/test_views.py,166,This attack is based on the way browsers handle URLs. The colon,
django/tests/auth_tests/test_views.py,167,"should be used to separate the port, but if the URL contains an @,",
django/tests/auth_tests/test_views.py,168,"the colon is interpreted as part of a username for login purposes,",
django/tests/auth_tests/test_views.py,169,making 'evil.com' the request domain. Since HTTP_HOST is used to,
django/tests/auth_tests/test_views.py,170,"produce a meaningful reset URL, we need to be certain that the",
django/tests/auth_tests/test_views.py,171,HTTP_HOST header isn't poisoned. This is done as a check when get_host(),
django/tests/auth_tests/test_views.py,172,"is invoked, but we check here as a practical consequence.",
django/tests/auth_tests/test_views.py,182,Skip any 500 handler action (like sending more mail...),
django/tests/auth_tests/test_views.py,196,Start by creating the email,
django/tests/auth_tests/test_views.py,209,redirect to a 'complete' page:,
django/tests/auth_tests/test_views.py,214,"Let's munge the token in the path, but keep the same length,",
django/tests/auth_tests/test_views.py,215,in case the URLconf will reject a different length.,
django/tests/auth_tests/test_views.py,222,"A nonexistent user returns a 200 response, not a 404.",
django/tests/auth_tests/test_views.py,227,A base36 user id that overflows int returns a 200 response.,
django/tests/auth_tests/test_views.py,232,"Same as test_confirm_invalid, but trying to do a POST instead.",
django/tests/auth_tests/test_views.py,240,Check the password has not been changed,
django/tests/auth_tests/test_views.py,259,password hasn't changed,
django/tests/auth_tests/test_views.py,264,Check the password has been changed,
django/tests/auth_tests/test_views.py,267,The reset token is deleted from the session.,
django/tests/auth_tests/test_views.py,270,Check we can't use the link again,
django/tests/auth_tests/test_views.py,332,This backend is specified in the URL pattern.,
django/tests/auth_tests/test_views.py,352,The password_reset_confirm() view passes the user object to the,
django/tests/auth_tests/test_views.py,353,"SetPasswordForm``, even on GET requests (#16919). For this test,",
django/tests/auth_tests/test_views.py,354,{{ form.user }}`` is rendered in the template,
django/tests/auth_tests/test_views.py,355,registration/password_reset_confirm.html.,
django/tests/auth_tests/test_views.py,358,"However, the view should NOT pass any user object on a form if the",
django/tests/auth_tests/test_views.py,359,password reset link was invalid.,
django/tests/auth_tests/test_views.py,365,Don't use PasswordResetConfirmClient (self.client) here which,
django/tests/auth_tests/test_views.py,366,automatically fetches the redirect page.,
django/tests/auth_tests/test_views.py,408,Start by creating the email,
django/tests/auth_tests/test_views.py,422,redirect to a 'complete' page:,
django/tests/auth_tests/test_views.py,424,then submit a new password,
django/tests/auth_tests/test_views.py,436,instead of fixture,
django/tests/auth_tests/test_views.py,550,"if the hash isn't updated, retrieving the redirection page will fail.",
django/tests/auth_tests/test_views.py,552,The session key is rotated.,
django/tests/auth_tests/test_views.py,573,These URLs should not pass the security check.,
django/tests/auth_tests/test_views.py,597,These URLs should pass the security check.,
django/tests/auth_tests/test_views.py,640,The custom authentication form for this login requires a request to,
django/tests/auth_tests/test_views.py,641,initialize it.,
django/tests/auth_tests/test_views.py,646,The login was successful.,
django/tests/auth_tests/test_views.py,656,Do a GET to establish a CSRF token,
django/tests/auth_tests/test_views.py,657,The test client isn't used here as it's a test for middleware.,
django/tests/auth_tests/test_views.py,660,get_token() triggers CSRF token inclusion in the response,
django/tests/auth_tests/test_views.py,666,Prepare the POST request,
django/tests/auth_tests/test_views.py,672,Use POST request to log in,
django/tests/auth_tests/test_views.py,675,Required to have redirect work in login view,
django/tests/auth_tests/test_views.py,681,Check the CSRF token switched,
django/tests/auth_tests/test_views.py,703,"If no password change, session key should not be flushed.",
django/tests/auth_tests/test_views.py,890,Not logged in ...,
django/tests/auth_tests/test_views.py,892,redirected to login.,
django/tests/auth_tests/test_views.py,895,exception raised.,
django/tests/auth_tests/test_views.py,898,redirected to login.,
django/tests/auth_tests/test_views.py,904,Already logged in...,
django/tests/auth_tests/test_views.py,906,redirect loop encountered.,
django/tests/auth_tests/test_views.py,909,exception raised.,
django/tests/auth_tests/test_views.py,912,exception raised.,
django/tests/auth_tests/test_views.py,965,Bug 14377,
django/tests/auth_tests/test_views.py,979,Bug 11223,
django/tests/auth_tests/test_views.py,1038,These URLs should not pass the security check.,
django/tests/auth_tests/test_views.py,1061,These URLs should pass the security check.,
django/tests/auth_tests/test_views.py,1124,Redirect in test_user_change_password will fail if session auth hash,
django/tests/auth_tests/test_views.py,1125,isn't updated after password change (#21649),
django/tests/auth_tests/test_views.py,1132,Make me a superuser before logging in.,
django/tests/auth_tests/test_views.py,1137,Get the latest last_login value.,
django/tests/auth_tests/test_views.py,1160,#20078 - users shouldn't be allowed to guess password hashes via,
django/tests/auth_tests/test_views.py,1161,repeated password__startswith queries.,
django/tests/auth_tests/test_views.py,1163,A lookup that tries to filter on password isn't OK,
django/tests/auth_tests/test_views.py,1193,Test the link inside password field help_text.,
django/tests/auth_tests/test_views.py,1251,ReadOnlyPasswordHashWidget is used to render the field.,
django/tests/auth_tests/test_views.py,1261,Value in POST data is ignored.,
django/tests/auth_tests/test_views.py,1287,The action attribute is omitted.,
django/tests/auth_tests/test_views.py,1290,A LogEntry is created with pk=1 which breaks a FK constraint on MySQL,
django/tests/auth_tests/test_views.py,1298,hardcoded in CustomUserAdmin.log_change(),
django/tests/auth_tests/test_views.py,1302,The LogEntry.user column isn't altered to a UUID type so it's set to,
django/tests/auth_tests/test_views.py,1303,an integer manually in CustomUserAdmin to avoid an error. To avoid a,
django/tests/auth_tests/test_views.py,1304,"constraint error, delete the entry before constraints are checked",
django/tests/auth_tests/test_views.py,1305,after the test.,
django/tests/auth_tests/test_decorators.py,66,Add permissions auth.add_customuser and auth.change_customuser,
django/tests/auth_tests/test_middleware.py,22,"After password change, user should be anonymous",
django/tests/auth_tests/test_middleware.py,28,session should be flushed,
django/tests/auth_tests/urls_custom_user_admin.py,11,"LogEntry.user column doesn't get altered to expect a UUID, so set an",
django/tests/auth_tests/urls_custom_user_admin.py,12,integer manually to avoid causing an error.,
django/tests/auth_tests/urls_admin.py,11,Create a silo'd admin site for just the user/group admins.,
django/tests/auth_tests/test_context_processors.py,41,Works for modules and full permissions.,
django/tests/auth_tests/test_context_processors.py,121,These are 'functional' level tests for common use cases.  Direct,
django/tests/auth_tests/test_context_processors.py,122,testing of the implementation (SimpleLazyObject) is in the 'utils',
django/tests/auth_tests/test_context_processors.py,123,tests.,
django/tests/auth_tests/test_context_processors.py,130,bug #12037 is tested by the {% url %} in the template:,
django/tests/auth_tests/test_context_processors.py,133,A Q() comparing a user and with another Q() (in an AND or OR fashion).,
django/tests/auth_tests/test_context_processors.py,136,Tests for user equality.  This is hard because User defines,
django/tests/auth_tests/test_context_processors.py,137,equality in a non-duck-typing way,
django/tests/auth_tests/test_context_processors.py,138,See bug #12060,
django/tests/auth_tests/test_forms.py,67,The verification password is incorrect.,
django/tests/auth_tests/test_forms.py,79,One (or both) passwords weren't given,
django/tests/auth_tests/test_forms.py,95,The success case.,
django/tests/auth_tests/test_forms.py,121,The normalization happens in AbstractBaseUser.clean() and ModelForm,
django/tests/auth_tests/test_forms.py,122,validation calls Model.clean().,
django/tests/auth_tests/test_forms.py,123,U+2126 OHM SIGN,
django/tests/auth_tests/test_forms.py,133,U+03A9 GREEK CAPITAL LETTER OMEGA,
django/tests/auth_tests/test_forms.py,141,U+03A9 GREEK CAPITAL LETTER OMEGA,
django/tests/auth_tests/test_forms.py,142,U+2126 OHM SIGN,
django/tests/auth_tests/test_forms.py,211,without USERNAME_FIELD,
django/tests/auth_tests/test_forms.py,280,"To verify that the login form rejects inactive users, use an authentication",
django/tests/auth_tests/test_forms.py,281,backend that allows them.,
django/tests/auth_tests/test_forms.py,286,The user submits an invalid username.,
django/tests/auth_tests/test_forms.py,303,The user is inactive.,
django/tests/auth_tests/test_forms.py,312,Use an authentication backend that rejects inactive users.,
django/tests/auth_tests/test_forms.py,350,The user is inactive.,
django/tests/auth_tests/test_forms.py,359,Use an authentication backend that allows inactive users.,
django/tests/auth_tests/test_forms.py,362,"The user is inactive, but our custom form policy allows them to log in.",
django/tests/auth_tests/test_forms.py,375,"If we want to disallow some logins according to custom logic,",
django/tests/auth_tests/test_forms.py,376,we should raise a django.forms.ValidationError in the form.,
django/tests/auth_tests/test_forms.py,396,The success case,
django/tests/auth_tests/test_forms.py,477,Not necessary to have valid credentails for the test.,
django/tests/auth_tests/test_forms.py,522,The two new passwords do not match.,
django/tests/auth_tests/test_forms.py,623,The two new passwords do not match.,
django/tests/auth_tests/test_forms.py,636,The success case.,
django/tests/auth_tests/test_forms.py,651,Regression test - check the order of fields:,
django/tests/auth_tests/test_forms.py,686,"A regression test, introduce by adding an optimization for the",
django/tests/auth_tests/test_forms.py,687,UserChangeForm.,
django/tests/auth_tests/test_forms.py,697,Just check we can create it,
django/tests/auth_tests/test_forms.py,724,Use the form to construct the POST data,
django/tests/auth_tests/test_forms.py,729,"The password field should be readonly, so anything",
django/tests/auth_tests/test_forms.py,730,posted here should be ignored; the form will be,
django/tests/auth_tests/test_forms.py,731,"valid, and give back the 'initial' value for the",
django/tests/auth_tests/test_forms.py,732,password field.,
django/tests/auth_tests/test_forms.py,737,original hashed password contains $,
django/tests/auth_tests/test_forms.py,743,"When rendering the bound password field,",
django/tests/auth_tests/test_forms.py,744,ReadOnlyPasswordHashWidget needs the initial,
django/tests/auth_tests/test_forms.py,745,value to render correctly,
django/tests/auth_tests/test_forms.py,788,This cleanup is necessary because contrib.sites cache,
django/tests/auth_tests/test_forms.py,789,"makes tests interfere with each other, see #11505",
django/tests/auth_tests/test_forms.py,866,"Since we're not providing a request object, we must provide a",
django/tests/auth_tests/test_forms.py,867,domain_override to prevent the save operation from failing in the,
django/tests/auth_tests/test_forms.py,868,potential case where contrib.sites is not installed. Refs #16412.,
django/tests/auth_tests/test_forms.py,893,"Since we're not providing a request object, we must provide a",
django/tests/auth_tests/test_forms.py,894,domain_override to prevent the save operation from failing in the,
django/tests/auth_tests/test_forms.py,895,potential case where contrib.sites is not installed. Refs #16412.,
django/tests/auth_tests/test_forms.py,932,"The form itself is valid, but no email is sent",
django/tests/auth_tests/test_forms.py,1001,Rendering the widget with value set to None,
django/tests/auth_tests/test_forms.py,1002,mustn't raise an exception.,
django/tests/auth_tests/test_mixins.py,85,Authenticated users receive PermissionDenied.,
django/tests/auth_tests/test_mixins.py,91,Anonymous users are redirected to the login page.,
django/tests/auth_tests/test_mixins.py,256,Authenticated users receive PermissionDenied.,
django/tests/auth_tests/test_mixins.py,261,Anonymous users are redirected to the login page.,
django/tests/auth_tests/test_migrations.py,61,Reload user to purge the _perm_cache.,
django/tests/auth_tests/test_migrations.py,86,Reload user to purge the _perm_cache.,
django/tests/auth_tests/test_migrations.py,138,Reload user to purge the _perm_cache.,
django/tests/auth_tests/test_migrations.py,161,Reload user to purge the _perm_cache.,
django/tests/auth_tests/__init__.py,1,The password for the fixture data users is 'password',
django/tests/auth_tests/test_basic.py,20,Check we can manually set an unusable password,
django/tests/auth_tests/test_basic.py,30,Check username getter,
django/tests/auth_tests/test_basic.py,33,Check authentication/permissions,
django/tests/auth_tests/test_basic.py,40,Check API-based user creation with no password,
django/tests/auth_tests/test_basic.py,47,Two equivalent unicode normalized usernames should be duplicates,
django/tests/auth_tests/test_basic.py,48,U+03A9 GREEK CAPITAL LETTER OMEGA,
django/tests/auth_tests/test_basic.py,49,U+2126 OHM SIGN,
django/tests/auth_tests/test_templates.py,38,PasswordResetConfirmView invalid token,
django/tests/auth_tests/test_templates.py,46,PasswordResetConfirmView valid token,
django/tests/auth_tests/test_handlers.py,10,This must be a TransactionTestCase because the WSGI auth handler performs,
django/tests/auth_tests/test_handlers.py,11,its own transaction management.,
django/tests/auth_tests/test_handlers.py,30,User not in database,
django/tests/auth_tests/test_handlers.py,33,Valid user with correct password,
django/tests/auth_tests/test_handlers.py,36,"correct password, but user is inactive",
django/tests/auth_tests/test_handlers.py,40,Valid user with incorrect password,
django/tests/auth_tests/test_handlers.py,52,User not in database,
django/tests/auth_tests/test_handlers.py,55,Valid user with correct password',
django/tests/auth_tests/test_handlers.py,58,Valid user with incorrect password,
django/tests/auth_tests/test_handlers.py,71,User not in database,
django/tests/auth_tests/test_remote_user.py,21,Usernames to be passed in REMOTE_USER for the test_known_user test case.,
django/tests/auth_tests/test_remote_user.py,67,Verify that CSRF is configured for the view,
django/tests/auth_tests/test_remote_user.py,73,This request will call django.contrib.auth.login() which will call,
django/tests/auth_tests/test_remote_user.py,74,django.middleware.csrf.rotate_token() thus changing the value of,
django/tests/auth_tests/test_remote_user.py,75,request.META['CSRF_COOKIE'] from the user submitted value set by,
django/tests/auth_tests/test_remote_user.py,76,CsrfViewMiddleware.process_request() to the new csrftoken value set,
django/tests/auth_tests/test_remote_user.py,77,by rotate_token(). Csrf validation should still pass when the view is,
django/tests/auth_tests/test_remote_user.py,78,later processed by CsrfViewMiddleware.process_view(),
django/tests/auth_tests/test_remote_user.py,94,Another request with same user should not create any new users.,
django/tests/auth_tests/test_remote_user.py,109,A different user passed in the headers causes the new user,
django/tests/auth_tests/test_remote_user.py,110,to be logged in.,
django/tests/auth_tests/test_remote_user.py,122,Set last_login to something so we can determine if it changes.,
django/tests/auth_tests/test_remote_user.py,146,Known user authenticates,
django/tests/auth_tests/test_remote_user.py,150,"During the session, the REMOTE_USER header disappears. Should trigger logout.",
django/tests/auth_tests/test_remote_user.py,153,verify the remoteuser middleware will not remove a user,
django/tests/auth_tests/test_remote_user.py,154,authenticated via another backend,
django/tests/auth_tests/test_remote_user.py,167,Known user authenticates,
django/tests/auth_tests/test_remote_user.py,171,"During the session, the REMOTE_USER changes to a different user.",
django/tests/auth_tests/test_remote_user.py,174,The current user is not the prior remote_user.,
django/tests/auth_tests/test_remote_user.py,175,"In backends that create a new user, username is ""newnewuser""",
django/tests/auth_tests/test_remote_user.py,176,"In backends that do not create new users, it is '' (anonymous user)",
django/tests/auth_tests/test_remote_user.py,242,REMOTE_USER strings with email addresses for the custom backend to,
django/tests/auth_tests/test_remote_user.py,243,clean.,
django/tests/auth_tests/test_remote_user.py,305,Known user authenticates,
django/tests/auth_tests/test_remote_user.py,308,Should stay logged in if the REMOTE_USER header disappears.,
django/tests/auth_tests/test_password_reset_timeout_days.py,21,Uses a mocked version of PasswordResetTokenGenerator so we can change,
django/tests/auth_tests/test_password_reset_timeout_days.py,22,the value of 'now'.,
django/tests/auth_tests/test_password_reset_timeout_days.py,63,Works a second time.,
django/tests/auth_tests/test_password_reset_timeout_days.py,71,Works a second time.,
django/tests/auth_tests/test_tokens.py,39,Uses a mocked version of PasswordResetTokenGenerator so we can change,
django/tests/auth_tests/test_tokens.py,40,the value of 'now'.,
django/tests/auth_tests/test_tokens.py,77,Create and check a token with a different secret.,
django/tests/auth_tests/test_tokens.py,82,Create and check a token with the default secret.,
django/tests/auth_tests/test_tokens.py,87,Tokens created with a different secret don't validate.,
django/tests/auth_tests/test_tokens.py,92,RemovedInDjango40Warning: pre-Django 3.1 tokens will be invalid.,
django/tests/auth_tests/models/custom_user.py,8,"The custom user uses email as the unique identifier, and requires",
django/tests/auth_tests/models/custom_user.py,9,that every user provide a date of birth. This lets us test,
django/tests/auth_tests/models/custom_user.py,10,"changes in username datatype, and non-text required fields.",
django/tests/auth_tests/models/custom_user.py,51,Maybe required?,
django/tests/auth_tests/models/custom_user.py,67,Admin required fields,
django/tests/auth_tests/models/custom_user.py,103,"The extension user is a simple extension of the built-in user class,",
django/tests/auth_tests/models/custom_user.py,104,adding a required date_of_birth field. This allows us to check for,
django/tests/auth_tests/models/custom_user.py,105,"any hard references to the name ""User"" in forms/handlers etc.",
django/tests/auth_tests/models/is_active.py,15,the is_active attr is provided by AbstractBaseUser,
django/tests/m2m_regress/tests.py,12,Multiple m2m references to model must be distinguished when,
django/tests/m2m_regress/tests.py,13,accessing the relations through an instance attribute.,
django/tests/m2m_regress/tests.py,35,The secret internal related names for self-referential many-to-many,
django/tests/m2m_regress/tests.py,36,fields shouldn't appear in the list when an error is made.,
django/tests/m2m_regress/tests.py,44,Test to ensure that the relationship between two inherited models,
django/tests/m2m_regress/tests.py,45,with a self-referential m2m field maintains symmetry,
django/tests/m2m_regress/tests.py,58,Regression for #11311 - The primary key for models in a m2m relation,
django/tests/m2m_regress/tests.py,59,doesn't have to be an AutoField,
django/tests/m2m_regress/tests.py,66,Regression for #11956 -- You can add an object to a m2m with the,
django/tests/m2m_regress/tests.py,67,base class without causing integrity errors,
django/tests/m2m_regress/tests.py,85,Get same manager twice in a row:,
django/tests/m2m_regress/tests.py,89,Get same manager for different instances,
django/tests/m2m_regress/tests.py,94,Regression for #19236 - an abstract class with a 'split' method,
django/tests/m2m_regress/tests.py,95,causes a TypeError in add_lazy_relation,
django/tests/m2m_regress/tests.py,112,"Regression for #24505 - Multiple ManyToManyFields to same ""to""",
django/tests/m2m_regress/tests.py,113,model with related_name set to '+'.,
django/tests/m2m_regress/models.py,5,"No related name is needed here, since symmetrical relations are not",
django/tests/m2m_regress/models.py,6,explicitly reversible.,
django/tests/m2m_regress/models.py,23,Regression for #11956 -- a many to many to the base class,
django/tests/m2m_regress/models.py,31,A related_name is required on one of the ManyToManyField entries here because,
django/tests/m2m_regress/models.py,32,they are both addressable as reverse relations from Tag.,
django/tests/m2m_regress/models.py,42,Two models both inheriting from a base model with a self-referential m2m field,
django/tests/m2m_regress/models.py,51,"Many-to-Many relation between models, where one of the PK's isn't an Autofield",
django/tests/m2m_regress/models.py,64,Regression for #11226 -- A model with the same name that another one to,
django/tests/m2m_regress/models.py,65,which it has a m2m relation. This shouldn't cause a name clash between,
django/tests/m2m_regress/models.py,66,the automatically created m2m intermediary table FK field names when,
django/tests/m2m_regress/models.py,67,running migrate,
django/tests/m2m_regress/models.py,90,"Regression for #24505 -- Two ManyToManyFields with the same ""to"" model",
django/tests/m2m_regress/models.py,91,and related_name set to '+'.,
django/tests/model_indexes/tests.py,73,'-' for DESC columns should be accounted for in the index name.,
django/tests/model_indexes/tests.py,78,fields may be truncated in the name. db_column is used for naming.,
django/tests/model_indexes/tests.py,83,suffix can't be longer than 3 characters.,
django/tests/model_indexes/tests.py,166,Index with db_tablespace attribute.,
django/tests/model_indexes/tests.py,168,Field with db_tablespace specified on model.,
django/tests/model_indexes/tests.py,170,Field without db_tablespace specified on model.,
django/tests/model_indexes/tests.py,172,Multi-column with db_tablespaces specified on model.,
django/tests/model_indexes/tests.py,174,Multi-column without db_tablespace specified on model.,
django/tests/model_indexes/tests.py,180,Indexes without db_tablespace attribute.,
django/tests/model_indexes/tests.py,184,The DEFAULT_INDEX_TABLESPACE setting can't be tested because,
django/tests/model_indexes/tests.py,185,it's evaluated when the model class is defined. As a,
django/tests/model_indexes/tests.py,186,"consequence, @override_settings doesn't work.",
django/tests/model_indexes/tests.py,194,Field with db_tablespace specified on the model and an index without,
django/tests/model_indexes/tests.py,195,db_tablespace.,
django/tests/order_with_respect_to/base_tests.py,9,Hook to allow subclasses to run these tests with alternate models.,
django/tests/order_with_respect_to/base_tests.py,23,Answers will always be ordered in the order they were inserted.,
django/tests/order_with_respect_to/base_tests.py,32,"We can retrieve the answers related to a particular object, in the",
django/tests/order_with_respect_to/base_tests.py,33,"order they were created, once we have a particular object.",
django/tests/order_with_respect_to/base_tests.py,43,We can retrieve the ordering of the queryset from a particular item.,
django/tests/order_with_respect_to/base_tests.py,48,"It doesn't matter which answer we use to check the order, it will",
django/tests/order_with_respect_to/base_tests.py,49,always be the same.,
django/tests/order_with_respect_to/base_tests.py,61,The ordering can be altered,
django/tests/order_with_respect_to/base_tests.py,64,Swap the last two items in the order list,
django/tests/order_with_respect_to/base_tests.py,69,"By default, the ordering is different from the swapped version",
django/tests/order_with_respect_to/base_tests.py,72,Change the ordering to the swapped version -,
django/tests/order_with_respect_to/base_tests.py,73,this changes the ordering of the queryset.,
django/tests/order_with_respect_to/models.py,34,order_with_respect_to points to a model with a OneToOneField primary key.,
django/tests/test_client/test_conditional_content_removal.py,17,Do nothing for 200 responses.,
django/tests/test_client/test_conditional_content_removal.py,26,Strip content for some status codes.,
django/tests/test_client/test_conditional_content_removal.py,36,Issue #20472,
django/tests/test_client/test_conditional_content_removal.py,48,Strip content for HEAD requests.,
django/tests/test_client/urls.py,47,Async views.,
django/tests/test_client/views.py,227,Don't bother validating the formset unless each form is valid,
django/tests/test_client/tests.py,48,"The data is ignored, but let's check it doesn't crash the system",
django/tests/test_client/tests.py,49,anyway.,
django/tests/test_client/tests.py,53,Check some response details,
django/tests/test_client/tests.py,59,WSGI requires latin-1 encoded strings.,
django/tests/test_client/tests.py,75,Check some response details,
django/tests/test_client/tests.py,85,Check some response details,
django/tests/test_client/tests.py,98,Check some response details,
django/tests/test_client/tests.py,139,Vendored tree JSON content types are accepted.,
django/tests/test_client/tests.py,251,"The response was a 302, and that the attempt to get the redirection",
django/tests/test_client/tests.py,252,location returned 301 when retrieved,
django/tests/test_client/tests.py,343,The multi-value data has been rolled out ok,
django/tests/test_client/tests.py,428,The response was a 404,
django/tests/test_client/tests.py,435,The path in the response includes it (ignore that it's a 404),
django/tests/test_client/tests.py,441,Get the page without logging in. Should result in 302.,
django/tests/test_client/tests.py,445,Log in,
django/tests/test_client/tests.py,449,Request a page that requires a login,
django/tests/test_client/tests.py,463,Get the page without logging in. Should result in 302.,
django/tests/test_client/tests.py,467,Log in,
django/tests/test_client/tests.py,470,Request a page that requires a login,
django/tests/test_client/tests.py,478,Get the page without logging in. Should result in 302.,
django/tests/test_client/tests.py,482,Log in,
django/tests/test_client/tests.py,486,Request a page that requires a login,
django/tests/test_client/tests.py,493,Get the page without logging in. Should result in 302.,
django/tests/test_client/tests.py,497,Log in,
django/tests/test_client/tests.py,500,Request a page that requires a login,
django/tests/test_client/tests.py,508,Get the page without logging in. Should result in 302.,
django/tests/test_client/tests.py,512,Log in,
django/tests/test_client/tests.py,516,Request a page that requires a login,
django/tests/test_client/tests.py,526,Get the page without logging in. Should result in 302.,
django/tests/test_client/tests.py,530,Log in,
django/tests/test_client/tests.py,533,Request a page that requires a login,
django/tests/test_client/tests.py,563,Get the page without logging in. Should result in 302.,
django/tests/test_client/tests.py,567,Log in,
django/tests/test_client/tests.py,570,Request a page that requires a login,
django/tests/test_client/tests.py,577,Log in,
django/tests/test_client/tests.py,580,Request a page that requires a login,
django/tests/test_client/tests.py,585,Log out,
django/tests/test_client/tests.py,588,Request a page that requires a login,
django/tests/test_client/tests.py,594,Log in,
django/tests/test_client/tests.py,597,Request a page that requires a login,
django/tests/test_client/tests.py,602,Log out,
django/tests/test_client/tests.py,605,Request a page that requires a login,
django/tests/test_client/tests.py,620,Get the page without logging in. Should result in 302.,
django/tests/test_client/tests.py,624,Log in,
django/tests/test_client/tests.py,628,Request a page that requires a login,
django/tests/test_client/tests.py,668,Get the page without logging in. Should result in 302.,
django/tests/test_client/tests.py,672,Log in,
django/tests/test_client/tests.py,676,Log in with wrong permissions. Should result in 302.,
django/tests/test_client/tests.py,680,TODO: Log in with right permissions and request the page again,
django/tests/test_client/tests.py,685,Get the page without logging in. Should result in 403.,
django/tests/test_client/tests.py,689,Log in,
django/tests/test_client/tests.py,693,Log in with wrong permissions. Should result in 403.,
django/tests/test_client/tests.py,700,Get the page without logging in. Should result in 302.,
django/tests/test_client/tests.py,704,Log in,
django/tests/test_client/tests.py,708,Log in with wrong permissions. Should result in 302.,
django/tests/test_client/tests.py,712,TODO: Log in with right permissions and request the page again,
django/tests/test_client/tests.py,735,Session value isn't set initially,
django/tests/test_client/tests.py,740,The session was modified,
django/tests/test_client/tests.py,794,Check some response details,
django/tests/test_client/tests.py,857,The normal client allows the post,
django/tests/test_client/tests.py,860,The CSRF-enabled client rejects it,
django/tests/test_client/tests.py,885,A mapping between names of HTTP/1.1 methods and their test views.,
django/tests/sites_tests/tests.py,35,Make sure that get_current() does not return a deleted Site object.,
django/tests/sites_tests/tests.py,43,"After updating a Site object (e.g. via the admin), we shouldn't return a",
django/tests/sites_tests/tests.py,44,bogus value from the SITE_CACHE.,
django/tests/sites_tests/tests.py,54,When all site objects are deleted the cache should also,
django/tests/sites_tests/tests.py,55,be cleared and get_current() should raise a DoesNotExist.,
django/tests/sites_tests/tests.py,63,The correct Site object is returned,
django/tests/sites_tests/tests.py,73,An exception is raised if the sites framework is installed,
django/tests/sites_tests/tests.py,74,but there is no matching Site,
django/tests/sites_tests/tests.py,79,A RequestSite is returned if the sites framework is not installed,
django/tests/sites_tests/tests.py,115,Host header without port,
django/tests/sites_tests/tests.py,120,"Host header with port - match, no fallback without port",
django/tests/sites_tests/tests.py,125,"Host header with port - no match, fallback without port",
django/tests/sites_tests/tests.py,130,Host header with non-matching domain,
django/tests/sites_tests/tests.py,135,Ensure domain for RequestSite always matches host header,
django/tests/sites_tests/tests.py,146,Regression for #17320,
django/tests/sites_tests/tests.py,147,Domain names are not allowed contain whitespace characters,
django/tests/sites_tests/tests.py,187,prime the models.SITE_CACHE,
django/tests/sites_tests/tests.py,191,Site exists in 'default' database so using='other' shouldn't clear.,
django/tests/sites_tests/tests.py,194,using='default' should clear.,
django/tests/sites_tests/tests.py,246,Delete the site created as part of the default migration process.,
django/tests/sites_tests/tests.py,311,Restore original ``SITE_ID`` afterwards.,
django/tests/field_deconstruction/tests.py,16,"First try using a ""normal"" field",
django/tests/field_deconstruction/tests.py,23,Now try with a ForeignKey,
django/tests/field_deconstruction/tests.py,36,With a DEFAULT_DB_TABLESPACE.,
django/tests/field_deconstruction/tests.py,41,With a db_tablespace.,
django/tests/field_deconstruction/tests.py,46,With a db_tablespace equal to DEFAULT_DB_TABLESPACE.,
django/tests/field_deconstruction/tests.py,128,Bug #21785,
django/tests/field_deconstruction/tests.py,170,Test max_length,
django/tests/field_deconstruction/tests.py,197,Test basic pointing,
django/tests/field_deconstruction/tests.py,207,Test swap detection for swappable model,
django/tests/field_deconstruction/tests.py,214,Test nonexistent (for now) model,
django/tests/field_deconstruction/tests.py,220,Test on_delete,
django/tests/field_deconstruction/tests.py,226,Test to_field preservation,
django/tests/field_deconstruction/tests.py,232,Test related_name preservation,
django/tests/field_deconstruction/tests.py,238,Test related_query_name,
django/tests/field_deconstruction/tests.py,247,Test limit_choices_to,
django/tests/field_deconstruction/tests.py,256,Test unique,
django/tests/field_deconstruction/tests.py,266,It doesn't matter that we swapped out user for permission;,
django/tests/field_deconstruction/tests.py,267,there's no validation. We just want to check the setting stuff works.,
django/tests/field_deconstruction/tests.py,277,Test basic pointing,
django/tests/field_deconstruction/tests.py,287,Test swap detection for swappable model,
django/tests/field_deconstruction/tests.py,294,Test nonexistent (for now) model,
django/tests/field_deconstruction/tests.py,300,Test on_delete,
django/tests/field_deconstruction/tests.py,306,Test to_field,
django/tests/field_deconstruction/tests.py,312,Test related_name,
django/tests/field_deconstruction/tests.py,318,Test related_query_name,
django/tests/field_deconstruction/tests.py,327,Test limit_choices_to,
django/tests/field_deconstruction/tests.py,336,Test unique,
django/tests/field_deconstruction/tests.py,377,Test normal,
django/tests/field_deconstruction/tests.py,384,Test swappable,
django/tests/field_deconstruction/tests.py,391,Test through,
django/tests/field_deconstruction/tests.py,397,Test custom db_table,
django/tests/field_deconstruction/tests.py,403,Test related_name,
django/tests/field_deconstruction/tests.py,409,Test related_query_name,
django/tests/field_deconstruction/tests.py,415,Test limit_choices_to,
django/tests/field_deconstruction/tests.py,425,It doesn't matter that we swapped out user for permission;,
django/tests/field_deconstruction/tests.py,426,there's no validation. We just want to check the setting stuff works.,
django/tests/unmanaged_models/tests.py,16,Insert some data into one set of models.,
django/tests/unmanaged_models/tests.py,22,... and pull it out via the other set.,
django/tests/unmanaged_models/models.py,8,All of these models are created in the database by Django.,
django/tests/unmanaged_models/models.py,29,'managed' is True by default. This tests we can set it explicitly.,
django/tests/unmanaged_models/models.py,47,All of these models use the same tables as the previous set (they are shadows,
django/tests/unmanaged_models/models.py,48,"of possibly a subset of the columns). There should be no creation errors,",
django/tests/unmanaged_models/models.py,49,since we have told Django they aren't managed by Django.,
django/tests/unmanaged_models/models.py,76,"To re-use the many-to-many intermediate table, we need to manually set up",
django/tests/unmanaged_models/models.py,77,things up.,
django/tests/unmanaged_models/models.py,100,These next models test the creation (or not) of many to many join tables,
django/tests/unmanaged_models/models.py,101,between managed and unmanaged models. A join table between two unmanaged,
django/tests/unmanaged_models/models.py,102,models shouldn't be automatically created (see #10647).,
django/tests/unmanaged_models/models.py,103,,
django/tests/unmanaged_models/models.py,105,"Firstly, we need some models that will create the tables, purely so that the",
django/tests/unmanaged_models/models.py,106,"tables are created. This is a test setup, not a requirement for unmanaged",
django/tests/unmanaged_models/models.py,107,models.,
django/tests/unmanaged_models/models.py,124,Unmanaged with an m2m to unmanaged: the intermediary table won't be created.,
django/tests/unmanaged_models/models.py,133,Here's an unmanaged model with an m2m to a managed one; the intermediary,
django/tests/unmanaged_models/models.py,134,table *will* be created (unless given a custom `through` as for C02 above).,
django/tests/responses/test_cookie.py,17,There's a timing weakness in this test; The expected result for,
django/tests/responses/test_cookie.py,18,max-age requires that there be a very slight difference between the,
django/tests/responses/test_cookie.py,19,evaluated expiration time and the time evaluated in set_cookie(). If,
django/tests/responses/test_cookie.py,20,"this difference doesn't exist, the cookie time will be 1 second",
django/tests/responses/test_cookie.py,21,larger. The sleep guarantees that there will be a time difference.,
django/tests/responses/test_cookie.py,54,assertIn accounts for slight time dependency (#23450),
django/tests/m2m_through_regress/tests.py,24,normal intermediate model,
django/tests/m2m_through_regress/tests.py,29,intermediate model with custom id column,
django/tests/m2m_through_regress/tests.py,132,We are testing if wrong objects get deleted due to using wrong,
django/tests/m2m_through_regress/tests.py,133,"field value in m2m queries. So, it is essential that the pk",
django/tests/m2m_through_regress/tests.py,134,numberings do not match.,
django/tests/m2m_through_regress/tests.py,135,Create one intentionally unused driver to mix up the autonumbering,
django/tests/m2m_through_regress/tests.py,137,And two intentionally unused cars.,
django/tests/m2m_through_regress/tests.py,163,Low level tests for _add_items and _remove_items. We test these methods,
django/tests/m2m_through_regress/tests.py,164,"because .add/.remove aren't available for m2m fields with through, but",
django/tests/m2m_through_regress/tests.py,165,through is the only way to set to_field currently. We do want to make,
django/tests/m2m_through_regress/tests.py,166,sure these methods are ready if the ability to use .add or .remove with,
django/tests/m2m_through_regress/tests.py,167,to_field relations is added some day.,
django/tests/m2m_through_regress/tests.py,173,Yikes - barney is going to drive...,
django/tests/m2m_through_regress/models.py,5,Forward declared intermediate model,
django/tests/m2m_through_regress/models.py,15,using custom id column to test ticket #11107,
django/tests/m2m_through_regress/models.py,35,Membership object defined as a class,
django/tests/m2m_through_regress/models.py,43,Using to_field on the through model,
django/tests/m2m_through_regress/models.py,70,Through models using multi-table inheritance,
django/tests/queryset_pickle/tests.py,14,make sure the defaults are working (#20158),
django/tests/queryset_pickle/tests.py,42,Ticket #17776,
django/tests/queryset_pickle/tests.py,46,"Exceptions are not equal to equivalent instances of themselves, so",
django/tests/queryset_pickle/tests.py,47,"can't just use assertEqual(original, unpickled)",
django/tests/queryset_pickle/tests.py,60,ForwardManyToOneDescriptor,
django/tests/queryset_pickle/tests.py,63,ForwardOneToOneDescriptor,
django/tests/queryset_pickle/tests.py,82,"Also, deferred dynamic model works",
django/tests/queryset_pickle/tests.py,116,With related field (#14515),
django/tests/queryset_pickle/tests.py,125,First pickling,
django/tests/queryset_pickle/tests.py,129,Second pickling,
django/tests/queryset_pickle/tests.py,134,Prefetch shouldn't affect the fetch-on-pickle behavior of the,
django/tests/queryset_pickle/tests.py,135,queryset passed to it.,
django/tests/queryset_pickle/tests.py,157,evaluate QuerySet,
django/tests/queryset_pickle/tests.py,194,evaluate QuerySet.,
django/tests/queryset_pickle/tests.py,206,evaluate QuerySet.,
django/tests/queryset_pickle/tests.py,211,Happening.when has a callable default of datetime.datetime.now.,
django/tests/queryset_pickle/models.py,52,"To test pickling we need a class that isn't defined on module, but",
django/tests/queryset_pickle/models.py,53,"is still available from app-cache. So, the Container class moves",
django/tests/queryset_pickle/models.py,54,SomeModel outside of module level,
django/tests/messages_tests/urls.py,25,Don't default to False here to test that it defaults to False if,
django/tests/messages_tests/urls.py,26,unspecified.,
django/tests/messages_tests/test_fallback.py,46,Set initial cookie data.,
django/tests/messages_tests/test_fallback.py,49,Overwrite the _get method of the fallback storage to prove it is not,
django/tests/messages_tests/test_fallback.py,50,used (it would cause a TypeError: 'NoneType' object is not callable).,
django/tests/messages_tests/test_fallback.py,57,Overwrite the _get method of the fallback storage to prove it is not,
django/tests/messages_tests/test_fallback.py,58,used (it would cause a TypeError: 'NoneType' object is not callable).,
django/tests/messages_tests/test_fallback.py,68,Set initial cookie and session data.,
django/tests/messages_tests/test_fallback.py,79,Set initial cookie and session data.,
django/tests/messages_tests/test_fallback.py,90,Set initial cookie and session data.,
django/tests/messages_tests/test_fallback.py,93,"When updating, previously used but no longer needed backends are",
django/tests/messages_tests/test_fallback.py,94,flushed.,
django/tests/messages_tests/test_fallback.py,111,Overwrite the _store method of the fallback storage to prove it isn't,
django/tests/messages_tests/test_fallback.py,112,used (it would cause a TypeError: 'NoneType' object is not callable).,
django/tests/messages_tests/test_fallback.py,129,see comment in CookieTests.test_cookie_max_length(),
django/tests/messages_tests/base.py,28,LEVEL_TAGS is a constant defined in the,
django/tests/messages_tests/base.py,29,"django.contrib.messages.storage.base module, so after changing",
django/tests/messages_tests/base.py,30,"settings.MESSAGE_TAGS, update that constant also.",
django/tests/messages_tests/base.py,132,Simulates a read,
django/tests/messages_tests/base.py,142,Simulates a read,
django/tests/messages_tests/base.py,183,there shouldn't be any messages on second GET request,
django/tests/messages_tests/base.py,290,"After iterating the storage engine directly, the used flag is set.",
django/tests/messages_tests/base.py,293,The data does not disappear because it has been iterated.,
django/tests/messages_tests/base.py,303,get_level works even with no storage on the request.,
django/tests/messages_tests/base.py,307,get_level returns the default level if it hasn't been set.,
django/tests/messages_tests/base.py,312,Only messages of sufficient level get recorded.,
django/tests/messages_tests/test_cookie.py,21,Truncate the first character so that the hash is invalid.,
django/tests/messages_tests/test_cookie.py,32,"Get a list of cookies, excluding ones with a max-age of 0 (because",
django/tests/messages_tests/test_cookie.py,33,they have been marked for deletion).,
django/tests/messages_tests/test_cookie.py,54,Set initial data.,
django/tests/messages_tests/test_cookie.py,57,The message contains what's expected.,
django/tests/messages_tests/test_cookie.py,66,Test before the messages have been consumed,
django/tests/messages_tests/test_cookie.py,78,Test deletion of the cookie (storing with an empty value) after the messages have been consumed,
django/tests/messages_tests/test_cookie.py,83,Iterate through the storage to simulate consumption of messages.,
django/tests/messages_tests/test_cookie.py,92,Set initial (invalid) data.,
django/tests/messages_tests/test_cookie.py,95,The message actually contains what we expect.,
django/tests/messages_tests/test_cookie.py,106,"When storing as a cookie, the cookie has constant overhead of approx",
django/tests/messages_tests/test_cookie.py,107,"54 chars, and each message has a constant overhead of about 37 chars",
django/tests/messages_tests/test_cookie.py,108,and a variable overhead of zero in the best case. We aim for a message,
django/tests/messages_tests/test_cookie.py,109,"size which will fit 4 messages into the cookie, but not 5.",
django/tests/messages_tests/test_cookie.py,110,See also FallbackTest.test_session_fallback,
django/tests/messages_tests/test_cookie.py,158,RemovedInDjango40Warning: pre-Django 3.1 hashes will be invalid.,
django/tests/messages_tests/test_cookie.py,161,Encode/decode a message using the pre-Django 3.1 hash.,
django/tests/humanize_tests/tests.py,12,Mock out datetime in some tests so they don't fail occasionally when they,
django/tests/humanize_tests/tests.py,13,run too slow. Use a fixed datetime for datetime.now(). DST change in,
django/tests/humanize_tests/tests.py,14,America/Chicago (the default time zone) happened on March 11th in 2012.,
django/tests/humanize_tests/tests.py,25,equals now.replace(tzinfo=utc),
django/tests/humanize_tests/tests.py,97,Regression for #17414,
django/tests/humanize_tests/tests.py,102,Positive integers.,
django/tests/humanize_tests/tests.py,114,Negative integers.,
django/tests/humanize_tests/tests.py,134,Positive integers.,
django/tests/humanize_tests/tests.py,143,Negative integers.,
django/tests/humanize_tests/tests.py,179,Can be today or yesterday,
django/tests/humanize_tests/tests.py,182,Can be today or tomorrow,
django/tests/humanize_tests/tests.py,186,As 24h of difference they will never be the same,
django/tests/humanize_tests/tests.py,190,Regression for #18504,
django/tests/humanize_tests/tests.py,191,This is 2012-03-08HT19:30:00-06:00 in America/Chicago,
django/tests/humanize_tests/tests.py,254,"Because of the DST change, 2 days and 6 hours after the chosen",
django/tests/humanize_tests/tests.py,255,date in naive arithmetic is only 2 days and 5 hours after in,
django/tests/humanize_tests/tests.py,256,aware arithmetic.,
django/tests/humanize_tests/tests.py,325,"""%(delta)s ago"" translations",
django/tests/humanize_tests/tests.py,332,"""%(delta)s from now"" translations",
django/tests/humanize_tests/tests.py,357,Choose a language with different naturaltime-past/naturaltime-future translations,
django/tests/admin_scripts/configured_settings_manage.py,1,!/usr/bin/env python,
django/tests/admin_scripts/tests.py,44,"os.path.realpath() is required for temporary directories on macOS,",
django/tests/admin_scripts/tests.py,45,where `/var` is a symlink to `/private/var`.,
django/tests/admin_scripts/tests.py,97,The base dir for Django's tests is one level up.,
django/tests/admin_scripts/tests.py,99,The base dir for Django is one level above the test dir. We don't use,
django/tests/admin_scripts/tests.py,100,"`import django` to figure that out, so we don't pick up a Django",
django/tests/admin_scripts/tests.py,101,from site-packages or similar.,
django/tests/admin_scripts/tests.py,105,Define a temporary environment for the subprocess,
django/tests/admin_scripts/tests.py,108,Set the test environment,
django/tests/admin_scripts/tests.py,165,,
django/tests/admin_scripts/tests.py,166,DJANGO ADMIN TESTS,
django/tests/admin_scripts/tests.py,167,This first series of test classes checks the environment processing,
django/tests/admin_scripts/tests.py,168,of the django-admin.py script,
django/tests/admin_scripts/tests.py,169,,
django/tests/admin_scripts/tests.py,627,,
django/tests/admin_scripts/tests.py,628,MANAGE.PY TESTS,
django/tests/admin_scripts/tests.py,629,This next series of test classes checks the environment processing,
django/tests/admin_scripts/tests.py,630,of the generated manage.py script,
django/tests/admin_scripts/tests.py,631,,
django/tests/admin_scripts/tests.py,1211,"No ""CommandError: "" part",
django/tests/admin_scripts/tests.py,1283,"Only 4 characters, all of which could be in an ipv6 address",
django/tests/admin_scripts/tests.py,1287,Uses only characters that could be in an ipv6 address,
django/tests/admin_scripts/tests.py,1305,You have # ...,
django/tests/admin_scripts/tests.py,1392,,
django/tests/admin_scripts/tests.py,1393,COMMAND PROCESSING TESTS,
django/tests/admin_scripts/tests.py,1394,"user-space commands are correctly handled - in particular, arguments to",
django/tests/admin_scripts/tests.py,1395,the commands are correctly parsed and processed.,
django/tests/admin_scripts/tests.py,1396,,
django/tests/admin_scripts/tests.py,1421,"It's possible one outputs on stderr and the other on stdout, hence the set",
django/tests/admin_scripts/tests.py,1459,Command-specific options like --tag appear before options common to,
django/tests/admin_scripts/tests.py,1460,all commands like --version.,
django/tests/admin_scripts/tests.py,1479,Default palette has color.,
django/tests/admin_scripts/tests.py,1637,This will trigger TypeError,
django/tests/admin_scripts/tests.py,1639,If the Exception is not CommandError it should always,
django/tests/admin_scripts/tests.py,1640,raise the original exception.,
django/tests/admin_scripts/tests.py,1644,If the Exception is CommandError and --traceback is not present,
django/tests/admin_scripts/tests.py,1645,this command should raise a SystemExit and don't print any,
django/tests/admin_scripts/tests.py,1646,traceback to the stderr.,
django/tests/admin_scripts/tests.py,1655,If the Exception is CommandError and --traceback is present,
django/tests/admin_scripts/tests.py,1656,this command should raise the original CommandError as if it,
django/tests/admin_scripts/tests.py,1657,were not a CommandError.,
django/tests/admin_scripts/tests.py,1686,Test connections have been closed,
django/tests/admin_scripts/tests.py,1896,running again..,
django/tests/admin_scripts/tests.py,1949,running again..,
django/tests/admin_scripts/tests.py,2062,We're using a custom command so we need the alternate settings,
django/tests/admin_scripts/tests.py,2166,Use a subdirectory so it is outside the PYTHONPATH.,
django/tests/admin_scripts/tests.py,2187,Attributes from django.conf.Settings don't appear.,
django/tests/admin_scripts/tests.py,2194,Attributes from django.conf.UserSettingsHolder don't appear.,
django/tests/admin_scripts/tests.py,2198,Custom default settings appear.,
django/tests/admin_scripts/configured_dynamic_settings_manage.py,1,!/usr/bin/env python,
django/tests/admin_scripts/custom_templates/app_template/api.py,1,your API code,
django/tests/admin_scripts/custom_templates/project_template/additional_dir/additional_file.py,1,some file for {{ project_name }} test project,
django/tests/admin_scripts/custom_templates/project_template/additional_dir/extra.py,1,this file uses the {{ extra }} variable,
django/tests/admin_scripts/custom_templates/project_template/additional_dir/localized.py,1,Regression for #22699.,
django/tests/admin_scripts/custom_templates/project_template/additional_dir/localized.py,2,"Generated at {% now ""DATE_FORMAT"" %}",
django/tests/admin_scripts/custom_templates/project_template/project_name/settings.py,1,Django settings for {{ project_name }} test project.,
django/tests/admin_scripts/app_with_import/models.py,5,Regression for #13368. This is an example of a model,
django/tests/admin_scripts/app_with_import/models.py,6,that imports a class that has an abstract base class.,
django/tests/admin_scripts/broken_app/models.py,1,NOQA,
django/tests/backends/test_utils.py,20,"""user"".""table"" syntax",
django/tests/backends/test_utils.py,67,Use a new cursor because in MySQL a procedure can't be used in the,
django/tests/backends/test_utils.py,68,same cursor in which it was created.,
django/tests/backends/tests.py,77,"last_executed_query() interpolate all parameters, in most cases it is",
django/tests/backends/tests.py,78,not equal to QuerySet.query.,
django/tests/backends/tests.py,154,"A full flush is expensive to the full test, so we dig into the",
django/tests/backends/tests.py,155,internals to generate the likely offending SQL and run it manually,
django/tests/backends/tests.py,157,Some convenience aliases,
django/tests/backends/tests.py,180,Create an object with a manually specified PK,
django/tests/backends/tests.py,183,Reset the sequences for the database,
django/tests/backends/tests.py,189,"If we create a new object now, it should have a PK greater",
django/tests/backends/tests.py,190,than the PK we specified manually.,
django/tests/backends/tests.py,195,"This test needs to run outside of a transaction, otherwise closing the",
django/tests/backends/tests.py,196,connection would implicitly rollback and cause problems during teardown.,
django/tests/backends/tests.py,201,"Unfortunately with sqlite3 the in-memory test database cannot be closed,",
django/tests/backends/tests.py,202,and so it cannot be re-opened during testing.,
django/tests/backends/tests.py,272,Test cursor.executemany #4896,
django/tests/backends/tests.py,281,Test executemany with params=[] does nothing #4765,
django/tests/backends/tests.py,287,Test executemany accepts iterators #10320,
django/tests/backends/tests.py,294,same test for DebugCursorWrapper,
django/tests/backends/tests.py,300,Support pyformat style passing of parameters #10070,
django/tests/backends/tests.py,307,Support pyformat style passing of parameters #10070,
django/tests/backends/tests.py,323,same test for DebugCursorWrapper,
django/tests/backends/tests.py,328,"fetchone, fetchmany, fetchall return strings as unicode objects #6254",
django/tests/backends/tests.py,357,"As password is probably wrong, a database exception is expected",
django/tests/backends/tests.py,365,Ticket #13630,
django/tests/backends/tests.py,395,Both InterfaceError and ProgrammingError seem to be used when,
django/tests/backends/tests.py,396,"accessing closed cursor (psycopg2 has InterfaceError, rest seem",
django/tests/backends/tests.py,397,to use ProgrammingError).,
django/tests/backends/tests.py,399,"cursor should be closed, so no queries should be possible.",
django/tests/backends/tests.py,405,"There isn't a generic way to test that cursors are closed, but",
django/tests/backends/tests.py,406,psycopg2 offers us a way to check that by closed attribute.,
django/tests/backends/tests.py,407,"So, run only on psycopg2 for that reason.",
django/tests/backends/tests.py,412,Unfortunately with sqlite3 the in-memory test database cannot be closed.,
django/tests/backends/tests.py,418,Open a connection to the database.,
django/tests/backends/tests.py,421,Emulate a connection close by the database.,
django/tests/backends/tests.py,423,Even then is_usable() should not raise an exception.,
django/tests/backends/tests.py,427,Clean up the mess created by connection._close(). Since the,
django/tests/backends/tests.py,428,"connection is already closed, this crashes on some backends.",
django/tests/backends/tests.py,465,Unfortunately with sqlite3 the in-memory test database cannot be closed.,
django/tests/backends/tests.py,476,Initialize the connection and clear initialization statements.,
django/tests/backends/tests.py,508,These tests aren't conditional because it would require differentiating,
django/tests/backends/tests.py,509,between MySQL+InnoDB and MySQL+MYISAM (something we currently can't do).,
django/tests/backends/tests.py,515,Create a Reporter.,
django/tests/backends/tests.py,530,Now that we know this backend supports integrity checks we make sure,
django/tests/backends/tests.py,531,constraints are also enforced for proxy  Refs #17519,
django/tests/backends/tests.py,545,Create an Article.,
django/tests/backends/tests.py,547,Retrieve it from the DB,
django/tests/backends/tests.py,556,Now that we know this backend supports integrity checks we make sure,
django/tests/backends/tests.py,557,constraints are also enforced for proxy  Refs #17519,
django/tests/backends/tests.py,558,Create another article,
django/tests/backends/tests.py,565,Retrieve the second article from the DB,
django/tests/backends/tests.py,577,Create an Article.,
django/tests/backends/tests.py,583,Retrieve it from the DB,
django/tests/backends/tests.py,600,Create an Article.,
django/tests/backends/tests.py,606,Retrieve it from the DB,
django/tests/backends/tests.py,621,Create an Article.,
django/tests/backends/tests.py,627,Retrieve it from the DB,
django/tests/backends/tests.py,646,Map connections by id because connections with identical aliases,
django/tests/backends/tests.py,647,have the same hash.,
django/tests/backends/tests.py,654,Passing django.db.connection between threads doesn't work while,
django/tests/backends/tests.py,655,connections[DEFAULT_DB_ALIAS] does.,
django/tests/backends/tests.py,658,Allow thread sharing so the connection can be closed by the,
django/tests/backends/tests.py,659,main thread.,
django/tests/backends/tests.py,669,Each created connection got different inner connection.,
django/tests/backends/tests.py,672,Finish by closing the connections opened by the other threads,
django/tests/backends/tests.py,673,(the connection opened in the main thread will automatically be,
django/tests/backends/tests.py,674,closed on teardown).,
django/tests/backends/tests.py,685,Map connections by id because connections with identical aliases,
django/tests/backends/tests.py,686,have the same hash.,
django/tests/backends/tests.py,694,Allow thread sharing so the connection can be closed by the,
django/tests/backends/tests.py,695,main thread.,
django/tests/backends/tests.py,709,Finish by closing the connections opened by the other threads,
django/tests/backends/tests.py,710,(the connection opened in the main thread will automatically be,
django/tests/backends/tests.py,711,closed on teardown).,
django/tests/backends/tests.py,736,"Without touching thread sharing, which should be False by default.",
django/tests/backends/tests.py,739,Forbidden!,
django/tests/backends/tests.py,743,After calling inc_thread_sharing() on the connection.,
django/tests/backends/tests.py,748,All good,
django/tests/backends/tests.py,758,"First, without explicitly enabling the connection for sharing.",
django/tests/backends/tests.py,773,The exception was raised,
django/tests/backends/tests.py,776,"Then, with explicitly enabling the connection for sharing.",
django/tests/backends/tests.py,785,Enable thread sharing,
django/tests/backends/tests.py,796,No exception was raised,
django/tests/backends/postgresql/test_server_side_cursors.py,41,Open a server-side cursor,
django/tests/backends/postgresql/test_server_side_cursors.py,72,Open a server-side cursor,
django/tests/backends/postgresql/test_server_side_cursors.py,77,Open a server-side cursor,
django/tests/backends/postgresql/test_server_side_cursors.py,86,Close server-side cursor,
django/tests/backends/postgresql/tests.py,34,Now assume the 'postgres' db isn't available,
django/tests/backends/postgresql/tests.py,78,Ensure the database default time zone is different than,
django/tests/backends/postgresql/tests.py,79,the time zone in new_connection.settings_dict. We can,
django/tests/backends/postgresql/tests.py,80,get the default time zone by reset & show.,
django/tests/backends/postgresql/tests.py,88,"Invalidate timezone name cache, because the setting_changed",
django/tests/backends/postgresql/tests.py,89,handler cannot know about new_connection.,
django/tests/backends/postgresql/tests.py,92,Fetch a new connection with the new_tz as default,
django/tests/backends/postgresql/tests.py,93,"time zone, run a query and rollback.",
django/tests/backends/postgresql/tests.py,98,Now let's see if the rollback rolled back the SET TIME ZONE.,
django/tests/backends/postgresql/tests.py,116,Open a database connection.,
django/tests/backends/postgresql/tests.py,132,"Since this is a django.test.TestCase, a transaction is in progress",
django/tests/backends/postgresql/tests.py,133,and the isolation level isn't reported as 0. This test assumes that,
django/tests/backends/postgresql/tests.py,134,PostgreSQL is configured with the default isolation level.,
django/tests/backends/postgresql/tests.py,136,"Check the level on the psycopg2 connection, not the Django wrapper.",
django/tests/backends/postgresql/tests.py,143,Start a transaction so the isolation level isn't reported as 0.,
django/tests/backends/postgresql/tests.py,145,"Check the level on the psycopg2 connection, not the Django wrapper.",
django/tests/backends/postgresql/test_creation.py,11,NOQA,
django/tests/backends/postgresql/test_creation.py,80,"Simulate test database creation raising ""database already exists""",
django/tests/backends/postgresql/test_creation.py,84,"SystemExit is raised if the user answers ""no"" to the",
django/tests/backends/postgresql/test_creation.py,85,prompt asking if it's okay to delete the test database.,
django/tests/backends/postgresql/test_creation.py,87,"""Database already exists"" error is ignored when keepdb is on",
django/tests/backends/postgresql/test_creation.py,89,Simulate test database creation raising unexpected error,
django/tests/backends/postgresql/test_creation.py,96,"Simulate test database creation raising ""insufficient privileges"".",
django/tests/backends/postgresql/test_creation.py,97,An error shouldn't appear when keepdb is on and the database already,
django/tests/backends/postgresql/test_creation.py,98,exists.,
django/tests/backends/sqlite/tests.py,24,"Ignore ""SQLite is too old"" when running tests on another database.",
django/tests/backends/sqlite/tests.py,67,Aggregate functions accept multiple arguments when DISTINCT isn't,
django/tests/backends/sqlite/tests.py,68,"used, e.g. GROUP_CONCAT().",
django/tests/backends/sqlite/tests.py,207,This shouldn't raise an exception (#17158),
django/tests/backends/sqlite/tests.py,214,The implementation of last_executed_queries isn't optimal. It's,
django/tests/backends/sqlite/tests.py,215,worth testing that parameters are quoted (#14091).,
django/tests/backends/sqlite/tests.py,220,Note that the single quote is repeated,
django/tests/backends/sqlite/tests.py,225,If SQLITE_MAX_VARIABLE_NUMBER (default = 999) has been changed to be,
django/tests/backends/sqlite/tests.py,226,"greater than SQLITE_MAX_COLUMN (default = 2000), last_executed_query",
django/tests/backends/sqlite/tests.py,227,can hit the SQLITE_MAX_COLUMN limit (#26063).,
django/tests/backends/sqlite/tests.py,231,This should not raise an exception.,
django/tests/backends/sqlite/tests.py,242,'%s' escaping support for sqlite3 (#13648).,
django/tests/backends/sqlite/tests.py,246,response should be an non-zero integer,
django/tests/backends/mysql/tests.py,65,Upper case values are also accepted in 'isolation_level'.,
django/tests/backends/mysql/tests.py,74,"If not specified in settings, the default is read committed.",
django/tests/backends/mysql/test_creation.py,27,"Simulate test database creation raising ""database exists""",
django/tests/backends/mysql/test_creation.py,32,"SystemExit is raised if the user answers ""no"" to the",
django/tests/backends/mysql/test_creation.py,33,prompt asking if it's okay to delete the test database.,
django/tests/backends/mysql/test_creation.py,35,"""Database exists"" shouldn't appear when keepdb is on",
django/tests/backends/mysql/test_creation.py,41,Simulate test database creation raising unexpected error,
django/tests/backends/oracle/test_introspection.py,27,"Recreate model, because adding identity is impossible.",
django/tests/backends/oracle/test_operations.py,14,Oracle restricts the number of parameters in a query.,
django/tests/backends/oracle/test_operations.py,17,Each field is a parameter for each object.,
django/tests/backends/oracle/tests.py,44,The query succeeds without errors - pre #18465 this,
django/tests/backends/oracle/tests.py,45,wasn't the case.,
django/tests/backends/oracle/tests.py,62,"""ORA-1403: no data found"" exception is hidden by Oracle OCI library",
django/tests/backends/oracle/tests.py,63,when an INSERT statement is used with a RETURNING clause (see #28859).,
django/tests/backends/oracle/tests.py,65,"Create trigger that raises ""ORA-1403: no data found"".",
django/tests/backends/oracle/tests.py,92,"Database exception: ""ORA-01017: invalid username/password"" is",
django/tests/backends/oracle/tests.py,93,expected.,
django/tests/backends/oracle/test_creation.py,17,"Raise ""user already exists"" only in test user creation",
django/tests/backends/oracle/test_creation.py,32,Mocked to avoid test user password changed,
django/tests/backends/oracle/test_creation.py,41,"Simulate test database creation raising ""tablespace already exists""",
django/tests/backends/oracle/test_creation.py,45,"SystemExit is raised if the user answers ""no"" to the",
django/tests/backends/oracle/test_creation.py,46,prompt asking if it's okay to delete the test tablespace.,
django/tests/backends/oracle/test_creation.py,48,"""Tablespace already exists"" error is ignored when keepdb is on",
django/tests/backends/oracle/test_creation.py,50,Simulate test database creation raising unexpected error,
django/tests/backends/oracle/test_creation.py,61,"Simulate test user creation raising ""user already exists""",
django/tests/backends/oracle/test_creation.py,65,"SystemExit is raised if the user answers ""no"" to the",
django/tests/backends/oracle/test_creation.py,66,prompt asking if it's okay to delete the test user.,
django/tests/backends/oracle/test_creation.py,68,"""User already exists"" error is ignored when keepdb is on",
django/tests/backends/oracle/test_creation.py,70,Simulate test user creation raising unexpected error,
django/tests/backends/oracle/test_creation.py,82,Simulate test database creation with Oracle Managed File (OMF),
django/tests/backends/oracle/test_creation.py,83,tablespaces.,
django/tests/backends/oracle/test_creation.py,89,Datafile names shouldn't appear.,
django/tests/backends/oracle/test_creation.py,92,REUSE cannot be used with OMF.,
django/tests/backends/base/test_base.py,49,executemany() must use an update query. Make sure it does nothing,
django/tests/backends/base/test_base.py,50,by putting a false condition in the WHERE clause.,
django/tests/backends/base/test_base.py,106,This alias shortens the next line.,
django/tests/backends/base/test_creation.py,16,Get a copy of the default connection. (Can't use django.db.connection,
django/tests/backends/base/test_creation.py,17,because it'll modify the default connection itself.),
django/tests/backends/base/test_creation.py,27,A test db name isn't set.,
django/tests/backends/base/test_creation.py,36,A regular test db name is set.,
django/tests/backends/base/test_creation.py,44,A test db name prefixed with TEST_DATABASE_PREFIX is set.,
django/tests/backends/base/test_creation.py,86,deserialize_db_from_string() handles circular references.,
django/tests/backends/base/test_creation.py,108,serialize_db_to_string() and deserialize_db_from_string() handles,
django/tests/backends/base/test_creation.py,109,self references.,
django/tests/backends/base/test_creation.py,114,Serialize objects.,
django/tests/backends/base/test_creation.py,116,"serialize_db_to_string() serializes only migrated apps, so mark",
django/tests/backends/base/test_creation.py,117,the backends app as migrated.,
django/tests/backends/base/test_creation.py,122,Deserialize objects.,
django/tests/backends/base/test_creation.py,130,serialize_db_to_string() and deserialize_db_from_string() handles,
django/tests/backends/base/test_creation.py,131,circular references for models with natural keys.,
django/tests/backends/base/test_creation.py,136,Serialize objects.,
django/tests/backends/base/test_creation.py,138,"serialize_db_to_string() serializes only migrated apps, so mark",
django/tests/backends/base/test_creation.py,139,the backends app as migrated.,
django/tests/backends/base/test_creation.py,145,Deserialize objects.,
django/tests/i18n/test_compilation.py,48,put file in read-only mode,
django/tests/i18n/test_compilation.py,60,Ticket #11240,
django/tests/i18n/test_compilation.py,107,`call_command` bypasses the parser; by calling,
django/tests/i18n/test_compilation.py,108,`execute_from_command_line` with the help subcommand we,
django/tests/i18n/test_compilation.py,109,ensure that there are no issues with the parser itself.,
django/tests/i18n/test_compilation.py,139,Reuse the exclude directory since it contains some locale fixtures.,
django/tests/i18n/test_compilation.py,178,po file contains wrong po formatting.,
django/tests/i18n/test_compilation.py,183,po file contains invalid msgstr content (triggers non-ascii error content).,
django/tests/i18n/test_compilation.py,184,Make sure the output of msgfmt is unaffected by the current locale.,
django/tests/i18n/test_compilation.py,207,flush cache or test will be useless,
django/tests/i18n/test_percents.py,105,"tests ""%s""",
django/tests/i18n/test_percents.py,118,"tests ""% o""",
django/tests/i18n/utils.py,48,"Resolve symlinks, if any, in test directory paths.",
django/tests/i18n/utils.py,51,Step out of the temporary working tree before removing it to avoid,
django/tests/i18n/utils.py,52,deletion problems on Windows. Cleanup actions registered with,
django/tests/i18n/utils.py,53,addCleanup() are called in reverse so preserve this ordering.,
django/tests/i18n/tests.py,62,Populate _format_cache with temporary values,
django/tests/i18n/tests.py,140,Internal _catalog can query subcatalogs (from different po files).,
django/tests/i18n/tests.py,209,It should be possible to compare *_lazy objects.,
django/tests/i18n/tests.py,359,With > 2 characters after the dash.,
django/tests/i18n/tests.py,362,With private use subtag (x-informal).,
django/tests/i18n/tests.py,393,here we rely on .split() being called inside the _fetch(),
django/tests/i18n/tests.py,394,in trans_real.translation(),
django/tests/i18n/tests.py,409,May raise RuntimeError if translation.activate() isn't thread-safe.,
django/tests/i18n/tests.py,411,make sure sideeffect_str actually added a new translation,
django/tests/i18n/tests.py,441,Uses DATE_FORMAT by default,
django/tests/i18n/tests.py,442,Uses TIME_FORMAT by default,
django/tests/i18n/tests.py,482,This unusual grouping/force_grouping combination may be triggered by the intcomma filter (#17414),
django/tests/i18n/tests.py,487,date filter,
django/tests/i18n/tests.py,612,We shouldn't change the behavior of the floatformat filter re:,
django/tests/i18n/tests.py,613,thousand separator and grouping when USE_L10N is False even,
django/tests/i18n/tests.py,614,"if the USE_THOUSAND_SEPARATOR, NUMBER_GROUPING and",
django/tests/i18n/tests.py,615,THOUSAND_SEPARATOR settings are specified,
django/tests/i18n/tests.py,629,Even a second time (after the format has been cached)...,
django/tests/i18n/tests.py,634,Even a second time (after the format has been cached)...,
django/tests/i18n/tests.py,639,Catalan locale,
django/tests/i18n/tests.py,791,Russian locale (with E as month),
django/tests/i18n/tests.py,859,English locale,
django/tests/i18n/tests.py,1026,"Checking for the localized ""products_delivered"" field",
django/tests/i18n/tests.py,1048,Non-strings are untouched,
django/tests/i18n/tests.py,1052,Russian locale has non-breaking space (\xa0) as thousand separator,
django/tests/i18n/tests.py,1053,Usual space is accepted too when sanitizing inputs,
django/tests/i18n/tests.py,1065,Suspicion that user entered dot as decimal separator (#22171),
django/tests/i18n/tests.py,1079,Invalid output,
django/tests/i18n/tests.py,1085,Importing some format modules so that we can compare the returned,
django/tests/i18n/tests.py,1086,modules with these expected modules,
django/tests/i18n/tests.py,1092,Should return the correct default module when no setting is set,
django/tests/i18n/tests.py,1095,"When the setting is a string, should return the given module and",
django/tests/i18n/tests.py,1096,the default module,
django/tests/i18n/tests.py,1101,"When setting is a list of strings, should return the given",
django/tests/i18n/tests.py,1102,modules and the default module,
django/tests/i18n/tests.py,1124,second try,
django/tests/i18n/tests.py,1251,Good headers,
django/tests/i18n/tests.py,1267,Bad headers,
django/tests/i18n/tests.py,1306,This test assumes there won't be a Django translation to a US,
django/tests/i18n/tests.py,1307,"variation of the Spanish language, a safe assumption. When the",
django/tests/i18n/tests.py,1308,"user sets it as the preferred language, the main 'es'",
django/tests/i18n/tests.py,1309,translation should be selected instead.,
django/tests/i18n/tests.py,1313,This tests the following scenario: there isn't a main language (zh),
django/tests/i18n/tests.py,1314,translation of Django but there is a translation to variation (zh-hans),
django/tests/i18n/tests.py,1315,"the user sets zh-hans as the preferred language, it should be selected",
django/tests/i18n/tests.py,1316,by Django without falling back nor ignoring it.,
django/tests/i18n/tests.py,1392,This test assumes there won't be a Django translation to a US,
django/tests/i18n/tests.py,1393,"variation of the Spanish language, a safe assumption. When the",
django/tests/i18n/tests.py,1394,"user sets it as the preferred language, the main 'es'",
django/tests/i18n/tests.py,1395,translation should be selected instead.,
django/tests/i18n/tests.py,1400,This tests the following scenario: there isn't a main language (zh),
django/tests/i18n/tests.py,1401,translation of Django but there is a translation to variation (zh-hans),
django/tests/i18n/tests.py,1402,"the user sets zh-hans as the preferred language, it should be selected",
django/tests/i18n/tests.py,1403,by Django without falling back nor ignoring it.,
django/tests/i18n/tests.py,1521,Original translation.,
django/tests/i18n/tests.py,1524,Different translation.,
django/tests/i18n/tests.py,1526,Force refreshing translations.,
django/tests/i18n/tests.py,1529,Doesn't work because it's added later in the list.,
django/tests/i18n/tests.py,1533,Force refreshing translations.,
django/tests/i18n/tests.py,1536,Unless the original is removed from the list.,
django/tests/i18n/tests.py,1594,A language with no translation catalogs should fallback to the,
django/tests/i18n/tests.py,1595,untranslated string.,
django/tests/i18n/tests.py,1635,Regression test for #5241,
django/tests/i18n/tests.py,1689,A page starting with /de* shouldn't match the 'de' language code.,
django/tests/i18n/tests.py,1699,A match for /group1/group2/ must exist for this to act as a,
django/tests/i18n/tests.py,1700,regression test.,
django/tests/i18n/tests.py,1737,Specifying encoding is not supported (Django enforces UTF-8),
django/tests/i18n/tests.py,1746,issue 19919,
django/tests/i18n/tests.py,1766,issue 11915,
django/tests/i18n/tests.py,1831,xyz language has no locale files,
django/tests/i18n/test_extraction.py,65,#: .\path\to\file.html:123,
django/tests/i18n/test_extraction.py,68,#: path/to/file.html:123,
django/tests/i18n/test_extraction.py,141,Check two random strings,
django/tests/i18n/test_extraction.py,146,"One of either the --locale, --exclude, or --all options is required.",
django/tests/i18n/test_extraction.py,162,Comments in templates,
django/tests/i18n/test_extraction.py,200,should not be trimmed,
django/tests/i18n/test_extraction.py,202,should be trimmed,
django/tests/i18n/test_extraction.py,204,#21406 -- Should adjust for eaten line numbers,
django/tests/i18n/test_extraction.py,215,The temporary file was cleaned up,
django/tests/i18n/test_extraction.py,244,{% translate %},
django/tests/i18n/test_extraction.py,252,{% translate %} with a filter,
django/tests/i18n/test_extraction.py,253,Iterate from #7.1a to #7.1h template markers,
django/tests/i18n/test_extraction.py,257,{% blocktranslate %},
django/tests/i18n/test_extraction.py,269,{% trans %} and {% blocktrans %},
django/tests/i18n/test_extraction.py,278,{% translate %},
django/tests/i18n/test_extraction.py,282,{% blocktranslate %},
django/tests/i18n/test_extraction.py,288,"Test detection/end user reporting of old, incorrect templates",
django/tests/i18n/test_extraction.py,289,translator comments syntax,
django/tests/i18n/test_extraction.py,314,Now test .po file contents,
django/tests/i18n/test_extraction.py,375,"""Normal"" output:",
django/tests/i18n/test_extraction.py,386,Version number with only 2 parts (#23788),
django/tests/i18n/test_extraction.py,392,Bad version output,
django/tests/i18n/test_extraction.py,598,#16903 -- Standard comment with source file relative path should be present,
django/tests/i18n/test_extraction.py,619,Comment with source file relative path and line number is present.,
django/tests/i18n/test_extraction.py,627,Comment with source file relative path is present.,
django/tests/i18n/test_extraction.py,629,But it should not contain the line number.,
django/tests/i18n/test_extraction.py,685,Excluding locales that do not compile,
django/tests/i18n/test_extraction.py,712,`call_command` bypasses the parser; by calling,
django/tests/i18n/test_extraction.py,713,`execute_from_command_line` with the help subcommand we,
django/tests/i18n/test_extraction.py,714,ensure that there are no issues with the parser itself.,
django/tests/i18n/other/locale/fr/formats.py,1,A user-defined format,
django/tests/i18n/patterns/tests.py,51,Make sure the cache is empty before we are doing our tests.,
django/tests/i18n/patterns/tests.py,55,Make sure we will leave an empty cache for other testcases.,
django/tests/i18n/patterns/tests.py,156,Namespaced URL,
django/tests/i18n/patterns/tests.py,158,path() URL pattern,
django/tests/i18n/patterns/tests.py,161,URL with parameters.,
django/tests/i18n/patterns/tests.py,229,language from outside of the supported LANGUAGES list,
django/tests/i18n/patterns/tests.py,277,"We only want one redirect, bypassing CommonMiddleware",
django/tests/i18n/project_dir/__init__.py,1,Sample project used by test_extraction.CustomLayoutExtractionTests,
django/tests/i18n/commands/__init__.py,3,Translators: This comment should be extracted,
django/tests/i18n/commands/__init__.py,6,This comment should not be extracted,
django/tests/i18n/commands/__init__.py,9,"This file has a literal with plural forms. When processed first, makemessages",
django/tests/i18n/commands/__init__.py,10,shouldn't create a .po file with duplicate `Plural-Forms` headers,
django/tests/i18n/commands/__init__.py,16,This string is intentionally duplicated in test.html,
django/tests/i18n/exclude/__init__.py,1,This package is used to test the --exclude option of,
django/tests/i18n/exclude/__init__.py,2,the makemessages and compilemessages management commands.,
django/tests/i18n/exclude/__init__.py,3,The locale directory for this app is generated automatically,
django/tests/i18n/exclude/__init__.py,4,by the test cases.,
django/tests/i18n/exclude/__init__.py,8,Translators: This comment should be extracted,
django/tests/i18n/exclude/__init__.py,11,This comment should not be extracted,
django/tests/i18n/sampleproject/manage.py,1,!/usr/bin/env python,
django/tests/i18n/sampleproject/update_catalogs.py,1,!/usr/bin/env python,
django/tests/i18n/sampleproject/update_catalogs.py,47,keep the diff friendly - remove 'POT-Creation-Date',
django/tests/string_lookup/tests.py,76,The searches do not match the subnet mask (/32 in this case),
django/tests/redirects_tests/tests.py,70,Use HTTP responses different from the defaults,
django/tests/bash_completion/tests.py,45,Index of the last word,
django/tests/bash_completion/tests.py,85,Trailing whitespace,
django/tests/version/tests.py,10,This will return a different result when it's run within or outside,
django/tests/version/tests.py,11,of a git clone: 1.4.devYYYYMMDDHHMMSS or 1.4.,
django/tests/delete_regress/tests.py,14,"Can't run this test under SQLite, because you can't",
django/tests/delete_regress/tests.py,15,get two connections to an in-memory database.,
django/tests/delete_regress/tests.py,22,Create a second connection to the default database,
django/tests/delete_regress/tests.py,27,Close down the second connection.,
django/tests/delete_regress/tests.py,39,Start a transaction on the main connection.,
django/tests/delete_regress/tests.py,42,Delete something using another database connection.,
django/tests/delete_regress/tests.py,47,"In the same transaction on the main connection, perform a",
django/tests/delete_regress/tests.py,48,queryset delete that covers the object deleted with the other,
django/tests/delete_regress/tests.py,49,connection. This causes an infinite loop under MySQL InnoDB,
django/tests/delete_regress/tests.py,50,unless we keep track of already deleted objects.,
django/tests/delete_regress/tests.py,68,"first two asserts are just sanity checks, this is the kicker:",
django/tests/delete_regress/tests.py,85,"first two asserts just sanity checks, this is the kicker:",
django/tests/delete_regress/tests.py,133,attach a signal to make sure we will not fast-delete,
django/tests/delete_regress/tests.py,151,Create an Image,
django/tests/delete_regress/tests.py,157,Get the Image instance as a File,
django/tests/delete_regress/tests.py,173,An Image deletion == File deletion,
django/tests/delete_regress/tests.py,177,The Image deletion cascaded and *all* references to it are deleted.,
django/tests/delete_regress/tests.py,188,Get the Image as a Photo,
django/tests/delete_regress/tests.py,195,A Photo deletion == Image deletion == File deletion,
django/tests/delete_regress/tests.py,200,The Photo deletion should have cascaded and deleted *all*,
django/tests/delete_regress/tests.py,201,references to it.,
django/tests/delete_regress/tests.py,215,A File deletion == Image deletion,
django/tests/delete_regress/tests.py,219,The File deletion should have cascaded and deleted *all* references,
django/tests/delete_regress/tests.py,220,to it.,
django/tests/delete_regress/tests.py,233,"Create an Image (proxy of File) and FooFileProxy (proxy of FooFile,",
django/tests/delete_regress/tests.py,234,which has an FK to File),
django/tests/delete_regress/tests.py,297,Both Login objs should have same description so that only the one,
django/tests/delete_regress/tests.py,298,having smaller PK will be deleted.,
django/tests/delete_regress/tests.py,304,Assumed that l1 which is created first has smaller PK.,
django/tests/delete_regress/tests.py,337,"When a subquery is performed by deletion code, the subquery must be",
django/tests/delete_regress/tests.py,338,cleared of all ordering. There was a but that caused _meta ordering,
django/tests/delete_regress/tests.py,339,to be used. Refs #19720.,
django/tests/delete_regress/models.py,72,Models for #15776,
django/tests/delete_regress/models.py,91,Models for #16128,
django/tests/view_tests/urls.py,18,Default views,
django/tests/view_tests/urls.py,22,a view that raises an exception for the debug view,
django/tests/view_tests/urls.py,34,i18n views,
django/tests/view_tests/urls.py,51,Static views,
django/tests/view_tests/urls.py,68,Patterns to test the technical 404.,
django/tests/view_tests/views.py,30,Make sure that a callable that raises an exception in the stack frame's,
django/tests/view_tests/views.py,31,local vars won't hijack the technical 500 response (#15025).,
django/tests/view_tests/views.py,41,We need to inspect the HTML generated by the fancy 500 debug view but,
django/tests/view_tests/views.py,42,"the test client ignores it, so we send it explicitly.",
django/tests/view_tests/views.py,84,We need to inspect the HTML generated by the fancy 500 debug view but,
django/tests/view_tests/views.py,85,"the test client ignores it, so we send it explicitly.",
django/tests/view_tests/views.py,93,"If we do not specify a template, we need to make sure the debug",
django/tests/view_tests/views.py,94,view doesn't blow up.,
django/tests/view_tests/views.py,100,The default logging config has a logging filter to ensure admin emails are,
django/tests/view_tests/views.py,101,"only sent with DEBUG=False, but since someone might choose to remove that",
django/tests/view_tests/views.py,102,"filter, we still want to be able to test the behavior of error emails",
django/tests/view_tests/views.py,103,with DEBUG=True. So we need to remove the filter temporarily.,
django/tests/view_tests/views.py,120,Do not just use plain strings for the variables' values in the code,
django/tests/view_tests/views.py,121,so that the tests don't return false positives when the function's source,
django/tests/view_tests/views.py,122,is displayed in the exception report.,
django/tests/view_tests/views.py,123,NOQA,
django/tests/view_tests/views.py,124,NOQA,
django/tests/view_tests/views.py,136,Do not just use plain strings for the variables' values in the code,
django/tests/view_tests/views.py,137,so that the tests don't return false positives when the function's source,
django/tests/view_tests/views.py,138,is displayed in the exception report.,
django/tests/view_tests/views.py,139,NOQA,
django/tests/view_tests/views.py,140,NOQA,
django/tests/view_tests/views.py,152,Do not just use plain strings for the variables' values in the code,
django/tests/view_tests/views.py,153,so that the tests don't return false positives when the function's source,
django/tests/view_tests/views.py,154,is displayed in the exception report.,
django/tests/view_tests/views.py,155,NOQA,
django/tests/view_tests/views.py,156,NOQA,
django/tests/view_tests/views.py,176,Do not just use plain strings for the variables' values in the code,
django/tests/view_tests/views.py,177,so that the tests don't return false positives when the function's source,
django/tests/view_tests/views.py,178,is displayed in the exception report.,
django/tests/view_tests/views.py,179,NOQA,
django/tests/view_tests/views.py,194,Do not just use plain strings for the variables' values in the code,
django/tests/view_tests/views.py,195,so that the tests don't return false positives when the function's source,
django/tests/view_tests/views.py,196,is displayed in the exception report.,
django/tests/view_tests/views.py,197,NOQA,
django/tests/view_tests/views.py,216,Do not just use plain strings for the variables' values in the code,
django/tests/view_tests/views.py,217,so that the tests don't return false positives when the function's source,
django/tests/view_tests/views.py,218,is displayed in the exception report.,
django/tests/view_tests/views.py,219,NOQA,
django/tests/view_tests/views.py,220,NOQA,
django/tests/view_tests/views.py,250,Do not just use plain strings for the variables' values in the code,
django/tests/view_tests/views.py,251,so that the tests don't return false positives when the function's,
django/tests/view_tests/views.py,252,source is displayed in the exception report.,
django/tests/view_tests/views.py,253,NOQA,
django/tests/view_tests/views.py,254,NOQA,
django/tests/view_tests/views.py,270,NOQA,
django/tests/view_tests/views.py,271,NOQA,
django/tests/view_tests/views.py,284,Make sure datetime and Decimal objects would be serialized properly,
django/tests/view_tests/generic_urls.py,31,Special URLs for particular regression cases.,
django/tests/view_tests/generic_urls.py,35,"redirects, both temporary and permanent, with non-ASCII targets",
django/tests/view_tests/generic_urls.py,41,json response,
django/tests/view_tests/default_urls.py,5,This is the same as in the default project template,
django/tests/view_tests/tests/test_debug.py,84,"When DEBUG=True, technical_500_template() is called.",
django/tests/view_tests/tests/test_debug.py,89,Ensure no 403.html template exists to test the default case.,
django/tests/view_tests/tests/test_debug.py,97,Set up a test 403.html template.,
django/tests/view_tests/tests/test_debug.py,123,Pattern and view name of a RegexURLPattern appear.,
django/tests/view_tests/tests/test_debug.py,126,Pattern and view name of a RoutePattern appear.,
django/tests/view_tests/tests/test_debug.py,152,We look for a HTML fragment of the form,
django/tests/view_tests/tests/test_debug.py,153,"'<div class=""context"" id=""c38123208"">', not '<div class=""context"" id=""c38,123,208""'",
django/tests/view_tests/tests/test_debug.py,187,Assert as HTML.,
django/tests/view_tests/tests/test_debug.py,265,May need a query to initialize MySQL connection,
django/tests/view_tests/tests/test_debug.py,287,"No template directories are configured, so no templates will be found.",
django/tests/view_tests/tests/test_debug.py,295,"When DEBUG=True, technical_500_template() is called.",
django/tests/view_tests/tests/test_debug.py,309,Raises a TemplateDoesNotExist exception and shows the debug view.,
django/tests/view_tests/tests/test_debug.py,405,"Custom exception handler, just pass it into ExceptionReporter",
django/tests/view_tests/tests/test_debug.py,413,"Both messages are twice on page -- one rendered as html,",
django/tests/view_tests/tests/test_debug.py,414,one as plain text (for pastebin),
django/tests/view_tests/tests/test_debug.py,524,tb_generator is a daemon that runs until the main thread/process,
django/tests/view_tests/tests/test_debug.py,525,exits. This is resource heavy when running the full test suite.,
django/tests/view_tests/tests/test_debug.py,526,Setting the following values to None makes,
django/tests/view_tests/tests/test_debug.py,527,reporter.get_traceback_frames() exit early.,
django/tests/view_tests/tests/test_debug.py,532,can happen if the thread generating traceback got killed,
django/tests/view_tests/tests/test_debug.py,533,or exception while generating the traceback,
django/tests/view_tests/tests/test_debug.py,574,NOQA,
django/tests/view_tests/tests/test_debug.py,599,NOQA,
django/tests/view_tests/tests/test_debug.py,615,NOQA,
django/tests/view_tests/tests/test_debug.py,621,still fit in 128Kb,
django/tests/view_tests/tests/test_debug.py,691,GET,
django/tests/view_tests/tests/test_debug.py,696,POST,
django/tests/view_tests/tests/test_debug.py,701,FILES,
django/tests/view_tests/tests/test_debug.py,711,COOKIES,
django/tests/view_tests/tests/test_debug.py,840,GET,
django/tests/view_tests/tests/test_debug.py,845,POST,
django/tests/view_tests/tests/test_debug.py,850,FILES,
django/tests/view_tests/tests/test_debug.py,856,COOKIES,
django/tests/view_tests/tests/test_debug.py,878,Mixin used in the ExceptionReporterFilterTests and,
django/tests/view_tests/tests/test_debug.py,879,AjaxResponseExceptionReporterFilter tests below,
django/tests/view_tests/tests/test_debug.py,895,All variables are shown.,
django/tests/view_tests/tests/test_debug.py,902,All POST parameters are shown.,
django/tests/view_tests/tests/test_debug.py,914,Non-sensitive variable's name and value are shown.,
django/tests/view_tests/tests/test_debug.py,917,Sensitive variable's name is shown but not its value.,
django/tests/view_tests/tests/test_debug.py,922,All POST parameters' names are shown.,
django/tests/view_tests/tests/test_debug.py,924,Non-sensitive POST parameters' values are shown.,
django/tests/view_tests/tests/test_debug.py,927,Sensitive POST parameters' values are not shown.,
django/tests/view_tests/tests/test_debug.py,939,Show variable names but not their values.,
django/tests/view_tests/tests/test_debug.py,946,All POST parameters' names are shown.,
django/tests/view_tests/tests/test_debug.py,948,No POST parameters' values are shown.,
django/tests/view_tests/tests/test_debug.py,956,Empty outbox,
django/tests/view_tests/tests/test_debug.py,962,Frames vars are never shown in plain text email reports.,
django/tests/view_tests/tests/test_debug.py,969,Frames vars are shown in html email reports.,
django/tests/view_tests/tests/test_debug.py,978,All POST parameters are shown.,
django/tests/view_tests/tests/test_debug.py,989,Empty outbox,
django/tests/view_tests/tests/test_debug.py,995,Frames vars are never shown in plain text email reports.,
django/tests/view_tests/tests/test_debug.py,1002,Frames vars are shown in html email reports.,
django/tests/view_tests/tests/test_debug.py,1011,All POST parameters' names are shown.,
django/tests/view_tests/tests/test_debug.py,1013,Non-sensitive POST parameters' values are shown.,
django/tests/view_tests/tests/test_debug.py,1018,Sensitive POST parameters' values are not shown.,
django/tests/view_tests/tests/test_debug.py,1029,Empty outbox,
django/tests/view_tests/tests/test_debug.py,1034,Frames vars are never shown in plain text email reports.,
django/tests/view_tests/tests/test_debug.py,1041,All POST parameters' names are shown.,
django/tests/view_tests/tests/test_debug.py,1043,No POST parameters' values are shown.,
django/tests/view_tests/tests/test_i18n.py,42,The language is set in a cookie.,
django/tests/view_tests/tests/test_i18n.py,73,Insecure URL in POST data.,
django/tests/view_tests/tests/test_i18n.py,79,Insecure URL in HTTP referer.,
django/tests/view_tests/tests/test_i18n.py,176,we force saving language to a cookie rather than a session,
django/tests/view_tests/tests/test_i18n.py,177,by excluding session middleware and those which do require it,
django/tests/view_tests/tests/test_i18n.py,204,The URL & view must exist for this to work as a regression test.,
django/tests/view_tests/tests/test_i18n.py,207,(%C3%A4 decodes to ä),
django/tests/view_tests/tests/test_i18n.py,226,And reverse,
django/tests/view_tests/tests/test_i18n.py,240,"Test 3 possible types in get_formats: integer, string, and list.",
django/tests/view_tests/tests/test_i18n.py,253,response content must include a line like:,
django/tests/view_tests/tests/test_i18n.py,254,"""this is to be translated"": <value of trans_txt Python variable>",
django/tests/view_tests/tests/test_i18n.py,255,json.dumps() is used to be able to check unicode strings,
django/tests/view_tests/tests/test_i18n.py,258,Message with context (msgctxt),
django/tests/view_tests/tests/test_i18n.py,264,default plural function,
django/tests/view_tests/tests/test_i18n.py,389,Force a language via GET otherwise the gettext functions are a noop!,
django/tests/view_tests/tests/test_i18n.py,465,The test cases use fixtures & translations from these apps.,
django/tests/view_tests/tests/test_defaults.py,19,this is in urls.py,
django/tests/view_tests/tests/test_defaults.py,20,this NOT in urls.py,
django/tests/view_tests/tests/test_defaults.py,70,See ticket #14565,
django/tests/view_tests/tests/test_static.py,42,strip() to prevent OS line endings from causing differences,
django/tests/view_tests/tests/test_static.py,72,This is 24h before max Unix time. Remember to fix Django and,
django/tests/view_tests/tests/test_static.py,73,update this test well before 2038 :),
django/tests/view_tests/tests/test_static.py,114,Directories have a trailing slash.,
django/tests/view_tests/tests/test_static.py,120,File with a leading dot (e.g. .hidden) aren't displayed.,
django/tests/delete/tests.py,104,"Testing DO_NOTHING is a bit harder: It would raise IntegrityError for a normal model,",
django/tests/delete/tests.py,105,so we connect to pre_delete and set the fk to a known value.,
django/tests/delete/tests.py,124,RelToBase should not be queried.,
django/tests/delete/tests.py,203,Object referenced also with CASCADE relationship can be deleted.,
django/tests/delete/tests.py,235,Object referenced also with CASCADE relationship can be deleted.,
django/tests/delete/tests.py,258,Object referenced also with CASCADE relationship can be deleted.,
django/tests/delete/tests.py,303,1 (select related `T` instances),
django/tests/delete/tests.py,304,+ 1 (select related `U` instances),
django/tests/delete/tests.py,305,+ 2 (delete `T` instances in batches),
django/tests/delete/tests.py,306,+ 1 (delete `s`),
django/tests/delete/tests.py,393,1 query to find the users for the avatar.,
django/tests/delete/tests.py,394,1 query to delete the user,
django/tests/delete/tests.py,395,1 query to delete the avatar,
django/tests/delete/tests.py,396,The important thing is that when we can defer constraint checks there,
django/tests/delete/tests.py,397,is no need to do an UPDATE on User.avatar to null it out.,
django/tests/delete/tests.py,399,Attach a signal to make sure we will not do fast_deletes.,
django/tests/delete/tests.py,417,Attach a signal to make sure we will not do fast_deletes.,
django/tests/delete/tests.py,425,The below doesn't make sense... Why do we need to null out,
django/tests/delete/tests.py,426,"user.avatar if we are going to delete the user immediately after it,",
django/tests/delete/tests.py,427,and there are no more cascades.,
django/tests/delete/tests.py,428,1 query to find the users for the avatar.,
django/tests/delete/tests.py,429,1 query to delete the user,
django/tests/delete/tests.py,430,"1 query to null out user.avatar, because we can't defer the constraint",
django/tests/delete/tests.py,431,1 query to delete the avatar,
django/tests/delete/tests.py,450,Calculate the number of queries needed.,
django/tests/delete/tests.py,452,The related fetches are done in batches.,
django/tests/delete/tests.py,454,One query for Avatar.objects.all() and then one related fast delete for,
django/tests/delete/tests.py,455,each batch.,
django/tests/delete/tests.py,457,The Avatar objects are going to be deleted in batches of GET_ITERATOR_CHUNK_SIZE,
django/tests/delete/tests.py,470,TEST_SIZE / batch_size (select related `T` instances),
django/tests/delete/tests.py,471,+ 1 (select related `U` instances),
django/tests/delete/tests.py,472,+ TEST_SIZE / GET_ITERATOR_CHUNK_SIZE (delete `T` instances in batches),
django/tests/delete/tests.py,473,+ 1 (delete `s`),
django/tests/delete/tests.py,517,more complex example with multiple object types,
django/tests/delete/tests.py,570,One query for the Avatar table and a second for the User one.,
django/tests/delete/tests.py,582,Both fields are referenced by SecondReferrer.,
django/tests/delete/tests.py,593,All fields are selected if deletion signals are connected.,
django/tests/delete/tests.py,615,1 query to fast-delete the user,
django/tests/delete/tests.py,616,1 query to delete the avatar,
django/tests/delete/tests.py,625,"1 to delete f, 1 to fast-delete m2m for f",
django/tests/delete/tests.py,632,"1 to delete t, 1 to fast-delete t's m_set",
django/tests/delete/tests.py,644,User can be fast-deleted.,
django/tests/delete/tests.py,661,"1 for self, 1 for parent",
django/tests/delete/tests.py,666,"1 for self delete, 1 for fast delete of empty ""child"" qs.",
django/tests/delete/tests.py,669,"1 for self delete, 1 for fast delete of empty ""child"" qs.",
django/tests/delete/tests.py,678,"No problems here - we aren't going to cascade, so we will fast",
django/tests/delete/tests.py,679,delete the objects in a single query.,
django/tests/delete/tests.py,683,"We don't hit parameter amount limits for a, so just one query for",
django/tests/delete/tests.py,684,that + fast delete of the related objs.,
django/tests/delete/tests.py,701,The cascading fast-delete of SecondReferrer should be combined,
django/tests/delete/tests.py,702,in a single DELETE WHERE referrer_id OR unique_field.,
django/tests/delete/models.py,65,"A OneToOneField is just a ForeignKey unique=True, so we don't duplicate",
django/tests/delete/models.py,66,all the tests; just one smoke test to ensure on_delete works for it as,
django/tests/delete/models.py,67,well.,
django/tests/delete/models.py,108,This model is used to test a duplicate query regression (#25685),
django/tests/migrations/test_commands.py,35,No tables are created,
django/tests/migrations/test_commands.py,39,Run the migrations to 0001 only,
django/tests/migrations/test_commands.py,45,The correct tables exist,
django/tests/migrations/test_commands.py,49,Run migrations all the way,
django/tests/migrations/test_commands.py,51,The correct tables exist,
django/tests/migrations/test_commands.py,55,Unmigrate everything,
django/tests/migrations/test_commands.py,61,Tables are gone,
django/tests/migrations/test_commands.py,102,Make sure no tables are created,
django/tests/migrations/test_commands.py,105,Run the migrations to 0001 only,
django/tests/migrations/test_commands.py,107,Fake rollback,
django/tests/migrations/test_commands.py,109,Make sure fake-initial detection does not run,
django/tests/migrations/test_commands.py,114,Real rollback,
django/tests/migrations/test_commands.py,116,Make sure it's all gone,
django/tests/migrations/test_commands.py,131,Make sure no tables are created,
django/tests/migrations/test_commands.py,135,Run the migrations to 0001 only,
django/tests/migrations/test_commands.py,138,Make sure the right tables exist,
django/tests/migrations/test_commands.py,141,"Also check the ""other"" database",
django/tests/migrations/test_commands.py,145,Fake a roll-back,
django/tests/migrations/test_commands.py,148,Make sure the tables still exist,
django/tests/migrations/test_commands.py,151,Try to run initial migration,
django/tests/migrations/test_commands.py,154,Run initial migration with an explicit --fake-initial,
django/tests/migrations/test_commands.py,163,Run migrations all the way,
django/tests/migrations/test_commands.py,166,Make sure the right tables exist,
django/tests/migrations/test_commands.py,173,Fake a roll-back,
django/tests/migrations/test_commands.py,176,Make sure the tables still exist,
django/tests/migrations/test_commands.py,180,Try to run initial migration,
django/tests/migrations/test_commands.py,183,Run initial migration with an explicit --fake-initial,
django/tests/migrations/test_commands.py,185,"Fails because ""migrations_tribble"" does not exist but needs to in",
django/tests/migrations/test_commands.py,186,order to make --fake-initial work.,
django/tests/migrations/test_commands.py,188,Fake an apply,
django/tests/migrations/test_commands.py,191,Unmigrate everything,
django/tests/migrations/test_commands.py,194,Make sure it's all gone,
django/tests/migrations/test_commands.py,239,Fake an apply,
django/tests/migrations/test_commands.py,241,Unmigrate everything,
django/tests/migrations/test_commands.py,304,Giving the explicit app_label tests for selective `show_list` in the command,
django/tests/migrations/test_commands.py,313,Applied datetimes are displayed at verbosity 2+.,
django/tests/migrations/test_commands.py,322,Cleanup by unmigrating everything,
django/tests/migrations/test_commands.py,367,Cleanup by unmigrating everything,
django/tests/migrations/test_commands.py,374,Show the plan up to the third migration.,
django/tests/migrations/test_commands.py,390,Migrate to the third migration.,
django/tests/migrations/test_commands.py,393,Show the plan for when there is nothing to apply.,
django/tests/migrations/test_commands.py,401,Show the plan for reverse migration back to 0001.,
django/tests/migrations/test_commands.py,414,"Show the migration plan to fourth, with truncated details.",
django/tests/migrations/test_commands.py,422,Show the plan when an operation is irreversible.,
django/tests/migrations/test_commands.py,423,Migrate to the fourth migration.,
django/tests/migrations/test_commands.py,435,Operation is marked as irreversible only in the revert plan.,
django/tests/migrations/test_commands.py,456,"Cleanup by unmigrating everything: fake the irreversible, then",
django/tests/migrations/test_commands.py,457,migrate all to zero.,
django/tests/migrations/test_commands.py,546,Single app with no dependencies on other apps.,
django/tests/migrations/test_commands.py,554,Single app with dependencies.,
django/tests/migrations/test_commands.py,563,Some migrations already applied.,
django/tests/migrations/test_commands.py,573,Cleanup by unmigrating author_app.,
django/tests/migrations/test_commands.py,585,Multiple apps: author_app depends on book_app; mutate_state_b doesn't,
django/tests/migrations/test_commands.py,586,depend on other apps.,
django/tests/migrations/test_commands.py,597,Multiple apps: args order shouldn't matter (the same result is,
django/tests/migrations/test_commands.py,598,expected as above).,
django/tests/migrations/test_commands.py,661,Cannot generate the reverse SQL unless we've applied the migration.,
django/tests/migrations/test_commands.py,699,Cleanup by unmigrating everything,
django/tests/migrations/test_commands.py,784,"unmigrated_app.SillyModel has a foreign key to 'migrations.Tribble',",
django/tests/migrations/test_commands.py,785,"but that model is only defined in a migration, so the global app",
django/tests/migrations/test_commands.py,786,registry never sees it and the reference is left dangling. Remove it,
django/tests/migrations/test_commands.py,787,to avoid problems in subsequent tests.,
django/tests/migrations/test_commands.py,801,There's at least one deferred SQL for creating the foreign key,
django/tests/migrations/test_commands.py,802,index.,
django/tests/migrations/test_commands.py,852,Rollback changes,
django/tests/migrations/test_commands.py,876,No changes were actually applied so there is nothing to rollback,
django/tests/migrations/test_commands.py,914,Check for empty __init__.py file in migrations folder,
django/tests/migrations/test_commands.py,922,Check for existing 0001_initial.py file in migration folder,
django/tests/migrations/test_commands.py,931,Meta.verbose_name,
django/tests/migrations/test_commands.py,932,Meta.verbose_name_plural,
django/tests/migrations/test_commands.py,933,title.verbose_name,
django/tests/migrations/test_commands.py,934,title.default,
django/tests/migrations/test_commands.py,943,importlib caches os.listdir() on some platforms like macOS,
django/tests/migrations/test_commands.py,944,(#23850).,
django/tests/migrations/test_commands.py,952,with no apps,
django/tests/migrations/test_commands.py,956,with an app,
django/tests/migrations/test_commands.py,983,'default' is checked,
django/tests/migrations/test_commands.py,985,Router says not to migrate 'other' so consistency shouldn't,
django/tests/migrations/test_commands.py,986,be checked.,
django/tests/migrations/test_commands.py,989,'default' again,
django/tests/migrations/test_commands.py,991,"With a router that doesn't prohibit migrating 'other',",
django/tests/migrations/test_commands.py,992,consistency is checked.,
django/tests/migrations/test_commands.py,996,'default' and 'other',
django/tests/migrations/test_commands.py,998,"With a router that doesn't allow migrating on any database,",
django/tests/migrations/test_commands.py,999,no consistency checks are made.,
django/tests/migrations/test_commands.py,1004,allow_migrate() is called with the correct arguments.,
django/tests/migrations/test_commands.py,1011,Raises an error if invalid app_name/model_name occurs.,
django/tests/migrations/test_commands.py,1017,"If a migration fails to serialize, it shouldn't generate an empty file. #21280",
django/tests/migrations/test_commands.py,1069,Check for existing 0001_initial.py file in migration folder,
django/tests/migrations/test_commands.py,1076,Remove all whitespace to check for empty dependencies and operations,
django/tests/migrations/test_commands.py,1153,Monkeypatch interactive questioner to auto reject,
django/tests/migrations/test_commands.py,1164,Monkeypatch interactive questioner to auto accept,
django/tests/migrations/test_commands.py,1306,Additional output caused by verbosity 3,
django/tests/migrations/test_commands.py,1307,The complete merge migration file that would be written,
django/tests/migrations/test_commands.py,1321,Added field without a default,
django/tests/migrations/test_commands.py,1329,"Output the expected changes directly, without asking for defaults",
django/tests/migrations/test_commands.py,1348,Normal --dry-run output,
django/tests/migrations/test_commands.py,1351,Additional output caused by verbosity 3,
django/tests/migrations/test_commands.py,1352,The complete migrations file that would be written,
django/tests/migrations/test_commands.py,1377,Migrations file is actually created in the expected path.,
django/tests/migrations/test_commands.py,1381,Command output indicates the migration is created.,
django/tests/migrations/test_commands.py,1400,Monkeypatch interactive questioner to auto reject,
django/tests/migrations/test_commands.py,1406,This will fail if interactive is False by default,
django/tests/migrations/test_commands.py,1431,Monkeypatch interactive questioner to auto accept,
django/tests/migrations/test_commands.py,1449,Monkeypatch interactive questioner to auto accept,
django/tests/migrations/test_commands.py,1482,Check for existing migration file in migration folder,
django/tests/migrations/test_commands.py,1489,generate an initial migration,
django/tests/migrations/test_commands.py,1494,importlib caches os.listdir() on some platforms like macOS,
django/tests/migrations/test_commands.py,1495,(#23850).,
django/tests/migrations/test_commands.py,1499,generate an empty migration,
django/tests/migrations/test_commands.py,1573,Monkeypatch interactive questioner to auto accept,
django/tests/migrations/test_writer.py,504,Test with a compiled regex.,
django/tests/migrations/test_writer.py,510,Test a string regex with flag,
django/tests/migrations/test_writer.py,516,Test message and code,
django/tests/migrations/test_writer.py,522,Test with a subclass.,
django/tests/migrations/test_writer.py,645,We don't test the output formatting - that's too fragile.,
django/tests/migrations/test_writer.py,646,"Just make sure it runs for now, and that things look alright.",
django/tests/migrations/test_writer.py,726,Make sure the output starts with something that's not,
django/tests/migrations/test_writer.py,727,a comment or indentation or blank line,
django/tests/migrations/test_writer.py,747,"Yes, it doesn't make sense to use a class as a default for a",
django/tests/migrations/test_writer.py,748,"CharField. It does make sense for custom fields though, for example",
django/tests/migrations/test_writer.py,749,an enumfield that takes the enum class as an argument.,
django/tests/migrations/test_executor.py,33,Let's look at the plan first and make sure it's up to scratch,
django/tests/migrations/test_executor.py,42,Were the tables there before?,
django/tests/migrations/test_executor.py,45,"Alright, let's try running it",
django/tests/migrations/test_executor.py,47,Are the tables there now?,
django/tests/migrations/test_executor.py,50,Rebuild the graph to reflect the new DB state,
django/tests/migrations/test_executor.py,52,"Alright, let's undo what we did",
django/tests/migrations/test_executor.py,62,Are the tables gone?,
django/tests/migrations/test_executor.py,72,Check our leaf node is the squashed one,
django/tests/migrations/test_executor.py,75,Check the plan,
django/tests/migrations/test_executor.py,83,Were the tables there before?,
django/tests/migrations/test_executor.py,86,"Alright, let's try running it",
django/tests/migrations/test_executor.py,88,Are the tables there now?,
django/tests/migrations/test_executor.py,91,Rebuild the graph to reflect the new DB state,
django/tests/migrations/test_executor.py,93,"Alright, let's undo what we did. Should also just use squashed.",
django/tests/migrations/test_executor.py,102,Are the tables gone?,
django/tests/migrations/test_executor.py,132,Record previous migration as successful.,
django/tests/migrations/test_executor.py,134,Rebuild the graph to reflect the new DB state.,
django/tests/migrations/test_executor.py,136,Migrating backwards is also atomic.,
django/tests/migrations/test_executor.py,155,"Make the initial plan, check it",
django/tests/migrations/test_executor.py,169,Fake-apply all migrations,
django/tests/migrations/test_executor.py,174,Rebuild the graph to reflect the new DB state,
django/tests/migrations/test_executor.py,176,Now plan a second time and make sure it's empty,
django/tests/migrations/test_executor.py,182,The resulting state should include applied migrations.,
django/tests/migrations/test_executor.py,190,Erase all the fake records,
django/tests/migrations/test_executor.py,205,Prepare for mixed plan,
django/tests/migrations/test_executor.py,216,Rebuild the graph to reflect the new DB state,
django/tests/migrations/test_executor.py,222,Generate mixed plan,
django/tests/migrations/test_executor.py,242,Rebuild the graph to reflect the new DB state,
django/tests/migrations/test_executor.py,248,Are the tables gone?,
django/tests/migrations/test_executor.py,263,Were the tables there before?,
django/tests/migrations/test_executor.py,266,Run it normally,
django/tests/migrations/test_executor.py,274,Are the tables there now?,
django/tests/migrations/test_executor.py,277,We shouldn't have faked that one,
django/tests/migrations/test_executor.py,279,Rebuild the graph to reflect the new DB state,
django/tests/migrations/test_executor.py,281,Fake-reverse that,
django/tests/migrations/test_executor.py,283,Are the tables still there?,
django/tests/migrations/test_executor.py,286,Make sure that was faked,
django/tests/migrations/test_executor.py,288,"Finally, migrate forwards; this should fake-apply our initial migration",
django/tests/migrations/test_executor.py,296,Applying the migration should raise a database level error,
django/tests/migrations/test_executor.py,297,because we haven't given the --fake-initial option,
django/tests/migrations/test_executor.py,300,Reset the faked state,
django/tests/migrations/test_executor.py,302,Allow faking of initial CreateModel operations,
django/tests/migrations/test_executor.py,305,And migrate back to clean up the database,
django/tests/migrations/test_executor.py,326,Migrate forwards,
django/tests/migrations/test_executor.py,330,Make sure the soft-application detection works (#23093),
django/tests/migrations/test_executor.py,331,Change table_names to not return auth_user during this as,
django/tests/migrations/test_executor.py,332,"it wouldn't be there in a normal run, and ensure migrations.Author",
django/tests/migrations/test_executor.py,333,exists in the global app registry temporarily.,
django/tests/migrations/test_executor.py,344,And migrate back to clean up the database,
django/tests/migrations/test_executor.py,363,from 0001,
django/tests/migrations/test_executor.py,367,from 0002,
django/tests/migrations/test_executor.py,371,Create the tables for 0001 but make it look like the migration hasn't,
django/tests/migrations/test_executor.py,372,been applied.,
django/tests/migrations/test_executor.py,377,Table detection sees 0001 is applied but not 0002.,
django/tests/migrations/test_executor.py,383,Create the tables for both migrations but make it look like neither,
django/tests/migrations/test_executor.py,384,has been applied.,
django/tests/migrations/test_executor.py,390,Table detection sees 0002 is applied.,
django/tests/migrations/test_executor.py,394,Leave the tables for 0001 except the many-to-many table. That missing,
django/tests/migrations/test_executor.py,395,table should cause detect_soft_applied() to return False.,
django/tests/migrations/test_executor.py,402,Cleanup by removing the remaining tables.,
django/tests/migrations/test_executor.py,429,Rebuild the graph to reflect the new DB state,
django/tests/migrations/test_executor.py,432,Migrate forwards -- This led to a lookup LookupErrors because,
django/tests/migrations/test_executor.py,433,lookuperror_b.B2 is already applied,
django/tests/migrations/test_executor.py,441,Rebuild the graph to reflect the new DB state,
django/tests/migrations/test_executor.py,444,Cleanup,
django/tests/migrations/test_executor.py,480,Rebuild the graph to reflect the new DB state,
django/tests/migrations/test_executor.py,483,Migrate backwards -- This led to a lookup LookupErrors because,
django/tests/migrations/test_executor.py,484,lookuperror_b.B2 is not in the initial state (unrelated to app c),
django/tests/migrations/test_executor.py,487,Rebuild the graph to reflect the new DB state,
django/tests/migrations/test_executor.py,490,Cleanup,
django/tests/migrations/test_executor.py,514,Migrate forward.,
django/tests/migrations/test_executor.py,521,Migrate backward.,
django/tests/migrations/test_executor.py,541,Were the tables there before?,
django/tests/migrations/test_executor.py,548,Rebuild the graph to reflect the new DB state,
django/tests/migrations/test_executor.py,586,Apply initial migrations,
django/tests/migrations/test_executor.py,593,Rebuild the graph to reflect the new DB state,
django/tests/migrations/test_executor.py,596,Apply PK type alteration,
django/tests/migrations/test_executor.py,599,Rebuild the graph to reflect the new DB state,
django/tests/migrations/test_executor.py,602,We can't simply unapply the migrations here because there is no,
django/tests/migrations/test_executor.py,603,implicit cast from VARCHAR to INT on the database level.,
django/tests/migrations/test_executor.py,617,Place the database in a state where the replaced migrations are,
django/tests/migrations/test_executor.py,618,"partially applied: 0001 is applied, 0002 is not.",
django/tests/migrations/test_executor.py,621,Use fake because we don't actually have the first migration,
django/tests/migrations/test_executor.py,622,"applied, so the second will fail. And there's no need to actually",
django/tests/migrations/test_executor.py,623,"create/modify tables here, we're just testing the",
django/tests/migrations/test_executor.py,624,"MigrationRecord, which works the same with or without fake.",
django/tests/migrations/test_executor.py,627,"Because we've now applied 0001 and 0002 both, their squashed",
django/tests/migrations/test_executor.py,628,replacement should be marked as applied.,
django/tests/migrations/test_executor.py,641,Record all replaced migrations as applied,
django/tests/migrations/test_executor.py,647,"Because 0001 and 0002 are both applied, even though this migrate run",
django/tests/migrations/test_executor.py,648,"didn't apply anything new, their squashed replacement should be",
django/tests/migrations/test_executor.py,649,marked as applied.,
django/tests/migrations/test_executor.py,655,"When the feature is False, the operation and the record won't be",
django/tests/migrations/test_executor.py,656,performed in a transaction and the test will systematically pass.,
django/tests/migrations/test_executor.py,666,The migration isn't recorded as applied since it failed.,
django/tests/migrations/test_optimizer.py,191,These should work,
django/tests/migrations/test_optimizer.py,220,Operations should be optimized if the FK references a model from the,
django/tests/migrations/test_optimizer.py,221,other app.,
django/tests/migrations/test_optimizer.py,233,But it shouldn't work if a FK references a model with the same,
django/tests/migrations/test_optimizer.py,234,app_label.,
django/tests/migrations/test_optimizer.py,250,This should not work - bases should block it,
django/tests/migrations/test_optimizer.py,266,The same operations should be optimized if app_label and none of,
django/tests/migrations/test_optimizer.py,267,bases belong to that app.,
django/tests/migrations/test_optimizer.py,279,But it shouldn't work if some of bases belongs to the specified app.,
django/tests/migrations/test_optimizer.py,619,AddField,
django/tests/migrations/test_optimizer.py,638,AlterField,
django/tests/migrations/test_optimizer.py,675,RenameField,
django/tests/migrations/test_optimizer.py,738,RemoveField,
django/tests/migrations/test_loader.py,35,That should not affect records of another database,
django/tests/migrations/test_loader.py,61,Load and test the plan,
django/tests/migrations/test_loader.py,70,Now render it out!,
django/tests/migrations/test_loader.py,86,Ensure we've included unmigrated apps in there too,
django/tests/migrations/test_loader.py,110,Load and test the plan,
django/tests/migrations/test_loader.py,120,Now render it out!,
django/tests/migrations/test_loader.py,135,Load and test the plan,
django/tests/migrations/test_loader.py,245,Loading with nothing applied should just give us the one node,
django/tests/migrations/test_loader.py,250,"However, fake-apply one migration and it should now use the old two",
django/tests/migrations/test_loader.py,270,Empty database: use squashed migration,
django/tests/migrations/test_loader.py,274,Starting at 1 or 2 should use the squashed migration too,
django/tests/migrations/test_loader.py,283,"However, starting at 3 to 5 cannot use the squashed migration",
django/tests/migrations/test_loader.py,292,Starting at 5 to 7 we are passed the squashed migrations,
django/tests/migrations/test_loader.py,363,Empty database: use squashed migration,
django/tests/migrations/test_loader.py,367,Starting at 1 or 2 should use the squashed migration too,
django/tests/migrations/test_loader.py,376,"However, starting at 3 or 4, nonexistent migrations would be needed.",
django/tests/migrations/test_loader.py,390,Starting at 5 to 7 we are passed the squashed migrations,
django/tests/migrations/test_loader.py,466,Load with nothing applied: both migrations squashed.,
django/tests/migrations/test_loader.py,478,Fake-apply a few from app1: unsquashes migration in app1.,
django/tests/migrations/test_loader.py,491,Fake-apply one from app2: unsquashes migration in app2 too.,
django/tests/migrations/test_loader.py,530,Compile .py files to .pyc files and delete .py files.,
django/tests/migrations/test_loader.py,544,The -tpl suffix is to avoid the pyc exclusion in MANIFEST.in.,
django/tests/migrations/test_autodetector.py,595,Make a fake graph,
django/tests/migrations/test_autodetector.py,602,Use project state to make a new migration change set,
django/tests/migrations/test_autodetector.py,607,Run through arrange_for_graph,
django/tests/migrations/test_autodetector.py,609,"Make sure there's a new name, deps match, etc.",
django/tests/migrations/test_autodetector.py,619,Use project state to make a new migration change set,
django/tests/migrations/test_autodetector.py,624,Run through arrange_for_graph,
django/tests/migrations/test_autodetector.py,629,Make sure there's the right set of migrations,
django/tests/migrations/test_autodetector.py,636,Make a fake graph,
django/tests/migrations/test_autodetector.py,643,Use project state to make a new migration change set,
django/tests/migrations/test_autodetector.py,649,Run through arrange_for_graph,
django/tests/migrations/test_autodetector.py,653,"Make sure there's a new name, deps match, etc.",
django/tests/migrations/test_autodetector.py,662,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,672,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,680,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,689,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,700,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,710,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,721,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,729,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,741,An unchanged partial reference.,
django/tests/migrations/test_autodetector.py,753,A changed partial reference.,
django/tests/migrations/test_autodetector.py,761,Can't use assertOperationFieldAttributes because we need the,
django/tests/migrations/test_autodetector.py,762,"deconstructed version, i.e., the exploded func/args/keywords rather",
django/tests/migrations/test_autodetector.py,763,than the partial: we don't care if it's not the same instance of the,
django/tests/migrations/test_autodetector.py,764,"partial, only if it's the same source function, args, and keywords.",
django/tests/migrations/test_autodetector.py,791,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,807,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,823,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,834,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,861,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,884,Case 1: to_fields renames.,
django/tests/migrations/test_autodetector.py,909,Case 2: from_fields renames.,
django/tests/migrations/test_autodetector.py,1027,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1031,"Now that RenameModel handles related fields too, there should be",
django/tests/migrations/test_autodetector.py,1032,no AlterField for the related field.,
django/tests/migrations/test_autodetector.py,1061,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1076,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1080,Right number/type of migrations for related field rename?,
django/tests/migrations/test_autodetector.py,1081,Alter is already taken care of.,
django/tests/migrations/test_autodetector.py,1149,"Note that testapp (author) has no dependencies,",
django/tests/migrations/test_autodetector.py,1150,"otherapp (book) depends on testapp (author),",
django/tests/migrations/test_autodetector.py,1151,thirdapp (edition) depends on otherapp (book),
django/tests/migrations/test_autodetector.py,1153,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1158,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1163,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1171,"Note that testapp (author) has no dependencies,",
django/tests/migrations/test_autodetector.py,1172,otherapp (book) depends on testapp (authorproxy),
django/tests/migrations/test_autodetector.py,1174,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1179,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1184,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1196,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1209,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1215,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1221,both split migrations should be `initial`,
django/tests/migrations/test_autodetector.py,1231,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1246,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1258,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1266,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1274,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1284,Right number of migrations?,
django/tests/migrations/test_autodetector.py,1297,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1312,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1332,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1356,"Explicitly testing for not specified, since this is the case after",
django/tests/migrations/test_autodetector.py,1357,a CreateModel operation w/o any definition on the original model,
django/tests/migrations/test_autodetector.py,1359,"Explicitly testing for None, since this was the issue in #23452 after",
django/tests/migrations/test_autodetector.py,1360,an AlterFooTogether operation with e.g. () as value,
django/tests/migrations/test_autodetector.py,1367,"Explicitly testing for the empty set, since we now always have sets.",
django/tests/migrations/test_autodetector.py,1368,"During removal (('col1', 'col2'),) --> () this becomes set([])",
django/tests/migrations/test_autodetector.py,1405,Right number of migrations?,
django/tests/migrations/test_autodetector.py,1407,Right number of actions?,
django/tests/migrations/test_autodetector.py,1410,Right actions order?,
django/tests/migrations/test_autodetector.py,1426,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1450,Right number of migrations?,
django/tests/migrations/test_autodetector.py,1452,Right number of actions?,
django/tests/migrations/test_autodetector.py,1455,Right actions order?,
django/tests/migrations/test_autodetector.py,1471,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1479,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1488,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1499,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1516,Right number of migrations?,
django/tests/migrations/test_autodetector.py,1526,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1537,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1557,Right number of migrations?,
django/tests/migrations/test_autodetector.py,1559,Right number of actions?,
django/tests/migrations/test_autodetector.py,1562,Right actions order?,
django/tests/migrations/test_autodetector.py,1575,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1591,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1601,"First, we test adding a proxy model",
django/tests/migrations/test_autodetector.py,1603,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1609,"Now, we test turning a proxy model into a non-proxy model",
django/tests/migrations/test_autodetector.py,1610,It should delete the proxy then make the real one,
django/tests/migrations/test_autodetector.py,1614,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1625,"First, we test the default pk field name",
django/tests/migrations/test_autodetector.py,1627,The field name the FK on the book model points to,
django/tests/migrations/test_autodetector.py,1629,"Now, we test the custom pk field name",
django/tests/migrations/test_autodetector.py,1631,The field name the FK on the book model points to,
django/tests/migrations/test_autodetector.py,1635,"First, test the pk table and field name.",
django/tests/migrations/test_autodetector.py,1646,Change AuthorProxy to use MTI.,
django/tests/migrations/test_autodetector.py,1651,Right number/type of migrations for the AuthorProxy model?,
django/tests/migrations/test_autodetector.py,1654,Right number/type of migrations for the Book model with a FK to,
django/tests/migrations/test_autodetector.py,1655,AuthorProxy?,
django/tests/migrations/test_autodetector.py,1658,otherapp should depend on thirdapp.,
django/tests/migrations/test_autodetector.py,1660,"Now, test the pk table and field name.",
django/tests/migrations/test_autodetector.py,1668,"First, test the pk table and field name.",
django/tests/migrations/test_autodetector.py,1679,"Change AuthorProxy to use MTI. FK still points to AAuthorProxyProxy,",
django/tests/migrations/test_autodetector.py,1680,a proxy of AuthorProxy.,
django/tests/migrations/test_autodetector.py,1685,Right number/type of migrations for the AuthorProxy model?,
django/tests/migrations/test_autodetector.py,1688,Right number/type of migrations for the Book model with a FK to,
django/tests/migrations/test_autodetector.py,1689,AAuthorProxyProxy?,
django/tests/migrations/test_autodetector.py,1692,otherapp should depend on testapp.,
django/tests/migrations/test_autodetector.py,1694,"Now, test the pk table and field name.",
django/tests/migrations/test_autodetector.py,1703,"First, we test adding an unmanaged model",
django/tests/migrations/test_autodetector.py,1705,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1716,"Now, we test turning an unmanaged model into a managed model",
django/tests/migrations/test_autodetector.py,1720,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1726,"Now, we turn managed to unmanaged.",
django/tests/migrations/test_autodetector.py,1730,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1740,"First, we test the default pk field name",
django/tests/migrations/test_autodetector.py,1742,The field name the FK on the book model points to,
django/tests/migrations/test_autodetector.py,1744,"Now, we test the custom pk field name",
django/tests/migrations/test_autodetector.py,1746,The field name the FK on the book model points to,
django/tests/migrations/test_autodetector.py,1753,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1766,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1780,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1791,Right number of migrations?,
django/tests/migrations/test_autodetector.py,1801,"When lists contain items that deconstruct to identical values, those lists",
django/tests/migrations/test_autodetector.py,1802,should be considered equal for the purpose of detecting state changes,
django/tests/migrations/test_autodetector.py,1803,(even if the original items are unequal).,
django/tests/migrations/test_autodetector.py,1808,Legitimate differences within the deconstructed lists should be reported,
django/tests/migrations/test_autodetector.py,1809,as a change,
django/tests/migrations/test_autodetector.py,1817,"When tuples contain items that deconstruct to identical values, those tuples",
django/tests/migrations/test_autodetector.py,1818,should be considered equal for the purpose of detecting state changes,
django/tests/migrations/test_autodetector.py,1819,(even if the original items are unequal).,
django/tests/migrations/test_autodetector.py,1824,Legitimate differences within the deconstructed tuples should be reported,
django/tests/migrations/test_autodetector.py,1825,as a change,
django/tests/migrations/test_autodetector.py,1833,"When dicts contain items whose values deconstruct to identical values,",
django/tests/migrations/test_autodetector.py,1834,those dicts should be considered equal for the purpose of detecting,
django/tests/migrations/test_autodetector.py,1835,state changes (even if the original values are unequal).,
django/tests/migrations/test_autodetector.py,1840,Legitimate differences within the deconstructed dicts should be reported,
django/tests/migrations/test_autodetector.py,1841,as a change,
django/tests/migrations/test_autodetector.py,1852,If the items within a deconstructed object's args/kwargs have the same,
django/tests/migrations/test_autodetector.py,1853,deconstructed values - whether or not the items themselves are different,
django/tests/migrations/test_autodetector.py,1854,instances - then the object as a whole is regarded as unchanged.,
django/tests/migrations/test_autodetector.py,1859,Differences that exist solely within the args list of a deconstructed object,
django/tests/migrations/test_autodetector.py,1860,should be reported as changes,
django/tests/migrations/test_autodetector.py,1865,Additional args should also be reported as a change,
django/tests/migrations/test_autodetector.py,1870,Differences that exist solely within the kwargs dict of a deconstructed object,
django/tests/migrations/test_autodetector.py,1871,should be reported as changes,
django/tests/migrations/test_autodetector.py,1876,Additional kwargs should also be reported as a change,
django/tests/migrations/test_autodetector.py,1894,IntegerField intentionally not instantiated.,
django/tests/migrations/test_autodetector.py,1900,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1910,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1924,removes both the model and FK,
django/tests/migrations/test_autodetector.py,1925,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1936,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1945,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1956,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1975,Remove both the through model and ManyToMany,
django/tests/migrations/test_autodetector.py,1976,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,1992,Remove both the through model and ManyToMany,
django/tests/migrations/test_autodetector.py,1993,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2008,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2024,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2037,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2051,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2061,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2069,Changing them back to empty should also make a change,
django/tests/migrations/test_autodetector.py,2071,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2081,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2091,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2102,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2114,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2126,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2139,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2151,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2181,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2190,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2204,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2218,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2230,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2240,Load graph,
django/tests/migrations/test_autodetector.py,2247,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2259,Load graph,
django/tests/migrations/test_autodetector.py,2266,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2281,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2293,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2328,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2353,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2359,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2382,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2388,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2405,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2430,Right number/type of migrations?,
django/tests/migrations/test_autodetector.py,2443,Right number/type of migrations?,
django/tests/migrations/test_operations.py,40,Test the state alteration,
django/tests/migrations/test_operations.py,46,Test the database alteration,
django/tests/migrations/test_operations.py,51,And test reversal,
django/tests/migrations/test_operations.py,55,And deconstruction,
django/tests/migrations/test_operations.py,60,And default manager not in set,
django/tests/migrations/test_operations.py,161,Test the database alteration,
django/tests/migrations/test_operations.py,191,Test the state alteration,
django/tests/migrations/test_operations.py,194,Test the database alteration,
django/tests/migrations/test_operations.py,201,Make sure the M2M field actually works,
django/tests/migrations/test_operations.py,211,And test reversal,
django/tests/migrations/test_operations.py,222,Test the state alteration,
django/tests/migrations/test_operations.py,240,Test the database alteration,
django/tests/migrations/test_operations.py,245,And test reversal,
django/tests/migrations/test_operations.py,255,Test the state alteration,
django/tests/migrations/test_operations.py,266,Test the database alteration,
django/tests/migrations/test_operations.py,273,And test reversal,
django/tests/migrations/test_operations.py,278,And deconstruction,
django/tests/migrations/test_operations.py,289,Test the state alteration,
django/tests/migrations/test_operations.py,300,Test the database alteration,
django/tests/migrations/test_operations.py,307,And test reversal,
django/tests/migrations/test_operations.py,326,Test the state alteration,
django/tests/migrations/test_operations.py,332,Test database alteration,
django/tests/migrations/test_operations.py,341,Test reversal,
django/tests/migrations/test_operations.py,346,Test deconstruction,
django/tests/migrations/test_operations.py,367,Test the state alteration,
django/tests/migrations/test_operations.py,372,Test database alteration,
django/tests/migrations/test_operations.py,377,Test constraint works,
django/tests/migrations/test_operations.py,387,Test reversal,
django/tests/migrations/test_operations.py,391,Test deconstruction,
django/tests/migrations/test_operations.py,402,Test the state alteration,
django/tests/migrations/test_operations.py,433,Test the state alteration,
django/tests/migrations/test_operations.py,439,Test the database alteration,
django/tests/migrations/test_operations.py,444,And test reversal,
django/tests/migrations/test_operations.py,448,And deconstruction,
django/tests/migrations/test_operations.py,459,Test the state alteration,
django/tests/migrations/test_operations.py,465,Test the database alteration,
django/tests/migrations/test_operations.py,472,And test reversal,
django/tests/migrations/test_operations.py,480,Test the state alteration,
django/tests/migrations/test_operations.py,486,Test the database alteration,
django/tests/migrations/test_operations.py,494,And test reversal,
django/tests/migrations/test_operations.py,506,Test the state alteration,
django/tests/migrations/test_operations.py,509,Test initial state and database,
django/tests/migrations/test_operations.py,517,Migrate forwards,
django/tests/migrations/test_operations.py,521,Test new state and database,
django/tests/migrations/test_operations.py,524,RenameModel also repoints all incoming FKs and M2Ms,
django/tests/migrations/test_operations.py,531,Migrate backwards,
django/tests/migrations/test_operations.py,533,Test original state and database,
django/tests/migrations/test_operations.py,542,And deconstruction,
django/tests/migrations/test_operations.py,560,Now with apps cached.,
django/tests/migrations/test_operations.py,573,Test the state alteration,
django/tests/migrations/test_operations.py,580,"Remember, RenameModel also repoints all incoming FKs and M2Ms",
django/tests/migrations/test_operations.py,587,Test the database alteration,
django/tests/migrations/test_operations.py,601,And test reversal,
django/tests/migrations/test_operations.py,616,Test the state alteration,
django/tests/migrations/test_operations.py,623,"RenameModel shouldn't repoint the superclass's relations, only local ones",
django/tests/migrations/test_operations.py,628,"Before running the migration we have a table for Shetland Pony, not Little Horse",
django/tests/migrations/test_operations.py,632,"and the foreign key on rider points to pony, not shetland pony",
django/tests/migrations/test_operations.py,637,"Now we have a little horse table, not shetland pony",
django/tests/migrations/test_operations.py,641,"but the Foreign keys still point at pony, not little horse",
django/tests/migrations/test_operations.py,782,"No ""no such column"" error means the column was renamed correctly.",
django/tests/migrations/test_operations.py,792,Test the state alteration,
django/tests/migrations/test_operations.py,806,Test the database alteration,
django/tests/migrations/test_operations.py,811,And test reversal,
django/tests/migrations/test_operations.py,815,And deconstruction,
django/tests/migrations/test_operations.py,841,If not properly quoted digits would be interpreted as an int.,
django/tests/migrations/test_operations.py,847,Manual quoting is fragile and could trip on quotes. Refs #xyz.,
django/tests/migrations/test_operations.py,882,If not properly quoted digits would be interpreted as an int.,
django/tests/migrations/test_operations.py,888,Manual quoting is fragile and could trip on quotes. Refs #xyz.,
django/tests/migrations/test_operations.py,923,If not properly quoted digits would be interpreted as an int.,
django/tests/migrations/test_operations.py,929,Manual quoting is fragile and could trip on quotes. Refs #xyz.,
django/tests/migrations/test_operations.py,939,"SQLite returns buffer/memoryview, cast to bytes for checking.",
django/tests/migrations/test_operations.py,968,Test the state alteration,
django/tests/migrations/test_operations.py,983,Test the database alteration,
django/tests/migrations/test_operations.py,991,And deconstruction,
django/tests/migrations/test_operations.py,1002,Test the state alteration,
django/tests/migrations/test_operations.py,1007,Test the database alteration,
django/tests/migrations/test_operations.py,1013,Make sure the M2M field actually works,
django/tests/migrations/test_operations.py,1020,And test reversal,
django/tests/migrations/test_operations.py,1054,Ensure the new field actually works,
django/tests/migrations/test_operations.py,1074,And test reversal,
django/tests/migrations/test_operations.py,1102,Test the state alteration,
django/tests/migrations/test_operations.py,1108,Test the database alteration,
django/tests/migrations/test_operations.py,1113,And test reversal,
django/tests/migrations/test_operations.py,1117,And deconstruction,
django/tests/migrations/test_operations.py,1145,Test the state alteration,
django/tests/migrations/test_operations.py,1151,Test the database alteration,
django/tests/migrations/test_operations.py,1158,And test reversal,
django/tests/migrations/test_operations.py,1163,And deconstruction,
django/tests/migrations/test_operations.py,1181,Test the state alteration,
django/tests/migrations/test_operations.py,1186,Test the database alteration,
django/tests/migrations/test_operations.py,1191,And test reversal,
django/tests/migrations/test_operations.py,1203,Add the M2M field,
django/tests/migrations/test_operations.py,1213,Rename the Pony db_table which should also rename the m2m table.,
django/tests/migrations/test_operations.py,1222,And test reversal,
django/tests/migrations/test_operations.py,1233,Test the state alteration,
django/tests/migrations/test_operations.py,1240,Test the database alteration,
django/tests/migrations/test_operations.py,1245,And test reversal,
django/tests/migrations/test_operations.py,1249,And deconstruction,
django/tests/migrations/test_operations.py,1260,Test the state alteration,
django/tests/migrations/test_operations.py,1266,Test the database alteration,
django/tests/migrations/test_operations.py,1269,And test reversal,
django/tests/migrations/test_operations.py,1279,Test the state alteration,
django/tests/migrations/test_operations.py,1302,Test the database alteration,
django/tests/migrations/test_operations.py,1306,And test reversal,
django/tests/migrations/test_operations.py,1438,Test the state alteration,
django/tests/migrations/test_operations.py,1445,Make sure the unique_together has the renamed column too,
django/tests/migrations/test_operations.py,1448,Make sure the index_together has the renamed column too,
django/tests/migrations/test_operations.py,1451,Test the database alteration,
django/tests/migrations/test_operations.py,1458,Ensure the unique constraint has been ported over,
django/tests/migrations/test_operations.py,1465,Ensure the index constraint has been ported over,
django/tests/migrations/test_operations.py,1467,And test reversal,
django/tests/migrations/test_operations.py,1472,Ensure the index constraint has been reset,
django/tests/migrations/test_operations.py,1474,And deconstruction,
django/tests/migrations/test_operations.py,1519,Test the state alteration,
django/tests/migrations/test_operations.py,1526,Make sure we can insert duplicate rows,
django/tests/migrations/test_operations.py,1531,Test the database alteration,
django/tests/migrations/test_operations.py,1539,And test reversal,
django/tests/migrations/test_operations.py,1545,Test flat unique_together,
django/tests/migrations/test_operations.py,1549,And deconstruction,
django/tests/migrations/test_operations.py,1575,Test the database alteration,
django/tests/migrations/test_operations.py,1581,And test reversal,
django/tests/migrations/test_operations.py,1585,And deconstruction,
django/tests/migrations/test_operations.py,1602,Test the state alteration,
django/tests/migrations/test_operations.py,1605,Test the database alteration,
django/tests/migrations/test_operations.py,1609,And test reversal,
django/tests/migrations/test_operations.py,1613,And deconstruction,
django/tests/migrations/test_operations.py,1619,Also test a field dropped with index - sqlite remake issue,
django/tests/migrations/test_operations.py,1626,Test database alteration,
django/tests/migrations/test_operations.py,1631,And test reversal,
django/tests/migrations/test_operations.py,1667,Test the database alteration,
django/tests/migrations/test_operations.py,1671,Index hasn't been dropped,
django/tests/migrations/test_operations.py,1673,And test reversal,
django/tests/migrations/test_operations.py,1676,Ensure the index is still there,
django/tests/migrations/test_operations.py,1684,Test the state alteration,
django/tests/migrations/test_operations.py,1691,Make sure there's no matching index,
django/tests/migrations/test_operations.py,1693,Test the database alteration,
django/tests/migrations/test_operations.py,1697,And test reversal,
django/tests/migrations/test_operations.py,1701,And deconstruction,
django/tests/migrations/test_operations.py,1720,Test the state alteration,
django/tests/migrations/test_operations.py,1726,Test the database alteration,
django/tests/migrations/test_operations.py,1731,Add another one.,
django/tests/migrations/test_operations.py,1743,Test reversal,
django/tests/migrations/test_operations.py,1747,Test deconstruction,
django/tests/migrations/test_operations.py,1767,"""%"" generated in startswith lookup should be escaped in a way that is",
django/tests/migrations/test_operations.py,1768,considered a leading wildcard.,
django/tests/migrations/test_operations.py,1779,"Literal ""%"" should be escaped in a way that is not a considered a",
django/tests/migrations/test_operations.py,1780,wildcard.,
django/tests/migrations/test_operations.py,1857,Test state alteration,
django/tests/migrations/test_operations.py,1863,Test database alteration,
django/tests/migrations/test_operations.py,1869,Remove the other one.,
django/tests/migrations/test_operations.py,1878,Test reversal,
django/tests/migrations/test_operations.py,1883,Test deconstruction,
django/tests/migrations/test_operations.py,1902,Test the state alteration,
django/tests/migrations/test_operations.py,1908,Test the database alteration,
django/tests/migrations/test_operations.py,1911,Test constraint works,
django/tests/migrations/test_operations.py,1920,Test reversal,
django/tests/migrations/test_operations.py,1923,Test constraint doesn't work,
django/tests/migrations/test_operations.py,1925,Test deconstruction,
django/tests/migrations/test_operations.py,1943,Test state alteration,
django/tests/migrations/test_operations.py,1949,Test database alteration,
django/tests/migrations/test_operations.py,1952,Test constraint doesn't work,
django/tests/migrations/test_operations.py,1957,Test reversal,
django/tests/migrations/test_operations.py,1960,Test constraint works,
django/tests/migrations/test_operations.py,1966,Test deconstruction,
django/tests/migrations/test_operations.py,1980,Test the state alteration (no DB alteration to test),
django/tests/migrations/test_operations.py,1988,And deconstruction,
django/tests/migrations/test_operations.py,1999,Test the state alteration (no DB alteration to test),
django/tests/migrations/test_operations.py,2006,And deconstruction,
django/tests/migrations/test_operations.py,2017,Test the state alteration,
django/tests/migrations/test_operations.py,2029,Make sure there's no matching index,
django/tests/migrations/test_operations.py,2031,Create some rows before alteration,
django/tests/migrations/test_operations.py,2036,Test the database alteration,
django/tests/migrations/test_operations.py,2040,Check for correct value in rows,
django/tests/migrations/test_operations.py,2044,And test reversal,
django/tests/migrations/test_operations.py,2048,And deconstruction,
django/tests/migrations/test_operations.py,2059,Test the state alteration,
django/tests/migrations/test_operations.py,2095,Test the state alteration,
django/tests/migrations/test_operations.py,2120,Test adding and then altering the FK in one go,
django/tests/migrations/test_operations.py,2145,Test the state alteration,
django/tests/migrations/test_operations.py,2152,Test the database alteration,
django/tests/migrations/test_operations.py,2159,And test reversal,
django/tests/migrations/test_operations.py,2170,Create the operation,
django/tests/migrations/test_operations.py,2172,Use a multi-line string with a comment to test splitting on SQLite and MySQL respectively,
django/tests/migrations/test_operations.py,2179,Run delete queries to test for parameter substitution failure,
django/tests/migrations/test_operations.py,2180,reported in #23426,
django/tests/migrations/test_operations.py,2188,Test the state alteration,
django/tests/migrations/test_operations.py,2192,Make sure there's no table,
django/tests/migrations/test_operations.py,2194,Test SQL collection,
django/tests/migrations/test_operations.py,2200,Test the database alteration,
django/tests/migrations/test_operations.py,2204,Make sure all the SQL was processed,
django/tests/migrations/test_operations.py,2212,And test reversal,
django/tests/migrations/test_operations.py,2217,And deconstruction,
django/tests/migrations/test_operations.py,2222,And elidable reduction,
django/tests/migrations/test_operations.py,2232,Create the operation,
django/tests/migrations/test_operations.py,2238,forwards,
django/tests/migrations/test_operations.py,2244,backwards,
django/tests/migrations/test_operations.py,2252,Make sure there's no table,
django/tests/migrations/test_operations.py,2255,Test the database alteration,
django/tests/migrations/test_operations.py,2259,Test parameter passing,
django/tests/migrations/test_operations.py,2262,Make sure all the SQL was processed,
django/tests/migrations/test_operations.py,2273,And test reversal,
django/tests/migrations/test_operations.py,2286,forwards,
django/tests/migrations/test_operations.py,2290,backwards,
django/tests/migrations/test_operations.py,2320,Create the operation,
django/tests/migrations/test_operations.py,2332,Test the state alteration does nothing,
django/tests/migrations/test_operations.py,2336,Test the database alteration,
django/tests/migrations/test_operations.py,2341,Now test reversal,
django/tests/migrations/test_operations.py,2346,Now test we can't use a string,
django/tests/migrations/test_operations.py,2349,And deconstruction,
django/tests/migrations/test_operations.py,2355,"Also test reversal fails, with an operation identical to above but without reverse_code set",
django/tests/migrations/test_operations.py,2376,And deconstruction,
django/tests/migrations/test_operations.py,2395,And elidable reduction,
django/tests/migrations/test_operations.py,2411,Verify atomicity when applying.,
django/tests/migrations/test_operations.py,2416,"If we're a fully-transactional database, both versions should rollback",
django/tests/migrations/test_operations.py,2427,"Otherwise, the non-atomic operation should leave a row there",
django/tests/migrations/test_operations.py,2438,Reset object count to zero and verify atomicity when unapplying.,
django/tests/migrations/test_operations.py,2440,"On a fully-transactional database, both versions rollback.",
django/tests/migrations/test_operations.py,2451,"Otherwise, the non-atomic operation leaves a row there.",
django/tests/migrations/test_operations.py,2462,Verify deconstruction.,
django/tests/migrations/test_operations.py,2707,Create the operation,
django/tests/migrations/test_operations.py,2718,Test the state alteration,
django/tests/migrations/test_operations.py,2722,Make sure there's no table,
django/tests/migrations/test_operations.py,2724,Test the database alteration,
django/tests/migrations/test_operations.py,2728,And test reversal,
django/tests/migrations/test_operations.py,2733,And deconstruction,
django/tests/migrations/test_operations.py,2747,Create the operation,
django/tests/migrations/test_operations.py,2756,We use IntegerField and not AutoField because,
django/tests/migrations/test_operations.py,2757,the model is going to be deleted immediately,
django/tests/migrations/test_operations.py,2758,and with an AutoField this fails on Oracle,
django/tests/migrations/test_operations.py,2786,Test the state alteration,
django/tests/migrations/test_operations.py,2791,"Tables and models exist, or don't, as they should:",
django/tests/migrations/test_operations.py,2808,Test the database alteration,
django/tests/migrations/test_operations.py,2812,And test reversal,
django/tests/migrations/test_operations.py,2843,Test the state alteration (it should still be there!),
django/tests/migrations/test_operations.py,2849,Test the database alteration,
django/tests/migrations/test_operations.py,2854,And test reversal,
django/tests/migrations/test_operations.py,2866,Test the database alteration,
django/tests/migrations/test_operations.py,2871,And test reversal,
django/tests/migrations/test_operations.py,2881,Test the state alteration,
django/tests/migrations/test_operations.py,2888,Test the database alteration,
django/tests/migrations/test_operations.py,2893,And test reversal,
django/tests/migrations/test_operations.py,2906,No database queries should be run for swapped models,
django/tests/migrations/test_operations.py,2926,Model name match.,
django/tests/migrations/test_operations.py,2928,Referenced field.,
django/tests/migrations/test_operations.py,2930,Doesn't reference.,
django/tests/migrations/test_multidb.py,51,Test the state alteration,
django/tests/migrations/test_multidb.py,55,Test the database alteration,
django/tests/migrations/test_multidb.py,63,And test reversal,
django/tests/migrations/test_multidb.py,110,Test the state alteration does nothing,
django/tests/migrations/test_multidb.py,114,Test the database alteration,
django/tests/migrations/test_multidb.py,140,Create the operation,
django/tests/migrations/test_multidb.py,147,Test the state alteration does nothing,
django/tests/migrations/test_multidb.py,151,Test the database alteration,
django/tests/migrations/test_base.py,26,Reset applied-migrations state.,
django/tests/migrations/test_base.py,187,"Make the ""current"" state.",
django/tests/migrations/test_graph.py,21,Build graph,
django/tests/migrations/test_graph.py,34,Test root migration case,
django/tests/migrations/test_graph.py,39,Test branch B only,
django/tests/migrations/test_graph.py,44,Test whole graph,
django/tests/migrations/test_graph.py,52,Test reverse to b:0002,
django/tests/migrations/test_graph.py,57,Test roots and leaves,
django/tests/migrations/test_graph.py,77,Build graph,
django/tests/migrations/test_graph.py,96,Test branch C only,
django/tests/migrations/test_graph.py,101,Test whole graph,
django/tests/migrations/test_graph.py,110,Test reverse to b:0001,
django/tests/migrations/test_graph.py,118,Test roots and leaves,
django/tests/migrations/test_graph.py,132,Build graph,
django/tests/migrations/test_graph.py,144,Test whole graph,
django/tests/migrations/test_graph.py,220,Build graph,
django/tests/migrations/test_graph.py,236,Build graph,
django/tests/migrations/test_graph.py,285,Add some dummy nodes to be replaced.,
django/tests/migrations/test_graph.py,290,Add some normal parent and child nodes to test dependency remapping.,
django/tests/migrations/test_graph.py,295,Try replacing before replacement node exists.,
django/tests/migrations/test_graph.py,306,Ensure `validate_consistency()` still raises an error at this stage.,
django/tests/migrations/test_graph.py,309,Remove the dummy nodes.,
django/tests/migrations/test_graph.py,314,Ensure graph is now consistent and dependencies have been remapped,
django/tests/migrations/test_graph.py,329,Add some dummy nodes to be replaced.,
django/tests/migrations/test_graph.py,334,Try removing replacement node before replacement node exists.,
django/tests/migrations/test_graph.py,345,Add a child node to test dependency remapping.,
django/tests/migrations/test_graph.py,348,Remove the replacement node.,
django/tests/migrations/test_graph.py,353,Ensure graph is consistent and child dependency has been remapped,
django/tests/migrations/test_graph.py,359,Ensure child dependency hasn't also gotten remapped to the other replaced node.,
django/tests/migrations/models.py,17,Disable auto loading of this model as we load it on our own,
django/tests/migrations/models.py,37,Disable auto loading of this model as we load it on our own,
django/tests/migrations/test_deprecated_fields.py,13,Make sure no tables are created,
django/tests/migrations/test_deprecated_fields.py,15,Run migration,
django/tests/migrations/test_deprecated_fields.py,17,Make sure the right tables exist,
django/tests/migrations/test_deprecated_fields.py,19,Unmigrate everything,
django/tests/migrations/test_deprecated_fields.py,21,Make sure it's all gone,
django/tests/migrations/test_state.py,99,The managers on this model should be ordered by their creation,
django/tests/migrations/test_state.py,100,counter and not by the order in model body,
django/tests/migrations/test_state.py,165,The default manager is used in migrations,
django/tests/migrations/test_state.py,170,No explicit managers defined. Migrations will fall back to the default,
django/tests/migrations/test_state.py,173,"food_mgr is used in migration but isn't the default mgr, hence add the",
django/tests/migrations/test_state.py,174,default,
django/tests/migrations/test_state.py,368,"The ordering we really want is objects, mgr1, mgr2",
django/tests/migrations/test_state.py,401,"First, test rendering individually",
django/tests/migrations/test_state.py,404,We shouldn't be able to render yet,
django/tests/migrations/test_state.py,409,"Once the parent model is in the app registry, it should be fine",
django/tests/migrations/test_state.py,441,We shouldn't be able to render yet,
django/tests/migrations/test_state.py,446,"Once the parent models are in the app registry, it should be fine",
django/tests/migrations/test_state.py,495,Make a ProjectState and render it,
django/tests/migrations/test_state.py,506,Now make an invalid ProjectState and make sure it fails,
django/tests/migrations/test_state.py,529,Make a ProjectState and render it,
django/tests/migrations/test_state.py,541,Render project state.,
django/tests/migrations/test_state.py,617,We need to work with rendered models,
django/tests/migrations/test_state.py,623,The relations between the old models are correct,
django/tests/migrations/test_state.py,637,All models have changed,
django/tests/migrations/test_state.py,641,The relations between the old models still hold,
django/tests/migrations/test_state.py,644,The relations between the new models correct,
django/tests/migrations/test_state.py,680,Model from old_state still has the relation,
django/tests/migrations/test_state.py,687,Same test for deleted model,
django/tests/migrations/test_state.py,725,At this point the model would be rendered twice causing its related,
django/tests/migrations/test_state.py,726,M2M through objects to point to an old copy and thus breaking their,
django/tests/migrations/test_state.py,727,attribute lookup.,
django/tests/migrations/test_state.py,734,The old model's _meta is still consistent,
django/tests/migrations/test_state.py,742,The new model's _meta is still consistent,
django/tests/migrations/test_state.py,754,Test two things that should be equal,
django/tests/migrations/test_state.py,767,Fill the apps cached property,
django/tests/migrations/test_state.py,775,Make a very small change (max_len 99) and see if that affects it,
django/tests/migrations/test_state.py,823,Make a valid ProjectState and render it,
django/tests/migrations/test_state.py,831,now make an invalid one with a ForeignKey,
django/tests/migrations/test_state.py,843,And another with ManyToManyField.,
django/tests/migrations/test_state.py,855,And now with multiple models and multiple fields.,
django/tests/migrations/test_state.py,884,If we just stick it into an empty state it should fail,
django/tests/migrations/test_state.py,890,If we include the real app it should succeed,
django/tests/migrations/test_state.py,921,Make a valid ProjectState and render it,
django/tests/migrations/test_state.py,1139,The default manager is used in migrations,
django/tests/migrations/test_state.py,1179,Modifying the state doesn't modify the index on the model.,
django/tests/migrations/test_state.py,1457,M has a pointer O2O field p_ptr to P,
django/tests/migrations/test_migrations_atomic_operation/0001_initial.py,5,Test atomic operation in non-atomic migration is wrapped in transaction,
django/tests/migrations/migrations_test_apps/alter_fk/author_app/migrations/0002_alter_id.py,8,Forces the book table to alter the FK,
django/tests/migrations/test_migrations_non_atomic/0001_initial.py,5,Test operation in non-atomic migration is not wrapped in transaction,
django/tests/str/tests.py,29,Explicit call to __str__/__repr__ to make sure str()/repr() don't,
django/tests/str/tests.py,30,coerce the returned value.,
django/tests/custom_pk/tests.py,133,"Use the name of the primary key, rather than pk.",
django/tests/custom_pk/tests.py,141,pk can be used as a substitute for the primary key.,
django/tests/custom_pk/tests.py,142,The primary key can be accessed via the pk property on the model.,
django/tests/custom_pk/tests.py,145,Or we can use the real attribute name for the primary key:,
django/tests/custom_pk/tests.py,190,Primary key may be unicode string,
django/tests/custom_pk/tests.py,194,"The primary key must also obviously be unique, so trying to create a",
django/tests/custom_pk/tests.py,195,new object with the same primary key will fail.,
django/tests/custom_pk/tests.py,211,Regression for #10785 -- Custom fields can be used for primary keys.,
django/tests/custom_pk/tests.py,223,"SQLite lets objects be saved with an empty primary key, even though an",
django/tests/custom_pk/tests.py,224,integer is expected. So we can't check for an error being raised in that,
django/tests/custom_pk/tests.py,225,case for SQLite. Remove it from the suite for this next bit.,
django/tests/custom_pk/tests.py,228,"The primary key must be specified, so an error is raised if you",
django/tests/custom_pk/tests.py,229,try to create an object without it.,
django/tests/expressions/test_queryset_values.py,30,"values() applies annotate() first, so values selected are grouped by",
django/tests/expressions/test_queryset_values.py,31,"id, not firstname.",
django/tests/expressions/tests.py,103,"We can filter on attribute relationships on same model obj, e.g.",
django/tests/expressions/tests.py,104,find companies where the number of employees is greater,
django/tests/expressions/tests.py,105,than the number of chairs.,
django/tests/expressions/tests.py,122,We can set one field to have the value of another field,
django/tests/expressions/tests.py,123,Make sure we have enough chairs,
django/tests/expressions/tests.py,146,We can perform arithmetic operations in expressions,
django/tests/expressions/tests.py,147,Make sure we have 2 spare chairs,
django/tests/expressions/tests.py,170,Law of order of operations is followed,
django/tests/expressions/tests.py,193,Law of order of operations can be overridden by parentheses,
django/tests/expressions/tests.py,216,ForeignKey can become updated with the value of another ForeignKey.,
django/tests/expressions/tests.py,237,F Expressions can also span joins,
django/tests/expressions/tests.py,267,F expressions can be used to update attributes on single objects,
django/tests/expressions/tests.py,274,We should be able to use Funcs when inserting new data,
django/tests/expressions/tests.py,286,Aggregates are not allowed when inserting new data,
django/tests/expressions/tests.py,295,F expressions cannot be used to update attributes which are foreign,
django/tests/expressions/tests.py,296,"keys, or attributes which involve joins.",
django/tests/expressions/tests.py,315,F expressions cannot be used to update attributes on objects which do,
django/tests/expressions/tests.py,316,not yet exist in the database,
django/tests/expressions/tests.py,357,Reverse multijoin F() references and the lookup target the same join.,
django/tests/expressions/tests.py,358,Pre #18375 the F() join was generated first and the lookup couldn't,
django/tests/expressions/tests.py,359,reuse that join.,
django/tests/expressions/tests.py,364,"The next query was dict-randomization dependent - if the ""gte=1""",
django/tests/expressions/tests.py,365,"was seen first, then the F() will reuse the join generated by the",
django/tests/expressions/tests.py,366,"gte lookup, if F() was seen first, then it generated a join the",
django/tests/expressions/tests.py,367,other lookups could not reuse.,
django/tests/expressions/tests.py,375,Another similar case for F() than above. Now we have the same join,
django/tests/expressions/tests.py,376,"in two filter kwargs, one in the lhs lookup, one in F. Here pre",
django/tests/expressions/tests.py,377,#18375 the amount of joins generated was random if dict,
django/tests/expressions/tests.py,378,"randomization was enabled, that is the generated query dependent",
django/tests/expressions/tests.py,379,on which clause was seen first.,
django/tests/expressions/tests.py,387,F() expressions do not reuse joins from previous filter.,
django/tests/expressions/tests.py,398,Order by whether the employee is the CEO of a company,
django/tests/expressions/tests.py,466,"Could use Coalesce(subq, Value('')) instead except for the bug in",
django/tests/expressions/tests.py,467,cx_Oracle mentioned in #23843.,
django/tests/expressions/tests.py,506,A less elegant way to write the same query: this uses a LEFT OUTER,
django/tests/expressions/tests.py,507,"JOIN and an IS NULL, inside a WHERE NOT IN which is probably less",
django/tests/expressions/tests.py,508,efficient than EXISTS.,
django/tests/expressions/tests.py,515,"This is a contrived test (and you really wouldn't write this query),",
django/tests/expressions/tests.py,516,but it is a succinct way to test the __in=Subquery() construct.,
django/tests/expressions/tests.py,567,This is a contrived example. It exercises the double OuterRef form.,
django/tests/expressions/tests.py,577,This exercises the double OuterRef form with AutoField as pk.,
django/tests/expressions/tests.py,596,Another contrived example (there is no need to have a subquery here),
django/tests/expressions/tests.py,639,Aggregation over a subquery annotation doesn't annotate the subquery,
django/tests/expressions/tests.py,640,twice in the inner query.,
django/tests/expressions/tests.py,643,GROUP BY isn't required to aggregate over a query that doesn't,
django/tests/expressions/tests.py,644,contain nested aggregates.,
django/tests/expressions/tests.py,696,populate cached property,
django/tests/expressions/tests.py,770,MySQL requires that the values calculated for expressions don't pass,
django/tests/expressions/tests.py,771,"outside of the field's range, so it's inconvenient to use the values",
django/tests/expressions/tests.py,772,in the more general tests.,
django/tests/expressions/tests.py,780,__in lookups can use F() expressions for integers.,
django/tests/expressions/tests.py,822,Range lookups can use F() expressions for integers.,
django/tests/expressions/tests.py,948,Reuse the same F-object for another queryset,
django/tests/expressions/tests.py,951,The original query still works correctly,
django/tests/expressions/tests.py,1128,LH Addition of floats and integers,
django/tests/expressions/tests.py,1138,LH Subtraction of floats and integers,
django/tests/expressions/tests.py,1145,Multiplication of floats and integers,
django/tests/expressions/tests.py,1152,LH Division of floats and integers,
django/tests/expressions/tests.py,1159,LH Modulo arithmetic on integers,
django/tests/expressions/tests.py,1164,LH Bitwise ands on integers,
django/tests/expressions/tests.py,1182,LH Bitwise or on integers,
django/tests/expressions/tests.py,1189,LH Power arithmetic operation on floats and integers,
django/tests/expressions/tests.py,1214,Right hand operators,
django/tests/expressions/tests.py,1217,RH Addition of floats and integers,
django/tests/expressions/tests.py,1224,RH Subtraction of floats and integers,
django/tests/expressions/tests.py,1229,RH Multiplication of floats and integers,
django/tests/expressions/tests.py,1236,RH Division of floats and integers,
django/tests/expressions/tests.py,1243,RH Modulo arithmetic on integers,
django/tests/expressions/tests.py,1249,RH Power arithmetic operation on floats and integers,
django/tests/expressions/tests.py,1270,Test data is set so that deltas and delays will be,
django/tests/expressions/tests.py,1271,strictly increasing.,
django/tests/expressions/tests.py,1276,"e0: started same day as assigned, zero duration",
django/tests/expressions/tests.py,1286,"e1: started one day after assigned, tiny duration, data",
django/tests/expressions/tests.py,1287,"set so that end time has no fractional seconds, which",
django/tests/expressions/tests.py,1288,tests an edge case on sqlite.,
django/tests/expressions/tests.py,1299,"e2: started three days after assigned, small duration",
django/tests/expressions/tests.py,1309,"e3: started four days after assigned, medium duration",
django/tests/expressions/tests.py,1320,"e4: started 10 days after assignment, long duration",
django/tests/expressions/tests.py,1330,"e5: started a month after assignment, very long duration",
django/tests/expressions/tests.py,1344,Ticket #21643,
django/tests/expressions/tests.py,1351,Ticket #21643 - Crash when compiling query more than once,
django/tests/expressions/tests.py,1356,Intentionally no assert,
django/tests/expressions/tests.py,1590,Exclude e1 which has very high precision so we can test this on all,
django/tests/expressions/tests.py,1591,backends regardless of whether or not it supports,
django/tests/expressions/tests.py,1592,microsecond_precision.,
django/tests/expressions/tests.py,1614,"subtract 30 seconds, 30 minutes, 2 hours and 2 days",
django/tests/expressions/tests.py,1625,subtract 30 microseconds,
django/tests/middleware/urls.py,9,Accepts paths with two leading slashes.,
django/tests/middleware/tests.py,149,Use 4 slashes because of RequestFactory behavior.,
django/tests/middleware/tests.py,179,The following tests examine expected behavior given a custom URLconf that,
django/tests/middleware/tests.py,180,overrides the default one through the request object.,
django/tests/middleware/tests.py,286,Tests for the Content-Length header,
django/tests/middleware/tests.py,317,Other tests,
django/tests/middleware/tests.py,408,URL with scheme and domain should also be ignored,
django/tests/middleware/tests.py,413,URL with a different scheme should be ignored as well because bots,
django/tests/middleware/tests.py,414,tend to use http:// in referers even when browsing HTTPS websites.,
django/tests/middleware/tests.py,455,Tests for the ETag header,
django/tests/middleware/tests.py,533,Tests for the Last-Modified header,
django/tests/middleware/tests.py,599,shouldn't be preserved,
django/tests/middleware/tests.py,628,should never be a 412,
django/tests/middleware/tests.py,681,restored by override_settings,
django/tests/middleware/tests.py,737,This is just an example for testing purposes...,
django/tests/middleware/tests.py,795,must read the data before accessing the header,
django/tests/m2m_recursive/tests.py,16,Add m2m for Anne and Chuck in reverse direction.,
django/tests/m2m_recursive/tests.py,30,Add m2m for Anne in reverse direction.,
django/tests/m2m_recursive/tests.py,41,Clear m2m for Anne.,
django/tests/m2m_recursive/tests.py,44,Reverse m2m relationships should be removed.,
django/tests/m2m_recursive/tests.py,49,Add m2m with custom related name for Anne in reverse direction.,
django/tests/m2m_recursive/tests.py,55,Adding the same relation twice results in a single relation.,
django/tests/m2m_recursive/tests.py,76,Add m2m for Anne and Chuck in reverse direction.,
django/tests/m2m_recursive/tests.py,92,Add m2m for Anne in reverse direction.,
django/tests/m2m_recursive/tests.py,105,Clear m2m for Anne.,
django/tests/m2m_recursive/tests.py,108,Reverse m2m relationships is removed.,
django/tests/m2m_recursive/tests.py,113,Set new relationships for Chuck.,
django/tests/m2m_recursive/tests.py,118,Reverse m2m relationships is removed.,
django/tests/get_object_or_404/tests.py,13,"No Articles yet, so we should get a Http404 error.",
django/tests/get_object_or_404/tests.py,19,get_object_or_404 can be passed a Model to query.,
django/tests/get_object_or_404/tests.py,25,We can also use the Article manager through an Author object.,
django/tests/get_object_or_404/tests.py,31,"No articles containing ""Camelot"".  This should raise a Http404 error.",
django/tests/get_object_or_404/tests.py,35,Custom managers can be used too.,
django/tests/get_object_or_404/tests.py,41,QuerySets can be used too.,
django/tests/get_object_or_404/tests.py,47,"Just as when using a get() lookup, you will get an error if more than",
django/tests/get_object_or_404/tests.py,48,one object is returned.,
django/tests/get_object_or_404/tests.py,53,Using an empty QuerySet raises a Http404 error.,
django/tests/get_object_or_404/tests.py,57,get_list_or_404 can be used to get lists of objects,
django/tests/get_object_or_404/tests.py,63,Http404 is returned if the list is empty.,
django/tests/get_object_or_404/tests.py,67,Custom managers can be used too.,
django/tests/get_object_or_404/tests.py,73,QuerySets can be used too.,
django/tests/get_object_or_404/tests.py,80,"Given an argument klass that is not a Model, Manager, or Queryset",
django/tests/get_object_or_404/tests.py,81,raises a helpful ValueError message,
django/tests/get_object_or_404/tests.py,93,Works for lists too,
django/tests/servers/test_basehttp.py,31,The correct level gets the message.,
django/tests/servers/test_basehttp.py,35,Incorrect levels don't have any messages.,
django/tests/servers/test_basehttp.py,79,WSGIRequestHandler closes the output file; we need to make this a,
django/tests/servers/test_basehttp.py,80,no-op so we can still read its contents.,
django/tests/servers/test_basehttp.py,96,Prevent logging from appearing in test output.,
django/tests/servers/test_basehttp.py,98,instantiating a handler runs the request as side effect,
django/tests/servers/test_liveserverthread.py,18,Pass a connection to the thread to check they are being closed.,
django/tests/servers/tests.py,47,put it in a list to prevent descriptor lookups in test,
django/tests/servers/tests.py,236,"We're out of ports, LiveServerTestCase correctly fails with",
django/tests/servers/tests.py,237,an OSError.,
django/tests/servers/tests.py,239,Unexpected error.,
django/tests/servers/tests.py,242,"We've acquired a port, ensure our server threads acquired",
django/tests/servers/tests.py,243,different addresses.,
django/tests/servers/tests.py,254,Find an open port and tell TestCase to use it.,
django/tests/update/tests.py,158,Trivial annotated update,
django/tests/update/tests.py,161,Update where annotation is used for filtering,
django/tests/update/tests.py,164,Update where annotation is used in update parameters,
django/tests/update/tests.py,167,Update where aggregation annotation is used in update parameters,
django/tests/update/tests.py,180,Trivial annotated update,
django/tests/update/tests.py,183,Update where annotation is used for filtering,
django/tests/update/tests.py,186,Update where aggregation annotation is used in update parameters,
django/tests/transactions/tests.py,132,Writes in the outer block are rolled back too.,
django/tests/transactions/tests.py,198,"atomic block shouldn't rollback, but force it.",
django/tests/transactions/tests.py,207,trigger a database error inside an inner atomic without savepoint,
django/tests/transactions/tests.py,213,prevent atomic from rolling back since we're recovering manually,
django/tests/transactions/tests.py,238,"The tests access the database after exercising 'atomic', initiating",
django/tests/transactions/tests.py,239,a transaction ; a rollback is required before restoring autocommit.,
django/tests/transactions/tests.py,259,The third insert couldn't be roll back. Temporarily mark the,
django/tests/transactions/tests.py,260,connection as not needing rollback to check it.,
django/tests/transactions/tests.py,265,The second insert couldn't be roll back. Temporarily mark the,
django/tests/transactions/tests.py,266,connection as not needing rollback to check it.,
django/tests/transactions/tests.py,271,The first block has a savepoint and must roll back.,
django/tests/transactions/tests.py,283,The third insert couldn't be roll back. Temporarily mark the,
django/tests/transactions/tests.py,284,connection as not needing rollback to check it.,
django/tests/transactions/tests.py,289,The second block has a savepoint and must roll back.,
django/tests/transactions/tests.py,305,Make sure autocommit wasn't changed.,
django/tests/transactions/tests.py,321,The transaction is marked as needing rollback.,
django/tests/transactions/tests.py,337,Mark the transaction as no longer needing rollback.,
django/tests/transactions/tests.py,347,The connection is closed and the transaction is marked as,
django/tests/transactions/tests.py,348,needing rollback. This will raise an InterfaceError on databases,
django/tests/transactions/tests.py,349,that refuse to create cursors on closed connections (PostgreSQL),
django/tests/transactions/tests.py,350,and a TransactionManagementError on other databases.,
django/tests/transactions/tests.py,353,The connection is usable again .,
django/tests/transactions/tests.py,375,1) This line locks... (see below for 2),
django/tests/transactions/tests.py,378,"This is the thread-local connection, not the main connection.",
django/tests/transactions/tests.py,385,Double atomic to enter a transaction and create a savepoint.,
django/tests/transactions/tests.py,390,The two threads can't be synchronized with an event here,
django/tests/transactions/tests.py,391,because the other thread locks. Sleep for a little while.,
django/tests/transactions/tests.py,393,2) ... and this line deadlocks. (see above for 1),
django/tests/transactions/tests.py,410,Must not raise an exception,
django/tests/transactions/tests.py,417,Expect an error when rolling back a savepoint that doesn't exist.,
django/tests/transactions/tests.py,418,Done outside of the transaction block to ensure proper recovery.,
django/tests/transactions/tests.py,421,Start a plain transaction.,
django/tests/transactions/tests.py,424,Swallow the intentional error raised in the sub-transaction.,
django/tests/transactions/tests.py,427,Start a sub-transaction with a savepoint.,
django/tests/transactions/tests.py,432,This is expected to fail because the savepoint no longer exists.,
django/tests/transactions/tests.py,438,Swallow the intentional error raised.,
django/tests/transactions/tests.py,441,Wrap in `mark_for_rollback_on_error` to check if the transaction is marked broken.,
django/tests/transactions/tests.py,444,Ensure that we are still in a good state.,
django/tests/transactions/tests.py,449,Ensure that `mark_for_rollback_on_error` marked the transaction as broken …,
django/tests/transactions/tests.py,452,… and further queries fail.,
django/tests/transactions/tests.py,457,"Transaction errors are reset at the end of an transaction, so this should just work.",
django/tests/transactions/tests.py,463,Swallow the intentional error raised.,
django/tests/transactions/tests.py,466,Wrap in `mark_for_rollback_on_error` to check if the transaction is marked broken.,
django/tests/transactions/tests.py,469,Ensure that we are still in a good state.,
django/tests/transactions/tests.py,474,Ensure that `mark_for_rollback_on_error` did not mark the transaction,
django/tests/transactions/tests.py,475,"as broken, since we are in autocommit mode …",
django/tests/transactions/tests.py,478,… and further queries work nicely.,
django/tests/db_functions/migrations/0001_setup_extensions.py,12,Required for the SHA database functions.,
django/tests/db_functions/datetime/test_extract_trunc.py,26,Convert to target timezone before truncation,
django/tests/db_functions/datetime/test_extract_trunc.py,54,"otherwise, truncate to year",
django/tests/db_functions/datetime/test_extract_trunc.py,61,"If there was a daylight saving transition, then reset the timezone.",
django/tests/db_functions/datetime/test_extract_trunc.py,101,exact is implied and should be the same,
django/tests/db_functions/datetime/test_extract_trunc.py,107,date and datetime fields should behave the same,
django/tests/db_functions/datetime/test_extract_trunc.py,113,an expression rhs cannot use the between optimization.,
django/tests/db_functions/datetime/test_extract_trunc.py,335,Both dates are from the same week year.,
django/tests/db_functions/datetime/test_extract_trunc.py,342,Sunday,
django/tests/db_functions/datetime/test_extract_trunc.py,343,Wednesday,
django/tests/db_functions/datetime/test_extract_trunc.py,344,Thursday,
django/tests/db_functions/datetime/test_extract_trunc.py,420,both dates are from the same week.,
django/tests/db_functions/datetime/test_extract_trunc.py,469,Sunday,
django/tests/db_functions/datetime/test_extract_trunc.py,470,Wednesday,
django/tests/db_functions/datetime/test_extract_trunc.py,471,Thursday,
django/tests/db_functions/text/test_pad.py,18,The default pad string is a space.,
django/tests/db_functions/text/test_pad.py,21,If string is longer than length it is truncated.,
django/tests/db_functions/text/test_concat.py,62,Wrap the concat in something else to ensure that text is returned,
django/tests/db_functions/text/test_concat.py,63,rather than bytes.,
django/tests/db_functions/text/test_concat.py,73,Check nodes counts,
django/tests/db_functions/text/test_concat.py,75,+ 2 Coalesce + 2 Value(),
django/tests/db_functions/text/test_concat.py,80,Multiple compilations should not alter the generated query.,
django/tests/db_functions/text/test_right.py,17,"If alias is null, set it to the first 2 lower characters of the name.",
django/tests/db_functions/text/test_replace.py,50,The default replacement is an empty string.,
django/tests/db_functions/text/test_left.py,17,"If alias is null, set it to the first 2 lower characters of the name.",
django/tests/db_functions/text/test_substr.py,23,"If alias is null, set to first 5 lower characters of the name.",
django/tests/db_functions/comparison/test_cast.py,31,"Silence ""Truncated incorrect CHAR(1) value: 'Bob'"".",
django/tests/db_functions/comparison/test_coalesce.py,38,mixed Text and Char,
django/tests/db_functions/comparison/test_coalesce.py,46,mixed Text and Char wrapped,
django/tests/admin_utils/tests.py,66,1 query to fetch all children of 0 (1 and 2),
django/tests/admin_utils/tests.py,67,1 query to fetch all children of 1 and 2 (none),
django/tests/admin_utils/tests.py,68,Should not require additional queries to populate the nested graph.,
django/tests/admin_utils/tests.py,79,"One for Location, one for Guest, and no query for EventGuide",
django/tests/admin_utils/tests.py,163,Regression test for #13071: NullBooleanField has special,
django/tests/admin_utils/tests.py,164,handling.,
django/tests/admin_utils/tests.py,306,"NOTE: cannot use @property decorator, because of",
django/tests/admin_utils/tests.py,307,AttributeError: 'property' object has no attribute 'short_description',
django/tests/admin_utils/tests.py,337,safestring should not be escaped,
django/tests/admin_utils/tests.py,348,normal strings needs to be escaped,
django/tests/admin_utils/test_logentry.py,100,domain changed,
django/tests/admin_utils/test_logentry.py,105,Changed title for 1st article,
django/tests/admin_utils/test_logentry.py,109,Second article is deleted,
django/tests/admin_utils/test_logentry.py,114,A new article is added,
django/tests/admin_utils/test_logentry.py,182,Make sure custom action_flags works,
django/tests/admin_utils/test_logentry.py,210,If the log entry doesn't have a content type it should still be,
django/tests/admin_utils/test_logentry.py,211,possible to view the Recent Actions part (#10275).,
django/tests/admin_utils/test_logentry.py,233,add,
django/tests/admin_utils/test_logentry.py,241,change,
django/tests/admin_utils/test_logentry.py,251,delete,
django/tests/admin_utils/admin.py,18,Add arbitrary name to changed_data to test,
django/tests/admin_utils/admin.py,19,change message construction.,
django/tests/transaction_hooks/tests.py,70,one successful savepoint,
django/tests/transaction_hooks/tests.py,73,one failed savepoint,
django/tests/transaction_hooks/tests.py,80,another successful savepoint,
django/tests/transaction_hooks/tests.py,84,only hooks registered during successful savepoints execute,
django/tests/transaction_hooks/tests.py,151,"not [1, 1, 2]",
django/tests/expressions_case/tests.py,59,GROUP BY on Oracle fails with TextField/BinaryField; see #24096.,
django/tests/expressions_case/tests.py,717,fails on sqlite if output_field is not set explicitly on all,
django/tests/expressions_case/tests.py,718,Values containing timedeltas,
django/tests/expressions_case/tests.py,800,fails on postgresql if output_field is not set explicitly,
django/tests/expressions_case/tests.py,934,fails on sqlite if output_field is not set explicitly on all,
django/tests/expressions_case/tests.py,935,Values containing times,
django/tests/expressions_case/tests.py,966,fails on sqlite if output_field is not set explicitly on all,
django/tests/expressions_case/tests.py,967,Values containing UUIDs,
django/tests/expressions_case/tests.py,1082,Testing that:,
django/tests/expressions_case/tests.py,1083,1. There isn't any object on the remote side of the fk_rel,
django/tests/expressions_case/tests.py,1084,"relation. If the query used inner joins, then the join to fk_rel",
django/tests/expressions_case/tests.py,1085,"would remove o from the results. So, in effect we are testing that",
django/tests/expressions_case/tests.py,1086,we are promoting the fk_rel join to a left outer join here.,
django/tests/expressions_case/tests.py,1087,2. The default value of 3 is generated for the case expression.,
django/tests/expressions_case/tests.py,1099,"Now 2 should be generated, as the fk_rel is null.",
django/tests/expressions_case/tests.py,1114,Testing that:,
django/tests/expressions_case/tests.py,1115,1. There isn't any object on the remote side of the fk_rel,
django/tests/expressions_case/tests.py,1116,"relation. If the query used inner joins, then the join to fk_rel",
django/tests/expressions_case/tests.py,1117,"would remove o from the results. So, in effect we are testing that",
django/tests/expressions_case/tests.py,1118,we are promoting the fk_rel join to a left outer join here.,
django/tests/expressions_case/tests.py,1119,2. The default value of 3 is generated for the case expression.,
django/tests/expressions_case/tests.py,1136,"Now 2 should be generated, as the fk_rel is null.",
django/tests/expressions_case/tests.py,1162,"The first o has 2 as its fk_rel__integer=1, thus it hits the",
django/tests/expressions_case/tests.py,1163,default=2 case. The other ones have 2 as the result as they have 2,
django/tests/expressions_case/tests.py,1164,"fk_rel objects, except for integer=4 and integer=10 (created above).",
django/tests/expressions_case/tests.py,1165,"The integer=4 case has one integer, thus the result is 1, and",
django/tests/expressions_case/tests.py,1166,integer=10 doesn't have any and this too generates 1 (instead of 0),
django/tests/expressions_case/tests.py,1167,as ~Q() also matches nulls.,
django/tests/expressions_case/tests.py,1176,Need to use values before annotate so that Oracle will not group,
django/tests/expressions_case/tests.py,1177,by fields it isn't capable of grouping by.,
django/tests/expressions_case/tests.py,1286,This was the example before the filter argument was added.,
django/tests/admin_changelist/tests.py,158,Set a new empty display value on AdminSite.,
django/tests/admin_changelist/tests.py,226,Test with list_editable fields,
django/tests/admin_changelist/tests.py,236,make sure that hidden fields are in the correct place,
django/tests/admin_changelist/tests.py,244,make sure that list editable fields are rendered in divs correctly,
django/tests/admin_changelist/tests.py,262,Anything outside range,
django/tests/admin_changelist/tests.py,266,Test with list_editable fields,
django/tests/admin_changelist/tests.py,304,There's only one Group instance,
django/tests/admin_changelist/tests.py,324,There's only one Group instance,
django/tests/admin_changelist/tests.py,346,There's only one Concert instance,
django/tests/admin_changelist/tests.py,367,There's only one Quartet instance,
django/tests/admin_changelist/tests.py,388,There's only one ChordsBand instance,
django/tests/admin_changelist/tests.py,397,Two children with the same name,
django/tests/admin_changelist/tests.py,406,Make sure distinct() was called,
django/tests/admin_changelist/tests.py,439,Make sure distinct() was called,
django/tests/admin_changelist/tests.py,459,There's only one Concert instance,
django/tests/admin_changelist/tests.py,518,Register a custom lookup on IntegerField to ensure that field,
django/tests/admin_changelist/tests.py,519,traversing logic in ModelAdmin.get_search_results() works.,
django/tests/admin_changelist/tests.py,535,Not equal to 'pk'.,
django/tests/admin_changelist/tests.py,565,A ManyToManyField in params does have distinct applied.,
django/tests/admin_changelist/tests.py,584,Test default queryset,
django/tests/admin_changelist/tests.py,591,Test custom queryset,
django/tests/admin_changelist/tests.py,620,Test with user 'noparents',
django/tests/admin_changelist/tests.py,631,Test with user 'parents',
django/tests/admin_changelist/tests.py,644,Test default implementation,
django/tests/admin_changelist/tests.py,657,"Add ""show all"" parameter to request",
django/tests/admin_changelist/tests.py,661,"Test valid ""show all"" request (number of total objects is under max)",
django/tests/admin_changelist/tests.py,664,200 is the max we'll pass to ChangeList,
django/tests/admin_changelist/tests.py,669,"Test invalid ""show all"" request (number of total objects over max)",
django/tests/admin_changelist/tests.py,670,falls back to paginated pages,
django/tests/admin_changelist/tests.py,673,30 is the max we'll pass to ChangeList for this test,
django/tests/admin_changelist/tests.py,730,just want to ensure it doesn't blow up during rendering,
django/tests/admin_changelist/tests.py,734,Reverse one-to-one relations should work.,
django/tests/admin_changelist/tests.py,744,"To replicate this issue, simulate the following steps:",
django/tests/admin_changelist/tests.py,745,1. User1 opens an admin changelist with list_editable fields.,
django/tests/admin_changelist/tests.py,746,"2. User2 edits object ""Foo"" such that it moves to another page in",
django/tests/admin_changelist/tests.py,747,the pagination order and saves.,
django/tests/admin_changelist/tests.py,748,"3. User1 edits object ""Foo"" and saves.",
django/tests/admin_changelist/tests.py,749,"4. The edit made by User1 does not get applied to object ""Foo"" but",
django/tests/admin_changelist/tests.py,750,instead is used to create a new object (bug).,
django/tests/admin_changelist/tests.py,752,"For this test, order the changelist by the 'speed' attribute and",
django/tests/admin_changelist/tests.py,753,display 3 objects per page (SwallowAdmin.list_per_page = 3).,
django/tests/admin_changelist/tests.py,755,Setup the test to reflect the DB state after step 2 where User2 has,
django/tests/admin_changelist/tests.py,756,edited the first swallow object's speed from '4' to '1'.,
django/tests/admin_changelist/tests.py,766,Send the POST from User1 for step 3. It's still using the changelist,
django/tests/admin_changelist/tests.py,767,ordering from before User2's edits in step 2.,
django/tests/admin_changelist/tests.py,786,The object User1 edited in step 3 is displayed on the changelist and,
django/tests/admin_changelist/tests.py,787,has the correct edits applied.,
django/tests/admin_changelist/tests.py,802,No new swallows were created.,
django/tests/admin_changelist/tests.py,853,The unfiltered queryset is returned if there's invalid data.,
django/tests/admin_changelist/tests.py,899,Check only the first few characters since the UUID may have dashes.,
django/tests/admin_changelist/tests.py,928,"When no order is defined at all, everything is ordered by '-pk'.",
django/tests/admin_changelist/tests.py,931,When an order field is defined but multiple records have the same,
django/tests/admin_changelist/tests.py,932,"value for that field, make sure everything gets ordered by -pk as well.",
django/tests/admin_changelist/tests.py,936,"When order fields are defined, including the pk itself, use them.",
django/tests/admin_changelist/tests.py,972,"When no order is defined at all, use the model's default ordering (i.e. 'number')",
django/tests/admin_changelist/tests.py,975,When an order field is defined but multiple records have the same,
django/tests/admin_changelist/tests.py,976,"value for that field, make sure everything gets ordered by -pk as well.",
django/tests/admin_changelist/tests.py,980,"When order fields are defined, including the pk itself, use them.",
django/tests/admin_changelist/tests.py,1025,Unique non-nullable field.,
django/tests/admin_changelist/tests.py,1028,Unique nullable field.,
django/tests/admin_changelist/tests.py,1030,Field.,
django/tests/admin_changelist/tests.py,1032,Related field introspection is not implemented.,
django/tests/admin_changelist/tests.py,1034,Related attname unique.,
django/tests/admin_changelist/tests.py,1036,Related ordering introspection is not implemented.,
django/tests/admin_changelist/tests.py,1038,Composite unique.,
django/tests/admin_changelist/tests.py,1040,Composite unique nullable.,
django/tests/admin_changelist/tests.py,1042,Composite unique and nullable.,
django/tests/admin_changelist/tests.py,1044,Composite unique attnames.,
django/tests/admin_changelist/tests.py,1046,Composite unique names.,
django/tests/admin_changelist/tests.py,1049,F() objects composite unique.,
django/tests/admin_changelist/tests.py,1051,F() objects composite unique nullable.,
django/tests/admin_changelist/tests.py,1120,Unique non-nullable field.,
django/tests/admin_changelist/tests.py,1122,Unique nullable field.,
django/tests/admin_changelist/tests.py,1124,Related attname unique.,
django/tests/admin_changelist/tests.py,1127,Related ordering introspection is not implemented.,
django/tests/admin_changelist/tests.py,1129,Composite unique.,
django/tests/admin_changelist/tests.py,1131,Composite unique nullable.,
django/tests/admin_changelist/tests.py,1133,Composite unique and nullable.,
django/tests/admin_changelist/tests.py,1138,Composite field and related field name.,
django/tests/admin_changelist/tests.py,1141,Composite field and related field attname.,
django/tests/admin_changelist/tests.py,1144,Partial unique constraint is ignored.,
django/tests/admin_changelist/tests.py,1146,Unique constraint with an empty condition.,
django/tests/admin_changelist/tests.py,1164,Test with user 'noparents',
django/tests/admin_changelist/tests.py,1170,Test with user 'parents',
django/tests/admin_changelist/tests.py,1188,instantiating and setting up ChangeList object,
django/tests/admin_changelist/tests.py,1203,assuming we have exactly `objects_count` objects,
django/tests/admin_changelist/tests.py,1208,setting page number and calculating page range,
django/tests/admin_changelist/tests.py,1225,"The ""Add"" button inside the object-tools shouldn't appear.",
django/tests/admin_changelist/tests.py,1238,This template tag just logs.,
django/tests/admin_changelist/tests.py,1294,Test amount of rows in the Changelist,
django/tests/admin_changelist/tests.py,1299,Test current selection,
django/tests/admin_changelist/tests.py,1304,Select a row and check again,
django/tests/admin_changelist/models.py,7,"Oracle can have problems with a column named ""date""",
django/tests/admin_changelist/admin.py,114,prevent ['action_checkbox'] + list(list_display),
django/tests/admin_changelist/test_date_hierarchy.py,51,Northern hemisphere.,
django/tests/admin_changelist/test_date_hierarchy.py,54,Southern hemisphere.,
django/tests/cache/tests.py,1,Unit tests for cache framework,
django/tests/cache/tests.py,2,Uses whatever cache backend is set in the test settings file.,
django/tests/cache/tests.py,48,functions/classes for complex data type tests,
django/tests/cache/tests.py,79,"The Dummy cache backend doesn't really behave like a test backend,",
django/tests/cache/tests.py,80,so it has its own test case.,
django/tests/cache/tests.py,257,"`base` is used to pull in the memcached config from the original settings,",
django/tests/cache/tests.py,258,`exclude` is a set of cache names denoting which `_caches_setting_base` keys,
django/tests/cache/tests.py,259,should be omitted.,
django/tests/cache/tests.py,260,`params` are test specific overrides and `_caches_settings_base` is the,
django/tests/cache/tests.py,261,base config for the tests.,
django/tests/cache/tests.py,262,This results in the following search order:,
django/tests/cache/tests.py,263,params -> _caches_setting_base -> base,
django/tests/cache/tests.py,274,A common set of tests to apply to all cache backends,
django/tests/cache/tests.py,281,Simple cache set/get works,
django/tests/cache/tests.py,291,A key can be added to a cache,
django/tests/cache/tests.py,297,Test for same cache key conflicts between shared backend,
django/tests/cache/tests.py,300,should not be set in the prefixed cache,
django/tests/cache/tests.py,314,Multiple cache keys can be returned using get_many,
django/tests/cache/tests.py,321,Cache keys can be deleted,
django/tests/cache/tests.py,332,The cache can be inspected for cache keys,
django/tests/cache/tests.py,340,The in operator can be used to inspect cache contents,
django/tests/cache/tests.py,346,Cache values can be incremented,
django/tests/cache/tests.py,357,Cache values can be decremented,
django/tests/cache/tests.py,372,Many different data types can be cached,
django/tests/cache/tests.py,386,Don't want fields with callable as default to be called on cache read,
django/tests/cache/tests.py,395,We only want the default expensive calculation run once,
django/tests/cache/tests.py,399,Don't want fields with callable as default to be called on cache write,
django/tests/cache/tests.py,408,cache set should not re-evaluate default functions,
django/tests/cache/tests.py,412,Don't want fields with callable as default to be called on cache read,
django/tests/cache/tests.py,423,We only want the default expensive calculation run on creation and set,
django/tests/cache/tests.py,427,Cache values can be set to expire,
django/tests/cache/tests.py,440,cache.touch() updates the timeout.,
django/tests/cache/tests.py,447,cache.touch() works without the timeout argument.,
django/tests/cache/tests.py,456,Unicode values can be cached,
django/tests/cache/tests.py,463,Test `set`,
django/tests/cache/tests.py,469,Test `add`,
django/tests/cache/tests.py,476,Test `set_many`,
django/tests/cache/tests.py,485,Binary strings should be cacheable,
django/tests/cache/tests.py,490,Test set,
django/tests/cache/tests.py,496,Test add,
django/tests/cache/tests.py,502,Test set_many,
django/tests/cache/tests.py,509,Multiple keys can be set using set_many,
django/tests/cache/tests.py,520,set_many takes a second ``timeout`` parameter,
django/tests/cache/tests.py,527,Multiple keys can be deleted using delete_many,
django/tests/cache/tests.py,535,The cache can be emptied using clear,
django/tests/cache/tests.py,547,30 days + 1 second,
django/tests/cache/tests.py,597,Make sure a timeout given as a float doesn't crash anything.,
django/tests/cache/tests.py,607,"Create initial cache key entries. This will overflow the cache,",
django/tests/cache/tests.py,608,causing a cull.,
django/tests/cache/tests.py,612,Count how many keys are left in the cache.,
django/tests/cache/tests.py,631,mimic custom ``make_key`` method being defined since the default will,
django/tests/cache/tests.py,632,never show the below warnings,
django/tests/cache/tests.py,646,memcached doesn't allow whitespace or control characters in keys.,
django/tests/cache/tests.py,651,memcached limits key length to 250.,
django/tests/cache/tests.py,660,"set, using default version = 1",
django/tests/cache/tests.py,670,"set, default version = 1, but manually override version = 2",
django/tests/cache/tests.py,680,"v2 set, using default version = 2",
django/tests/cache/tests.py,690,"v2 set, default version = 2, but manually override version = 1",
django/tests/cache/tests.py,702,"add, default version = 1, but manually override version = 2",
django/tests/cache/tests.py,715,"v2 add, using default version = 2",
django/tests/cache/tests.py,728,"v2 add, default version = 2, but manually override version = 1",
django/tests/cache/tests.py,744,has_key,
django/tests/cache/tests.py,816,"set, using default version = 1",
django/tests/cache/tests.py,826,"set, default version = 1, but manually override version = 2",
django/tests/cache/tests.py,836,"v2 set, using default version = 2",
django/tests/cache/tests.py,846,"v2 set, default version = 2, but manually override version = 1",
django/tests/cache/tests.py,909,Two caches with different key functions aren't visible to each other,
django/tests/cache/tests.py,952,Shouldn't fail silently if trying to cache an unpicklable type.,
django/tests/cache/tests.py,975,Previous get_or_set() doesn't store None in the cache.,
django/tests/cache/tests.py,992,"Simulate cache.add() failing to add a value. In that case, the",
django/tests/cache/tests.py,993,default value should be returned.,
django/tests/cache/tests.py,1000,Spaces are used in the table name to ensure quoting/escaping is working,
django/tests/cache/tests.py,1008,The super calls needs to happen first for the settings override.,
django/tests/cache/tests.py,1013,The super call needs to happen first because it uses the database.,
django/tests/cache/tests.py,1049,Use another table name to avoid the 'table already exists' message.,
django/tests/cache/tests.py,1111,cache table should not be created on 'default',
django/tests/cache/tests.py,1114,cache table should be created on 'other',
django/tests/cache/tests.py,1115,Queries:,
django/tests/cache/tests.py,1116,1: check table doesn't already exist,
django/tests/cache/tests.py,1117,2: create savepoint (if transactional DDL is supported),
django/tests/cache/tests.py,1118,3: create the table,
django/tests/cache/tests.py,1119,4: create the index,
django/tests/cache/tests.py,1120,5: release savepoint (if transactional DDL is supported),
django/tests/cache/tests.py,1151,LocMem requires a hack to make the other caches,
django/tests/cache/tests.py,1152,share a data store with the 'normal' cache.,
django/tests/cache/tests.py,1240,memcached backend isn't guaranteed to be available.,
django/tests/cache/tests.py,1241,"To check the memcached backend, the test settings file will",
django/tests/cache/tests.py,1242,need to contain at least one cache backend setting that points at,
django/tests/cache/tests.py,1243,your memcache server.,
django/tests/cache/tests.py,1251,The memcached backends don't support cull-related options like `MAX_ENTRIES`.,
django/tests/cache/tests.py,1257,By default it's assumed that the client doesn't clean up connections,
django/tests/cache/tests.py,1258,"properly, in which case the backend must do so after each request.",
django/tests/cache/tests.py,1282,memcached does not allow whitespace or control characters in keys,
django/tests/cache/tests.py,1283,when using the ascii protocol.,
django/tests/cache/tests.py,1288,memcached limits key length to 250,
django/tests/cache/tests.py,1293,Regression test for #22845,
django/tests/cache/tests.py,1302,Regression test for #22845,
django/tests/cache/tests.py,1306,"60*60*24*365, 1 year",
django/tests/cache/tests.py,1312,By default memcached allows objects up to 1MB. For the cache_db session,
django/tests/cache/tests.py,1313,"backend to always use the current session, memcached needs to delete",
django/tests/cache/tests.py,1314,the old key if it fails to set.,
django/tests/cache/tests.py,1315,pylibmc doesn't seem to have SERVER_MAX_VALUE_LENGTH as far as I can,
django/tests/cache/tests.py,1316,tell from a quick check of its source code. This is falling back to,
django/tests/cache/tests.py,1317,the default value exposed by python-memcached on my system.,
django/tests/cache/tests.py,1327,"Some clients (e.g. pylibmc) raise when the value is too large,",
django/tests/cache/tests.py,1328,while others (e.g. python-memcached) intentionally return True,
django/tests/cache/tests.py,1329,indicating success. This test is primarily checking that the key,
django/tests/cache/tests.py,1330,"was deleted, so the return/exception behavior for the set()",
django/tests/cache/tests.py,1331,itself is not important.,
django/tests/cache/tests.py,1333,"small_value should be deleted, or set if configured to accept larger values",
django/tests/cache/tests.py,1338,"For clients that don't manage their connections properly, the",
django/tests/cache/tests.py,1339,connection is closed when the request is complete.,
django/tests/cache/tests.py,1366,Regression test for #19810,
django/tests/cache/tests.py,1396,libmemcached manages its own connections.,
django/tests/cache/tests.py,1399,"By default, pylibmc/libmemcached don't verify keys client-side and so",
django/tests/cache/tests.py,1400,this test triggers a server-side bug that causes later tests to fail,
django/tests/cache/tests.py,1401,(#19914). The `verify_keys` behavior option could be set to True (which,
django/tests/cache/tests.py,1402,"would avoid triggering the server-side bug), however this test would",
django/tests/cache/tests.py,1403,still fail due to https://github.com/lericson/pylibmc/issues/219.,
django/tests/cache/tests.py,1432,"Caches location cannot be modified through override_settings / modify_settings,",
django/tests/cache/tests.py,1433,hence settings are manipulated directly here and the setting_changed signal,
django/tests/cache/tests.py,1434,is triggered manually.,
django/tests/cache/tests.py,1441,"Call parent first, as cache.clear() may recreate cache base directory",
django/tests/cache/tests.py,1469,Returns the default instead of erroring.,
django/tests/cache/tests.py,1503,"this key is both longer than 250 characters, and has spaces",
django/tests/cache/tests.py,1541,The 5 minute (300 seconds) default expiration time for keys is,
django/tests/cache/tests.py,1542,defined in the implementation of the initializer method of the,
django/tests/cache/tests.py,1543,BaseCache type.,
django/tests/cache/tests.py,1628,"Initial vary, new headers, resulting vary.",
django/tests/cache/tests.py,1652,Expect None if no headers have been set yet.,
django/tests/cache/tests.py,1654,Set headers to an empty list.,
django/tests/cache/tests.py,1662,A specified key_prefix is taken into account.,
django/tests/cache/tests.py,1674,Expect None if no headers have been set yet.,
django/tests/cache/tests.py,1676,Set headers to an empty list.,
django/tests/cache/tests.py,1678,The querystring is taken into account.,
django/tests/cache/tests.py,1699,Make sure that the Vary header is added to the key hash,
django/tests/cache/tests.py,1710,"Initial Cache-Control, kwargs to patch_cache_control, expected Cache-Control parts",
django/tests/cache/tests.py,1713,no-cache.,
django/tests/cache/tests.py,1724,Test whether private/public attributes are mutually exclusive,
django/tests/cache/tests.py,1942,cache with non empty request.GET,
django/tests/cache/tests.py,1947,"first access, cache must return None",
django/tests/cache/tests.py,1956,cache must return content,
django/tests/cache/tests.py,1959,"different QUERY_STRING, cache must be empty",
django/tests/cache/tests.py,1965,i18n tests,
django/tests/cache/tests.py,1973,The cache can be recovered,
django/tests/cache/tests.py,1976,change the session language and set content,
django/tests/cache/tests.py,1980,change again the language,
django/tests/cache/tests.py,1982,retrieve the content from cache,
django/tests/cache/tests.py,1985,change again the language,
django/tests/cache/tests.py,1989,reset the language,
django/tests/cache/tests.py,2063,"If only one argument is passed in construction, it's being used as",
django/tests/cache/tests.py,2064,middleware.,
django/tests/cache/tests.py,2067,Now test object attributes against values defined in setUp above,
django/tests/cache/tests.py,2072,"If more arguments are being passed in construction, it's being used",
django/tests/cache/tests.py,2073,"as a decorator. First, test with ""defaults"":",
django/tests/cache/tests.py,2076,"Timeout value for 'default' cache, i.e. 30",
django/tests/cache/tests.py,2078,Value of DEFAULT_CACHE_ALIAS from django.core.cache,
django/tests/cache/tests.py,2081,"Next, test with custom values:",
django/tests/cache/tests.py,2097,Put the request through the request middleware,
django/tests/cache/tests.py,2103,Now put the response through the response middleware,
django/tests/cache/tests.py,2106,Repeating the request should result in a cache hit,
django/tests/cache/tests.py,2111,The same request through a different middleware won't hit,
django/tests/cache/tests.py,2115,The same request with a timeout _will_ hit,
django/tests/cache/tests.py,2121,decorate the same view with different cache decorators,
django/tests/cache/tests.py,2133,Request the view once,
django/tests/cache/tests.py,2137,Request again -- hit the cache,
django/tests/cache/tests.py,2141,Requesting the same view with the explicit cache should yield the same result,
django/tests/cache/tests.py,2145,Requesting with a prefix will hit a different cache key,
django/tests/cache/tests.py,2149,Hitting the same view again gives a cache hit,
django/tests/cache/tests.py,2153,And going back to the implicit cache will hit the same cache,
django/tests/cache/tests.py,2157,Requesting from an alternate cache won't hit cache,
django/tests/cache/tests.py,2161,But a repeated hit will hit cache,
django/tests/cache/tests.py,2165,And prefixing the alternate cache yields yet another cache entry,
django/tests/cache/tests.py,2169,But if we wait a couple of seconds...,
django/tests/cache/tests.py,2172,... the default cache will still hit,
django/tests/cache/tests.py,2177,... the default cache with a prefix will still hit,
django/tests/cache/tests.py,2181,... the explicit default cache will still hit,
django/tests/cache/tests.py,2185,... the explicit default cache with a prefix will still hit,
django/tests/cache/tests.py,2189,.. but a rapidly expiring cache won't hit,
django/tests/cache/tests.py,2193,.. even if it has a prefix,
django/tests/cache/tests.py,2198,"Page timeout takes precedence over the ""max-age"" section of the",
django/tests/cache/tests.py,2199,"""Cache-Control"".",
django/tests/cache/tests.py,2201,max_age < page_timeout.,
django/tests/cache/tests.py,2202,max_age > page_timeout.,
django/tests/cache/tests.py,2242,Inserting a CSRF cookie in a cookie-less request prevented caching.,
django/tests/cache/tests.py,2249,The view shouldn't be cached on the second call.,
django/tests/cache/tests.py,2286,"Initial vary, new headers, resulting vary.",
django/tests/cache/tests.py,2311,Expect None if no headers have been set yet.,
django/tests/cache/tests.py,2313,Set headers to an empty list.,
django/tests/cache/tests.py,2321,A specified key_prefix is taken into account.,
django/tests/cache/tests.py,2333,Expect None if no headers have been set yet.,
django/tests/cache/tests.py,2335,Set headers to an empty list.,
django/tests/cache/tests.py,2337,The querystring is taken into account.,
django/tests/prefetch_related/test_uuid.py,72,"From uuid-pk model, prefetch <uuid-pk model>.<integer-pk model>:",
django/tests/prefetch_related/test_uuid.py,79,"From uuid-pk model, prefetch <integer-pk model>.<integer-pk model>.<uuid-pk model>.<uuid-pk model>:",
django/tests/prefetch_related/test_uuid.py,86,"From integer-pk model, prefetch <uuid-pk model>.<integer-pk model>:",
django/tests/prefetch_related/test_uuid.py,93,"From integer-pk model, prefetch <integer-pk model>.<uuid-pk model>:",
django/tests/prefetch_related/test_uuid.py,100,"From integer-pk model, prefetch <integer-pk model>.<uuid-pk model>.<uuid-pk model>:",
django/tests/prefetch_related/test_prefetch_related_objects.py,85,"Charlotte - Poems, Jane Eyre",
django/tests/prefetch_related/test_prefetch_related_objects.py,86,Anne - Poems,
django/tests/prefetch_related/test_prefetch_related_objects.py,87,"Emily - Poems, Wuthering Heights",
django/tests/prefetch_related/test_prefetch_related_objects.py,88,Jane - Sense and Sense,
django/tests/prefetch_related/tests.py,82,Regression for #17439,
django/tests/prefetch_related/tests.py,157,"Charlotte - Poems, Jane Eyre",
django/tests/prefetch_related/tests.py,158,Anne - Poems,
django/tests/prefetch_related/tests.py,159,"Emily - Poems, Wuthering Heights",
django/tests/prefetch_related/tests.py,160,Jane - Sense and Sense,
django/tests/prefetch_related/tests.py,170,"Charlotte - Poems, Jane Eyre",
django/tests/prefetch_related/tests.py,171,Anne - Poems,
django/tests/prefetch_related/tests.py,172,"Emily - Poems, Wuthering Heights",
django/tests/prefetch_related/tests.py,173,Jane - Sense and Sense,
django/tests/prefetch_related/tests.py,181,"Charlotte - Poems, Jane Eyre",
django/tests/prefetch_related/tests.py,182,Anne - Poems,
django/tests/prefetch_related/tests.py,183,"Emily - Poems, Wuthering Heights",
django/tests/prefetch_related/tests.py,184,Jane - Sense and Sense,
django/tests/prefetch_related/tests.py,191,Need a double,
django/tests/prefetch_related/tests.py,195,"Poems, Jane Eyre",
django/tests/prefetch_related/tests.py,259,"Without the ValueError, an author was deleted due to the implicit",
django/tests/prefetch_related/tests.py,260,save of the relation assignment.,
django/tests/prefetch_related/tests.py,270,"Without the ValueError, a book was deleted due to the implicit",
django/tests/prefetch_related/tests.py,271,save of reverse relation assignment.,
django/tests/prefetch_related/tests.py,379,Set main_room for each house before creating the next one for,
django/tests/prefetch_related/tests.py,380,databases where supports_nullable_unique_constraints is False.,
django/tests/prefetch_related/tests.py,422,Ambiguous: Lookup was already seen with a different queryset.,
django/tests/prefetch_related/tests.py,427,lookup.queryset shouldn't be evaluated.,
django/tests/prefetch_related/tests.py,438,Ambiguous: Lookup houses_lst doesn't yet exist when performing houses_lst__rooms.,
django/tests/prefetch_related/tests.py,452,Not ambiguous.,
django/tests/prefetch_related/tests.py,467,Control lookups.,
django/tests/prefetch_related/tests.py,474,Test lookups.,
django/tests/prefetch_related/tests.py,489,Control lookups.,
django/tests/prefetch_related/tests.py,496,Test lookups.,
django/tests/prefetch_related/tests.py,511,Control lookups.,
django/tests/prefetch_related/tests.py,518,Test lookups.,
django/tests/prefetch_related/tests.py,536,Control lookups.,
django/tests/prefetch_related/tests.py,543,Test lookups.,
django/tests/prefetch_related/tests.py,555,Control lookups.,
django/tests/prefetch_related/tests.py,562,Test lookups.,
django/tests/prefetch_related/tests.py,596,Control lookups.,
django/tests/prefetch_related/tests.py,603,Test lookups.,
django/tests/prefetch_related/tests.py,616,Control lookups.,
django/tests/prefetch_related/tests.py,626,Test lookups.,
django/tests/prefetch_related/tests.py,639,Control lookups.,
django/tests/prefetch_related/tests.py,649,Test lookups.,
django/tests/prefetch_related/tests.py,662,Test basic.,
django/tests/prefetch_related/tests.py,673,Test queryset filtering.,
django/tests/prefetch_related/tests.py,689,Test flattened.,
django/tests/prefetch_related/tests.py,700,Test inner select_related.,
django/tests/prefetch_related/tests.py,711,Test inner prefetch.,
django/tests/prefetch_related/tests.py,727,Test ForwardManyToOneDescriptor.,
django/tests/prefetch_related/tests.py,756,Test ReverseOneToOneDescriptor.,
django/tests/prefetch_related/tests.py,783,The custom queryset filters should be applied to the queryset,
django/tests/prefetch_related/tests.py,784,instance returned by the manager.,
django/tests/prefetch_related/tests.py,794,Regression test for #24873,
django/tests/prefetch_related/tests.py,798,queryset must be evaluated once to reproduce the bug.,
django/tests/prefetch_related/tests.py,823,That error doesn't affect managers with custom ModelIterable subclasses,
django/tests/prefetch_related/tests.py,843,"To bypass caching at the related descriptor level, don't use",
django/tests/prefetch_related/tests.py,844,person.houses.all() here.,
django/tests/prefetch_related/tests.py,890,"When we prefetch the teachers, and force the query, we don't want",
django/tests/prefetch_related/tests.py,891,the default manager on teachers to immediately get all the related,
django/tests/prefetch_related/tests.py,892,"qualifications, since this will do one query per teacher.",
django/tests/prefetch_related/tests.py,928,"1 for TaggedItem table, 1 for Book table, 1 for Reader table",
django/tests/prefetch_related/tests.py,936,"1 for Comment table, 1 for Book table",
django/tests/prefetch_related/tests.py,968,"We get 3 queries - 1 for main query, 1 for content_objects since they",
django/tests/prefetch_related/tests.py,969,"all use the same table, and 1 for the 'read_by' relation.",
django/tests/prefetch_related/tests.py,971,"If we limit to books, we know that they will have 'read_by'",
django/tests/prefetch_related/tests.py,972,"attributes, so the following makes sense:",
django/tests/prefetch_related/tests.py,1023,The custom queryset filters should be applied to the queryset,
django/tests/prefetch_related/tests.py,1024,instance returned by the manager.,
django/tests/prefetch_related/tests.py,1078,Regression for #18090: the prefetching query must include an IN clause.,
django/tests/prefetch_related/tests.py,1079,"Note that on Oracle the table name is upper case in the generated SQL,",
django/tests/prefetch_related/tests.py,1080,thus the .lower() call.,
django/tests/prefetch_related/tests.py,1134,Set main_room for each house before creating the next one for,
django/tests/prefetch_related/tests.py,1135,databases where supports_nullable_unique_constraints is False.,
django/tests/prefetch_related/tests.py,1169,"The following two queries must be done in the same order as written,",
django/tests/prefetch_related/tests.py,1170,otherwise 'primary_house' will cause non-prefetched lookups,
django/tests/prefetch_related/tests.py,1185,"Because we use select_related() for 'boss', it doesn't need to be",
django/tests/prefetch_related/tests.py,1186,"prefetched, but we can still traverse it although it contains some nulls",
django/tests/prefetch_related/tests.py,1198,"One for main employee, one for boss, one for serfs",
django/tests/prefetch_related/tests.py,1217,Prefetch is done and it does not cause any errors.,
django/tests/prefetch_related/tests.py,1244,Forward,
django/tests/prefetch_related/tests.py,1256,Reverse,
django/tests/prefetch_related/tests.py,1277,Forward,
django/tests/prefetch_related/tests.py,1282,Reverse,
django/tests/prefetch_related/tests.py,1299,parent link,
django/tests/prefetch_related/tests.py,1305,child link,
django/tests/prefetch_related/tests.py,1320,Implicit hinting,
django/tests/prefetch_related/tests.py,1330,Explicit using on the same db.,
django/tests/prefetch_related/tests.py,1340,Explicit using on a different db.,
django/tests/prefetch_related/tests.py,1403,Set main_room for each house before creating the next one for,
django/tests/prefetch_related/tests.py,1404,databases where supports_nullable_unique_constraints is False.,
django/tests/prefetch_related/tests.py,1569,Results are saved in the RelatedManager's cache,
django/tests/prefetch_related/tests.py,1570,(_prefetched_objects_cache) and do not replace the,
django/tests/prefetch_related/tests.py,1571,RelatedManager on Author instances (favorite_authors),
django/tests/prefetch_related/tests.py,1577,"AuthorWithAge -> Author -> FavoriteAuthors, Book",
django/tests/prefetch_related/models.py,89,Intentionally does not have a related name.,
django/tests/prefetch_related/models.py,94,Models for default manager tests,
django/tests/prefetch_related/models.py,140,GenericRelation/GenericForeignKey tests,
django/tests/prefetch_related/models.py,195,Content-object field,
django/tests/prefetch_related/models.py,207,Models for lookup ordering tests,
django/tests/prefetch_related/models.py,233,Assume business logic forces every person to have at least one house.,
django/tests/prefetch_related/models.py,248,Models for nullable FK tests,
django/tests/prefetch_related/models.py,261,Ticket #19607,
django/tests/prefetch_related/models.py,279,"Ticket #21410: Regression when related_name=""+""",
django/tests/prefetch_related/models.py,293,Models for many-to-many with UUID pk test:,
django/tests/contenttypes_tests/test_checks.py,19,no content_type field,
django/tests/contenttypes_tests/test_checks.py,35,should be ForeignKey,
django/tests/contenttypes_tests/test_checks.py,53,should point to ContentType,
django/tests/contenttypes_tests/test_checks.py,72,missing object_id field,
django/tests/contenttypes_tests/test_management.py,15,Speed up tests by avoiding retrieving ContentTypes for all test apps.,
django/tests/contenttypes_tests/test_management.py,34,A related object is needed to show that a custom collector with,
django/tests/contenttypes_tests/test_management.py,35,can_fast_delete=False is needed.,
django/tests/contenttypes_tests/test_models.py,23,"At this point, a lookup for a ContentType should hit the DB",
django/tests/contenttypes_tests/test_models.py,27,"A second hit, though, won't hit the DB, nor will a lookup by ID",
django/tests/contenttypes_tests/test_models.py,28,or natural key,
django/tests/contenttypes_tests/test_models.py,36,"Once we clear the cache, another lookup will again hit the DB",
django/tests/contenttypes_tests/test_models.py,41,The same should happen with a lookup by natural key,
django/tests/contenttypes_tests/test_models.py,45,And a second hit shouldn't hit the DB,
django/tests/contenttypes_tests/test_models.py,61,Empty cache.,
django/tests/contenttypes_tests/test_models.py,72,Partial cache,
django/tests/contenttypes_tests/test_models.py,82,Full cache,
django/tests/contenttypes_tests/test_models.py,118,Make sure deferred model are correctly handled,
django/tests/contenttypes_tests/test_models.py,154,Make sure deferred model are correctly handled,
django/tests/contenttypes_tests/test_models.py,198,Stale ContentTypes can be fetched like any other object.,
django/tests/contenttypes_tests/test_views.py,23,"Don't use the manager to ensure the site exists with pk=1, regardless",
django/tests/contenttypes_tests/test_views.py,24,of whether or not it already exists.,
django/tests/contenttypes_tests/test_views.py,133,"get_current_site() will lookup a Site object, so these must match the",
django/tests/contenttypes_tests/test_views.py,134,domains in the MockSite model.,
django/tests/contenttypes_tests/test_views.py,146,Redirects to the domain of the first Site found in the m2m,
django/tests/contenttypes_tests/test_views.py,147,relationship (ordering is arbitrary).,
django/tests/contenttypes_tests/test_views.py,157,Redirects to the domain of the Site matching the current site's,
django/tests/contenttypes_tests/test_views.py,158,domain.,
django/tests/contenttypes_tests/test_views.py,163,Redirects to the domain of the Site matching the request's host,
django/tests/contenttypes_tests/test_views.py,164,header.,
django/tests/many_to_many/tests.py,14,Create a couple of Publications.,
django/tests/many_to_many/tests.py,33,Create an Article.,
django/tests/many_to_many/tests.py,35,You can't associate it with a Publication until it's been saved.,
django/tests/many_to_many/tests.py,42,Save it!,
django/tests/many_to_many/tests.py,44,Associate the Article with a Publication.,
django/tests/many_to_many/tests.py,47,"Create another Article, and set it to appear in both Publications.",
django/tests/many_to_many/tests.py,52,Adding a second time is OK,
django/tests/many_to_many/tests.py,63,Adding an object of the wrong type raises TypeError,
django/tests/many_to_many/tests.py,69,Add a Publication directly via publications.add by using keyword arguments.,
django/tests/many_to_many/tests.py,114,Adding via the 'other' end of an m2m,
django/tests/many_to_many/tests.py,129,Adding via the other end using keywords,
django/tests/many_to_many/tests.py,163,A single SELECT query is necessary to compare existing values to the,
django/tests/many_to_many/tests.py,164,provided one; no INSERT should be attempted.,
django/tests/many_to_many/tests.py,172,Simulate a race condition between the missing ids retrieval and,
django/tests/many_to_many/tests.py,173,the bulk insertion attempt.,
django/tests/many_to_many/tests.py,175,Disable fast-add to test the case where the slow add path is taken.,
django/tests/many_to_many/tests.py,183,Article objects have access to their related Publication objects.,
django/tests/many_to_many/tests.py,194,Publication objects have access to their related Article objects.,
django/tests/many_to_many/tests.py,216,We can perform kwarg queries across m2m relationships,
django/tests/many_to_many/tests.py,262,The count() function respects distinct() as well.,
django/tests/many_to_many/tests.py,292,"Excluding a related item works as you would expect, too (although the SQL",
django/tests/many_to_many/tests.py,293,involved is a little complex).,
django/tests/many_to_many/tests.py,300,"Reverse m2m queries are supported (i.e., starting at the table that",
django/tests/many_to_many/tests.py,301,doesn't have a ManyToManyField).,
django/tests/many_to_many/tests.py,346,"If we delete a Publication, its Articles won't be able to access it.",
django/tests/many_to_many/tests.py,357,"If we delete an Article, its Publications won't be able to access it.",
django/tests/many_to_many/tests.py,376,Bulk delete some Publications - references to deleted publications should go,
django/tests/many_to_many/tests.py,402,Bulk delete some articles - references to deleted objects should go,
django/tests/many_to_many/tests.py,406,"After the delete, the QuerySet cache needs to be cleared,",
django/tests/many_to_many/tests.py,407,and the referenced objects should be gone,
django/tests/many_to_many/tests.py,412,Removing publication from an article:,
django/tests/many_to_many/tests.py,430,And from the other end,
django/tests/many_to_many/tests.py,473,Existing many-to-many relations remain the same for values provided,
django/tests/many_to_many/tests.py,474,with a different type.,
django/tests/many_to_many/tests.py,502,Relation sets can be assigned using set().,
django/tests/many_to_many/tests.py,515,An alternate to calling clear() is to set an empty set.,
django/tests/many_to_many/tests.py,522,Relation sets can also be set using primary key values,
django/tests/many_to_many/tests.py,537,Querysets used in m2m assignments are pre-evaluated so their value,
django/tests/many_to_many/tests.py,538,isn't affected by the clearing operation in ManyRelatedManager.set(),
django/tests/many_to_many/tests.py,539,(#19816).,
django/tests/many_to_many/tests.py,549,Querysets used in M2M assignments are pre-evaluated so their value,
django/tests/many_to_many/tests.py,550,isn't affected by the clearing operation in ManyRelatedManager.set(),
django/tests/many_to_many/tests.py,551,(#19816).,
django/tests/many_to_many/tests.py,561,Relation sets can be cleared:,
django/tests/many_to_many/tests.py,566,And you can clear from the other end,
django/tests/many_to_many/models.py,37,Assign a string as name to make sure the intermediary model is,
django/tests/many_to_many/models.py,38,correctly created. Refs #20207,
django/tests/many_to_many/models.py,64,Models to test correct related_name inheritance,
django/tests/gis_tests/test_geoforms.py,23,Input that doesn't specify the SRID is assumed to be in the SRID,
django/tests/gis_tests/test_geoforms.py,24,of the input field.,
django/tests/gis_tests/test_geoforms.py,28,"Making the field in a different SRID from that of the geometry, and",
django/tests/gis_tests/test_geoforms.py,29,asserting it transforms.,
django/tests/gis_tests/test_geoforms.py,33,The cleaned geometry is transformed to 32140 (the widget map_srid is 3857).,
django/tests/gis_tests/test_geoforms.py,40,"Form fields, by default, are required (`required=True`)",
django/tests/gis_tests/test_geoforms.py,45,This will clean None as a geometry (See #10660).,
django/tests/gis_tests/test_geoforms.py,51,"By default, all geometry types are allowed.",
django/tests/gis_tests/test_geoforms.py,55,to_python() uses the SRID of OpenLayersWidget if the,
django/tests/gis_tests/test_geoforms.py,56,converted value doesn't have an SRID.,
django/tests/gis_tests/test_geoforms.py,61,a WKT for any other geom_type will be properly transformed by `to_python`,
django/tests/gis_tests/test_geoforms.py,66,but rejected by `clean`,
django/tests/gis_tests/test_geoforms.py,88,to_python returns the same GEOSGeometry for a WKT,
django/tests/gis_tests/test_geoforms.py,92,but raises a ValidationError for any other string,
django/tests/gis_tests/test_geoforms.py,129,valid,
django/tests/gis_tests/test_geoforms.py,130,empty,
django/tests/gis_tests/test_geoforms.py,131,invalid,
django/tests/gis_tests/test_geoforms.py,137,The first point can't use assertInHTML() due to non-deterministic,
django/tests/gis_tests/test_geoforms.py,138,ordering of the rendered dictionary.,
django/tests/gis_tests/test_geoforms.py,154,Only the invalid PNT(0) triggers an error log entry.,
django/tests/gis_tests/test_geoforms.py,155,Deserialization is called in form clean and in widget rendering.,
django/tests/gis_tests/test_geoforms.py,238,map_srid in openlayers.html template must not be localized.,
django/tests/gis_tests/test_geoforms.py,423,Force deserialize use due to a string value,
django/tests/gis_tests/test_data.py,10,Path where reference test data is located.,
django/tests/gis_tests/test_data.py,47,"Shapefile is default extension, unless specified otherwise.",
django/tests/gis_tests/test_data.py,58,Converting lists to tuples of certain keyword args,
django/tests/gis_tests/test_data.py,59,so coordinate test cases will match (JSON has no,
django/tests/gis_tests/test_data.py,60,concept of tuple).,
django/tests/gis_tests/test_data.py,85,Load up the test geometry data from fixture into global.,
django/tests/gis_tests/utils.py,38,Decorators to disable entire test functions for specific,
django/tests/gis_tests/utils.py,39,spatial backends.,
django/tests/gis_tests/utils.py,44,Shortcut booleans to omit only portions of tests.,
django/tests/gis_tests/utils.py,52,MySQL spatial indices can't handle NULL geometries.,
django/tests/gis_tests/utils.py,71,Resolve output_field before as_sql() so touching it in,
django/tests/gis_tests/utils.py,72,as_sql() won't change __dict__.,
django/tests/gis_tests/test_geoip2.py,14,Note: Requires both the GeoIP country and city datasets.,
django/tests/gis_tests/test_geoip2.py,15,The GEOIP_DATA path should be the only setting set (the directory,
django/tests/gis_tests/test_geoip2.py,16,should contain links or the actual database files 'GeoLite2-City.mmdb' and,
django/tests/gis_tests/test_geoip2.py,17,'GeoLite2-City.mmdb'.,
django/tests/gis_tests/test_geoip2.py,28,Everything inferred from GeoIP path,
django/tests/gis_tests/test_geoip2.py,30,Passing in data path explicitly.,
django/tests/gis_tests/test_geoip2.py,31,MaxMind Python API syntax.,
django/tests/gis_tests/test_geoip2.py,32,path accepts str and pathlib.Path.,
django/tests/gis_tests/test_geoip2.py,42,Only passing in the location of one database.,
django/tests/gis_tests/test_geoip2.py,50,Improper parameters.,
django/tests/gis_tests/test_geoip2.py,71,"No city database available, these calls should fail.",
django/tests/gis_tests/test_geoip2.py,77,Non-string query should raise TypeError,
django/tests/gis_tests/test_geoip2.py,112,Country queries should still work.,
django/tests/gis_tests/test_geoip2.py,128,City information dictionary.,
django/tests/gis_tests/test_geoip2.py,147,IPv6 address for www.nhm.ku.edu,
django/tests/gis_tests/test_spatialrefsys.py,11,"Only the beginning, because there are differences depending on installed libs",
django/tests/gis_tests/test_spatialrefsys.py,13,+ellps=WGS84 has been removed in the 4326 proj string in proj-4.8,
django/tests/gis_tests/test_spatialrefsys.py,17,"From proj's ""cs2cs -le"" and Wikipedia (semi-minor only)",
django/tests/gis_tests/test_spatialrefsys.py,45,"From proj's ""cs2cs -le"" and Wikipedia (semi-minor only)",
django/tests/gis_tests/test_spatialrefsys.py,68,"Some of the authority names are borked on Oracle, e.g., SRID=32140.",
django/tests/gis_tests/test_spatialrefsys.py,69,"also, Oracle Spatial seems to add extraneous info to fields, hence the",
django/tests/gis_tests/test_spatialrefsys.py,70,the testing with the 'startswith' flag.,
django/tests/gis_tests/test_spatialrefsys.py,77,No proj.4 and different srtext on oracle backends :(,
django/tests/gis_tests/test_spatialrefsys.py,93,Can't get 'NAD83 / Texas South Central' from PROJ.4 string,
django/tests/gis_tests/test_spatialrefsys.py,94,on SpatiaLite,
django/tests/gis_tests/test_spatialrefsys.py,97,Testing the SpatialReference object directly.,
django/tests/gis_tests/test_spatialrefsys.py,108,Getting the ellipsoid and precision parameters.,
django/tests/gis_tests/test_spatialrefsys.py,112,Getting our spatial reference and its ellipsoid,
django/tests/gis_tests/test_ptr.py,26,These assignments are OK. None is allowed because it's equivalent,
django/tests/gis_tests/test_ptr.py,27,to the NULL pointer.,
django/tests/gis_tests/test_ptr.py,33,"Because pointers have been set to NULL, an exception is raised on",
django/tests/gis_tests/test_ptr.py,34,access. Raising an exception is preferable to a segmentation fault,
django/tests/gis_tests/test_ptr.py,35,that commonly occurs when a C method is given a NULL reference.,
django/tests/gis_tests/test_ptr.py,40,Anything that's either not None or the acceptable pointer type,
django/tests/gis_tests/test_ptr.py,41,results in a TypeError when trying to assign it to the `ptr` property.,
django/tests/gis_tests/test_ptr.py,42,"Thus, memory addresses (integers) and pointers of the incorrect type",
django/tests/gis_tests/test_ptr.py,43,(in `bad_ptrs`) aren't allowed.,
django/tests/gis_tests/test_ptr.py,50,Object can be deleted without a destructor set.,
django/tests/gis_tests/test_ptr.py,55,A NULL pointer isn't passed to the destructor.,
django/tests/gis_tests/test_ptr.py,61,The destructor is called if set.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,81,Create model instance from JSON raster,
django/tests/gis_tests/rasterapp/test_rasterfield.py,84,Test raster metadata properties,
django/tests/gis_tests/rasterapp/test_rasterfield.py,88,Compare srs,
django/tests/gis_tests/rasterapp/test_rasterfield.py,90,Compare pixel values,
django/tests/gis_tests/rasterapp/test_rasterfield.py,92,"If numpy, convert result to list",
django/tests/gis_tests/rasterapp/test_rasterfield.py,95,Loop through rows in band data and assert single,
django/tests/gis_tests/rasterapp/test_rasterfield.py,96,value is as expected.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,113,Parse json raster,
django/tests/gis_tests/rasterapp/test_rasterfield.py,115,Update srid to another value,
django/tests/gis_tests/rasterapp/test_rasterfield.py,117,Save model and get it from db,
django/tests/gis_tests/rasterapp/test_rasterfield.py,120,Confirm raster has been transformed to the default srid,
django/tests/gis_tests/rasterapp/test_rasterfield.py,122,Confirm geotransform is in lat/lon,
django/tests/gis_tests/rasterapp/test_rasterfield.py,148,Create test raster and geom.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,159,Loop through all the GIS lookups.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,161,Construct lookup filter strings.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,169,Set lookup values for distance lookups.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,180,Set lookup values for the relate lookup.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,191,The isvalid lookup doesn't make sense for rasters.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,194,Set lookup values for all function based operators.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,200,"Override band lookup for these, as it's not supported.",
django/tests/gis_tests/rasterapp/test_rasterfield.py,202,Set lookup values for all other operators.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,205,Create query filter combinations.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,220,Apply this query filter.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,223,Evaluate normal filter qs.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,226,Evaluate on conditional Q expressions.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,235,Create test raster and geom.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,240,Filter raster with different lookup raster formats.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,250,Filter in an unprojected coordinate system.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,254,Filter with band index transform.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,262,Filter raster by geom.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,275,Filter geom by raster.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,279,Filter through related model.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,283,Filter through related model with band index transform,
django/tests/gis_tests/rasterapp/test_rasterfield.py,287,Filter through conditional statements.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,291,Filter through different lookup.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,315,Point is in the interior,
django/tests/gis_tests/rasterapp/test_rasterfield.py,318,Point is in the exterior,
django/tests/gis_tests/rasterapp/test_rasterfield.py,321,A point on the boundary is not contained properly,
django/tests/gis_tests/rasterapp/test_rasterfield.py,324,Raster is located left of the point,
django/tests/gis_tests/rasterapp/test_rasterfield.py,330,Shift raster upwards,
django/tests/gis_tests/rasterapp/test_rasterfield.py,332,The raster in the model is not strictly below,
django/tests/gis_tests/rasterapp/test_rasterfield.py,335,Shift raster further upwards,
django/tests/gis_tests/rasterapp/test_rasterfield.py,337,The raster in the model is strictly below,
django/tests/gis_tests/rasterapp/test_rasterfield.py,343,Move raster to overlap with the model point on the left side,
django/tests/gis_tests/rasterapp/test_rasterfield.py,346,Raster overlaps with point in model,
django/tests/gis_tests/rasterapp/test_rasterfield.py,349,Change left side of raster to be nodata values,
django/tests/gis_tests/rasterapp/test_rasterfield.py,353,Raster does not overlap anymore after polygonization,
django/tests/gis_tests/rasterapp/test_rasterfield.py,354,where the nodata zone is not included.,
django/tests/gis_tests/rasterapp/test_rasterfield.py,358,Test with invalid dict lookup parameter,
django/tests/gis_tests/rasterapp/test_rasterfield.py,363,Test with invalid string lookup parameter,
django/tests/gis_tests/rasterapp/test_rasterfield.py,387,It's easier to check the indexes in the generated SQL than to write,
django/tests/gis_tests/rasterapp/test_rasterfield.py,388,tests that cover all index combinations.,
django/tests/gis_tests/rasterapp/migrations/0001_setup_extensions.py,9,PostGIS 3+ requires postgis_raster extension.,
django/tests/gis_tests/gis_migrations/test_commands.py,33,The right tables exist,
django/tests/gis_tests/gis_migrations/test_commands.py,39,Unmigrate models.,
django/tests/gis_tests/gis_migrations/test_commands.py,41,All tables are gone,
django/tests/gis_tests/gis_migrations/test_commands.py,47,Even geometry columns metadata,
django/tests/gis_tests/gis_migrations/test_commands.py,51,Not all GIS backends have geometry columns model,
django/tests/gis_tests/gis_migrations/test_commands.py,58,"Revert the ""unmigration""",
django/tests/gis_tests/gis_migrations/test_operations.py,26,Delete table after testing,
django/tests/gis_tests/gis_migrations/test_operations.py,111,Test GeometryColumns when available,
django/tests/gis_tests/gis_migrations/test_operations.py,115,Test spatial indices when available,
django/tests/gis_tests/gis_migrations/test_operations.py,134,Test spatial indices when available,
django/tests/gis_tests/gis_migrations/test_operations.py,145,Test GeometryColumns when available,
django/tests/gis_tests/gis_migrations/test_operations.py,149,Test spatial indices when available,
django/tests/gis_tests/gis_migrations/test_operations.py,161,Test spatial indices when available,
django/tests/gis_tests/gis_migrations/test_operations.py,172,Test GeometryColumns when available,
django/tests/gis_tests/gis_migrations/test_operations.py,199,Add 3rd dimension.,
django/tests/gis_tests/gis_migrations/test_operations.py,205,Rewind to 2 dimensions.,
django/tests/gis_tests/gis_migrations/migrations/0001_setup_extensions.py,9,PostGIS 3+ requires postgis_raster extension.,
django/tests/gis_tests/geo3d/views.py,1,Create your views here.,
django/tests/gis_tests/geo3d/tests.py,21,"The coordinates of each city, with Z values corresponding to their",
django/tests/gis_tests/geo3d/tests.py,22,altitude in meters.,
django/tests/gis_tests/geo3d/tests.py,34,Reference mapping of city name to its altitude (Z value).,
django/tests/gis_tests/geo3d/tests.py,37,3D freeway data derived from the National Elevation Dataset:,
django/tests/gis_tests/geo3d/tests.py,38,http://seamless.usgs.gov/products/9arc.php,
django/tests/gis_tests/geo3d/tests.py,59,Bounding box polygon for inner-loop of Houston (in projected coordinate,
django/tests/gis_tests/geo3d/tests.py,60,"system 32140), with elevation values from the National Elevation Dataset",
django/tests/gis_tests/geo3d/tests.py,61,(see above).,
django/tests/gis_tests/geo3d/tests.py,71,Interstate (2D / 3D and Geographic/Projected variants),
django/tests/gis_tests/geo3d/tests.py,76,Creating a geographic and projected version of the,
django/tests/gis_tests/geo3d/tests.py,77,interstate in both 2D and 3D.,
django/tests/gis_tests/geo3d/tests.py,124,Testing both geometry and geography fields,
django/tests/gis_tests/geo3d/tests.py,144,Import here as GDAL is required for those imports,
django/tests/gis_tests/geo3d/tests.py,150,"The VRT is 3D, but should still be able to map sans the Z.",
django/tests/gis_tests/geo3d/tests.py,155,"The city shapefile is 2D, and won't be able to fill the coordinates",
django/tests/gis_tests/geo3d/tests.py,156,"in the 3D model -- thus, a LayerMapError is raised.",
django/tests/gis_tests/geo3d/tests.py,160,3D model should take 3D data just fine.,
django/tests/gis_tests/geo3d/tests.py,165,"Making sure LayerMapping.make_multi works right, by converting",
django/tests/gis_tests/geo3d/tests.py,166,a Point25D into a MultiPoint25D.,
django/tests/gis_tests/geo3d/tests.py,176,PostGIS query that returned the reference EWKT for this test:,
django/tests/gis_tests/geo3d/tests.py,177,`SELECT ST_AsText(ST_Union(point)) FROM geo3d_city3d;`,
django/tests/gis_tests/geo3d/tests.py,187,Ordering of points in the resulting geometry may vary between implementations,
django/tests/gis_tests/geo3d/tests.py,196,`SELECT ST_Extent3D(point) FROM geo3d_city3d;`,
django/tests/gis_tests/geo3d/tests.py,216,KML should be 3D.,
django/tests/gis_tests/geo3d/tests.py,217,"`SELECT ST_AsKML(point, 6) FROM geo3d_city3d WHERE name = 'Houston';`",
django/tests/gis_tests/geo3d/tests.py,227,GeoJSON should be 3D,
django/tests/gis_tests/geo3d/tests.py,228,"`SELECT ST_AsGeoJSON(point, 6) FROM geo3d_city3d WHERE name='Houston';`",
django/tests/gis_tests/geo3d/tests.py,237,Reference query for values below:,
django/tests/gis_tests/geo3d/tests.py,238,"`SELECT ST_Perimeter3D(poly), ST_Perimeter2D(poly) FROM geo3d_polygon3d;`",
django/tests/gis_tests/geo3d/tests.py,251,"ST_Length_Spheroid Z-aware, and thus does not need to use",
django/tests/gis_tests/geo3d/tests.py,252,a separate function internally.,
django/tests/gis_tests/geo3d/tests.py,253,"`SELECT ST_Length_Spheroid(line, 'SPHEROID[""GRS 1980"",6378137,298.257222101]')",
django/tests/gis_tests/geo3d/tests.py,254,FROM geo3d_interstate[2d|3d];`,
django/tests/gis_tests/geo3d/tests.py,264,Making sure `ST_Length3D` is used on for a projected,
django/tests/gis_tests/geo3d/tests.py,265,and 3D model rather than `ST_Length`.,
django/tests/gis_tests/geo3d/tests.py,266,`SELECT ST_Length(line) FROM geo3d_interstateproj2d;`,
django/tests/gis_tests/geo3d/tests.py,268,`SELECT ST_Length3D(line) FROM geo3d_interstateproj3d;`,
django/tests/gis_tests/geo3d/tests.py,280,Mapping of City name to reference Z values.,
django/tests/gis_tests/distapp/tests.py,7,alias for Distance,
django/tests/gis_tests/distapp/tests.py,25,A point we are testing distances with -- using a WGS84,
django/tests/gis_tests/distapp/tests.py,26,coordinate that'll be implicitly transformed to that to,
django/tests/gis_tests/distapp/tests.py,27,"the coordinate system of the field, EPSG:32140 (Texas South Central",
django/tests/gis_tests/distapp/tests.py,28,w/units in meters),
django/tests/gis_tests/distapp/tests.py,30,Another one for Australia,
django/tests/gis_tests/distapp/tests.py,55,Distances -- all should be equal (except for the,
django/tests/gis_tests/distapp/tests.py,56,"degree/meter pair in au_cities, that's somewhat",
django/tests/gis_tests/distapp/tests.py,57,approximate).,
django/tests/gis_tests/distapp/tests.py,61,Expected cities for Australia and Texas.,
django/tests/gis_tests/distapp/tests.py,65,Performing distance queries on two projected coordinate systems one,
django/tests/gis_tests/distapp/tests.py,66,with units in meters and the other in units of U.S. survey feet.,
django/tests/gis_tests/distapp/tests.py,78,With a complex geometry expression,
django/tests/gis_tests/distapp/tests.py,81,Now performing the `dwithin` queries on a geodetic coordinate system.,
django/tests/gis_tests/distapp/tests.py,87,Result in meters,
django/tests/gis_tests/distapp/tests.py,90,Result in units of the field,
django/tests/gis_tests/distapp/tests.py,93,Creating the query set.,
django/tests/gis_tests/distapp/tests.py,96,A ValueError should be raised on PostGIS when trying to,
django/tests/gis_tests/distapp/tests.py,97,pass Distance objects into a DWithin query using a,
django/tests/gis_tests/distapp/tests.py,98,geodetic field.,
django/tests/gis_tests/distapp/tests.py,109,Retrieving the cities within a 20km 'donut' w/a 7km radius 'hole',
django/tests/gis_tests/distapp/tests.py,110,"(thus, Houston and Southside place will be excluded as tested in",
django/tests/gis_tests/distapp/tests.py,111,the `test02_dwithin` above).,
django/tests/gis_tests/distapp/tests.py,120,Doing a distance query using Polygons instead of a Point.,
django/tests/gis_tests/distapp/tests.py,124,If we add a little more distance 77002 should be included.,
django/tests/gis_tests/distapp/tests.py,133,Line is from Canberra to Sydney.  Query is for all other cities within,
django/tests/gis_tests/distapp/tests.py,134,a 100km of that line (which should exclude only Hobart & Adelaide).,
django/tests/gis_tests/distapp/tests.py,143,SpatiaLite is less accurate and returns 102.8km for Batemans Bay.,
django/tests/gis_tests/distapp/tests.py,148,Too many params.,
django/tests/gis_tests/distapp/tests.py,151,Too few params.,
django/tests/gis_tests/distapp/tests.py,158,Getting all cities w/in 550 miles of Hobart.,
django/tests/gis_tests/distapp/tests.py,164,Cities that are either really close or really far from Wollongong --,
django/tests/gis_tests/distapp/tests.py,165,and using different units of distance.,
django/tests/gis_tests/distapp/tests.py,167,Yards (~17km) & Nautical miles.,
django/tests/gis_tests/distapp/tests.py,169,Normal geodetic distance lookup (uses `distance_sphere` on PostGIS.,
django/tests/gis_tests/distapp/tests.py,174,Geodetic distance lookup but telling GeoDjango to use `distance_spheroid`,
django/tests/gis_tests/distapp/tests.py,175,instead (we should get the same results b/c accuracy variance won't matter,
django/tests/gis_tests/distapp/tests.py,176,in this test case).,
django/tests/gis_tests/distapp/tests.py,199,With a combined expression,
django/tests/gis_tests/distapp/tests.py,206,With spheroid param,
django/tests/gis_tests/distapp/tests.py,214,With a complex geometry expression,
django/tests/gis_tests/distapp/tests.py,239,LineString of Wollongong and Adelaide coords.,
django/tests/gis_tests/distapp/tests.py,294,NOQA,
django/tests/gis_tests/distapp/tests.py,302,Reference queries:,
django/tests/gis_tests/distapp/tests.py,303,SELECT ST_Area(poly) FROM distapp_southtexaszipcode;,
django/tests/gis_tests/distapp/tests.py,305,Tolerance has to be lower for Oracle,
django/tests/gis_tests/distapp/tests.py,330,"The point for La Grange, TX",
django/tests/gis_tests/distapp/tests.py,332,Reference distances in feet and in meters. Got these values from,
django/tests/gis_tests/distapp/tests.py,333,using the provided raw SQL statements.,
django/tests/gis_tests/distapp/tests.py,334,"SELECT ST_Distance(point, ST_Transform(ST_GeomFromText('POINT(-96.876369 29.905320)', 4326), 32140))",
django/tests/gis_tests/distapp/tests.py,335,FROM distapp_southtexascity;,
django/tests/gis_tests/distapp/tests.py,339,"SELECT ST_Distance(point, ST_Transform(ST_GeomFromText('POINT(-96.876369 29.905320)', 4326), 2278))",
django/tests/gis_tests/distapp/tests.py,340,FROM distapp_southtexascityft;,
django/tests/gis_tests/distapp/tests.py,345,Testing using different variations of parameters and using models,
django/tests/gis_tests/distapp/tests.py,346,with different projected coordinate systems.,
django/tests/gis_tests/distapp/tests.py,351,"Original query done on PostGIS, have to adjust AlmostEqual tolerance",
django/tests/gis_tests/distapp/tests.py,352,for Oracle.,
django/tests/gis_tests/distapp/tests.py,355,Ensuring expected distances are returned for each distance queryset.,
django/tests/gis_tests/distapp/tests.py,367,Testing geodetic distance calculation with a non-point geometry,
django/tests/gis_tests/distapp/tests.py,368,(a LineString of Wollongong and Shellharbour coords).,
django/tests/gis_tests/distapp/tests.py,371,Reference query:,
django/tests/gis_tests/distapp/tests.py,372,"SELECT ST_distance_sphere(point, ST_GeomFromText('LINESTRING(150.9020 -34.4245,150.8700 -34.5789)', 4326))",
django/tests/gis_tests/distapp/tests.py,373,FROM distapp_australiacity ORDER BY name;,
django/tests/gis_tests/distapp/tests.py,380,Testing equivalence to within a meter (kilometer on SpatiaLite).,
django/tests/gis_tests/distapp/tests.py,388,Got the reference distances using the raw SQL statements:,
django/tests/gis_tests/distapp/tests.py,389,"SELECT ST_distance_spheroid(point, ST_GeomFromText('POINT(151.231341 -33.952685)', 4326),",
django/tests/gis_tests/distapp/tests.py,390,"'SPHEROID[""WGS 84"",6378137.0,298.257223563]') FROM distapp_australiacity WHERE (NOT (id = 11));",
django/tests/gis_tests/distapp/tests.py,391,"SELECT ST_distance_sphere(point, ST_GeomFromText('POINT(151.231341 -33.952685)', 4326))",
django/tests/gis_tests/distapp/tests.py,392,FROM distapp_australiacity WHERE (NOT (id = 11));  st_distance_sphere,
django/tests/gis_tests/distapp/tests.py,405,Testing with spheroid distances first.,
django/tests/gis_tests/distapp/tests.py,414,"PostGIS uses sphere-only distances by default, testing these as well.",
django/tests/gis_tests/distapp/tests.py,458,Tolerance is greater than distance.,
django/tests/gis_tests/distapp/tests.py,478,Oracle already handles geographic distance calculation.,
django/tests/gis_tests/distapp/tests.py,484,We'll be using a Polygon (created by buffering the centroid,
django/tests/gis_tests/distapp/tests.py,485,of 77005 to 100m) -- which aren't allowed in geographic distance,
django/tests/gis_tests/distapp/tests.py,486,"queries normally, however our field has been transformed to",
django/tests/gis_tests/distapp/tests.py,487,a non-geographic system.,
django/tests/gis_tests/distapp/tests.py,490,Reference query:,
django/tests/gis_tests/distapp/tests.py,491,"SELECT ST_Distance(ST_Transform(""distapp_censuszipcode"".""poly"", 32140),",
django/tests/gis_tests/distapp/tests.py,492,"ST_GeomFromText('<buffer_wkt>', 32140))",
django/tests/gis_tests/distapp/tests.py,493,"FROM ""distapp_censuszipcode"";",
django/tests/gis_tests/distapp/tests.py,496,Having our buffer in the SRID of the transformation and of the field,
django/tests/gis_tests/distapp/tests.py,497,-- should get the same results. The first buffer has no need for,
django/tests/gis_tests/distapp/tests.py,498,transformation SQL because it is the same SRID as what was given,
django/tests/gis_tests/distapp/tests.py,499,"to `transform()`.  The second buffer will need to be transformed,",
django/tests/gis_tests/distapp/tests.py,500,however.,
django/tests/gis_tests/distapp/tests.py,525,Reference query (should use `length_spheroid`).,
django/tests/gis_tests/distapp/tests.py,526,"SELECT ST_length_spheroid(ST_GeomFromText('<wkt>', 4326) 'SPHEROID[""WGS 84"",6378137,298.257223563,",
django/tests/gis_tests/distapp/tests.py,527,"AUTHORITY[""EPSG"",""7030""]]');",
django/tests/gis_tests/distapp/tests.py,535,TODO: test with spheroid argument (True and False),
django/tests/gis_tests/distapp/tests.py,537,Does not support geodetic coordinate systems.,
django/tests/gis_tests/distapp/tests.py,541,Now doing length on a projected coordinate system.,
django/tests/gis_tests/distapp/tests.py,547,Length with an explicit geometry value.,
django/tests/gis_tests/distapp/tests.py,556,Reference query:,
django/tests/gis_tests/distapp/tests.py,557,SELECT ST_Perimeter(distapp_southtexaszipcode.poly) FROM distapp_southtexaszipcode;,
django/tests/gis_tests/distapp/tests.py,564,Running on points; should return 0.,
django/tests/gis_tests/distapp/tests.py,571,Currently only Oracle supports calculating the perimeter on geodetic,
django/tests/gis_tests/distapp/tests.py,572,geometries (without being transformed).,
django/tests/gis_tests/distapp/tests.py,579,But should work fine when transformed to projected coordinates,
django/tests/gis_tests/distapp/tests.py,588,Creating SouthTexasZipcode w/NULL value.,
django/tests/gis_tests/distapp/tests.py,590,"Performing distance/area queries against the NULL PolygonField,",
django/tests/gis_tests/distapp/tests.py,591,and ensuring the result of the operations is None.,
django/tests/gis_tests/gdal_tests/test_driver.py,7,vector,
django/tests/gis_tests/gdal_tests/test_driver.py,10,raster,
django/tests/gis_tests/gdal_tests/test_geom.py,20,OGRGeomType should initialize on all these inputs.,
django/tests/gis_tests/gdal_tests/test_geom.py,28,Should throw TypeError on this input,
django/tests/gis_tests/gdal_tests/test_geom.py,36,"Equivalence can take strings, ints, and other OGRGeomTypes",
django/tests/gis_tests/gdal_tests/test_geom.py,46,Testing the Django field name equivalent property.,
django/tests/gis_tests/gdal_tests/test_geom.py,52,'Geometry' initialization implies an unknown geometry type.,
django/tests/gis_tests/gdal_tests/test_geom.py,73,First with ewkt output when no SRID in EWKT,
django/tests/gis_tests/gdal_tests/test_geom.py,75,No test consumption with an SRID specified.,
django/tests/gis_tests/gdal_tests/test_geom.py,93,Constructing w/HEX,
django/tests/gis_tests/gdal_tests/test_geom.py,103,Constructing w/WKB.,
django/tests/gis_tests/gdal_tests/test_geom.py,112,Loading jsons to prevent decimal differences,
django/tests/gis_tests/gdal_tests/test_geom.py,116,Test input with some garbage content (but valid json) (#15529),
django/tests/gis_tests/gdal_tests/test_geom.py,125,No 3D,
django/tests/gis_tests/gdal_tests/test_geom.py,136,First one from WKT,
django/tests/gis_tests/gdal_tests/test_geom.py,139,Creating empty multipoint,
django/tests/gis_tests/gdal_tests/test_geom.py,142,adding each point from the multipoints,
django/tests/gis_tests/gdal_tests/test_geom.py,143,should take WKT as well,
django/tests/gis_tests/gdal_tests/test_geom.py,144,they should equal,
django/tests/gis_tests/gdal_tests/test_geom.py,165,"Testing the x, y properties.",
django/tests/gis_tests/gdal_tests/test_geom.py,195,"self.assertEqual(101, lr.geom_type.num)",
django/tests/gis_tests/gdal_tests/test_geom.py,205,Testing `from_bbox` class method,
django/tests/gis_tests/gdal_tests/test_geom.py,221,Testing area & centroid.,
django/tests/gis_tests/gdal_tests/test_geom.py,227,Testing equivalence,
django/tests/gis_tests/gdal_tests/test_geom.py,241,Accessing Polygon attributes in templates should work.,
django/tests/gis_tests/gdal_tests/test_geom.py,250,Both rings in this geometry are not closed.,
django/tests/gis_tests/gdal_tests/test_geom.py,257,Two closing points should've been added,
django/tests/gis_tests/gdal_tests/test_geom.py,281,Creating a geometry w/spatial reference,
django/tests/gis_tests/gdal_tests/test_geom.py,286,Ensuring that SRS is propagated to clones.,
django/tests/gis_tests/gdal_tests/test_geom.py,290,Ensuring all children geometries (polygons and their rings) all,
django/tests/gis_tests/gdal_tests/test_geom.py,291,return the assigned spatial reference as well.,
django/tests/gis_tests/gdal_tests/test_geom.py,297,Ensuring SRS propagate in topological ops.,
django/tests/gis_tests/gdal_tests/test_geom.py,305,Instantiating w/an integer SRID,
django/tests/gis_tests/gdal_tests/test_geom.py,312,Incrementing through the multipolygon after the spatial reference,
django/tests/gis_tests/gdal_tests/test_geom.py,313,has been re-assigned.,
django/tests/gis_tests/gdal_tests/test_geom.py,318,Changing each ring in the polygon,
django/tests/gis_tests/gdal_tests/test_geom.py,321,back to WGS84,
django/tests/gis_tests/gdal_tests/test_geom.py,324,Using the `srid` property.,
django/tests/gis_tests/gdal_tests/test_geom.py,329,"srs/srid may be assigned their own values, even when srs is None.",
django/tests/gis_tests/gdal_tests/test_geom.py,339,"Using an srid, a SpatialReference object, and a CoordTransform object",
django/tests/gis_tests/gdal_tests/test_geom.py,340,or transformations.,
django/tests/gis_tests/gdal_tests/test_geom.py,347,Testing use of the `clone` keyword.,
django/tests/gis_tests/gdal_tests/test_geom.py,365,Making sure the coordinate dimension is still 2D.,
django/tests/gis_tests/gdal_tests/test_geom.py,378,__sub__ is difference operator,
django/tests/gis_tests/gdal_tests/test_geom.py,379,testing __isub__,
django/tests/gis_tests/gdal_tests/test_geom.py,391,__and__ is intersection operator,
django/tests/gis_tests/gdal_tests/test_geom.py,392,testing __iand__,
django/tests/gis_tests/gdal_tests/test_geom.py,403,__xor__ is symmetric difference operator,
django/tests/gis_tests/gdal_tests/test_geom.py,404,testing __ixor__,
django/tests/gis_tests/gdal_tests/test_geom.py,415,__or__ is union operator,
django/tests/gis_tests/gdal_tests/test_geom.py,416,testing __ior__,
django/tests/gis_tests/gdal_tests/test_geom.py,421,Can't insert a Point into a MultiPolygon.,
django/tests/gis_tests/gdal_tests/test_geom.py,427,GeometryCollection.add may take an OGRGeometry (if another collection,
django/tests/gis_tests/gdal_tests/test_geom.py,428,of the same type all child geoms will be added individually) or WKT.,
django/tests/gis_tests/gdal_tests/test_geom.py,436,Adding a geometry at a time,
django/tests/gis_tests/gdal_tests/test_geom.py,437,Adding WKT,
django/tests/gis_tests/gdal_tests/test_geom.py,438,Adding a MultiPolygon's entire contents at once.,
django/tests/gis_tests/gdal_tests/test_geom.py,444,"The xmin, ymin, xmax, ymax of the MultiPoint should be returned.",
django/tests/gis_tests/gdal_tests/test_geom.py,447,Testing on the 'real world' Polygon.,
django/tests/gis_tests/gdal_tests/test_geom.py,476,A bug in GDAL versions prior to 1.7 changes the coordinate,
django/tests/gis_tests/gdal_tests/test_geom.py,477,dimension of a geometry after it has been transformed.,
django/tests/gis_tests/gdal_tests/test_geom.py,478,This test ensures that the bug workarounds employed within,
django/tests/gis_tests/gdal_tests/test_geom.py,479,`OGRGeometry.transform` indeed work.,
django/tests/gis_tests/gdal_tests/test_geom.py,484,"For both the 2D and 3D MultiLineString, ensure _both_ the dimension",
django/tests/gis_tests/gdal_tests/test_geom.py,485,of the collection and the component LineString have the expected,
django/tests/gis_tests/gdal_tests/test_geom.py,486,coordinate dimension after transform.,
django/tests/gis_tests/gdal_tests/test_geom.py,499,"Testing binary predicates, `assertIs` is used to check that bool is returned.",
django/tests/gis_tests/gdal_tests/test_envelope.py,21,Thanks to ww for this,
django/tests/gis_tests/gdal_tests/test_envelope.py,37,Shouldn't raise an exception for min_x == max_x or min_y == max_y,
django/tests/gis_tests/gdal_tests/test_srs.py,17,Some Spatial Reference examples,
django/tests/gis_tests/gdal_tests/test_srs.py,64,"This is really ESRI format, not WKT -- but the import should work the same",
django/tests/gis_tests/gdal_tests/test_srs.py,73,Well-Known Names,
django/tests/gis_tests/gdal_tests/test_srs.py,225,Attribute to test,
django/tests/gis_tests/gdal_tests/test_srs.py,226,Expected result,
django/tests/gis_tests/gdal_tests/test_raster.py,49,Assert correct values for file based raster,
django/tests/gis_tests/gdal_tests/test_raster.py,63,Create in-memory rasters and change gtvalues,
django/tests/gis_tests/gdal_tests/test_raster.py,65,geotransform accepts both floats and ints,
django/tests/gis_tests/gdal_tests/test_raster.py,105,Create uint8 raster with full pixel data range (0-255),
django/tests/gis_tests/gdal_tests/test_raster.py,117,Get array from raster,
django/tests/gis_tests/gdal_tests/test_raster.py,122,Assert data is same as original input,
django/tests/gis_tests/gdal_tests/test_raster.py,126,Prepare tempfile,
django/tests/gis_tests/gdal_tests/test_raster.py,129,Create file-based raster from scratch,
django/tests/gis_tests/gdal_tests/test_raster.py,147,Reload newly created raster from file,
django/tests/gis_tests/gdal_tests/test_raster.py,165,Open a raster as a file object.,
django/tests/gis_tests/gdal_tests/test_raster.py,167,Instantiate a raster from the file binary buffer.,
django/tests/gis_tests/gdal_tests/test_raster.py,169,The data of the in-memory file is equal to the source file.,
django/tests/gis_tests/gdal_tests/test_raster.py,179,Create a vsi-based raster from scratch.,
django/tests/gis_tests/gdal_tests/test_raster.py,190,The virtual file exists.,
django/tests/gis_tests/gdal_tests/test_raster.py,193,Delete GDALRaster.,
django/tests/gis_tests/gdal_tests/test_raster.py,196,The virtual file has been removed.,
django/tests/gis_tests/gdal_tests/test_raster.py,207,Create a vsi-based raster from scratch.,
django/tests/gis_tests/gdal_tests/test_raster.py,218,Do a round trip from raster to buffer to raster.,
django/tests/gis_tests/gdal_tests/test_raster.py,222,Band data is equal to nodata value except on input block of ones.,
django/tests/gis_tests/gdal_tests/test_raster.py,224,The vsi buffer is None for rasters that are not vsi based.,
django/tests/gis_tests/gdal_tests/test_raster.py,241,Get array from raster.,
django/tests/gis_tests/gdal_tests/test_raster.py,245,Band data is equal to nodata value except on input block of ones.,
django/tests/gis_tests/gdal_tests/test_raster.py,252,Create raster filled with nodata values.,
django/tests/gis_tests/gdal_tests/test_raster.py,260,Get array from raster.,
django/tests/gis_tests/gdal_tests/test_raster.py,264,All band data is equal to nodata value.,
django/tests/gis_tests/gdal_tests/test_raster.py,270,Create raster without data and without nodata value.,
django/tests/gis_tests/gdal_tests/test_raster.py,278,Get array from raster.,
django/tests/gis_tests/gdal_tests/test_raster.py,282,Band data is equal to zero because no nodata value has been specified.,
django/tests/gis_tests/gdal_tests/test_raster.py,290,Create file-based raster from scratch,
django/tests/gis_tests/gdal_tests/test_raster.py,298,Set metadata on raster and on a band.,
django/tests/gis_tests/gdal_tests/test_raster.py,306,Update metadata on raster.,
django/tests/gis_tests/gdal_tests/test_raster.py,312,Remove metadata on raster.,
django/tests/gis_tests/gdal_tests/test_raster.py,369,Data,
django/tests/gis_tests/gdal_tests/test_raster.py,376,Make a compressed copy of an existing raster.,
django/tests/gis_tests/gdal_tests/test_raster.py,378,Check physically if compression worked.,
django/tests/gis_tests/gdal_tests/test_raster.py,380,Create file-based raster with options from scratch.,
django/tests/gis_tests/gdal_tests/test_raster.py,402,Check if options used on creation are stored in metadata.,
django/tests/gis_tests/gdal_tests/test_raster.py,403,Reopening the raster ensures that all metadata has been written,
django/tests/gis_tests/gdal_tests/test_raster.py,404,to the file.,
django/tests/gis_tests/gdal_tests/test_raster.py,412,Create in memory raster,
django/tests/gis_tests/gdal_tests/test_raster.py,430,"Test altering the scale, width, and height of a raster",
django/tests/gis_tests/gdal_tests/test_raster.py,447,Test altering the name and datatype (to float),
django/tests/gis_tests/gdal_tests/test_raster.py,468,Create in memory raster.,
django/tests/gis_tests/gdal_tests/test_raster.py,483,Warp raster onto a location that does not cover any pixels of the original.,
django/tests/gis_tests/gdal_tests/test_raster.py,487,The result is an empty raster filled with the correct nodata value.,
django/tests/gis_tests/gdal_tests/test_raster.py,491,Prepare tempfile and nodata value,
django/tests/gis_tests/gdal_tests/test_raster.py,495,Create in file based raster,
django/tests/gis_tests/gdal_tests/test_raster.py,513,Transform raster into srid 4326.,
django/tests/gis_tests/gdal_tests/test_raster.py,516,Reload data from disk,
django/tests/gis_tests/gdal_tests/test_raster.py,533,The reprojection of a raster that spans over a large area,
django/tests/gis_tests/gdal_tests/test_raster.py,534,skews the data matrix and might introduce nodata values.,
django/tests/gis_tests/gdal_tests/test_raster.py,595,Statistics are persisted into PAM file on band close,
django/tests/gis_tests/gdal_tests/test_raster.py,600,Open raster in read mode,
django/tests/gis_tests/gdal_tests/test_raster.py,604,Setting attributes in write mode raises exception in the _flush method,
django/tests/gis_tests/gdal_tests/test_raster.py,609,Create in-memory raster and get band,
django/tests/gis_tests/gdal_tests/test_raster.py,621,Set nodata value,
django/tests/gis_tests/gdal_tests/test_raster.py,625,Set data for entire dataset,
django/tests/gis_tests/gdal_tests/test_raster.py,632,Prepare data for setting values in subsequent tests,
django/tests/gis_tests/gdal_tests/test_raster.py,636,Set data from list,
django/tests/gis_tests/gdal_tests/test_raster.py,644,Set data from packed block,
django/tests/gis_tests/gdal_tests/test_raster.py,652,Set data from bytes,
django/tests/gis_tests/gdal_tests/test_raster.py,660,Set data from bytearray,
django/tests/gis_tests/gdal_tests/test_raster.py,668,Set data from memoryview,
django/tests/gis_tests/gdal_tests/test_raster.py,676,Set data from numpy array,
django/tests/gis_tests/gdal_tests/test_raster.py,684,Test json input data,
django/tests/gis_tests/gdal_tests/test_raster.py,703,Populate statistics cache,
django/tests/gis_tests/gdal_tests/test_raster.py,705,Change data,
django/tests/gis_tests/gdal_tests/test_raster.py,707,Statistics are properly updated,
django/tests/gis_tests/gdal_tests/test_raster.py,709,Change nodata_value,
django/tests/gis_tests/gdal_tests/test_raster.py,711,Statistics are properly updated,
django/tests/gis_tests/gdal_tests/test_raster.py,746,"Variations for input (data, shape, expected result).",
django/tests/gis_tests/gdal_tests/test_ds.py,20,Using a regex because of small differences depending on GDAL versions.,
django/tests/gis_tests/gdal_tests/test_ds.py,25,List of acceptable data sources.,
django/tests/gis_tests/gdal_tests/test_ds.py,30,Got extent from QGIS,
django/tests/gis_tests/gdal_tests/test_ds.py,46,"VRT uses CSV, which all types are OFTString.",
django/tests/gis_tests/gdal_tests/test_ds.py,47,Min/Max from CSV,
django/tests/gis_tests/gdal_tests/test_ds.py,59,Got extent from QGIS,
django/tests/gis_tests/gdal_tests/test_ds.py,73,Got extent from QGIS,
django/tests/gis_tests/gdal_tests/test_ds.py,103,Loading up the data source,
django/tests/gis_tests/gdal_tests/test_ds.py,106,Making sure the layer count is what's expected (only 1 layer in a SHP file),
django/tests/gis_tests/gdal_tests/test_ds.py,109,Making sure GetName works,
django/tests/gis_tests/gdal_tests/test_ds.py,112,Making sure the driver name matches up,
django/tests/gis_tests/gdal_tests/test_ds.py,115,Making sure indexing works,
django/tests/gis_tests/gdal_tests/test_ds.py,134,"Incrementing through each layer, this tests DataSource.__iter__",
django/tests/gis_tests/gdal_tests/test_ds.py,136,Making sure we get the number of features we expect,
django/tests/gis_tests/gdal_tests/test_ds.py,139,Making sure we get the number of fields we expect,
django/tests/gis_tests/gdal_tests/test_ds.py,143,"Testing the layer's extent (an Envelope), and its properties",
django/tests/gis_tests/gdal_tests/test_ds.py,150,Now checking the field names.,
django/tests/gis_tests/gdal_tests/test_ds.py,155,Negative FIDs are not allowed.,
django/tests/gis_tests/gdal_tests/test_ds.py,162,Testing `Layer.get_fields` (which uses Layer.__iter__),
django/tests/gis_tests/gdal_tests/test_ds.py,166,Testing `Layer.__getitem__`.,
django/tests/gis_tests/gdal_tests/test_ds.py,170,"Maybe this should be in the test below, but we might as well test",
django/tests/gis_tests/gdal_tests/test_ds.py,171,the feature values here while in this loop.,
django/tests/gis_tests/gdal_tests/test_ds.py,184,Using the first data-source because the same slice,
django/tests/gis_tests/gdal_tests/test_ds.py,185,can be used for both the layer and the control values.,
django/tests/gis_tests/gdal_tests/test_ds.py,203,See ticket #9448.,
django/tests/gis_tests/gdal_tests/test_ds.py,205,This DataSource object is not accessible outside this,
django/tests/gis_tests/gdal_tests/test_ds.py,206,"scope.  However, a reference should still be kept alive",
django/tests/gis_tests/gdal_tests/test_ds.py,207,on the `Layer` returned.,
django/tests/gis_tests/gdal_tests/test_ds.py,211,Making sure we can call OGR routines on the Layer returned.,
django/tests/gis_tests/gdal_tests/test_ds.py,216,"Same issue for Feature/Field objects, see #18640",
django/tests/gis_tests/gdal_tests/test_ds.py,224,Incrementing through each layer,
django/tests/gis_tests/gdal_tests/test_ds.py,226,Incrementing through each feature in the layer,
django/tests/gis_tests/gdal_tests/test_ds.py,228,"Making sure the number of fields, and the geometry type",
django/tests/gis_tests/gdal_tests/test_ds.py,229,are what's expected.,
django/tests/gis_tests/gdal_tests/test_ds.py,233,Making sure the fields match to an appropriate OFT type.,
django/tests/gis_tests/gdal_tests/test_ds.py,235,"Making sure we get the proper OGR Field instance, using",
django/tests/gis_tests/gdal_tests/test_ds.py,236,a string value index for the feature.,
django/tests/gis_tests/gdal_tests/test_ds.py,240,Testing Feature.__iter__,
django/tests/gis_tests/gdal_tests/test_ds.py,249,Incrementing through each layer and feature.,
django/tests/gis_tests/gdal_tests/test_ds.py,254,Making sure we get the right Geometry name & type,
django/tests/gis_tests/gdal_tests/test_ds.py,258,Making sure the SpatialReference is as expected.,
django/tests/gis_tests/gdal_tests/test_ds.py,267,"When not set, it should be None.",
django/tests/gis_tests/gdal_tests/test_ds.py,270,Must be set a/an OGRGeometry or 4-tuple.,
django/tests/gis_tests/gdal_tests/test_ds.py,274,Setting the spatial filter with a tuple/list with the extent of,
django/tests/gis_tests/gdal_tests/test_ds.py,275,a buffer centering around Pueblo.,
django/tests/gis_tests/gdal_tests/test_ds.py,285,Setting the spatial filter with an OGRGeometry for buffer centering,
django/tests/gis_tests/gdal_tests/test_ds.py,286,around Houston.,
django/tests/gis_tests/gdal_tests/test_ds.py,297,Clearing the spatial filter by setting it to None.  Now,
django/tests/gis_tests/gdal_tests/test_ds.py,298,should indicate that there are 3 features in the Layer.,
django/tests/gis_tests/gdal_tests/test_ds.py,304,"Using *.dbf from Census 2010 TIGER Shapefile for Texas,",
django/tests/gis_tests/gdal_tests/test_ds.py,305,which has land area ('ALAND10') stored in a Real field,
django/tests/gis_tests/gdal_tests/test_ds.py,306,with no precision.,
django/tests/gis_tests/gdal_tests/test_ds.py,309,Reference value obtained using `ogrinfo`.,
django/tests/gis_tests/layermap/tests.py,29,Dictionaries to hold what's expected in the county shapefile.,
django/tests/gis_tests/layermap/tests.py,31,Number of polygons for each.,
django/tests/gis_tests/layermap/tests.py,40,Model field that does not exist.,
django/tests/gis_tests/layermap/tests.py,44,Shapefile field that does not exist.,
django/tests/gis_tests/layermap/tests.py,48,Nonexistent geographic field type.,
django/tests/gis_tests/layermap/tests.py,52,Incrementing through the bad mapping dictionaries and,
django/tests/gis_tests/layermap/tests.py,53,ensuring that a LayerMapError is raised.,
django/tests/gis_tests/layermap/tests.py,58,A LookupError should be thrown for bogus encodings.,
django/tests/gis_tests/layermap/tests.py,64,Setting up for the LayerMapping.,
django/tests/gis_tests/layermap/tests.py,68,There should be three cities in the shape file.,
django/tests/gis_tests/layermap/tests.py,71,"Opening up the shapefile, and verifying the values in each",
django/tests/gis_tests/layermap/tests.py,72,of the features made it to the model.,
django/tests/gis_tests/layermap/tests.py,81,Comparing the geometries.,
django/tests/gis_tests/layermap/tests.py,88,When the `strict` keyword is set an error encountered will force,
django/tests/gis_tests/layermap/tests.py,89,the importation to stop.,
django/tests/gis_tests/layermap/tests.py,95,This LayerMapping should work b/c `strict` is not set.,
django/tests/gis_tests/layermap/tests.py,99,Two interstate should have imported correctly.,
django/tests/gis_tests/layermap/tests.py,102,Verifying the values in the layer w/the model.,
django/tests/gis_tests/layermap/tests.py,105,Only the first two features of this shapefile are valid.,
django/tests/gis_tests/layermap/tests.py,113,"Everything but the first two decimal digits were truncated,",
django/tests/gis_tests/layermap/tests.py,114,because the Interstate model's `length` field has decimal_places=2.,
django/tests/gis_tests/layermap/tests.py,124,Should only be one record b/c of `unique` keyword.,
django/tests/gis_tests/layermap/tests.py,127,Checking ForeignKey mapping.,
django/tests/gis_tests/layermap/tests.py,129,Multiple records because `unique` was not set.,
django/tests/gis_tests/layermap/tests.py,136,All the following should work.,
django/tests/gis_tests/layermap/tests.py,138,Telling LayerMapping that we want no transformations performed on the data.,
django/tests/gis_tests/layermap/tests.py,141,Specifying the source spatial reference system via the `source_srs` keyword.,
django/tests/gis_tests/layermap/tests.py,145,Unique may take tuple or string parameters.,
django/tests/gis_tests/layermap/tests.py,149,Now test for failures,
django/tests/gis_tests/layermap/tests.py,151,Testing invalid params for the `unique` keyword.,
django/tests/gis_tests/layermap/tests.py,156,"No source reference system defined in the shapefile, should raise an error.",
django/tests/gis_tests/layermap/tests.py,161,Passing in invalid ForeignKey mapping parameters -- must be a dictionary,
django/tests/gis_tests/layermap/tests.py,162,mapping for the model the ForeignKey points to.,
django/tests/gis_tests/layermap/tests.py,172,There exist no State models for the ForeignKey mapping to work -- should raise,
django/tests/gis_tests/layermap/tests.py,173,a MissingForeignKey exception (this error would be ignored if the `strict`,
django/tests/gis_tests/layermap/tests.py,174,keyword is not set).,
django/tests/gis_tests/layermap/tests.py,179,Now creating the state models so the ForeignKey mapping may work.,
django/tests/gis_tests/layermap/tests.py,184,"If a mapping is specified as a collection, all OGR fields that",
django/tests/gis_tests/layermap/tests.py,185,"are not collections will be converted into them.  For example,",
django/tests/gis_tests/layermap/tests.py,186,a Point column would be converted to MultiPoint. Other things being done,
django/tests/gis_tests/layermap/tests.py,187,w/the keyword args:,
django/tests/gis_tests/layermap/tests.py,188,`transform=False`: Specifies that no transform is to be done; this,
django/tests/gis_tests/layermap/tests.py,189,has the effect of ignoring the spatial reference check (because the,
django/tests/gis_tests/layermap/tests.py,190,county shapefile does not have implicit spatial reference info).,
django/tests/gis_tests/layermap/tests.py,191,,
django/tests/gis_tests/layermap/tests.py,192,`unique='name'`: Creates models on the condition that they have,
django/tests/gis_tests/layermap/tests.py,193,unique county names; geometries from each feature however will be,
django/tests/gis_tests/layermap/tests.py,194,"appended to the geometry collection of the unique model.  Thus,",
django/tests/gis_tests/layermap/tests.py,195,all of the various islands in Honolulu county will be in in one,
django/tests/gis_tests/layermap/tests.py,196,database record with a MULTIPOLYGON type.,
django/tests/gis_tests/layermap/tests.py,200,A reference that doesn't use the unique keyword; a new database record will,
django/tests/gis_tests/layermap/tests.py,201,created for each polygon.,
django/tests/gis_tests/layermap/tests.py,205,The county helper is called to ensure integrity of County models.,
django/tests/gis_tests/layermap/tests.py,210,Function for clearing out all the counties before testing.,
django/tests/gis_tests/layermap/tests.py,218,Initializing the LayerMapping object to use in these tests.,
django/tests/gis_tests/layermap/tests.py,221,Bad feature id ranges should raise a type error.,
django/tests/gis_tests/layermap/tests.py,227,Step keyword should not be allowed w/`fid_range`.,
django/tests/gis_tests/layermap/tests.py,228,layer[3:5],
django/tests/gis_tests/layermap/tests.py,233,"Features IDs 3 & 4 are for Galveston County, Texas -- only",
django/tests/gis_tests/layermap/tests.py,234,one model is returned because the `unique` keyword was set.,
django/tests/gis_tests/layermap/tests.py,239,"Features IDs 5 and beyond for Honolulu County, Hawaii, and",
django/tests/gis_tests/layermap/tests.py,240,"FID 0 is for Pueblo County, Colorado.",
django/tests/gis_tests/layermap/tests.py,242,layer[5:],
django/tests/gis_tests/layermap/tests.py,243,layer[:1],
django/tests/gis_tests/layermap/tests.py,245,Only Pueblo & Honolulu counties should be present because of,
django/tests/gis_tests/layermap/tests.py,246,the `unique` keyword.  Have to set `order_by` on this QuerySet,
django/tests/gis_tests/layermap/tests.py,247,or else MySQL will return a different ordering than the other dbs.,
django/tests/gis_tests/layermap/tests.py,257,Testing the `step` keyword -- should get the same counties,
django/tests/gis_tests/layermap/tests.py,258,"regardless of we use a step that divides equally, that is odd,",
django/tests/gis_tests/layermap/tests.py,259,or that is larger than the dataset.,
django/tests/gis_tests/layermap/tests.py,274,Parent model has geometry field.,
django/tests/gis_tests/layermap/tests.py,278,Grandparent has geometry field.,
django/tests/gis_tests/layermap/tests.py,373,When a model fails to save due to IntegrityError (null in non-null,
django/tests/gis_tests/layermap/tests.py,374,"column), subsequent saves fail with ""An error occurred in the current",
django/tests/gis_tests/layermap/tests.py,375,transaction. You can't execute queries until the end of the 'atomic',
django/tests/gis_tests/layermap/tests.py,376,"block."" On Oracle and MySQL, the one object that did load appears in",
django/tests/gis_tests/layermap/tests.py,377,"this count. On other databases, no records appear.",
django/tests/gis_tests/layermap/tests.py,389,ContentType objects are created during a post-migrate signal while,
django/tests/gis_tests/layermap/tests.py,390,performing fixture teardown using the default database alias and,
django/tests/gis_tests/layermap/tests.py,391,don't abide by the database specified by this router.,
django/tests/gis_tests/layermap/models.py,20,Multipolygon in NAD83,
django/tests/gis_tests/layermap/models.py,47,"Same as `City` above, but for testing model inheritance.",
django/tests/gis_tests/layermap/models.py,92,Mapping dictionaries for the models above.,
django/tests/gis_tests/layermap/models.py,95,ForeignKey's use another mapping dictionary for the _related_ Model (State in this case).,
django/tests/gis_tests/layermap/models.py,97,Will convert POLYGON features into MULTIPOLYGONS.,
django/tests/gis_tests/inspectapp/tests.py,48,Geography type is specific to PostGIS,
django/tests/gis_tests/inspectapp/tests.py,88,Same test with a 25D-type geometry field,
django/tests/gis_tests/inspectapp/tests.py,114,"Getting the database identifier used by OGR, if None returned",
django/tests/gis_tests/inspectapp/tests.py,115,GDAL does not have the support compiled in.,
django/tests/gis_tests/inspectapp/tests.py,121,Writing shapefiles via GDAL currently does not support writing OGRTime,
django/tests/gis_tests/inspectapp/tests.py,122,"fields, so we need to actually use a database",
django/tests/gis_tests/inspectapp/tests.py,137,"The ordering of model fields might vary depending on several factors (version of GDAL, etc.)",
django/tests/gis_tests/inspectapp/tests.py,139,SpatiaLite introspection is somewhat lacking (#29461).,
django/tests/gis_tests/inspectapp/tests.py,145,Probably a bug between GDAL and MariaDB on time fields.,
django/tests/gis_tests/inspectapp/tests.py,156,Some backends may have srid=-1,
django/tests/gis_tests/inspectapp/tests.py,193,Map from the django backend into the OGR driver name and database identifier,
django/tests/gis_tests/inspectapp/tests.py,194,https://www.gdal.org/ogr/ogr_formats.html,
django/tests/gis_tests/inspectapp/tests.py,195,,
django/tests/gis_tests/inspectapp/tests.py,196,TODO: Support Oracle (OCI).,
django/tests/gis_tests/inspectapp/tests.py,209,Ensure that GDAL library has driver support for the database.,
django/tests/gis_tests/inspectapp/tests.py,215,SQLite/SpatiaLite in-memory databases,
django/tests/gis_tests/inspectapp/tests.py,219,Build the params of the OGR database connection string,
django/tests/gis_tests/inspectapp/tests.py,224,Don't add the parameter if it is not in django's settings,
django/tests/gis_tests/relatedapp/tests.py,23,Reference data for what's in the fixtures.,
django/tests/gis_tests/relatedapp/tests.py,41,This combines the Extent and Union aggregates into one query,
django/tests/gis_tests/relatedapp/tests.py,44,"One for all locations, one that excludes New Mexico (Roswell).",
django/tests/gis_tests/relatedapp/tests.py,51,The tolerance value is to four decimal places because of differences,
django/tests/gis_tests/relatedapp/tests.py,52,between the Oracle and PostGIS spatial backends on the extent calculation.,
django/tests/gis_tests/relatedapp/tests.py,74,This combines the Extent and Union aggregates into one query,
django/tests/gis_tests/relatedapp/tests.py,77,These are the points that are components of the aggregate geographic,
django/tests/gis_tests/relatedapp/tests.py,78,union that is returned.  Each point # corresponds to City PK.,
django/tests/gis_tests/relatedapp/tests.py,85,The second union aggregate is for a union,
django/tests/gis_tests/relatedapp/tests.py,86,query that includes limiting information in the WHERE clause (in other,
django/tests/gis_tests/relatedapp/tests.py,87,words a `.filter()` precedes the call to `.aggregate(Union()`).,
django/tests/gis_tests/relatedapp/tests.py,99,Ordering of points in the result of the union is not defined and,
django/tests/gis_tests/relatedapp/tests.py,100,"implementation-dependent (DB backend, GEOS version)",
django/tests/gis_tests/relatedapp/tests.py,107,Regression test for #9752.,
django/tests/gis_tests/relatedapp/tests.py,112,Constructing a dummy parcel border and getting the City instance for,
django/tests/gis_tests/relatedapp/tests.py,113,assigning the FK.,
django/tests/gis_tests/relatedapp/tests.py,121,First parcel has incorrect center point that is equal to the City;,
django/tests/gis_tests/relatedapp/tests.py,122,it also has a second border that is different from the first as a,
django/tests/gis_tests/relatedapp/tests.py,123,100ft buffer around the City.,
django/tests/gis_tests/relatedapp/tests.py,129,"Now creating a second Parcel where the borders are the same, just",
django/tests/gis_tests/relatedapp/tests.py,130,in different coordinate systems.  The center points are also the,
django/tests/gis_tests/relatedapp/tests.py,131,"same (but in different coordinate systems), and this time they",
django/tests/gis_tests/relatedapp/tests.py,132,actually correspond to the centroid of the border.,
django/tests/gis_tests/relatedapp/tests.py,138,"Should return the second Parcel, which has the center within the",
django/tests/gis_tests/relatedapp/tests.py,139,border.,
django/tests/gis_tests/relatedapp/tests.py,144,This time center2 is in a different coordinate system and needs to be,
django/tests/gis_tests/relatedapp/tests.py,145,wrapped in transformation SQL.,
django/tests/gis_tests/relatedapp/tests.py,154,"Should return the first Parcel, which has the center point equal",
django/tests/gis_tests/relatedapp/tests.py,155,to the point in the City ForeignKey.,
django/tests/gis_tests/relatedapp/tests.py,160,This time the city column should be wrapped in transformation SQL.,
django/tests/gis_tests/relatedapp/tests.py,175,"Incrementing through each of the models, dictionaries, and tuples",
django/tests/gis_tests/relatedapp/tests.py,176,returned by each QuerySet.,
django/tests/gis_tests/relatedapp/tests.py,178,The values should be Geometry objects and not raw strings returned,
django/tests/gis_tests/relatedapp/tests.py,179,by the spatial database.,
django/tests/gis_tests/relatedapp/tests.py,200,The expected ID values -- notice the last two location IDs,
django/tests/gis_tests/relatedapp/tests.py,201,are out of order.  Dallas and Houston have location IDs that differ,
django/tests/gis_tests/relatedapp/tests.py,202,from their PKs -- this is done to ensure that the related location,
django/tests/gis_tests/relatedapp/tests.py,203,ID column is selected instead of ID column for the city.,
django/tests/gis_tests/relatedapp/tests.py,211,TODO: fix on Oracle -- qs2 returns an empty result for an unknown reason,
django/tests/gis_tests/relatedapp/tests.py,225,TODO: fix on Oracle -- get the following error because the SQL is ordered,
django/tests/gis_tests/relatedapp/tests.py,226,"by a geometry object, which Oracle apparently doesn't like:",
django/tests/gis_tests/relatedapp/tests.py,227,ORA-22901: cannot compare nested table or VARRAY or LOB attributes of an object type,
django/tests/gis_tests/relatedapp/tests.py,231,"The City, 'Fort Worth' uses the same location as Dallas.",
django/tests/gis_tests/relatedapp/tests.py,234,Count annotation should be 2 for the Dallas location now.,
django/tests/gis_tests/relatedapp/tests.py,240,"Should only be one author (Trevor Paglen) returned by this query, and",
django/tests/gis_tests/relatedapp/tests.py,241,"the annotation should have 3 for the number of books, see #11087.",
django/tests/gis_tests/relatedapp/tests.py,242,"Also testing with a values(), see #11489.",
django/tests/gis_tests/relatedapp/tests.py,250,TODO: fix on Oracle -- get the following error because the SQL is ordered,
django/tests/gis_tests/relatedapp/tests.py,251,"by a geometry object, which Oracle apparently doesn't like:",
django/tests/gis_tests/relatedapp/tests.py,252,ORA-22901: cannot compare nested table or VARRAY or LOB attributes of an object type,
django/tests/gis_tests/relatedapp/tests.py,261,TODO: The phantom model does appear on Oracle.,
django/tests/gis_tests/relatedapp/tests.py,267,"Should be `None`, and not a 'dummy' model.",
django/tests/gis_tests/relatedapp/tests.py,275,Reference query:,
django/tests/gis_tests/relatedapp/tests.py,276,"SELECT AsText(ST_Collect(""relatedapp_location"".""point"")) FROM ""relatedapp_city"" LEFT OUTER JOIN",
django/tests/gis_tests/relatedapp/tests.py,277,"""relatedapp_location"" ON (""relatedapp_city"".""location_id"" = ""relatedapp_location"".""id"")",
django/tests/gis_tests/relatedapp/tests.py,278,"WHERE ""relatedapp_city"".""state"" = 'TX';",
django/tests/gis_tests/relatedapp/tests.py,285,"Even though Dallas and Ft. Worth share same point, Collect doesn't",
django/tests/gis_tests/relatedapp/tests.py,286,consolidate -- that's why 4 points in MultiPoint.,
django/tests/gis_tests/relatedapp/tests.py,293,This triggers TypeError when `get_default_columns` has no `local_only`,
django/tests/gis_tests/relatedapp/tests.py,294,keyword.  The TypeError is swallowed if QuerySet is actually,
django/tests/gis_tests/relatedapp/tests.py,295,evaluated as list generation swallows TypeError in CPython.,
django/tests/gis_tests/relatedapp/tests.py,305,"TODO: Related tests for KML, GML, and distance lookups.",
django/tests/gis_tests/relatedapp/models.py,38,Throwing a curveball w/`db_column` here.,
django/tests/gis_tests/geogapp/tests.py,44,Only a subset of the geometry functions & operator are available,
django/tests/gis_tests/geogapp/tests.py,45,"to PostGIS geography types.  For more information, visit:",
django/tests/gis_tests/geogapp/tests.py,46,http://postgis.refractions.net/documentation/manual-1.5/ch08.html#PostGIS_GeographyFunctions,
django/tests/gis_tests/geogapp/tests.py,48,ST_Within not available.,
django/tests/gis_tests/geogapp/tests.py,51,`@` operator not available.,
django/tests/gis_tests/geogapp/tests.py,55,"Regression test for #14060, `~=` was never really implemented for PostGIS.",
django/tests/gis_tests/geogapp/tests.py,62,"There is a similar test in `layermap` that uses the same data set,",
django/tests/gis_tests/geogapp/tests.py,63,but the County model here is a bit different.,
django/tests/gis_tests/geogapp/tests.py,66,Getting the shapefile and mapping dictionary.,
django/tests/gis_tests/geogapp/tests.py,74,"Reference county names, number of polygons, and state names.",
django/tests/gis_tests/geogapp/tests.py,76,Number of polygons for each.,
django/tests/gis_tests/geogapp/tests.py,115,SpatiaLite returns non-zero distance for polygons and points,
django/tests/gis_tests/geogapp/tests.py,116,covered by that polygon.,
django/tests/gis_tests/geogapp/tests.py,129,PostGIS casts geography to geometry when distance2 is calculated.,
django/tests/gis_tests/geogapp/tests.py,135,Distance function combined with a lookup.,
django/tests/gis_tests/geogapp/tests.py,144,SELECT ST_Area(poly) FROM geogapp_zipcode WHERE code='77002';,
django/tests/gis_tests/geogapp/tests.py,146,Round to the nearest thousand as possible values (depending on,
django/tests/gis_tests/geogapp/tests.py,147,"the database and geolib) include 5439084, 5439100, 5439101.",
django/tests/gis_tests/geos_tests/test_mutable_list.py,1,"Copyright (c) 2008-2009 Aryeh Leib Taurog, http://www.aryehleib.com",
django/tests/gis_tests/geos_tests/test_mutable_list.py,2,All rights reserved.,
django/tests/gis_tests/geos_tests/test_mutable_list.py,3,,
django/tests/gis_tests/geos_tests/test_mutable_list.py,4,"Modified from original contribution by Aryeh Leib Taurog, which was",
django/tests/gis_tests/geos_tests/test_mutable_list.py,5,released under the New BSD license.,
django/tests/gis_tests/geos_tests/test_mutable_list.py,29,this would work:,
django/tests/gis_tests/geos_tests/test_mutable_list.py,30,self._list = self._mytype(items),
django/tests/gis_tests/geos_tests/test_mutable_list.py,31,but then we wouldn't be testing length parameter,
django/tests/gis_tests/geos_tests/test_mutable_list.py,228,'set index %d' % i),
django/tests/gis_tests/geos_tests/test_mutable_list.py,230,'get index %d' % i),
django/tests/gis_tests/geos_tests/test_mutable_list.py,232,'del index %d' % i),
django/tests/gis_tests/geos_tests/test_io.py,12,Creating a WKTReader instance,
django/tests/gis_tests/geos_tests/test_io.py,16,read() should return a GEOSGeometry,
django/tests/gis_tests/geos_tests/test_io.py,24,Should only accept string objects.,
django/tests/gis_tests/geos_tests/test_io.py,31,"Creating a WKTWriter instance, testing its ptr property.",
django/tests/gis_tests/geos_tests/test_io.py,47,Creating a WKBReader instance,
django/tests/gis_tests/geos_tests/test_io.py,54,read() should return a GEOSGeometry on either a hex string or,
django/tests/gis_tests/geos_tests/test_io.py,55,a WKB buffer.,
django/tests/gis_tests/geos_tests/test_io.py,69,Representations of 'POINT (5 23)' in hex -- one normal and,
django/tests/gis_tests/geos_tests/test_io.py,70,the other with the byte order changed.,
django/tests/gis_tests/geos_tests/test_io.py,80,Ensuring bad byteorders are not accepted.,
django/tests/gis_tests/geos_tests/test_io.py,82,Equivalent of `wkb_w.byteorder = bad_byteorder`,
django/tests/gis_tests/geos_tests/test_io.py,86,Setting the byteorder to 0 (for Big Endian),
django/tests/gis_tests/geos_tests/test_io.py,91,Back to Little Endian,
django/tests/gis_tests/geos_tests/test_io.py,94,"Now, trying out the 3D and SRID flags.",
django/tests/gis_tests/geos_tests/test_io.py,103,Ensuring bad output dimensions are not accepted,
django/tests/gis_tests/geos_tests/test_io.py,108,Now setting the output dimensions to be 3,
django/tests/gis_tests/geos_tests/test_io.py,114,Telling the WKBWriter to include the srid in the representation.,
django/tests/gis_tests/geos_tests/test_geos.py,42,For testing HEX(EWKB).,
django/tests/gis_tests/geos_tests/test_geos.py,45,"`SELECT ST_AsHEXEWKB(ST_GeomFromText('POINT(0 1)', 4326));`",
django/tests/gis_tests/geos_tests/test_geos.py,47,`SELECT ST_AsHEXEWKB(ST_GeomFromEWKT('SRID=4326;POINT(0 1 2)'));`,
django/tests/gis_tests/geos_tests/test_geos.py,53,OGC-compliant HEX will not have SRID value.,
django/tests/gis_tests/geos_tests/test_geos.py,57,HEXEWKB should be appropriate for its dimension -- have to use an,
django/tests/gis_tests/geos_tests/test_geos.py,58,"a WKBWriter w/dimension set accordingly, else GEOS will insert",
django/tests/gis_tests/geos_tests/test_geos.py,59,garbage into 3D coordinate if there is none.,
django/tests/gis_tests/geos_tests/test_geos.py,64,Same for EWKB.,
django/tests/gis_tests/geos_tests/test_geos.py,68,Redundant sanity check.,
django/tests/gis_tests/geos_tests/test_geos.py,81,string-based,
django/tests/gis_tests/geos_tests/test_geos.py,86,Bad WKB,
django/tests/gis_tests/geos_tests/test_geos.py,93,Some other object,
django/tests/gis_tests/geos_tests/test_geos.py,96,None,
django/tests/gis_tests/geos_tests/test_geos.py,111,we need to do this so decimal places get normalized,
django/tests/gis_tests/geos_tests/test_geos.py,120,we need to do this so decimal places get normalized,
django/tests/gis_tests/geos_tests/test_geos.py,133,Checking export,
django/tests/gis_tests/geos_tests/test_geos.py,140,Loading jsons to prevent decimal differences,
django/tests/gis_tests/geos_tests/test_geos.py,167,Other tests use `fromfile()` on string filenames so those,
django/tests/gis_tests/geos_tests/test_geos.py,168,aren't tested here.,
django/tests/gis_tests/geos_tests/test_geos.py,183,Error shouldn't be raise on equivalence testing with,
django/tests/gis_tests/geos_tests/test_geos.py,184,an invalid type.,
django/tests/gis_tests/geos_tests/test_geos.py,211,GEOS,
django/tests/gis_tests/geos_tests/test_geos.py,214,EWKT,
django/tests/gis_tests/geos_tests/test_geos.py,218,Equivalence with matching SRIDs,
django/tests/gis_tests/geos_tests/test_geos.py,221,WKT contains no SRID so will not equal,
django/tests/gis_tests/geos_tests/test_geos.py,223,SRID of 0,
django/tests/gis_tests/geos_tests/test_geos.py,231,Creating the point from the WKT,
django/tests/gis_tests/geos_tests/test_geos.py,239,Use assertIs() to test __eq__.,
django/tests/gis_tests/geos_tests/test_geos.py,241,"Making sure that the point's X, Y components are what we expect",
django/tests/gis_tests/geos_tests/test_geos.py,245,"Testing the third dimension, and getting the tuple arguments",
django/tests/gis_tests/geos_tests/test_geos.py,260,Centroid operation on point should be point itself,
django/tests/gis_tests/geos_tests/test_geos.py,263,Now testing the different constructors,
django/tests/gis_tests/geos_tests/test_geos.py,264,"e.g., Point((1, 2))",
django/tests/gis_tests/geos_tests/test_geos.py,265,"e.g., Point(1, 2)",
django/tests/gis_tests/geos_tests/test_geos.py,269,Now testing setting the x and y,
django/tests/gis_tests/geos_tests/test_geos.py,275,Setting via the tuple/coords property,
django/tests/gis_tests/geos_tests/test_geos.py,281,setting the previous geometry,
django/tests/gis_tests/geos_tests/test_geos.py,326,Use assertIs() to test __eq__.,
django/tests/gis_tests/geos_tests/test_geos.py,331,"Creating a LineString from a tuple, list, and numpy array",
django/tests/gis_tests/geos_tests/test_geos.py,332,tuple,
django/tests/gis_tests/geos_tests/test_geos.py,333,as individual arguments,
django/tests/gis_tests/geos_tests/test_geos.py,334,as list,
django/tests/gis_tests/geos_tests/test_geos.py,335,Point individual arguments,
django/tests/gis_tests/geos_tests/test_geos.py,338,as numpy array,
django/tests/gis_tests/geos_tests/test_geos.py,354,Test __iter__().,
django/tests/gis_tests/geos_tests/test_geos.py,402,Use assertIs() to test __eq__.,
django/tests/gis_tests/geos_tests/test_geos.py,426,"Creating a LinearRing from a tuple, list, and numpy array",
django/tests/gis_tests/geos_tests/test_geos.py,455,Testing numerical precision,
django/tests/gis_tests/geos_tests/test_geos.py,467,"Creating the Polygon, testing its properties.",
django/tests/gis_tests/geos_tests/test_geos.py,475,Testing __len__,
django/tests/gis_tests/geos_tests/test_geos.py,478,Area & Centroid,
django/tests/gis_tests/geos_tests/test_geos.py,483,Testing the geometry equivalence,
django/tests/gis_tests/geos_tests/test_geos.py,485,Should not be equal to previous geometry,
django/tests/gis_tests/geos_tests/test_geos.py,486,Use assertIs() to test __eq__.,
django/tests/gis_tests/geos_tests/test_geos.py,487,Use assertIs() to test __ne__.,
django/tests/gis_tests/geos_tests/test_geos.py,489,Testing the exterior ring,
django/tests/gis_tests/geos_tests/test_geos.py,495,Testing __getitem__,
django/tests/gis_tests/geos_tests/test_geos.py,497,Testing __getitem__ and __setitem__ on invalid indices,
django/tests/gis_tests/geos_tests/test_geos.py,505,Testing __iter__,
django/tests/gis_tests/geos_tests/test_geos.py,510,Testing polygon construction.,
django/tests/gis_tests/geos_tests/test_geos.py,516,"Polygon(shell, (hole1, ... holeN))",
django/tests/gis_tests/geos_tests/test_geos.py,520,"Polygon(shell_tuple, hole_tuple1, ... , hole_tupleN)",
django/tests/gis_tests/geos_tests/test_geos.py,524,Constructing with tuples of LinearRings.,
django/tests/gis_tests/geos_tests/test_geos.py,529,Accessing Polygon attributes in templates should work.,
django/tests/gis_tests/geos_tests/test_geos.py,571,#### Memory issues with rings and poly,
django/tests/gis_tests/geos_tests/test_geos.py,573,These tests are needed to ensure sanity with writable geometries.,
django/tests/gis_tests/geos_tests/test_geos.py,575,"Getting a polygon with interior rings, and pulling out the interior rings",
django/tests/gis_tests/geos_tests/test_geos.py,580,These deletes should be 'harmless' since they are done on child geometries,
django/tests/gis_tests/geos_tests/test_geos.py,586,Deleting the polygon,
django/tests/gis_tests/geos_tests/test_geos.py,589,Access to these rings is OK since they are clones.,
django/tests/gis_tests/geos_tests/test_geos.py,597,Constructing the polygon and getting the coordinate sequence,
django/tests/gis_tests/geos_tests/test_geos.py,601,done in the Polygon test too.,
django/tests/gis_tests/geos_tests/test_geos.py,602,Making sure __len__ works,
django/tests/gis_tests/geos_tests/test_geos.py,604,Checks __getitem__ and __setitem__,
django/tests/gis_tests/geos_tests/test_geos.py,606,Expected value,
django/tests/gis_tests/geos_tests/test_geos.py,607,Value from coordseq,
django/tests/gis_tests/geos_tests/test_geos.py,610,Constructing the test value to set the coordinate sequence with,
django/tests/gis_tests/geos_tests/test_geos.py,617,Making sure every set point matches what we expect,
django/tests/gis_tests/geos_tests/test_geos.py,642,__and__ is intersection operator,
django/tests/gis_tests/geos_tests/test_geos.py,643,testing __iand__,
django/tests/gis_tests/geos_tests/test_geos.py,654,__or__ is union operator,
django/tests/gis_tests/geos_tests/test_geos.py,655,testing __ior__,
django/tests/gis_tests/geos_tests/test_geos.py,675,__sub__ is difference operator,
django/tests/gis_tests/geos_tests/test_geos.py,676,testing __isub__,
django/tests/gis_tests/geos_tests/test_geos.py,687,__xor__ is symmetric difference operator,
django/tests/gis_tests/geos_tests/test_geos.py,688,testing __ixor__,
django/tests/gis_tests/geos_tests/test_geos.py,695,Can't use a floating-point for the number of quadsegs.,
django/tests/gis_tests/geos_tests/test_geos.py,705,Can't use a floating-point for the number of quadsegs.,
django/tests/gis_tests/geos_tests/test_geos.py,709,Can't use a floating-point for the end cap style.,
django/tests/gis_tests/geos_tests/test_geos.py,712,Can't use a end cap style that is not in the enum.,
django/tests/gis_tests/geos_tests/test_geos.py,716,Can't use a floating-point for the join style.,
django/tests/gis_tests/geos_tests/test_geos.py,719,Can't use a join style that is not in the enum.,
django/tests/gis_tests/geos_tests/test_geos.py,732,The buffer we expect,
django/tests/gis_tests/geos_tests/test_geos.py,735,Constructing our buffer,
django/tests/gis_tests/geos_tests/test_geos.py,745,Now assuring that each point in the buffer is almost equal,
django/tests/gis_tests/geos_tests/test_geos.py,751,"Asserting the X, Y of each point are almost equal (due to floating point imprecision)",
django/tests/gis_tests/geos_tests/test_geos.py,768,Testing SRID keyword on Point,
django/tests/gis_tests/geos_tests/test_geos.py,776,"Testing SRID keyword on fromstr(), and on Polygon rings.",
django/tests/gis_tests/geos_tests/test_geos.py,784,Testing SRID keyword on GeometryCollection,
django/tests/gis_tests/geos_tests/test_geos.py,790,GEOS may get the SRID from HEXEWKB,
django/tests/gis_tests/geos_tests/test_geos.py,791,'POINT(5 23)' at SRID=4326 in hex form -- obtained from PostGIS,
django/tests/gis_tests/geos_tests/test_geos.py,792,"using `SELECT GeomFromText('POINT (5 23)', 4326);`.",
django/tests/gis_tests/geos_tests/test_geos.py,799,-1 is intended.,
django/tests/gis_tests/geos_tests/test_geos.py,802,Testing that geometry SRID could be set to its own value,
django/tests/gis_tests/geos_tests/test_geos.py,806,Input geometries that have an SRID.,
django/tests/gis_tests/geos_tests/test_geos.py,822,Test conversion from custom to a known srid,
django/tests/gis_tests/geos_tests/test_geos.py,836,### Testing the mutability of Polygons,
django/tests/gis_tests/geos_tests/test_geos.py,840,Should only be able to use __setitem__ with LinearRing geometries.,
django/tests/gis_tests/geos_tests/test_geos.py,844,Constructing the new shell by adding 500 to every point in the old shell.,
django/tests/gis_tests/geos_tests/test_geos.py,851,Assigning polygon's exterior ring w/the new shell,
django/tests/gis_tests/geos_tests/test_geos.py,853,new shell is still accessible,
django/tests/gis_tests/geos_tests/test_geos.py,857,### Testing the mutability of Geometry Collections,
django/tests/gis_tests/geos_tests/test_geos.py,861,Creating a random point.,
django/tests/gis_tests/geos_tests/test_geos.py,864,Testing the assignment,
django/tests/gis_tests/geos_tests/test_geos.py,866,what was used for the assignment is still accessible,
django/tests/gis_tests/geos_tests/test_geos.py,871,MultiPolygons involve much more memory management because each,
django/tests/gis_tests/geos_tests/test_geos.py,872,Polygon w/in the collection has its own rings.,
django/tests/gis_tests/geos_tests/test_geos.py,878,Offsetting the each ring in the polygon by 500.,
django/tests/gis_tests/geos_tests/test_geos.py,886,Testing the assignment,
django/tests/gis_tests/geos_tests/test_geos.py,888,Still accessible,
django/tests/gis_tests/geos_tests/test_geos.py,892,"Extreme (!!) __setitem__ -- no longer works, have to detect",
django/tests/gis_tests/geos_tests/test_geos.py,893,in the first object that __setitem__ is called in the subsequent,
django/tests/gis_tests/geos_tests/test_geos.py,894,"objects -- maybe mpoly[0, 0, 0] = (3.14, 2.71)?",
django/tests/gis_tests/geos_tests/test_geos.py,895,"mpoly[0][0][0] = (3.14, 2.71)",
django/tests/gis_tests/geos_tests/test_geos.py,896,"self.assertEqual((3.14, 2.71), mpoly[0][0][0])",
django/tests/gis_tests/geos_tests/test_geos.py,897,Doing it more slowly..,
django/tests/gis_tests/geos_tests/test_geos.py,898,"self.assertEqual((3.14, 2.71), mpoly[0].shell[0])",
django/tests/gis_tests/geos_tests/test_geos.py,899,del mpoly,
django/tests/gis_tests/geos_tests/test_geos.py,963,Testing a 3D Point,
django/tests/gis_tests/geos_tests/test_geos.py,971,Testing a 3D LineString,
django/tests/gis_tests/geos_tests/test_geos.py,981,Distance to self should be 0.,
django/tests/gis_tests/geos_tests/test_geos.py,985,Distance should be 1,
django/tests/gis_tests/geos_tests/test_geos.py,988,Distance should be ~ sqrt(2),
django/tests/gis_tests/geos_tests/test_geos.py,991,Distances are from the closest vertex in each geometry --,
django/tests/gis_tests/geos_tests/test_geos.py,992,"should be 3 (distance from (2, 2) to (5, 2)).",
django/tests/gis_tests/geos_tests/test_geos.py,999,Points have 0 length.,
django/tests/gis_tests/geos_tests/test_geos.py,1003,Should be ~ sqrt(2),
django/tests/gis_tests/geos_tests/test_geos.py,1007,Should be circumference of Polygon,
django/tests/gis_tests/geos_tests/test_geos.py,1011,Should be sum of each element's length in collection.,
django/tests/gis_tests/geos_tests/test_geos.py,1040,Testing len() and num_geom.,
django/tests/gis_tests/geos_tests/test_geos.py,1042,Has one empty linear ring,
django/tests/gis_tests/geos_tests/test_geos.py,1052,Testing __getitem__ (doesn't work on Point or Polygon),
django/tests/gis_tests/geos_tests/test_geos.py,1082,Creating a GeometryCollection WKT string composed of other,
django/tests/gis_tests/geos_tests/test_geos.py,1083,collections and polygons.,
django/tests/gis_tests/geos_tests/test_geos.py,1090,Should construct ok from WKT,
django/tests/gis_tests/geos_tests/test_geos.py,1093,Should also construct ok from individual geometry arguments.,
django/tests/gis_tests/geos_tests/test_geos.py,1096,"And, they should be equal.",
django/tests/gis_tests/geos_tests/test_geos.py,1129,"Using a srid, a SpatialReference object, and a CoordTransform object",
django/tests/gis_tests/geos_tests/test_geos.py,1130,for transformations.,
django/tests/gis_tests/geos_tests/test_geos.py,1137,Testing use of the `clone` keyword.,
django/tests/gis_tests/geos_tests/test_geos.py,1155,"transform() should no-op if source & dest SRIDs match,",
django/tests/gis_tests/geos_tests/test_geos.py,1156,regardless of whether GDAL is available.,
django/tests/gis_tests/geos_tests/test_geos.py,1190,"The xmin, ymin, xmax, ymax of the MultiPoint should be returned.",
django/tests/gis_tests/geos_tests/test_geos.py,1194,Extent of points is just the point itself repeated.,
django/tests/gis_tests/geos_tests/test_geos.py,1196,Testing on the 'real world' Polygon.,
django/tests/gis_tests/geos_tests/test_geos.py,1206,"Creating a list of test geometries for pickling,",
django/tests/gis_tests/geos_tests/test_geos.py,1207,and setting the SRID on some of them.,
django/tests/gis_tests/geos_tests/test_geos.py,1224,Creating a simple multipolygon and getting a prepared version.,
django/tests/gis_tests/geos_tests/test_geos.py,1228,A set of test points.,
django/tests/gis_tests/geos_tests/test_geos.py,1231,Results should be the same (but faster),
django/tests/gis_tests/geos_tests/test_geos.py,1245,Original geometry deletion should not crash the prepared one (#21662),
django/tests/gis_tests/geos_tests/test_geos.py,1374,ExtendedPolygon.__str__ should be called (instead of Polygon.__str__).,
django/tests/gis_tests/geos_tests/test_geos.py,1441,Step into CoordSeq iterator.,
django/tests/gis_tests/geos_tests/test_geos_mutation.py,1,"Copyright (c) 2008-2009 Aryeh Leib Taurog, all rights reserved.",
django/tests/gis_tests/geos_tests/test_geos_mutation.py,2,"Modified from original contribution by Aryeh Leib Taurog, which was",
django/tests/gis_tests/geos_tests/test_geos_mutation.py,3,released under the New BSD license.,
django/tests/gis_tests/geos_tests/test_geos_mutation.py,95,_set_single,
django/tests/gis_tests/geos_tests/test_geos_mutation.py,99,_set_list,
django/tests/gis_tests/geos_tests/test_geos_mutation.py,124,_set_single,
django/tests/gis_tests/geos_tests/test_geos_mutation.py,128,_set_list,
django/tests/gis_tests/geos_tests/test_geos_mutation.py,148,_set_list,
django/tests/gis_tests/geoapp/test_indexes.py,29,Spatial indexes in Meta.indexes are not supported by the Oracle,
django/tests/gis_tests/geoapp/test_indexes.py,30,backend (see #31252).,
django/tests/gis_tests/geoapp/test_regress.py,60,"contrived example, but need a geo lookup paired with an id__in lookup",
django/tests/gis_tests/geoapp/test_regress.py,65,.count() should not throw TypeError in __eq__,
django/tests/gis_tests/geoapp/test_regress.py,68,TODO: fix on Oracle -- get the following error because the SQL is ordered,
django/tests/gis_tests/geoapp/test_regress.py,69,"by a geometry object, which Oracle apparently doesn't like:",
django/tests/gis_tests/geoapp/test_regress.py,70,ORA-22901: cannot compare nested table or VARRAY or LOB attributes of an object type,
django/tests/gis_tests/geoapp/test_regress.py,84,verify types -- shouldn't be 0/1,
django/tests/gis_tests/geoapp/test_regress.py,87,verify values,
django/tests/gis_tests/geoapp/test_serializers.py,53,geometry_field is considered even if not in fields (#26138).,
django/tests/gis_tests/geoapp/feeds.py,22,This should attach a <georss:box> element for the extent of,
django/tests/gis_tests/geoapp/feeds.py,23,of the cities in the database.  This tuple came from,
django/tests/gis_tests/geoapp/feeds.py,24,calling `City.objects.aggregate(Extent())` -- we can't do that call,
django/tests/gis_tests/geoapp/feeds.py,25,here because `Extent` is not implemented for MySQL/Oracle.,
django/tests/gis_tests/geoapp/feeds.py,29,Returning a simple tuple for the geometry.,
django/tests/gis_tests/geoapp/feeds.py,41,This time we'll use a 2-tuple of coordinates for the box.,
django/tests/gis_tests/geoapp/feeds.py,49,"The following feeds are invalid, and will raise exceptions.",
django/tests/gis_tests/geoapp/feeds.py,62,The feed dictionary to use for URLs.,
django/tests/gis_tests/geoapp/test_functions.py,47,MySQL and Oracle ignore the crs option.,
django/tests/gis_tests/geoapp/test_functions.py,51,Oracle ignores also the bbox and precision options.,
django/tests/gis_tests/geoapp/test_functions.py,57,Precision argument should only be an integer,
django/tests/gis_tests/geoapp/test_functions.py,61,Reference queries and values.,
django/tests/gis_tests/geoapp/test_functions.py,62,"SELECT ST_AsGeoJson(""geoapp_city"".""point"", 8, 0)",
django/tests/gis_tests/geoapp/test_functions.py,63,"FROM ""geoapp_city"" WHERE ""geoapp_city"".""name"" = 'Pueblo';",
django/tests/gis_tests/geoapp/test_functions.py,69,"SELECT ST_AsGeoJson(""geoapp_city"".""point"", 8, 2) FROM ""geoapp_city""",
django/tests/gis_tests/geoapp/test_functions.py,70,"WHERE ""geoapp_city"".""name"" = 'Houston';",
django/tests/gis_tests/geoapp/test_functions.py,71,This time we want to include the CRS by using the `crs` keyword.,
django/tests/gis_tests/geoapp/test_functions.py,77,"SELECT ST_AsGeoJson(""geoapp_city"".""point"", 8, 1) FROM ""geoapp_city""",
django/tests/gis_tests/geoapp/test_functions.py,78,"WHERE ""geoapp_city"".""name"" = 'Houston';",
django/tests/gis_tests/geoapp/test_functions.py,79,This time we include the bounding box by using the `bbox` keyword.,
django/tests/gis_tests/geoapp/test_functions.py,87,"SELECT ST_AsGeoJson(""geoapp_city"".""point"", 5, 3) FROM ""geoapp_city""",
django/tests/gis_tests/geoapp/test_functions.py,88,"WHERE ""geoapp_city"".""name"" = 'Chicago';",
django/tests/gis_tests/geoapp/test_functions.py,89,"Finally, we set every available keyword.",
django/tests/gis_tests/geoapp/test_functions.py,90,MariaDB doesn't limit the number of decimals in bbox.,
django/tests/gis_tests/geoapp/test_functions.py,102,Should throw a TypeError when trying to obtain GML from a,
django/tests/gis_tests/geoapp/test_functions.py,103,non-geometry field.,
django/tests/gis_tests/geoapp/test_functions.py,110,No precision parameter for Oracle :-/,
django/tests/gis_tests/geoapp/test_functions.py,129,Should throw a TypeError when trying to obtain KML from a,
django/tests/gis_tests/geoapp/test_functions.py,130,non-geometry field.,
django/tests/gis_tests/geoapp/test_functions.py,134,Ensuring the KML is as expected.,
django/tests/gis_tests/geoapp/test_functions.py,142,"SELECT AsSVG(geoapp_city.point, 0, 8) FROM geoapp_city WHERE name = 'Pueblo';",
django/tests/gis_tests/geoapp/test_functions.py,144,"Even though relative, only one point so it's practically the same except for",
django/tests/gis_tests/geoapp/test_functions.py,145,"the 'c' letter prefix on the x,y values.",
django/tests/gis_tests/geoapp/test_functions.py,155,WKB is either XDR or NDR encoded.,
django/tests/gis_tests/geoapp/test_functions.py,175,Returns the azimuth in radians.,
django/tests/gis_tests/geoapp/test_functions.py,178,Returns None if the two points are coincident.,
django/tests/gis_tests/geoapp/test_functions.py,185,num_seg is the number of segments per quarter circle.,
django/tests/gis_tests/geoapp/test_functions.py,193,By default num_seg=48.,
django/tests/gis_tests/geoapp/test_functions.py,222,Oracle does something screwy with the Texas geometry.,
django/tests/gis_tests/geoapp/test_functions.py,232,Spherical Mercator,
django/tests/gis_tests/geoapp/test_functions.py,234,Oracle does something screwy with the Texas geometry.,
django/tests/gis_tests/geoapp/test_functions.py,262,Reference query:,
django/tests/gis_tests/geoapp/test_functions.py,263,SELECT ST_GeoHash(point) FROM geoapp_city WHERE name='Houston';,
django/tests/gis_tests/geoapp/test_functions.py,264,"SELECT ST_GeoHash(point, 5) FROM geoapp_city WHERE name='Houston';",
django/tests/gis_tests/geoapp/test_functions.py,295,"When the intersection is empty, some databases return None.",
django/tests/gis_tests/geoapp/test_functions.py,314,"Create projected country objects, for this test to work on all backends.",
django/tests/gis_tests/geoapp/test_functions.py,317,Test in projected coordinate system,
django/tests/gis_tests/geoapp/test_functions.py,319,"Some backends (e.g. Oracle) cannot group by multipolygon values, so",
django/tests/gis_tests/geoapp/test_functions.py,320,defer such fields in the aggregation query.,
django/tests/gis_tests/geoapp/test_functions.py,323,"If the result is a measure object, get value.",
django/tests/gis_tests/geoapp/test_functions.py,330,Create projected countries so the test works on all backends.,
django/tests/gis_tests/geoapp/test_functions.py,374,output_field is GeometryField instance because different geometry,
django/tests/gis_tests/geoapp/test_functions.py,375,types can be returned.,
django/tests/gis_tests/geoapp/test_functions.py,385,Exact value may depend on PostGIS version,
django/tests/gis_tests/geoapp/test_functions.py,389,Both 'countries' only have two geometries.,
django/tests/gis_tests/geoapp/test_functions.py,395,Oracle and PostGIS return 1 for the number of geometries on,
django/tests/gis_tests/geoapp/test_functions.py,396,"non-collections, whereas MySQL returns None.",
django/tests/gis_tests/geoapp/test_functions.py,437,The low precision tolerance is for SpatiaLite,
django/tests/gis_tests/geoapp/test_functions.py,445,Test float/Decimal values,
django/tests/gis_tests/geoapp/test_functions.py,451,Let's try and break snap_to_grid() with bad combinations of arguments.,
django/tests/gis_tests/geoapp/test_functions.py,459,"Boundary for San Marino, courtesy of Bjorn Sandvik of thematicmapping.org",
django/tests/gis_tests/geoapp/test_functions.py,460,from the world borders dataset he provides.,
django/tests/gis_tests/geoapp/test_functions.py,471,"Because floating-point arithmetic isn't exact, we set a tolerance",
django/tests/gis_tests/geoapp/test_functions.py,472,to pass into GEOS `equals_exact`.,
django/tests/gis_tests/geoapp/test_functions.py,475,"SELECT AsText(ST_SnapToGrid(""geoapp_country"".""mpoly"", 0.1)) FROM ""geoapp_country""",
django/tests/gis_tests/geoapp/test_functions.py,476,"WHERE ""geoapp_country"".""name"" = 'San Marino';",
django/tests/gis_tests/geoapp/test_functions.py,487,"SELECT AsText(ST_SnapToGrid(""geoapp_country"".""mpoly"", 0.05, 0.23)) FROM ""geoapp_country""",
django/tests/gis_tests/geoapp/test_functions.py,488,"WHERE ""geoapp_country"".""name"" = 'San Marino';",
django/tests/gis_tests/geoapp/test_functions.py,499,"SELECT AsText(ST_SnapToGrid(""geoapp_country"".""mpoly"", 0.5, 0.17, 0.05, 0.23)) FROM ""geoapp_country""",
django/tests/gis_tests/geoapp/test_functions.py,500,"WHERE ""geoapp_country"".""name"" = 'San Marino';",
django/tests/gis_tests/geoapp/test_functions.py,517,Oracle does something screwy with the Texas geometry.,
django/tests/gis_tests/geoapp/test_functions.py,525,Pre-transformed points for Houston and Pueblo.,
django/tests/gis_tests/geoapp/test_functions.py,527,Precision is low due to version variations in PROJ and GDAL.,
django/tests/gis_tests/geoapp/test_functions.py,529,Asserting the result of the transform operation with the values in,
django/tests/gis_tests/geoapp/test_functions.py,530,the pre-transformed points.,
django/tests/gis_tests/geoapp/test_functions.py,544,The low precision is for SpatiaLite,
django/tests/gis_tests/geoapp/test_functions.py,548,Some combined function tests,
django/tests/gis_tests/geoapp/test_functions.py,562,"Should be able to execute the queries; however, they won't be the same",
django/tests/gis_tests/geoapp/test_functions.py,563,as GEOS (because Oracle doesn't use GEOS internally like PostGIS or,
django/tests/gis_tests/geoapp/test_functions.py,564,SpatiaLite).,
django/tests/gis_tests/geoapp/tests.py,31,Ensuring that data was loaded from initial data fixtures.,
django/tests/gis_tests/geoapp/tests.py,38,Testing on a Point,
django/tests/gis_tests/geoapp/tests.py,43,Making sure TypeError is thrown when trying to set with an,
django/tests/gis_tests/geoapp/tests.py,44,incompatible type.,
django/tests/gis_tests/geoapp/tests.py,49,"Now setting with a compatible GEOS Geometry, saving, and ensuring",
django/tests/gis_tests/geoapp/tests.py,50,"the save took, notice no SRID is explicitly set.",
django/tests/gis_tests/geoapp/tests.py,54,Ensuring that the SRID is automatically set to that of the,
django/tests/gis_tests/geoapp/tests.py,55,"field after assignment, but before saving.",
django/tests/gis_tests/geoapp/tests.py,59,Ensuring the point was saved correctly after saving,
django/tests/gis_tests/geoapp/tests.py,62,Setting the X and Y of the Point,
django/tests/gis_tests/geoapp/tests.py,65,Checking assignments pre & post-save.,
django/tests/gis_tests/geoapp/tests.py,71,Testing on a Polygon,
django/tests/gis_tests/geoapp/tests.py,75,Creating a State object using a built Polygon,
django/tests/gis_tests/geoapp/tests.py,78,SRID auto-set from None,
django/tests/gis_tests/geoapp/tests.py,84,Testing the `ogr` and `srs` lazy-geometry properties.,
django/tests/gis_tests/geoapp/tests.py,90,Changing the interior ring on the poly attribute.,
django/tests/gis_tests/geoapp/tests.py,102,San Antonio in 'WGS84' (SRID 4326),
django/tests/gis_tests/geoapp/tests.py,104,Our reference point in WGS84,
django/tests/gis_tests/geoapp/tests.py,105,San Antonio in 'WGS 84 / Pseudo-Mercator' (SRID 3857),
django/tests/gis_tests/geoapp/tests.py,107,Constructing & querying with a point from a different SRID. Oracle,
django/tests/gis_tests/geoapp/tests.py,108,`SDO_OVERLAPBDYINTERSECT` operates differently from,
django/tests/gis_tests/geoapp/tests.py,109,"`ST_Intersects`, so contains is used instead.",
django/tests/gis_tests/geoapp/tests.py,116,Creating San Antonio.  Remember the Alamo.,
django/tests/gis_tests/geoapp/tests.py,119,Now verifying that San Antonio was transformed correctly,
django/tests/gis_tests/geoapp/tests.py,124,"If the GeometryField SRID is -1, then we shouldn't perform any",
django/tests/gis_tests/geoapp/tests.py,125,transformation if the SRID of the input geometry is different.,
django/tests/gis_tests/geoapp/tests.py,157,TODO: fix on Oracle: ORA-22901: cannot compare nested table or VARRAY or,
django/tests/gis_tests/geoapp/tests.py,158,LOB attributes of an object type.,
django/tests/gis_tests/geoapp/tests.py,163,Creating a Pennsylvanian city.,
django/tests/gis_tests/geoapp/tests.py,166,All transformation SQL will need to be performed on the,
django/tests/gis_tests/geoapp/tests.py,167,_parent_ table.,
django/tests/gis_tests/geoapp/tests.py,182,Ensure point isn't deferred.,
django/tests/gis_tests/geoapp/tests.py,196,Reload now dumped data,
django/tests/gis_tests/geoapp/tests.py,220,"LinearRing isn't representable in WKB, so GEOSGeomtry.wkb",
django/tests/gis_tests/geoapp/tests.py,221,uses LineString instead.,
django/tests/gis_tests/geoapp/tests.py,243,"Getting Texas, yes we were a country -- once ;)",
django/tests/gis_tests/geoapp/tests.py,246,"Seeing what cities are in Texas, should get Houston and Dallas,",
django/tests/gis_tests/geoapp/tests.py,247,and Oklahoma City because 'contained' only checks on the,
django/tests/gis_tests/geoapp/tests.py,248,_bounding box_ of the Geometries.,
django/tests/gis_tests/geoapp/tests.py,256,Pulling out some cities.,
django/tests/gis_tests/geoapp/tests.py,263,Now testing contains on the countries using the points for,
django/tests/gis_tests/geoapp/tests.py,264,Houston and Wellington.,
django/tests/gis_tests/geoapp/tests.py,265,Query w/GEOSGeometry,
django/tests/gis_tests/geoapp/tests.py,266,Query w/EWKBHEX,
django/tests/gis_tests/geoapp/tests.py,270,Testing `contains` on the states using the point for Lawrence.,
django/tests/gis_tests/geoapp/tests.py,274,Pueblo and Oklahoma City (even though OK City is within the bounding box of Texas),
django/tests/gis_tests/geoapp/tests.py,275,are not contained in Texas or New Zealand.,
django/tests/gis_tests/geoapp/tests.py,276,Query w/GEOSGeometry object,
django/tests/gis_tests/geoapp/tests.py,277,Query w/WKT,
django/tests/gis_tests/geoapp/tests.py,279,OK City is contained w/in bounding box of Texas.,
django/tests/gis_tests/geoapp/tests.py,306,Kansas has adjacent vertices with distance 6.99244813842e-12,
django/tests/gis_tests/geoapp/tests.py,307,which is smaller than the default Oracle tolerance.,
django/tests/gis_tests/geoapp/tests.py,308,It's invalid on MySQL < 8 also.,
django/tests/gis_tests/geoapp/tests.py,317,Left: A << B => true if xmax(A) < xmin(B),
django/tests/gis_tests/geoapp/tests.py,318,Right: A >> B => true if xmin(A) > xmax(B),
django/tests/gis_tests/geoapp/tests.py,319,See: BOX2D_left() and BOX2D_right() in lwgeom_box2dfloat4.c in PostGIS source.,
django/tests/gis_tests/geoapp/tests.py,321,Getting the borders for Colorado & Kansas,
django/tests/gis_tests/geoapp/tests.py,325,"Note: Wellington has an 'X' value of 174, so it will not be considered",
django/tests/gis_tests/geoapp/tests.py,326,to the left of CO.,
django/tests/gis_tests/geoapp/tests.py,328,These cities should be strictly to the right of the CO border.,
django/tests/gis_tests/geoapp/tests.py,336,These cities should be strictly to the right of the KS border.,
django/tests/gis_tests/geoapp/tests.py,343,"Note: Wellington has an 'X' value of 174, so it will not be considered",
django/tests/gis_tests/geoapp/tests.py,344,to the left of CO.,
django/tests/gis_tests/geoapp/tests.py,380,Creating a state with a NULL boundary.,
django/tests/gis_tests/geoapp/tests.py,383,Querying for both NULL and Non-NULL values.,
django/tests/gis_tests/geoapp/tests.py,387,Puerto Rico should be NULL (it's a commonwealth unincorporated territory),
django/tests/gis_tests/geoapp/tests.py,390,GeometryField=None is an alias for __isnull=True.,
django/tests/gis_tests/geoapp/tests.py,394,The valid states should be Colorado & Kansas,
django/tests/gis_tests/geoapp/tests.py,400,Saving another commonwealth w/a NULL geometry.,
django/tests/gis_tests/geoapp/tests.py,404,Assigning a geometry and saving -- then UPDATE back to NULL.,
django/tests/gis_tests/geoapp/tests.py,434,Valid WKT strings don't emit error logs.,
django/tests/gis_tests/geoapp/tests.py,442,"To make things more interesting, we will have our Texas reference point in",
django/tests/gis_tests/geoapp/tests.py,443,different SRIDs.,
django/tests/gis_tests/geoapp/tests.py,447,Not passing in a geometry as first param raises a TypeError when,
django/tests/gis_tests/geoapp/tests.py,448,initializing the QuerySet.,
django/tests/gis_tests/geoapp/tests.py,452,Making sure the right exception is raised for the given,
django/tests/gis_tests/geoapp/tests.py,453,bad arguments.,
django/tests/gis_tests/geoapp/tests.py,459,Relate works differently for the different backends.,
django/tests/gis_tests/geoapp/tests.py,467,TODO: This is not quite the same as the PostGIS mask above,
django/tests/gis_tests/geoapp/tests.py,470,Testing contains relation mask.,
django/tests/gis_tests/geoapp/tests.py,478,Testing within relation mask.,
django/tests/gis_tests/geoapp/tests.py,482,Testing intersection relation mask.,
django/tests/gis_tests/geoapp/tests.py,492,With a complex geometry expression,
django/tests/gis_tests/geoapp/tests.py,497,These lookups are tested elsewhere.,
django/tests/gis_tests/geoapp/tests.py,521,"TODO: GeoQuerySet is removed, organize these test better.",
django/tests/gis_tests/geoapp/tests.py,529,Reference query:,
django/tests/gis_tests/geoapp/tests.py,530,`SELECT ST_extent(point) FROM geoapp_city WHERE (name='Houston' or name='Dallas');`,
django/tests/gis_tests/geoapp/tests.py,531,"=>  BOX(-96.8016128540039 29.7633724212646,-95.3631439208984 32.7820587158203)",
django/tests/gis_tests/geoapp/tests.py,558,MakeLine on an inappropriate field returns simply None,
django/tests/gis_tests/geoapp/tests.py,560,Reference query:,
django/tests/gis_tests/geoapp/tests.py,561,SELECT AsText(ST_MakeLine(geoapp_city.point)) FROM geoapp_city;,
django/tests/gis_tests/geoapp/tests.py,568,We check for equality with a tolerance of 10e-5 which is a lower bound,
django/tests/gis_tests/geoapp/tests.py,569,of the precisions of ref_line coordinates,
django/tests/gis_tests/geoapp/tests.py,582,"Houston, Dallas -- Ordering may differ depending on backend or GEOS version.",
django/tests/gis_tests/geoapp/tests.py,587,Using `field_name` keyword argument in one query and specifying an,
django/tests/gis_tests/geoapp/tests.py,588,order in the other (which should not be used because this is,
django/tests/gis_tests/geoapp/tests.py,589,an aggregate method on a spatial column),
django/tests/gis_tests/geoapp/tests.py,607,"Tolerance is greater than distance between Forney and Dallas, that's",
django/tests/gis_tests/geoapp/tests.py,608,why Dallas is ignored.,
django/tests/gis_tests/geoapp/test_sitemaps.py,31,Ensuring the right sitemaps namespace is present.,
django/tests/gis_tests/geoapp/test_sitemaps.py,36,Should only be 2 sitemaps.,
django/tests/gis_tests/geoapp/test_sitemaps.py,40,Getting the relative URL since we don't have a real site.,
django/tests/gis_tests/geoapp/test_sitemaps.py,46,Have to decompress KMZ before parsing.,
django/tests/gis_tests/geoapp/test_sitemaps.py,53,Ensuring the correct number of placemarks are in the KML doc.,
django/tests/gis_tests/geoapp/models.py,17,"SRID, by default, is 4326",
django/tests/gis_tests/geoapp/models.py,31,This is an inherited model from City,
django/tests/gis_tests/geoapp/models.py,41,Allowing NULL geometries here.,
django/tests/gis_tests/geoapp/models.py,75,Minus one SRID.,
django/tests/gis_tests/geoapp/test_feeds.py,27,Uses `GEOSGeometry` in `item_geometry`,
django/tests/gis_tests/geoapp/test_feeds.py,29,Uses a 2-tuple in `item_geometry`,
django/tests/gis_tests/geoapp/test_feeds.py,33,Making sure the box got added to the second GeoRSS feed.,
django/tests/gis_tests/geoapp/test_feeds.py,39,Incrementing through the feeds.,
django/tests/gis_tests/geoapp/test_feeds.py,41,Ensuring the georss namespace was added to the <rss> element.,
django/tests/gis_tests/geoapp/test_feeds.py,47,Ensuring the georss element was added to each item in the feed.,
django/tests/gis_tests/geoapp/test_feeds.py,57,Making sure the box got added to the second GeoRSS feed.,
django/tests/gis_tests/geoapp/test_feeds.py,61,Ensuring the georsss namespace was added to the <feed> element.,
django/tests/gis_tests/geoapp/test_feeds.py,66,Ensuring the georss element was added to each entry in the feed.,
django/tests/gis_tests/geoapp/test_feeds.py,74,Ensuring the geo namespace was added to the <feed> element.,
django/tests/gis_tests/geoapp/test_feeds.py,80,Ensuring the geo:lat and geo:lon element was added to each item in the feed.,
django/tests/gis_tests/geoapp/test_feeds.py,84,Boxes and Polygons aren't allowed in W3C Geo feeds.,
django/tests/gis_tests/geoapp/test_feeds.py,85,Box in <channel>,
django/tests/gis_tests/geoapp/test_feeds.py,87,Polygons in <entry>,
django/tests/gis_tests/geoapp/test_expressions.py,42,Updating a point to a point of the same SRID.,
django/tests/gis_tests/geoapp/test_expressions.py,46,Updating a point to a point with a different SRID.,
django/tests/model_forms/test_modelchoicefield.py,35,Invalid types that require TypeError to be caught.,
django/tests/model_forms/test_modelchoicefield.py,44,Add a Category object *after* the ModelChoiceField has already been,
django/tests/model_forms/test_modelchoicefield.py,45,instantiated. This proves clean() checks the database during clean(),
django/tests/model_forms/test_modelchoicefield.py,46,rather than caching it at  instantiation time.,
django/tests/model_forms/test_modelchoicefield.py,50,Delete a Category object *after* the ModelChoiceField has already been,
django/tests/model_forms/test_modelchoicefield.py,51,instantiated. This proves clean() checks the database during clean(),
django/tests/model_forms/test_modelchoicefield.py,52,rather than caching it at instantiation time.,
django/tests/model_forms/test_modelchoicefield.py,61,An instance of incorrect model.,
django/tests/model_forms/test_modelchoicefield.py,78,len() can be called on choices.,
django/tests/model_forms/test_modelchoicefield.py,81,queryset can be changed after the field is created.,
django/tests/model_forms/test_modelchoicefield.py,92,Choices can be iterated repeatedly.,
django/tests/model_forms/test_modelchoicefield.py,102,Overriding label_from_instance() to print custom labels.,
django/tests/model_forms/test_modelchoicefield.py,168,To allow the widget to change the queryset of field1.widget.choices,
django/tests/model_forms/test_modelchoicefield.py,169,"without affecting other forms, the following must hold (#11183):",
django/tests/model_forms/test_modelchoicefield.py,202,BoundField,
django/tests/model_forms/test_modelchoicefield.py,255,Disabled fields use the value from `instance` rather than `data`.,
django/tests/model_forms/test_modelchoicefield.py,286,Modify the HTML based on the object being rendered.,
django/tests/model_forms/test_modelchoicefield.py,325,Modify the HTML based on the object being rendered.,
django/tests/model_forms/tests.py,230,form is valid because required=False for field 'character',
django/tests/model_forms/tests.py,256,remove character,
django/tests/model_forms/tests.py,313,Save a second form to verify there isn't a unique constraint violation.,
django/tests/model_forms/tests.py,371,"Should have the same result as before,",
django/tests/model_forms/tests.py,372,but 'fields' attribute specified differently,
django/tests/model_forms/tests.py,383,"Should have the same result as before,",
django/tests/model_forms/tests.py,384,but 'fields' attribute specified differently,
django/tests/model_forms/tests.py,390,"url will still appear, since it is explicit above",
django/tests/model_forms/tests.py,419,note the missing comma,
django/tests/model_forms/tests.py,443,note the missing comma,
django/tests/model_forms/tests.py,446,This Price instance generated by this form is not valid because the quantity,
django/tests/model_forms/tests.py,447,"field is required, but the form is valid because the field is excluded from",
django/tests/model_forms/tests.py,448,the form. This is for backwards compatibility.,
django/tests/model_forms/tests.py,461,The form should not validate fields that it doesn't contain even if they are,
django/tests/model_forms/tests.py,462,"specified using 'fields', not 'exclude'.",
django/tests/model_forms/tests.py,470,The form should still have an instance of a model that is not complete and,
django/tests/model_forms/tests.py,471,not saved into a DB yet.,
django/tests/model_forms/tests.py,500,"MixModelForm is now an Article-related thing, because MixModelForm.Meta",
django/tests/model_forms/tests.py,501,overrides BaseCategoryForm.Meta.,
django/tests/model_forms/tests.py,515,First class with a Meta class wins...,
django/tests/model_forms/tests.py,527,no model,
django/tests/model_forms/tests.py,529,Can't create new form,
django/tests/model_forms/tests.py,534,Even if you provide a model instance,
django/tests/model_forms/tests.py,606,Empty data uses the model field default.,
django/tests/model_forms/tests.py,613,Blank data doesn't use the model field default.,
django/tests/model_forms/tests.py,636,Default should be populated on an empty value in cleaned_data.,
django/tests/model_forms/tests.py,651,Empty data doesn't use the model default because CheckboxInput,
django/tests/model_forms/tests.py,652,doesn't have a value in HTML form submission.,
django/tests/model_forms/tests.py,668,Empty data doesn't use the model default because an unchecked,
django/tests/model_forms/tests.py,669,CheckboxSelectMultiple doesn't have a value in HTML form submission.,
django/tests/model_forms/tests.py,684,Empty data doesn't use the model default because an unselected,
django/tests/model_forms/tests.py,685,SelectMultiple doesn't have a value in HTML form submission.,
django/tests/model_forms/tests.py,928,The unique_together is on suffix1/suffix2 but only suffix1 is part,
django/tests/model_forms/tests.py,929,"of the form. The fields must have defaults, otherwise they'll be",
django/tests/model_forms/tests.py,930,skipped by other logic.,
django/tests/model_forms/tests.py,937,"The form fails validation with ""Derived book with this Suffix1 and",
django/tests/model_forms/tests.py,938,"Suffix2 already exists."" if the unique_together validation isn't",
django/tests/model_forms/tests.py,939,skipped.,
django/tests/model_forms/tests.py,1092,'title' has unique_for_date='posted',
django/tests/model_forms/tests.py,1095,'slug' has unique_for_year='posted',
django/tests/model_forms/tests.py,1098,'subtitle' has unique_for_month='posted',
django/tests/model_forms/tests.py,1237,Initial values can be provided for model forms,
django/tests/model_forms/tests.py,1267,"When the ModelForm is passed an instance, that instance's current values are",
django/tests/model_forms/tests.py,1268,inserted as 'initial' data in each Field.,
django/tests/model_forms/tests.py,1330,Set up a callable initial value,
django/tests/model_forms/tests.py,1336,"Create a ModelForm, instantiate it, and check that the output is as expected",
django/tests/model_forms/tests.py,1367,Testing whether the same object is returned from the,
django/tests/model_forms/tests.py,1368,ORM... not the fastest way...,
django/tests/model_forms/tests.py,1375,"If you call save() with commit=False, then it will return an object that",
django/tests/model_forms/tests.py,1376,"hasn't yet been saved to the database. In this case, it's up to you to call",
django/tests/model_forms/tests.py,1377,save() on the resulting model instance.,
django/tests/model_forms/tests.py,1387,"If you call save() with invalid data, you'll get a ValueError.",
django/tests/model_forms/tests.py,1405,"ManyToManyFields are represented by a MultipleChoiceField, ForeignKeys and any",
django/tests/model_forms/tests.py,1406,fields with the 'choices' attribute are represented by a ChoiceField.,
django/tests/model_forms/tests.py,1431,Add some categories and test the many-to-many form output.,
django/tests/model_forms/tests.py,1462,You can restrict a form to a subset of the complete list of fields,
django/tests/model_forms/tests.py,1463,by providing a 'fields' argument. If you try to save a,
django/tests/model_forms/tests.py,1464,"model created with such a form, you need to ensure that the fields",
django/tests/model_forms/tests.py,1465,"that are _not_ on the form have default values, or are allowed to have",
django/tests/model_forms/tests.py,1466,"a value of None. If a field isn't specified on a form, the object created",
django/tests/model_forms/tests.py,1467,from the form can't provide a value for that field!,
django/tests/model_forms/tests.py,1515,"Create a new article, with categories, via the form.",
django/tests/model_forms/tests.py,1522,"Now, submit form data with no categories. This deletes the existing categories.",
django/tests/model_forms/tests.py,1530,"Create a new article, with no categories, via the form.",
django/tests/model_forms/tests.py,1538,"Create a new article, with categories, via the form, but use commit=False.",
django/tests/model_forms/tests.py,1539,The m2m data won't be saved until save_m2m() is invoked on the form.,
django/tests/model_forms/tests.py,1544,Manually save the instance,
django/tests/model_forms/tests.py,1549,The instance doesn't have m2m data yet,
django/tests/model_forms/tests.py,1553,Save the m2m data on the form,
django/tests/model_forms/tests.py,1558,"Here, we define a custom ModelForm. Because it happens to have the same fields as",
django/tests/model_forms/tests.py,1559,"the Category model, we can just call the form's save() to apply its changes to an",
django/tests/model_forms/tests.py,1560,existing Category instance.,
django/tests/model_forms/tests.py,1577,"Here, we demonstrate that choices for a ForeignKey ChoiceField are determined",
django/tests/model_forms/tests.py,1578,"at runtime, based on the data in the database when the form is displayed, not",
django/tests/model_forms/tests.py,1579,the data in the database when the form is instantiated.,
django/tests/model_forms/tests.py,1688,Invalid types that require TypeError to be caught (#22808).,
django/tests/model_forms/tests.py,1694,Add a Category object *after* the ModelMultipleChoiceField has already been,
django/tests/model_forms/tests.py,1695,instantiated. This proves clean() checks the database during clean() rather,
django/tests/model_forms/tests.py,1696,than caching it at time of instantiation.,
django/tests/model_forms/tests.py,1697,"Note, we are using an id of 1006 here since tests that run before",
django/tests/model_forms/tests.py,1698,this may create categories with primary keys up to 6. Use,
django/tests/model_forms/tests.py,1699,a number that will not conflict.,
django/tests/model_forms/tests.py,1703,Delete a Category object *after* the ModelMultipleChoiceField has already been,
django/tests/model_forms/tests.py,1704,instantiated. This proves clean() checks the database during clean() rather,
django/tests/model_forms/tests.py,1705,than caching it at time of instantiation.,
django/tests/model_forms/tests.py,1721,queryset can be changed after the field is created.,
django/tests/model_forms/tests.py,1804,BoundField,
django/tests/model_forms/tests.py,1868,BetterWriter model is a subclass of Writer with an additional `score` field,
django/tests/model_forms/tests.py,1887,WriterProfile has a OneToOneField to Writer,
django/tests/model_forms/tests.py,1941,author object returned from form still retains original publication object,
django/tests/model_forms/tests.py,1942,that's why we need to retrieve it from database again,
django/tests/model_forms/tests.py,2043,Test conditions when files is either not given or empty.,
django/tests/model_forms/tests.py,2049,Upload a file and ensure it all works as expected.,
django/tests/model_forms/tests.py,2060,"If the previous file has been deleted, the file name can be reused",
django/tests/model_forms/tests.py,2070,Check if the max_length attribute has been inherited from the model.,
django/tests/model_forms/tests.py,2077,Edit an instance that already has the file defined in the model. This will not,
django/tests/model_forms/tests.py,2078,"save the file again, but leave it exactly as it is.",
django/tests/model_forms/tests.py,2085,Delete the current file since this is not done by Django.,
django/tests/model_forms/tests.py,2088,Override the file by uploading a new one.,
django/tests/model_forms/tests.py,2098,Delete the current file since this is not done by Django.,
django/tests/model_forms/tests.py,2103,Test the non-required FileField,
django/tests/model_forms/tests.py,2119,Instance can be edited w/out re-uploading the file and existing file should be preserved.,
django/tests/model_forms/tests.py,2127,Delete the current file since this is not done by Django.,
django/tests/model_forms/tests.py,2140,It's enough that the form saves without error -- the custom save routine will,
django/tests/model_forms/tests.py,2141,generate an AssertionError if it is called more than once during save.,
django/tests/model_forms/tests.py,2155,Grab an image for testing.,
django/tests/model_forms/tests.py,2160,Fake a POST QueryDict and FILES MultiValueDict.,
django/tests/model_forms/tests.py,2168,Check the savecount stored on the object (see the model).,
django/tests/model_forms/tests.py,2171,"Delete the ""uploaded"" file to avoid clogging /tmp.",
django/tests/model_forms/tests.py,2187,"ImageField and FileField are nearly identical, but they differ slightly when",
django/tests/model_forms/tests.py,2188,it comes to validation. This specifically tests that #6302 is fixed for,
django/tests/model_forms/tests.py,2189,both file fields and image fields.,
django/tests/model_forms/tests.py,2207,"Delete the current file since this is not done by Django, but don't save",
django/tests/model_forms/tests.py,2208,because the dimension fields are not null=True.,
django/tests/model_forms/tests.py,2221,Edit an instance that already has the (required) image defined in the model. This will not,
django/tests/model_forms/tests.py,2222,"save the image again, but leave it exactly as it is.",
django/tests/model_forms/tests.py,2232,"Delete the current file since this is not done by Django, but don't save",
django/tests/model_forms/tests.py,2233,because the dimension fields are not null=True.,
django/tests/model_forms/tests.py,2235,Override the file by uploading a new one.,
django/tests/model_forms/tests.py,2248,"Delete the current file since this is not done by Django, but don't save",
django/tests/model_forms/tests.py,2249,because the dimension fields are not null=True.,
django/tests/model_forms/tests.py,2263,"Delete the current file since this is not done by Django, but don't save",
django/tests/model_forms/tests.py,2264,because the dimension fields are not null=True.,
django/tests/model_forms/tests.py,2268,Test the non-required ImageField,
django/tests/model_forms/tests.py,2269,"Note: In Oracle, we expect a null ImageField to return '' instead of",
django/tests/model_forms/tests.py,2270,None.,
django/tests/model_forms/tests.py,2294,Editing the instance without re-uploading the image should not affect,
django/tests/model_forms/tests.py,2295,the image or its width/height properties.,
django/tests/model_forms/tests.py,2304,Delete the current file since this is not done by Django.,
django/tests/model_forms/tests.py,2318,Test callable upload_to behavior that's dependent on the value of another field in the model,
django/tests/model_forms/tests.py,2328,Editing an instance that has an image without an extension shouldn't,
django/tests/model_forms/tests.py,2329,fail validation. First create:,
django/tests/model_forms/tests.py,2337,Then edit:,
django/tests/model_forms/tests.py,2384,"'created', non-editable, is excluded by default",
django/tests/model_forms/tests.py,2414,Similar to a regular Form class you can define custom media to be used on,
django/tests/model_forms/tests.py,2415,the ModelForm.,
django/tests/model_forms/tests.py,2424,Choices on CharField and IntegerField,
django/tests/model_forms/tests.py,2449,would be 4 if prefetch is ignored,
django/tests/model_forms/tests.py,2497,to_field_name should also work on ModelMultipleChoiceField,
django/tests/model_forms/tests.py,2627,form.instance.left will be None if the instance was not constructed,
django/tests/model_forms/tests.py,2628,by form.full_clean().,
django/tests/model_forms/tests.py,2798,Without a widget should not set the widget to textarea,
django/tests/model_forms/tests.py,2802,With a widget should not set the widget to textarea,
django/tests/model_forms/tests.py,2842,A bad callback provided by user still gives an error,
django/tests/model_forms/tests.py,2938,This line turns on the ValidationError; it avoids the model erroring,
django/tests/model_forms/tests.py,2939,when its own __init__() is called when creating form.instance.,
django/tests/model_forms/tests.py,2953,This line turns on the ValidationError; it avoids the model erroring,
django/tests/model_forms/tests.py,2954,when its own __init__() is called when creating form.instance.,
django/tests/model_forms/tests.py,2973,"If data were a QuerySet, it would be reevaluated here and give ""red""",
django/tests/model_forms/tests.py,2974,instead of the original value.,
django/tests/model_forms/models.py,151,NOQA: detect if Pillow is installed,
django/tests/model_forms/models.py,162,Deliberately put the image field *after* the width/height fields to,
django/tests/model_forms/models.py,163,trigger the bug in #10404 with width/height not getting assigned.,
django/tests/model_forms/models.py,329,don't allow this field to be used in form (real use-case might be,
django/tests/model_forms/models.py,330,"that you know the markup will always be X, but it is among an app",
django/tests/model_forms/models.py,331,that allows the user to say it could be something else),
django/tests/model_forms/models.py,332,regressed at r10062,
django/tests/model_forms/models.py,410,Model for #13776,
django/tests/model_forms/models.py,416,Model for #639,
django/tests/model_forms/models.py,421,Support code for the tests; this keeps track of how many times save(),
django/tests/model_forms/models.py,422,gets called on each instance.,
django/tests/model_forms/models.py,437,Models for #24706,
django/tests/model_forms/models.py,458,"A model with ForeignKey(blank=False, null=True)",
django/tests/many_to_one/tests.py,18,Create a few Reporters.,
django/tests/many_to_one/tests.py,23,Create an Article.,
django/tests/many_to_one/tests.py,28,Article objects have access to their related Reporter objects.,
django/tests/many_to_one/tests.py,34,You can also instantiate an Article by passing the Reporter's ID,
django/tests/many_to_one/tests.py,35,instead of a Reporter object.,
django/tests/many_to_one/tests.py,40,"Similarly, the reporter ID can be a string.",
django/tests/many_to_one/tests.py,46,Create an Article via the Reporter object.,
django/tests/many_to_one/tests.py,51,"Create a new article, and add it to the article set.",
django/tests/many_to_one/tests.py,64,Add the same article to a different article set - check that it moves.,
django/tests/many_to_one/tests.py,69,Adding an object of the wrong type raises TypeError.,
django/tests/many_to_one/tests.py,82,Assign the article to the reporter.,
django/tests/many_to_one/tests.py,94,Set the article back again.,
django/tests/many_to_one/tests.py,102,"Funny case - because the ForeignKey cannot be null,",
django/tests/many_to_one/tests.py,103,existing members of the set must remain.,
django/tests/many_to_one/tests.py,123,Assign the article to the reporter directly using the descriptor.,
django/tests/many_to_one/tests.py,135,Set the article back again using set() method.,
django/tests/many_to_one/tests.py,143,"Because the ForeignKey cannot be null, existing members of the set",
django/tests/many_to_one/tests.py,144,must remain.,
django/tests/many_to_one/tests.py,151,Reporter cannot be null - there should not be a clear or remove method,
django/tests/many_to_one/tests.py,167,Reassigning the same value doesn't clear cached instance.,
django/tests/many_to_one/tests.py,186,Reporter objects have access to their related Article objects.,
django/tests/many_to_one/tests.py,194,Get articles by id,
django/tests/many_to_one/tests.py,197,Query on an article property,
django/tests/many_to_one/tests.py,199,The API automatically follows relationships as far as you need.,
django/tests/many_to_one/tests.py,200,Use double underscores to separate relationships.,
django/tests/many_to_one/tests.py,201,This works as many levels deep as you want. There's no limit.,
django/tests/many_to_one/tests.py,202,"Find all Articles for any Reporter whose first name is ""John"".",
django/tests/many_to_one/tests.py,207,Implied __exact also works,
django/tests/many_to_one/tests.py,212,Query twice over the related field.,
django/tests/many_to_one/tests.py,217,The underlying query only makes one join when a related table is referenced twice.,
django/tests/many_to_one/tests.py,222,The automatically joined table has a predictable name.,
django/tests/many_to_one/tests.py,228,... and should work fine with the string that comes out of forms.Form.cleaned_data,
django/tests/many_to_one/tests.py,235,Find all Articles for a Reporter.,
django/tests/many_to_one/tests.py,236,"Use direct ID check, pk check, and object comparison",
django/tests/many_to_one/tests.py,275,You can also use a queryset instead of a literal list of instances.,
django/tests/many_to_one/tests.py,276,"The queryset must be reduced to a list of values using values(),",
django/tests/many_to_one/tests.py,277,then converted into a query,
django/tests/many_to_one/tests.py,299,Reporters can be queried,
django/tests/many_to_one/tests.py,303,Reporters can query in opposite direction of ForeignKey definition,
django/tests/many_to_one/tests.py,318,Counting in the opposite direction works in conjunction with distinct(),
django/tests/many_to_one/tests.py,322,Queries can go round in circles.,
django/tests/many_to_one/tests.py,338,Implied __exact also works.,
django/tests/many_to_one/tests.py,341,It's possible to use values() calls across many-to-one relations.,
django/tests/many_to_one/tests.py,342,"(Note, too, that we clear the ordering here so as not to drag the",
django/tests/many_to_one/tests.py,343,'headline' field into the columns being used to determine uniqueness),
django/tests/many_to_one/tests.py,351,Article.objects.select_related().dates() works properly when there,
django/tests/many_to_one/tests.py,352,are multiple Articles with the same date but different foreign-key,
django/tests/many_to_one/tests.py,353,objects (Reporters).,
django/tests/many_to_one/tests.py,380,"If you delete a reporter, his articles will be deleted.",
django/tests/many_to_one/tests.py,406,You can delete using a JOIN in the query.,
django/tests/many_to_one/tests.py,412,Create a new Article with get_or_create using an explicit value,
django/tests/many_to_one/tests.py,413,for a ForeignKey.,
django/tests/many_to_one/tests.py,422,You can specify filters containing the explicit FK value.,
django/tests/many_to_one/tests.py,428,Create an Article by Paul for the same date.,
django/tests/many_to_one/tests.py,436,Get should respect explicit foreign keys as well.,
django/tests/many_to_one/tests.py,446,Regression for #12876 -- Model methods that include queries that,
django/tests/many_to_one/tests.py,447,recursive don't cause recursion depth problems under deepcopy.,
django/tests/many_to_one/tests.py,455,Same twice,
django/tests/many_to_one/tests.py,458,Same as each other,
django/tests/many_to_one/tests.py,479,Tests of ForeignKey assignment and the related-object cache (see #6886).,
django/tests/many_to_one/tests.py,484,"Look up the object again so that we get a ""fresh"" object.",
django/tests/many_to_one/tests.py,488,Accessing the related object again returns the exactly same object.,
django/tests/many_to_one/tests.py,491,"But if we kill the cache, we get a new object.",
django/tests/many_to_one/tests.py,495,Assigning a new object results in that object getting cached immediately.,
django/tests/many_to_one/tests.py,500,Assigning None succeeds if field is null=True.,
django/tests/many_to_one/tests.py,504,bestchild should still be None after saving.,
django/tests/many_to_one/tests.py,508,bestchild should still be None after fetching the object again.,
django/tests/many_to_one/tests.py,512,Assigning None will not fail: Child.parent is null=False.,
django/tests/many_to_one/tests.py,515,You also can't assign an object of the wrong type here,
django/tests/many_to_one/tests.py,523,You can assign None to Child.parent during object creation.,
django/tests/many_to_one/tests.py,526,"But when trying to save a Child with parent=None, the database will",
django/tests/many_to_one/tests.py,527,raise IntegrityError.,
django/tests/many_to_one/tests.py,531,Creation using keyword argument should cache the related object.,
django/tests/many_to_one/tests.py,536,Creation using keyword argument and unsaved related instance (#8070).,
django/tests/many_to_one/tests.py,546,Creation using attname keyword argument and an id will cause the,
django/tests/many_to_one/tests.py,547,related object to be fetched.,
django/tests/many_to_one/tests.py,589,Test of multiple ForeignKeys to the same model (bug #7125).,
django/tests/many_to_one/tests.py,617,Regression for #12190 -- Should be able to instantiate a FK outside,
django/tests/many_to_one/tests.py,618,"of a model, and interrogate its related field.",
django/tests/many_to_one/tests.py,623,The <field>_set manager does not join on Null value fields (#17541),
django/tests/many_to_one/tests.py,627,The object isn't saved and thus the relation field is null - we won't even,
django/tests/many_to_one/tests.py,628,execute a query in this case.,
django/tests/many_to_one/tests.py,632,"Now the model is saved, so we will need to execute a query.",
django/tests/many_to_one/tests.py,643,Only one school is available via all() due to the custom default manager.,
django/tests/many_to_one/tests.py,648,Make sure the base manager is used so that a student can still access,
django/tests/many_to_one/tests.py,649,its related school even if the default manager doesn't normally,
django/tests/many_to_one/tests.py,650,allow it.,
django/tests/many_to_one/tests.py,664,The exception raised on attribute access when a related object,
django/tests/many_to_one/tests.py,665,doesn't exist should be an instance of a subclass of `AttributeError`,
django/tests/many_to_one/tests.py,666,refs #21563,
django/tests/many_to_one/tests.py,719,caches a.reporter,
django/tests/many_to_one/models.py,52,"If ticket #1578 ever slips back in, these models will not be able to be",
django/tests/many_to_one/models.py,53,created (the field names being lowercased versions of their opposite classes,
django/tests/many_to_one/models.py,54,is important here).,
django/tests/many_to_one/models.py,63,"Protect against repetition of #1839, #2415 and #2536.",
django/tests/many_to_one/models.py,87,"Multiple paths to the same model (#7110, #7125)",
django/tests/many_to_one/models.py,107,Test related objects visibility.,
django/tests/admin_docs/test_views.py,30,Should display the login screen,
django/tests/admin_docs/test_views.py,75,View docstring,
django/tests/admin_docs/test_views.py,125,will restore SITE_ID after the test,
django/tests/admin_docs/test_views.py,150,Overridden because non-trivial TEMPLATES settings aren't supported,
django/tests/admin_docs/test_views.py,151,but the page shouldn't crash (#24125).,
django/tests/admin_docs/test_views.py,156,Overridden because non-trivial TEMPLATES settings aren't supported,
django/tests/admin_docs/test_views.py,157,but the page shouldn't crash (#24125).,
django/tests/admin_docs/test_views.py,225,help text in fields,
django/tests/admin_docs/test_views.py,229,method docstrings,
django/tests/admin_docs/test_views.py,236,foreign keys,
django/tests/admin_docs/test_views.py,239,foreign keys with help text,
django/tests/admin_docs/test_views.py,242,many to many fields,
django/tests/admin_docs/test_views.py,252,"""raw"" and ""include"" directives are disabled",
django/tests/defer_regress/tests.py,18,Deferred fields should really be deferred and not accidentally use,
django/tests/defer_regress/tests.py,19,the field's default value just because they aren't passed to __init__,
django/tests/defer_regress/tests.py,23,"Accessing ""name"" doesn't trigger a new database query. Accessing",
django/tests/defer_regress/tests.py,24,"""value"" or ""text"" should.",
django/tests/defer_regress/tests.py,38,Regression test for #10695. Make sure different instances don't,
django/tests/defer_regress/tests.py,39,inadvertently share data in the deferred descriptor objects.,
django/tests/defer_regress/tests.py,50,Some further checks for select_related() and inherited model,
django/tests/defer_regress/tests.py,51,behavior (regression for #10710).,
django/tests/defer_regress/tests.py,66,Models instances with deferred fields should still return the same,
django/tests/defer_regress/tests.py,67,content types as their non-deferred versions (bug #10738).,
django/tests/defer_regress/tests.py,74,Regression for #10733 - only() can be used on a model with two,
django/tests/defer_regress/tests.py,75,foreign keys.,
django/tests/defer_regress/tests.py,86,Regression for #16409 - make sure defer() and only() work with annotate(),
django/tests/defer_regress/tests.py,96,Test for #12163 - Pickling error saving session with unsaved model,
django/tests/defer_regress/tests.py,97,instances.,
django/tests/defer_regress/tests.py,115,Regression for #16409 - make sure defer() and only() work with annotate(),
django/tests/defer_regress/tests.py,133,Regression for #15790 - only() broken for proxy models,
django/tests/defer_regress/tests.py,141,also test things with .defer(),
django/tests/defer_regress/tests.py,154,Refs #14694. Test reverse relations which are known unique (reverse,
django/tests/defer_regress/tests.py,155,side has o2ofield or unique FK) - the o2o case,
django/tests/defer_regress/tests.py,163,"Make sure that `only()` doesn't break when we pass in a unique relation,",
django/tests/defer_regress/tests.py,164,rather than a field on the relation.,
django/tests/defer_regress/tests.py,198,Regression for #22050,
django/tests/defer_regress/tests.py,201,Defer fields with only(),
django/tests/defer_regress/tests.py,209,Test for #17485.,
django/tests/test_client_regress/views.py,148,Special attribute that won't be present on a plain HttpRequest,
django/tests/test_client_regress/tests.py,131,Regression test for #10183,
django/tests/test_client_regress/tests.py,138,Regression test for #10183,
django/tests/test_client_regress/tests.py,203,The no template case doesn't mess with the template assertions,
django/tests/test_client_regress/tests.py,289,"This page will redirect with code 301, not 302",
django/tests/test_client_regress/tests.py,318,Should redirect to get_view,
django/tests/test_client_regress/tests.py,327,"The redirect target responds with a 301 code, not 200",
django/tests/test_client_regress/tests.py,337,"The redirect target responds with a 301 code, not 200",
django/tests/test_client_regress/tests.py,374,The chain of redirects stops once the cycle is detected.,
django/tests/test_client_regress/tests.py,388,"The chain of redirects will get back to the starting point, but stop there.",
django/tests/test_client_regress/tests.py,430,We can't use is_secure() or get_host(),
django/tests/test_client_regress/tests.py,431,"because response.request is a dictionary, not an HttpRequest",
django/tests/test_client_regress/tests.py,435,assertRedirects() can follow redirect to 'otherserver' too.,
django/tests/test_client_regress/tests.py,444,"This page will redirect with code 301, not 302",
django/tests/test_client_regress/tests.py,458,"This page will redirect with code 301, not 302",
django/tests/test_client_regress/tests.py,473,For all possible True/False combinations of follow and secure,
django/tests/test_client_regress/tests.py,475,always redirects to https,
django/tests/test_client_regress/tests.py,477,the goal scheme is https,
django/tests/test_client_regress/tests.py,645,For testing field and non-field errors,
django/tests/test_client_regress/tests.py,660,For testing non-form errors,
django/tests/test_client_regress/tests.py,783,"Create a second client, and log in.",
django/tests/test_client_regress/tests.py,788,Get a redirection page with the second client.,
django/tests/test_client_regress/tests.py,791,"At this points, the self.client isn't logged in.",
django/tests/test_client_regress/tests.py,792,"assertRedirects uses the original client, not the default client.",
django/tests/test_client_regress/tests.py,807,Try to access a login protected page.,
django/tests/test_client_regress/tests.py,852,"At this point, an exception has been raised, and should be cleared.",
django/tests/test_client_regress/tests.py,854,This next operation should be successful; if it isn't we have a problem.,
django/tests/test_client_regress/tests.py,873,We need two different tests to check URLconf substitution -  one to check,
django/tests/test_client_regress/tests.py,874,"it was changed, and another one (without self.urls) to check it was reverted on",
django/tests/test_client_regress/tests.py,875,teardown. This pair of tests relies upon the alphabetical ordering of test execution.,
django/tests/test_client_regress/tests.py,885,This test needs to run *after* UrlconfSubstitutionTests; the zz prefix in the,
django/tests/test_client_regress/tests.py,886,name is to ensure alphabetical ordering.,
django/tests/test_client_regress/tests.py,933,"None, True and False are builtins of BaseContext, and present",
django/tests/test_client_regress/tests.py,934,in every Context without needing to be added.,
django/tests/test_client_regress/tests.py,947,Need to insert a context processor that assumes certain things about,
django/tests/test_client_regress/tests.py,948,the request instance. This triggers a bug caused by some ways of,
django/tests/test_client_regress/tests.py,949,copying RequestContext.,
django/tests/test_client_regress/tests.py,976,The session doesn't exist to start.,
django/tests/test_client_regress/tests.py,981,This request sets a session variable.,
django/tests/test_client_regress/tests.py,986,The session has been modified,
django/tests/test_client_regress/tests.py,991,Log in,
django/tests/test_client_regress/tests.py,995,Session should still contain the modified value,
django/tests/test_client_regress/tests.py,1124,A HEAD request doesn't return any content.,
django/tests/test_client_regress/tests.py,1158,Regression test for #11371,
django/tests/test_client_regress/tests.py,1166,Regression test for #11371,
django/tests/test_client_regress/tests.py,1174,Regression test for #17797,
django/tests/test_client_regress/tests.py,1182,Regression test for #21740,
django/tests/test_client_regress/tests.py,1232,A GET-like request can pass a query string as data (#10571),
django/tests/test_client_regress/tests.py,1237,A GET-like request can pass a query string as part of the URL,
django/tests/test_client_regress/tests.py,1241,Data provided in the URL to a GET-like request is overridden by actual form data,
django/tests/test_client_regress/tests.py,1250,A POST-like request can pass a query string as data,
django/tests/test_client_regress/tests.py,1255,A POST-like request can pass a query string as part of the URL,
django/tests/test_client_regress/tests.py,1260,POST data provided in the URL augments actual form data,
django/tests/test_client_regress/tests.py,1385,These tests are checking that certain middleware don't change certain,
django/tests/test_client_regress/tests.py,1386,"global state. Alternatively, from the point of view of a test, they are",
django/tests/test_client_regress/tests.py,1387,"ensuring test isolation behavior. So, unusually, it doesn't make sense to",
django/tests/test_client_regress/tests.py,1388,"run the tests individually, and if any are failing it is confusing to run",
django/tests/test_client_regress/tests.py,1389,them with any other set of tests.,
django/tests/test_client_regress/tests.py,1400,apart from the next line the three tests are identical,
django/tests/test_client_regress/tests.py,1405,This test is executed after the previous one,
django/tests/file_storage/test_generate_filename.py,71,Simulate call to f.save(),
django/tests/file_storage/test_generate_filename.py,78,Repeat test with a callable.,
django/tests/file_storage/test_generate_filename.py,80,Return a non-normalized path on purpose.,
django/tests/file_storage/test_generate_filename.py,85,Simulate call to f.save(),
django/tests/file_storage/tests.py,100,Set up a second temporary directory which is ensured to have a mixed,
django/tests/file_storage/tests.py,101,case name.,
django/tests/file_storage/tests.py,134,Check for correct behavior under both USE_TZ=True and USE_TZ=False.,
django/tests/file_storage/tests.py,135,The tests are similar since they both set up a situation where the,
django/tests/file_storage/tests.py,136,"system time zone, Django's TIME_ZONE, and UTC are distinct.",
django/tests/file_storage/tests.py,142,Django's TZ (and hence the system TZ) is set to Africa/Algiers which,
django/tests/file_storage/tests.py,143,is UTC+1 and has no DST change. We can set the Django TZ to something,
django/tests/file_storage/tests.py,144,"else so that UTC, Django's TIME_ZONE, and the system timezone are all",
django/tests/file_storage/tests.py,145,different.,
django/tests/file_storage/tests.py,149,At this point the system TZ is +1 and the Django TZ,
django/tests/file_storage/tests.py,150,is -5. The following will be aware in UTC.,
django/tests/file_storage/tests.py,158,"dt should be aware, in UTC",
django/tests/file_storage/tests.py,162,The three timezones are indeed distinct.,
django/tests/file_storage/tests.py,170,dt and now should be the same effective time.,
django/tests/file_storage/tests.py,175,Django's TZ (and hence the system TZ) is set to Africa/Algiers which,
django/tests/file_storage/tests.py,176,is UTC+1 and has no DST change. We can set the Django TZ to something,
django/tests/file_storage/tests.py,177,"else so that UTC, Django's TIME_ZONE, and the system timezone are all",
django/tests/file_storage/tests.py,178,different.,
django/tests/file_storage/tests.py,182,At this point the system TZ is +1 and the Django TZ,
django/tests/file_storage/tests.py,183,is -5.,
django/tests/file_storage/tests.py,190,"dt should be naive, in system (+1) TZ",
django/tests/file_storage/tests.py,193,The three timezones are indeed distinct.,
django/tests/file_storage/tests.py,201,dt and naive_now should be the same effective time.,
django/tests/file_storage/tests.py,203,If we convert dt to an aware object using the Algiers,
django/tests/file_storage/tests.py,204,timezone then it should be the same effective time to,
django/tests/file_storage/tests.py,205,now_in_algiers.,
django/tests/file_storage/tests.py,333,should encode special chars except ~!*()',
django/tests/file_storage/tests.py,334,like encodeURIComponent() JavaScript function do,
django/tests/file_storage/tests.py,341,should translate os path separator(s) to the url path separator,
django/tests/file_storage/tests.py,344,#25905: remove leading slashes from file names to prevent unsafe url output,
django/tests/file_storage/tests.py,360,#22717: missing ending slash in base_url should be auto-corrected,
django/tests/file_storage/tests.py,400,Create a storage backend associated with the mixed case name,
django/tests/file_storage/tests.py,401,directory.,
django/tests/file_storage/tests.py,403,Ask that storage backend to store a file with a mixed case filename.,
django/tests/file_storage/tests.py,417,"Monkey-patch os.makedirs, to simulate a normal call, a raced call,",
django/tests/file_storage/tests.py,418,and an error.,
django/tests/file_storage/tests.py,442,Exceptions aside from FileExistsError are raised.,
django/tests/file_storage/tests.py,454,"Monkey-patch os.remove, to simulate a normal call, a raced call,",
django/tests/file_storage/tests.py,455,and an error.,
django/tests/file_storage/tests.py,478,Exceptions aside from FileNotFoundError are raised.,
django/tests/file_storage/tests.py,553,Storage basic methods.,
django/tests/file_storage/tests.py,593,Mask out O_EXCL so os.open() doesn't raise OSError if the file exists.,
django/tests/file_storage/tests.py,666,Should be safe on most backends,
django/tests/file_storage/tests.py,671,An object without a file has limited functionality.,
django/tests/file_storage/tests.py,677,Saving a file enables full functionality.,
django/tests/file_storage/tests.py,684,"File objects can be assigned to FileField attributes, but shouldn't",
django/tests/file_storage/tests.py,685,get committed until the model it's attached to is saved.,
django/tests/file_storage/tests.py,695,Save another file with the same name.,
django/tests/file_storage/tests.py,703,Deleting an object does not delete the file it uses.,
django/tests/file_storage/tests.py,711,"Files can be read in a little at a time, if necessary.",
django/tests/file_storage/tests.py,721,Files can be written to.,
django/tests/file_storage/tests.py,739,Multiple files with the same name get _(7 random chars) appended to them.,
django/tests/file_storage/tests.py,752,"Given the max_length is limited, when multiple files get uploaded",
django/tests/file_storage/tests.py,753,"under the same name, then the filename get truncated in order to fit",
django/tests/file_storage/tests.py,754,in _(7 random chars). When most of the max_length is taken by,
django/tests/file_storage/tests.py,755,dirname + extension and there are not enough  characters in the,
django/tests/file_storage/tests.py,756,"filename to truncate, an exception should be raised.",
django/tests/file_storage/tests.py,763,Testing truncation.,
django/tests/file_storage/tests.py,768,Testing exception is raised when filename is too short to truncate.,
django/tests/file_storage/tests.py,782,Testing FileField with max_length > 255. Most systems have filename,
django/tests/file_storage/tests.py,783,length limitation of 255. Path takes extra chars.,
django/tests/file_storage/tests.py,784,4 chars for extension.,
django/tests/file_storage/tests.py,792,Default values allow an object to access a single file.,
django/tests/file_storage/tests.py,799,"But it shouldn't be deleted, even if there are no more objects using",
django/tests/file_storage/tests.py,800,it.,
django/tests/file_storage/tests.py,807,"upload_to can be empty, meaning it does not use subdirectory.",
django/tests/file_storage/tests.py,823,"Verify the fix for #5655, making sure the directory is only",
django/tests/file_storage/tests.py,824,determined once.,
django/tests/file_storage/tests.py,836,CustomValidNameStorage.get_valid_name() appends '_valid' to the name,
django/tests/file_storage/tests.py,841,Push an object into the cache to make sure it pickles properly,
django/tests/file_storage/tests.py,849,Create sample file,
django/tests/file_storage/tests.py,852,Load it as Python file object,
django/tests/file_storage/tests.py,854,Save it using storage and read its content,
django/tests/file_storage/tests.py,861,Test passing StringIO instance as content argument to save,
django/tests/file_storage/tests.py,866,Save it and read written file,
django/tests/file_storage/tests.py,916,Tests for a race condition on file saving (#4948).,
django/tests/file_storage/tests.py,917,This is written in such a way that it'll always pass on platforms,
django/tests/file_storage/tests.py,918,without threading.,
django/tests/file_storage/models.py,18,mark the name to show that this was called,
django/tests/file_storage/models.py,32,no-op implementation.,
django/tests/file_storage/models.py,41,"This returns a different result each time,",
django/tests/file_storage/models.py,42,to make sure it only gets called once.,
django/tests/dbshell/test_postgresql.py,21,PostgreSQL environment variables.,
django/tests/dbshell/test_postgresql.py,114,The default handler isn't SIG_IGN.,
django/tests/dbshell/test_postgresql.py,118,dbshell restores the original handler.,
django/tests/schema/fields.py,52,Copy those methods from ManyToManyField because they don't call super() internally,
django/tests/schema/tests.py,57,Utility functions,
django/tests/schema/tests.py,60,local_models should contain test dependent model classes that will be,
django/tests/schema/tests.py,61,automatically removed from the app cache on test tear down.,
django/tests/schema/tests.py,63,isolated_local_models contains models that are in test methods,
django/tests/schema/tests.py,64,decorated with @isolate_apps.,
django/tests/schema/tests.py,68,Delete any tables made for our models,
django/tests/schema/tests.py,107,SQLite has a different format for field_type,
django/tests/schema/tests.py,111,SQLite also doesn't error properly,
django/tests/schema/tests.py,207,Tests,
django/tests/schema/tests.py,213,Create the table,
django/tests/schema/tests.py,215,The table is there,
django/tests/schema/tests.py,217,Clean up that table,
django/tests/schema/tests.py,219,No deferred SQL should be left over.,
django/tests/schema/tests.py,221,The table is gone,
django/tests/schema/tests.py,228,Create the table,
django/tests/schema/tests.py,233,Initial tables are there,
django/tests/schema/tests.py,236,Make sure the FK constraint is present,
django/tests/schema/tests.py,243,Repoint the FK constraint,
django/tests/schema/tests.py,253,Create some tables.,
django/tests/schema/tests.py,259,Add a foreign key from one to the other.,
django/tests/schema/tests.py,265,Creating a FK field with a constraint uses a single statement without,
django/tests/schema/tests.py,266,a deferred ALTER TABLE.,
django/tests/schema/tests.py,276,Add an inline foreign key and update data in the same transaction.,
django/tests/schema/tests.py,297,"Add an inline foreign key, update data, and an index in the same",
django/tests/schema/tests.py,298,transaction.,
django/tests/schema/tests.py,311,Create the table,
django/tests/schema/tests.py,315,Change CharField to FK,
django/tests/schema/tests.py,326,Create the table,
django/tests/schema/tests.py,330,Change TextField to FK,
django/tests/schema/tests.py,374,Create the table,
django/tests/schema/tests.py,383,Create the table,
django/tests/schema/tests.py,388,Initial tables are there,
django/tests/schema/tests.py,393,Make a db_constraint=False FK,
django/tests/schema/tests.py,399,Alter to one with a constraint,
django/tests/schema/tests.py,405,Alter to one without a constraint again,
django/tests/schema/tests.py,436,@isolate_apps() and inner models are needed to have the model,
django/tests/schema/tests.py,437,"relations populated, otherwise this doesn't act as a regression test.",
django/tests/schema/tests.py,453,Create the table,
django/tests/schema/tests.py,457,Initial tables are there,
django/tests/schema/tests.py,460,Make a db_constraint=False FK,
django/tests/schema/tests.py,463,Add the field,
django/tests/schema/tests.py,484,Create the table,
django/tests/schema/tests.py,487,Ensure there's no age field,
django/tests/schema/tests.py,490,Add the new field,
django/tests/schema/tests.py,499,Ensure the field is right afterwards,
django/tests/schema/tests.py,509,Create a table with a unique constraint on the slug field.,
django/tests/schema/tests.py,511,Remove the slug column.,
django/tests/schema/tests.py,519,Create the table,
django/tests/schema/tests.py,522,Ensure there's no age field,
django/tests/schema/tests.py,525,Add some rows of data,
django/tests/schema/tests.py,528,Add a not-null field,
django/tests/schema/tests.py,533,Ensure the field is right afterwards,
django/tests/schema/tests.py,544,Create the table,
django/tests/schema/tests.py,547,Ensure there's no age field,
django/tests/schema/tests.py,550,Add some rows of data,
django/tests/schema/tests.py,553,Add a not-null field,
django/tests/schema/tests.py,558,Ensure the field is right afterwards,
django/tests/schema/tests.py,560,BooleanField are stored as TINYINT(1) on MySQL.,
django/tests/schema/tests.py,572,Weird field that saves the count of items in its value,
django/tests/schema/tests.py,581,Create the table,
django/tests/schema/tests.py,584,Add some rows of data,
django/tests/schema/tests.py,587,Add the field with a default it needs to cast (to string in this case),
django/tests/schema/tests.py,592,Ensure the field is there,
django/tests/schema/tests.py,596,Make sure the values were transformed correctly,
django/tests/schema/tests.py,603,Create the table,
django/tests/schema/tests.py,606,Add the new field,
django/tests/schema/tests.py,611,Ensure the field is right afterwards,
django/tests/schema/tests.py,613,"MySQL annoyingly uses the same backend, so it'll come back as one of",
django/tests/schema/tests.py,614,these two types.,
django/tests/schema/tests.py,622,Create the table,
django/tests/schema/tests.py,625,Add the new field with default,
django/tests/schema/tests.py,631,Introspection treats BLOBs as TextFields,
django/tests/schema/tests.py,638,Create the table,
django/tests/schema/tests.py,641,Ensure the field is right to begin with,
django/tests/schema/tests.py,645,Alter the name field to a TextField,
django/tests/schema/tests.py,651,Ensure the field is right afterwards,
django/tests/schema/tests.py,655,Change nullability again,
django/tests/schema/tests.py,660,Ensure the field is right afterwards,
django/tests/schema/tests.py,666,Create the table,
django/tests/schema/tests.py,669,Change AutoField to IntegerField,
django/tests/schema/tests.py,678,Create the table,
django/tests/schema/tests.py,681,Change AutoField to CharField,
django/tests/schema/tests.py,710,Create the table.,
django/tests/schema/tests.py,713,Change UUIDField to primary key.,
django/tests/schema/tests.py,741,"Regression for ""BLOB/TEXT column 'info' can't have a default value"")",
django/tests/schema/tests.py,742,on MySQL.,
django/tests/schema/tests.py,743,Create the table,
django/tests/schema/tests.py,765,Update the parent FK to create a deferred constraint check.,
django/tests/schema/tests.py,781,Make sure the field isn't nullable,
django/tests/schema/tests.py,797,Make sure the field isn't nullable,
django/tests/schema/tests.py,813,Make sure the field isn't nullable,
django/tests/schema/tests.py,854,Create the table,
django/tests/schema/tests.py,857,Ensure the field is right to begin with,
django/tests/schema/tests.py,860,Create some test data,
django/tests/schema/tests.py,863,Verify null value,
django/tests/schema/tests.py,866,Alter the height field to NOT NULL with default,
django/tests/schema/tests.py,872,Ensure the field is right afterwards,
django/tests/schema/tests.py,875,Verify default value,
django/tests/schema/tests.py,884,Create the table,
django/tests/schema/tests.py,887,Change the CharField to null,
django/tests/schema/tests.py,896,Create the table.,
django/tests/schema/tests.py,900,Change max_length of CharField.,
django/tests/schema/tests.py,982,Create the table,
django/tests/schema/tests.py,985,Change the TextField to null,
django/tests/schema/tests.py,998,Create the table,
django/tests/schema/tests.py,1001,Ensure the field is right to begin with,
django/tests/schema/tests.py,1004,Alter the height field to NOT NULL keeping the previous default,
django/tests/schema/tests.py,1010,Ensure the field is right afterwards,
django/tests/schema/tests.py,1019,Create the table,
django/tests/schema/tests.py,1023,Ensure the field is right to begin with,
django/tests/schema/tests.py,1027,Alter the FK,
django/tests/schema/tests.py,1033,Ensure the field is right afterwards,
django/tests/schema/tests.py,1054,Create the tables,
django/tests/schema/tests.py,1058,Ensure no FK constraint exists,
django/tests/schema/tests.py,1075,Create the table,
django/tests/schema/tests.py,1079,Ensure the field is right to begin with,
django/tests/schema/tests.py,1082,Ensure the field is unique,
django/tests/schema/tests.py,1089,Alter the OneToOneField to ForeignKey,
django/tests/schema/tests.py,1095,Ensure the field is right afterwards,
django/tests/schema/tests.py,1098,Ensure the field is not unique anymore,
django/tests/schema/tests.py,1108,Create the table,
django/tests/schema/tests.py,1112,Ensure the field is right to begin with,
django/tests/schema/tests.py,1115,Ensure the field is not unique,
django/tests/schema/tests.py,1121,Alter the ForeignKey to OneToOneField,
django/tests/schema/tests.py,1127,Ensure the field is right afterwards,
django/tests/schema/tests.py,1130,Ensure the field is unique now,
django/tests/schema/tests.py,1142,Check the index is right to begin with.,
django/tests/schema/tests.py,1161,The index on ForeignKey is replaced with a unique constraint for OneToOneField.,
django/tests/schema/tests.py,1170,Check the index is right to begin with.,
django/tests/schema/tests.py,1179,on_delete changed from CASCADE.,
django/tests/schema/tests.py,1190,The index remains.,
django/tests/schema/tests.py,1199,Check the unique constraint is right to begin with.,
django/tests/schema/tests.py,1218,The unique constraint on OneToOneField is replaced with an index for ForeignKey.,
django/tests/schema/tests.py,1227,Check the unique constraint is right to begin with.,
django/tests/schema/tests.py,1236,on_delete changed from CASCADE.,
django/tests/schema/tests.py,1247,The unique constraint remains.,
django/tests/schema/tests.py,1252,Create the table,
django/tests/schema/tests.py,1255,Alter the case of the table,
django/tests/schema/tests.py,1274,This will fail if DROP DEFAULT is inadvertently executed on this,
django/tests/schema/tests.py,1275,"field which drops the id sequence, at least on PostgreSQL.",
django/tests/schema/tests.py,1298,Fail on PostgreSQL if sequence is missing an owner.,
django/tests/schema/tests.py,1320,Fail on PostgreSQL if sequence is missing an owner.,
django/tests/schema/tests.py,1384,Delete the old PK,
django/tests/schema/tests.py,1391,The primary key constraint is gone. Result depends on database:,
django/tests/schema/tests.py,1392,"'id' for SQLite, None for others (must not be 'i').",
django/tests/schema/tests.py,1395,Set up a model class as it currently stands. The original IntegerPK,
django/tests/schema/tests.py,1396,class is now out of date and some backends make use of the whole,
django/tests/schema/tests.py,1397,model class when modifying a field (such as sqlite3 when remaking a,
django/tests/schema/tests.py,1398,table) so an outdated model class leads to incorrect results.,
django/tests/schema/tests.py,1408,model requires a new PK,
django/tests/schema/tests.py,1417,Create a model class representing the updated model.,
django/tests/schema/tests.py,1427,Ensure unique constraint works.,
django/tests/schema/tests.py,1436,Create the table,
django/tests/schema/tests.py,1439,Ensure the field is right to begin with,
django/tests/schema/tests.py,1443,Alter the name field's name,
django/tests/schema/tests.py,1449,Ensure the field is right afterwards,
django/tests/schema/tests.py,1475,Ensure the foreign key reference was updated.,
django/tests/schema/tests.py,1512,Create the tables,
django/tests/schema/tests.py,1517,Ensure there is now an m2m table there,
django/tests/schema/tests.py,1551,Create the tables,
django/tests/schema/tests.py,1556,Ensure there is now an m2m table there,
django/tests/schema/tests.py,1583,Create the tables,
django/tests/schema/tests.py,1587,Create an M2M field,
django/tests/schema/tests.py,1590,Ensure there's no m2m table there,
django/tests/schema/tests.py,1593,Add the field,
django/tests/schema/tests.py,1596,Ensure there is now an m2m table there,
django/tests/schema/tests.py,1600,"""Alter"" the field. This should not rename the DB table to itself.",
django/tests/schema/tests.py,1604,Remove the M2M table again,
django/tests/schema/tests.py,1607,Ensure there's no m2m table there,
django/tests/schema/tests.py,1611,Make sure the model state is coherent with the table one now that,
django/tests/schema/tests.py,1612,we've removed the tags field.,
django/tests/schema/tests.py,1649,Create the tables,
django/tests/schema/tests.py,1654,Ensure the m2m table is there,
django/tests/schema/tests.py,1656,"""Alter"" the field's blankness. This should not actually do anything.",
django/tests/schema/tests.py,1662,Ensure the m2m table is still there,
django/tests/schema/tests.py,1688,Create the tables,
django/tests/schema/tests.py,1694,Ensure the M2M exists and points to TagM2MTest,
django/tests/schema/tests.py,1701,Repoint the M2M,
django/tests/schema/tests.py,1707,Ensure old M2M is gone,
django/tests/schema/tests.py,1711,This model looks like the new model and is used for teardown.,
django/tests/schema/tests.py,1714,Ensure the new M2M exists and points to UniqueTest,
django/tests/schema/tests.py,1741,Create the tables.,
django/tests/schema/tests.py,1746,Ensure the m2m table is there.,
django/tests/schema/tests.py,1748,Alter a field in LocalTagM2MTest.,
django/tests/schema/tests.py,1752,@isolate_apps() and inner models are needed to have the model,
django/tests/schema/tests.py,1753,"relations populated, otherwise this doesn't act as a regression test.",
django/tests/schema/tests.py,1757,Ensure the m2m table is still there.,
django/tests/schema/tests.py,1765,Create the tables,
django/tests/schema/tests.py,1768,Ensure the constraint exists,
django/tests/schema/tests.py,1772,Alter the column to remove it,
django/tests/schema/tests.py,1782,Alter the column to re-add it,
django/tests/schema/tests.py,1794,Add the custom check constraint,
django/tests/schema/tests.py,1800,Ensure the constraints exist,
django/tests/schema/tests.py,1808,Alter the column to remove field check,
django/tests/schema/tests.py,1821,Alter the column to re-add field check,
django/tests/schema/tests.py,1832,Drop the check constraint,
django/tests/schema/tests.py,1841,Create the table,
django/tests/schema/tests.py,1844,Ensure the field is unique to begin with,
django/tests/schema/tests.py,1849,Alter the slug field to be non-unique,
django/tests/schema/tests.py,1855,Ensure the field is no longer unique,
django/tests/schema/tests.py,1859,Alter the slug field to be unique,
django/tests/schema/tests.py,1864,Ensure the field is unique again,
django/tests/schema/tests.py,1869,Rename the field,
django/tests/schema/tests.py,1874,Ensure the field is still unique,
django/tests/schema/tests.py,1887,This fails if the unique index name isn't quoted.,
django/tests/schema/tests.py,1923,One SQL statement is executed to alter the field.,
django/tests/schema/tests.py,1956,One SQL statement is executed to alter the field.,
django/tests/schema/tests.py,1958,Ensure that the field is still unique.,
django/tests/schema/tests.py,1967,Add the custom unique constraint,
django/tests/schema/tests.py,1973,Ensure the constraints exist,
django/tests/schema/tests.py,1981,Alter the column to remove field uniqueness,
django/tests/schema/tests.py,1994,Alter the column to re-add field uniqueness,
django/tests/schema/tests.py,2005,Drop the unique constraint,
django/tests/schema/tests.py,2014,Create the table,
django/tests/schema/tests.py,2017,Ensure the fields are unique to begin with,
django/tests/schema/tests.py,2024,Alter the model to its non-unique-together companion,
django/tests/schema/tests.py,2027,Ensure the fields are no longer unique,
django/tests/schema/tests.py,2031,Alter it back,
django/tests/schema/tests.py,2036,Ensure the fields are unique again,
django/tests/schema/tests.py,2047,Create the table,
django/tests/schema/tests.py,2051,Ensure the fields are unique to begin with,
django/tests/schema/tests.py,2053,Add the unique_together constraint,
django/tests/schema/tests.py,2056,Alter it back,
django/tests/schema/tests.py,2066,Create the tables,
django/tests/schema/tests.py,2073,Ensure the fields aren't unique to begin with,
django/tests/schema/tests.py,2075,Add the unique_together constraint,
django/tests/schema/tests.py,2078,Alter it back,
django/tests/schema/tests.py,2086,Add the custom unique constraint,
django/tests/schema/tests.py,2092,Ensure the constraints exist,
django/tests/schema/tests.py,2100,Remove unique together,
django/tests/schema/tests.py,2111,Re-add unique together,
django/tests/schema/tests.py,2121,Drop the unique constraint,
django/tests/schema/tests.py,2130,Create the table,
django/tests/schema/tests.py,2133,Ensure there's no index on the year/slug columns first,
django/tests/schema/tests.py,2142,Alter the model to add an index,
django/tests/schema/tests.py,2145,Ensure there is now an index,
django/tests/schema/tests.py,2154,Alter it back,
django/tests/schema/tests.py,2159,Ensure there's no index,
django/tests/schema/tests.py,2174,Create the table,
django/tests/schema/tests.py,2178,Ensure the fields are unique to begin with,
django/tests/schema/tests.py,2180,Add the unique_together constraint,
django/tests/schema/tests.py,2183,Alter it back,
django/tests/schema/tests.py,2191,Create the table,
django/tests/schema/tests.py,2194,Ensure there is an index,
django/tests/schema/tests.py,2208,Add the custom index,
django/tests/schema/tests.py,2214,Ensure the indexes exist,
django/tests/schema/tests.py,2222,Remove index together,
django/tests/schema/tests.py,2233,Re-add index together,
django/tests/schema/tests.py,2243,Drop the index,
django/tests/schema/tests.py,2265,Create the table and one referring it.,
django/tests/schema/tests.py,2269,Ensure the table is there to begin with,
django/tests/schema/tests.py,2272,Alter the table,
django/tests/schema/tests.py,2275,Ensure the table is there afterwards,
django/tests/schema/tests.py,2279,Ensure the foreign key reference was updated,
django/tests/schema/tests.py,2281,Alter the table again,
django/tests/schema/tests.py,2284,Ensure the table is still there,
django/tests/schema/tests.py,2293,Create the table,
django/tests/schema/tests.py,2296,Ensure the table is there and has no index,
django/tests/schema/tests.py,2298,Add the index,
django/tests/schema/tests.py,2303,Drop the index,
django/tests/schema/tests.py,2314,Ensure the table has its index,
django/tests/schema/tests.py,2317,Add the custom index,
django/tests/schema/tests.py,2332,Change name field to db_index=False,
django/tests/schema/tests.py,2340,The index from Meta.indexes is still in the database.,
django/tests/schema/tests.py,2342,Drop the index,
django/tests/schema/tests.py,2354,The table doesn't have an index,
django/tests/schema/tests.py,2357,Add the index,
django/tests/schema/tests.py,2363,Drop the index,
django/tests/schema/tests.py,2371,Create the table,
django/tests/schema/tests.py,2375,Ensure the table is there and has the right index,
django/tests/schema/tests.py,2380,Alter to remove the index,
django/tests/schema/tests.py,2386,Ensure the table is there and has no index,
django/tests/schema/tests.py,2391,Alter to re-add the index,
django/tests/schema/tests.py,2395,Ensure the table is there and has the index again,
django/tests/schema/tests.py,2400,"Add a unique column, verify that creates an implicit index",
django/tests/schema/tests.py,2408,"Remove the unique, check the index goes with it",
django/tests/schema/tests.py,2421,The text_field index is present if the database supports it.,
django/tests/schema/tests.py,2429,Create the table,
django/tests/schema/tests.py,2432,Ensure the table is there and has the right PK,
django/tests/schema/tests.py,2434,Alter to change the PK,
django/tests/schema/tests.py,2443,Ensure the PK changed,
django/tests/schema/tests.py,2479,Create the table,
django/tests/schema/tests.py,2483,Find the properly shortened column name,
django/tests/schema/tests.py,2485,"unquote, and, for Oracle, un-upcase",
django/tests/schema/tests.py,2486,Ensure the table is there and has an index on the column,
django/tests/schema/tests.py,2498,Create the initial tables,
django/tests/schema/tests.py,2502,"Add a second FK, this would fail due to long ref name before the fix",
django/tests/schema/tests.py,2544,Create the table,
django/tests/schema/tests.py,2551,The table is there,
django/tests/schema/tests.py,2553,Clean up that table,
django/tests/schema/tests.py,2556,The table is gone,
django/tests/schema/tests.py,2625,Create the table,
django/tests/schema/tests.py,2628,Ensure there's no surname field,
django/tests/schema/tests.py,2631,Create a row,
django/tests/schema/tests.py,2633,Add new CharField to ensure default will be used from effective_default,
django/tests/schema/tests.py,2638,Ensure field was added with the right default,
django/tests/schema/tests.py,2645,Create the table,
django/tests/schema/tests.py,2648,Ensure there's no surname field,
django/tests/schema/tests.py,2651,Create a row,
django/tests/schema/tests.py,2653,Add new CharField with a default,
django/tests/schema/tests.py,2658,Ensure field was added with the right default,
django/tests/schema/tests.py,2663,And that the default is no longer set in the database.,
django/tests/schema/tests.py,2672,Create the table,
django/tests/schema/tests.py,2675,Create a row,
django/tests/schema/tests.py,2679,The default from the new field is used in updating existing rows.,
django/tests/schema/tests.py,2685,The database default should be removed.,
django/tests/schema/tests.py,2710,Create the table,
django/tests/schema/tests.py,2713,Create a row,
django/tests/schema/tests.py,2715,Create a field that has an unhashable default,
django/tests/schema/tests.py,2728,Should create two indexes; one for like operator.,
django/tests/schema/tests.py,2741,Should create two indexes; one for like operator.,
django/tests/schema/tests.py,2749,Create the table and verify no initial indexes.,
django/tests/schema/tests.py,2753,Alter to add db_index=True and create 2 indexes.,
django/tests/schema/tests.py,2763,Remove db_index=True to drop both indexes.,
django/tests/schema/tests.py,2770,Create the table and verify no initial indexes.,
django/tests/schema/tests.py,2774,Alter to add unique=True and create 2 indexes.,
django/tests/schema/tests.py,2784,Remove unique=True to drop both indexes.,
django/tests/schema/tests.py,2791,Create the table and verify no initial indexes.,
django/tests/schema/tests.py,2795,Alter to add db_index=True and create 2 indexes.,
django/tests/schema/tests.py,2805,Remove db_index=True to drop both indexes.,
django/tests/schema/tests.py,2812,Create the table and verify initial indexes.,
django/tests/schema/tests.py,2819,Alter to add unique=True (should replace the index),
django/tests/schema/tests.py,2829,Alter to remove unique=True (should drop unique index),
django/tests/schema/tests.py,2841,Create the table and verify initial indexes.,
django/tests/schema/tests.py,2848,Alter to add unique=True (should replace the index),
django/tests/schema/tests.py,2858,Alter to remove both unique=True and db_index=True (should drop all indexes),
django/tests/schema/tests.py,2867,Create the table and verify initial indexes.,
django/tests/schema/tests.py,2874,Alter to set unique=True and remove db_index=True (should replace the index),
django/tests/schema/tests.py,2884,Alter to set db_index=True and remove unique=True (should restore index),
django/tests/schema/tests.py,2896,Create the table and verify initial indexes.,
django/tests/schema/tests.py,2903,Alter to add db_index=True,
django/tests/schema/tests.py,2913,Alter to remove db_index=True,
django/tests/schema/tests.py,2924,Create the table and verify no initial indexes.,
django/tests/schema/tests.py,2929,Alter to add db_index=True and create index.,
django/tests/schema/tests.py,2937,Remove db_index=True to drop index.,
django/tests/schema/tests.py,2967,Create the table,
django/tests/schema/tests.py,2970,Check auto_now/auto_now_add attributes are not defined,
django/tests/schema/tests.py,2978,Create a row,
django/tests/schema/tests.py,2980,Ensure fields were added with the correct defaults,
django/tests/schema/models.py,4,"Because we want to test creation and deletion of these as separate things,",
django/tests/schema/models.py,5,these models are all inserted into a separate Apps so the main test,
django/tests/schema/models.py,6,runner doesn't migrate them.,
django/tests/schema/models.py,87,"tags = models.ManyToManyField(""Tag"", related_name=""books"")",
django/tests/schema/models.py,156,uppercase to ensure proper quoting,
django/tests/schema/models.py,208,Based on tests/reserved_names/models.py,
django/tests/sitemaps_tests/base.py,18,Create an object for sitemap content.,
django/tests/sitemaps_tests/base.py,29,This cleanup is necessary because contrib.sites cache,
django/tests/sitemaps_tests/base.py,30,"makes tests interfere with each other, see #11505",
django/tests/sitemaps_tests/test_http.py,187,Priorities haven't been rendered in localized format.,
django/tests/sitemaps_tests/test_http.py,195,Hitting the flatpages sitemap without the sites framework installed,
django/tests/sitemaps_tests/test_http.py,196,doesn't raise an exception.,
django/tests/builtin_server/tests.py,12,"If data is too large, socket will choke, so write chunks no larger than 32MB",
django/tests/builtin_server/tests.py,13,at a time. The rationale behind the 32MB can be found in #5596#comment:4.,
django/tests/builtin_server/tests.py,14,32 MB,
django/tests/builtin_server/tests.py,29,"Before the first output, send the stored headers",
django/tests/builtin_server/tests.py,30,make sure we know content-length,
django/tests/builtin_server/tests.py,35,XXX check Content-Length and truncate if too many bytes written?,
django/tests/builtin_server/tests.py,106,Sendfile is used only when file_wrapper has been used.,
django/tests/builtin_server/tests.py,108,Fetch the original response object.,
django/tests/builtin_server/tests.py,111,The response and file buffers are closed.,
django/tests/builtin_server/tests.py,143,Return a blob of data that is 1.5 times the maximum chunk size.,
django/tests/queries/test_bulk_update.py,97,"Tests that use self.notes go here, otherwise put them in another class.",
django/tests/queries/test_qs_combinators.py,126,List of columns can be changed.,
django/tests/queries/test_qs_combinators.py,167,Order by a single column.,
django/tests/queries/test_qs_combinators.py,172,Order by multiple columns.,
django/tests/queries/test_qs_combinators.py,236,Should not raise,
django/tests/queries/test_qs_combinators.py,240,'id' is not part of the select,
django/tests/queries/test_qs_combinators.py,243,'num' got realiased to num2,
django/tests/queries/test_qs_combinators.py,246,"switched order, now 'exists' again:",
django/tests/queries/tests.py,56,Create these out of order so that sorting by 'id' will be different to sorting,
django/tests/queries/tests.py,57,by 'info'. Helps detect some problems later.,
django/tests/queries/tests.py,82,"Ordering by 'rank' gives us rank2, rank1, rank3. Ordering by the Meta.ordering",
django/tests/queries/tests.py,83,"will be rank3, rank2, rank1.",
django/tests/queries/tests.py,97,"It is possible to reuse U for the second subquery, no need to use W.",
django/tests/queries/tests.py,99,"So, 'U0.""id""' is referenced in SELECT and WHERE twice.",
django/tests/queries/tests.py,127,"Checking that no join types are ""left outer"" joins.",
django/tests/queries/tests.py,144,"Each filter call is processed ""at once"" against a single table, so this is",
django/tests/queries/tests.py,145,different from the previous example as it tries to find tags that are two,
django/tests/queries/tests.py,146,things at once (rather than two tags).,
django/tests/queries/tests.py,176,Make sure .distinct() works with slicing (this was broken in Oracle).,
django/tests/queries/tests.py,205,Merging two empty result sets shouldn't leave a queryset with no constraints,
django/tests/queries/tests.py,206,(which would match everything).,
django/tests/queries/tests.py,216,Create something with a duplicate 'name' so that we can test multi-column,
django/tests/queries/tests.py,217,cases (which require some tricky SQL transformations under the covers).,
django/tests/queries/tests.py,346,Excluding across a m2m relation when there is more than one related,
django/tests/queries/tests.py,347,object associated was problematic.,
django/tests/queries/tests.py,357,Excluding from a relation that cannot be NULL should not use outer joins.,
django/tests/queries/tests.py,361,"Similarly, when one of the joins cannot possibly, ever, involve NULL",
django/tests/queries/tests.py,362,"values (Author -> ExtraInfo, in the following), it should never be",
django/tests/queries/tests.py,363,promoted to a left outer join. So the following query should only,
django/tests/queries/tests.py,364,"involve one ""left outer"" join (Author -> Item is 0-to-many).",
django/tests/queries/tests.py,374,The previous changes shouldn't affect nullable foreign key joins.,
django/tests/queries/tests.py,427,Combining querysets built on different models should behave in a well-defined,
django/tests/queries/tests.py,428,fashion. We raise an error.,
django/tests/queries/tests.py,462,"Ordering on related tables should be possible, even if the table is",
django/tests/queries/tests.py,463,not otherwise involved.,
django/tests/queries/tests.py,469,Ordering on a related field should use the remote model's default,
django/tests/queries/tests.py,470,ordering as a final step.,
django/tests/queries/tests.py,476,Using remote model default ordering can span multiple models (in this,
django/tests/queries/tests.py,477,"case, Cover is ordered by Item's default, which uses Note's default).",
django/tests/queries/tests.py,483,"If the remote model does not have a default ordering, we order by its 'id'",
django/tests/queries/tests.py,484,field.,
django/tests/queries/tests.py,490,Ordering by a many-valued attribute (e.g. a many-to-many or reverse,
django/tests/queries/tests.py,491,"ForeignKey) is legal, but the results might not make sense. That",
django/tests/queries/tests.py,492,"isn't Django's problem. Garbage in, garbage out.",
django/tests/queries/tests.py,498,"If we replace the default ordering, Django adjusts the required",
django/tests/queries/tests.py,499,tables automatically. Item normally requires a join with Note to do,
django/tests/queries/tests.py,500,"the default ordering, but that isn't needed here.",
django/tests/queries/tests.py,515,This is also a good select_related() test because there are multiple,
django/tests/queries/tests.py,516,Note entries in the SQL. The two Note items should be different.,
django/tests/queries/tests.py,527,Ordering columns must be included in the output columns. Note that,
django/tests/queries/tests.py,528,this means results that might otherwise be distinct are not (if there,
django/tests/queries/tests.py,529,"are multiple values in the ordering cols), as in this example. This",
django/tests/queries/tests.py,530,isn't a bug; it's a warning to be careful with the selection of,
django/tests/queries/tests.py,531,ordering columns.,
django/tests/queries/tests.py,538,"If you don't pass any fields to values(), relation fields are",
django/tests/queries/tests.py,539,"returned as ""foo_id"" keys, not ""foo"". For consistency, you should be",
django/tests/queries/tests.py,540,"able to pass ""foo_id"" in the fields list and have it work, too. We",
django/tests/queries/tests.py,541,"actually allow both ""foo"" and ""foo_id"".",
django/tests/queries/tests.py,542,The *_id version is returned by default.,
django/tests/queries/tests.py,544,You can also pass it in explicitly.,
django/tests/queries/tests.py,546,...or use the field name.,
django/tests/queries/tests.py,550,"Multiple filter statements are joined using ""AND"" all the time.",
django/tests/queries/tests.py,578,Dates with limits and/or counts,
django/tests/queries/tests.py,586,Dates with extra select columns,
django/tests/queries/tests.py,608,Nullable dates,
django/tests/queries/tests.py,645,Make sure exclude() with multiple conditions continues to work.,
django/tests/queries/tests.py,663,"More twisted cases, involving nested negations.",
django/tests/queries/tests.py,678,Make sure querysets with related fields can be pickled. If this,
django/tests/queries/tests.py,679,"doesn't crash, it's a Good Thing.",
django/tests/queries/tests.py,683,We should also be able to pickle things that use select_related().,
django/tests/queries/tests.py,684,The only tricky thing here is to ensure that we do the related,
django/tests/queries/tests.py,685,selections properly after unpickling.,
django/tests/queries/tests.py,695,Check pickling of deferred-loading querysets,
django/tests/queries/tests.py,711,Complex objects should be converted to strings before being used in,
django/tests/queries/tests.py,712,lookups.,
django/tests/queries/tests.py,719,An EmptyQuerySet should not raise exceptions if it is filtered.,
django/tests/queries/tests.py,743,"There were ""issues"" when ordering and distinct-ing on fields related",
django/tests/queries/tests.py,744,via ForeignKeys.,
django/tests/queries/tests.py,750,Pickling of QuerySets using datetimes() should work.,
django/tests/queries/tests.py,755,"If a ValuesList or Values queryset is passed as an inner query, we",
django/tests/queries/tests.py,756,make sure it's only requesting a single value and use that as the,
django/tests/queries/tests.py,757,thing to select.,
django/tests/queries/tests.py,763,Multi-valued values() and values_list() querysets should raise errors.,
django/tests/queries/tests.py,770,qs.values_list(...).values(...) combinations should work.,
django/tests/queries/tests.py,781,"When bailing out early because of an empty ""__in"" filter, we need",
django/tests/queries/tests.py,782,to set things up correctly internally so that subqueries can continue properly.,
django/tests/queries/tests.py,786,"Testing an empty ""__in"" filter with a generator as the value.",
django/tests/queries/tests.py,797,Queries used in an __in clause don't execute subqueries,
django/tests/queries/tests.py,803,The subquery result cache should not be populated,
django/tests/queries/tests.py,810,The subquery result cache should not be populated,
django/tests/queries/tests.py,819,The subquery result cache should not be populated,
django/tests/queries/tests.py,823,Excluding shouldn't eliminate NULL entries.,
django/tests/queries/tests.py,834,Ordering by related tables should accommodate nullable fields (this,
django/tests/queries/tests.py,835,"test is a little tricky, since NULL ordering is database dependent.",
django/tests/queries/tests.py,836,"Instead, we just count the number of results).",
django/tests/queries/tests.py,839,Empty querysets can be merged with others.,
django/tests/queries/tests.py,852,Make sure bump_prefix() (an internal Query method) doesn't (re-)break. It's,
django/tests/queries/tests.py,853,sufficient that this query runs without error.,
django/tests/queries/tests.py,860,"Complex combinations of conjunctions, disjunctions and nullable",
django/tests/queries/tests.py,861,relations.,
django/tests/queries/tests.py,933,Querying direct fields with isnull should trim the left outer join.,
django/tests/queries/tests.py,934,It also should not create INNER JOIN.,
django/tests/queries/tests.py,969,"Querying across several tables should strip only the last outer join,",
django/tests/queries/tests.py,970,while preserving the preceding inner joins.,
django/tests/queries/tests.py,980,Querying without isnull should not convert anything to left outer join.,
django/tests/queries/tests.py,990,Querying via indirect fields should populate the left outer join,
django/tests/queries/tests.py,993,join to dumbcategory ptr_id,
django/tests/queries/tests.py,997,"Querying across several tables should strip only the last join, while",
django/tests/queries/tests.py,998,preserving the preceding left outer joins.,
django/tests/queries/tests.py,1005,Querying across m2m field should not strip the m2m table from join.,
django/tests/queries/tests.py,1023,Querying with isnull=False across m2m field should not create outer joins,
django/tests/queries/tests.py,1049,Querying with isnull=True across m2m field should not create inner joins,
django/tests/queries/tests.py,1050,and strip last outer join,
django/tests/queries/tests.py,1069,Reverse querying with isnull should not strip the join,
django/tests/queries/tests.py,1087,Querying with combined q-objects should also strip the left outer join,
django/tests/queries/tests.py,1097,Combining queries should not re-populate the left outer join,
django/tests/queries/tests.py,1157,A negated Q along with an annotated queryset failed in Django 1.4,
django/tests/queries/tests.py,1221,A slight variation on the restricting the filtering choices by the,
django/tests/queries/tests.py,1222,lookup constraints.,
django/tests/queries/tests.py,1247,Custom lookups are registered to round float values correctly on gte,
django/tests/queries/tests.py,1248,and lt IntegerField queries.,
django/tests/queries/tests.py,1312,Count should work with a partially read result set.,
django/tests/queries/tests.py,1324,This shouldn't create an infinite loop.,
django/tests/queries/tests.py,1328,An error should be raised when QuerySet.datetimes() is passed the,
django/tests/queries/tests.py,1329,wrong type of field.,
django/tests/queries/tests.py,1381,Note: when combining the query we need to have information available,
django/tests/queries/tests.py,1382,"about the join type of the trimmed ""creator__isnull"" join. If we",
django/tests/queries/tests.py,1383,"don't have that information, then the join is created as INNER JOIN",
django/tests/queries/tests.py,1384,and results will be incorrect.,
django/tests/queries/tests.py,1413,Joins having identical connections are correctly recreated in the,
django/tests/queries/tests.py,1414,"rhs query, in case the query is ORed together (#18748).",
django/tests/queries/tests.py,1424,Join aliases are reused in order. This shouldn't raise AssertionError,
django/tests/queries/tests.py,1425,because change_map contains a circular reference (#26522).,
django/tests/queries/tests.py,1436,Updates that are filtered on the model being updated are somewhat,
django/tests/queries/tests.py,1437,tricky in MySQL.,
django/tests/queries/tests.py,1441,A values() or values_list() query across joined models must use outer,
django/tests/queries/tests.py,1442,joins appropriately.,
django/tests/queries/tests.py,1443,"Note: In Oracle, we expect a null CharField to return '' instead of",
django/tests/queries/tests.py,1444,None.,
django/tests/queries/tests.py,1454,"Similarly for select_related(), joins beyond an initial nullable join",
django/tests/queries/tests.py,1455,must use outer joins so that all results are included.,
django/tests/queries/tests.py,1461,"When there are multiple paths to a table from another table, we have",
django/tests/queries/tests.py,1462,to be careful not to accidentally reuse an inappropriate join when,
django/tests/queries/tests.py,1463,using select_related(). We used to return the parent's Detail record,
django/tests/queries/tests.py,1464,here by mistake.,
django/tests/queries/tests.py,1475,Calling order_by() with no parameters removes any existing ordering on the,
django/tests/queries/tests.py,1476,model. But it should still be possible to add new ordering after that.,
django/tests/queries/tests.py,1481,"It is possible to order by reverse of foreign key, although that can lead",
django/tests/queries/tests.py,1482,to duplicate results.,
django/tests/queries/tests.py,1499,Avoid raising an EmptyResultSet if an inner query is probably,
django/tests/queries/tests.py,1500,"empty (and hence, not executed).",
django/tests/queries/tests.py,1626,"Ordering by 'rank' gives us rank2, rank1, rank3. Ordering by the",
django/tests/queries/tests.py,1627,"Meta.ordering will be rank3, rank2, rank1.",
django/tests/queries/tests.py,1640,"Cross model ordering is possible in Meta, too.",
django/tests/queries/tests.py,1650,"Ordering of extra() pieces is possible, too and you can mix extra",
django/tests/queries/tests.py,1651,fields and model fields in the ordering.,
django/tests/queries/tests.py,1668,"Despite having some extra aliases in the query, we can still omit",
django/tests/queries/tests.py,1669,them in a values() query.,
django/tests/queries/tests.py,1677,"An empty values() call includes all aliases, including those from an",
django/tests/queries/tests.py,1678,extra(),
django/tests/queries/tests.py,1691,Extra tables used to crash SQL construction on the second use.,
django/tests/queries/tests.py,1694,test passes if this doesn't raise an exception.,
django/tests/queries/tests.py,1698,Make sure that updates which only filter on sub-tables don't,
django/tests/queries/tests.py,1699,inadvertently update the wrong records (bug #9848).,
django/tests/queries/tests.py,1703,Make sure that the IDs from different tables don't happen to match.,
django/tests/queries/tests.py,1725,Test different empty excludes.,
django/tests/queries/tests.py,1744,Allow %%s to escape select clauses,
django/tests/queries/tests.py,1761,"Once upon a time, select_related() with circular relations would loop",
django/tests/queries/tests.py,1762,"infinitely if you forgot to specify ""depth"". Now we set an arbitrary",
django/tests/queries/tests.py,1763,default upper bound.,
django/tests/queries/tests.py,1770,Model subclasses could not be deleted if a nullable foreign key,
django/tests/queries/tests.py,1771,relates to a model that relates back.,
django/tests/queries/tests.py,1780,The parent object should have been deleted as well.,
django/tests/queries/tests.py,1791,Ordering by model related to nullable relations(!) should use outer,
django/tests/queries/tests.py,1792,"joins, so that all results are included.",
django/tests/queries/tests.py,1800,Ordering by model related to nullable relations should not change,
django/tests/queries/tests.py,1801,the join type of already existing joins.,
django/tests/queries/tests.py,1811,The ordering by others__single__pk will add one new join (to single),
django/tests/queries/tests.py,1812,and that join must be LEFT join. The already existing join to related,
django/tests/queries/tests.py,1813,"objects must be kept INNER. So, we have both an INNER and a LEFT join",
django/tests/queries/tests.py,1814,in the query.,
django/tests/queries/tests.py,1830,Another variation on the disjunctive filtering theme.,
django/tests/queries/tests.py,1832,"For the purposes of this regression test, it's important that there is no",
django/tests/queries/tests.py,1833,Join object related to the LeafA we create.,
django/tests/queries/tests.py,1842,Checking that applying filters after a disjunction works correctly.,
django/tests/queries/tests.py,1868,Parallel iterators work.,
django/tests/queries/tests.py,1883,Nested queries should not evaluate the inner query as part of constructing the,
django/tests/queries/tests.py,1884,"SQL (so we should see a nested query here, indicated by two ""SELECT"" calls).",
django/tests/queries/tests.py,1892,Incorrect SQL was being generated for certain types of exclude(),
django/tests/queries/tests.py,1893,"queries that crossed multi-valued relations (#8921, #9188 and some",
django/tests/queries/tests.py,1894,preemptively discovered cases).,
django/tests/queries/tests.py,1910,"This example is tricky because the parent could be NULL, so only checking",
django/tests/queries/tests.py,1911,"parents with annotations omits some results (tag t1, in this case).",
django/tests/queries/tests.py,1917,The annotation->tag link is single values and tag->children links is,
django/tests/queries/tests.py,1918,multi-valued. So we have to split the exclude filter in the middle,
django/tests/queries/tests.py,1919,and then optimize the inner query without losing results.,
django/tests/queries/tests.py,1925,"Nested queries are possible (although should be used with care, since",
django/tests/queries/tests.py,1926,they have performance problems on backends like MySQL.,
django/tests/queries/tests.py,1933,The all() method on querysets returns a copy of the queryset.,
django/tests/queries/tests.py,1968,Test representation of raw query with one or few parameters passed as list,
django/tests/queries/tests.py,1982,"Using an empty iterator as the rvalue for an ""__in""",
django/tests/queries/tests.py,1983,lookup is legal.,
django/tests/queries/tests.py,1994,Regression tests for case-insensitive comparisons,
django/tests/queries/tests.py,2019,Ok - so the exist query worked - but did it include too many columns?,
django/tests/queries/tests.py,2136,Implicit values('id').,
django/tests/queries/tests.py,2142,Explicit values('id').,
django/tests/queries/tests.py,2148,Annotated value.,
django/tests/queries/tests.py,2199,"Evaluate the Note queryset, populating the query cache",
django/tests/queries/tests.py,2201,"Use the note queryset in a query, and evaluate",
django/tests/queries/tests.py,2202,that query in a way that involves cloning.,
django/tests/queries/tests.py,2242,#14366 -- Calling .values() on an empty QuerySet and then cloning,
django/tests/queries/tests.py,2243,that should not cause an error,
django/tests/queries/tests.py,2251,#19151 -- Calling .values() or .values_list() on an empty QuerySet,
django/tests/queries/tests.py,2252,should return an empty QuerySet and not cause an error.,
django/tests/queries/tests.py,2269,testing for ticket 14930 issues,
django/tests/queries/tests.py,2276,testing for ticket 14930 issues,
django/tests/queries/tests.py,2283,"Postgres doesn't allow constants in order by, so check for that.",
django/tests/queries/tests.py,2294,testing for ticket 14930 issues,
django/tests/queries/tests.py,2302,testing for 23259 issue,
django/tests/queries/tests.py,2313,testing for 23259 issue,
django/tests/queries/tests.py,2321,testing for ticket 14930 issues,
django/tests/queries/tests.py,2328,testing for ticket 14930 issues,
django/tests/queries/tests.py,2335,see #23443,
django/tests/queries/tests.py,2424,Some more tests!,
django/tests/queries/tests.py,2435,Using an offset without a limit is also possible.,
django/tests/queries/tests.py,2496,People like to slice with '0' as the high-water mark.,
django/tests/queries/tests.py,2504,ticket #12192,
django/tests/queries/tests.py,2522,Reserved names are appropriately escaped,
django/tests/queries/tests.py,2660,"If you're not careful, it's possible to introduce infinite loops via",
django/tests/queries/tests.py,2661,default ordering on foreign keys in a cycle. We detect that.,
django/tests/queries/tests.py,2663,Force queryset evaluation with list(),
django/tests/queries/tests.py,2665,Force queryset evaluation with list(),
django/tests/queries/tests.py,2667,"Note that this doesn't cause an infinite loop, since the default",
django/tests/queries/tests.py,2668,"ordering on the Tag model is empty (and thus defaults to using ""id""",
django/tests/queries/tests.py,2669,for the related field).,
django/tests/queries/tests.py,2672,... but you can still order in a non-recursive fashion among linked,
django/tests/queries/tests.py,2673,fields (the previous test failed because the default ordering was,
django/tests/queries/tests.py,2674,recursive).,
django/tests/queries/tests.py,2680,"When grouping without specifying ordering, we add an explicit ""ORDER BY NULL""",
django/tests/queries/tests.py,2681,portion in MySQL to prevent unnecessary sorting.,
django/tests/queries/tests.py,2693,"The ""in"" lookup works with lists of 1000 items or more.",
django/tests/queries/tests.py,2694,The numbers amount is picked to force three different IN batches,
django/tests/queries/tests.py,2695,"for Oracle, yet to be less than 2100 parameter limit for MSSQL.",
django/tests/queries/tests.py,2853,Create a few Orders.,
django/tests/queries/tests.py,2858,Create some OrderItems for the first order with homogeneous,
django/tests/queries/tests.py,2859,status_id values,
django/tests/queries/tests.py,2864,Create some OrderItems for the second order with heterogeneous,
django/tests/queries/tests.py,2865,status_id values,
django/tests/queries/tests.py,2870,Create some OrderItems for the second order with heterogeneous,
django/tests/queries/tests.py,2871,status_id values,
django/tests/queries/tests.py,2974,The inner queryset wasn't executed - it should be turned,
django/tests/queries/tests.py,2975,into subquery above,
django/tests/queries/tests.py,3138,"The first Q-object is generating the match, the rest of the filters",
django/tests/queries/tests.py,3139,should not remove the match even if they do not match anything. The,
django/tests/queries/tests.py,3140,"problem here was that b__name generates a LOUTER JOIN, then",
django/tests/queries/tests.py,3141,"b__c__name generates join to c, which the ORM tried to promote but",
django/tests/queries/tests.py,3142,failed as that join isn't nullable.,
django/tests/queries/tests.py,3150,We generate one INNER JOIN to D. The join is direct and not nullable,
django/tests/queries/tests.py,3151,"so we can use INNER JOIN for it. However, we can NOT use INNER JOIN",
django/tests/queries/tests.py,3152,"for the b->c join, as a->b is nullable.",
django/tests/queries/tests.py,3223,Check the ~~Q() (or equivalently .exclude(~Q)) works like Q() for,
django/tests/queries/tests.py,3224,join promotion.,
django/tests/queries/tests.py,3241,Test OR + doubleneg. The expected result is that channel is LOUTER,
django/tests/queries/tests.py,3242,"joined, program INNER joined",
django/tests/queries/tests.py,3263,"Finally, a more complex case, one time in a way where each",
django/tests/queries/tests.py,3264,"NOT is pushed to lowest level in the boolean tree, and",
django/tests/queries/tests.py,3265,another query where this isn't done.,
django/tests/queries/tests.py,3282,We don't accidentally trim reverse joins - we can't know if there is,
django/tests/queries/tests.py,3283,"anything on the other side of the join, so trimming reverse joins",
django/tests/queries/tests.py,3284,"can't be done, ever.",
django/tests/queries/tests.py,3359,"Pre-existing join, add two ORed filters to the same join,",
django/tests/queries/tests.py,3360,all joins can be INNER JOINS.,
django/tests/queries/tests.py,3365,Reverse the order of AND and OR filters.,
django/tests/queries/tests.py,3374,"Now we have two different joins in an ORed condition, these",
django/tests/queries/tests.py,3375,must be OUTER joins. The pre-existing join should remain INNER.,
django/tests/queries/tests.py,3379,Reverse case.,
django/tests/queries/tests.py,3389,The ANDed a__f2 filter allows us to use keep using INNER JOIN,
django/tests/queries/tests.py,3390,"even inside the ORed case. If the join to a__ returns nothing,",
django/tests/queries/tests.py,3391,the ANDed filter for a__f2 can't be true.,
django/tests/queries/tests.py,3397,This one needs demotion logic: the first filter causes a to be,
django/tests/queries/tests.py,3398,"outer joined, the second filter makes it inner join again.",
django/tests/queries/tests.py,3407,"Demote needed for the ""a"" join. It is marked as outer join by",
django/tests/queries/tests.py,3408,above filter (even if it is trimmed away).,
django/tests/queries/tests.py,3420,Note that the above filters on a force the join to an,
django/tests/queries/tests.py,3421,inner join even if it is trimmed.,
django/tests/queries/tests.py,3424,"So, now the a__f1 join doesn't need promotion.",
django/tests/queries/tests.py,3426,But b__f1 does.,
django/tests/queries/tests.py,3429,Now the join to a is created as LOUTER,
django/tests/queries/tests.py,3486,"channel contains 'program1', so all Identifiers except that one",
django/tests/queries/tests.py,3487,should be returned,
django/tests/queries/tests.py,3529,Evaluating the children query (which has parents as part of it) does,
django/tests/queries/tests.py,3530,not change results for the parents query.,
django/tests/queries/tests.py,3563,"If a values() queryset is used, then the given values",
django/tests/queries/tests.py,3564,will be used instead of forcing use of the relation's field.,
django/tests/queries/tests.py,3572,The query below should match o1 as it has related order_item,
django/tests/queries/tests.py,3573,with id == status.,
django/tests/queries/tests.py,3593,Test join trimming from ticket18785,
django/tests/queries/tests.py,3624,The ORed condition below should have no effect on the query - the,
django/tests/queries/tests.py,3625,~Q(pk__in=[]) will always be True.,
django/tests/queries/tests.py,3649,Passing incorrect object type,
django/tests/queries/tests.py,3662,Passing an object of the class on which query is done.,
django/tests/queries/tests.py,3692,proxy model objects,
django/tests/queries/tests.py,3696,child objects,
django/tests/queries/tests.py,3704,parent objects,
django/tests/queries/tests.py,3707,QuerySet related object type checking shouldn't issue queries,
django/tests/queries/tests.py,3708,"(the querysets aren't evaluated here, hence zero queries) (#23266).",
django/tests/queries/tests.py,3716,Make sure the num and objecta field values match.,
django/tests/queries/tests.py,3749,Load data so that assertNumQueries doesn't complain about the get,
django/tests/queries/tests.py,3750,version's queries.,
django/tests/queries/tests.py,3779,Make sure there is a left outer join without the filter.,
django/tests/queries/tests.py,3838,Test filtering on a complicated q-object from ticket's report.,
django/tests/queries/tests.py,3839,The query structure is such that we have multiple nested subqueries.,
django/tests/queries/tests.py,3840,The original problem was that the inner queries weren't relabeled,
django/tests/queries/tests.py,3841,correctly.,
django/tests/queries/tests.py,3842,See also #24090.,
django/tests/queries/tests.py,3851,"True for a1 as field_b0 = 10000, field_c0=10000",
django/tests/queries/tests.py,3852,False for a2 as no ticket23605b found,
django/tests/queries/tests.py,3856,True for a1 (field_b1=True),
django/tests/queries/tests.py,3859,"Same filters as above commented filters, but",
django/tests/queries/tests.py,3860,"double-negated (one for Q() above, one for",
django/tests/queries/tests.py,3861,"parentheses). So, again a1 match, a2 not.",
django/tests/queries/models.py,56,Regression for #13227 -- having an attribute that,
django/tests/queries/models.py,57,is unpicklable doesn't stop you from cloning queries,
django/tests/queries/models.py,58,that use objects of that type as an argument.,
django/tests/queries/models.py,132,A complex ordering specification. Should stress the system a bit.,
django/tests/queries/models.py,157,Symmetrical m2m field with a normal field using the reverse accessor name,
django/tests/queries/models.py,158,"(""valid"").",
django/tests/queries/models.py,168,Some funky cross-linked models for testing a couple of infinite recursion,
django/tests/queries/models.py,169,cases.,
django/tests/queries/models.py,179,Some models with a cycle in the default ordering. This would be bad if we,
django/tests/queries/models.py,180,didn't catch the infinite loop.,
django/tests/queries/models.py,204,A model and custom default manager combination.,
django/tests/queries/models.py,224,An inter-related setup with multiple paths from Child to Detail.,
django/tests/queries/models.py,247,Custom primary keys interfered with ordering in the past.,
django/tests/queries/models.py,267,An inter-related setup with a model subclass that has a nullable,
django/tests/queries/models.py,268,"path to another model, and a return path from that model.",
django/tests/queries/models.py,286,Multiple foreign keys,
django/tests/queries/models.py,312,A simpler shared-foreign-key setup that can expose some problems.,
django/tests/queries/models.py,329,Multi-layer ordering,
django/tests/queries/models.py,391,Bug #12252,
django/tests/queries/models.py,401,Ticket #23721,
django/tests/queries/models.py,532,Models for disjunction join promotion low level testing.,
django/tests/queries/models.py,596,Models for #17600 regressions,
django/tests/queries/models.py,716,db_table names have capital letters to ensure they are quoted in queries.,
django/tests/queries/test_explain.py,30,This does a query and caches the result.,
django/tests/queries/test_explain.py,74,Ensure these cached properties are initialized to prevent queries for,
django/tests/queries/test_explain.py,75,the MariaDB or MySQL version during the QuerySet evaluation.,
django/tests/queries/test_explain.py,85,Inner skip to avoid module level query for MySQL version.,
django/tests/queries/test_explain.py,104,Inner skip to avoid module level query for MySQL version.,
django/tests/conditional_processing/tests.py,12,weak match to ETAG,
django/tests/conditional_processing/tests.py,81,Several etags in If-None-Match is a bit exotic but why not?,
django/tests/conditional_processing/tests.py,147,see https://tools.ietf.org/html/rfc7232#section-6,
django/tests/conditional_processing/tests.py,260,It's possible that the matching algorithm could use the wrong value even,
django/tests/conditional_processing/tests.py,261,if the ETag header is set correctly correctly (as tested by,
django/tests/conditional_processing/tests.py,262,"test_unquoted()), so check that the unquoted value is matched.",
django/tests/file_uploads/views.py,19,"If a file is posted, the dummy client should only post the file name,",
django/tests/file_uploads/views.py,20,not the full path.,
django/tests/file_uploads/views.py,48,Adding large file to the database should succeed,
django/tests/file_uploads/views.py,57,Check to see if unicode name came through properly.,
django/tests/file_uploads/views.py,60,Check to make sure the exotic characters are preserved even,
django/tests/file_uploads/views.py,61,through file save.,
django/tests/file_uploads/views.py,142,Trigger file parsing.,
django/tests/file_uploads/uploadhandler.py,14,5 MB,
django/tests/file_uploads/tests.py,97,> 512Kb,
django/tests/file_uploads/tests.py,104,This file contains Chinese symbols and an accented char in the name.,
django/tests/file_uploads/tests.py,212,The second value is normalized to an empty name by,
django/tests/file_uploads/tests.py,213,MultiPartParser.IE_sanitize(),
django/tests/file_uploads/tests.py,237,Empty filenames should be ignored,
django/tests/file_uploads/tests.py,244,This test simulates possible directory traversal attacks by a,
django/tests/file_uploads/tests.py,245,malicious uploader We have to do some monkeybusiness here to construct,
django/tests/file_uploads/tests.py,246,a malicious payload with an invalid file name (containing os.sep or,
django/tests/file_uploads/tests.py,247,os.pardir). This similar to what an attacker would need to do when,
django/tests/file_uploads/tests.py,248,trying such an attack.,
django/tests/file_uploads/tests.py,250,"Absolute path, *nix-style.",
django/tests/file_uploads/tests.py,251,"Absolute path, win-style.",
django/tests/file_uploads/tests.py,252,"Absolute path, broken-style.",
django/tests/file_uploads/tests.py,253,"Absolute path, broken in a different way.",
django/tests/file_uploads/tests.py,254,"Absolute path, broken by mixing.",
django/tests/file_uploads/tests.py,255,"Descendant path, *nix-style.",
django/tests/file_uploads/tests.py,256,"Descendant path, win-style.",
django/tests/file_uploads/tests.py,257,"Descendant path, mixed.",
django/tests/file_uploads/tests.py,258,"Relative path, *nix-style.",
django/tests/file_uploads/tests.py,259,"Relative path, win-style.",
django/tests/file_uploads/tests.py,260,"Relative path, mixed.",
django/tests/file_uploads/tests.py,282,The filenames should have been sanitized by the time it got to the view.,
django/tests/file_uploads/tests.py,292,"field name, filename, expected",
django/tests/file_uploads/tests.py,411,A small file (under the 5M quota),
django/tests/file_uploads/tests.py,415,A big file (over the quota),
django/tests/file_uploads/tests.py,419,Small file posting should work.,
django/tests/file_uploads/tests.py,422,Large files don't go through.,
django/tests/file_uploads/tests.py,468,The files were parsed.,
django/tests/file_uploads/tests.py,487,The fd closing logic doesn't trigger parsing of the stream,
django/tests/file_uploads/tests.py,501,evaluate,
django/tests/file_uploads/tests.py,504,Maybe this is a little more complicated that it needs to be; but if,
django/tests/file_uploads/tests.py,505,the django.test.client.FakePayload.read() implementation changes then,
django/tests/file_uploads/tests.py,506,this test would fail.  So we need to know exactly what kind of error,
django/tests/file_uploads/tests.py,507,it raises when there is an attempt to read more than the available bytes:,
django/tests/file_uploads/tests.py,513,install the custom handler that tries to access request.POST,
django/tests/file_uploads/tests.py,530,CustomUploadError is the error that should have been raised,
django/tests/file_uploads/tests.py,538,Synthesize the contents of a file upload with a mixed case filename,
django/tests/file_uploads/tests.py,539,so we don't have to carry such a file in the Django tests source code,
django/tests/file_uploads/tests.py,540,tree.,
django/tests/file_uploads/tests.py,559,The name of the file uploaded and the file stored in the server-side,
django/tests/file_uploads/tests.py,560,shouldn't differ.,
django/tests/file_uploads/tests.py,592,Create a file with the upload directory name,
django/tests/file_uploads/tests.py,604,We're not actually parsing here; just checking if the parser properly,
django/tests/file_uploads/tests.py,605,instantiates with empty upload handlers.,
django/tests/inline_formsets/tests.py,43,Make sure this form doesn't pass validation.,
django/tests/inline_formsets/tests.py,47,"Then make sure that it *does* pass validation and delete the object,",
django/tests/inline_formsets/tests.py,48,even though the data isn't actually valid.,
django/tests/inline_formsets/tests.py,72,Make sure this form doesn't pass validation.,
django/tests/inline_formsets/tests.py,76,"Then make sure that it *does* pass validation and delete the object,",
django/tests/inline_formsets/tests.py,77,even though the data isn't actually valid.,
django/tests/inline_formsets/tests.py,89,exclude some required field from the forms,
django/tests/inline_formsets/tests.py,145,Regression test for #9171.,
django/tests/inline_formsets/tests.py,156,Regression test for #21472,
django/tests/inline_formsets/tests.py,204,Trigger form instantiation to run the assert above.,
django/tests/max_lengths/tests.py,38,a value longer than any of the default fields could hold.,
django/tests/flatpages_tests/test_csrf.py,29,don't use the manager because we want to ensure the site exists,
django/tests/flatpages_tests/test_csrf.py,30,"with pk=1, regardless of whether or not it already exists.",
django/tests/flatpages_tests/test_views.py,14,don't use the manager because we want to ensure the site exists,
django/tests/flatpages_tests/test_views.py,15,"with pk=1, regardless of whether or not it already exists.",
django/tests/flatpages_tests/test_views.py,49,no 'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
django/tests/flatpages_tests/test_views.py,114,no 'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
django/tests/flatpages_tests/test_templatetags.py,12,don't use the manager because we want to ensure the site exists,
django/tests/flatpages_tests/test_templatetags.py,13,"with pk=1, regardless of whether or not it already exists.",
django/tests/flatpages_tests/test_middleware.py,14,don't use the manager because we want to ensure the site exists,
django/tests/flatpages_tests/test_middleware.py,15,"with pk=1, regardless of whether or not it already exists.",
django/tests/flatpages_tests/test_sitemaps.py,21,This cleanup is necessary because contrib.sites cache,
django/tests/flatpages_tests/test_sitemaps.py,22,"makes tests interfere with each other, see #11505",
django/tests/flatpages_tests/test_forms.py,15,don't use the manager because we want to ensure the site exists,
django/tests/flatpages_tests/test_forms.py,16,"with pk=1, regardless of whether or not it already exists.",
django/tests/flatpages_tests/test_forms.py,21,Site fields cache needs to be cleared after flatpages is added to,
django/tests/flatpages_tests/test_forms.py,22,INSTALLED_APPS,
django/tests/modeladmin/test_actions.py,75,`actions = None` removes actions from superclasses.,
django/tests/modeladmin/tests.py,50,form/fields/fieldsets interaction,
django/tests/modeladmin/tests.py,60,fieldsets_add and fieldsets_change should return a special data structure that,
django/tests/modeladmin/tests.py,61,"is used in the templates. They should generate the ""right thing"" whether we",
django/tests/modeladmin/tests.py,62,"have specified a custom form, the fields argument, or nothing at all.",
django/tests/modeladmin/tests.py,63,,
django/tests/modeladmin/tests.py,64,"Here's the default case. There are no custom form_add/form_change methods,",
django/tests/modeladmin/tests.py,65,"no fields argument, and no fieldsets argument.",
django/tests/modeladmin/tests.py,71,get_fieldsets() is called when figuring out form fields (#18681).,
django/tests/modeladmin/tests.py,125,Reverse OneToOneField,
django/tests/modeladmin/tests.py,127,OneToOneField and ForeignKey,
django/tests/modeladmin/tests.py,131,"If fields is specified, fieldsets_add and fieldsets_change should",
django/tests/modeladmin/tests.py,132,just stick the fields into a formsets structure and return it.,
django/tests/modeladmin/tests.py,144,"If fields or fieldsets is specified, it should exclude fields on the",
django/tests/modeladmin/tests.py,145,Form class to the fields specified. This may cause errors to be,
django/tests/modeladmin/tests.py,146,raised in the db layer if required model fields aren't in fields/,
django/tests/modeladmin/tests.py,147,"fieldsets, but that's preferable to ghost errors where a field in the",
django/tests/modeladmin/tests.py,148,Form class isn't being displayed because it's not in fields/fieldsets.,
django/tests/modeladmin/tests.py,150,Using `fields`.,
django/tests/modeladmin/tests.py,158,Using `fieldsets`.,
django/tests/modeladmin/tests.py,166,Using `exclude`.,
django/tests/modeladmin/tests.py,173,You can also pass a tuple to `exclude`.,
django/tests/modeladmin/tests.py,180,Using `fields` and `exclude`.,
django/tests/modeladmin/tests.py,194,With ModelAdmin,
django/tests/modeladmin/tests.py,207,With InlineModelAdmin,
django/tests/modeladmin/tests.py,241,`name` shouldn't appear in base_fields because it's part of,
django/tests/modeladmin/tests.py,242,readonly_fields.,
django/tests/modeladmin/tests.py,247,But it should appear in get_fields()/fieldsets() so it can be,
django/tests/modeladmin/tests.py,248,displayed as read-only.,
django/tests/modeladmin/tests.py,263,With ModelAdmin,
django/tests/modeladmin/tests.py,276,With InlineModelAdmin,
django/tests/modeladmin/tests.py,332,"If a form is specified, it should use it allowing custom validation",
django/tests/modeladmin/tests.py,333,to work properly. This won't break any of the admin widgets or media.,
django/tests/modeladmin/tests.py,459,Without the override this would be ForeignKeyRawIdWidget.,
django/tests/modeladmin/tests.py,463,"If the queryset of a ModelChoiceField in a custom form is overridden,",
django/tests/modeladmin/tests.py,464,RelatedFieldWidgetWrapper doesn't mess that up.,
django/tests/modeladmin/tests.py,530,radio_fields behavior,
django/tests/modeladmin/tests.py,533,"First, without any radio_fields specified, the widgets for ForeignKey",
django/tests/modeladmin/tests.py,534,and fields with choices specified ought to be a basic Select widget.,
django/tests/modeladmin/tests.py,535,ForeignKey widgets in the admin are wrapped with RelatedFieldWidgetWrapper so,
django/tests/modeladmin/tests.py,536,"they need to be handled properly when type checking. For Select fields, all of",
django/tests/modeladmin/tests.py,537,the choices lists have a first entry of dashes.,
django/tests/modeladmin/tests.py,562,Now specify all the fields as radio_fields.  Widgets should now be,
django/tests/modeladmin/tests.py,563,"RadioSelect, and the choices list should have a first entry of 'None' if",
django/tests/modeladmin/tests.py,564,"blank=True for the model field.  Finally, the widget should have the",
django/tests/modeladmin/tests.py,565,"'radiolist' attr, and 'inline' as well if the field is specified HORIZONTAL.",
django/tests/modeladmin/tests.py,680,Uses autocomplete_fields if not overridden.,
django/tests/modeladmin/tests.py,684,Uses overridden get_autocomplete_fields,
django/tests/modeladmin/models.py,46,This field is intentionally 2 characters long (#16080).,
django/tests/model_enums/tests.py,138,A string is not permitted as the second argument to int().,
django/tests/check_framework/test_translation.py,13,language,
django/tests/check_framework/test_translation.py,14,language,
django/tests/check_framework/test_translation.py,15,language+extlang,
django/tests/check_framework/test_translation.py,16,language+region,
django/tests/check_framework/test_translation.py,17,language+region,
django/tests/check_framework/test_translation.py,18,language+script,
django/tests/check_framework/test_translation.py,19,language+region+variant,
django/tests/check_framework/test_translation.py,20,FIXME: The following should be invalid:,
django/tests/check_framework/test_translation.py,21,language+script,
django/tests/check_framework/test_translation.py,24,invalid type: None.,
django/tests/check_framework/test_translation.py,25,invalid type: int.,
django/tests/check_framework/test_translation.py,26,invalid type: bytes.,
django/tests/check_framework/test_translation.py,27,non-latin characters.,
django/tests/check_framework/test_translation.py,28,locale format.,
django/tests/check_framework/test_translation.py,29,empty subtag.,
django/tests/check_framework/test_translation.py,30,leading separator.,
django/tests/check_framework/test_translation.py,31,trailing separator.,
django/tests/check_framework/test_translation.py,32,language tag w/ locale encoding.,
django/tests/check_framework/test_translation.py,33,locale format - language w/ region and encoding.,
django/tests/check_framework/test_translation.py,34,locale format - language w/ region and variant.,
django/tests/check_framework/test_translation.py,35,FIXME: The following should be invalid:,
django/tests/check_framework/test_translation.py,36,"'sr@latin',      # locale instead of language tag.",
django/tests/check_framework/test_translation.py,101,language + region.,
django/tests/check_framework/test_translation.py,105,language + region + variant.,
django/tests/check_framework/test_urls.py,23,The resolver is checked recursively (examining URL patterns in include()).,
django/tests/check_framework/test_urls.py,81,It can be useful to start a URL pattern with a slash when,
django/tests/check_framework/test_urls.py,82,APPEND_SLASH=False (#27238).,
django/tests/check_framework/test_urls.py,229,"The check allows for a double slash, presuming the user knows what",
django/tests/check_framework/test_urls.py,230,they are doing.,
django/tests/check_framework/tests.py,40,test register as decorator,
django/tests/check_framework/tests.py,46,test register as function,
django/tests/check_framework/tests.py,52,check results,
django/tests/check_framework/test_database.py,46,One warning for each database alias,
django/tests/check_framework/urls/no_warnings.py,5,This dollar is ok as it is escaped,
django/tests/check_framework/urls/unique_namespaces.py,15,'nested' is included twice but namespaced by nested-1 and nested-2.,
django/tests/check_framework/urls/unique_namespaces.py,18,namespaced URLs inside non-namespaced URLs.,
django/tests/managers_regress/tests.py,40,"Since Child6 inherits from Child4, the corresponding rows from f1 and",
django/tests/managers_regress/tests.py,41,f2 also appear here. This is the expected result.,
django/tests/managers_regress/tests.py,57,Accessing the manager on an abstract model should,
django/tests/managers_regress/tests.py,58,raise an attribute error with an appropriate message.,
django/tests/managers_regress/tests.py,59,"This error message isn't ideal, but if the model is abstract and",
django/tests/managers_regress/tests.py,60,a lot of the class instantiation logic isn't invoked; if the,
django/tests/managers_regress/tests.py,61,"manager is implied, then we don't get a hook to install the",
django/tests/managers_regress/tests.py,62,error-raising manager.,
django/tests/managers_regress/tests.py,68,Accessing the manager on an abstract model with a custom,
django/tests/managers_regress/tests.py,69,manager should raise an attribute error with an appropriate,
django/tests/managers_regress/tests.py,70,message.,
django/tests/managers_regress/tests.py,76,Accessing the manager on an abstract model with an explicit,
django/tests/managers_regress/tests.py,77,manager should raise an attribute error with an appropriate,
django/tests/managers_regress/tests.py,78,message.,
django/tests/managers_regress/tests.py,90,Accessing the manager on a swappable model should,
django/tests/managers_regress/tests.py,91,raise an attribute error with a helpful message,
django/tests/managers_regress/tests.py,108,Accessing the manager on a swappable model with an,
django/tests/managers_regress/tests.py,109,explicit manager should raise an attribute error with a,
django/tests/managers_regress/tests.py,110,helpful message,
django/tests/managers_regress/tests.py,127,Accessing the manager on a swappable model with an,
django/tests/managers_regress/tests.py,128,explicit manager should raise an attribute error with a,
django/tests/managers_regress/tests.py,129,helpful message,
django/tests/managers_regress/tests.py,154,Make sure related managers core filters don't include an,
django/tests/managers_regress/tests.py,155,explicit `__exact` lookup that could be interpreted as a,
django/tests/managers_regress/tests.py,156,reference to a foreign `exact` field. refs #23940.,
django/tests/managers_regress/models.py,33,Custom managers,
django/tests/managers_regress/models.py,45,Custom manager,
django/tests/managers_regress/models.py,49,No custom manager on this class to make sure the default case doesn't break.,
django/tests/managers_regress/models.py,66,"Managers from base classes are inherited and, if no manager is specified",
django/tests/managers_regress/models.py,67,"*and* the parent has a manager specified, the first one (in the MRO) will",
django/tests/managers_regress/models.py,68,become the default.,
django/tests/managers_regress/models.py,93,"Should be the default manager, although the parent managers are",
django/tests/managers_regress/models.py,94,inherited.,
django/tests/managers_regress/models.py,119,RelatedManagers,
django/tests/template_tests/test_origin.py,16,Use assertIs() to test __eq__/__ne__.,
django/tests/template_tests/test_origin.py,24,Use assertIs() to test __eq__/__ne__.,
django/tests/template_tests/urls.py,6,Test urls for testing reverse lookups,
django/tests/template_tests/urls.py,16,Unicode strings are permitted everywhere.,
django/tests/template_tests/urls.py,20,Test urls for namespaces and current_app,
django/tests/template_tests/broken_tag.py,1,NOQA,
django/tests/template_tests/views.py,1,Fake views for testing url reverse lookup,
django/tests/template_tests/test_smartif.py,11,We only test things here that are difficult to test elsewhere,
django/tests/template_tests/test_smartif.py,12,Many other tests are found in the main tests for builtin template tags,
django/tests/template_tests/test_smartif.py,13,Test parsing via the printed parse tree,
django/tests/template_tests/test_smartif.py,40,"(False and False) or True == True   <- we want this one, like Python",
django/tests/template_tests/test_smartif.py,41,False and (False or True) == False,
django/tests/template_tests/test_smartif.py,44,"True or (False and False) == True   <- we want this one, like Python",
django/tests/template_tests/test_smartif.py,45,(True or False) and False == False,
django/tests/template_tests/test_smartif.py,48,(1 or 1) == 2  -> False,
django/tests/template_tests/test_smartif.py,49,1 or (1 == 2)  -> True   <- we want this one,
django/tests/template_tests/test_context.py,118,push() limits access to the topmost dict,
django/tests/template_tests/test_context.py,167,update only a,
django/tests/template_tests/test_context.py,171,update both to check regression,
django/tests/template_tests/test_context.py,176,make contexts equals again,
django/tests/template_tests/test_context.py,240,The stack contains 4 items:,
django/tests/template_tests/test_context.py,241,"[builtins, supplied context, context processor, empty dict]",
django/tests/template_tests/test_context.py,245,Create an engine without any context processors.,
django/tests/template_tests/test_context.py,248,test comparing RequestContext to prevent problems if somebody,
django/tests/template_tests/test_context.py,249,adds __eq__ in the future,
django/tests/template_tests/test_loaders.py,36,Run a second time from cache,
django/tests/template_tests/test_loaders.py,198,Windows raises PermissionError when trying to open a directory.,
django/tests/template_tests/utils.py,25,"when testing deprecation warnings, it's useful to run just one test since",
django/tests/template_tests/utils.py,26,the message won't be displayed multiple times,
django/tests/template_tests/utils.py,32,numerous tests make use of an inclusion tag,
django/tests/template_tests/utils.py,33,add this in here for simplicity,
django/tests/template_tests/utils.py,43,Make Engine.get_default() raise an exception to ensure that tests,
django/tests/template_tests/utils.py,44,are properly isolated from Django's global settings.,
django/tests/template_tests/utils.py,48,Set up custom template tag libraries if specified,
django/tests/template_tests/utils.py,81,Helper objects,
django/tests/template_tests/utils.py,172,These two classes are used to test auto-escaping of string output.,
django/tests/template_tests/test_parser.py,41,Filtered variables should reject access of attributes beginning with,
django/tests/template_tests/test_parser.py,42,underscores.,
django/tests/template_tests/test_parser.py,53,Translated strings are handled correctly.,
django/tests/template_tests/test_parser.py,58,Escaped quotes work correctly as well.,
django/tests/template_tests/test_parser.py,66,Variables should reject access of attributes beginning with,
django/tests/template_tests/test_parser.py,67,underscores.,
django/tests/template_tests/test_parser.py,72,Variables should raise on non string type,
django/tests/template_tests/test_parser.py,109,Correct number of arguments,
django/tests/template_tests/test_parser.py,112,One optional,
django/tests/template_tests/test_parser.py,115,Not supplying all,
django/tests/template_tests/test_extends.py,92,Render another path that uses the same templates from the cache,
django/tests/template_tests/test_extends.py,97,Template objects should not be duplicated.,
django/tests/template_tests/test_custom.py,141,Check we don't double escape,
django/tests/template_tests/test_custom.py,147,Check we don't double escape,
django/tests/template_tests/test_custom.py,153,"The decorators preserve the decorated function's docstring, name,",
django/tests/template_tests/test_custom.py,154,and attributes.,
django/tests/template_tests/test_custom.py,164,The 'context' parameter must be present when takes_context is True,
django/tests/template_tests/test_custom.py,251,The 'context' parameter must be present when takes_context is True,
django/tests/template_tests/test_custom.py,294,"The decorators preserve the decorated function's docstring, name,",
django/tests/template_tests/test_custom.py,295,and attributes.,
django/tests/template_tests/alternate_urls.py,6,View returning a template response,
django/tests/template_tests/alternate_urls.py,9,A view that can be hard to find...,
django/tests/template_tests/test_response.py,24,A test middleware that installs a temporary URLConf,
django/tests/template_tests/test_response.py,53,explicit baking,
django/tests/template_tests/test_response.py,60,response is not re-rendered without the render call,
django/tests/template_tests/test_response.py,64,rebaking doesn't change the rendered content,
django/tests/template_tests/test_response.py,70,but rendered content can be overridden by manually,
django/tests/template_tests/test_response.py,71,setting content,
django/tests/template_tests/test_response.py,76,unrendered response raises an exception on iteration,
django/tests/template_tests/test_response.py,89,iteration works for rendered responses,
django/tests/template_tests/test_response.py,94,unrendered response raises an exception when content is accessed,
django/tests/template_tests/test_response.py,102,rendered response content can be accessed,
django/tests/template_tests/test_response.py,107,content can be overridden,
django/tests/template_tests/test_response.py,157,"When the content is rendered, all the callbacks are invoked, too.",
django/tests/template_tests/test_response.py,163,Create a template response. The context is,
django/tests/template_tests/test_response.py,164,"known to be unpicklable (e.g., a function).",
django/tests/template_tests/test_response.py,172,"But if we render the response, we can pickle it.",
django/tests/template_tests/test_response.py,181,...and the unpickled response doesn't have the,
django/tests/template_tests/test_response.py,182,"template-related attributes, so it can't be re-rendered",
django/tests/template_tests/test_response.py,187,...and requesting any of those attributes raises an exception,
django/tests/template_tests/test_response.py,245,context processors should be overridden by passed-in context,
django/tests/template_tests/test_response.py,272,Create a template response. The context is,
django/tests/template_tests/test_response.py,273,"known to be unpicklable (e.g., a function).",
django/tests/template_tests/test_response.py,284,"But if we render the response, we can pickle it.",
django/tests/template_tests/test_response.py,293,...and the unpickled response doesn't have the,
django/tests/template_tests/test_response.py,294,"template-related attributes, so it can't be re-rendered",
django/tests/template_tests/test_response.py,304,...and requesting any of those attributes raises an exception,
django/tests/template_tests/test_response.py,356,Let the cache expire and test again,
django/tests/template_tests/test_callables.py,27,"We can't access ``my_doodad.value`` in the template, because",
django/tests/template_tests/test_callables.py,28,"``my_doodad.__call__`` will be invoked first, yielding a dictionary",
django/tests/template_tests/test_callables.py,29,without a key ``value``.,
django/tests/template_tests/test_callables.py,33,We can confirm that the doodad has been called,
django/tests/template_tests/test_callables.py,36,But we can access keys on the dict that's returned,
django/tests/template_tests/test_callables.py,37,"by ``__call__``, instead.",
django/tests/template_tests/test_callables.py,58,"Since ``my_doodad.alters_data`` is True, the template system will not",
django/tests/template_tests/test_callables.py,59,try to call our doodad but will use string_if_invalid,
django/tests/template_tests/test_callables.py,65,Double-check that the object was really never called during the,
django/tests/template_tests/test_callables.py,66,template rendering.,
django/tests/template_tests/test_callables.py,85,"Since ``my_doodad.do_not_call_in_templates`` is True, the template",
django/tests/template_tests/test_callables.py,86,system will not try to call our doodad.  We can access its attributes,
django/tests/template_tests/test_callables.py,87,"as normal, and we don't have access to the dict that it returns when",
django/tests/template_tests/test_callables.py,88,called.,
django/tests/template_tests/test_callables.py,94,Double-check that the object was really never called during the,
django/tests/template_tests/test_callables.py,95,template rendering.,
django/tests/template_tests/test_callables.py,99,"If we combine ``alters_data`` and ``do_not_call_in_templates``, the",
django/tests/template_tests/test_callables.py,100,``alters_data`` attribute will not make any difference in the,
django/tests/template_tests/test_callables.py,101,template system's behavior.,
django/tests/template_tests/test_callables.py,123,Double-check that the object was really never called during the,
django/tests/template_tests/test_callables.py,124,template rendering.,
django/tests/template_tests/filter_tests/test_urlize.py,45,"This will lead to a nonsense result, but at least it won't be",
django/tests/template_tests/filter_tests/test_urlize.py,46,exploitable for XSS purposes when auto-escaping is on.,
django/tests/template_tests/filter_tests/test_urlize.py,57,mailto: testing for urlize,
django/tests/template_tests/filter_tests/test_urlize.py,108,Quotes (single and double) and angle brackets shouldn't be considered,
django/tests/template_tests/filter_tests/test_urlize.py,109,part of URLs.,
django/tests/template_tests/filter_tests/test_length_is.py,39,Boolean return value from length_is should not be coerced to a string,
django/tests/template_tests/filter_tests/test_length_is.py,50,Invalid uses that should fail silently.,
django/tests/template_tests/filter_tests/test_timeuntil.py,13,Default compare with datetime.now(),
django/tests/template_tests/filter_tests/test_timeuntil.py,31,Compare to a given parameter,
django/tests/template_tests/filter_tests/test_timeuntil.py,48,Regression for #7443,
django/tests/template_tests/filter_tests/test_timeuntil.py,71,Differing timezones are calculated correctly.,
django/tests/template_tests/filter_tests/test_timeuntil.py,89,Regression for #9065 (two date objects).,
django/tests/template_tests/filter_tests/test_timesince.py,16,Default compare with datetime.now(),
django/tests/template_tests/filter_tests/test_timesince.py,38,Compare to a given parameter,
django/tests/template_tests/filter_tests/test_timesince.py,55,Timezone is respected,
django/tests/template_tests/filter_tests/test_timesince.py,61,Tests for #7443,
django/tests/template_tests/filter_tests/test_timesince.py,84,Differing timezones are calculated correctly.,
django/tests/template_tests/filter_tests/test_timesince.py,117,Tests for #9065 (two date objects).,
django/tests/template_tests/filter_tests/test_chaining.py,25,Using a filter that forces a string back to unsafe:,
django/tests/template_tests/filter_tests/test_chaining.py,38,Using a filter that forces safeness does not lead to double-escaping,
django/tests/template_tests/filter_tests/test_chaining.py,49,"Force to safe, then back (also showing why using force_escape too",
django/tests/template_tests/filter_tests/test_chaining.py,50,early in a chain can lead to unexpected results).,
django/tests/template_tests/filter_tests/test_cut.py,30,"Passing ';' to cut can break existing HTML entities, so those strings",
django/tests/template_tests/filter_tests/test_cut.py,31,are auto-escaped.,
django/tests/template_tests/filter_tests/test_join.py,30,Joining with unsafe joiners doesn't result in unsafe strings.,
django/tests/template_tests/filter_tests/test_lower.py,27,uppercase E umlaut,
django/tests/template_tests/filter_tests/test_force_escape.py,34,"Because the result of force_escape is ""safe"", an additional",
django/tests/template_tests/filter_tests/test_force_escape.py,35,escape filter has no effect.,
django/tests/template_tests/filter_tests/test_date.py,42,ISO date formats,
django/tests/template_tests/filter_tests/test_date.py,53,Timezone name,
django/tests/template_tests/filter_tests/test_date.py,66,#19370: Make sure |date doesn't blow up on a midnight time object,
django/tests/template_tests/filter_tests/test_length.py,35,Invalid uses that should fail silently.,
django/tests/template_tests/filter_tests/test_upper.py,31,lowercase e umlaut,
django/tests/template_tests/syntax_tests/test_named_endblock.py,15,Unbalanced blocks,
django/tests/template_tests/syntax_tests/test_named_endblock.py,39,Mixed named and unnamed endblocks,
django/tests/template_tests/syntax_tests/test_if_changed.py,175,Using generator to mimic concurrency.,
django/tests/template_tests/syntax_tests/test_if_changed.py,176,"The generator is not passed to the 'for' loop, because it does a list(values)",
django/tests/template_tests/syntax_tests/test_if_changed.py,177,"instead, call gen.next() in the template to control the generator.",
django/tests/template_tests/syntax_tests/test_if_changed.py,181,Simulate that another thread is now rendering.,
django/tests/template_tests/syntax_tests/test_if_changed.py,182,When the IfChangeNode stores state at 'self' it stays at '3' and skip the last yielded value below.,
django/tests/template_tests/syntax_tests/test_url.py,12,Successes,
django/tests/template_tests/syntax_tests/test_url.py,122,Failures,
django/tests/template_tests/syntax_tests/test_url.py,213,{% url ... as var %},
django/tests/template_tests/syntax_tests/test_include.py,118,Include syntax errors,
django/tests/template_tests/syntax_tests/test_include.py,229,Repeat to ensure it still works when loading from the cache,
django/tests/template_tests/syntax_tests/test_include.py,267,{% include tmpl %},
django/tests/template_tests/syntax_tests/test_extends.py,318,Inherit from a template with block wrapped in an {% if %} tag,
django/tests/template_tests/syntax_tests/test_extends.py,319,"(in parent), still gets overridden",
django/tests/template_tests/syntax_tests/test_extends.py,382,The super block will still be found.,
django/tests/template_tests/syntax_tests/test_now.py,22,Check parsing of locale strings,
django/tests/template_tests/syntax_tests/test_autoescape.py,25,Autoescape disabling and enabling nest in a predictable way.,
django/tests/template_tests/syntax_tests/test_autoescape.py,39,"Strings (ASCII or unicode) already marked as ""safe"" are not",
django/tests/template_tests/syntax_tests/test_autoescape.py,40,auto-escaped,
django/tests/template_tests/syntax_tests/test_autoescape.py,62,Objects which return safe strings as their __str__ method,
django/tests/template_tests/syntax_tests/test_autoescape.py,63,won't get double-escaped.,
django/tests/template_tests/syntax_tests/test_autoescape.py,92,Arguments to filters are 'safe' and manipulate their input unescaped.,
django/tests/template_tests/syntax_tests/test_width_ratio.py,51,"Raise exception if we don't have 3 args, last one an integer",
django/tests/template_tests/syntax_tests/test_width_ratio.py,75,#18739: widthratio should handle None args consistently with,
django/tests/template_tests/syntax_tests/test_width_ratio.py,76,non-numerics,
django/tests/template_tests/syntax_tests/test_width_ratio.py,115,Widthratio with variable assignment,
django/tests/template_tests/syntax_tests/test_if_equal.py,60,SMART SPLITTING,
django/tests/template_tests/syntax_tests/test_if_equal.py,111,NUMERIC RESOLUTION,
django/tests/template_tests/syntax_tests/test_if_equal.py,172,FILTER EXPRESSIONS AS ARGUMENTS,
django/tests/template_tests/syntax_tests/test_if.py,75,Filters,
django/tests/template_tests/syntax_tests/test_if.py,86,Equality,
django/tests/template_tests/syntax_tests/test_if.py,112,Inequality,
django/tests/template_tests/syntax_tests/test_if.py,138,Comparison,
django/tests/template_tests/syntax_tests/test_if.py,179,Contains,
django/tests/template_tests/syntax_tests/test_if.py,200,AND,
django/tests/template_tests/syntax_tests/test_if.py,241,OR,
django/tests/template_tests/syntax_tests/test_if.py,290,NOT,
django/tests/template_tests/syntax_tests/test_if.py,451,Various syntax errors,
django/tests/template_tests/syntax_tests/test_if.py,558,A single equals sign is a syntax error.,
django/tests/template_tests/syntax_tests/test_if.py,584,"For this to act as a regression test, it's important not to use",
django/tests/template_tests/syntax_tests/test_if.py,585,foo=True because True is (not None),
django/tests/template_tests/syntax_tests/test_load.py,23,"{% load %} tag, importing individual tags",
django/tests/template_tests/syntax_tests/test_load.py,46,{% load %} tag errors,
django/tests/template_tests/syntax_tests/test_cache.py,64,"Raise exception if we don't have at least 2 args, first one integer.",
django/tests/template_tests/syntax_tests/test_basic.py,113,Raise TemplateSyntaxError when trying to access a variable,
django/tests/template_tests/syntax_tests/test_basic.py,114,containing an illegal character.,
django/tests/template_tests/syntax_tests/test_basic.py,183,"Don't get confused when parsing something that is almost, but not",
django/tests/template_tests/syntax_tests/test_basic.py,184,"quite, a template tag.",
django/tests/template_tests/syntax_tests/test_basic.py,212,"Literal strings are permitted inside variables, mostly for i18n",
django/tests/template_tests/syntax_tests/test_basic.py,213,purposes.,
django/tests/template_tests/syntax_tests/test_basic.py,229,#12554 -- Make sure a silent_variable_failure Exception is,
django/tests/template_tests/syntax_tests/test_basic.py,230,suppressed on dictionary and attribute lookup.,
django/tests/template_tests/syntax_tests/test_basic.py,247,Something that starts like a number but has an extra lookup works,
django/tests/template_tests/syntax_tests/test_basic.py,248,as a lookup.,
django/tests/template_tests/syntax_tests/test_basic.py,289,Numbers are numbers even if their digits are in the context.,
django/tests/template_tests/syntax_tests/test_regroup.py,83,Test syntax errors,
django/tests/template_tests/syntax_tests/i18n/test_get_language_info.py,14,retrieving language information,
django/tests/template_tests/syntax_tests/i18n/test_get_language_info.py,29,Test whitespace in filter arguments,
django/tests/template_tests/syntax_tests/i18n/test_underscore_syntax.py,19,Literal marked up with _() in a filter expression,
django/tests/template_tests/syntax_tests/i18n/test_underscore_syntax.py,39,Literal marked up with _(),
django/tests/template_tests/syntax_tests/i18n/test_underscore_syntax.py,59,"Literal marked up with _(), loading the i18n template tag library",
django/tests/template_tests/syntax_tests/i18n/test_blocktranslate.py,193,blocktranslate handling of variables which are not in the context.,
django/tests/template_tests/syntax_tests/i18n/test_blocktranslate.py,194,this should work as if blocktranslate was not there (#19915),
django/tests/template_tests/syntax_tests/i18n/test_blocktranslate.py,228,blocktranslate tag with asvar,
django/tests/template_tests/syntax_tests/i18n/test_blocktranslate.py,332,Nonexistent context,
django/tests/template_tests/syntax_tests/i18n/test_blocktranslate.py,340,Existing context...  using a literal,
django/tests/template_tests/syntax_tests/i18n/test_blocktranslate.py,348,Using a variable,
django/tests/template_tests/syntax_tests/i18n/test_blocktranslate.py,362,Using a filter,
django/tests/template_tests/syntax_tests/i18n/test_blocktranslate.py,374,Using 'count',
django/tests/template_tests/syntax_tests/i18n/test_blocktranslate.py,400,Using 'with',
django/tests/template_tests/syntax_tests/i18n/test_blocktranslate.py,414,Using trimmed,
django/tests/template_tests/syntax_tests/i18n/test_blocktranslate.py,434,Misuses,
django/tests/template_tests/syntax_tests/i18n/test_blocktranslate.py,570,Strings won't get translated as they don't match after escaping %,
django/tests/template_tests/syntax_tests/i18n/test_translate.py,100,trans tag with as var,
django/tests/template_tests/syntax_tests/i18n/test_translate.py,179,Nonexistent context...,
django/tests/template_tests/syntax_tests/i18n/test_translate.py,184,Existing context... using a literal,
django/tests/template_tests/syntax_tests/i18n/test_translate.py,192,Using a variable,
django/tests/template_tests/syntax_tests/i18n/test_translate.py,200,Using a filter,
django/tests/template_tests/syntax_tests/i18n/test_translate.py,208,Using 'as',
django/tests/template_tests/templatetags/inclusion.py,225,Sort the dictionary by key to guarantee the order for testing.,
django/tests/template_tests/templatetags/custom.py,133,Sort the dictionary by key to guarantee the order for testing.,
django/tests/model_inheritance/tests.py,17,The Student and Worker models both have 'name' and 'age' fields on,
django/tests/model_inheritance/tests.py,18,"them and inherit the __str__() method, just as with normal Python",
django/tests/model_inheritance/tests.py,19,subclassing. This is useful if you want to factor out common,
django/tests/model_inheritance/tests.py,20,"information for programming purposes, but still completely",
django/tests/model_inheritance/tests.py,21,independent separate models at the database level.,
django/tests/model_inheritance/tests.py,30,The children inherit the Meta class of their parents (if they don't,
django/tests/model_inheritance/tests.py,31,specify their own).,
django/tests/model_inheritance/tests.py,39,"Since Student does not subclass CommonInfo's Meta, it has the effect",
django/tests/model_inheritance/tests.py,40,of completely overriding it. So ordering by name doesn't take place,
django/tests/model_inheritance/tests.py,41,for Students.,
django/tests/model_inheritance/tests.py,44,"However, the CommonInfo class cannot be used as a normal model (it",
django/tests/model_inheritance/tests.py,45,doesn't exist as a model).,
django/tests/model_inheritance/tests.py,50,"Even though p.supplier for a Place 'p' (a parent of a Supplier), a",
django/tests/model_inheritance/tests.py,51,"Restaurant object cannot access that reverse relation, since it's not",
django/tests/model_inheritance/tests.py,52,part of the Place-Supplier Hierarchy.,
django/tests/model_inheritance/tests.py,63,The Post model has distinct accessors for the Comment and Link models.,
django/tests/model_inheritance/tests.py,71,The Post model doesn't have an attribute called,
django/tests/model_inheritance/tests.py,72,'attached_%(class)s_set'.,
django/tests/model_inheritance/tests.py,80,The Post model doesn't have a related query accessor based on,
django/tests/model_inheritance/tests.py,81,related_name (attached_comment_set).,
django/tests/model_inheritance/tests.py,87,Make sure Restaurant and ItalianRestaurant have the right fields in,
django/tests/model_inheritance/tests.py,88,the right order.,
django/tests/model_inheritance/tests.py,107,Low-level test for related_val,
django/tests/model_inheritance/tests.py,109,Higher level test for correct query values (title foof not,
django/tests/model_inheritance/tests.py,110,accidentally found).,
django/tests/model_inheritance/tests.py,122,Capture the expected query in a database agnostic way,
django/tests/model_inheritance/tests.py,126,Capture the queries executed when a subclassed model instance is saved.,
django/tests/model_inheritance/tests.py,153,Equality doesn't transfer in multitable inheritance.,
django/tests/model_inheritance/tests.py,262,Parent fields can be used directly in filters on the child model.,
django/tests/model_inheritance/tests.py,277,Filters against the parent model return objects of the parent's type.,
django/tests/model_inheritance/tests.py,282,Since the parent and child are linked by an automatically created,
django/tests/model_inheritance/tests.py,283,"OneToOneField, you can get from the parent to the child by using the",
django/tests/model_inheritance/tests.py,284,child's name.,
django/tests/model_inheritance/tests.py,299,This won't work because the Demon Dogs restaurant is not an Italian,
django/tests/model_inheritance/tests.py,300,restaurant.,
django/tests/model_inheritance/tests.py,305,An ItalianRestaurant which does not exist is also a Place which does,
django/tests/model_inheritance/tests.py,306,not exist.,
django/tests/model_inheritance/tests.py,311,MultipleObjectsReturned is also inherited.,
django/tests/model_inheritance/tests.py,316,Related objects work just as they normally do.,
django/tests/model_inheritance/tests.py,322,This won't work because the Place we select is not a Restaurant (it's,
django/tests/model_inheritance/tests.py,323,a Supplier).,
django/tests/model_inheritance/tests.py,363,The update() command can update fields in parent and child classes at,
django/tests/model_inheritance/tests.py,364,once (although it executed multiple SQL queries to do so).,
django/tests/model_inheritance/tests.py,377,The values() command also works on fields from parent models.,
django/tests/model_inheritance/tests.py,385,select_related works with fields from the parent object as if they,
django/tests/model_inheritance/tests.py,386,were a normal part of the model.,
django/tests/model_inheritance/tests.py,402,The field was actually deferred,
django/tests/model_inheritance/tests.py,407,Model fields where assigned correct values,
django/tests/model_inheritance/tests.py,437,Refs #12567,
django/tests/model_inheritance/tests.py,457,Refs #12567,
django/tests/model_inheritance/models.py,16,,
django/tests/model_inheritance/models.py,17,Abstract base classes,
django/tests/model_inheritance/models.py,18,,
django/tests/model_inheritance/models.py,44,,
django/tests/model_inheritance/models.py,45,Abstract base classes with related models,
django/tests/model_inheritance/models.py,46,,
django/tests/model_inheritance/models.py,76,,
django/tests/model_inheritance/models.py,77,Multi-table inheritance,
django/tests/model_inheritance/models.py,78,,
django/tests/model_inheritance/models.py,130,An explicit link to the parent (we can control the attribute name).,
django/tests/model_inheritance/models.py,138,,
django/tests/model_inheritance/models.py,139,Abstract base classes with related models where the sub-class has the,
django/tests/model_inheritance/models.py,140,same name in a different app and inherits from the same abstract base,
django/tests/model_inheritance/models.py,141,class.,
django/tests/model_inheritance/models.py,142,NOTE: The actual API tests for the following classes are in,
django/tests/model_inheritance/models.py,143,model_inheritance_same_model_name/models.py - They are defined,
django/tests/model_inheritance/models.py,144,here in order to have the name conflict between apps,
django/tests/model_inheritance/models.py,145,,
django/tests/model_inheritance/models.py,184,Ordering used by test_inherited_ordering_pk_desc.,
django/tests/dispatch/tests.py,12,Collecting weakreferences can take two collections on PyPy.,
django/tests/dispatch/tests.py,42,Note that dead weakref cleanup happens as side effect of using,
django/tests/dispatch/tests.py,43,"the signal's receivers through the signals API. So, first do a",
django/tests/dispatch/tests.py,44,call to an API method to force cleanup.,
django/tests/dispatch/tests.py,114,Disconnect after reference check since it flushes the tested cache.,
django/tests/or_lookups/tests.py,65,"You can shorten this syntax with code like the following,  which is",
django/tests/or_lookups/tests.py,66,especially useful if building the query in stages:,
django/tests/or_lookups/tests.py,132,Q objects can be negated,
django/tests/or_lookups/tests.py,147,This allows for more complex queries than filter() and exclude(),
django/tests/or_lookups/tests.py,148,alone would allow,
django/tests/or_lookups/tests.py,157,The 'complex_filter' method supports framework features such as,
django/tests/or_lookups/tests.py,158,'limit_choices_to' which normally take a single dictionary of lookup,
django/tests/or_lookups/tests.py,159,arguments but need to support arbitrary queries via Q objects too.,
django/tests/or_lookups/tests.py,176,"Passing ""in"" an empty list returns no results ...",
django/tests/or_lookups/tests.py,181,... but can return results if we OR it with another query.,
django/tests/or_lookups/tests.py,191,Q arg objects are ANDed,
django/tests/or_lookups/tests.py,198,Q arg AND order is irrelevant,
django/tests/or_lookups/tests.py,220,Try some arg queries with operations other than filter.,
django/tests/apps/tests.py,14,Small list with a variety of cases for tests that iterate on installed apps.,
django/tests/apps/tests.py,15,Intentionally not in alphabetical order to check if the order is preserved.,
django/tests/apps/tests.py,47,The master app registry is always ready when the tests run.,
django/tests/apps/tests.py,49,Non-master app registries are populated in __init__.,
django/tests/apps/tests.py,51,The condition is set when apps are ready,
django/tests/apps/tests.py,152,"App label is case-sensitive, Model name is case-insensitive.",
django/tests/apps/tests.py,157,A single argument is accepted.,
django/tests/apps/tests.py,204,The cache must be cleared to trigger the exception.,
django/tests/apps/tests.py,216,Construct a new model in a new app registry,
django/tests/apps/tests.py,227,Make sure it appeared in the right place!,
django/tests/apps/tests.py,248,When __name__ and __module__ match we assume the module,
django/tests/apps/tests.py,249,was reloaded and issue a warning. This use-case is,
django/tests/apps/tests.py,250,useful for REPL. Refs #23621.,
django/tests/apps/tests.py,262,If it doesn't appear to be a reloaded module then we expect,
django/tests/apps/tests.py,263,a RuntimeError.,
django/tests/apps/tests.py,296,"Test models appearing twice, and models appearing consecutively",
django/tests/apps/tests.py,300,"LazyModelA shouldn't be waited on since it's already registered,",
django/tests/apps/tests.py,301,and LazyModelC shouldn't be waited on until LazyModelB exists.,
django/tests/apps/tests.py,304,Multiple operations can wait on the same model,
django/tests/apps/tests.py,312,Now we are just waiting on LazyModelC.,
django/tests/apps/tests.py,318,Everything should be loaded - make sure the callback was executed properly.,
django/tests/apps/tests.py,400,We need nsapp to be top-level so our multiple-paths tests can add another,
django/tests/apps/tests.py,401,location for it (if its inside a normal package with an __init__.py that,
django/tests/apps/tests.py,402,isn't possible). In order to avoid cluttering the already-full tests/ dir,
django/tests/apps/tests.py,403,"(which is on sys.path), we add these new entries to sys.path temporarily.",
django/tests/apps/tests.py,424,Temporarily add two directories to sys.path that both contain,
django/tests/apps/tests.py,425,"components of the ""nsapp"" package.",
django/tests/apps/tests.py,435,Temporarily add two directories to sys.path that both contain,
django/tests/apps/tests.py,436,"components of the ""nsapp"" package.",
django/tests/apps/models.py,4,"We're testing app registry presence on load, so this is handy.",
django/tests/datetimes/tests.py,173,Use iterator() with datetimes() to return a generator that lazily,
django/tests/datetimes/tests.py,174,"requests each result one at a time, to save memory.",
django/tests/select_related_onetoone/tests.py,97,Check for ticket #13839,
django/tests/select_related_onetoone/models.py,66,"Avoid having two ""id"" fields in the Child1 subclass",
django/tests/model_meta/tests.py,38,many_to_many can be None,
django/tests/model_meta/tests.py,46,Running unit test twice to ensure both non-cached and cached result,
django/tests/model_meta/tests.py,47,are immutable.,
django/tests/model_meta/tests.py,199,"If apps registry is not ready, get_field() searches over only",
django/tests/model_meta/tests.py,200,forward fields.,
django/tests/model_meta/tests.py,203,"'data_abstract' is a forward field, and therefore will be found",
django/tests/model_meta/tests.py,210,"'data_abstract' is a reverse field, and will raise an exception",
django/tests/model_meta/tests.py,224,The apps.clear_cache is setUp() should have deleted all trees.,
django/tests/model_meta/tests.py,225,Exclude abstract models that are not included in the Apps registry,
django/tests/model_meta/tests.py,226,and have no cache.,
django/tests/model_meta/tests.py,232,"On first access, relation tree should have populated cache.",
django/tests/model_meta/tests.py,235,"AbstractPerson does not have any relations, so relation_tree",
django/tests/model_meta/tests.py,236,should just return an EMPTY_RELATION_TREE.,
django/tests/model_meta/tests.py,239,All the other models should already have their relation tree,
django/tests/model_meta/tests.py,240,in the internal __dict__ .,
django/tests/model_meta/tests.py,246,Testing non hidden related objects,
django/tests/model_meta/tests.py,256,Testing hidden related objects,
django/tests/model_meta/tests.py,281,Instance only descriptors don't appear in _property_names.,
django/tests/model_meta/models.py,20,DATA fields,
django/tests/model_meta/models.py,24,M2M fields,
django/tests/model_meta/models.py,29,VIRTUAL fields,
django/tests/model_meta/models.py,38,GFK fields,
django/tests/model_meta/models.py,43,GR fields,
django/tests/model_meta/models.py,57,DATA fields,
django/tests/model_meta/models.py,61,M2M fields,
django/tests/model_meta/models.py,66,VIRTUAL fields,
django/tests/model_meta/models.py,75,GFK fields,
django/tests/model_meta/models.py,80,GR fields,
django/tests/model_meta/models.py,85,DATA fields,
django/tests/model_meta/models.py,89,M2M Fields,
django/tests/model_meta/models.py,94,VIRTUAL fields,
django/tests/model_meta/models.py,103,GFK fields,
django/tests/model_meta/models.py,108,GR fields,
django/tests/model_meta/models.py,123,ForeignKey to BasePerson,
django/tests/model_meta/models.py,127,ForeignKey to Person,
django/tests/model_meta/models.py,131,ForeignKey to ProxyPerson,
django/tests/model_meta/models.py,135,ManyToManyField to BasePerson,
django/tests/model_meta/models.py,139,ManyToManyField to Person,
django/tests/model_meta/models.py,144,ParentListTests models,
django/tests/staticfiles_tests/test_management.py,75,"three because there is also the ""Found <file> here"" line",
django/tests/staticfiles_tests/test_management.py,100,AppDirectoriesFinder searched locations,
django/tests/staticfiles_tests/test_management.py,103,FileSystemFinder searched locations,
django/tests/staticfiles_tests/test_management.py,107,DefaultStorageFinder searched locations,
django/tests/staticfiles_tests/test_management.py,365,get modification and access times for no_label/static/file2.txt,
django/tests/staticfiles_tests/test_management.py,370,prepare duplicate of file2.txt from a temporary app,
django/tests/staticfiles_tests/test_management.py,371,this file will have modification time older than no_label/static/file2.txt,
django/tests/staticfiles_tests/test_management.py,372,anyway it should be taken to STATIC_ROOT because the temporary app is before,
django/tests/staticfiles_tests/test_management.py,373,'no_label' app in installed apps,
django/tests/staticfiles_tests/test_management.py,405,run collectstatic again,
django/tests/staticfiles_tests/test_management.py,411,The collectstatic test suite already has conflicting files since both,
django/tests/staticfiles_tests/test_management.py,412,project/test/file.txt and apps/test/static/test/file.txt are collected. To,
django/tests/staticfiles_tests/test_management.py,413,"properly test for the warning not happening unless we tell it to explicitly,",
django/tests/staticfiles_tests/test_management.py,414,we remove the project directory and will add back a conflicting file later.,
django/tests/staticfiles_tests/test_management.py,421,"If this string is in the collectstatic output, it means the warning we're",
django/tests/staticfiles_tests/test_management.py,422,looking for was emitted.,
django/tests/staticfiles_tests/test_management.py,458,Make sure the warning went away again.,
django/tests/staticfiles_tests/test_management.py,471,Properties of the Storage as described in the ticket.,
django/tests/staticfiles_tests/test_utils.py,13,Check disabled if DEBUG=False.,
django/tests/staticfiles_tests/test_storage.py,34,Clear hashed files to avoid side effects among tests.,
django/tests/staticfiles_tests/test_storage.py,236,avoid cache interference,
django/tests/staticfiles_tests/test_storage.py,249,CSS files shouldn't be touched by JS patterns.,
django/tests/staticfiles_tests/test_storage.py,255,Confirm JS patterns have been applied to JS files.,
django/tests/staticfiles_tests/test_storage.py,296,The in-memory version of the manifest matches the one on disk,
django/tests/staticfiles_tests/test_storage.py,297,since a properly created manifest should cover all filenames.,
django/tests/staticfiles_tests/test_storage.py,331,collect the additional file,
django/tests/staticfiles_tests/test_storage.py,343,"delete the original file form the app, collect with clear",
django/tests/staticfiles_tests/test_storage.py,360,File name not found in manifest,
django/tests/staticfiles_tests/test_storage.py,365,File doesn't exist on disk,
django/tests/staticfiles_tests/test_storage.py,373,File exists on disk,
django/tests/staticfiles_tests/test_storage.py,378,Intermediate files shouldn't be created for reference.,
django/tests/staticfiles_tests/test_storage.py,394,avoid cache interference,
django/tests/staticfiles_tests/test_storage.py,441,Don't run collectstatic command in this test class.,
django/tests/staticfiles_tests/test_storage.py,506,Create initial static files.,
django/tests/staticfiles_tests/test_storage.py,519,First collectstatic run.,
django/tests/staticfiles_tests/test_storage.py,527,Change the contents of the png files.,
django/tests/staticfiles_tests/test_storage.py,532,The hashes of the png files in the CSS file are updated after,
django/tests/staticfiles_tests/test_storage.py,533,a second collectstatic.,
django/tests/staticfiles_tests/test_liveserver.py,29,Override settings,
django/tests/staticfiles_tests/test_liveserver.py,37,Restore original settings,
django/tests/staticfiles_tests/test_liveserver.py,45,"If contrib.staticfiles isn't configured properly, the exception",
django/tests/staticfiles_tests/test_liveserver.py,46,should bubble up to the main thread.,
django/tests/staticfiles_tests/test_liveserver.py,54,"skip it, as setUpClass doesn't call its parent either",
django/tests/staticfiles_tests/test_liveserver.py,63,"This raises ImproperlyConfigured(""You're using the staticfiles",
django/tests/staticfiles_tests/test_liveserver.py,64,"app without having set the required STATIC_URL setting."")",
django/tests/staticfiles_tests/test_liveserver.py,67,Use del to avoid decrementing the database thread sharing count a,
django/tests/staticfiles_tests/test_liveserver.py,68,second time.,
django/tests/staticfiles_tests/test_liveserver.py,73,Intentionally empty method so that the test is picked up by the,
django/tests/staticfiles_tests/test_liveserver.py,74,test runner and the overridden setUpClass() method is executed.,
django/tests/staticfiles_tests/test_liveserver.py,83,The test is going to access a static file stored in this application.,
django/tests/staticfiles_tests/settings.py,27,"In particular, AuthenticationMiddleware can't be used because",
django/tests/staticfiles_tests/settings.py,28,contrib.auth isn't in INSTALLED_APPS.,
django/tests/staticfiles_tests/cases.py,68,Override the STATIC_ROOT for all tests from setUp to tearDown,
django/tests/staticfiles_tests/cases.py,69,rather than as a context manager,
django/tests/staticfiles_tests/cases.py,74,Same comment as in runtests.teardown.,
django/tests/handlers/views.py,57,Store coroutine to suppress 'unawaited' warning message,
django/tests/handlers/tests_custom_error_handlers.py,13,Response.content should be available in the middleware even with a,
django/tests/handlers/tests_custom_error_handlers.py,14,TemplateResponse-based exception response.,
django/tests/handlers/tests.py,33,The path of the request will be encoded to '/%ED'.,
django/tests/handlers/tests.py,42,This is the proper way to encode 'café',
django/tests/handlers/tests.py,43,UA forgot to quote bytes,
django/tests/handlers/tests.py,44,"UA quoted, but not in UTF-8",
django/tests/handlers/tests.py,45,UA forgot to convert Latin-1 to UTF-8 and to quote (typical of MSIE),
django/tests/handlers/tests.py,49,Simulate http.server.BaseHTTPRequestHandler.parse_request handling of raw request,
django/tests/handlers/tests.py,53,%E9 is converted to the unicode replacement character by parse_qsl,
django/tests/handlers/tests.py,72,"We don't test COOKIES content, as the result might differ between",
django/tests/handlers/tests.py,73,Python version because parsing invalid content became stricter in,
django/tests/handlers/tests.py,74,latest versions.,
django/tests/handlers/tests.py,87,"Expect ""bad request"" response",
django/tests/handlers/tests.py,224,Regression test for #23173,
django/tests/handlers/tests.py,225,Test first without PATH_INFO,
django/tests/signing/tests.py,115,Set some binary (non-ASCII key),
django/tests/signing/tests.py,147,max_age parameter can also accept a datetime.timedelta object,
django/tests/filtered_relation/tests.py,259,One query for the list and one query for the deferred title.,
django/tests/filtered_relation/tests.py,357,"borrower 1 reserves, rents, and returns book1.",
django/tests/filtered_relation/tests.py,368,"borrower2 reserves, rents, and returns book1.",
django/tests/filtered_relation/tests.py,403,"If count is equal to 1, the same aggregation should return in the",
django/tests/filtered_relation/tests.py,404,same result but it returns 4.,
django/tests/filtered_relation/tests.py,406,"With FilteredRelation, the result is as expected (1).",
django/tests/model_package/models/__init__.py,1,Import all the models from subpackages,
django/tests/admin_default_site/tests.py,17,Reset admin.site since it may have already been instantiated by,
django/tests/admin_default_site/tests.py,18,another test app.,
django/tests/ordering/tests.py,42,Getting a single item should work too:,
django/tests/ordering/tests.py,105,asc and desc are chainable with nulls_last.,
django/tests/ordering/tests.py,126,asc and desc are chainable with nulls_first.,
django/tests/ordering/tests.py,408,Order by annotated constant from selected columns.,
django/tests/ordering/tests.py,413,Order by annotated constant which is out of selected columns.,
django/tests/ordering/tests.py,422,Order by constant.,
django/tests/test_runner_apps/sample/doctests.py,39,catch a value like 1e300,
django/tests/test_runner_apps/sample/tests_sample.py,22,Z is used to trick this test case to appear after Vanilla in default suite,
django/tests/wsgi/tests.py,94,Mock out get_wsgi_application so we know its return value is used,
django/tests/wsgi/wsgi.py,1,"This is just to test finding, it doesn't have to be a real WSGI callable",
django/tests/proxy_models/tests.py,11,NOQA,
django/tests/proxy_models/tests.py,155,You can't proxy a swapped model,
django/tests/proxy_models/tests.py,325,Related field filter on proxy,
django/tests/proxy_models/tests.py,329,Select related + filter on proxy,
django/tests/proxy_models/tests.py,333,"Proxy of proxy, select_related + filter",
django/tests/proxy_models/tests.py,339,Select related + filter on a related proxy field,
django/tests/proxy_models/tests.py,348,Select related + filter on a related proxy of proxy field,
django/tests/proxy_models/models.py,9,A couple of managers for testing managing overriding in proxy model cases.,
django/tests/proxy_models/models.py,87,We can even have proxies of proxies (and subclass of those).,
django/tests/proxy_models/models.py,127,We can still use `select_related()` to include related models in our querysets.,
django/tests/proxy_models/models.py,146,Proxy models still works with filters (on related fields),
django/tests/proxy_models/models.py,147,"and select_related, even when mixed with model inheritance",
django/tests/null_fk_ordering/tests.py,20,We can't compare results directly (since different databases sort NULLs to,
django/tests/null_fk_ordering/tests.py,21,"different ends of the ordering), but we can check that all results are",
django/tests/null_fk_ordering/tests.py,22,returned.,
django/tests/null_fk_ordering/tests.py,36,We have to test this carefully. Some databases sort NULL values before,
django/tests/null_fk_ordering/tests.py,37,"everything else, some sort them afterwards. So we extract the ordered list",
django/tests/null_fk_ordering/tests.py,38,"and check the length. Before the fix, this list was too short (some values",
django/tests/null_fk_ordering/tests.py,39,were omitted).,
django/tests/null_fk_ordering/models.py,11,The first two models represent a very simple null FK ordering case.,
django/tests/null_fk_ordering/models.py,27,These following 4 models represent a far more complex ordering case.,
django/tests/middleware_exceptions/urls.py,11,Async views.,
django/tests/middleware_exceptions/tests.py,118,"Removing ROOT_URLCONF is safe, as override_settings will restore",
django/tests/middleware_exceptions/tests.py,119,the previously defined settings.,
django/tests/m2m_signals/tests.py,46,disconnect all signal handlers,
django/tests/m2m_signals/tests.py,66,adding a default part to our car - no signal listener installed,
django/tests/m2m_signals/tests.py,122,give the BMW and Toyota some doors as well,
django/tests/m2m_signals/tests.py,142,remove the engine from the self.vw and the airbag (which is not set,
django/tests/m2m_signals/tests.py,143,but is returned),
django/tests/m2m_signals/tests.py,166,give the self.vw some optional parts (second relation to same model),
django/tests/m2m_signals/tests.py,184,add airbag to all the cars (even though the self.vw already has one),
django/tests/m2m_signals/tests.py,204,remove airbag from the self.vw (reverse relation with custom,
django/tests/m2m_signals/tests.py,205,related_name),
django/tests/m2m_signals/tests.py,225,clear all parts of the self.vw,
django/tests/m2m_signals/tests.py,243,take all the doors off of cars,
django/tests/m2m_signals/tests.py,261,take all the airbags off of cars (clear reverse relation with custom,
django/tests/m2m_signals/tests.py,262,related_name),
django/tests/m2m_signals/tests.py,283,alternative ways of setting relation:,
django/tests/m2m_signals/tests.py,302,"direct assignment clears the set first, then adds",
django/tests/m2m_signals/tests.py,339,set by clearing.,
django/tests/m2m_signals/tests.py,369,set by only removing what's necessary.,
django/tests/m2m_signals/tests.py,392,Signals still work when model inheritance is involved,
django/tests/m2m_signals/tests.py,430,Install a listener on the two m2m relations.,
django/tests/raw_query/tests.py,68,All values on the model are equal,
django/tests/raw_query/tests.py,73,This includes checking that they are the same type,
django/tests/raw_query/tests.py,233,"last_name isn't given, but it will be retrieved on demand",
django/tests/raw_query/tests.py,268,First Iteration,
django/tests/raw_query/tests.py,274,Second Iteration,
django/tests/raw_query/tests.py,283,Indexing on RawQuerySets,
django/tests/raw_query/models.py,11,Protect against annotations being passed to __init__ --,
django/tests/raw_query/models.py,12,this'll make the test suite get angry if annotations aren't,
django/tests/raw_query/models.py,13,treated differently than fields.,
django/tests/async/tests.py,46,async_unsafe decorator catches bad access and returns the right,
django/tests/async/tests.py,47,message.,
django/tests/async/tests.py,56,mock.patch() is not async-aware.,
django/tests/async/tests.py,58,Decorator doesn't trigger check when the environment variable to,
django/tests/async/tests.py,59,suppress it is set.,
django/tests/update_only_fields/tests.py,75,save() should not fetch deferred fields,
django/tests/update_only_fields/tests.py,110,"The loaded salary of 3000 gets saved, the name of 'Clerk' isn't",
django/tests/update_only_fields/tests.py,111,overwritten.,
django/tests/update_only_fields/tests.py,209,"""name"" is treated as an iterable so the output is something like",
django/tests/update_only_fields/tests.py,210,"""n, a, m, e"" but the order isn't deterministic.",
django/tests/update_only_fields/tests.py,226,Save is skipped.,
django/tests/update_only_fields/tests.py,229,"Signals were skipped, too...",
django/tests/update_only_fields/tests.py,252,A little sanity check that we actually did updates...,
django/tests/foreign_object/tests.py,15,Note that these tests are testing internal implementation details.,
django/tests/foreign_object/tests.py,16,ForeignObject is not part of public API.,
django/tests/foreign_object/tests.py,22,Creating countries,
django/tests/foreign_object/tests.py,25,Creating People,
django/tests/foreign_object/tests.py,34,Creating Groups,
django/tests/foreign_object/tests.py,41,Membership objects have access to their related Person if both,
django/tests/foreign_object/tests.py,42,country_ids match between them,
django/tests/foreign_object/tests.py,50,Membership objects returns DoesNotExist error when there is no,
django/tests/foreign_object/tests.py,51,Person with the same id and country_id,
django/tests/foreign_object/tests.py,59,Creating a valid membership because it has the same country has the person,
django/tests/foreign_object/tests.py,63,Creating an invalid membership because it has a different country has the person,
django/tests/foreign_object/tests.py,75,Creating a to valid memberships,
django/tests/foreign_object/tests.py,82,Creating an invalid membership,
django/tests/foreign_object/tests.py,98,Creating a to valid memberships,
django/tests/foreign_object/tests.py,106,Creating an invalid membership,
django/tests/foreign_object/tests.py,124,Creating an invalid membership,
django/tests/foreign_object/tests.py,203,We start out by making sure that the Group 'CIA' has no members.,
django/tests/foreign_object/tests.py,212,Let's check to make sure that it worked.  Bob and Jim should be members of the CIA.,
django/tests/foreign_object/tests.py,222,We start out by making sure that Bob is in no groups.,
django/tests/foreign_object/tests.py,232,Bob should be in the CIA and a Republican,
django/tests/foreign_object/tests.py,241,We start out by making sure that the Group 'CIA' has no members.,
django/tests/foreign_object/tests.py,247,Something adds jane to group CIA but Jane is in Soviet Union which isn't CIA's country,
django/tests/foreign_object/tests.py,250,There should still be no members in CIA,
django/tests/foreign_object/tests.py,257,We start out by making sure that Jane has no groups.,
django/tests/foreign_object/tests.py,263,Something adds jane to group CIA but Jane is in Soviet Union which isn't CIA's country,
django/tests/foreign_object/tests.py,266,Jane should still not be in any groups,
django/tests/foreign_object/tests.py,290,Note that we use ids instead of instances. This is because instances on ForeignObject,
django/tests/foreign_object/tests.py,291,properties will set all related field off of the given instance,
django/tests/foreign_object/tests.py,342,Test model initialization with active_translation field.,
django/tests/foreign_object/test_forms.py,10,"ForeignObjects should not have any form fields, currently the user needs",
django/tests/foreign_object/test_forms.py,11,to manually deal with the foreignobject relation.,
django/tests/foreign_object/test_forms.py,18,A very crude test checking that the non-concrete fields do not get form fields.,
django/tests/foreign_object/models/person.py,7,Table Column Fields,
django/tests/foreign_object/models/person.py,15,Table Column Fields,
django/tests/foreign_object/models/person.py,19,Relation Fields,
django/tests/foreign_object/models/person.py,36,Table Column Fields,
django/tests/foreign_object/models/person.py,49,Table Column Fields,
django/tests/foreign_object/models/person.py,56,Relation Fields,
django/tests/foreign_object/models/person.py,79,Table Column Fields,
django/tests/foreign_object/models/person.py,85,Relation Fields,
django/tests/foreign_object/models/article.py,19,Anything with as_sql() method works in get_extra_restriction().,
django/tests/foreign_object/models/customers.py,19,order mismatches the Contact ForeignObject.,
django/tests/migrate_signals/tests.py,40,"Although test runner calls migrate for several databases,",
django/tests/migrate_signals/tests.py,41,testing for only one of them is quite sufficient.,
django/tests/migrate_signals/tests.py,45,we need to test only one call of migrate,
django/tests/migrate_signals/tests.py,49,We connect receiver here and not in unit test code because we need to,
django/tests/migrate_signals/tests.py,50,"connect receiver before test runner creates database.  That is, sequence of",
django/tests/migrate_signals/tests.py,51,actions would be:,
django/tests/migrate_signals/tests.py,52,,
django/tests/migrate_signals/tests.py,53,1. Test runner imports this module.,
django/tests/migrate_signals/tests.py,54,2. We connect receiver.,
django/tests/migrate_signals/tests.py,55,3. Test runner calls migrate for create default database.,
django/tests/migrate_signals/tests.py,56,4. Test runner execute our unit test code.,
django/tests/migrate_signals/tests.py,109,The migration isn't applied backward.,
django/tests/migrate_signals/tests.py,117,Migrating with an empty plan.,
django/tests/migrate_signals/models.py,1,"This module has to exist, otherwise pre/post_migrate aren't sent for the",
django/tests/migrate_signals/models.py,2,migrate_signals application.,
django/tests/generic_relations_regress/tests.py,56,If the model (Cafe) uses more than one level of multi-table inheritance.,
django/tests/generic_relations_regress/tests.py,78,search with a non-matching note and a matching org name,
django/tests/generic_relations_regress/tests.py,82,"search again, with the same query parameters, in reverse order",
django/tests/generic_relations_regress/tests.py,118,"Fails with another, ORM-level error",
django/tests/generic_relations_regress/tests.py,146,Saving model with GenericForeignKey to model instance with an,
django/tests/generic_relations_regress/tests.py,147,empty CharField PK,
django/tests/generic_relations_regress/tests.py,153,Create a couple of extra HasLinkThing so that the autopk value,
django/tests/generic_relations_regress/tests.py,154,isn't the same for Link and HasLinkThing.,
django/tests/generic_relations_regress/tests.py,195,A crude check that content_type_id is taken in account in the,
django/tests/generic_relations_regress/tests.py,196,join/subquery condition.,
django/tests/generic_relations_regress/tests.py,198,No need for any joins - the join from inner query can be trimmed in,
django/tests/generic_relations_regress/tests.py,199,this case (but not in the above case as no a objects at all for given,
django/tests/generic_relations_regress/tests.py,200,B would then fail).,
django/tests/generic_relations_regress/tests.py,213,"If content_type restriction isn't in the query's join condition,",
django/tests/generic_relations_regress/tests.py,214,then wrong results are produced here as the link to b will also match,
django/tests/generic_relations_regress/tests.py,215,(b and hs1 have equal pks).,
django/tests/generic_relations_regress/tests.py,219,"Now if we don't have proper left join, we will not produce any",
django/tests/generic_relations_regress/tests.py,220,results at all here.,
django/tests/generic_relations_regress/tests.py,221,clear cached results,
django/tests/generic_relations_regress/tests.py,224,Note - 0 here would be a nicer result...,
django/tests/generic_relations_regress/tests.py,226,Finally test that filtering works.,
django/tests/generic_relations_regress/tests.py,252,"deleting the Related cascades to the Content cascades to the Node,",
django/tests/generic_relations_regress/tests.py,253,where the pre_delete signal should fire and prevent deletion.,
django/tests/generic_relations_regress/models.py,89,models for test_q_object_or:,
django/tests/generic_relations_regress/models.py,114,"For testing #13085 fix, we also use Note model defined above",
django/tests/generic_relations_regress/models.py,198,Ticket #22998,
django/tests/pagination/tests.py,52,Each item is two tuples:,
django/tests/pagination/tests.py,53,"First tuple is Paginator parameters - object_list, per_page,",
django/tests/pagination/tests.py,54,"orphans, and allow_empty_first_page.",
django/tests/pagination/tests.py,55,"Second tuple is resulting Paginator attributes - count,",
django/tests/pagination/tests.py,56,"num_pages, and page_range.",
django/tests/pagination/tests.py,57,"Ten items, varying orphans, no empty first page.",
django/tests/pagination/tests.py,63,"Ten items, varying orphans, allow empty first page.",
django/tests/pagination/tests.py,69,"One item, varying orphans, no empty first page.",
django/tests/pagination/tests.py,73,"One item, varying orphans, allow empty first page.",
django/tests/pagination/tests.py,77,"Zero items, varying orphans, no empty first page.",
django/tests/pagination/tests.py,81,"Zero items, varying orphans, allow empty first page.",
django/tests/pagination/tests.py,85,Number if items one less than per_page.,
django/tests/pagination/tests.py,90,Number if items equal to per_page.,
django/tests/pagination/tests.py,94,Number if items one more than per_page.,
django/tests/pagination/tests.py,98,Number if items one more than per_page with one orphan.,
django/tests/pagination/tests.py,102,Non-integer inputs,
django/tests/pagination/tests.py,130,"With no content and allow_empty_first_page=True, 1 is a valid page number",
django/tests/pagination/tests.py,138,Paginator can be passed other objects with a count() method.,
django/tests/pagination/tests.py,144,Paginator can be passed other objects that implement __len__.,
django/tests/pagination/tests.py,192,Each item is three tuples:,
django/tests/pagination/tests.py,193,"First tuple is Paginator parameters - object_list, per_page,",
django/tests/pagination/tests.py,194,"orphans, and allow_empty_first_page.",
django/tests/pagination/tests.py,195,Second tuple is the start and end indexes of the first page.,
django/tests/pagination/tests.py,196,Third tuple is the start and end indexes of the last page.,
django/tests/pagination/tests.py,197,"Ten items, varying per_page, no orphans.",
django/tests/pagination/tests.py,202,"Ten items, varying per_page, with orphans.",
django/tests/pagination/tests.py,211,"One item, varying orphans, no empty first page.",
django/tests/pagination/tests.py,215,"One item, varying orphans, allow empty first page.",
django/tests/pagination/tests.py,219,"Zero items, varying orphans, allow empty first page.",
django/tests/pagination/tests.py,228,"When no items and no empty first page, we should get EmptyPage error.",
django/tests/pagination/tests.py,277,An empty page returns the last page.,
django/tests/pagination/tests.py,279,Non-integer page returns the first page.,
django/tests/pagination/tests.py,285,An empty page returns the last page.,
django/tests/pagination/tests.py,288,Non-integer page returns the first page.,
django/tests/pagination/tests.py,314,Prepare a list of objects for pagination.,
django/tests/pagination/tests.py,366,Make sure object_list queryset is not evaluated by an invalid __getitem__ call.,
django/tests/pagination/tests.py,367,(this happens from the template engine when using eg: {% page_obj.has_previous %}),
django/tests/pagination/tests.py,375,Make sure slicing the Page object with numbers and slice objects work.,
django/tests/pagination/tests.py,382,"After __getitem__ is called, object_list is a list",
django/tests/pagination/tests.py,392,The warning points at the Paginator caller (i.e. the stacklevel,
django/tests/pagination/tests.py,393,is appropriate).,
django/tests/logging_tests/tests.py,24,logging config prior to using filter with mail_admins,
django/tests/logging_tests/tests.py,253,AdminEmailHandler does not get filtered out,
django/tests/logging_tests/tests.py,254,even with DEBUG=True.,
django/tests/logging_tests/tests.py,278,Backup then override original filters,
django/tests/logging_tests/tests.py,290,Restore original filters,
django/tests/logging_tests/tests.py,307,Backup then override original filters,
django/tests/logging_tests/tests.py,324,Restore original filters,
django/tests/logging_tests/tests.py,366,Monkeypatches,
django/tests/logging_tests/tests.py,377,Revert Monkeypatches,
django/tests/logging_tests/tests.py,421,Text email,
django/tests/logging_tests/tests.py,428,HTML email,
django/tests/logging_tests/tests.py,469,validate is just an example command to trigger settings configuration,
django/tests/null_fk/tests.py,19,"Starting from comment, make sure that a .select_related(...) with a specified",
django/tests/null_fk/tests.py,20,set of fields will properly LEFT JOIN multiple levels of NULLs (and the things,
django/tests/null_fk/tests.py,21,"that come after the NULLs, or else data that should exist won't). Regression",
django/tests/null_fk/tests.py,22,test for #7369.,
django/tests/null_fk/tests.py,36,"Regression test for #7530, #7716.",
django/tests/null_fk/tests.py,52,value=NULL,
django/tests/null_fk/tests.py,56,Each of these individually should return the item.,
django/tests/null_fk/tests.py,60,"Logically, qs1 and qs2, and qs3 and qs4 should be the same.",
django/tests/null_fk/tests.py,66,Regression test for #15823.,
django/tests/null_fk/models.py,40,Ticket 15823,
django/tests/serializers/test_data.py,33,A set of functions that can be used to recreate,
django/tests/serializers/test_data.py,34,test data objects of various kinds.,
django/tests/serializers/test_data.py,35,"The save method is a raw base model save, to make",
django/tests/serializers/test_data.py,36,sure that the data in the database matches the,
django/tests/serializers/test_data.py,37,exact test case.,
django/tests/serializers/test_data.py,102,This isn't a raw save because:,
django/tests/serializers/test_data.py,103,"1) we're testing inheritance, not field behavior, so none",
django/tests/serializers/test_data.py,104,of the field values need to be protected.,
django/tests/serializers/test_data.py,105,2) saving the child class and having the parent created,
django/tests/serializers/test_data.py,106,automatically is easier than manually creating both.,
django/tests/serializers/test_data.py,113,A set of functions that can be used to compare,
django/tests/serializers/test_data.py,114,test data objects of various kinds,
django/tests/serializers/test_data.py,154,"actually nothing else to check, the instance just should exist",
django/tests/serializers/test_data.py,183,Define some data types. Each data type is,
django/tests/serializers/test_data.py,184,actually a pair of functions; one to create,
django/tests/serializers/test_data.py,185,and one to compare objects of that type,
django/tests/serializers/test_data.py,198,"Format: (data type, PK value, Model Class, data)",
django/tests/serializers/test_data.py,210,"(We use something that will fit into a latin1 database encoding here,",
django/tests/serializers/test_data.py,211,because that is still the default used on many system setups.),
django/tests/serializers/test_data.py,221,"(data_obj, 51, FileData, None),",
django/tests/serializers/test_data.py,238,"(XX, ImageData",
django/tests/serializers/test_data.py,273,Post reference,
django/tests/serializers/test_data.py,274,Pre reference,
django/tests/serializers/test_data.py,275,Empty reference,
django/tests/serializers/test_data.py,277,Empty set,
django/tests/serializers/test_data.py,278,Post reference,
django/tests/serializers/test_data.py,279,Pre reference,
django/tests/serializers/test_data.py,280,Pre and Post reference,
django/tests/serializers/test_data.py,282,Post reference,
django/tests/serializers/test_data.py,283,Pre reference,
django/tests/serializers/test_data.py,285,Pre reference,
django/tests/serializers/test_data.py,286,Post reference,
django/tests/serializers/test_data.py,287,Empty reference,
django/tests/serializers/test_data.py,305,testing post- and pre-references and extra fields,
django/tests/serializers/test_data.py,327,"(pk_obj, 650, FilePKData, 'file:///foo/bar/whiz.txt'),",
django/tests/serializers/test_data.py,338,"(XX, ImagePKData",
django/tests/serializers/test_data.py,346,"(pk_obj, 760, TextPKData, """"""This is a long piece of text.",
django/tests/serializers/test_data.py,347,It contains line breaks.,
django/tests/serializers/test_data.py,348,Several of them.,
django/tests/serializers/test_data.py,349,"The end.""""""),",
django/tests/serializers/test_data.py,350,"(pk_obj, 770, TimePKData, datetime.time(10, 42, 37)),",
django/tests/serializers/test_data.py,351,"(pk_obj, 790, XMLPKData, ""<foo></foo>""),",
django/tests/serializers/test_data.py,372,"Because Oracle treats the empty string as NULL, Oracle is expected to fail",
django/tests/serializers/test_data.py,373,when field.empty_strings_allowed is True and the value is None; skip these,
django/tests/serializers/test_data.py,374,tests.,
django/tests/serializers/test_data.py,381,Regression test for #8651 -- a FK to an object with PK of 0,
django/tests/serializers/test_data.py,382,This won't work on MySQL since it won't let you create an object,
django/tests/serializers/test_data.py,383,"with an autoincrement primary key of 0,",
django/tests/serializers/test_data.py,397,Create all the objects defined in the test data,
django/tests/serializers/test_data.py,404,Get a count of the number of objects created for each class,
django/tests/serializers/test_data.py,408,Add the generic tagged objects to the object list,
django/tests/serializers/test_data.py,411,Serialize the test database,
django/tests/serializers/test_data.py,417,Assert that the deserialized data is the same,
django/tests/serializers/test_data.py,418,as the original source,
django/tests/serializers/test_data.py,422,Assert that the number of objects deserialized is the,
django/tests/serializers/test_data.py,423,same as the number that was serialized.,
django/tests/serializers/test_natural.py,17,Create all the objects defined in the test data,
django/tests/serializers/test_natural.py,24,Serialize the test database,
django/tests/serializers/test_natural.py,30,Assert that the deserialized data is the same,
django/tests/serializers/test_natural.py,31,as the original source,
django/tests/serializers/test_natural.py,49,Create the books.,
django/tests/serializers/test_natural.py,53,Serialize the books.,
django/tests/serializers/test_natural.py,59,Delete one book (to prove that the natural key generation will only,
django/tests/serializers/test_natural.py,60,restore the primary keys of books found in the database via the,
django/tests/serializers/test_natural.py,61,get_natural_key manager method).,
django/tests/serializers/test_natural.py,64,Deserialize and test.,
django/tests/serializers/test_natural.py,94,If it's possible to find the superclass from the subclass and it's,
django/tests/serializers/test_natural.py,95,"the correct superclass, it's working.",
django/tests/serializers/test_natural.py,203,Dynamically register tests for each serializer,
django/tests/serializers/test_yaml.py,55,clear out cached serializers to emulate yaml missing,
django/tests/serializers/test_yaml.py,65,clear out cached serializers to clean out BadSerializer instances,
django/tests/serializers/test_yaml.py,132,yaml.safe_load will return non-string objects for some,
django/tests/serializers/test_yaml.py,133,"of the fields we are interested in, this ensures that",
django/tests/serializers/test_yaml.py,134,everything comes back as a string,
django/tests/serializers/test_xml.py,30,NOQA,
django/tests/serializers/tests.py,81,SerializerDoesNotExist is instantiated with the nonexistent format,
django/tests/serializers/tests.py,91,Set by subclasses to the serialization format name,
django/tests/serializers/tests.py,132,Serialize the test database to a stream,
django/tests/serializers/tests.py,136,Serialize normally for a comparison,
django/tests/serializers/tests.py,139,The two are the same,
django/tests/serializers/tests.py,149,Serialize then deserialize the test database,
django/tests/serializers/tests.py,155,The deserialized object contains data in only the serialized fields.,
django/tests/serializers/tests.py,170,"Prior to saving, old headline is in place",
django/tests/serializers/tests.py,177,"After saving, new headline is in place",
django/tests/serializers/tests.py,291,Regression for #12524 -- dates before 1000AD get prefixed,
django/tests/serializers/tests.py,292,0's on the year,
django/tests/serializers/tests.py,385,The deserialization process needs to run in a transaction in order,
django/tests/serializers/tests.py,386,to test forward reference handling.,
django/tests/serializers/models/__init__.py,1,NOQA,
django/tests/serializers/models/__init__.py,2,NOQA,
django/tests/serializers/models/__init__.py,3,NOQA,
django/tests/serializers/models/__init__.py,4,NOQA,
django/tests/serializers/models/data.py,65,class ImageData(models.Model):,
django/tests/serializers/models/data.py,66,data = models.ImageField(null=True),
django/tests/serializers/models/data.py,122,The following test classes are all for validation,
django/tests/serializers/models/data.py,123,"of related objects; in particular, forward, backward,",
django/tests/serializers/models/data.py,124,and self references.,
django/tests/serializers/models/data.py,153,"One to one field can't be null here, since it is a PK.",
django/tests/serializers/models/data.py,182,The following test classes are for validating the,
django/tests/serializers/models/data.py,183,deserialization of objects that use a user-defined,
django/tests/serializers/models/data.py,184,field as the primary key.,
django/tests/serializers/models/data.py,185,Some of these data types have been commented out,
django/tests/serializers/models/data.py,186,because they can't be used as a primary key on one,
django/tests/serializers/models/data.py,187,or all database backends.,
django/tests/serializers/models/data.py,213,class FilePKData(models.Model):,
django/tests/serializers/models/data.py,214,data = models.FileField(primary_key=True),
django/tests/serializers/models/data.py,228,class ImagePKData(models.Model):,
django/tests/serializers/models/data.py,229,data = models.ImageField(primary_key=True),
django/tests/serializers/models/data.py,251,class TextPKData(models.Model):,
django/tests/serializers/models/data.py,252,data = models.TextField(primary_key=True),
django/tests/serializers/models/data.py,254,class TimePKData(models.Model):,
django/tests/serializers/models/data.py,255,data = models.TimeField(primary_key=True),
django/tests/serializers/models/data.py,270,"Tests for handling fields with pre_save functions, or",
django/tests/serializers/models/data.py,271,models with save functions that modify data,
django/tests/serializers/models/data.py,290,Tests for serialization of models using inheritance.,
django/tests/serializers/models/data.py,291,"Regression for #7202, #7350",
django/tests/signals/tests.py,15,Save up the number of connected signals so that we can check at the,
django/tests/signals/tests.py,16,end that all the signals we register get properly unregistered (#9989),
django/tests/signals/tests.py,25,All our signals got disconnected properly.,
django/tests/signals/tests.py,82,"Calling an internal method purely so that we can trigger a ""raw"" save.",
django/tests/signals/tests.py,105,The sender should stay the same when using defer().,
django/tests/signals/tests.py,126,#8285: signals can be any callable,
django/tests/signals/tests.py,235,Assigning and removing to/from m2m shouldn't generate an m2m signal.,
django/tests/signals/tests.py,349,"Book isn't registered with apps2, so it will linger in",
django/tests/signals/tests.py,350,apps2._pending_operations if ModelSignal does the wrong thing.,
django/tests/admin_ordering/tests.py,62,"default ordering is ('name',)",
django/tests/admin_ordering/tests.py,130,we need to register a custom ModelAdmin (instead of just using,
django/tests/admin_ordering/tests.py,131,ModelAdmin) because the field creator tries to find the ModelAdmin,
django/tests/admin_ordering/tests.py,132,for the related model,
django/tests/admin_ordering/tests.py,149,should be ordered by name (as defined by the model),
django/tests/admin_ordering/tests.py,157,should be ordered by name (as defined by the model),
django/tests/admin_ordering/tests.py,165,should be ordered by rank (defined by the ModelAdmin),
django/tests/admin_ordering/tests.py,171,Exclude one of the two Bands from the querysets,
django/tests/model_formsets_regress/tests.py,22,Instantiate the Form and FormSet to prove,
django/tests/model_formsets_regress/tests.py,23,you can create a form with no data,
django/tests/model_formsets_regress/tests.py,27,Now create a new User and UserSite instance,
django/tests/model_formsets_regress/tests.py,53,Now update the UserSite instance,
django/tests/model_formsets_regress/tests.py,71,Now add a new UserSite instance,
django/tests/model_formsets_regress/tests.py,98,Instantiate the Form and FormSet to prove,
django/tests/model_formsets_regress/tests.py,99,you can create a form with no data,
django/tests/model_formsets_regress/tests.py,103,Now create a new Restaurant and Manager instance,
django/tests/model_formsets_regress/tests.py,126,Now update the Manager instance,
django/tests/model_formsets_regress/tests.py,142,Now add a new Manager instance,
django/tests/model_formsets_regress/tests.py,171,Testing the inline model's relation,
django/tests/model_formsets_regress/tests.py,196,Testing the inline model's relation,
django/tests/model_formsets_regress/tests.py,204,Instantiate the Form and FormSet to prove,
django/tests/model_formsets_regress/tests.py,205,you can create a formset with an instance of None,
django/tests/model_formsets_regress/tests.py,231,"Add a new host, modify previous host, and save-as-new",
django/tests/model_formsets_regress/tests.py,241,"To save a formset as new, it needs a new hub instance",
django/tests/model_formsets_regress/tests.py,281,check if the returned error classes are correct,
django/tests/model_formsets_regress/tests.py,282,note: formset.errors returns a list as documented,
django/tests/model_formsets_regress/tests.py,446,reload database,
django/tests/model_formsets_regress/tests.py,449,pass standard data dict & see none updated,
django/tests/model_formsets_regress/tests.py,463,reload database,
django/tests/model_formsets_regress/tests.py,466,create data dict with all fields marked for deletion,
django/tests/model_formsets_regress/tests.py,481,reload database,
django/tests/model_formsets_regress/tests.py,484,Create formset with custom Delete function,
django/tests/model_formsets_regress/tests.py,485,create data dict with all fields marked for deletion,
django/tests/model_formsets_regress/tests.py,495,verify two were deleted,
django/tests/model_formsets_regress/tests.py,500,"verify no ""odd"" PKs left",
django/tests/model_formsets_regress/tests.py,526,"Even if the ""us"" object isn't in the DB any more, the form",
django/tests/model_formsets_regress/tests.py,527,validates.,
django/tests/multiple_database/routers.py,33,We use default here to ensure we can tell the difference,
django/tests/multiple_database/routers.py,34,between a read request and a write request for Auth objects,
django/tests/multiple_database/routers.py,56,A router that only expresses an opinion on writes,
django/tests/multiple_database/tests.py,34,Create a book on the default database using create(),
django/tests/multiple_database/tests.py,37,Create a book on the default database using a save,
django/tests/multiple_database/tests.py,43,"Book exists on the default database, but not on other database",
django/tests/multiple_database/tests.py,64,Create a book on the second database,
django/tests/multiple_database/tests.py,68,Create a book on the default database using a save,
django/tests/multiple_database/tests.py,74,"Book exists on the default database, but not on other database",
django/tests/multiple_database/tests.py,152,Create a book and author on the default database,
django/tests/multiple_database/tests.py,158,Create a book and author on the other database,
django/tests/multiple_database/tests.py,163,Save the author relations,
django/tests/multiple_database/tests.py,167,Inspect the m2m tables directly.,
django/tests/multiple_database/tests.py,168,There should be 1 entry in each database,
django/tests/multiple_database/tests.py,172,Queries work across m2m joins,
django/tests/multiple_database/tests.py,191,Reget the objects to clear caches,
django/tests/multiple_database/tests.py,195,Retrieve related object by descriptor. Related objects should be database-bound,
django/tests/multiple_database/tests.py,202,Create a book and author on the other database,
django/tests/multiple_database/tests.py,206,Save the author relations,
django/tests/multiple_database/tests.py,209,Add a second author,
django/tests/multiple_database/tests.py,226,Remove the second author,
django/tests/multiple_database/tests.py,237,Clear all authors,
django/tests/multiple_database/tests.py,248,Create an author through the m2m interface,
django/tests/multiple_database/tests.py,261,Create a book and author on the other database,
django/tests/multiple_database/tests.py,265,Save the author relations,
django/tests/multiple_database/tests.py,268,Create a second book on the other database,
django/tests/multiple_database/tests.py,271,Add a books to the m2m,
django/tests/multiple_database/tests.py,284,Remove a book from the m2m,
django/tests/multiple_database/tests.py,297,Clear the books associated with mark,
django/tests/multiple_database/tests.py,310,Create a book through the m2m interface,
django/tests/multiple_database/tests.py,323,Create a book and author on the default database,
django/tests/multiple_database/tests.py,328,Create a book and author on the other database,
django/tests/multiple_database/tests.py,332,Set a foreign key set with an object from a different database,
django/tests/multiple_database/tests.py,341,Add to an m2m with an object from a different database,
django/tests/multiple_database/tests.py,350,Set a m2m with an object from a different database,
django/tests/multiple_database/tests.py,355,Add to a reverse m2m with an object from a different database,
django/tests/multiple_database/tests.py,364,Set a reverse m2m with an object from a different database,
django/tests/multiple_database/tests.py,371,Create a book and author on the other database,
django/tests/multiple_database/tests.py,376,Check the initial state,
django/tests/multiple_database/tests.py,385,Delete the object on the other database,
django/tests/multiple_database/tests.py,392,The person still exists ...,
django/tests/multiple_database/tests.py,394,... but the book has been deleted,
django/tests/multiple_database/tests.py,396,... and the relationship object has also been deleted.,
django/tests/multiple_database/tests.py,399,Now try deletion in the reverse direction. Set up the relation again,
django/tests/multiple_database/tests.py,403,Check the initial state,
django/tests/multiple_database/tests.py,412,Delete the object on the other database,
django/tests/multiple_database/tests.py,419,The person has been deleted ...,
django/tests/multiple_database/tests.py,421,... but the book still exists,
django/tests/multiple_database/tests.py,423,... and the relationship object has been deleted.,
django/tests/multiple_database/tests.py,428,Create a book and author on the default database,
django/tests/multiple_database/tests.py,433,Create a book and author on the other database,
django/tests/multiple_database/tests.py,437,Save the author's favorite books,
django/tests/multiple_database/tests.py,450,Queries work across foreign key joins,
django/tests/multiple_database/tests.py,473,Reget the objects to clear caches,
django/tests/multiple_database/tests.py,477,Retrieve related object by descriptor. Related objects should be database-bound,
django/tests/multiple_database/tests.py,485,Save the author relations,
django/tests/multiple_database/tests.py,489,Add a second book edited by chris,
django/tests/multiple_database/tests.py,508,Remove the second editor,
django/tests/multiple_database/tests.py,521,Clear all edited books,
django/tests/multiple_database/tests.py,534,Create an author through the m2m interface,
django/tests/multiple_database/tests.py,553,Create a book and author on the default database,
django/tests/multiple_database/tests.py,557,Create a book and author on the other database,
django/tests/multiple_database/tests.py,560,Set a foreign key with an object from a different database,
django/tests/multiple_database/tests.py,568,Set a foreign key set with an object from a different database,
django/tests/multiple_database/tests.py,573,Add to a foreign key set with an object from a different database,
django/tests/multiple_database/tests.py,583,Check the initial state,
django/tests/multiple_database/tests.py,590,"Delete the person object, which will cascade onto the pet",
django/tests/multiple_database/tests.py,596,Both the pet and the person have been deleted from the right database,
django/tests/multiple_database/tests.py,606,Any router that accesses `model` in db_for_read() works here.,
django/tests/multiple_database/tests.py,619,Create a user and profile on the default database,
django/tests/multiple_database/tests.py,623,Create a user and profile on the other database,
django/tests/multiple_database/tests.py,627,Retrieve related objects; queries should be database constrained,
django/tests/multiple_database/tests.py,634,Queries work across joins,
django/tests/multiple_database/tests.py,665,Reget the objects to clear caches,
django/tests/multiple_database/tests.py,669,Retrieve related object by descriptor. Related objects should be database-bound,
django/tests/multiple_database/tests.py,675,Create a user and profile on the default database,
django/tests/multiple_database/tests.py,678,Create a user and profile on the other database,
django/tests/multiple_database/tests.py,681,Set a one-to-one relation with an object from a different database,
django/tests/multiple_database/tests.py,690,BUT! if you assign a FK object when the base object hasn't,
django/tests/multiple_database/tests.py,691,"been saved yet, you implicitly assign the database for the",
django/tests/multiple_database/tests.py,692,base object.,
django/tests/multiple_database/tests.py,697,assigning a profile requires an explicit pk as the object isn't saved,
django/tests/multiple_database/tests.py,701,"initially, no db assigned",
django/tests/multiple_database/tests.py,705,"old object comes from 'other', so the new object is set to use 'other'...",
django/tests/multiple_database/tests.py,711,... but it isn't saved yet,
django/tests/multiple_database/tests.py,715,"When saved (no using required), new objects goes to 'other'",
django/tests/multiple_database/tests.py,727,This also works if you assign the O2O relation in the constructor,
django/tests/multiple_database/tests.py,732,... but it isn't saved yet,
django/tests/multiple_database/tests.py,739,"When saved, the new profile goes to 'other'",
django/tests/multiple_database/tests.py,749,Create a book and author on the default database,
django/tests/multiple_database/tests.py,753,Create a book and author on the other database,
django/tests/multiple_database/tests.py,764,Reget the objects to clear caches,
django/tests/multiple_database/tests.py,767,Retrieve related object by descriptor. Related objects should be database-bound,
django/tests/multiple_database/tests.py,786,Add a second review,
django/tests/multiple_database/tests.py,797,Remove the second author,
django/tests/multiple_database/tests.py,808,Clear all reviews,
django/tests/multiple_database/tests.py,819,Create an author through the generic interface,
django/tests/multiple_database/tests.py,832,Create a book and author on the default database,
django/tests/multiple_database/tests.py,836,Create a book and author on the other database,
django/tests/multiple_database/tests.py,841,Set a foreign key with an object from a different database,
django/tests/multiple_database/tests.py,849,Add to a foreign key set with an object from a different database,
django/tests/multiple_database/tests.py,858,BUT! if you assign a FK object when the base object hasn't,
django/tests/multiple_database/tests.py,859,"been saved yet, you implicitly assign the database for the",
django/tests/multiple_database/tests.py,860,base object.,
django/tests/multiple_database/tests.py,862,"initially, no db assigned",
django/tests/multiple_database/tests.py,865,"Dive comes from 'other', so review3 is set to use 'other'...",
django/tests/multiple_database/tests.py,868,... but it isn't saved yet,
django/tests/multiple_database/tests.py,878,"When saved, John goes to 'other'",
django/tests/multiple_database/tests.py,894,Check the initial state,
django/tests/multiple_database/tests.py,901,"Delete the Book object, which will cascade onto the pet",
django/tests/multiple_database/tests.py,907,Both the pet and the person have been deleted from the right database,
django/tests/multiple_database/tests.py,931,Create a book and author on the other database,
django/tests/multiple_database/tests.py,939,Retrieve the Person using select_related(),
django/tests/multiple_database/tests.py,942,The editor instance should have a db state,
django/tests/multiple_database/tests.py,950,"When you call __str__ on the query object, it doesn't know about using",
django/tests/multiple_database/tests.py,951,so it falls back to the default. If the subquery explicitly uses a,
django/tests/multiple_database/tests.py,952,"different database, an error should be raised.",
django/tests/multiple_database/tests.py,960,"Evaluating the query shouldn't work, either",
django/tests/multiple_database/tests.py,969,extra_arg is removed by the BookManager's implementation of,
django/tests/multiple_database/tests.py,970,create(); but the BookManager's implementation won't get called,
django/tests/multiple_database/tests.py,971,"unless edited returns a Manager, not a queryset",
django/tests/multiple_database/tests.py,993,Init with instances instead of strings,
django/tests/multiple_database/tests.py,998,Make the 'other' database appear to be a replica of the 'default',
django/tests/multiple_database/tests.py,1023,Add the auth router to the chain. TestRouter is a universal,
django/tests/multiple_database/tests.py,1024,"synchronizer, so it should have no effect.",
django/tests/multiple_database/tests.py,1032,Now check what happens if the router order is reversed.,
django/tests/multiple_database/tests.py,1044,First check the baseline behavior.,
django/tests/multiple_database/tests.py,1078,Create a book and author on the other database,
django/tests/multiple_database/tests.py,1081,An update query will be routed to the default database,
django/tests/multiple_database/tests.py,1085,"By default, the get query will be directed to 'other'",
django/tests/multiple_database/tests.py,1088,But the same query issued explicitly at a database will work.,
django/tests/multiple_database/tests.py,1091,The update worked.,
django/tests/multiple_database/tests.py,1094,An update query with an explicit using clause will be routed,
django/tests/multiple_database/tests.py,1095,to the requested database.,
django/tests/multiple_database/tests.py,1099,Related object queries stick to the same database,
django/tests/multiple_database/tests.py,1100,"as the original object, regardless of the router",
django/tests/multiple_database/tests.py,1104,get_or_create is a special case. The get needs to be targeted at,
django/tests/multiple_database/tests.py,1105,the write database in order to avoid potential transaction,
django/tests/multiple_database/tests.py,1106,consistency problems,
django/tests/multiple_database/tests.py,1114,Check the head count of objects,
django/tests/multiple_database/tests.py,1117,"If a database isn't specified, the read database is used",
django/tests/multiple_database/tests.py,1120,A delete query will also be routed to the default database,
django/tests/multiple_database/tests.py,1123,The default database has lost the book.,
django/tests/multiple_database/tests.py,1133,Set a foreign key set with an object from a different database,
django/tests/multiple_database/tests.py,1140,Create a book and author on the default database,
django/tests/multiple_database/tests.py,1146,Create a book and author on the other database,
django/tests/multiple_database/tests.py,1152,Set a foreign key with an object from a different database,
django/tests/multiple_database/tests.py,1155,Database assignments of original objects haven't changed...,
django/tests/multiple_database/tests.py,1161,... but they will when the affected object is saved.,
django/tests/multiple_database/tests.py,1165,...and the source database now has a copy of any object saved,
django/tests/multiple_database/tests.py,1168,"This isn't a real primary/replica database, so restore the original from other",
django/tests/multiple_database/tests.py,1172,Set a foreign key set with an object from a different database,
django/tests/multiple_database/tests.py,1175,"Assignment implies a save, so database assignments of original objects have changed...",
django/tests/multiple_database/tests.py,1181,...and the source database now has a copy of any object saved,
django/tests/multiple_database/tests.py,1184,"This isn't a real primary/replica database, so restore the original from other",
django/tests/multiple_database/tests.py,1188,Add to a foreign key set with an object from a different database,
django/tests/multiple_database/tests.py,1191,"Add implies a save, so database assignments of original objects have changed...",
django/tests/multiple_database/tests.py,1197,...and the source database now has a copy of any object saved,
django/tests/multiple_database/tests.py,1200,"This isn't a real primary/replica database, so restore the original from other",
django/tests/multiple_database/tests.py,1203,If you assign a FK object when the base object hasn't,
django/tests/multiple_database/tests.py,1204,"been saved yet, you implicitly assign the database for the",
django/tests/multiple_database/tests.py,1205,base object.,
django/tests/multiple_database/tests.py,1208,"initially, no db assigned",
django/tests/multiple_database/tests.py,1212,"old object comes from 'other', so the new object is set to use the",
django/tests/multiple_database/tests.py,1213,source of 'other'...,
django/tests/multiple_database/tests.py,1224,This also works if you assign the FK in the constructor,
django/tests/multiple_database/tests.py,1228,"For the remainder of this test, create a copy of 'mark' in the",
django/tests/multiple_database/tests.py,1229,'default' database to prevent integrity errors on backends that,
django/tests/multiple_database/tests.py,1230,don't defer constraints checks until the end of the transaction,
django/tests/multiple_database/tests.py,1233,"This moved 'mark' in the 'default' database, move it back in 'other'",
django/tests/multiple_database/tests.py,1237,"If you create an object through a FK relation, it will be",
django/tests/multiple_database/tests.py,1238,"written to the write database, even if the original object",
django/tests/multiple_database/tests.py,1239,was on the read database,
django/tests/multiple_database/tests.py,1243,"Same goes for get_or_create, regardless of whether getting or creating",
django/tests/multiple_database/tests.py,1255,Create books and authors on the inverse to the usual database,
django/tests/multiple_database/tests.py,1266,Now save back onto the usual database.,
django/tests/multiple_database/tests.py,1267,"This simulates primary/replica - the objects exist on both database,",
django/tests/multiple_database/tests.py,1268,but the _state.db is as it is for all other tests.,
django/tests/multiple_database/tests.py,1274,We have 2 of both types of object on both databases,
django/tests/multiple_database/tests.py,1280,Set a m2m set with an object from a different database,
django/tests/multiple_database/tests.py,1283,Database assignments don't change,
django/tests/multiple_database/tests.py,1289,All m2m relations should be saved on the default database,
django/tests/multiple_database/tests.py,1293,Reset relations,
django/tests/multiple_database/tests.py,1296,Add to an m2m with an object from a different database,
django/tests/multiple_database/tests.py,1299,Database assignments don't change,
django/tests/multiple_database/tests.py,1305,All m2m relations should be saved on the default database,
django/tests/multiple_database/tests.py,1309,Reset relations,
django/tests/multiple_database/tests.py,1312,Set a reverse m2m with an object from a different database,
django/tests/multiple_database/tests.py,1315,Database assignments don't change,
django/tests/multiple_database/tests.py,1321,All m2m relations should be saved on the default database,
django/tests/multiple_database/tests.py,1325,Reset relations,
django/tests/multiple_database/tests.py,1331,Add to a reverse m2m with an object from a different database,
django/tests/multiple_database/tests.py,1334,Database assignments don't change,
django/tests/multiple_database/tests.py,1340,All m2m relations should be saved on the default database,
django/tests/multiple_database/tests.py,1344,"If you create an object through a M2M relation, it will be",
django/tests/multiple_database/tests.py,1345,"written to the write database, even if the original object",
django/tests/multiple_database/tests.py,1346,was on the read database,
django/tests/multiple_database/tests.py,1350,"Same goes for get_or_create, regardless of whether getting or creating",
django/tests/multiple_database/tests.py,1359,Create a user and profile on the default database,
django/tests/multiple_database/tests.py,1362,Create a user and profile on the other database,
django/tests/multiple_database/tests.py,1365,Set a one-to-one relation with an object from a different database,
django/tests/multiple_database/tests.py,1369,Database assignments of original objects haven't changed...,
django/tests/multiple_database/tests.py,1374,... but they will when the affected object is saved.,
django/tests/multiple_database/tests.py,1380,Create a book and author on the default database,
django/tests/multiple_database/tests.py,1387,Create a book and author on the other database,
django/tests/multiple_database/tests.py,1394,Set a generic foreign key with an object from a different database,
django/tests/multiple_database/tests.py,1397,Database assignments of original objects haven't changed...,
django/tests/multiple_database/tests.py,1403,... but they will when the affected object is saved.,
django/tests/multiple_database/tests.py,1408,...and the source database now has a copy of any object saved,
django/tests/multiple_database/tests.py,1411,"This isn't a real primary/replica database, so restore the original from other",
django/tests/multiple_database/tests.py,1415,Add to a generic foreign key set with an object from a different database,
django/tests/multiple_database/tests.py,1418,Database assignments of original objects haven't changed...,
django/tests/multiple_database/tests.py,1424,... but they will when the affected object is saved.,
django/tests/multiple_database/tests.py,1428,...and the source database now has a copy of any object saved,
django/tests/multiple_database/tests.py,1431,BUT! if you assign a FK object when the base object hasn't,
django/tests/multiple_database/tests.py,1432,"been saved yet, you implicitly assign the database for the",
django/tests/multiple_database/tests.py,1433,base object.,
django/tests/multiple_database/tests.py,1435,"initially, no db assigned",
django/tests/multiple_database/tests.py,1438,"Dive comes from 'other', so review3 is set to use the source of 'other'...",
django/tests/multiple_database/tests.py,1442,"If you create an object through a M2M relation, it will be",
django/tests/multiple_database/tests.py,1443,"written to the write database, even if the original object",
django/tests/multiple_database/tests.py,1444,was on the read database,
django/tests/multiple_database/tests.py,1490,Create a book and author on the other database,
django/tests/multiple_database/tests.py,1502,"When you call __str__ on the query object, it doesn't know about using",
django/tests/multiple_database/tests.py,1503,so it falls back to the default. Don't let routing instructions,
django/tests/multiple_database/tests.py,1504,force the subquery to an incompatible database.,
django/tests/multiple_database/tests.py,1507,"If you evaluate the query, it should work, running on 'other'",
django/tests/multiple_database/tests.py,1533,Create one user using default allocation policy,
django/tests/multiple_database/tests.py,1536,"Create another user, explicitly specifying the database",
django/tests/multiple_database/tests.py,1539,The second user only exists on the other database,
django/tests/multiple_database/tests.py,1548,The second user only exists on the default database,
django/tests/multiple_database/tests.py,1557,That is... there is one user on each database,
django/tests/multiple_database/tests.py,1566,dumping the default database doesn't try to include auth because,
django/tests/multiple_database/tests.py,1567,allow_migrate prohibits auth on default,
django/tests/multiple_database/tests.py,1573,dumping the other database does include auth,
django/tests/multiple_database/tests.py,1581,"A router that only expresses an opinion on migrate,",
django/tests/multiple_database/tests.py,1582,passing pets to the 'other' database,
django/tests/multiple_database/tests.py,1598,"""Pro Django"" exists on the default database, but not on other database",
django/tests/multiple_database/tests.py,1605,"""Dive into Python"" exists on the default database, but not on other database",
django/tests/multiple_database/tests.py,1613,"""Definitive Guide"" exists on the both databases",
django/tests/multiple_database/tests.py,1627,No objects will actually be loaded,
django/tests/multiple_database/tests.py,1667,Make some signal receivers,
django/tests/multiple_database/tests.py,1672,Make model and connect receivers,
django/tests/multiple_database/tests.py,1678,Save and test receivers got calls,
django/tests/multiple_database/tests.py,1682,"Delete, and test",
django/tests/multiple_database/tests.py,1686,Save again to a different database,
django/tests/multiple_database/tests.py,1690,"Delete, and test",
django/tests/multiple_database/tests.py,1704,Make a receiver,
django/tests/multiple_database/tests.py,1706,Connect it,
django/tests/multiple_database/tests.py,1709,Create the models that will be used for the tests,
django/tests/multiple_database/tests.py,1714,Create a copy of the models on the 'other' database to prevent,
django/tests/multiple_database/tests.py,1715,integrity errors on backends that don't defer constraints checks,
django/tests/multiple_database/tests.py,1719,Test addition,
django/tests/multiple_database/tests.py,1726,Test removal,
django/tests/multiple_database/tests.py,1733,Test addition in reverse,
django/tests/multiple_database/tests.py,1740,Test clearing,
django/tests/multiple_database/tests.py,1817,test add,
django/tests/multiple_database/tests.py,1819,test remove,
django/tests/multiple_database/tests.py,1821,test clear,
django/tests/multiple_database/tests.py,1823,test setattr,
django/tests/multiple_database/tests.py,1825,test M2M collection,
django/tests/multiple_database/tests.py,1831,test related FK collection,
django/tests/multiple_database/tests.py,1842,Limit memory usage when calling 'migrate'.,
django/tests/multiple_database/models.py,39,This book manager doesn't do anything interesting; it just,
django/tests/multiple_database/models.py,40,exists to strip out the 'extra_arg' argument to certain,
django/tests/multiple_database/models.py,41,calls. This argument is used to establish that the BookManager,
django/tests/multiple_database/models.py,42,is actually getting used when it should be.,
django/tests/get_or_create/tests.py,83,Create a book through the publisher.,
django/tests/get_or_create/tests.py,86,The publisher should have one book.,
django/tests/get_or_create/tests.py,89,"Try get_or_create again, this time nothing should be created.",
django/tests/get_or_create/tests.py,92,And the publisher should still have one book.,
django/tests/get_or_create/tests.py,95,Add an author to the book.,
django/tests/get_or_create/tests.py,98,The book should have one author.,
django/tests/get_or_create/tests.py,101,"Try get_or_create again, this time nothing should be created.",
django/tests/get_or_create/tests.py,104,And the book should still have one author.,
django/tests/get_or_create/tests.py,107,Add a second author to the book.,
django/tests/get_or_create/tests.py,111,The book should have two authors now.,
django/tests/get_or_create/tests.py,114,Create an Author not tied to any books.,
django/tests/get_or_create/tests.py,117,There should be three Authors in total. The book object should have two.,
django/tests/get_or_create/tests.py,121,Try creating a book through an author.,
django/tests/get_or_create/tests.py,125,"Now Ed has two Books, Fred just one.",
django/tests/get_or_create/tests.py,129,Use the publisher's primary key value instead of a model instance.,
django/tests/get_or_create/tests.py,133,"Try get_or_create again, this time nothing should be created.",
django/tests/get_or_create/tests.py,137,The publisher should have three books.,
django/tests/get_or_create/tests.py,226,"pk 123456789 doesn't exist, so the tag object will be created.",
django/tests/get_or_create/tests.py,227,Saving triggers a unique constraint violation on 'text'.,
django/tests/get_or_create/tests.py,229,Tag objects can be created after the error.,
django/tests/get_or_create/tests.py,318,"If we execute the exact same statement, it won't create a Person.",
django/tests/get_or_create/tests.py,507,Avoid leaking connection for Oracle,
django/tests/get_or_create/tests.py,511,timeout after ~0.5 seconds,
django/tests/get_or_create/tests.py,520,update_or_create in a separate thread,
django/tests/get_or_create/tests.py,528,Update during lock,
django/tests/get_or_create/tests.py,532,Wait for thread to finish,
django/tests/get_or_create/tests.py,535,The update remains and it blocked.,
django/tests/get_or_create/tests.py,564,Avoid leaking connection for Oracle,
django/tests/get_or_create/tests.py,568,timeout after ~0.5 seconds,
django/tests/get_or_create/tests.py,575,update_or_create in a separate thread.,
django/tests/get_or_create/tests.py,580,Create object *after* initial attempt by update_or_create to get obj,
django/tests/get_or_create/tests.py,581,but before creation attempt.,
django/tests/get_or_create/tests.py,584,"At this point, the thread is pausing for 0.5 seconds, so now attempt",
django/tests/get_or_create/tests.py,585,to modify object before update_or_create() calls save(). This should,
django/tests/get_or_create/tests.py,586,be blocked until after the save().,
django/tests/get_or_create/tests.py,589,Wait for thread to finish,
django/tests/get_or_create/tests.py,591,Check call to update_or_create() succeeded and the subsequent,
django/tests/get_or_create/tests.py,592,(blocked) call to update().,
django/tests/get_or_create/tests.py,594,set by update_or_create(),
django/tests/get_or_create/tests.py,595,set by update(),
django/tests/custom_managers/tests.py,48,Public methods are copied,
django/tests/custom_managers/tests.py,50,Private methods are not copied,
django/tests/custom_managers/tests.py,58,Methods with queryset_only=False are copied even if they are private.,
django/tests/custom_managers/tests.py,60,Methods with queryset_only=True aren't copied even if they are public.,
django/tests/custom_managers/tests.py,76,Specialized querysets inherit from our custom queryset.,
django/tests/custom_managers/tests.py,289,The fun manager DOESN'T remove boring people.,
django/tests/custom_managers/tests.py,298,The boring manager DOES remove boring people.,
django/tests/custom_managers/tests.py,309,The fun manager ONLY clears fun people.,
django/tests/custom_managers/tests.py,369,The fun manager DOESN'T remove boring people.,
django/tests/custom_managers/tests.py,379,The boring manager DOES remove boring people.,
django/tests/custom_managers/tests.py,390,The fun manager ONLY clears fun people.,
django/tests/custom_managers/tests.py,450,The fun manager DOESN'T remove boring people.,
django/tests/custom_managers/tests.py,460,The boring manager DOES remove boring people.,
django/tests/custom_managers/tests.py,470,The fun manager ONLY clears fun people.,
django/tests/custom_managers/tests.py,539,"Each model class gets a ""_default_manager"" attribute, which is a",
django/tests/custom_managers/tests.py,540,reference to the first manager defined in the class.,
django/tests/custom_managers/tests.py,558,alternate manager,
django/tests/custom_managers/tests.py,565,explicit default manager,
django/tests/custom_managers/tests.py,579,explicit base manager,
django/tests/custom_managers/tests.py,606,"If the hidden object wasn't seen during the save process,",
django/tests/custom_managers/tests.py,607,there would now be two objects in the database.,
django/tests/custom_managers/tests.py,629,Annotation from the manager.,
django/tests/custom_managers/tests.py,631,save() fails if annotations that involve related fields aren't,
django/tests/custom_managers/tests.py,632,cleared before the update query.,
django/tests/custom_managers/tests.py,648,All of the RestrictedModel instances should have been,
django/tests/custom_managers/tests.py,649,"deleted, since they *all* pointed to the RelatedModel. If",
django/tests/custom_managers/tests.py,650,"the default manager is used, only the public one will be",
django/tests/custom_managers/tests.py,651,deleted.,
django/tests/custom_managers/tests.py,655,"The same test case as the last one, but for one-to-one",
django/tests/custom_managers/tests.py,656,"models, which are implemented slightly different internally,",
django/tests/custom_managers/tests.py,657,so it's a different code path.,
django/tests/custom_managers/models.py,74,QuerySet with an __init__() method that takes an additional argument.,
django/tests/lookup/test_timefield.py,10,Create a few Alarms,
django/tests/lookup/tests.py,22,Create a few Authors.,
django/tests/lookup/tests.py,25,Create a few Articles.,
django/tests/lookup/tests.py,68,Create a few Tags.,
django/tests/lookup/tests.py,77,We can use .exists() to check that there are some,
django/tests/lookup/tests.py,81,There should be none now!,
django/tests/lookup/tests.py,85,Integer value can be queried using string,
django/tests/lookup/tests.py,91,A date lookup can be performed using a string search,
django/tests/lookup/tests.py,106,"Each QuerySet gets iterator(), which is a generator that ""lazily""",
django/tests/lookup/tests.py,107,returns results using database-level iteration.,
django/tests/lookup/tests.py,123,iterator() can be used on any QuerySet.,
django/tests/lookup/tests.py,130,count() returns the number of objects matching search criteria.,
django/tests/lookup/tests.py,135,count() should respect sliced query sets.,
django/tests/lookup/tests.py,142,Date and date/time lookups can also be done with strings.,
django/tests/lookup/tests.py,146,in_bulk() takes a list of IDs and returns a dictionary mapping IDs to objects.,
django/tests/lookup/tests.py,198,values() returns a list of dictionaries instead of object instances --,
django/tests/lookup/tests.py,199,and you can specify which fields you want to retrieve.,
django/tests/lookup/tests.py,228,"You can use values() with iterator() for memory savings,",
django/tests/lookup/tests.py,229,because iterator() uses database-level iteration.,
django/tests/lookup/tests.py,242,"The values() method works with ""extra"" fields specified in extra(select).",
django/tests/lookup/tests.py,278,"You can specify fields from forward and reverse relations, just like filter().",
django/tests/lookup/tests.py,321,"However, an exception FieldDoesNotExist will be thrown if you specify",
django/tests/lookup/tests.py,322,a nonexistent field name in values() (a field that is neither in the,
django/tests/lookup/tests.py,323,model nor in extra(select)).,
django/tests/lookup/tests.py,330,"If you don't specify field names to values(), all are returned.",
django/tests/lookup/tests.py,343,"values_list() is similar to values(), except that the results are",
django/tests/lookup/tests.py,344,"returned as a list of tuples, rather than a list of dictionaries.",
django/tests/lookup/tests.py,345,"Within each tuple, the order of the elements is the same as the order",
django/tests/lookup/tests.py,346,of fields in the values_list() call.,
django/tests/lookup/tests.py,414,Every DateField and DateTimeField creates get_next_by_FOO() and,
django/tests/lookup/tests.py,415,"get_previous_by_FOO() methods. In the case of identical date values,",
django/tests/lookup/tests.py,416,these methods will use the ID as a fallback check. This guarantees,
django/tests/lookup/tests.py,417,that no records are skipped or duplicated.,
django/tests/lookup/tests.py,436,"Underscores, percent signs and backslashes have special meaning in the",
django/tests/lookup/tests.py,437,"underlying SQL code, but Django handles the quoting of them automatically.",
django/tests/lookup/tests.py,488,exclude() is the opposite of filter() when doing lookups:,
django/tests/lookup/tests.py,531,none() returns a QuerySet that behaves like any other QuerySet object,
django/tests/lookup/tests.py,540,using __in with an empty list should return an empty query set,
django/tests/lookup/tests.py,568,Programming errors are pointed out with nice error messages,
django/tests/lookup/tests.py,599,An invalid nested lookup on a related field raises a useful error.,
django/tests/lookup/tests.py,608,Create some articles with a bit more interesting headlines for testing field lookups:,
django/tests/lookup/tests.py,623,zero-or-more,
django/tests/lookup/tests.py,638,one-or-more,
django/tests/lookup/tests.py,643,wildcard,
django/tests/lookup/tests.py,648,leading anchor,
django/tests/lookup/tests.py,654,trailing anchor,
django/tests/lookup/tests.py,660,character sets,
django/tests/lookup/tests.py,671,and more articles:,
django/tests/lookup/tests.py,682,alternation,
django/tests/lookup/tests.py,707,greedy matching,
django/tests/lookup/tests.py,731,grouping and backreferences,
django/tests/lookup/tests.py,789,"'gt' is used as a code number for the year, e.g. 111=>2009.",
django/tests/lookup/tests.py,808,Games in 2010,
django/tests/lookup/tests.py,814,Games in 2011,
django/tests/lookup/tests.py,822,Games played in 2010 and 2011,
django/tests/lookup/tests.py,828,Players who played in 2009,
django/tests/lookup/tests.py,834,Players who played in 2010,
django/tests/lookup/tests.py,840,Players who played in 2011,
django/tests/lookup/tests.py,974,These tests will catch ValueError in Django 4.0 when using,
django/tests/lookup/tests.py,975,non-boolean values for an isnull lookup becomes forbidden.,
django/tests/lookup/tests.py,976,msg = (,
django/tests/lookup/tests.py,977,'The QuerySet value for an isnull lookup must be True or False.',
django/tests/lookup/tests.py,978,),
django/tests/field_subclassing/tests.py,21,The field is set to its default in the model constructor.,
django/tests/requests/tests.py,22,.GET and .POST should be QueryDicts,
django/tests/requests/tests.py,26,and FILES should be MultiValueDict,
django/tests/requests/tests.py,94,With trailing slash,
django/tests/requests/tests.py,102,Without trailing slash,
django/tests/requests/tests.py,145,With trailing slash,
django/tests/requests/tests.py,149,Without trailing slash,
django/tests/requests/tests.py,166,Actual URL sent by the browser (bytestring),
django/tests/requests/tests.py,167,Value in the WSGI environ dict (native string),
django/tests/requests/tests.py,169,Regression for #19468,
django/tests/requests/tests.py,173,The URL may be incorrectly encoded in a non-UTF-8 encoding (#26971),
django/tests/requests/tests.py,179,"Since it's impossible to decide the (wrong) encoding of the URL, it's",
django/tests/requests/tests.py,180,left percent-encoded in the path.,
django/tests/requests/tests.py,184,Read all of a limited stream,
django/tests/requests/tests.py,187,Reading again returns nothing.,
django/tests/requests/tests.py,190,Read a number of characters greater than the stream has to offer,
django/tests/requests/tests.py,193,Reading again returns nothing.,
django/tests/requests/tests.py,196,Read sequentially from a stream,
django/tests/requests/tests.py,200,Reading again returns nothing.,
django/tests/requests/tests.py,203,Read lines from a stream,
django/tests/requests/tests.py,205,"Read a full line, unconditionally",
django/tests/requests/tests.py,207,Read a number of characters less than a line,
django/tests/requests/tests.py,209,Read the rest of the partial line,
django/tests/requests/tests.py,211,"Read a full line, with a character limit greater than the line length",
django/tests/requests/tests.py,213,"Read the next line, deliberately terminated at the line end",
django/tests/requests/tests.py,215,Read the next line... just the line end,
django/tests/requests/tests.py,217,Read everything else.,
django/tests/requests/tests.py,220,Regression for #15018,
django/tests/requests/tests.py,221,"If a stream contains a newline, but the provided length",
django/tests/requests/tests.py,222,"is less than the number of provided characters, the newline",
django/tests/requests/tests.py,223,doesn't reset the available character count,
django/tests/requests/tests.py,227,Now expire the available characters,
django/tests/requests/tests.py,229,Reading again returns nothing.,
django/tests/requests/tests.py,232,"Same test, but with read, not readline.",
django/tests/requests/tests.py,310,"Because multipart is used for large amounts of data i.e. file uploads,",
django/tests/requests/tests.py,311,"we don't want the data held in memory twice, and we don't want to",
django/tests/requests/tests.py,312,silence the error by setting body = '' either.,
django/tests/requests/tests.py,334,Ticket #9054,
django/tests/requests/tests.py,335,There are cases in which the multipart data is related instead of,
django/tests/requests/tests.py,336,"being a binary upload, in which case it should still be accessible",
django/tests/requests/tests.py,337,via body.,
django/tests/requests/tests.py,359,According to:,
django/tests/requests/tests.py,360,https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13,
django/tests/requests/tests.py,361,"Every request.POST with Content-Length >= 0 is a valid request,",
django/tests/requests/tests.py,362,this test ensures that we handle Content-Length == 0.,
django/tests/requests/tests.py,391,Same test without specifying content-type,
django/tests/requests/tests.py,419,evaluate,
django/tests/requests/tests.py,434,evaluate,
django/tests/requests/tests.py,456,evaluate,
django/tests/requests/tests.py,457,Consume enough data to mess up the parsing:,
django/tests/requests/tests.py,591,Check if X_FORWARDED_HOST is provided.,
django/tests/requests/tests.py,599,X_FORWARDED_HOST is ignored.,
django/tests/requests/tests.py,602,Check if X_FORWARDED_HOST isn't provided.,
django/tests/requests/tests.py,611,Check if HTTP_HOST isn't provided.,
django/tests/requests/tests.py,619,"Check if HTTP_HOST isn't provided, and we're on a nonstandard port",
django/tests/requests/tests.py,634,Punycode for öäü.com,
django/tests/requests/tests.py,650,Poisoned host headers are rejected as suspicious,
django/tests/requests/tests.py,661,Check if X_FORWARDED_HOST is provided.,
django/tests/requests/tests.py,669,X_FORWARDED_HOST is obeyed.,
django/tests/requests/tests.py,672,Check if X_FORWARDED_HOST isn't provided.,
django/tests/requests/tests.py,681,Check if HTTP_HOST isn't provided.,
django/tests/requests/tests.py,689,"Check if HTTP_HOST isn't provided, and we're on a nonstandard port",
django/tests/requests/tests.py,697,Poisoned host headers are rejected as suspicious,
django/tests/requests/tests.py,705,Punycode for öäü.com,
django/tests/requests/tests.py,730,Shouldn't use the X-Forwarded-Port header,
django/tests/requests/tests.py,746,Should use the X-Forwarded-Port header,
django/tests/requests/tests.py,767,Other hostnames raise a DisallowedHost.,
django/tests/requests/tests.py,780,Valid-looking hosts,
django/tests/requests/tests.py,784,Punycode for öäü.com,
django/tests/requests/tests.py,791,Valid-looking hosts with a port number,
django/tests/requests/tests.py,837,//// creates a request with a path beginning with //,
django/tests/requests/tests.py,840,location isn't provided,
django/tests/requests/tests.py,842,An absolute URL,
django/tests/requests/tests.py,844,A schema-relative URL,
django/tests/requests/tests.py,846,Relative URLs,
django/tests/requests/tests.py,859,Non-headers are ignored.,
django/tests/requests/tests.py,865,These non-HTTP prefixed headers are included.,
django/tests/requests/tests.py,868,All HTTP-prefixed headers are included.,
django/tests/validation/test_error_messages.py,63,Wrong format,
django/tests/validation/test_error_messages.py,68,Correct format but invalid date,
django/tests/validation/test_error_messages.py,73,Correct format but invalid date/time,
django/tests/validation/test_error_messages.py,82,Wrong format,
django/tests/validation/test_error_messages.py,87,Correct format but invalid time,
django/tests/validation/tests.py,45,The limit_choices_to on the parent field says that a parent object's,
django/tests/validation/tests.py,46,"number attribute must be 10, so this should fail validation.",
django/tests/validation/tests.py,91,"Make sure the ""commit=False and set field values later"" idiom still",
django/tests/validation/tests.py,92,works with model validation.,
django/tests/validation/tests.py,104,Since a value for pub_date wasn't provided and the field is,
django/tests/validation/tests.py,105,"blank=True, model-validation should pass.",
django/tests/validation/tests.py,106,"Also, Article.clean() should be run, so pub_date will be filled after",
django/tests/validation/tests.py,107,"validation, so the form should save cleanly even though pub_date is",
django/tests/validation/tests.py,108,not allowed to be null.,
django/tests/validation/tests.py,119,"Even though pub_date is set to blank=True, an invalid value was",
django/tests/validation/tests.py,120,"provided, so it should fail validation.",
django/tests/validation/tests.py,173,These two addresses are the same with different syntax,
django/tests/validation/tests.py,180,"These two are different, because we are not doing IPv4 unpacking",
django/tests/validation/tests.py,186,"These two are the same, because we are doing IPv4 unpacking",
django/tests/validation/test_unique.py,46,Ref #21469,
django/tests/validation/test_unique.py,92,Regression test for #12560,
django/tests/validation/test_unique.py,99,Regression test for #12560,
django/tests/validation/test_unique.py,106,Regression test for #12132,
django/tests/validation/test_unique.py,121,Should work without errors,
django/tests/validation/test_unique.py,125,Should work without errors,
django/tests/validation/models.py,124,A model can't have multiple AutoFields,
django/tests/validation/models.py,125,Refs #12467.,
django/tests/admin_widgets/tests.py,49,Override any settings on the model admin,
django/tests/admin_widgets/tests.py,55,"Construct the admin, and ask it for a formfield",
django/tests/admin_widgets/tests.py,59,"""unwrap"" the widget wrapper, if needed",
django/tests/admin_widgets/tests.py,67,Return the formfield so that other tests can continue,
django/tests/admin_widgets/tests.py,225,Try posting with a nonexistent pk in a raw id field: this,
django/tests/admin_widgets/tests.py,226,"should result in an error message, not a server exception.",
django/tests/admin_widgets/tests.py,233,"This should result in an error message, not a server exception.",
django/tests/admin_widgets/tests.py,260,Backslash in verbose_name to ensure it is JavaScript escaped.,
django/tests/admin_widgets/tests.py,269,Backslash in verbose_name to ensure it is JavaScript escaped.,
django/tests/admin_widgets/tests.py,285,pass attrs to widget,
django/tests/admin_widgets/tests.py,300,pass attrs to widget,
django/tests/admin_widgets/tests.py,520,ForeignKeyRawIdWidget works with fields which aren't related to,
django/tests/admin_widgets/tests.py,521,the model's primary key.,
django/tests/admin_widgets/tests.py,540,FK to a model not registered with admin site. Raw ID widget should,
django/tests/admin_widgets/tests.py,541,have no magnifying glass link. See #16542,
django/tests/admin_widgets/tests.py,555,"FK to self, not registered with admin site. Raw ID widget should have",
django/tests/admin_widgets/tests.py,556,no magnifying glass link. See #16542,
django/tests/admin_widgets/tests.py,570,see #9258,
django/tests/admin_widgets/tests.py,617,M2M relationship with model not registered with admin site. Raw ID,
django/tests/admin_widgets/tests.py,618,widget should have no magnifying glass link. See #16542,
django/tests/admin_widgets/tests.py,643,Used to fail with a name error.,
django/tests/admin_widgets/tests.py,706,Related item links are hidden.,
django/tests/admin_widgets/tests.py,717,Related item links are present.,
django/tests/admin_widgets/tests.py,740,Open a page that has a date and time picker widgets,
django/tests/admin_widgets/tests.py,743,"First, with the date picker widget ---------------------------------",
django/tests/admin_widgets/tests.py,745,The date picker is hidden,
django/tests/admin_widgets/tests.py,747,Click the calendar icon,
django/tests/admin_widgets/tests.py,749,The date picker is visible,
django/tests/admin_widgets/tests.py,751,Press the ESC key,
django/tests/admin_widgets/tests.py,753,The date picker is hidden again,
django/tests/admin_widgets/tests.py,755,"Click the calendar icon, then on the 15th of current month",
django/tests/admin_widgets/tests.py,764,"Then, with the time picker widget ----------------------------------",
django/tests/admin_widgets/tests.py,766,The time picker is hidden,
django/tests/admin_widgets/tests.py,768,Click the time icon,
django/tests/admin_widgets/tests.py,770,The time picker is visible,
django/tests/admin_widgets/tests.py,779,Press the ESC key,
django/tests/admin_widgets/tests.py,781,The time picker is hidden again,
django/tests/admin_widgets/tests.py,783,"Click the time icon, then select the 'Noon' value",
django/tests/admin_widgets/tests.py,798,Open a page that has a date and time picker widgets,
django/tests/admin_widgets/tests.py,801,fill in the birth date.,
django/tests/admin_widgets/tests.py,804,Click the calendar icon,
django/tests/admin_widgets/tests.py,807,get all the tds within the calendar,
django/tests/admin_widgets/tests.py,811,make sure the first and last 6 cells have class nonday,
django/tests/admin_widgets/tests.py,821,Open a page that has a date and time picker widgets,
django/tests/admin_widgets/tests.py,824,fill in the birth date.,
django/tests/admin_widgets/tests.py,827,Click the calendar icon,
django/tests/admin_widgets/tests.py,830,get all the tds within the calendar,
django/tests/admin_widgets/tests.py,834,verify the selected cell,
django/tests/admin_widgets/tests.py,846,Open a page that has a date and time picker widgets,
django/tests/admin_widgets/tests.py,849,Click the calendar icon,
django/tests/admin_widgets/tests.py,852,get all the tds within the calendar,
django/tests/admin_widgets/tests.py,856,verify there are no cells with the selected class,
django/tests/admin_widgets/tests.py,868,Enter test data,
django/tests/admin_widgets/tests.py,871,Get month name translations for every locale,
django/tests/admin_widgets/tests.py,884,Get the expected caption,
django/tests/admin_widgets/tests.py,888,Test with every locale,
django/tests/admin_widgets/tests.py,891,Open a page that has a date picker widget,
django/tests/admin_widgets/tests.py,894,Click on the calendar icon,
django/tests/admin_widgets/tests.py,896,Make sure that the right month and year are displayed,
django/tests/admin_widgets/tests.py,916,"If we are neighbouring a DST, we add an hour of error margin.",
django/tests/admin_widgets/tests.py,930,"Click on the ""today"" and ""now"" shortcuts.",
django/tests/admin_widgets/tests.py,936,There is a time zone mismatch warning.,
django/tests/admin_widgets/tests.py,937,Warning: This would effectively fail if the TIME_ZONE defined in the,
django/tests/admin_widgets/tests.py,938,"settings has the same UTC offset as ""Asia/Singapore"" because the",
django/tests/admin_widgets/tests.py,939,mismatch warning would be rightfully missing from the page.,
django/tests/admin_widgets/tests.py,942,Submit the form.,
django/tests/admin_widgets/tests.py,946,"Make sure that ""now"" in javascript is within 10 seconds",
django/tests/admin_widgets/tests.py,947,"from ""now"" on the server side.",
django/tests/admin_widgets/tests.py,953,The above tests run with Asia/Singapore which are on the positive side of,
django/tests/admin_widgets/tests.py,954,UTC. Here we test with a timezone on the negative side.,
django/tests/admin_widgets/tests.py,995,Initial positions ---------------------------------------------------,
django/tests/admin_widgets/tests.py,1004,Click 'Choose all' --------------------------------------------------,
django/tests/admin_widgets/tests.py,1008,"There 's no 'Choose all' button in vertical mode, so individually",
django/tests/admin_widgets/tests.py,1009,select all options and click 'Choose'.,
django/tests/admin_widgets/tests.py,1022,Click 'Remove all' --------------------------------------------------,
django/tests/admin_widgets/tests.py,1026,"There 's no 'Remove all' button in vertical mode, so individually",
django/tests/admin_widgets/tests.py,1027,select all options and click 'Remove'.,
django/tests/admin_widgets/tests.py,1040,Choose some options ------------------------------------------------,
django/tests/admin_widgets/tests.py,1045,Check the title attribute is there for tool tips: ticket #20821,
django/tests/admin_widgets/tests.py,1065,Check the tooltip is still there after moving: ticket #20821,
django/tests/admin_widgets/tests.py,1071,Remove some options -------------------------------------------------,
django/tests/admin_widgets/tests.py,1085,Choose some more options --------------------------------------------,
django/tests/admin_widgets/tests.py,1099,Choose some more options --------------------------------------------,
django/tests/admin_widgets/tests.py,1103,Confirm they're selected after clicking inactive buttons: ticket #26575,
django/tests/admin_widgets/tests.py,1108,Unselect the options ------------------------------------------------,
django/tests/admin_widgets/tests.py,1112,Choose some more options --------------------------------------------,
django/tests/admin_widgets/tests.py,1116,Confirm they're selected after clicking inactive buttons: ticket #26575,
django/tests/admin_widgets/tests.py,1121,Unselect the options ------------------------------------------------,
django/tests/admin_widgets/tests.py,1125,Pressing buttons shouldn't change the URL.,
django/tests/admin_widgets/tests.py,1139,Save and check that everything is properly stored in the database ---,
django/tests/admin_widgets/tests.py,1142,Reload from database,
django/tests/admin_widgets/tests.py,1166,Initial values,
django/tests/admin_widgets/tests.py,1173,Typing in some characters filters out non-matching options,
django/tests/admin_widgets/tests.py,1179,Clearing the text box makes the other options reappear,
django/tests/admin_widgets/tests.py,1189,-----------------------------------------------------------------,
django/tests/admin_widgets/tests.py,1190,Choosing a filtered option sends it properly to the 'to' box.,
django/tests/admin_widgets/tests.py,1205,Clear text box,
django/tests/admin_widgets/tests.py,1213,-----------------------------------------------------------------,
django/tests/admin_widgets/tests.py,1214,Pressing enter on a filtered option sends it properly to,
django/tests/admin_widgets/tests.py,1215,the 'to' box.,
django/tests/admin_widgets/tests.py,1224,Save and check that everything is properly stored in the database ---,
django/tests/admin_widgets/tests.py,1227,Reload from database,
django/tests/admin_widgets/tests.py,1242,Navigate away and go back to the change form page.,
django/tests/admin_widgets/tests.py,1250,Everything is still in place,
django/tests/admin_widgets/tests.py,1271,self.selenium.refresh() or send_keys(Keys.F5) does hard reload and,
django/tests/admin_widgets/tests.py,1272,doesn't replicate what happens when a user clicks the browser's,
django/tests/admin_widgets/tests.py,1273,'Refresh' button.,
django/tests/admin_widgets/tests.py,1293,No value has been selected yet,
django/tests/admin_widgets/tests.py,1296,Open the popup window and click on a band,
django/tests/admin_widgets/tests.py,1303,The field now contains the selected band's id,
django/tests/admin_widgets/tests.py,1307,Reopen the popup window and click on another band,
django/tests/admin_widgets/tests.py,1314,The field now contains the other selected band's id,
django/tests/admin_widgets/tests.py,1323,No value has been selected yet,
django/tests/admin_widgets/tests.py,1326,Help text for the field is displayed,
django/tests/admin_widgets/tests.py,1332,Open the popup window and click on a band,
django/tests/admin_widgets/tests.py,1339,The field now contains the selected band's id,
django/tests/admin_widgets/tests.py,1343,Reopen the popup window and click on another band,
django/tests/admin_widgets/tests.py,1350,The field now contains the two selected bands' ids,
django/tests/admin_widgets/tests.py,1362,Click the Add User button to add new,
django/tests/admin_widgets/tests.py,1375,The field now contains the new user,
django/tests/admin_widgets/tests.py,1378,Click the Change User button to change it,
django/tests/admin_widgets/tests.py,1392,Go ahead and submit the form to make sure it works,
django/tests/admin_widgets/models.py,52,see #9258,
django/tests/admin_widgets/test_autocomplete_widget.py,87,"With 'band', a ForeignKey.",
django/tests/admin_widgets/test_autocomplete_widget.py,94,"With 'featuring', a ManyToManyField.",
django/tests/admin_widgets/test_autocomplete_widget.py,119,Language file is inserted here.,
django/tests/admin_widgets/test_autocomplete_widget.py,125,Language with code 00 does not exist.,
django/tests/admin_widgets/test_autocomplete_widget.py,127,Language files are case sensitive.,
django/tests/timezones/urls.py,3,NOQA: register tz_admin,
django/tests/timezones/tests.py,41,These tests use the EAT (Eastern Africa Time) and ICT (Indochina Time),
django/tests/timezones/tests.py,42,"who don't have Daylight Saving Time, so we can represent them easily",
django/tests/timezones/tests.py,43,with fixed offset timezones and use them directly as tzinfo in the,
django/tests/timezones/tests.py,44,constructors.,
django/tests/timezones/tests.py,46,settings.TIME_ZONE is forced to EAT. Most tests use a variant of,
django/tests/timezones/tests.py,47,"datetime.datetime(2011, 9, 1, 13, 20, 30), which translates to",
django/tests/timezones/tests.py,48,10:20:30 in UTC and 17:20:30 in ICT.,
django/tests/timezones/tests.py,51,Africa/Nairobi,
django/tests/timezones/tests.py,52,Asia/Bangkok,
django/tests/timezones/tests.py,60,"Clear cached properties, after first accessing them to ensure they exist.",
django/tests/timezones/tests.py,68,"Clear cached properties, after first accessing them to ensure they exist.",
django/tests/timezones/tests.py,96,interpret the naive datetime in local time to get the correct value,
django/tests/timezones/tests.py,105,interpret the naive datetime in local time to get the correct value,
django/tests/timezones/tests.py,114,interpret the naive datetime in local time to get the correct value,
django/tests/timezones/tests.py,123,interpret the naive datetime in local time to get the correct value,
django/tests/timezones/tests.py,167,Only min and max make sense for datetimes.,
django/tests/timezones/tests.py,178,Only min and max make sense for datetimes.,
django/tests/timezones/tests.py,225,Regression test for #17755,
django/tests/timezones/tests.py,245,Regression test for #17742,
django/tests/timezones/tests.py,248,This is 2011-09-02T01:30:00+03:00 in EAT,
django/tests/timezones/tests.py,263,naive datetimes are interpreted in local time,
django/tests/timezones/tests.py,280,naive datetimes are interpreted in local time,
django/tests/timezones/tests.py,341,"Connection timezone is equal to the current timezone, datetime",
django/tests/timezones/tests.py,342,shouldn't be converted.,
django/tests/timezones/tests.py,347,"Connection timezone is not equal to the current timezone, datetime",
django/tests/timezones/tests.py,348,should be converted (-4h).,
django/tests/timezones/tests.py,359,naive datetimes are interpreted in local time,
django/tests/timezones/tests.py,385,"These two dates fall in the same day in EAT, but in different days,",
django/tests/timezones/tests.py,386,years and months in UTC.,
django/tests/timezones/tests.py,397,Only min and max make sense for datetimes.,
django/tests/timezones/tests.py,408,Only min and max make sense for datetimes.,
django/tests/timezones/tests.py,501,Regression test for #17755,
django/tests/timezones/tests.py,550,Regression test for #17742,
django/tests/timezones/tests.py,553,This is 2011-09-02T01:30:00+03:00 in EAT,
django/tests/timezones/tests.py,558,Regression test for #17294,
django/tests/timezones/tests.py,583,@skipIfDBFeature and @skipUnlessDBFeature cannot be chained. The,
django/tests/timezones/tests.py,584,outermost takes precedence. Handle skipping manually instead.,
django/tests/timezones/tests.py,614,Backend-specific notes:,
django/tests/timezones/tests.py,615,"- JSON supports only milliseconds, microseconds will be truncated.",
django/tests/timezones/tests.py,616,- PyYAML dumps the UTC offset correctly for timezone-aware datetimes.,
django/tests/timezones/tests.py,617,"When PyYAML < 5.3 loads this representation, it subtracts the offset",
django/tests/timezones/tests.py,618,and returns a naive datetime object in UTC. PyYAML 5.3+ loads timezones,
django/tests/timezones/tests.py,619,correctly.,
django/tests/timezones/tests.py,620,Tests are adapted to take these quirks into account.,
django/tests/timezones/tests.py,633,"Depending on the yaml dumper, '!timestamp' might be absent",
django/tests/timezones/tests.py,820,Transform a list of keys in 'datetimes' to the expected template,
django/tests/timezones/tests.py,821,output. This makes the definition of 'results' more readable.,
django/tests/timezones/tests.py,825,Results for USE_TZ = True,
django/tests/timezones/tests.py,861,Changes for USE_TZ = False,
django/tests/timezones/tests.py,878,Use a pytz timezone as local time,
django/tests/timezones/tests.py,885,Use a pytz timezone as argument,
django/tests/timezones/tests.py,893,Use a pytz timezone name as argument,
django/tests/timezones/tests.py,911,bad datetime value,
django/tests/timezones/tests.py,916,bad timezone value,
django/tests/timezones/tests.py,954,Use a pytz timezone as argument,
django/tests/timezones/tests.py,961,Use a pytz timezone name as argument,
django/tests/timezones/tests.py,1045,Regression for #17343,
django/tests/timezones/tests.py,1063,this is obviously a bug,
django/tests/timezones/tests.py,1070,this is obviously a bug,
django/tests/timezones/tests.py,1198,re-fetch the object for backends that lose microseconds (MySQL),
django/tests/timezones/tests.py,1205,re-fetch the object for backends that lose microseconds (MySQL),
django/tests/model_formsets/tests.py,52,One existing untouched and two new unvalid forms,
django/tests/model_formsets/tests.py,60,Too long,
django/tests/model_formsets/tests.py,61,Violate unique constraint,
django/tests/model_formsets/tests.py,65,Make sure this form doesn't pass validation.,
django/tests/model_formsets/tests.py,69,"Then make sure that it *does* pass validation and delete the object,",
django/tests/model_formsets/tests.py,70,even though the data in new forms aren't actually valid.,
django/tests/model_formsets/tests.py,94,Make sure this form doesn't pass validation.,
django/tests/model_formsets/tests.py,98,"Then make sure that it *does* pass validation and delete the object,",
django/tests/model_formsets/tests.py,99,even though the data isn't actually valid.,
django/tests/model_formsets/tests.py,112,Simulate deletion of an object that doesn't exist in the database,
django/tests/model_formsets/tests.py,118,doesn't exist,
django/tests/model_formsets/tests.py,124,"The formset is valid even though poem.pk + 1 doesn't exist,",
django/tests/model_formsets/tests.py,125,because it's marked for deletion anyway,
django/tests/model_formsets/tests.py,130,Make sure the save went through correctly,
django/tests/model_formsets/tests.py,172,the number of forms rendered,
django/tests/model_formsets/tests.py,173,the number of forms with initial data,
django/tests/model_formsets/tests.py,174,the max number of forms,
django/tests/model_formsets/tests.py,192,Gah! We forgot Paul Verlaine. Let's create a formset to edit the,
django/tests/model_formsets/tests.py,193,existing authors with an extra form to add him. We *could* pass in a,
django/tests/model_formsets/tests.py,194,"queryset to restrict the Author objects we edit, but in this case",
django/tests/model_formsets/tests.py,195,we'll use it to display them in alphabetical order by name.,
django/tests/model_formsets/tests.py,222,the number of forms rendered,
django/tests/model_formsets/tests.py,223,the number of forms with initial data,
django/tests/model_formsets/tests.py,224,the max number of forms,
django/tests/model_formsets/tests.py,235,Only changed or new objects are returned from formset.save(),
django/tests/model_formsets/tests.py,244,"This probably shouldn't happen, but it will. If an add form was",
django/tests/model_formsets/tests.py,245,"marked for deletion, make sure we don't save that form.",
django/tests/model_formsets/tests.py,289,the number of forms rendered,
django/tests/model_formsets/tests.py,290,the number of forms with initial data,
django/tests/model_formsets/tests.py,291,the max number of forms,
django/tests/model_formsets/tests.py,305,No objects were changed or saved so nothing will come back.,
django/tests/model_formsets/tests.py,312,Let's edit a record to ensure save only returns that one record.,
django/tests/model_formsets/tests.py,315,the number of forms rendered,
django/tests/model_formsets/tests.py,316,the number of forms with initial data,
django/tests/model_formsets/tests.py,317,the max number of forms,
django/tests/model_formsets/tests.py,331,One record has changed.,
django/tests/model_formsets/tests.py,338,Test the behavior of commit=False and save_m2m,
django/tests/model_formsets/tests.py,347,create an Author instance to add to the meeting.,
django/tests/model_formsets/tests.py,353,the number of forms rendered,
django/tests/model_formsets/tests.py,354,the number of forms with initial data,
django/tests/model_formsets/tests.py,355,the max number of forms,
django/tests/model_formsets/tests.py,379,Test the behavior of max_num with model formsets. It should allow,
django/tests/model_formsets/tests.py,380,all existing related objects/inlines for a given object to be,
django/tests/model_formsets/tests.py,381,"displayed, but not allow the creation of new inlines beyond max_num.",
django/tests/model_formsets/tests.py,429,Test the behavior of min_num with model formsets. It should be,
django/tests/model_formsets/tests.py,430,added to extra.,
django/tests/model_formsets/tests.py,446,Test the behavior of min_num with existing objects.,
django/tests/model_formsets/tests.py,457,"change the name to ""Vladimir Mayakovsky"" just to be a jerk.",
django/tests/model_formsets/tests.py,467,the number of forms rendered,
django/tests/model_formsets/tests.py,468,the number of forms with initial data,
django/tests/model_formsets/tests.py,469,the max number of forms,
django/tests/model_formsets/tests.py,538,the number of forms rendered,
django/tests/model_formsets/tests.py,539,the number of forms with initial data,
django/tests/model_formsets/tests.py,540,the max number of forms,
django/tests/model_formsets/tests.py,574,the number of forms rendered,
django/tests/model_formsets/tests.py,575,the number of forms with initial data,
django/tests/model_formsets/tests.py,576,the max number of forms,
django/tests/model_formsets/tests.py,590,We can also create a formset that is tied to a parent model. This is,
django/tests/model_formsets/tests.py,591,how the admin system's edit inline functionality works.,
django/tests/model_formsets/tests.py,621,the number of forms rendered,
django/tests/model_formsets/tests.py,622,the number of forms with initial data,
django/tests/model_formsets/tests.py,623,the max number of forms,
django/tests/model_formsets/tests.py,638,"Now that we've added a book to Charles Baudelaire, let's try adding",
django/tests/model_formsets/tests.py,639,"another one. This time though, an edit form will be available for",
django/tests/model_formsets/tests.py,640,every existing book.,
django/tests/model_formsets/tests.py,673,the number of forms rendered,
django/tests/model_formsets/tests.py,674,the number of forms with initial data,
django/tests/model_formsets/tests.py,675,the max number of forms,
django/tests/model_formsets/tests.py,690,"As you can see, 'Les Paradis Artificiels' is now a book belonging to",
django/tests/model_formsets/tests.py,691,Charles Baudelaire.,
django/tests/model_formsets/tests.py,698,The save_as_new parameter lets you re-associate the data to a new,
django/tests/model_formsets/tests.py,699,instance.  This is used in the admin for save_as functionality.,
django/tests/model_formsets/tests.py,703,An immutable QueryDict simulates request.POST.,
django/tests/model_formsets/tests.py,706,the number of forms rendered,
django/tests/model_formsets/tests.py,707,the number of forms with initial data,
django/tests/model_formsets/tests.py,708,the max number of forms,
django/tests/model_formsets/tests.py,729,Test using a custom prefix on an inline formset.,
django/tests/model_formsets/tests.py,750,Test inline formsets where the inline-edited object has a custom,
django/tests/model_formsets/tests.py,751,primary key that is not the fk to the parent object.,
django/tests/model_formsets/tests.py,774,the number of forms rendered,
django/tests/model_formsets/tests.py,775,the number of forms with initial data,
django/tests/model_formsets/tests.py,776,the max number of forms,
django/tests/model_formsets/tests.py,793,Test inline formsets where the inline-edited object uses multi-table,
django/tests/model_formsets/tests.py,794,"inheritance, thus has a non AutoField yet auto-created primary key.",
django/tests/model_formsets/tests.py,816,the number of forms rendered,
django/tests/model_formsets/tests.py,817,the number of forms with initial data,
django/tests/model_formsets/tests.py,818,the max number of forms,
django/tests/model_formsets/tests.py,834,Test inline formsets where the inline-edited object has a,
django/tests/model_formsets/tests.py,835,unique_together constraint with a nullable member,
django/tests/model_formsets/tests.py,843,the number of forms rendered,
django/tests/model_formsets/tests.py,844,the number of forms with initial data,
django/tests/model_formsets/tests.py,845,the max number of forms,
django/tests/model_formsets/tests.py,871,"change the name to ""Brooklyn Bridge"" just to be a jerk.",
django/tests/model_formsets/tests.py,881,the number of forms rendered,
django/tests/model_formsets/tests.py,882,the number of forms with initial data,
django/tests/model_formsets/tests.py,883,the max number of forms,
django/tests/model_formsets/tests.py,899,We can provide a custom queryset to our InlineFormSet:,
django/tests/model_formsets/tests.py,944,the number of forms rendered,
django/tests/model_formsets/tests.py,945,the number of forms with initial data,
django/tests/model_formsets/tests.py,946,the max number of forms,
django/tests/model_formsets/tests.py,985,the number of forms rendered,
django/tests/model_formsets/tests.py,986,the number of forms with initial data,
django/tests/model_formsets/tests.py,987,the max number of forms,
django/tests/model_formsets/tests.py,1020,The Poet instance is saved after the formset instantiation. This,
django/tests/model_formsets/tests.py,1021,happens in admin's changeform_view() when adding a new object and,
django/tests/model_formsets/tests.py,1022,some inlines in the same request.,
django/tests/model_formsets/tests.py,1035,We need to ensure that it is displayed,
django/tests/model_formsets/tests.py,1048,"Custom primary keys with ForeignKey, OneToOneField and AutoField",
django/tests/model_formsets/tests.py,1131,Ensure a custom primary key that is a ForeignKey or OneToOneField get rendered for the user to choose.,
django/tests/model_formsets/tests.py,1203,ForeignKey with unique=True should enforce max_num=1,
django/tests/model_formsets/tests.py,1252,If validate_max is set and max_num is less than TOTAL_FORMS in the,
django/tests/model_formsets/tests.py,1253,"data, then throw an exception. MAX_NUM_FORMS in the data is",
django/tests/model_formsets/tests.py,1254,irrelevant here (it's output as a hint for the client but its,
django/tests/model_formsets/tests.py,1255,value in the returned data is not checked),
django/tests/model_formsets/tests.py,1260,should be ignored,
django/tests/model_formsets/tests.py,1272,Now test the same thing without the validate_max flag to ensure,
django/tests/model_formsets/tests.py,1273,default behavior is unchanged,
django/tests/model_formsets/tests.py,1307,Also see bug #8882.,
django/tests/model_formsets/tests.py,1327,attempt to save the same revision against the same repo.,
django/tests/model_formsets/tests.py,1340,unique_together with inlineformset_factory with overridden form fields,
django/tests/model_formsets/tests.py,1341,Also see #9494,
django/tests/model_formsets/tests.py,1356,Use of callable defaults (see bug #7975).,
django/tests/model_formsets/tests.py,1362,Django will render a hidden field for model fields that have a callable,
django/tests/model_formsets/tests.py,1363,default. This is required to ensure the value is tested for change correctly,
django/tests/model_formsets/tests.py,1364,when determine what extra forms have changed to save.,
django/tests/model_formsets/tests.py,1366,this formset only has one form,
django/tests/model_formsets/tests.py,1384,test for validation with callable defaults. Validations rely on hidden fields,
django/tests/model_formsets/tests.py,1397,now test for when the data changes,
django/tests/model_formsets/tests.py,1411,now test with split datetime fields,
django/tests/model_formsets/tests.py,1445,inlineformset_factory tests with fk having null=True. see #9462.,
django/tests/model_formsets/tests.py,1446,create some data that will exhibit the issue,
django/tests/model_formsets/tests.py,1490,a formset for a Model that has a custom primary key that still needs to be,
django/tests/model_formsets/tests.py,1491,added to the formset automatically,
django/tests/model_formsets/tests.py,1496,has_changed should compare model instance and primary key,
django/tests/model_formsets/tests.py,1497,see #18898,
django/tests/model_formsets/tests.py,1512,has_changed should work with queryset and list of pk's,
django/tests/model_formsets/tests.py,1513,see #18898,
django/tests/model_formsets/tests.py,1557,"Only the price field is specified, this should skip any unique checks since",
django/tests/model_formsets/tests.py,1558,the unique_together is not fulfilled. This will fail with a KeyError if broken.,
django/tests/model_formsets/tests.py,1673,A model not in the formset's queryset.,
django/tests/model_formsets/tests.py,1676,This formset is only for Walt Whitman and shouldn't accept data for,
django/tests/model_formsets/tests.py,1677,other_author.,
django/tests/model_formsets/tests.py,1681,The name of other_author shouldn't be changed and new models aren't,
django/tests/model_formsets/tests.py,1682,created.,
django/tests/model_formsets/models.py,35,Ensure author is always accessible in clean method,
django/tests/model_formsets/models.py,54,Optional secondary author,
django/tests/model_formsets/models.py,88,models for inheritance tests.,
django/tests/model_formsets/models.py,110,this is purely for testing the data doesn't matter here :),
django/tests/model_formsets/models.py,154,models for testing unique_together validation when a fk is involved and,
django/tests/model_formsets/models.py,155,using inlineformset_factory.,
django/tests/model_formsets/models.py,174,models for testing callable defaults (see bug #7975). If you define a model,
django/tests/model_formsets/models.py,175,"with a callable default value, you cannot rely on the initial value in a",
django/tests/model_formsets/models.py,176,form.,
django/tests/model_formsets/models.py,187,models for testing a null=True fk to a parent,
django/tests/model_formsets/models.py,200,Models for testing custom ModelForm save methods in formsets and inline formsets,
django/tests/model_formsets/models.py,226,Models for testing UUID primary keys,
django/tests/known_related_objects/tests.py,60,"2 queries here as pool 3 has tournament 2, which is not cached",
django/tests/known_related_objects/tests.py,65,and the other direction,
django/tests/nested_foreign_keys/tests.py,8,These are tests for #16715. The basic scheme is always the same: 3 models with,
django/tests/nested_foreign_keys/tests.py,9,"2 relations. The first relation may be null, while the second is non-nullable.",
django/tests/nested_foreign_keys/tests.py,10,"In some cases, Django would pick the wrong join type for the second relation,",
django/tests/nested_foreign_keys/tests.py,11,resulting in missing objects in the queryset.,
django/tests/nested_foreign_keys/tests.py,12,,
django/tests/nested_foreign_keys/tests.py,13,Model A,
django/tests/nested_foreign_keys/tests.py,14,| (Relation A/B : nullable),
django/tests/nested_foreign_keys/tests.py,15,Model B,
django/tests/nested_foreign_keys/tests.py,16,| (Relation B/C : non-nullable),
django/tests/nested_foreign_keys/tests.py,17,Model C,
django/tests/nested_foreign_keys/tests.py,18,,
django/tests/nested_foreign_keys/tests.py,19,Because of the possibility of NULL rows resulting from the LEFT OUTER JOIN,
django/tests/nested_foreign_keys/tests.py,20,"between Model A and Model B (i.e. instances of A without reference to B),",
django/tests/nested_foreign_keys/tests.py,21,"the second join must also be LEFT OUTER JOIN, so that we do not ignore",
django/tests/nested_foreign_keys/tests.py,22,instances of A that do not reference B.,
django/tests/nested_foreign_keys/tests.py,23,,
django/tests/nested_foreign_keys/tests.py,24,Relation A/B can either be an explicit foreign key or an implicit reverse,
django/tests/nested_foreign_keys/tests.py,25,relation such as introduced by one-to-one relations (through multi-table,
django/tests/nested_foreign_keys/tests.py,26,inheritance).,
django/tests/nested_foreign_keys/tests.py,33,This test failed in #16715 because in some cases INNER JOIN was selected,
django/tests/nested_foreign_keys/tests.py,34,for the second foreign key relation instead of LEFT OUTER JOIN.,
django/tests/nested_foreign_keys/tests.py,41,This failed.,
django/tests/nested_foreign_keys/tests.py,48,This failed.,
django/tests/nested_foreign_keys/tests.py,51,Simple filter/exclude queries for good measure.,
django/tests/nested_foreign_keys/tests.py,55,These all work because the second foreign key in the chain has null=True.,
django/tests/nested_foreign_keys/tests.py,81,This test failed in #16715 because in some cases INNER JOIN was selected,
django/tests/nested_foreign_keys/tests.py,82,for the second foreign key relation instead of LEFT OUTER JOIN.,
django/tests/nested_foreign_keys/tests.py,96,This failed.,
django/tests/nested_foreign_keys/tests.py,102,These all work because the second foreign key in the chain has null=True.,
django/tests/nested_foreign_keys/tests.py,124,Some additional tests for #16715. The only difference is the depth of the,
django/tests/nested_foreign_keys/tests.py,125,nesting as we now use 4 models instead of 3 (and thus 3 relations). This,
django/tests/nested_foreign_keys/tests.py,126,checks if promotion of join types works for deeper nesting too.,
django/tests/settings_tests/tests.py,204,"SimpleTestCase can be decorated by override_settings, but not ut.TestCase",
django/tests/settings_tests/tests.py,229,,
django/tests/settings_tests/tests.py,230,Regression tests for #10130: deleting settings.,
django/tests/settings_tests/tests.py,231,,
django/tests/settings_tests/tests.py,255,Should also work for a non-overridden setting,
django/tests/settings_tests/tests.py,281,inner's __exit__ should have restored the settings of the outer,
django/tests/settings_tests/tests.py,282,"context manager, not those when the class was instantiated",
django/tests/settings_tests/tests.py,389,Client connects via HTTP.,
django/tests/settings_tests/tests.py,428,Force evaluation of the lazy object.,
django/tests/settings_tests/tests.py,488,Create a spy that's connected to the `setting_changed` signal and,
django/tests/settings_tests/tests.py,489,executed AFTER `self.receiver`.,
django/tests/settings_tests/tests.py,534,"Two settings were touched, so expect two calls of `spy_receiver`.",
django/tests/settings_tests/tests.py,544,"Two settings were touched, so expect two calls of `spy_receiver`.",
django/tests/settings_tests/tests.py,554,"Two settings were touched, so expect two calls of `spy_receiver`.",
django/tests/settings_tests/tests.py,569,This call shouldn't raise any errors.,
django/tests/settings_tests/tests.py,580,"Don't add SCRIPT_NAME prefix to valid URLs, absolute paths or None.",
django/tests/settings_tests/tests.py,600,Relative paths.,
django/tests/settings_tests/tests.py,604,Invalid URLs.,
django/tests/settings_tests/tests.py,606,Blank settings.,
django/tests/test_runner/test_discover_runner.py,169,"All others can follow in unspecified order, including doctests",
django/tests/test_runner/test_debug_sql.py,99,"If there are errors/failures in subtests but not in test itself,",
django/tests/test_runner/test_debug_sql.py,100,the status is not written. That behavior comes from Python.,
django/tests/test_runner/tests.py,62,Explicit dependencies,
django/tests/test_runner/tests.py,66,Implied dependencies,
django/tests/test_runner/tests.py,90,Explicit dependencies,
django/tests/test_runner/tests.py,96,Implicit dependencies,
django/tests/test_runner/tests.py,123,reordering aliases shouldn't matter,
django/tests/test_runner/tests.py,244,Assert connections mocking is appropriately applied by preventing,
django/tests/test_runner/tests.py,245,any attempts at calling create_test_db on the global connection,
django/tests/test_runner/tests.py,246,objects.,
django/tests/test_runner/tests.py,274,Transaction support is properly initialized for the 'other' DB.,
django/tests/test_runner/tests.py,276,And all the DBs report that they support transactions.,
django/tests/test_runner/tests.py,341,Using the real current name as old_name to not mess with the test suite.,
django/tests/test_runner/tests.py,387,Regular model,
django/tests/test_runner/tests.py,390,Auto-created many-to-many through model,
django/tests/test_runner/tests.py,393,Many-to-many through model,
django/tests/test_runner/tests.py,466,Suppress the output when running TestDjangoTestCase.,
django/tests/test_runner/models.py,10,A set of models that use a non-abstract inherited 'through' model.,
django/tests/test_runner/test_parallel.py,42,"This method name doesn't begin with ""test"" to prevent test discovery",
django/tests/test_runner/test_parallel.py,43,from seeing it.,
django/tests/test_runner/test_parallel.py,71,Manually run a test with failing subtests to prevent the failures,
django/tests/test_runner/test_parallel.py,72,from affecting the actual test run.,
django/tests/files/tests.py,61,remove temporary file,
django/tests/files/tests.py,79,Should not set mode to None if it is not present.,
django/tests/files/tests.py,80,"See #14681, stdlib gzip module crashes if mode is set to None",
django/tests/files/tests.py,115,Set chunk size to create a boundary after \n:,
django/tests/files/tests.py,116,b'one\n...,
django/tests/files/tests.py,117,^,
django/tests/files/tests.py,123,Set chunk size to create a boundary between \r and \n:,
django/tests/files/tests.py,124,b'one\r\n...,
django/tests/files/tests.py,125,^,
django/tests/files/tests.py,131,Set chunk size to create a boundary after \r:,
django/tests/files/tests.py,132,b'one\r...,
django/tests/files/tests.py,133,^,
django/tests/files/tests.py,263,We need to inject a modified open() builtin into the images module,
django/tests/files/tests.py,264,that checks if the file was closed properly if the function is,
django/tests/files/tests.py,265,called with a filename instead of a file object.,
django/tests/files/tests.py,266,get_image_dimensions will call our catching_open instead of the,
django/tests/files/tests.py,267,regular builtin one.,
django/tests/files/tests.py,366,file_move_safe() raises OSError if the destination file exists and,
django/tests/files/tests.py,367,allow_overwrite is False.,
django/tests/files/tests.py,371,should allow it and continue on if allow_overwrite is True,
django/tests/files/tests.py,387,This exception is required to reach the copystat() call in,
django/tests/files/tests.py,388,file_safe_move().,
django/tests/files/tests.py,390,An error besides EPERM isn't ignored.,
django/tests/files/tests.py,394,EPERM is ignored.,
django/tests/admin_checks/tests.py,61,ForeignKey(unique=True),
django/tests/admin_checks/tests.py,140,The first error doesn't happen if,
django/tests/admin_checks/tests.py,141,'django.contrib.auth.backends.ModelBackend' isn't in,
django/tests/admin_checks/tests.py,142,AUTHENTICATION_BACKENDS.,
django/tests/admin_checks/tests.py,360,not a tuple,
django/tests/admin_checks/tests.py,384,not a tuple,
django/tests/admin_checks/tests.py,737,Missing attribute,
django/tests/admin_checks/tests.py,922,Temporarily pretending apps are not ready yet. This issue can happen,
django/tests/admin_checks/tests.py,923,if the value of 'list_filter' refers to a 'through__field'.,
django/tests/admin_checks/models.py,26,does nothing,
django/tests/fixtures_regress/tests.py,1,Unittests for fixtures.,
django/tests/fixtures_regress/tests.py,45,Load a fixture that uses PK=1,
django/tests/fixtures_regress/tests.py,52,"Create a new animal. Without a sequence reset, this new object",
django/tests/fixtures_regress/tests.py,53,"will take a PK of 1 (on Postgres), and the save will fail.",
django/tests/fixtures_regress/tests.py,110,Load a pretty-printed XML fixture with Nulls.,
django/tests/fixtures_regress/tests.py,125,Load a pretty-printed XML fixture with Nulls.,
django/tests/fixtures_regress/tests.py,293,"Just for good measure, run the same query again.",
django/tests/fixtures_regress/tests.py,294,"Under the influence of ticket #7572, this will",
django/tests/fixtures_regress/tests.py,295,give a different result to the previous call.,
django/tests/fixtures_regress/tests.py,356,"Output order isn't guaranteed, so check for parts",
django/tests/fixtures_regress/tests.py,359,Get rid of artifacts like '000000002' to eliminate the differences,
django/tests/fixtures_regress/tests.py,360,between different Python versions.,
django/tests/fixtures_regress/tests.py,388,Create an instance of the concrete class,
django/tests/fixtures_regress/tests.py,790,Order between M2MComplexA and M2MComplexB doesn't matter. The through,
django/tests/fixtures_regress/tests.py,791,"model has dependencies to them though, so it should come last.",
django/tests/fixtures_regress/tests.py,804,"The dependency sorting should not result in an error, and the",
django/tests/fixtures_regress/tests.py,805,through model should have dependencies to the other models and as,
django/tests/fixtures_regress/tests.py,806,such come last in the list.,
django/tests/fixtures_regress/tests.py,878,relative_prefix is something like tests/fixtures_regress or,
django/tests/fixtures_regress/tests.py,879,fixtures_regress depending on how runtests.py is invoked.,
django/tests/fixtures_regress/tests.py,880,All path separators must be / in order to be a proper regression test on,
django/tests/fixtures_regress/tests.py,881,"Windows, so replace as appropriate.",
django/tests/fixtures_regress/models.py,11,use a non-default name for the default manager,
django/tests/fixtures_regress/models.py,22,For testing when upper case letter in app name; regression for #4057,
django/tests/fixtures_regress/models.py,49,"Models to regression test #7572, #20820",
django/tests/fixtures_regress/models.py,62,Subclass of a model with a ManyToManyField for test_ticket_20820,
django/tests/fixtures_regress/models.py,67,Models to regression test #22421,
django/tests/fixtures_regress/models.py,78,Models to regression test #11428,
django/tests/fixtures_regress/models.py,94,Check for forward references in FKs and M2Ms with natural keys,
django/tests/fixtures_regress/models.py,127,"Person doesn't actually have a dependency on store, but we need to define",
django/tests/fixtures_regress/models.py,128,one to test the behavior of the dependency resolution algorithm.,
django/tests/fixtures_regress/models.py,179,ome models with pathological circular dependencies,
django/tests/fixtures_regress/models.py,236,Model for regression test of #11101,
django/tests/fixtures_regress/models.py,330,Fake the dependency for a circularity,
django/tests/swappable_models/tests.py,13,Limit memory usage when calling 'migrate'.,
django/tests/swappable_models/tests.py,24,Delete all permissions and content_types,
django/tests/swappable_models/tests.py,28,Re-run migrate. This will re-build the permissions and content types.,
django/tests/swappable_models/tests.py,32,"Content types and permissions exist for the swapped model,",
django/tests/swappable_models/tests.py,33,but not for the swappable model.,
django/tests/invalid_models_tests/test_custom_fields.py,12,None indicates not to create a column in the database.,
django/tests/invalid_models_tests/test_relative_fields.py,14,There would be a clash if Model.field installed an accessor.,
django/tests/invalid_models_tests/test_relative_fields.py,24,"Model names are resolved when a model is being created, so we cannot",
django/tests/invalid_models_tests/test_relative_fields.py,25,test relative fields in isolation and we need to attach them to a,
django/tests/invalid_models_tests/test_relative_fields.py,26,model.,
django/tests/invalid_models_tests/test_relative_fields.py,169,Too much foreign keys to Person.,
django/tests/invalid_models_tests/test_relative_fields.py,204,The last foreign key should point to Group model.,
django/tests/invalid_models_tests/test_relative_fields.py,226,No foreign key to Person,
django/tests/invalid_models_tests/test_relative_fields.py,376,No unique=True,
django/tests/invalid_models_tests/test_relative_fields.py,464,Note that both fields are not unique.,
django/tests/invalid_models_tests/test_relative_fields.py,612,"A model that can be, but isn't swapped out. References to this",
django/tests/invalid_models_tests/test_relative_fields.py,613,model should *not* raise any validation error.,
django/tests/invalid_models_tests/test_relative_fields.py,703,a Python keyword,
django/tests/invalid_models_tests/test_relative_fields.py,706,non-ASCII,
django/tests/invalid_models_tests/test_relative_fields.py,1337,"New tests should not be included here, because this is a single,",
django/tests/invalid_models_tests/test_relative_fields.py,1338,"self-contained sanity check, not a test of everything.",
django/tests/invalid_models_tests/test_backend_specific.py,10,"Prevent checks from being run on the 'other' database, which doesn't have",
django/tests/invalid_models_tests/test_backend_specific.py,11,its check_field() method mocked in the test.,
django/tests/invalid_models_tests/test_models.py,136,unique_together tests are very similar to index_together tests.,
django/tests/invalid_models_tests/test_models.py,188,unique_together can be a simple tuple,
django/tests/invalid_models_tests/test_models.py,409,A model with very long name which will be used to set relations to.,
django/tests/invalid_models_tests/test_models.py,413,Main model for which checks will be performed.,
django/tests/invalid_models_tests/test_models.py,434,Models used for setting `through` in M2M field.,
django/tests/invalid_models_tests/test_models.py,455,First error because of M2M field set on the model with long name.,
django/tests/invalid_models_tests/test_models.py,458,Some databases support names longer than the test name.,
django/tests/invalid_models_tests/test_models.py,473,Second error because the FK specified in the `through` model,
django/tests/invalid_models_tests/test_models.py,474,`m2msimple` has auto-generated name longer than allowed.,
django/tests/invalid_models_tests/test_models.py,475,There will be no check errors in the other M2M because it,
django/tests/invalid_models_tests/test_models.py,476,specifies db_column for the FK in `through` model even if the actual,
django/tests/invalid_models_tests/test_models.py,477,name is longer than the limits of the database.,
django/tests/invalid_models_tests/test_models.py,491,Check for long column names is called only for specified database,
django/tests/invalid_models_tests/test_models.py,492,aliases.,
django/tests/invalid_models_tests/test_models.py,518,Check for long column names is called only for specified database,
django/tests/invalid_models_tests/test_models.py,519,aliases.,
django/tests/invalid_models_tests/test_models.py,589,"Here we have two clashed: id (automatic field) and clash, because",
django/tests/invalid_models_tests/test_models.py,590,both parents define these fields.,
django/tests/invalid_models_tests/test_models.py,615,This field doesn't result in a clash.,
django/tests/invalid_models_tests/test_models.py,619,"This field clashes with parent ""f_id"" field.",
django/tests/invalid_models_tests/test_models.py,1180,The autogenerated `db_table` will be bar_foos.,
django/tests/invalid_models_tests/test_models.py,1202,The autogenerated db_table is bar_foos.,
django/tests/invalid_models_tests/test_models.py,1229,Unmanaged models that shadow the above models. Reused table names,
django/tests/invalid_models_tests/test_models.py,1230,shouldn't be flagged by any checks.,
django/tests/invalid_models_tests/test_ordinary_fields.py,25,primary_key must be True. Refs #12467.,
django/tests/invalid_models_tests/test_ordinary_fields.py,29,"Prevent Django from autocreating `id` AutoField, which would",
django/tests/invalid_models_tests/test_ordinary_fields.py,30,"result in an error, because a model must have exactly one",
django/tests/invalid_models_tests/test_ordinary_fields.py,31,AutoField.,
django/tests/invalid_models_tests/test_ordinary_fields.py,425,doesn't raise a warning,
django/tests/invalid_models_tests/test_ordinary_fields.py,467,doesn't raise a warning,
django/tests/invalid_models_tests/test_ordinary_fields.py,667,NOQA,
django/tests/invalid_models_tests/test_ordinary_fields.py,731,doesn't raise a warning,
django/tests/postgres_tests/test_indexes.py,194,Ensure the table is there and doesn't have an index.,
django/tests/postgres_tests/test_indexes.py,196,Add the index,
django/tests/postgres_tests/test_indexes.py,202,Check gin index was added,
django/tests/postgres_tests/test_indexes.py,204,Drop the index,
django/tests/postgres_tests/test_indexes.py,333,Ensure the table is there and doesn't have an index.,
django/tests/postgres_tests/test_indexes.py,335,Add the index.,
django/tests/postgres_tests/test_indexes.py,341,The index was added.,
django/tests/postgres_tests/test_indexes.py,343,Drop the index.,
django/tests/postgres_tests/test_indexes.py,361,Ensure the table is there and doesn't have an index.,
django/tests/postgres_tests/test_indexes.py,363,Add the index.,
django/tests/postgres_tests/test_indexes.py,369,The index was added.,
django/tests/postgres_tests/test_indexes.py,371,Drop the index.,
django/tests/postgres_tests/test_indexes.py,389,Ensure the table is there and doesn't have an index.,
django/tests/postgres_tests/test_indexes.py,391,Add the index.,
django/tests/postgres_tests/test_indexes.py,397,The index was added.,
django/tests/postgres_tests/test_indexes.py,399,Drop the index.,
django/tests/postgres_tests/test_indexes.py,417,Ensure the table is there and doesn't have an index.,
django/tests/postgres_tests/test_indexes.py,419,Add the index.,
django/tests/postgres_tests/test_indexes.py,425,The index was added.,
django/tests/postgres_tests/test_indexes.py,427,Drop the index.,
django/tests/postgres_tests/test_bulk_update.py,12,psycopg2 isn't installed.,
django/tests/postgres_tests/test_aggregates.py,17,psycopg2 is not installed,
django/tests/postgres_tests/test_aggregates.py,345,Tests for base class (StatAggregate),
django/tests/postgres_tests/test_aggregates.py,362,Test aggregates,
django/tests/postgres_tests/test_signals.py,10,pyscogp2 isn't installed.,
django/tests/postgres_tests/test_trigram.py,33,Round result of similarity because PostgreSQL 12+ uses greater,
django/tests/postgres_tests/test_trigram.py,34,precision.,
django/tests/postgres_tests/test_trigram.py,45,Round result of distance because PostgreSQL 12+ uses greater,
django/tests/postgres_tests/test_trigram.py,46,precision.,
django/tests/postgres_tests/test_operations.py,56,Add index.,
django/tests/postgres_tests/test_operations.py,60,Reversal.,
django/tests/postgres_tests/test_operations.py,64,Deconstruction.,
django/tests/postgres_tests/test_operations.py,79,Add index.,
django/tests/postgres_tests/test_operations.py,83,Reversal.,
django/tests/postgres_tests/test_operations.py,95,Add index.,
django/tests/postgres_tests/test_operations.py,99,Reversal.,
django/tests/postgres_tests/test_operations.py,135,Remove index.,
django/tests/postgres_tests/test_operations.py,139,Reversal.,
django/tests/postgres_tests/test_operations.py,143,Deconstruction.,
django/tests/postgres_tests/test_operations.py,164,Don't create an extension.,
django/tests/postgres_tests/test_operations.py,169,Reversal.,
django/tests/postgres_tests/test_operations.py,179,Create an extension.,
django/tests/postgres_tests/test_operations.py,184,Reversal.,
django/tests/postgres_tests/test_constraints.py,227,Create exclusion constraint.,
django/tests/postgres_tests/test_constraints.py,232,Add initial reservations.,
django/tests/postgres_tests/test_constraints.py,254,Overlap dates.,
django/tests/postgres_tests/test_constraints.py,263,Valid range.,
django/tests/postgres_tests/test_constraints.py,265,Other room.,
django/tests/postgres_tests/test_constraints.py,272,Cancelled reservation.,
django/tests/postgres_tests/test_constraints.py,280,Other adjacent dates.,
django/tests/postgres_tests/test_search.py,114,Non-matching query.,
django/tests/postgres_tests/test_search.py,116,Matching query.,
django/tests/postgres_tests/test_search.py,483,Divide the rank by the document length.,
django/tests/postgres_tests/test_search.py,502,Divide the rank by the document length and by the number of,
django/tests/postgres_tests/test_search.py,503,unique words in document.,
django/tests/postgres_tests/test_search.py,516,This test should be moved to test_indexes and use a functional,
django/tests/postgres_tests/test_search.py,517,index instead once support lands (see #26167).,
django/tests/postgres_tests/test_search.py,522,Indexed function must be IMMUTABLE.,
django/tests/postgres_tests/models.py,104,Scene/Character/Line models are used to test full text search. They're,
django/tests/postgres_tests/models.py,105,populated with content from Monty Python and the Holy Grail.,
django/tests/postgres_tests/__init__.py,20,To locate the widget's template.,
django/tests/postgres_tests/test_ranges.py,156,Objects that don't match any queries.,
django/tests/postgres_tests/test_ranges.py,548,an unbound range,
django/tests/postgres_tests/test_ranges.py,559,an unbound range,
django/tests/postgres_tests/test_json.py,245,key__isnull works the same as has_key='key'.,
django/tests/postgres_tests/test_json.py,461,"(Python value, serialized value),",
django/tests/postgres_tests/test_json.py,543,"JSONField input is fine, name is too long",
django/tests/postgres_tests/test_json.py,547,"This time, the JSONField input is wrong",
django/tests/postgres_tests/test_json.py,549,Appears once in the textarea and once in the error message,
django/tests/postgres_tests/test_array.py,120,This checks that get_prep_value is deferred properly,
django/tests/postgres_tests/test_array.py,275,This test asserts that Array objects passed to filters can be,
django/tests/postgres_tests/test_array.py,276,constructed to contain F objects. This currently doesn't work as the,
django/tests/postgres_tests/test_array.py,277,psycopg2 mogrify method that generates the ARRAY() syntax is,
django/tests/postgres_tests/test_array.py,278,"expecting literals, not column references (#27095).",
django/tests/postgres_tests/test_array.py,298,This test asserts that Array objects passed to filters can be,
django/tests/postgres_tests/test_array.py,299,constructed to contain F objects. This currently doesn't work as the,
django/tests/postgres_tests/test_array.py,300,psycopg2 mogrify method that generates the ARRAY() syntax is,
django/tests/postgres_tests/test_array.py,301,"expecting literals, not column references (#27095).",
django/tests/postgres_tests/test_array.py,314,Using the __icontains lookup with ArrayField is inefficient.,
django/tests/postgres_tests/test_array.py,322,Regression for #22907,
django/tests/postgres_tests/test_array.py,583,The inner CharField is missing a max_length.,
django/tests/postgres_tests/test_array.py,638,The inner CharField is missing a max_length.,
django/tests/postgres_tests/test_array.py,694,See #22962,
django/tests/postgres_tests/test_array.py,720,Only the CharField should have a LIKE index.,
django/tests/postgres_tests/test_array.py,722,All fields should have regular indexes.,
django/tests/postgres_tests/test_array.py,766,This should not raise a validation error,
django/tests/postgres_tests/test_array.py,987,To locate the widget's template.,
django/tests/postgres_tests/migrations/0001_setup_extensions.py,34,Ensure CreateExtension quotes extension names by creating one with a,
django/tests/postgres_tests/migrations/0001_setup_extensions.py,35,dash in its name.,
django/tests/db_utils/tests.py,18,Empty DATABASES setting.,
django/tests/db_utils/tests.py,19,Empty 'default' database.,
django/tests/model_regress/tests.py,23,The bug is that the following queries would raise:,
django/tests/model_regress/tests.py,24,"""TypeError: Related Field has invalid lookup: gte""",
django/tests/model_regress/tests.py,44,this line will raise an AttributeError without the accompanying fix,
django/tests/model_regress/tests.py,48,NOTE: Part of the regression test here is merely parsing the model,
django/tests/model_regress/tests.py,49,"declaration. The verbose_name, in particular, did not always work.",
django/tests/model_regress/tests.py,53,An empty choice field should return None for the display name.,
django/tests/model_regress/tests.py,56,Empty strings should be returned as string,
django/tests/model_regress/tests.py,61,TextFields can hold more than 4000 characters (this was broken in,
django/tests/model_regress/tests.py,62,Oracle).,
django/tests/model_regress/tests.py,72,TextFields can hold more than 4000 bytes also when they are,
django/tests/model_regress/tests.py,73,less than 4000 characters,
django/tests/model_regress/tests.py,83,Regression test for #659,
django/tests/model_regress/tests.py,111,Regression test for #8510,
django/tests/model_regress/tests.py,135,Regression test for #18969,
django/tests/model_regress/tests.py,150,Date filtering was failing with NULL date values in SQLite,
django/tests/model_regress/tests.py,151,"(regression test for #3501, among other things).",
django/tests/model_regress/tests.py,164,get_next_by_FIELD() and get_previous_by_FIELD() don't crash when,
django/tests/model_regress/tests.py,165,microseconds values are stored in the database.,
django/tests/model_regress/tests.py,185,Check Department and Worker (non-default PK type),
django/tests/model_regress/tests.py,192,Saving and updating with timezone-aware datetime Python objects.,
django/tests/model_regress/tests.py,193,Regression test for #10443.,
django/tests/model_regress/tests.py,194,The idea is that all these creations and saving should work without,
django/tests/model_regress/tests.py,195,crashing. It's not rocket science.,
django/tests/model_regress/tests.py,217,this is the actual test for #18432,
django/tests/model_regress/models.py,17,A utf-8 verbose name (Ångström's Articles) to test they are valid.,
django/tests/model_regress/models.py,25,Test models with non-default primary keys / AutoFields #5218,
django/tests/model_regress/models.py,58,Chained foreign keys with to_field produce incorrect query #18432,
django/tests/admin_views/urls.py,17,All admin views accept `extra_context` to allow adding it like this:,
django/tests/admin_views/test_actions.py,89,"Instead of 9,999",
django/tests/admin_views/test_actions.py,120,A POST request to delete protected objects displays the page which,
django/tests/admin_views/test_actions.py,121,says the deletion is prohibited.,
django/tests/admin_views/test_actions.py,138,No 500 caused by NoReverseMatch,
django/tests/admin_views/test_actions.py,140,The page doesn't display a link to the nonexistent change page.,
django/tests/admin_views/test_actions.py,152,SubscriberAdmin.delete_queryset() sets overridden to True.,
django/tests/admin_views/test_actions.py,165,BookAdmin.get_deleted_objects() returns custom text.,
django/tests/admin_views/test_actions.py,273,Two different actions selected on the two forms...,
django/tests/admin_views/test_actions.py,275,"...but ""go"" was clicked on the top form.",
django/tests/admin_views/test_actions.py,279,The action sends mail rather than deletes.,
django/tests/admin_views/test_templatetags.py,39,Default.,
django/tests/admin_views/tests.py,131,Post data for edit inline,
django/tests/admin_views/tests.py,134,inline data,
django/tests/admin_views/tests.py,139,"there is no title in database, give one here or formset will fail.",
django/tests/admin_views/tests.py,260,inline data,
django/tests/admin_views/tests.py,266,redirect somewhere,
django/tests/admin_views/tests.py,288,redirect somewhere,
django/tests/admin_views/tests.py,304,redirect somewhere,
django/tests/admin_views/tests.py,320,"started with 3 articles, one was deleted.",
django/tests/admin_views/tests.py,325,callables display the callable name.,
django/tests/admin_views/tests.py,328,"lambdas display as ""lambda"" + index that they appear in list_display.",
django/tests/admin_views/tests.py,454,Let's make sure the ordering is right and that we don't get a,
django/tests/admin_views/tests.py,455,FieldError when we change to descending order,
django/tests/admin_views/tests.py,474,"Sort by name, gender",
django/tests/admin_views/tests.py,479,"Sort by gender descending, name",
django/tests/admin_views/tests.py,503,Test ordering on Model Meta is respected,
django/tests/admin_views/tests.py,513,Test we can override with query string,
django/tests/admin_views/tests.py,518,"Test ordering on Model Admin is respected, and overrides Model Meta",
django/tests/admin_views/tests.py,529,The changelist displays the correct columns if two columns correspond,
django/tests/admin_views/tests.py,530,to the same ordering field.,
django/tests/admin_views/tests.py,546,Should have 5 columns (including action checkbox col),
django/tests/admin_views/tests.py,552,Check order,
django/tests/admin_views/tests.py,555,Check sorting - should be by name,
django/tests/admin_views/tests.py,574,Should have 3 columns including action checkbox col.,
django/tests/admin_views/tests.py,576,Check if the correct column was selected. 2 is the index of the,
django/tests/admin_views/tests.py,577,'order' column in the model admin's 'list_display' with 0 being,
django/tests/admin_views/tests.py,578,the implicit 'action_checkbox' and 1 being the column 'stuff'.,
django/tests/admin_views/tests.py,580,Check order of records.,
django/tests/admin_views/tests.py,651,A forward relation (book) after a reverse relation (promo).,
django/tests/admin_views/tests.py,660,ensure filter link exists,
django/tests/admin_views/tests.py,662,ensure link works,
django/tests/admin_views/tests.py,665,ensure changelist contains only valid objects,
django/tests/admin_views/tests.py,675,Spanning relationships through a nonexistent related object (Refs #16716),
django/tests/admin_views/tests.py,682,Regression test for #18530,
django/tests/admin_views/tests.py,787,Filters are allowed if explicitly included in list_filter,
django/tests/admin_views/tests.py,793,Filters should be allowed if they involve a local field without the,
django/tests/admin_views/tests.py,794,need to whitelist them in list_filter or date_hierarchy.,
django/tests/admin_views/tests.py,815,Specifying a field that is not referred by any other model registered,
django/tests/admin_views/tests.py,816,to this admin site should raise an exception.,
django/tests/admin_views/tests.py,821,"#23839 - Primary key should always be allowed, even if the referenced model isn't registered.",
django/tests/admin_views/tests.py,825,#23915 - Specifying a field referenced by another model though a m2m should be allowed.,
django/tests/admin_views/tests.py,829,"#23604, #23915 - Specifying a field referenced through a reverse m2m relationship should be allowed.",
django/tests/admin_views/tests.py,833,#23329 - Specifying a field that is not referred by any other model directly registered,
django/tests/admin_views/tests.py,834,to this admin site but registered through inheritance should be allowed.,
django/tests/admin_views/tests.py,838,#23431 - Specifying a field that is only referred to by a inline of a registered,
django/tests/admin_views/tests.py,839,model should be allowed.,
django/tests/admin_views/tests.py,843,#25622 - Specifying a field of a model only referred by a generic,
django/tests/admin_views/tests.py,844,relation should raise DisallowedModelAdminToField.,
django/tests/admin_views/tests.py,850,"We also want to prevent the add, change, and delete views from",
django/tests/admin_views/tests.py,851,leaking a disallowed field value.,
django/tests/admin_views/tests.py,873,Filters should be allowed if they are defined on a ForeignKey pointing to this model,
django/tests/admin_views/tests.py,940,Check the format of the shown object -- shouldn't contain a change link,
django/tests/admin_views/tests.py,974,This datetime doesn't exist in this timezone due to DST.,
django/tests/admin_views/tests.py,986,This datetime is 2017-01-01 in UTC.,
django/tests/admin_views/tests.py,1028,Put this app's and the shared tests templates dirs in DIRS to take precedence,
django/tests/admin_views/tests.py,1029,over the admin's templates dir.,
django/tests/admin_views/tests.py,1046,Test custom change list template with custom extra context,
django/tests/admin_views/tests.py,1051,Test custom add form template,
django/tests/admin_views/tests.py,1055,"Add an article so we can test delete, change, and history views",
django/tests/admin_views/tests.py,1065,"Test custom delete, change, and object history templates",
django/tests/admin_views/tests.py,1066,Test custom change form template,
django/tests/admin_views/tests.py,1080,A custom popup response template may be specified by,
django/tests/admin_views/tests.py,1081,ModelAdmin.popup_response_template.,
django/tests/admin_views/tests.py,1101,The auth/user/change_password.html template uses super in the,
django/tests/admin_views/tests.py,1102,bodyclass block.,
django/tests/admin_views/tests.py,1105,"When a site has multiple passwords in the browser's password manager,",
django/tests/admin_views/tests.py,1106,a browser pop up asks which user the new password is for. To prevent,
django/tests/admin_views/tests.py,1107,"this, the username is added to the change password form.",
django/tests/admin_views/tests.py,1208,this would be the usual behaviour,
django/tests/admin_views/tests.py,1210,this is the overridden behaviour,
django/tests/admin_views/tests.py,1422,Test with the admin's documented list of required context processors.,
django/tests/admin_views/tests.py,1459,"Setup permissions, for our users who can add, change, and delete.",
django/tests/admin_views/tests.py,1462,User who can view Articles,
django/tests/admin_views/tests.py,1464,User who can add Articles,
django/tests/admin_views/tests.py,1466,User who can change Articles,
django/tests/admin_views/tests.py,1470,User who can delete Articles,
django/tests/admin_views/tests.py,1474,login POST dicts,
django/tests/admin_views/tests.py,1535,Super User,
django/tests/admin_views/tests.py,1543,Test if user enters email address,
django/tests/admin_views/tests.py,1548,only correct passwords get a username hint,
django/tests/admin_views/tests.py,1553,check to ensure if there are multiple email addresses a user doesn't get a 500,
django/tests/admin_views/tests.py,1557,View User,
django/tests/admin_views/tests.py,1565,Add User,
django/tests/admin_views/tests.py,1573,Change User,
django/tests/admin_views/tests.py,1581,Delete User,
django/tests/admin_views/tests.py,1589,Regular User should not be able to login.,
django/tests/admin_views/tests.py,1596,Requests without username should not return 500 errors.,
django/tests/admin_views/tests.py,1613,Regular User should not be able to login.,
django/tests/admin_views/tests.py,1620,User with permissions should be able to login.,
django/tests/admin_views/tests.py,1628,Staff should be able to login.,
django/tests/admin_views/tests.py,1660,Establish a valid admin session,
django/tests/admin_views/tests.py,1665,Logging in with non-admin user fails,
django/tests/admin_views/tests.py,1670,Establish a valid admin session,
django/tests/admin_views/tests.py,1675,Logging in with admin user while already logged in,
django/tests/admin_views/tests.py,1689,Anonymous user should not be shown the hint,
django/tests/admin_views/tests.py,1694,Non-staff user should be shown the hint,
django/tests/admin_views/tests.py,1708,Change User should not have access to add articles,
django/tests/admin_views/tests.py,1710,make sure the view removes test cookie,
django/tests/admin_views/tests.py,1714,Try POST just to make sure,
django/tests/admin_views/tests.py,1720,View User should not have access to add articles,
django/tests/admin_views/tests.py,1724,Try POST just to make sure,
django/tests/admin_views/tests.py,1728,Now give the user permission to add but not change.,
django/tests/admin_views/tests.py,1741,"Add user may login and POST to add view, then redirect to admin root",
django/tests/admin_views/tests.py,1756,The addition was logged correctly,
django/tests/admin_views/tests.py,1767,"Super can add too, but is redirected to the change list view",
django/tests/admin_views/tests.py,1779,"8509 - if a normal user is already logged in, it is possible",
django/tests/admin_views/tests.py,1780,to change user into the superuser without error,
django/tests/admin_views/tests.py,1782,"Check and make sure that if user expires, data still persists",
django/tests/admin_views/tests.py,1784,make sure the view removes test cookie,
django/tests/admin_views/tests.py,1792,Valid POST creates a new section.,
django/tests/admin_views/tests.py,1801,InlineModelAdmin.has_change_permission()'s obj argument is always,
django/tests/admin_views/tests.py,1802,None during object add.,
django/tests/admin_views/tests.py,1816,add user should not be able to view the list of article or change any of them,
django/tests/admin_views/tests.py,1826,view user can view articles but not make changes.,
django/tests/admin_views/tests.py,1841,change user can view all items and edit them,
django/tests/admin_views/tests.py,1853,"one error in form should produce singular error message, multiple errors plural",
django/tests/admin_views/tests.py,1869,Test redirection when using row-level change permissions. Refs #11513.,
django/tests/admin_views/tests.py,1946,"Add user can perform ""Save as new"".",
django/tests/admin_views/tests.py,1954,"Change user cannot perform ""Save as new"" (no 'add' permission).",
django/tests/admin_views/tests.py,1961,User with both add and change permissions should be redirected to the,
django/tests/admin_views/tests.py,1962,change page for the newly created object.,
django/tests/admin_views/tests.py,1976,GET shows inlines.,
django/tests/admin_views/tests.py,1981,Valid POST changes the name.,
django/tests/admin_views/tests.py,1990,Invalid POST reshows inlines.,
django/tests/admin_views/tests.py,2003,GET shows inlines.,
django/tests/admin_views/tests.py,2008,Valid POST creates a new article.,
django/tests/admin_views/tests.py,2024,Invalid POST reshows inlines.,
django/tests/admin_views/tests.py,2043,Inline POST details are ignored without delete permission.,
django/tests/admin_views/tests.py,2047,Deletion successful when delete permission is added.,
django/tests/admin_views/tests.py,2065,add user should not be able to delete articles,
django/tests/admin_views/tests.py,2074,view user should not be able to delete articles,
django/tests/admin_views/tests.py,2083,Delete user can delete,
django/tests/admin_views/tests.py,2088,test response contains link to related Article,
django/tests/admin_views/tests.py,2134,add user should not be able to view the list of article or change any of them,
django/tests/admin_views/tests.py,2140,view user can view all items,
django/tests/admin_views/tests.py,2146,change user can view all items and edit them,
django/tests/admin_views/tests.py,2151,Test redirection when using row-level change permissions. Refs #11513.,
django/tests/admin_views/tests.py,2195,"The user can't add sections yet, so they shouldn't see the ""add section"" link.",
django/tests/admin_views/tests.py,2200,"Allow the user to add sections too. Now they can see the ""add section"" link.",
django/tests/admin_views/tests.py,2216,"The user can't change sections yet, so they shouldn't see the ""change section"" link.",
django/tests/admin_views/tests.py,2222,"Allow the user to change sections too. Now they can see the ""change section"" link.",
django/tests/admin_views/tests.py,2239,"The user can't delete sections yet, so they shouldn't see the ""delete section"" link.",
django/tests/admin_views/tests.py,2245,"Allow the user to delete sections too. Now they can see the ""delete section"" link.",
django/tests/admin_views/tests.py,2289,the user has no module permissions,
django/tests/admin_views/tests.py,2294,the user now has module permissions,
django/tests/admin_views/tests.py,2307,Not logged in: we should see the login page.,
django/tests/admin_views/tests.py,2311,Logged in? Redirect.,
django/tests/admin_views/tests.py,2314,Can't use self.assertRedirects() because User.get_absolute_url() is silly.,
django/tests/admin_views/tests.py,2316,Domain may depend on contrib.sites tests also run,
django/tests/admin_views/tests.py,2391,The app list displays Sections but not Articles as the latter has,
django/tests/admin_views/tests.py,2392,ModelAdmin.has_module_permission() = False.,
django/tests/admin_views/tests.py,2404,Emulate Article creation for user with add-only permission.,
django/tests/admin_views/tests.py,2442,Setup permissions.,
django/tests/admin_views/tests.py,2448,UserProxy instances.,
django/tests/admin_views/tests.py,2501,User who can change Reports,
django/tests/admin_views/tests.py,2509,we shouldn't get a 500 error caused by a NoReverseMatch,
django/tests/admin_views/tests.py,2727,BookAdmin.get_deleted_objects() returns custom text.,
django/tests/admin_views/tests.py,2798,"this URL now comes through reverse(), thus url quoting and iri_to_uri encoding",
django/tests/admin_views/tests.py,2817,"this URL now comes through reverse(), thus url quoting and iri_to_uri encoding",
django/tests/admin_views/tests.py,2894,Save and continue editing,
django/tests/admin_views/tests.py,2898,temporary redirect,
django/tests/admin_views/tests.py,2899,PK is quoted,
django/tests/admin_views/tests.py,2957,inline data,
django/tests/admin_views/tests.py,2982,redirect somewhere,
django/tests/admin_views/tests.py,3037,2 inputs per object(the field and the hidden id field) = 6,
django/tests/admin_views/tests.py,3038,4 management hidden fields = 4,
django/tests/admin_views/tests.py,3039,"4 action inputs (3 regular checkboxes, 1 checkbox to select all)",
django/tests/admin_views/tests.py,3040,main form submit button = 1,
django/tests/admin_views/tests.py,3041,search field and search submit button = 2,
django/tests/admin_views/tests.py,3042,CSRF field = 1,
django/tests/admin_views/tests.py,3043,field to track 'select all' across paginated views = 1,
django/tests/admin_views/tests.py,3044,6 + 4 + 4 + 1 + 2 + 1 + 1 = 19 inputs,
django/tests/admin_views/tests.py,3046,1 select per object = 3 selects,
django/tests/admin_views/tests.py,3050,Ticket 12707: Saving inline editable should not show admin,
django/tests/admin_views/tests.py,3051,action warnings,
django/tests/admin_views/tests.py,3096,test a filtered page,
django/tests/admin_views/tests.py,3116,test a searched page,
django/tests/admin_views/tests.py,3150,Same data as above: Forbidden because of unique_together!,
django/tests/admin_views/tests.py,3182,Same data as above: Forbidden because of unique_together!,
django/tests/admin_views/tests.py,3188,Same data also.,
django/tests/admin_views/tests.py,3206,test if non-form errors are handled; ticket #12716,
django/tests/admin_views/tests.py,3216,"The form processing understands this as a list_editable ""Save""",
django/tests/admin_views/tests.py,3217,"and not an action ""Go"".",
django/tests/admin_views/tests.py,3224,test if non-form errors are correctly handled; ticket #12878,
django/tests/admin_views/tests.py,3249,NB: The order values must be changed so that the items are reordered.,
django/tests/admin_views/tests.py,3271,"The form processing understands this as a list_editable ""Save""",
django/tests/admin_views/tests.py,3272,"and not an action ""Go"".",
django/tests/admin_views/tests.py,3276,Successful post will redirect,
django/tests/admin_views/tests.py,3279,The order values have been applied to the right objects,
django/tests/admin_views/tests.py,3302,"List editable changes should not be executed if the action ""Go"" button is",
django/tests/admin_views/tests.py,3303,used to submit the form.,
django/tests/admin_views/tests.py,3329,"List editable changes should be executed if the ""Save"" button is",
django/tests/admin_views/tests.py,3330,used to submit the form - any action choices should be ignored.,
django/tests/admin_views/tests.py,3376,"Only one hidden field, in a separate place than the table.",
django/tests/admin_views/tests.py,3406,"Only one hidden field, in a separate place than the table.",
django/tests/admin_views/tests.py,3460,confirm the search returned 1 object,
django/tests/admin_views/tests.py,3474,confirm the search returned one object,
django/tests/admin_views/tests.py,3478,confirm the search returned zero objects,
django/tests/admin_views/tests.py,3483,confirm the search returned one object,
django/tests/admin_views/tests.py,3488,confirm the search returned zero objects,
django/tests/admin_views/tests.py,3497,confirm the search returned one object,
django/tests/admin_views/tests.py,3502,confirm the search returned one object,
django/tests/admin_views/tests.py,3510,1 query for session + 1 for fetching user,
django/tests/admin_views/tests.py,3511,+ 1 for filtered result + 1 for filtered count,
django/tests/admin_views/tests.py,3512,+ 1 for total count,
django/tests/admin_views/tests.py,3526,1 query for session + 1 for fetching user,
django/tests/admin_views/tests.py,3527,+ 1 for filtered result + 1 for filtered count,
django/tests/admin_views/tests.py,3557,test the add case,
django/tests/admin_views/tests.py,3560,make sure we have no duplicate HTML names,
django/tests/admin_views/tests.py,3563,test the add case,
django/tests/admin_views/tests.py,3566,inline data,
django/tests/admin_views/tests.py,3578,redirect somewhere,
django/tests/admin_views/tests.py,3590,test the edit case,
django/tests/admin_views/tests.py,3594,make sure we have no duplicate HTML names,
django/tests/admin_views/tests.py,3640,Insert some data,
django/tests/admin_views/tests.py,3643,redirect somewhere,
django/tests/admin_views/tests.py,3644,Hit the page once to get messages out of the queue message list,
django/tests/admin_views/tests.py,3646,Data is still not visible on the page,
django/tests/admin_views/tests.py,3695,create 2 Person objects,
django/tests/admin_views/tests.py,3700,"5 queries are expected: 1 for the session, 1 for the user,",
django/tests/admin_views/tests.py,3701,2 for the counts and 1 for the objects on the page,
django/tests/admin_views/tests.py,3736,Test for #14529. defer() is used in ModelAdmin.get_queryset(),
django/tests/admin_views/tests.py,3738,model has __str__ method,
django/tests/admin_views/tests.py,3740,Emulate model instance creation via the admin,
django/tests/admin_views/tests.py,3748,Message should contain non-ugly model verbose name,
django/tests/admin_views/tests.py,3757,model has no __str__ method,
django/tests/admin_views/tests.py,3759,Emulate model instance creation via the admin,
django/tests/admin_views/tests.py,3767,Message should contain non-ugly model verbose name,
django/tests/admin_views/tests.py,3777,Test for #14529. only() is used in ModelAdmin.get_queryset(),
django/tests/admin_views/tests.py,3779,model has __str__ method,
django/tests/admin_views/tests.py,3781,Emulate model instance creation via the admin,
django/tests/admin_views/tests.py,3789,Message should contain non-ugly model verbose name,
django/tests/admin_views/tests.py,3798,model has no __str__ method,
django/tests/admin_views/tests.py,3800,Emulate model instance creation via the admin,
django/tests/admin_views/tests.py,3808,Message should contain non-ugly model verbose name,
django/tests/admin_views/tests.py,3818,Test for #14529. defer() is used in ModelAdmin.get_queryset(),
django/tests/admin_views/tests.py,3820,model has __str__ method,
django/tests/admin_views/tests.py,3825,Emulate model instance edit via the admin,
django/tests/admin_views/tests.py,3834,Message should contain non-ugly model verbose name. Instance,
django/tests/admin_views/tests.py,3835,representation is set by model's __str__(),
django/tests/admin_views/tests.py,3843,model has no __str__ method,
django/tests/admin_views/tests.py,3848,Emulate model instance edit via the admin,
django/tests/admin_views/tests.py,3857,Message should contain non-ugly model verbose name. The ugly(!),
django/tests/admin_views/tests.py,3858,instance representation is set by __str__().,
django/tests/admin_views/tests.py,3867,Test for #14529. only() is used in ModelAdmin.get_queryset(),
django/tests/admin_views/tests.py,3869,model has __str__ method,
django/tests/admin_views/tests.py,3874,Emulate model instance edit via the admin,
django/tests/admin_views/tests.py,3882,Message should contain non-ugly model verbose name. The instance,
django/tests/admin_views/tests.py,3883,representation is set by model's __str__(),
django/tests/admin_views/tests.py,3891,model has no __str__ method,
django/tests/admin_views/tests.py,3896,Emulate model instance edit via the admin,
django/tests/admin_views/tests.py,3904,Message should contain non-ugly model verbose name. The ugly(!),
django/tests/admin_views/tests.py,3905,instance representation is set by __str__().,
django/tests/admin_views/tests.py,4080,First add a new inline,
django/tests/admin_views/tests.py,4089,The PK link exists on the rendered form,
django/tests/admin_views/tests.py,4093,"No file or image fields, no enctype on the forms",
django/tests/admin_views/tests.py,4097,Now resave that inline,
django/tests/admin_views/tests.py,4106,Now modify that inline,
django/tests/admin_views/tests.py,4117,First add a new inline,
django/tests/admin_views/tests.py,4125,The PK link exists on the rendered form,
django/tests/admin_views/tests.py,4129,Now resave that inline,
django/tests/admin_views/tests.py,4138,Now modify that inline,
django/tests/admin_views/tests.py,4149,First add a new inline,
django/tests/admin_views/tests.py,4158,The PK link exists on the rendered form,
django/tests/admin_views/tests.py,4162,Now resave that inline,
django/tests/admin_views/tests.py,4171,Now modify that inline,
django/tests/admin_views/tests.py,4182,First add a new inline,
django/tests/admin_views/tests.py,4191,The PK link exists on the rendered form,
django/tests/admin_views/tests.py,4195,Now resave that inline,
django/tests/admin_views/tests.py,4204,Now modify that inline,
django/tests/admin_views/tests.py,4215,First add a new inline,
django/tests/admin_views/tests.py,4224,The PK link exists on the rendered form,
django/tests/admin_views/tests.py,4228,Now resave that inline,
django/tests/admin_views/tests.py,4237,Now modify that inline,
django/tests/admin_views/tests.py,4250,Create some objects with an initial ordering,
django/tests/admin_views/tests.py,4256,NB: The order values must be changed so that the items are reordered.,
django/tests/admin_views/tests.py,4294,Successful post will redirect,
django/tests/admin_views/tests.py,4297,The order values have been applied to the right objects,
django/tests/admin_views/tests.py,4413,"instead of 1,000",
django/tests/admin_views/tests.py,4454,Main form ----------------------------------------------------------,
django/tests/admin_views/tests.py,4465,Stacked inlines ----------------------------------------------------,
django/tests/admin_views/tests.py,4466,Initial inline,
django/tests/admin_views/tests.py,4477,Inline formsets have empty/invisible forms.,
django/tests/admin_views/tests.py,4478,Only the 4 visible select2 inputs are initialized.,
django/tests/admin_views/tests.py,4482,Add an inline,
django/tests/admin_views/tests.py,4496,50 characters maximum for slug1 field,
django/tests/admin_views/tests.py,4498,60 characters maximum for slug2 field,
django/tests/admin_views/tests.py,4501,Tabular inlines ----------------------------------------------------,
django/tests/admin_views/tests.py,4502,Initial inline,
django/tests/admin_views/tests.py,4513,Add an inline,
django/tests/admin_views/tests.py,4514,Button may be outside the browser frame.,
django/tests/admin_views/tests.py,4531,Add an inline without an initial inline.,
django/tests/admin_views/tests.py,4532,The button is outside of the browser frame.,
django/tests/admin_views/tests.py,4539,Save and check that everything is properly stored in the database,
django/tests/admin_views/tests.py,4560,75 characters in name field,
django/tests/admin_views/tests.py,4587,Slugs are empty to start with.,
django/tests/admin_views/tests.py,4602,The slugs got prepopulated since they were originally empty,
django/tests/admin_views/tests.py,4608,Save the object,
django/tests/admin_views/tests.py,4615,The slugs got prepopulated didn't change since they were originally not empty,
django/tests/admin_views/tests.py,4635,First form field has a single widget,
django/tests/admin_views/tests.py,4644,First form field has a MultiWidget,
django/tests/admin_views/tests.py,4660,Click 'cancel' on the delete page.,
django/tests/admin_views/tests.py,4662,Wait until we're back on the change page.,
django/tests/admin_views/tests.py,4681,Click 'cancel' on the delete page.,
django/tests/admin_views/tests.py,4683,Wait until we're back on the change page.,
django/tests/admin_views/tests.py,4703,Change popup,
django/tests/admin_views/tests.py,4714,Rendered select2 input.,
django/tests/admin_views/tests.py,4716,Clear button (×\n) is included in text.,
django/tests/admin_views/tests.py,4719,Add popup,
django/tests/admin_views/tests.py,4729,Clear button (×\n) is included in text.,
django/tests/admin_views/tests.py,4799,"Select ""parent2"" in the popup.",
django/tests/admin_views/tests.py,4802,The newly selected pk should appear in the raw id input.,
django/tests/admin_views/tests.py,4821,"3 fields + 2 submit buttons + 5 inline management form fields, + 2",
django/tests/admin_views/tests.py,4822,hidden fields for inlines + 1 field for the inline + 2 empty form,
django/tests/admin_views/tests.py,4830,Multiline text in a readonly field gets <br> tags,
django/tests/admin_views/tests.py,4873,Checking readonly field.,
django/tests/admin_views/tests.py,4875,Checking readonly field in inline.,
django/tests/admin_views/tests.py,4892,some date that's not today,
django/tests/admin_views/tests.py,4948,The reverse relation also works if the OneToOneField is null.,
django/tests/admin_views/tests.py,4954,default empty value,
django/tests/admin_views/tests.py,5005,The allowed option should appear twice; the limited option should not appear.,
django/tests/admin_views/tests.py,5030,Find the link,
django/tests/admin_views/tests.py,5032,Got a match,
django/tests/admin_views/tests.py,5035,Handle relative links,
django/tests/admin_views/tests.py,5037,Get the popup and verify the correct objects show up in the resulting,
django/tests/admin_views/tests.py,5038,"page. This step also tests integers, strings and booleans in the",
django/tests/admin_views/tests.py,5039,lookup query string; in model we define inquisition field to have a,
django/tests/admin_views/tests.py,5040,limit_choices_to option that includes a filter on a string field,
django/tests/admin_views/tests.py,5041,"(inquisition__actor__name), a filter on an integer field",
django/tests/admin_views/tests.py,5042,"(inquisition__actor__age), and a filter on a boolean field",
django/tests/admin_views/tests.py,5043,(inquisition__expected).,
django/tests/admin_views/tests.py,5053,Find the link,
django/tests/admin_views/tests.py,5055,Got a match,
django/tests/admin_views/tests.py,5058,Handle relative links,
django/tests/admin_views/tests.py,5060,Get the popup and verify the correct objects show up in the resulting,
django/tests/admin_views/tests.py,5061,page. This step tests field__isnull=0 gets parsed correctly from the,
django/tests/admin_views/tests.py,5062,lookup query string; in model we define defendant0 field to have a,
django/tests/admin_views/tests.py,5063,"limit_choices_to option that includes ""actor__title__isnull=False"".",
django/tests/admin_views/tests.py,5073,Find the link,
django/tests/admin_views/tests.py,5075,Got a match,
django/tests/admin_views/tests.py,5078,Handle relative links,
django/tests/admin_views/tests.py,5080,Get the popup and verify the correct objects show up in the resulting,
django/tests/admin_views/tests.py,5081,page. This step tests field__isnull=1 gets parsed correctly from the,
django/tests/admin_views/tests.py,5082,lookup query string; in model we define defendant1 field to have a,
django/tests/admin_views/tests.py,5083,"limit_choices_to option that includes ""actor__title__isnull=True"".",
django/tests/admin_views/tests.py,5248,"Don't depend on a warm cache, see #17377.",
django/tests/admin_views/tests.py,5288,Ensure no queries are skipped due to cached content type for Group.,
django/tests/admin_views/tests.py,5323,The main form,
django/tests/admin_views/tests.py,5330,The lambda function,
django/tests/admin_views/tests.py,5332,The tabular inline,
django/tests/admin_views/tests.py,5341,General index page,
django/tests/admin_views/tests.py,5347,App index page,
django/tests/admin_views/tests.py,5428,The builtin tag group exists,
django/tests/admin_views/tests.py,5431,A builtin tag exists in both the index and detail,
django/tests/admin_views/tests.py,5435,An app tag exists in both the index and detail,
django/tests/admin_views/tests.py,5439,The admin list tag group exists,
django/tests/admin_views/tests.py,5442,An admin list tag exists in both the index and detail,
django/tests/admin_views/tests.py,5449,The builtin filter group exists,
django/tests/admin_views/tests.py,5452,A builtin filter exists in both the index and detail,
django/tests/admin_views/tests.py,5565,no day-level links,
django/tests/admin_views/tests.py,5582,no day/month-level links,
django/tests/admin_views/tests.py,5588,and make sure GET parameters still behave correctly,
django/tests/admin_views/tests.py,5610,"(posted data, number of answers),",
django/tests/admin_views/tests.py,5714,user-tools div shouldn't visible.,
django/tests/admin_views/tests.py,5718,we should be redirected to the login page.,
django/tests/admin_views/tests.py,5720,follow the redirect and test results.,
django/tests/admin_views/tests.py,5755,Set to DEBUG for this request,
django/tests/admin_views/tests.py,5820,Test equality.,
django/tests/admin_views/tests.py,5831,Test inequality.,
django/tests/admin_views/tests.py,5842,Ignore scheme and host.,
django/tests/admin_views/tests.py,5850,Ignore ordering of querystring.,
django/tests/admin_views/tests.py,5856,Ignore ordering of _changelist_filters.,
django/tests/admin_views/tests.py,5922,Check the `change_view` link has the correct querystring.,
django/tests/admin_views/tests.py,5930,Get the `change_view`.,
django/tests/admin_views/tests.py,5934,Check the form action.,
django/tests/admin_views/tests.py,5941,Check the history link.,
django/tests/admin_views/tests.py,5948,Check the delete link.,
django/tests/admin_views/tests.py,5955,"Test redirect on ""Save"".",
django/tests/admin_views/tests.py,5969,"Test redirect on ""Save and continue"".",
django/tests/admin_views/tests.py,5975,"Test redirect on ""Save and add new"".",
django/tests/admin_views/tests.py,5983,The action attribute is omitted.,
django/tests/admin_views/tests.py,5987,Get the `add_view`.,
django/tests/admin_views/tests.py,5991,Check the form action.,
django/tests/admin_views/tests.py,6004,"Test redirect on ""Save"".",
django/tests/admin_views/tests.py,6010,"Test redirect on ""Save and continue"".",
django/tests/admin_views/tests.py,6017,"Test redirect on ""Save and add new"".",
django/tests/admin_views/tests.py,6026,The action attribute is omitted.,
django/tests/admin_views/tests.py,6030,"Test redirect on ""Delete"".",
django/tests/admin_views/tests.py,6129,The form validation should fail because 'some_required_info' is,
django/tests/admin_views/tests.py,6130,"not included on the parent form, and the family_name of the parent",
django/tests/admin_views/tests.py,6131,does not match that of the child,
django/tests/admin_views/tests.py,6161,The form validation should fail because 'some_required_info' is,
django/tests/admin_views/tests.py,6162,"not included on the parent form, and the family_name of the parent",
django/tests/admin_views/tests.py,6163,does not match that of the child,
django/tests/admin_views/tests.py,6201,Restore the original values for the benefit of other tests.,
django/tests/admin_views/test_autocomplete_view.py,133,The first page of results.,
django/tests/admin_views/test_autocomplete_view.py,143,The second page of results.,
django/tests/admin_views/test_autocomplete_view.py,185,Open the autocomplete dropdown.,
django/tests/admin_views/test_autocomplete_view.py,190,Close the autocomplete dropdown.,
django/tests/admin_views/test_autocomplete_view.py,193,Reopen the dropdown now that some objects exist.,
django/tests/admin_views/test_autocomplete_view.py,197,"PAGINATOR_SIZE results and ""Loading more results"".",
django/tests/admin_views/test_autocomplete_view.py,200,Load next page of results by scrolling to the bottom of the list.,
django/tests/admin_views/test_autocomplete_view.py,205,All objects are now loaded.,
django/tests/admin_views/test_autocomplete_view.py,207,Limit the results with the search field.,
django/tests/admin_views/test_autocomplete_view.py,210,Ajax request is delayed.,
django/tests/admin_views/test_autocomplete_view.py,217,Select the result.,
django/tests/admin_views/test_autocomplete_view.py,227,Open the autocomplete dropdown.,
django/tests/admin_views/test_autocomplete_view.py,232,Close the autocomplete dropdown.,
django/tests/admin_views/test_autocomplete_view.py,235,Reopen the dropdown now that some objects exist.,
django/tests/admin_views/test_autocomplete_view.py,241,Load next page of results by scrolling to the bottom of the list.,
django/tests/admin_views/test_autocomplete_view.py,247,Limit the results with the search field.,
django/tests/admin_views/test_autocomplete_view.py,250,Ajax request is delayed.,
django/tests/admin_views/test_autocomplete_view.py,257,Select the result.,
django/tests/admin_views/test_autocomplete_view.py,259,Reopen the dropdown and add the first result to the selection.,
django/tests/admin_views/test_autocomplete_view.py,269,Open the autocomplete dropdown.,
django/tests/admin_views/test_autocomplete_view.py,275,Autocomplete works in rows present when the page loads.,
django/tests/admin_views/test_autocomplete_view.py,280,"Autocomplete works in rows added using the ""Add another"" button.",
django/tests/admin_views/customadmin.py,18,"a list, to test fix for #18697",
django/tests/admin_views/customadmin.py,22,A custom index view.,
django/tests/admin_views/customadmin.py,39,used for testing password change on a user not in queryset,
django/tests/admin_views/customadmin.py,46,"a list, to test fix for #18697",
django/tests/admin_views/test_forms.py,6,"To verify that the login form rejects inactive users, use an authentication",
django/tests/admin_views/test_forms.py,7,backend that allows them.,
django/tests/admin_views/models.py,93,Use a utf-8 bytestring to ensure it works (see #11710),
django/tests/admin_views/models.py,144,we replicate Color to register with another ModelAdmin,
django/tests/admin_views/models.py,318,overridden in PodcastAdmin,
django/tests/admin_views/models.py,372,a base class for Recommender and Recommendation,
django/tests/admin_views/models.py,474,Proxy model to test overridden fields attrs on Post model so as not to,
django/tests/admin_views/models.py,475,interfere with other tests.,
django/tests/admin_views/models.py,587,Pizza's ModelAdmin has readonly_fields = ['toppings'].,
django/tests/admin_views/models.py,588,toppings is editable for this model's admin.,
django/tests/admin_views/models.py,594,No default permissions are created for this model and both name and toppings,
django/tests/admin_views/models.py,595,are readonly for this model's admin.,
django/tests/admin_views/models.py,725,`db_index=False` because MySQL cannot index large CharField (#21196).,
django/tests/admin_views/models.py,900,Models for #23329,
django/tests/admin_views/models.py,918,Models for #23431,
django/tests/admin_views/models.py,951,Model for #23839,
django/tests/admin_views/models.py,953,Don't point any FK at this model.,
django/tests/admin_views/models.py,957,Models for #23934,
django/tests/admin_views/models.py,966,Models for #25622,
django/tests/admin_views/test_adminsite.py,51,we have registered two models from two different apps,
django/tests/admin_views/test_adminsite.py,54,admin_views.Article,
django/tests/admin_views/test_adminsite.py,60,auth.User,
django/tests/admin_views/admin.py,126,These orderings aren't particularly useful but show that expressions can,
django/tests/admin_views/admin.py,127,be used for admin_order_field.,
django/tests/admin_views/admin.py,207,A method with the same name as a reverse accessor.,
django/tests/admin_views/admin.py,240,"Order by a field that isn't in list display, to be able to test",
django/tests/admin_views/admin.py,241,whether ordering is preserved.,
django/tests/admin_views/admin.py,526,Doesn't exist,
django/tests/admin_views/admin.py,624,'id' not in list_display_links,
django/tests/admin_views/admin.py,632,'id' in list_display_links,
django/tests/admin_views/admin.py,716,Corner case: Don't call parent implementation,
django/tests/admin_views/admin.py,728,For Selenium Prepopulated tests -------------------------------------,
django/tests/admin_views/admin.py,795,"Disable change_view, but leave other urls untouched",
django/tests/admin_views/admin.py,864,Tests for ticket 11277 ----------------------------------,
django/tests/admin_views/admin.py,917,Add arbitrary name to changed_data to test,
django/tests/admin_views/admin.py,918,change message construction.,
django/tests/admin_views/admin.py,1065,We intentionally register Promo and ChapterXtra1 but not Chapter nor ChapterXtra2.,
django/tests/admin_views/admin.py,1066,That way we cover all four cases:,
django/tests/admin_views/admin.py,1067,related ForeignKey object registered in admin,
django/tests/admin_views/admin.py,1068,related ForeignKey object not registered in admin,
django/tests/admin_views/admin.py,1069,related OneToOne object registered in admin,
django/tests/admin_views/admin.py,1070,related OneToOne object not registered in admin,
django/tests/admin_views/admin.py,1071,when deleting Book so as exercise all four paths through,
django/tests/admin_views/admin.py,1072,contrib.admin.utils's get_deleted_objects function.,
django/tests/admin_views/admin.py,1110,Register core models we need in our tests,
django/tests/admin_views/admin.py,1114,Used to test URL namespaces,
django/tests/admin_views/admin.py,1133,Used to test ModelAdmin.sortable_by and get_sortable_by().,
django/tests/admin_views/admin.py,1175,Simulate that the user can't change a specific object.,
django/tests/bulk_create/tests.py,127,SQLite had a problem where all the same-valued models were,
django/tests/bulk_create/tests.py,128,collapsed to one insert.,
django/tests/bulk_create/tests.py,146,SQLite had a problem with more than 500 UNIONed selects in single,
django/tests/bulk_create/tests.py,147,query.,
django/tests/bulk_create/tests.py,171,"We can't assume much about the ID's created, except that the above",
django/tests/bulk_create/tests.py,172,created IDs must exist.,
django/tests/bulk_create/tests.py,242,NULL can be mixed with other values in nullable fields,
django/tests/bulk_create/tests.py,277,Objects save via bulk_create() and save() should have equal state.,
django/tests/bulk_create/tests.py,286,Objects save via bulk_create() and save() should have equal state.,
django/tests/bulk_create/tests.py,305,"With ignore_conflicts=True, conflicts are ignored.",
django/tests/bulk_create/tests.py,315,New objects are created and conflicts are ignored.,
django/tests/bulk_create/tests.py,320,"Without ignore_conflicts=True, there's a problem.",
django/tests/bulk_create/models.py,76,Fields in db.backends.oracle.BulkInsertMapper,
django/tests/bulk_create/models.py,95,Fields not required in BulkInsertMapper,
django/tests/admin_autodiscover/tests.py,11,"The first time autodiscover is called, we should get our real error.",
django/tests/admin_autodiscover/tests.py,14,Calling autodiscover again should raise the very same error it did,
django/tests/admin_autodiscover/tests.py,15,"the first time, not an AlreadyRegistered error.",
django/tests/m2m_and_m2o/tests.py,56,These queries combine results from the m2m and the m2o relationships.,
django/tests/m2m_and_m2o/tests.py,57,They're three ways of saying the same thing.,
django/tests/m2m_and_m2o/tests.py,92,used to cause an error (see ticket #6045),
django/tests/m2m_and_m2o/tests.py,94,Force retrieval.,
django/tests/null_queries/tests.py,24,"Exact query with value None returns nothing (""is NULL"" in sql,",
django/tests/null_queries/tests.py,25,but every 'id' field has a value).,
django/tests/null_queries/tests.py,28,The same behavior for iexact query.,
django/tests/null_queries/tests.py,31,Excluding the previous result returns everything.,
django/tests/null_queries/tests.py,34,"Valid query, but fails because foo isn't a keyword",
django/tests/null_queries/tests.py,39,Can't use None on anything other than __exact and __iexact,
django/tests/null_queries/tests.py,43,Related managers use __exact=None implicitly if the object hasn't been saved.,
django/tests/null_queries/tests.py,59,Ticket #13815: check if <reverse>_isnull=False does not produce,
django/tests/null_queries/tests.py,60,faulty empty lists,
django/tests/null_queries/models.py,18,A set of models with an inner one pointing to two outer ones.,
django/tests/null_queries/models.py,31,second would clash with the __second lookup.,
django/tests/asgi/tests.py,31,Construct HTTP request.,
django/tests/asgi/tests.py,35,Read the response.,
django/tests/asgi/tests.py,55,Construct HTTP request.,
django/tests/asgi/tests.py,59,Get the file content.,
django/tests/asgi/tests.py,62,Read the response.,
django/tests/asgi/tests.py,77,Allow response.close() to finish.,
django/tests/inspectdb/tests.py,32,contrib.contenttypes is one of the apps always installed when running,
django/tests/inspectdb/tests.py,33,"the Django test suite, check that one of its tables hasn't been",
django/tests/inspectdb/tests.py,34,inspected,
django/tests/inspectdb/tests.py,64,Inspecting Oracle DB doesn't produce correct results (#19884):,
django/tests/inspectdb/tests.py,65,- it reports fields as blank=True when they aren't.,
django/tests/inspectdb/tests.py,106,"Guessed arguments on SQLite, see #5014",
django/tests/inspectdb/tests.py,150,Recursive foreign keys should be set to 'self',
django/tests/inspectdb/tests.py,157,"As InspectdbPeople model is defined after InspectdbMessage, it should be quoted",
django/tests/inspectdb/tests.py,227,There should be one unique_together tuple.,
django/tests/inspectdb/tests.py,230,Fields with db_column = field name.,
django/tests/inspectdb/tests.py,232,Fields from columns whose names are Python keywords.,
django/tests/inspectdb/tests.py,234,Fields whose names normalize to the same Python field name and hence,
django/tests/inspectdb/tests.py,235,are given an integer suffix.,
django/tests/inspectdb/tests.py,291,The error message depends on the backend,
django/tests/inspectdb/models.py,32,Underscores,
django/tests/inspectdb/models.py,36,Other chars,
django/tests/aggregation/tests.py,472,Explicit `output_field`.,
django/tests/aggregation/tests.py,477,Implicit `output_field`.,
django/tests/aggregation/tests.py,499,Selected author ages are 57 and 46,
django/tests/aggregation/tests.py,764,Refs #20782,
django/tests/aggregation/tests.py,781,"The value doesn't matter, we just need any negative",
django/tests/aggregation/tests.py,782,constraint on a related model that's a noop.,
django/tests/aggregation/tests.py,785,Try to generate query tree,
django/tests/aggregation/tests.py,790,Check internal state,
django/tests/aggregation/tests.py,816,If the backend needs to force an ordering we make sure it's,
django/tests/aggregation/tests.py,817,"the only ""ORDER BY"" clause present in the query.",
django/tests/aggregation/tests.py,952,ensure the F() is promoted to the group by clause,
django/tests/aggregation/tests.py,1045,test completely changing how the output is rendered,
django/tests/aggregation/tests.py,1060,test changing the dict and delegating,
django/tests/aggregation/tests.py,1073,test overriding all parts of the template,
django/tests/aggregation/tests.py,1101,Create a plain expression,
django/tests/aggregation/tests.py,1142,The GROUP BY should not be by alias either.,
django/tests/aggregation/tests.py,1308,FIXME: GROUP BY doesn't need to include a subquery with,
django/tests/aggregation/tests.py,1309,"non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):",
django/tests/aggregation/tests.py,1310,with self.assertNumQueries(1) as ctx:,
django/tests/aggregation/tests.py,1311,"self.assertSequenceEqual(books_qs, [book])",
django/tests/aggregation/tests.py,1312,"self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)",
django/tests/one_to_one/tests.py,20,A Restaurant can access its place.,
django/tests/one_to_one/tests.py,22,"A Place can access its restaurant, if available.",
django/tests/one_to_one/tests.py,24,p2 doesn't have an associated restaurant.,
django/tests/one_to_one/tests.py,27,The exception raised on attribute access when a related object,
django/tests/one_to_one/tests.py,28,doesn't exist should be an instance of a subclass of `AttributeError`,
django/tests/one_to_one/tests.py,29,refs #21563,
django/tests/one_to_one/tests.py,33,Set the place using assignment notation. Because place is the primary,
django/tests/one_to_one/tests.py,34,"key on Restaurant, the save will create a new restaurant",
django/tests/one_to_one/tests.py,40,"Set the place back again, using assignment in the reverse direction.",
django/tests/one_to_one/tests.py,47,"Restaurant.objects.all() just returns the Restaurants, not the Places.",
django/tests/one_to_one/tests.py,51,"Place.objects.all() returns all Places, regardless of whether they",
django/tests/one_to_one/tests.py,52,have Restaurants.,
django/tests/one_to_one/tests.py,88,Add a Waiter to the Restaurant.,
django/tests/one_to_one/tests.py,92,Query the waiters,
django/tests/one_to_one/tests.py,107,Delete the restaurant; the waiter should also be removed,
django/tests/one_to_one/tests.py,113,One-to-one fields still work if you create your own primary key,
django/tests/one_to_one/tests.py,119,"You can have multiple one-to-one fields on a model, too.",
django/tests/one_to_one/tests.py,123,This will fail because each one-to-one field must be unique (and,
django/tests/one_to_one/tests.py,124,"link2=o1 was used for x1, above).",
django/tests/one_to_one/tests.py,141,place should not cache restaurant,
django/tests/one_to_one/tests.py,152,The bug in #9023: if you access the one-to-one relation *before*,
django/tests/one_to_one/tests.py,153,"setting to None and deleting, the cascade happens anyway.",
django/tests/one_to_one/tests.py,185,Assigning None succeeds if field is null=True.,
django/tests/one_to_one/tests.py,195,Assigning None doesn't throw AttributeError if there isn't a related,
django/tests/one_to_one/tests.py,196,UndergroundBar.,
django/tests/one_to_one/tests.py,201,Prime the relation's cache with a value of None.,
django/tests/one_to_one/tests.py,204,Assigning None works if there isn't a related UndergroundBar and the,
django/tests/one_to_one/tests.py,205,reverse cache has a value of None.,
django/tests/one_to_one/tests.py,216,Reassigning the same value doesn't clear a cached instance.,
django/tests/one_to_one/tests.py,232,"Look up the objects again so that we get ""fresh"" objects",
django/tests/one_to_one/tests.py,236,Accessing the related object again returns the exactly same object,
django/tests/one_to_one/tests.py,239,"But if we kill the cache, we get a new object",
django/tests/one_to_one/tests.py,243,Reassigning the Restaurant object results in an immediate cache update,
django/tests/one_to_one/tests.py,244,"We can't use a new Restaurant because that'll violate one-to-one, but",
django/tests/one_to_one/tests.py,245,with a new *instance* the is test below will fail if #6886 regresses.,
django/tests/one_to_one/tests.py,250,Assigning None succeeds if field is null=True.,
django/tests/one_to_one/tests.py,255,Assigning None will not fail: Place.restaurant is null=False,
django/tests/one_to_one/tests.py,258,You also can't assign an object of the wrong type here,
django/tests/one_to_one/tests.py,266,Creation using keyword argument should cache the related object.,
django/tests/one_to_one/tests.py,271,Creation using keyword argument and unsaved related instance (#8070).,
django/tests/one_to_one/tests.py,276,Creation using attname keyword argument and an id will cause the related,
django/tests/one_to_one/tests.py,277,object to be fetched.,
django/tests/one_to_one/tests.py,334,Use a fresh object without caches,
django/tests/one_to_one/tests.py,347,Use a fresh object without caches,
django/tests/one_to_one/tests.py,391,When there's no instance of the origin of the one-to-one,
django/tests/one_to_one/tests.py,398,When there's one instance of the origin,
django/tests/one_to_one/tests.py,399,(p.undergroundbar used to return that instance),
django/tests/one_to_one/tests.py,404,Several instances of the origin are only possible if database allows,
django/tests/one_to_one/tests.py,405,inserting multiple NULL rows for a unique constraint,
django/tests/one_to_one/tests.py,409,When there are several instances of the origin,
django/tests/one_to_one/tests.py,422,Assigning a reverse relation on an unsaved object is allowed.,
django/tests/one_to_one/tests.py,425,However saving the object is not allowed.,
django/tests/one_to_one/tests.py,455,Only one school is available via all() due to the custom default manager.,
django/tests/one_to_one/tests.py,458,Only one director is available via all() due to the custom default manager.,
django/tests/one_to_one/tests.py,464,Make sure the base manager is used so that the related objects,
django/tests/one_to_one/tests.py,465,is still accessible even if the default manager doesn't normally,
django/tests/one_to_one/tests.py,466,allow it.,
django/tests/one_to_one/tests.py,469,Make sure the base manager is used so that an student can still access,
django/tests/one_to_one/tests.py,470,its related school even if the default manager doesn't normally,
django/tests/one_to_one/tests.py,471,allow it.,
django/tests/one_to_one/tests.py,495,The exception raised on attribute access when a related object,
django/tests/one_to_one/tests.py,496,doesn't exist should be an instance of a subclass of `AttributeError`,
django/tests/one_to_one/tests.py,497,refs #21563,
django/tests/one_to_one/tests.py,515,Subquery using primary key and a query against the,
django/tests/one_to_one/tests.py,516,same model works correctly.,
django/tests/one_to_one/tests.py,519,"Subquery using 'pk__in' instead of 'place_id__in' work, too.",
django/tests/one_to_one/tests.py,545,caches b1.place,
django/tests/one_to_one/models.py,96,Test related objects visibility.,
django/tests/get_earliest_or_latest/tests.py,20,"Because no Articles exist yet, earliest() raises ArticleDoesNotExist.",
django/tests/get_earliest_or_latest/tests.py,41,Get the earliest Article.,
django/tests/get_earliest_or_latest/tests.py,43,Get the earliest Article that matches certain filters.,
django/tests/get_earliest_or_latest/tests.py,49,Pass a custom field name to earliest() to change the field that's used,
django/tests/get_earliest_or_latest/tests.py,50,to determine the earliest object.,
django/tests/get_earliest_or_latest/tests.py,55,earliest() overrides any other ordering specified on the query.,
django/tests/get_earliest_or_latest/tests.py,56,Refs #11283.,
django/tests/get_earliest_or_latest/tests.py,59,Error is raised if the user forgot to add a get_latest_by,
django/tests/get_earliest_or_latest/tests.py,60,in the Model.Meta,
django/tests/get_earliest_or_latest/tests.py,69,"Earliest publication date, earliest expire date.",
django/tests/get_earliest_or_latest/tests.py,74,"Earliest publication date, latest expire date.",
django/tests/get_earliest_or_latest/tests.py,80,Meta.get_latest_by may be a tuple.,
django/tests/get_earliest_or_latest/tests.py,85,"Because no Articles exist yet, latest() raises ArticleDoesNotExist.",
django/tests/get_earliest_or_latest/tests.py,106,Get the latest Article.,
django/tests/get_earliest_or_latest/tests.py,108,Get the latest Article that matches certain filters.,
django/tests/get_earliest_or_latest/tests.py,114,Pass a custom field name to latest() to change the field that's used,
django/tests/get_earliest_or_latest/tests.py,115,to determine the latest object.,
django/tests/get_earliest_or_latest/tests.py,122,latest() overrides any other ordering specified on the query (#11283).,
django/tests/get_earliest_or_latest/tests.py,125,Error is raised if get_latest_by isn't in Model.Meta.,
django/tests/get_earliest_or_latest/tests.py,134,"Latest publication date, latest expire date.",
django/tests/get_earliest_or_latest/tests.py,136,"Latest publication date, earliest expire date.",
django/tests/get_earliest_or_latest/tests.py,142,Meta.get_latest_by may be a tuple.,
django/tests/get_earliest_or_latest/tests.py,147,You can still use latest() with a model that doesn't have,
django/tests/get_earliest_or_latest/tests.py,148,"""get_latest_by"" set -- just pass in the field name manually.",
django/tests/get_earliest_or_latest/tests.py,173,Note: by default PK ordering.,
django/tests/get_earliest_or_latest/tests.py,185,"We know that we've broken the __iter__ method, so the queryset",
django/tests/get_earliest_or_latest/tests.py,186,should always raise an exception.,
django/tests/get_earliest_or_latest/tests.py,196,And it does not matter if there are any records in the DB.,
django/tests/get_earliest_or_latest/models.py,16,"Note that this model doesn't have ""get_latest_by"" set.",
django/tests/get_earliest_or_latest/models.py,19,Ticket #23555 - model with an intentionally broken QuerySet.__iter__ method.,
django/tests/select_related_regress/tests.py,52,"This final query should only have seven tables (port, device and building",
django/tests/select_related_regress/tests.py,53,"twice each, plus connection once). Thus, 6 joins plus the FROM table.",
django/tests/select_related_regress/tests.py,128,Still works if we're dealing with an inherited class,
django/tests/select_related_regress/tests.py,136,Still works if we defer an attribute on the inherited class,
django/tests/select_related_regress/tests.py,143,"Also works if you use only, rather than defer",
django/tests/select_related_regress/tests.py,161,The select_related join wasn't promoted as there was already an,
django/tests/select_related_regress/tests.py,162,existing (even if trimmed) inner join to state.,
django/tests/select_related_regress/tests.py,169,The select_related join was promoted as there is already an,
django/tests/select_related_regress/tests.py,170,existing join.,
django/tests/select_related_regress/models.py,44,Another non-tree hierarchy that exercises code paths similar to the above,
django/tests/select_related_regress/models.py,45,"example, but in a slightly different configuration.",
django/tests/select_related_regress/models.py,72,Models for testing bug #8036.,
django/tests/select_related_regress/models.py,97,Some model inheritance exercises,
django/tests/select_related_regress/models.py,118,Models for testing bug #19870.,
django/tests/introspection/tests.py,32,Table name is a list #15216,
django/tests/introspection/tests.py,129,Regression test for #9991 - 'real' types in postgres,
django/tests/introspection/tests.py,143,"That's {field_name: (field_name_other_table, other_table)}",
django/tests/introspection/tests.py,150,Removing a field shouldn't disturb get_relations (#17785),
django/tests/introspection/tests.py,228,Different backends have different values for same constraints:,
django/tests/introspection/tests.py,229,PRIMARY KEY     UNIQUE CONSTRAINT    UNIQUE INDEX,
django/tests/introspection/tests.py,230,MySQL      pk=1 uniq=1 idx=1  pk=0 uniq=1 idx=1  pk=0 uniq=1 idx=1,
django/tests/introspection/tests.py,231,PostgreSQL pk=1 uniq=1 idx=0  pk=0 uniq=1 idx=0  pk=0 uniq=1 idx=1,
django/tests/introspection/tests.py,232,SQLite     pk=1 uniq=0 idx=0  pk=0 uniq=1 idx=0  pk=0 uniq=1 idx=1,
django/tests/introspection/tests.py,244,Test custom constraints,
django/tests/introspection/tests.py,262,Test field constraints,
django/tests/introspection/tests.py,289,Some databases (e.g. Oracle) include additional check,
django/tests/introspection/tests.py,290,constraints.,
django/tests/introspection/tests.py,292,All constraints are accounted for.,
django/tests/mutually_referential/tests.py,9,Create a Parent,
django/tests/mutually_referential/tests.py,13,Create some children,
django/tests/mutually_referential/tests.py,17,Set the best child,
django/tests/mutually_referential/tests.py,18,No assertion require here; if basic assignment and,
django/tests/mutually_referential/tests.py,19,"deletion works, the test passes.",
django/tests/mutually_referential/models.py,13,Use a simple string for forward declarations.,
django/tests/mutually_referential/models.py,20,You can also explicitly specify the related app.,
django/tests/force_insert_update/tests.py,13,The normal case,
django/tests/force_insert_update/tests.py,16,"Same thing, via an update",
django/tests/force_insert_update/tests.py,20,Won't work because force_update and force_insert are mutually,
django/tests/force_insert_update/tests.py,21,exclusive,
django/tests/force_insert_update/tests.py,27,Try to update something that doesn't have a primary key in the first,
django/tests/force_insert_update/tests.py,28,place.,
django/tests/force_insert_update/tests.py,36,Won't work because we can't insert a pk of the same value.,
django/tests/force_insert_update/tests.py,42,"Trying to update should still fail, even with manual primary keys, if",
django/tests/force_insert_update/tests.py,43,the data isn't in the database already.,
django/tests/properties/tests.py,16,"The ""full_name"" property hasn't provided a ""set"" method.",
django/tests/properties/tests.py,20,And cannot be used to initialize the class.,
django/tests/properties/tests.py,24,"But ""full_name_2"" has, and it can be used to initialize the class.",
django/tests/indexes/tests.py,62,Ensure the index name is properly quoted,
django/tests/indexes/tests.py,71,Test for using index_together with a single list (#22172),
django/tests/indexes/tests.py,103,This would error if opclasses weren't ignored.,
django/tests/indexes/tests.py,107,The `condition` parameter is ignored by databases that don't support partial,
django/tests/indexes/tests.py,108,indexes.,
django/tests/indexes/tests.py,120,This would error if condition weren't ignored.,
django/tests/indexes/tests.py,146,unique=True and db_index=True should only create the varchar-specific,
django/tests/indexes/tests.py,147,index (#19441).,
django/tests/indexes/tests.py,285,The index also shouldn't be created if the ForeignKey is added after,
django/tests/indexes/tests.py,286,the model was created.,
django/tests/indexes/tests.py,294,No deferred SQL. The FK constraint is included in the,
django/tests/indexes/tests.py,295,statement to add the field.,
django/tests/indexes/tests.py,304,SQLite doesn't support timezone-aware datetimes when USE_TZ is False.,
django/tests/indexes/tests.py,307,Schema editor is used to create the index to test that it works.,
django/tests/indexes/tests.py,318,PostgreSQL would otherwise complain about the lookup,
django/tests/indexes/tests.py,319,being converted to a mutable function (by removing,
django/tests/indexes/tests.py,320,the timezone in the cast) which is forbidden.,
django/tests/indexes/tests.py,393,"Because each backend has different syntax for the operators,",
django/tests/indexes/tests.py,394,check ONLY the occurrence of headline in the SQL.,
django/tests/indexes/models.py,8,Avoid validation,
django/tests/indexes/models.py,12,Disable reverse relation,
django/tests/indexes/models.py,14,Set unique to enable model cache.,
django/tests/indexes/models.py,32,Add virtual relation to the ArticleTranslation model.,
django/tests/indexes/models.py,41,Model for index_together being used only with single list,
django/tests/indexes/models.py,50,Indexing a TextField on Oracle or MySQL results in index creation error.,
django/tests/csrf_tests/views.py,17,Doesn't insert a token or anything.,
django/tests/csrf_tests/tests.py,76,This is important to make pages cacheable.  Pages which do call,
django/tests/csrf_tests/tests.py,77,"get_token(), assuming they use the token, are not cacheable because",
django/tests/csrf_tests/tests.py,78,the token is specific to the user,
django/tests/csrf_tests/tests.py,80,"non_token_view_using_request_processor does not call get_token(), but",
django/tests/csrf_tests/tests.py,81,"does use the csrf request processor.  By using this, we are testing",
django/tests/csrf_tests/tests.py,82,that the view processor is properly lazy and doesn't call get_token(),
django/tests/csrf_tests/tests.py,83,until needed.,
django/tests/csrf_tests/tests.py,92,Check the request processing,
django/tests/csrf_tests/tests.py,201,Tests for the template tag method,
django/tests/csrf_tests/tests.py,336,Empty,
django/tests/csrf_tests/tests.py,340,Non-ASCII,
django/tests/csrf_tests/tests.py,344,missing scheme,
django/tests/csrf_tests/tests.py,345,>>> urlparse('//example.com/'),
django/tests/csrf_tests/tests.py,346,"ParseResult(scheme='', netloc='example.com', path='/', params='', query='', fragment='')",
django/tests/csrf_tests/tests.py,350,missing netloc,
django/tests/csrf_tests/tests.py,351,>>> urlparse('https://'),
django/tests/csrf_tests/tests.py,352,"ParseResult(scheme='https', netloc='', path='', params='', query='', fragment='')",
django/tests/csrf_tests/tests.py,377,See ticket #15617,
django/tests/csrf_tests/tests.py,478,Handle both cases here to prevent duplicate code in the,
django/tests/csrf_tests/tests.py,479,session tests.,
django/tests/csrf_tests/tests.py,566,token_view calls get_token() indirectly,
django/tests/csrf_tests/tests.py,587,token_view calls get_token() indirectly,
django/tests/csrf_tests/tests.py,802,The error handler returns status code 599.,
django/tests/many_to_one_null/tests.py,8,Create a Reporter.,
django/tests/many_to_one_null/tests.py,11,Create an Article.,
django/tests/many_to_one_null/tests.py,14,Create an Article via the Reporter object.,
django/tests/many_to_one_null/tests.py,16,"Create an Article with no Reporter by passing ""reporter=None"".",
django/tests/many_to_one_null/tests.py,19,Create another article and reporter,
django/tests/many_to_one_null/tests.py,26,Article objects have access to their related Reporter objects.,
django/tests/many_to_one_null/tests.py,34,Reporter objects have access to their related Article objects.,
django/tests/many_to_one_null/tests.py,41,Need to reget a3 to refresh the cache,
django/tests/many_to_one_null/tests.py,45,Accessing an article's 'reporter' attribute returns None,
django/tests/many_to_one_null/tests.py,46,if the reporter is set to None.,
django/tests/many_to_one_null/tests.py,48,"To retrieve the articles with no reporters set, use ""reporter__isnull=True"".",
django/tests/many_to_one_null/tests.py,50,We can achieve the same thing by filtering for the case where the,
django/tests/many_to_one_null/tests.py,51,reporter is None.,
django/tests/many_to_one_null/tests.py,53,Set the reporter for the Third article,
django/tests/many_to_one_null/tests.py,60,"Remove an article from the set, and check that it was removed.",
django/tests/many_to_one_null/tests.py,67,Try to remove a4 from a set it does not belong to,
django/tests/many_to_one_null/tests.py,73,"Use manager.set() to allocate ForeignKey. Null is legal, so existing",
django/tests/many_to_one_null/tests.py,74,members of the set that are not in the assignment set are set to null.,
django/tests/many_to_one_null/tests.py,77,Use manager.set(clear=True),
django/tests/many_to_one_null/tests.py,80,Clear the rest of the set,
django/tests/many_to_one_null/tests.py,89,"2 queries for clear(), 1 for add(), and 1 to select objects.",
django/tests/many_to_one_null/tests.py,94,"Use descriptor assignment to allocate ForeignKey. Null is legal, so",
django/tests/many_to_one_null/tests.py,95,existing members of the set that are not in the assignment set are,
django/tests/many_to_one_null/tests.py,96,set to null.,
django/tests/many_to_one_null/tests.py,99,Clear the rest of the set,
django/tests/many_to_one_null/tests.py,108,Querysets used in reverse FK assignments are pre-evaluated,
django/tests/many_to_one_null/tests.py,109,so their value isn't affected by the clearing operation in,
django/tests/many_to_one_null/tests.py,110,RelatedManager.set() (#19816).,
django/tests/aggregation_regress/tests.py,135,don't do anything with the queryset (qs) before including it as a,
django/tests/aggregation_regress/tests.py,136,subquery,
django/tests/aggregation_regress/tests.py,155,force the queryset (qs) for the subquery to be evaluated in its,
django/tests/aggregation_regress/tests.py,156,current state,
django/tests/aggregation_regress/tests.py,169,Oracle doesn't support subqueries in group by clause,
django/tests/aggregation_regress/tests.py,177,tests that this query does not raise a DatabaseError due to the full,
django/tests/aggregation_regress/tests.py,178,subselect being (erroneously) added to the GROUP BY parameters,
django/tests/aggregation_regress/tests.py,182,force execution of the query,
django/tests/aggregation_regress/tests.py,186,Ordering requests are ignored,
django/tests/aggregation_regress/tests.py,192,Implicit ordering is also ignored,
django/tests/aggregation_regress/tests.py,198,Baseline results,
django/tests/aggregation_regress/tests.py,204,Empty values query doesn't affect grouping or results,
django/tests/aggregation_regress/tests.py,210,Aggregate overrides extra selected column,
django/tests/aggregation_regress/tests.py,217,Annotations get combined with extra select clauses,
django/tests/aggregation_regress/tests.py,232,Different DB backends return different types for the extra select computation,
django/tests/aggregation_regress/tests.py,235,Order of the annotate/extra in the query doesn't matter,
django/tests/aggregation_regress/tests.py,250,Different DB backends return different types for the extra select computation,
django/tests/aggregation_regress/tests.py,253,Values queries can be combined with annotate and extra,
django/tests/aggregation_regress/tests.py,272,"The order of the (empty) values, annotate and extra clauses doesn't",
django/tests/aggregation_regress/tests.py,273,matter,
django/tests/aggregation_regress/tests.py,292,"If the annotation precedes the values clause, it won't be included",
django/tests/aggregation_regress/tests.py,293,unless it is explicitly named,
django/tests/aggregation_regress/tests.py,307,"If an annotation isn't included in the values, it can still be used",
django/tests/aggregation_regress/tests.py,308,in a filter,
django/tests/aggregation_regress/tests.py,316,The annotations are added to values output if values() precedes,
django/tests/aggregation_regress/tests.py,317,annotate(),
django/tests/aggregation_regress/tests.py,325,All of the objects are getting counted (allow_nulls) and that values,
django/tests/aggregation_regress/tests.py,326,respects the amount of objects,
django/tests/aggregation_regress/tests.py,332,Consecutive calls to annotate accumulate in the query,
django/tests/aggregation_regress/tests.py,351,Aggregates can be composed over annotations.,
django/tests/aggregation_regress/tests.py,352,The return type is derived from the composed aggregate,
django/tests/aggregation_regress/tests.py,366,"Regression for #15624 - Missing SELECT columns when using values, annotate",
django/tests/aggregation_regress/tests.py,367,and aggregate in a single query,
django/tests/aggregation_regress/tests.py,374,Conditional aggregation of a grouped queryset.,
django/tests/aggregation_regress/tests.py,433,Bad field requests in aggregates are caught and reported,
django/tests/aggregation_regress/tests.py,454,Old-style count aggregations can be mixed with new-style,
django/tests/aggregation_regress/tests.py,460,"Non-ordinal, non-computed Aggregates over annotations correctly",
django/tests/aggregation_regress/tests.py,461,inherit the annotation's internal type if the annotation is ordinal,
django/tests/aggregation_regress/tests.py,462,or computed,
django/tests/aggregation_regress/tests.py,475,Aliases are quoted to protected aliases that might be reserved names,
django/tests/aggregation_regress/tests.py,482,Regression for #10064: select_related() plays nice with aggregates,
django/tests/aggregation_regress/tests.py,498,Regression for #10010: exclude on an aggregate field is correctly,
django/tests/aggregation_regress/tests.py,499,negated,
django/tests/aggregation_regress/tests.py,533,Aggregates can be used with F() expressions,
django/tests/aggregation_regress/tests.py,534,... where the F() is pushed into the HAVING clause,
django/tests/aggregation_regress/tests.py,564,... and where the F() references an aggregate,
django/tests/aggregation_regress/tests.py,595,Tests on fields with non-default table and column names.,
django/tests/aggregation_regress/tests.py,607,Aggregates mixed up ordering of columns for backend's convert_values,
django/tests/aggregation_regress/tests.py,608,method. Refs #21126.,
django/tests/aggregation_regress/tests.py,617,Regression for #10089: Check handling of empty result sets with,
django/tests/aggregation_regress/tests.py,618,aggregates,
django/tests/aggregation_regress/tests.py,666,Regression for #10113 - Fields mentioned in order_by() must be,
django/tests/aggregation_regress/tests.py,667,included in the GROUP BY. This only becomes a problem when the,
django/tests/aggregation_regress/tests.py,668,order_by introduces a new join.,
django/tests/aggregation_regress/tests.py,681,Regression for #10127 - Empty select_related() works with annotate,
django/tests/aggregation_regress/tests.py,699,Regression for #10132 - If the values() clause only mentioned extra,
django/tests/aggregation_regress/tests.py,700,"(select=) columns, those columns are used for grouping",
django/tests/aggregation_regress/tests.py,727,Regression for #10182 - Queries with aggregate calls are correctly,
django/tests/aggregation_regress/tests.py,728,realiased when used in a subquery,
django/tests/aggregation_regress/tests.py,743,Regression for #15709 - Ensure each group_by field only exists once,
django/tests/aggregation_regress/tests.py,744,per query,
django/tests/aggregation_regress/tests.py,746,There is just one GROUP BY clause (zero commas means at most one clause).,
django/tests/aggregation_regress/tests.py,750,Regression for #11256 - duplicating a default alias raises ValueError.,
django/tests/aggregation_regress/tests.py,759,Regression for #11256 - providing an aggregate name,
django/tests/aggregation_regress/tests.py,760,that conflicts with a field name on the model raises ValueError,
django/tests/aggregation_regress/tests.py,766,Regression for #11256 - providing an aggregate name,
django/tests/aggregation_regress/tests.py,767,that conflicts with an m2m name on the model raises ValueError,
django/tests/aggregation_regress/tests.py,778,"Regression for #14707 -- If you're using a values query set, some potential conflicts are avoided.",
django/tests/aggregation_regress/tests.py,780,"age is a field on Author, so it shouldn't be allowed as an aggregate.",
django/tests/aggregation_regress/tests.py,781,"But age isn't included in values(), so it is.",
django/tests/aggregation_regress/tests.py,787,"Same problem, but aggregating over m2m fields",
django/tests/aggregation_regress/tests.py,793,"Same problem, but colliding with an m2m field",
django/tests/aggregation_regress/tests.py,800,Regression for #11256 - providing an aggregate name,
django/tests/aggregation_regress/tests.py,801,that conflicts with a reverse-related name on the model raises ValueError,
django/tests/aggregation_regress/tests.py,807,Regression for #10197 -- Queries with aggregates can be pickled.,
django/tests/aggregation_regress/tests.py,808,First check that pickling is possible at all. No crash = success,
django/tests/aggregation_regress/tests.py,812,Then check that the round trip works.,
django/tests/aggregation_regress/tests.py,821,Regression for #10199 - Aggregate calls clone the original query so,
django/tests/aggregation_regress/tests.py,822,the original query can still be used,
django/tests/aggregation_regress/tests.py,837,Regression for #10248 - Annotations work with dates(),
django/tests/aggregation_regress/tests.py,846,Regression for #10290 - extra selects with parameters can be used for,
django/tests/aggregation_regress/tests.py,847,grouping.,
django/tests/aggregation_regress/tests.py,867,Regression for 10425 - annotations don't get in the way of a count(),
django/tests/aggregation_regress/tests.py,868,clause,
django/tests/aggregation_regress/tests.py,878,"Note: intentionally no order_by(), that case needs tests, too.",
django/tests/aggregation_regress/tests.py,924,Regression for 10666 - inherited fields work with annotations and,
django/tests/aggregation_regress/tests.py,925,aggregations,
django/tests/aggregation_regress/tests.py,962,Regression for #10766 - Shouldn't be able to reference an aggregate,
django/tests/aggregation_regress/tests.py,963,fields in an aggregate() call.,
django/tests/aggregation_regress/tests.py,981,Regression for #11789,
django/tests/aggregation_regress/tests.py,994,Books with less than 200 pages per author.,
django/tests/aggregation_regress/tests.py,1014,When a field occurs on the LHS of a HAVING clause that it,
django/tests/aggregation_regress/tests.py,1015,appears correctly in the GROUP BY clause,
django/tests/aggregation_regress/tests.py,1021,"Results should be the same, all Books have more pages than authors",
django/tests/aggregation_regress/tests.py,1173,Regression test for #14476,
django/tests/aggregation_regress/tests.py,1175,The name of the explicitly provided annotation name in this case,
django/tests/aggregation_regress/tests.py,1176,poses no problem,
django/tests/aggregation_regress/tests.py,1183,Neither in this case,
django/tests/aggregation_regress/tests.py,1190,This case used to fail because the ORM couldn't resolve the,
django/tests/aggregation_regress/tests.py,1191,automatically generated annotation name `book__count`,
django/tests/aggregation_regress/tests.py,1198,Referencing the auto-generated name in an aggregate() also works.,
django/tests/aggregation_regress/tests.py,1212,The query executes without problems.,
django/tests/aggregation_regress/tests.py,1217,Regression test for #17144,
django/tests/aggregation_regress/tests.py,1221,"There should only be one GROUP BY clause, for the `id` column.",
django/tests/aggregation_regress/tests.py,1222,`name` and `age` should not be grouped on.,
django/tests/aggregation_regress/tests.py,1245,Works with only() too.,
django/tests/aggregation_regress/tests.py,1269,And select_related(),
django/tests/aggregation_regress/tests.py,1273,In the case of `group_by_selected_pks` we also group by contact.id because of the select_related.,
django/tests/aggregation_regress/tests.py,1309,Unmanaged origin model.,
django/tests/aggregation_regress/tests.py,1317,Unmanaged related model.,
django/tests/aggregation_regress/tests.py,1329,Force treating unmanaged models as tables.,
django/tests/aggregation_regress/tests.py,1373,Assign a tag to model with same PK as the book above. If the JOIN,
django/tests/aggregation_regress/tests.py,1374,used in aggregation doesn't have content type as part of the,
django/tests/aggregation_regress/tests.py,1375,condition the annotation will also count the 'hi mom' tag for b.,
django/tests/aggregation_regress/tests.py,1435,Aggregates are spotted correctly from F objects.,
django/tests/aggregation_regress/tests.py,1436,"Note that Adrian's age is 34 in the fixtures, and he has one book",
django/tests/aggregation_regress/tests.py,1437,so both conditions match one author.,
django/tests/aggregation_regress/tests.py,1496,A query with an existing annotation aggregation on a relation should,
django/tests/aggregation_regress/tests.py,1497,succeed.,
django/tests/aggregation_regress/tests.py,1504,There are three books with rating of 4.0 and two of the books have,
django/tests/aggregation_regress/tests.py,1505,"the same price. Hence, the distinct removes one rating of 4.0",
django/tests/aggregation_regress/tests.py,1506,from the results.,
django/tests/aggregation_regress/tests.py,1537,Force re-evaluation,
django/tests/aggregation_regress/tests.py,1543,No promotion for existing joins,
django/tests/aggregation_regress/tests.py,1546,"Also, the existing join is unpromoted when doing filtering for already",
django/tests/aggregation_regress/tests.py,1547,promoted join.,
django/tests/aggregation_regress/tests.py,1550,"But, as the join is nullable first use by annotate will be LOUTER",
django/tests/aggregation_regress/models.py,74,The generic relations regression test needs two different model,
django/tests/aggregation_regress/models.py,75,"classes with the same PK value, and there are some (external)",
django/tests/aggregation_regress/models.py,76,DB backends that don't work nicely when assigning integer to AutoField,
django/tests/aggregation_regress/models.py,77,column (MSSQL at least).,
django/tests/aggregation_regress/models.py,88,Models for ticket #21150,
django/tests/generic_relations/tests.py,25,Tagging stuff.,
django/tests/generic_relations/tests.py,31,Original list of tags:,
django/tests/generic_relations/tests.py,80,shouldn't had changed the tag,
django/tests/generic_relations/tests.py,122,Recall that the Mineral class doesn't have an explicit GenericRelation,
django/tests/generic_relations/tests.py,123,"defined. That's OK, because you can create TaggedItems explicitly.",
django/tests/generic_relations/tests.py,124,"However, excluding GenericRelations means your lookups have to be a",
django/tests/generic_relations/tests.py,125,bit more explicit.,
django/tests/generic_relations/tests.py,251,One update() query.,
django/tests/generic_relations/tests.py,261,One save() for each object.,
django/tests/generic_relations/tests.py,331,Querysets used in reverse GFK assignments are pre-evaluated so their,
django/tests/generic_relations/tests.py,332,value isn't affected by the clearing operation,
django/tests/generic_relations/tests.py,333,in ManyRelatedManager.set() (#19816).,
django/tests/generic_relations/tests.py,346,GenericRelation isn't usable from the reverse side by default.,
django/tests/generic_relations/tests.py,356,Simple tests for multiple GenericForeignKeys,
django/tests/generic_relations/tests.py,357,"only uses one model, since the above tests should be sufficient.",
django/tests/generic_relations/tests.py,362,Create directly,
django/tests/generic_relations/tests.py,370,Create using GenericRelation,
django/tests/generic_relations/tests.py,377,Filtering works,
django/tests/generic_relations/tests.py,383,Filtering and deleting works,
django/tests/generic_relations/tests.py,391,"If we delete cheetah, Comparisons with cheetah as 'first_obj' will be",
django/tests/generic_relations/tests.py,392,deleted since Animal has an explicit GenericRelation to Comparison,
django/tests/generic_relations/tests.py,393,through first_obj. Comparisons with cheetah as 'other_obj' will not,
django/tests/generic_relations/tests.py,394,be deleted.,
django/tests/generic_relations/tests.py,401,GenericForeignKey should work with subclasses (see #8309),
django/tests/generic_relations/tests.py,409,GenericRelations to models that use multi-table inheritance work.,
django/tests/generic_relations/tests.py,413,We're generating a slightly inefficient query for tags__tag - we,
django/tests/generic_relations/tests.py,414,"first join ValuableRock -> TaggedItem -> ValuableTaggedItem, and then",
django/tests/generic_relations/tests.py,415,we fetch tag by joining TaggedItem from ValuableTaggedItem. The last,
django/tests/generic_relations/tests.py,416,"join isn't necessary, as TaggedItem <-> ValuableTaggedItem is a",
django/tests/generic_relations/tests.py,417,one-to-one join.,
django/tests/generic_relations/tests.py,419,deleting the rock should delete the related tag.,
django/tests/generic_relations/tests.py,423,GenericForeignKey should not use the default manager (which may filter objects) #16048,
django/tests/generic_relations/tests.py,447,get_or_create should work with virtual fields (content_object),
django/tests/generic_relations/tests.py,455,update_or_create should work with virtual fields (content_object),
django/tests/generic_relations/tests.py,481,Create a Vegetable and Mineral with the same id.,
django/tests/generic_relations/tests.py,655,"AllowsNullGFK doesn't require a content_type, so None argument should",
django/tests/generic_relations/tests.py,656,also be allowed.,
django/tests/generic_relations/tests.py,658,TaggedItem requires a content_type but initializing with None should,
django/tests/generic_relations/tests.py,659,be allowed.,
django/tests/generic_relations/test_forms.py,98,Works without a queryset.,
django/tests/generic_relations/test_forms.py,109,A queryset can be used to alter display ordering.,
django/tests/generic_relations/test_forms.py,115,A queryset that omits items.,
django/tests/generic_relations/models.py,92,note the lack of an explicit GenericRelation here...,
django/tests/generic_relations/models.py,108,To test fix for #11263,
django/tests/generic_relations/models.py,144,To test fix for #7551,
django/tests/select_related/tests.py,157,The species_set reverse relation isn't cached.,
django/tests/select_related/models.py,16,Who remembers high school biology?,
django/tests/select_related/models.py,81,and we'll invent a new thing so we have a model with two foreign keys,
django/tests/httpwrappers/tests.py,118,Normally QueryDict doesn't contain non-string values but lazily,
django/tests/httpwrappers/tests.py,119,written tests may make that mistake.,
django/tests/httpwrappers/tests.py,260,Match behavior of __init__() which is also immutable by default.,
django/tests/httpwrappers/tests.py,294,ASCII strings or bytes values are converted to strings.,
django/tests/httpwrappers/tests.py,301,Non-ASCII values are serialized to Latin-1.,
django/tests/httpwrappers/tests.py,305,Other unicode values are MIME-encoded (there's no way to pass them as bytes).,
django/tests/httpwrappers/tests.py,310,"The response also converts string or bytes keys to strings, but requires",
django/tests/httpwrappers/tests.py,311,them to contain ASCII,
django/tests/httpwrappers/tests.py,334,Bug #20889: long lines trigger newlines to be added to headers,
django/tests/httpwrappers/tests.py,335,(which is not allowed due to bug #10188),
django/tests/httpwrappers/tests.py,340,"This one is triggering https://bugs.python.org/issue20747, that is Python",
django/tests/httpwrappers/tests.py,341,will itself insert a newline in the header,
django/tests/httpwrappers/tests.py,345,Bug #10188: Do not allow newlines in headers (CR or LF),
django/tests/httpwrappers/tests.py,360,Bug 16494: HttpResponse should behave consistently with non-strings,
django/tests/httpwrappers/tests.py,364,test content via property,
django/tests/httpwrappers/tests.py,377,test iter content via property,
django/tests/httpwrappers/tests.py,386,test odd inputs,
django/tests/httpwrappers/tests.py,389,'\xde\x9e' == unichr(1950).encode(),
django/tests/httpwrappers/tests.py,392,.content can safely be accessed multiple times.,
django/tests/httpwrappers/tests.py,396,__iter__ can safely be called multiple times (#20187).,
django/tests/httpwrappers/tests.py,399,Accessing .content still works.,
django/tests/httpwrappers/tests.py,402,Accessing .content also works if the response was iterated first.,
django/tests/httpwrappers/tests.py,407,Additional content can be written to the response.,
django/tests/httpwrappers/tests.py,414,Regression test for #13222,
django/tests/httpwrappers/tests.py,436,with Content-Encoding header,
django/tests/httpwrappers/tests.py,469,Standard HttpResponse init args can be used,
django/tests/httpwrappers/tests.py,502,304 responses should not have content/content-type,
django/tests/httpwrappers/tests.py,514,Standard HttpResponse init args can be used,
django/tests/httpwrappers/tests.py,573,iterating over the response itself yields bytestring chunks.,
django/tests/httpwrappers/tests.py,579,and the response can only be iterated once.,
django/tests/httpwrappers/tests.py,582,"even when a sequence that can be iterated many times, like a list,",
django/tests/httpwrappers/tests.py,583,is given as content.,
django/tests/httpwrappers/tests.py,588,iterating over strings still yields bytestring chunks.,
django/tests/httpwrappers/tests.py,591,'\xc3\xa9' == unichr(233).encode(),
django/tests/httpwrappers/tests.py,596,streaming responses don't have a `content` attribute.,
django/tests/httpwrappers/tests.py,599,and you can't accidentally assign to a `content` attribute.,
django/tests/httpwrappers/tests.py,603,but they do have a `streaming_content` attribute.,
django/tests/httpwrappers/tests.py,606,"that exists so we can check if a response is streaming, and wrap or",
django/tests/httpwrappers/tests.py,607,replace the content iterator.,
django/tests/httpwrappers/tests.py,612,coercing a streaming response to bytes doesn't return a complete HTTP,
django/tests/httpwrappers/tests.py,613,message like a regular response does. it only gives us the headers.,
django/tests/httpwrappers/tests.py,617,and this won't consume its content.,
django/tests/httpwrappers/tests.py,620,additional content cannot be written to the response.,
django/tests/httpwrappers/tests.py,625,and we can't tell the current position.,
django/tests/httpwrappers/tests.py,636,Disable the request_finished signal during this test,
django/tests/httpwrappers/tests.py,637,to avoid interfering with the database connection.,
django/tests/httpwrappers/tests.py,646,file isn't closed until we close the response.,
django/tests/httpwrappers/tests.py,652,"when multiple file are assigned as content, make sure they are all",
django/tests/httpwrappers/tests.py,653,closed with the response.,
django/tests/httpwrappers/tests.py,664,file isn't closed until we close the response.,
django/tests/httpwrappers/tests.py,671,"when multiple file are assigned as content, make sure they are all",
django/tests/httpwrappers/tests.py,672,closed with the response.,
django/tests/httpwrappers/tests.py,689,IE compat,
django/tests/httpwrappers/tests.py,690,Safari compat,
django/tests/httpwrappers/tests.py,719,Here parse_cookie() differs from Python's cookie parsing in that it,
django/tests/httpwrappers/tests.py,720,"treats all semicolons as delimiters, even within quotes.",
django/tests/httpwrappers/tests.py,725,Illegal cookies that have an '=' char in an unquoted value.,
django/tests/httpwrappers/tests.py,727,Cookies with ':' character in their name.,
django/tests/httpwrappers/tests.py,729,Cookies with '[' and ']'.,
django/tests/httpwrappers/tests.py,733,Cookies that RFC6265 allows.,
django/tests/httpwrappers/tests.py,735,parse_cookie() has historically kept only the last cookie with the,
django/tests/httpwrappers/tests.py,736,same name.,
django/tests/httpwrappers/tests.py,744,Chunks without an equals sign appear as unnamed values per,
django/tests/httpwrappers/tests.py,745,https://bugzilla.mozilla.org/show_bug.cgi?id=169091,
django/tests/httpwrappers/tests.py,747,Even a double quote may be an unnamed value.,
django/tests/httpwrappers/tests.py,749,"Spaces in names and values, and an equals sign in values.",
django/tests/httpwrappers/tests.py,751,More characters the spec forbids.,
django/tests/httpwrappers/tests.py,753,Unicode characters. The spec only allows ASCII.,
django/tests/httpwrappers/tests.py,755,"Browsers don't send extra whitespace or semicolons in Cookie headers,",
django/tests/httpwrappers/tests.py,756,but parse_cookie() should parse whitespace the same way,
django/tests/httpwrappers/tests.py,757,document.cookie parses whitespace.,
django/tests/mail/custombackend.py,13,Messages are stored in an instance variable for testing.,
django/tests/mail/tests.py,115,Test multiple CC with multiple To,
django/tests/mail/tests.py,127,Testing with Bcc,
django/tests/mail/tests.py,257,"If we don't set the To header manually, it should default to the `to` argument to the constructor",
django/tests/mail/tests.py,394,Make sure MIME attachments also works correctly with other encodings than utf-8,
django/tests/mail/tests.py,452,Unicode in file name,
django/tests/mail/tests.py,466,"filename, actual mimetype",
django/tests/mail/tests.py,505,UTF-8 encoded a umlaut.,
django/tests/mail/tests.py,517,Invalid UTF-8.,
django/tests/mail/tests.py,520,Content should be passed through unmodified.,
django/tests/mail/tests.py,588,Send using non-default connection,
django/tests/mail/tests.py,618,Regression for #13433 - Make sure that EmailMessage doesn't mangle,
django/tests/mail/tests.py,619,'From ' in message body.,
django/tests/mail/tests.py,627,Ticket #3472,
django/tests/mail/tests.py,628,Shouldn't use Base64 encoding at all,
django/tests/mail/tests.py,635,Ticket #11212,
django/tests/mail/tests.py,636,"Shouldn't use quoted printable, should detect it can represent content with 7 bit data",
django/tests/mail/tests.py,644,"Shouldn't use quoted printable, should detect it can represent content with 8 bit data",
django/tests/mail/tests.py,664,Ticket #18967,
django/tests/mail/tests.py,665,Shouldn't use base64 encoding for a child EmailMessage attachment.,
django/tests/mail/tests.py,666,Create a child message first,
django/tests/mail/tests.py,673,Now create a parent,
django/tests/mail/tests.py,679,Attach to parent as a string,
django/tests/mail/tests.py,683,The child message header is not base64 encoded,
django/tests/mail/tests.py,686,Feature test: try attaching email.Message object directly to the mail.,
django/tests/mail/tests.py,694,The child message header is not base64 encoded,
django/tests/mail/tests.py,697,Feature test: try attaching Django's EmailMessage object directly to the mail.,
django/tests/mail/tests.py,705,The child message header is not base64 encoded,
django/tests/mail/tests.py,726,ASCII addresses.,
django/tests/mail/tests.py,736,ASCII addresses with display names.,
django/tests/mail/tests.py,741,Unicode addresses (supported per RFC-6532).,
django/tests/mail/tests.py,749,Unicode addresses with display names.,
django/tests/mail/tests.py,761,Addresses with two @ signs.,
django/tests/mail/tests.py,779,Invalid address with two @ signs.,
django/tests/mail/tests.py,781,Invalid address without the quotes.,
django/tests/mail/tests.py,783,Other invalid addresses.,
django/tests/mail/tests.py,810,Africa/Algiers is UTC+1,
django/tests/mail/tests.py,891,Unencoded body length is < 998 (840) but > 998 when utf-8 encoded.,
django/tests/mail/tests.py,904,send_messages() may take a list or an iterator.,
django/tests/mail/tests.py,1155,Ticket #18861 - Validate emails when using the locmem backend,
django/tests/mail/tests.py,1274,Ignore decode error in SSL/TLS connection tests as the test only,
django/tests/mail/tests.py,1275,cares whether the connection attempt was made.,
django/tests/mail/tests.py,1280,This is only the first part of the login process. But it's enough,
django/tests/mail/tests.py,1281,for our tests.,
django/tests/mail/tests.py,1309,"According to the spec, mailfrom does not necessarily match the",
django/tests/mail/tests.py,1310,From header - this is the case where the local part isn't,
django/tests/mail/tests.py,1311,"encoded, so try to correct that.",
django/tests/mail/tests.py,1449,Simulate an already open connection.,
django/tests/mail/tests.py,1584,Find the actual message,
django/tests/mail/tests.py,1594,"The message only contains CRLF and not combinations of CRLF, LF, and CR.",
django/tests/mail/tests.py,1608,Simulate connection initialization success and a subsequent,
django/tests/mail/tests.py,1609,connection exception.,
django/tests/db_typecasts/tests.py,1,Unit tests for typecast functions in django.db.backends.util,
django/tests/db_typecasts/tests.py,43,ticket 14453,
django/tests/fixtures_model_package/tests.py,28,"Load fixture 1. Single JSON file, with two objects",
django/tests/fixtures_model_package/tests.py,38,Load fixture 2. JSON file imported by default. Overwrites some,
django/tests/fixtures_model_package/tests.py,39,existing objects,
django/tests/fixtures_model_package/tests.py,50,Load a fixture that doesn't exist,
django/tests/generic_views/test_dates.py,109,Regression test for #18087,
django/tests/generic_views/test_dates.py,111,1 query for years list + 1 query for books,
django/tests/generic_views/test_dates.py,114,same as above + 1 query to test if books exist + 1 query to count them,
django/tests/generic_views/test_dates.py,119,Regression test for #18354,
django/tests/generic_views/test_dates.py,175,"Since allow_empty=False, next/prev years must be valid (#7164)",
django/tests/generic_views/test_dates.py,195,"Since allow_empty=True, next/prev are allowed to be empty years (#7164)",
django/tests/generic_views/test_dates.py,200,Create a new book in the future,
django/tests/generic_views/test_dates.py,222,"Zebras comes after Dreaming by name, but before on '-pubdate' which is the default sorting",
django/tests/generic_views/test_dates.py,261,Regression test for #18354,
django/tests/generic_views/test_dates.py,294,These are context values from get_dated_items().,
django/tests/generic_views/test_dates.py,317,"Since allow_empty=False, next/prev months must be valid (#7164)",
django/tests/generic_views/test_dates.py,322,"allow_empty = False, empty month",
django/tests/generic_views/test_dates.py,326,"allow_empty = True, empty month",
django/tests/generic_views/test_dates.py,333,"Since allow_empty=True, next/prev are allowed to be empty months (#7164)",
django/tests/generic_views/test_dates.py,337,allow_empty but not allow_future: next_month should be empty (#7164),
django/tests/generic_views/test_dates.py,348,"allow_future = False, future month",
django/tests/generic_views/test_dates.py,352,"allow_future = True, valid future month",
django/tests/generic_views/test_dates.py,359,"Since allow_future = True but not allow_empty, next/prev are not",
django/tests/generic_views/test_dates.py,360,allowed to be empty months (#7164),
django/tests/generic_views/test_dates.py,364,"allow_future, but not allow_empty, with a current month. So next",
django/tests/generic_views/test_dates.py,365,"should be in the future (yup, #7164, again)",
django/tests/generic_views/test_dates.py,405,The following test demonstrates the bug,
django/tests/generic_views/test_dates.py,409,The bug does not occur here because a Book with pubdate of Sep 1 exists,
django/tests/generic_views/test_dates.py,461,"Since allow_empty=False, next/prev weeks must be valid",
django/tests/generic_views/test_dates.py,466,"allow_empty = False, empty week",
django/tests/generic_views/test_dates.py,470,"allow_empty = True, empty month",
django/tests/generic_views/test_dates.py,476,"Since allow_empty=True, next/prev are allowed to be empty weeks",
django/tests/generic_views/test_dates.py,480,allow_empty but not allow_future: next_week should be empty,
django/tests/generic_views/test_dates.py,487,"January 7th always falls in week 1, given Python's definition of week numbers",
django/tests/generic_views/test_dates.py,500,"Since allow_future = True but not allow_empty, next/prev are not",
django/tests/generic_views/test_dates.py,501,allowed to be empty weeks,
django/tests/generic_views/test_dates.py,505,"allow_future, but not allow_empty, with a current week. So next",
django/tests/generic_views/test_dates.py,506,should be in the future,
django/tests/generic_views/test_dates.py,532,Regression for #14752,
django/tests/generic_views/test_dates.py,568,"Since allow_empty=False, next/prev days must be valid.",
django/tests/generic_views/test_dates.py,573,"allow_empty = False, empty month",
django/tests/generic_views/test_dates.py,577,"allow_empty = True, empty month",
django/tests/generic_views/test_dates.py,583,"Since it's allow empty, next/prev are allowed to be empty months (#7164)",
django/tests/generic_views/test_dates.py,587,allow_empty but not allow_future: next_month should be empty (#7164),
django/tests/generic_views/test_dates.py,598,"allow_future = False, future month",
django/tests/generic_views/test_dates.py,602,"allow_future = True, valid future month",
django/tests/generic_views/test_dates.py,608,"allow_future but not allow_empty, next/prev must be valid",
django/tests/generic_views/test_dates.py,612,"allow_future, but not allow_empty, with a current month.",
django/tests/generic_views/test_dates.py,618,"allow_future for yesterday, next_day is today (#17192)",
django/tests/generic_views/test_dates.py,668,2008-04-02T00:00:00+03:00 (beginning of day) > 2008-04-01T22:00:00+00:00 (book signing event date),
django/tests/generic_views/test_dates.py,673,2008-04-03T00:00:00+03:00 (end of day) > 2008-04-02T22:00:00+00:00 (book signing event date),
django/tests/generic_views/test_dates.py,764,2008-04-02T00:00:00+03:00 (beginning of day) > 2008-04-01T22:00:00+00:00 (book signing event date),
django/tests/generic_views/test_dates.py,769,2008-04-03T00:00:00+03:00 (end of day) > 2008-04-02T22:00:00+00:00 (book signing event date),
django/tests/generic_views/urls.py,11,TemplateView,
django/tests/generic_views/urls.py,32,DetailView,
django/tests/generic_views/urls.py,54,FormView,
django/tests/generic_views/urls.py,58,Create/UpdateView,
django/tests/generic_views/urls.py,108,ArchiveIndexView,
django/tests/generic_views/urls.py,124,ListView,
django/tests/generic_views/urls.py,152,YearArchiveView,
django/tests/generic_views/urls.py,153,Mixing keyword and positional captures below is intentional; the views,
django/tests/generic_views/urls.py,154,ought to be able to accept either.,
django/tests/generic_views/urls.py,172,MonthArchiveView,
django/tests/generic_views/urls.py,182,WeekArchiveView,
django/tests/generic_views/urls.py,195,DayArchiveView,
django/tests/generic_views/urls.py,208,TodayArchiveView,
django/tests/generic_views/urls.py,213,DateDetailView,
django/tests/generic_views/urls.py,231,Useful for testing redirects,
django/tests/generic_views/test_list.py,58,Short datasets also result in a paginated view.,
django/tests/generic_views/test_list.py,112,Custom pagination allows for 2 orphans on a page size of 5,
django/tests/generic_views/test_list.py,129,Custom pagination allows for 2 orphans on a page size of 5,
django/tests/generic_views/test_list.py,219,Regression test for #17535,
django/tests/generic_views/test_list.py,221,1 query for authors,
django/tests/generic_views/test_list.py,224,same as above + 1 query to test if authors exist + 1 query for pagination,
django/tests/generic_views/test_list.py,244,test for #19240,
django/tests/generic_views/test_list.py,245,tests that source exception's message is included in page,
django/tests/generic_views/views.py,40,Ensures get_context_object_name() doesn't reference self.object.,
django/tests/generic_views/views.py,107,we don't define the usual template_name here,
django/tests/generic_views/views.py,110,"Dummy object, but attr is required by get_template_name()",
django/tests/generic_views/views.py,145,Used to ensure get_form() is called once.,
django/tests/generic_views/views.py,268,use the same templates as for books,
django/tests/generic_views/test_edit.py,139,Also test with escaped chars in URL,
django/tests/generic_views/test_edit.py,221,Required for OneAuthorUpdate.,
django/tests/generic_views/test_edit.py,235,Modification with both POST and PUT (browser compatible),
django/tests/generic_views/test_edit.py,280,Also test with escaped chars in URL,
django/tests/generic_views/test_edit.py,326,Modification with both POST and PUT (browser compatible),
django/tests/generic_views/test_edit.py,350,Deletion with POST,
django/tests/generic_views/test_edit.py,357,Deletion with browser compatible DELETE method,
django/tests/generic_views/test_edit.py,374,Also test with escaped chars in URL,
django/tests/generic_views/test_base.py,152,Check each of the allowed method names,
django/tests/generic_views/test_base.py,157,Check the case view argument is ok if predefined on the class...,
django/tests/generic_views/test_base.py,159,...but raises errors otherwise.,
django/tests/generic_views/test_base.py,263,Not calling super().setup(),
django/tests/generic_views/test_base.py,369,Let the cache expire and test again,
django/tests/generic_views/test_base.py,493,we can't use self.rf.get because it always sets QUERY_STRING,
django/tests/generic_views/test_base.py,513,the test_name key is inserted by the test classes parent,
django/tests/generic_views/test_base.py,518,test that kwarg overrides values assigned higher up,
django/tests/generic_views/test_base.py,523,Checks 'pony' key presence in dict returned by get_context_date,
django/tests/generic_views/test_base.py,530,Checks 'object' key presence in dict returned by get_context_date #20234,
django/tests/generic_views/test_base.py,542,Don't pass queryset as argument,
django/tests/generic_views/test_base.py,551,Overwrite the view's queryset with queryset from kwarg,
django/tests/model_options/test_tablespaces.py,23,We can't test the DEFAULT_TABLESPACE and DEFAULT_INDEX_TABLESPACE settings,
django/tests/model_options/test_tablespaces.py,24,"because they're evaluated when the model class is defined. As a consequence,",
django/tests/model_options/test_tablespaces.py,25,"@override_settings doesn't work, and the tests depend",
django/tests/model_options/test_tablespaces.py,30,The unmanaged models need to be removed after the test in order to,
django/tests/model_options/test_tablespaces.py,31,prevent bad interactions with the flush operation in other tests.,
django/tests/model_options/test_tablespaces.py,53,1 for the table,
django/tests/model_options/test_tablespaces.py,55,1 for the index on the primary key,
django/tests/model_options/test_tablespaces.py,58,1 for the table + 1 for the index on the primary key,
django/tests/model_options/test_tablespaces.py,63,No tablespace-related SQL,
django/tests/model_options/test_tablespaces.py,71,1 for the table,
django/tests/model_options/test_tablespaces.py,73,1 for the primary key + 1 for the index on code,
django/tests/model_options/test_tablespaces.py,76,1 for the table + 1 for the primary key + 1 for the index on code,
django/tests/model_options/test_tablespaces.py,79,1 for the index on reference,
django/tests/model_options/test_tablespaces.py,84,No tablespace-related SQL,
django/tests/model_options/test_tablespaces.py,91,"The join table of the ManyToManyField goes to the model's tablespace,",
django/tests/model_options/test_tablespaces.py,92,"and its indexes too, unless DEFAULT_INDEX_TABLESPACE is set.",
django/tests/model_options/test_tablespaces.py,94,1 for the table,
django/tests/model_options/test_tablespaces.py,96,1 for the primary key,
django/tests/model_options/test_tablespaces.py,99,1 for the table + 1 for the index on the primary key,
django/tests/model_options/test_tablespaces.py,104,"The ManyToManyField declares no db_tablespace, its indexes go to",
django/tests/model_options/test_tablespaces.py,105,"the model's tablespace, unless DEFAULT_INDEX_TABLESPACE is set.",
django/tests/model_options/test_tablespaces.py,113,"The join table of the ManyToManyField goes to the model's tablespace,",
django/tests/model_options/test_tablespaces.py,114,"and its indexes too, unless DEFAULT_INDEX_TABLESPACE is set.",
django/tests/model_options/test_tablespaces.py,116,1 for the table,
django/tests/model_options/test_tablespaces.py,118,1 for the primary key,
django/tests/model_options/test_tablespaces.py,121,1 for the table + 1 for the index on the primary key,
django/tests/model_options/test_tablespaces.py,126,"The ManyToManyField declares db_tablespace, its indexes go there.",
django/tests/model_options/test_default_related_name.py,34,model_options is the name of the application for this test.,
django/tests/model_options/models/tablespaces.py,3,"Since the test database doesn't have tablespaces, it's impossible for Django",
django/tests/model_options/models/tablespaces.py,4,to create the tables for models where db_tablespace is set. To avoid this,
django/tests/model_options/models/tablespaces.py,5,"problem, we mark the models as unmanaged, and temporarily revert them to",
django/tests/model_options/models/tablespaces.py,6,managed during each test. We also set them to use the same tables as the,
django/tests/model_options/models/tablespaces.py,7,"""reference"" models to avoid errors when other tests run 'migrate'",
django/tests/model_options/models/tablespaces.py,8,(proxy_models_inheritance does).,
django/tests/model_options/models/tablespaces.py,43,Also set the tables for automatically created models,
django/tests/forms_tests/widget_tests/test_input.py,12,reuse the same attrs for another widget,
django/tests/forms_tests/widget_tests/test_input.py,14,shouldn't change the widget type,
django/tests/forms_tests/widget_tests/test_fileinput.py,23,False when initial data exists. The file input is left blank by the,
django/tests/forms_tests/widget_tests/test_fileinput.py,24,"user to keep the existing, initial value.",
django/tests/forms_tests/widget_tests/base.py,24,Django escapes quotes with '&quot;' while Jinja2 uses '&#34;'.,
django/tests/forms_tests/widget_tests/base.py,26,Django escapes single quotes with '&#x27;' while Jinja2 uses '&#39;'.,
django/tests/forms_tests/widget_tests/test_hiddeninput.py,13,Always False to avoid browser validation on inputs hidden from the,
django/tests/forms_tests/widget_tests/test_hiddeninput.py,14,user.,
django/tests/forms_tests/widget_tests/test_textinput.py,78,Text inputs can safely trigger the browser validation.,
django/tests/forms_tests/widget_tests/test_checkboxselectmultiple.py,187,Always False because browser validation would require all checkboxes,
django/tests/forms_tests/widget_tests/test_checkboxselectmultiple.py,188,to be checked instead of at least one.,
django/tests/forms_tests/widget_tests/test_clearablefileinput.py,154,False when initial data exists. The file input is left blank by the,
django/tests/forms_tests/widget_tests/test_clearablefileinput.py,155,"user to keep the existing, initial value.",
django/tests/forms_tests/widget_tests/test_multiwidget.py,226,"w2 ought to be independent of w1, since MultiWidget ought",
django/tests/forms_tests/widget_tests/test_multiwidget.py,227,to make a copy of its sub-widgets when it is copied.,
django/tests/forms_tests/widget_tests/test_select.py,261,Template-related attributes,
django/tests/forms_tests/widget_tests/test_selectdatewidget.py,320,Rendering the default state with empty_label set as string.,
django/tests/forms_tests/widget_tests/test_selectdatewidget.py,325,Rendering the default state with empty_label tuple.,
django/tests/forms_tests/widget_tests/test_selectdatewidget.py,471,"Even with an invalid date, the widget should reflect the entered value (#17401).",
django/tests/forms_tests/widget_tests/test_selectdatewidget.py,474,Years before 1900 should work.,
django/tests/forms_tests/widget_tests/test_selectdatewidget.py,480,And years before 1000 (demonstrating the need for datetime_safe).,
django/tests/forms_tests/tests/test_error_messages.py,228,This form should print errors the default way.,
django/tests/forms_tests/tests/test_error_messages.py,239,This one should wrap error groups in the customized way.,
django/tests/forms_tests/tests/test_error_messages.py,245,The forms layer doesn't escape input values directly because error,
django/tests/forms_tests/tests/test_error_messages.py,246,"messages might be presented in non-HTML contexts. Instead, the",
django/tests/forms_tests/tests/test_error_messages.py,247,"message is marked for escaping by the template engine, so a template",
django/tests/forms_tests/tests/test_error_messages.py,248,is needed to trigger the escaping.,
django/tests/forms_tests/tests/test_error_messages.py,287,Create choices for the model choice field tests below.,
django/tests/forms_tests/tests/test_error_messages.py,292,ModelChoiceField,
django/tests/forms_tests/tests/test_error_messages.py,301,ModelMultipleChoiceField,
django/tests/forms_tests/tests/test_utils.py,11,Tests for forms/utils.py module.,
django/tests/forms_tests/tests/test_utils.py,14,,
django/tests/forms_tests/tests/test_utils.py,15,flatatt,
django/tests/forms_tests/tests/test_utils.py,16,,
django/tests/forms_tests/tests/test_utils.py,53,,
django/tests/forms_tests/tests/test_utils.py,54,ValidationError,
django/tests/forms_tests/tests/test_utils.py,55,,
django/tests/forms_tests/tests/test_utils.py,57,Can take a string.,
django/tests/forms_tests/tests/test_utils.py,62,Can take a unicode string.,
django/tests/forms_tests/tests/test_utils.py,67,Can take a lazy string.,
django/tests/forms_tests/tests/test_utils.py,72,Can take a list.,
django/tests/forms_tests/tests/test_utils.py,77,Can take a dict.,
django/tests/forms_tests/tests/test_utils.py,82,Can take a mixture in a list.,
django/tests/forms_tests/tests/test_utils.py,106,Can take a non-string.,
django/tests/forms_tests/tests/test_utils.py,112,Escapes non-safe input but not input marked safe.,
django/tests/forms_tests/tests/test_formsets.py,38,A FormSet that takes a list of favorite drinks and raises an error if,
django/tests/forms_tests/tests/test_formsets.py,39,there are any duplicates.,
django/tests/forms_tests/tests/test_formsets.py,98,FormSet are treated similarly to Forms. FormSet has an is_valid(),
django/tests/forms_tests/tests/test_formsets.py,99,"method, and a cleaned_data or errors attribute depending on whether",
django/tests/forms_tests/tests/test_formsets.py,100,"all the forms passed validation. However, unlike a Form, cleaned_data",
django/tests/forms_tests/tests/test_formsets.py,101,and errors will be a list of dicts rather than a single dict.,
django/tests/forms_tests/tests/test_formsets.py,106,"If a FormSet wasn't passed any data, is_valid() and has_changed()",
django/tests/forms_tests/tests/test_formsets.py,107,return False.,
django/tests/forms_tests/tests/test_formsets.py,142,FormSet instances can also have an error attribute if validation failed for,
django/tests/forms_tests/tests/test_formsets.py,143,any of the forms.,
django/tests/forms_tests/tests/test_formsets.py,181,invalid formset,
django/tests/forms_tests/tests/test_formsets.py,185,valid formset,
django/tests/forms_tests/tests/test_formsets.py,248,"Since every form was displayed as blank, they are also accepted as",
django/tests/forms_tests/tests/test_formsets.py,249,"blank. This may seem a little strange, but min_num is used to require",
django/tests/forms_tests/tests/test_formsets.py,250,a minimum number of forms to be completed.,
django/tests/forms_tests/tests/test_formsets.py,252,the number of forms rendered,
django/tests/forms_tests/tests/test_formsets.py,253,the number of forms with initial data,
django/tests/forms_tests/tests/test_formsets.py,254,min number of forms,
django/tests/forms_tests/tests/test_formsets.py,255,max number of forms,
django/tests/forms_tests/tests/test_formsets.py,274,Min_num forms are required; extra forms can be empty.,
django/tests/forms_tests/tests/test_formsets.py,302,the number of forms rendered,
django/tests/forms_tests/tests/test_formsets.py,303,the number of forms with initial data,
django/tests/forms_tests/tests/test_formsets.py,304,min number of forms,
django/tests/forms_tests/tests/test_formsets.py,305,max number of forms,
django/tests/forms_tests/tests/test_formsets.py,326,the number of forms rendered,
django/tests/forms_tests/tests/test_formsets.py,327,the number of forms with initial data,
django/tests/forms_tests/tests/test_formsets.py,328,min number of forms,
django/tests/forms_tests/tests/test_formsets.py,329,max number of forms - should be ignored,
django/tests/forms_tests/tests/test_formsets.py,348,the number of forms rendered,
django/tests/forms_tests/tests/test_formsets.py,349,the number of forms with initial data,
django/tests/forms_tests/tests/test_formsets.py,350,min number of forms,
django/tests/forms_tests/tests/test_formsets.py,351,max number of forms - should be ignored,
django/tests/forms_tests/tests/test_formsets.py,379,changed from initial,
django/tests/forms_tests/tests/test_formsets.py,401,the number of forms rendered,
django/tests/forms_tests/tests/test_formsets.py,402,the number of forms with initial data,
django/tests/forms_tests/tests/test_formsets.py,403,min number of forms,
django/tests/forms_tests/tests/test_formsets.py,404,max number of forms,
django/tests/forms_tests/tests/test_formsets.py,408,missing value,
django/tests/forms_tests/tests/test_formsets.py,436,Retrieving an empty form works. Tt shows up in the form list.,
django/tests/forms_tests/tests/test_formsets.py,465,"To delete something, set that form's special delete field to 'on'.",
django/tests/forms_tests/tests/test_formsets.py,466,Let's go ahead and delete Fergie.,
django/tests/forms_tests/tests/test_formsets.py,468,the number of forms rendered,
django/tests/forms_tests/tests/test_formsets.py,469,the number of forms with initial data,
django/tests/forms_tests/tests/test_formsets.py,470,min number of forms,
django/tests/forms_tests/tests/test_formsets.py,471,max number of forms,
django/tests/forms_tests/tests/test_formsets.py,507,the number of forms rendered,
django/tests/forms_tests/tests/test_formsets.py,508,the number of forms with initial data,
django/tests/forms_tests/tests/test_formsets.py,509,min number of forms,
django/tests/forms_tests/tests/test_formsets.py,510,max number of forms,
django/tests/forms_tests/tests/test_formsets.py,521,"If the deletion flag is removed, validation is enabled.",
django/tests/forms_tests/tests/test_formsets.py,534,no name!,
django/tests/forms_tests/tests/test_formsets.py,570,the number of forms rendered,
django/tests/forms_tests/tests/test_formsets.py,571,the number of forms with initial data,
django/tests/forms_tests/tests/test_formsets.py,572,min number of forms,
django/tests/forms_tests/tests/test_formsets.py,573,max number of forms,
django/tests/forms_tests/tests/test_formsets.py,626,the number of forms rendered,
django/tests/forms_tests/tests/test_formsets.py,627,the number of forms with initial data,
django/tests/forms_tests/tests/test_formsets.py,628,min number of forms,
django/tests/forms_tests/tests/test_formsets.py,629,max number of forms,
django/tests/forms_tests/tests/test_formsets.py,659,the number of forms rendered,
django/tests/forms_tests/tests/test_formsets.py,660,the number of forms with initial data,
django/tests/forms_tests/tests/test_formsets.py,661,min number of forms,
django/tests/forms_tests/tests/test_formsets.py,662,max number of forms,
django/tests/forms_tests/tests/test_formsets.py,697,"Let's delete Fergie, and put The Decemberists ahead of Calexico.",
django/tests/forms_tests/tests/test_formsets.py,699,the number of forms rendered,
django/tests/forms_tests/tests/test_formsets.py,700,the number of forms with initial data,
django/tests/forms_tests/tests/test_formsets.py,701,min number of forms,
django/tests/forms_tests/tests/test_formsets.py,702,max number of forms,
django/tests/forms_tests/tests/test_formsets.py,742,no name!,
django/tests/forms_tests/tests/test_formsets.py,756,Start out with a some duplicate data.,
django/tests/forms_tests/tests/test_formsets.py,758,the number of forms rendered,
django/tests/forms_tests/tests/test_formsets.py,759,the number of forms with initial data,
django/tests/forms_tests/tests/test_formsets.py,760,min number of forms,
django/tests/forms_tests/tests/test_formsets.py,761,max number of forms,
django/tests/forms_tests/tests/test_formsets.py,767,Any errors raised by formset.clean() are available via the,
django/tests/forms_tests/tests/test_formsets.py,768,formset.non_form_errors() method.,
django/tests/forms_tests/tests/test_formsets.py,771,The valid case still works.,
django/tests/forms_tests/tests/test_formsets.py,779,"When not passed, max_num will take a high default value, leaving the",
django/tests/forms_tests/tests/test_formsets.py,780,number of forms only controlled by the value of the extra parameter.,
django/tests/forms_tests/tests/test_formsets.py,792,If max_num is 0 then no form is rendered at all.,
django/tests/forms_tests/tests/test_formsets.py,819,"When not passed, max_num will take a high default value, leaving the",
django/tests/forms_tests/tests/test_formsets.py,820,number of forms only controlled by the value of the initial and extra,
django/tests/forms_tests/tests/test_formsets.py,821,parameters.,
django/tests/forms_tests/tests/test_formsets.py,842,initial trumps max_num,
django/tests/forms_tests/tests/test_formsets.py,911,the number of forms rendered,
django/tests/forms_tests/tests/test_formsets.py,912,the number of forms with initial data,
django/tests/forms_tests/tests/test_formsets.py,913,min number of forms,
django/tests/forms_tests/tests/test_formsets.py,914,max number of forms,
django/tests/forms_tests/tests/test_formsets.py,926,An iterated formset yields formset.forms.,
django/tests/forms_tests/tests/test_formsets.py,930,A formset may be indexed to retrieve its forms.,
django/tests/forms_tests/tests/test_formsets.py,935,Formsets can override the default iteration order,
django/tests/forms_tests/tests/test_formsets.py,945,__iter__() modifies the rendering order.,
django/tests/forms_tests/tests/test_formsets.py,946,"Compare forms from ""reverse"" formset with forms from original formset",
django/tests/forms_tests/tests/test_formsets.py,992,number of forms rendered,
django/tests/forms_tests/tests/test_formsets.py,993,number of forms with initial data,
django/tests/forms_tests/tests/test_formsets.py,994,min number of forms,
django/tests/forms_tests/tests/test_formsets.py,995,max number of forms,
django/tests/forms_tests/tests/test_formsets.py,1005,reduce the default limit of 1000 temporarily for testing,
django/tests/forms_tests/tests/test_formsets.py,1010,someone fiddles with the mgmt form data...,
django/tests/forms_tests/tests/test_formsets.py,1015,min number of forms,
django/tests/forms_tests/tests/test_formsets.py,1028,But we still only instantiate 3 forms,
django/tests/forms_tests/tests/test_formsets.py,1030,and the formset isn't valid,
django/tests/forms_tests/tests/test_formsets.py,1037,reduce the default limit of 1000 temporarily for testing,
django/tests/forms_tests/tests/test_formsets.py,1041,"for this form, we want a limit of 4",
django/tests/forms_tests/tests/test_formsets.py,1047,min number of forms,
django/tests/forms_tests/tests/test_formsets.py,1060,Four forms are instantiated and no exception is raised,
django/tests/forms_tests/tests/test_formsets.py,1102,"formset_data, expected error count",
django/tests/forms_tests/tests/test_formsets.py,1115,the number of forms rendered,
django/tests/forms_tests/tests/test_formsets.py,1116,the number of forms with initial data,
django/tests/forms_tests/tests/test_formsets.py,1117,max number of forms - should be ignored,
django/tests/forms_tests/tests/test_formsets.py,1219,<-- this date is missing but required,
django/tests/forms_tests/tests/test_formsets.py,1238,Empty forms should be unbound,
django/tests/forms_tests/tests/test_formsets.py,1241,The empty forms should be equal.,
django/tests/forms_tests/tests/test_i18n.py,21,"Translations are done at rendering time, so multi-lingual apps can define forms)",
django/tests/forms_tests/tests/test_i18n.py,71,Translated error messages,
django/tests/forms_tests/tests/test_i18n.py,91,Deep copying translated text shouldn't raise an error.,
django/tests/forms_tests/tests/tests.py,66,The empty value is a QuerySet,
django/tests/forms_tests/tests/tests.py,68,"While we're at it, test whether a QuerySet is returned if there *is* a value.",
django/tests/forms_tests/tests/tests.py,153,FileModel with unicode filename and data,
django/tests/forms_tests/tests/tests.py,163,Boundary conditions on a PositiveIntegerField,
django/tests/forms_tests/tests/tests.py,177,Formfield initial values,
django/tests/forms_tests/tests/tests.py,178,"If the model has default values for some fields, they are used as the formfield",
django/tests/forms_tests/tests/tests.py,179,initial values.,
django/tests/forms_tests/tests/tests.py,192,"In a ModelForm that is passed an instance, the initial values come from the",
django/tests/forms_tests/tests/tests.py,193,"instance's values, not the model's defaults.",
django/tests/forms_tests/tests/tests.py,259,Issue 12337. save_instance should honor the passed-in exclude keyword.,
django/tests/forms_tests/tests/tests.py,313,Saving a form with a blank choice results in the expected,
django/tests/forms_tests/tests/tests.py,314,value being stored in the database.,
django/tests/forms_tests/tests/test_input_formats.py,11,nl/formats.py has customized TIME_INPUT_FORMATS:,
django/tests/forms_tests/tests/test_input_formats.py,12,"['%H:%M:%S', '%H.%M:%S', '%H.%M', '%H:%M']",
django/tests/forms_tests/tests/test_input_formats.py,21,Parse a time in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,25,"Parse a time in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,29,The parsed result does a round trip,
django/tests/forms_tests/tests/test_input_formats.py,33,"Parse a time in a valid, but non-default format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,37,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,41,"ISO formats are accepted, even if not specified in formats.py",
django/tests/forms_tests/tests/test_input_formats.py,48,Parse a time in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,52,"Parse a time in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,56,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,60,"Parse a time in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,64,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,71,Parse a time in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,77,"Parse a time in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,81,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,85,"Parse a time in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,89,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,96,Parse a time in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,102,"Parse a time in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,106,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,110,"Parse a time in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,114,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,124,Parse a time in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,128,"Parse a time in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,132,The parsed result does a round trip,
django/tests/forms_tests/tests/test_input_formats.py,136,"Parse a time in a valid, but non-default format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,140,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,147,Parse a time in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,151,"Parse a time in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,155,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,159,"Parse a time in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,163,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,170,Parse a time in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,176,"Parse a time in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,180,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,184,"Parse a time in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,188,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,195,Parse a time in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,201,"Parse a time in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,205,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,209,"Parse a time in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,213,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,222,Parse a time in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,226,"Parse a time in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,230,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,234,"Parse a time in a valid, but non-default format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,238,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,245,Parse a time in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,249,"Parse a time in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,253,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,257,"Parse a time in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,261,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,268,Parse a time in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,272,"Parse a time in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,276,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,280,"Parse a time in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,284,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,291,Parse a time in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,295,"Parse a time in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,299,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,303,"Parse a time in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,307,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,323,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,327,"ISO formats are accepted, even if not specified in formats.py",
django/tests/forms_tests/tests/test_input_formats.py,330,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,334,The parsed result does a round trip,
django/tests/forms_tests/tests/test_input_formats.py,338,"Parse a date in a valid, but non-default format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,342,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,349,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,353,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,357,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,361,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,365,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,372,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,380,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,384,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,388,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,392,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,399,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,407,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,411,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,415,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,419,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,429,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,433,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,437,The parsed result does a round trip,
django/tests/forms_tests/tests/test_input_formats.py,441,"Parse a date in a valid, but non-default format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,445,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,452,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,456,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,460,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,464,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,468,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,475,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,481,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,485,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,489,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,493,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,500,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,506,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,510,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,514,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,518,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,527,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,531,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,535,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,539,"Parse a date in a valid, but non-default format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,543,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,550,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,554,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,558,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,562,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,566,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,573,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,577,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,581,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,585,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,589,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,596,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,600,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,604,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,608,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,612,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,628,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,632,"ISO formats are accepted, even if not specified in formats.py",
django/tests/forms_tests/tests/test_input_formats.py,635,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,639,The parsed result does a round trip,
django/tests/forms_tests/tests/test_input_formats.py,643,"Parse a date in a valid, but non-default format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,647,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,654,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,658,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,662,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,666,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,670,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,677,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,685,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,689,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,693,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,697,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,704,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,712,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,715,ISO format is always valid.,
django/tests/forms_tests/tests/test_input_formats.py,720,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,724,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,728,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,738,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,742,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,746,The parsed result does a round trip,
django/tests/forms_tests/tests/test_input_formats.py,750,"Parse a date in a valid, but non-default format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,754,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,761,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,765,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,769,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,773,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,777,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,784,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,790,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,794,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,798,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,802,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,809,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,815,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,819,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,823,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,827,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,836,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,840,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,844,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,848,"Parse a date in a valid, but non-default format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,852,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,859,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,863,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,867,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,871,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,875,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,882,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,886,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,890,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,894,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,898,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_input_formats.py,905,Parse a date in an unaccepted format; get an error,
django/tests/forms_tests/tests/test_input_formats.py,909,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,913,The parsed result does a round trip to the same format,
django/tests/forms_tests/tests/test_input_formats.py,917,"Parse a date in a valid format, get a parsed result",
django/tests/forms_tests/tests/test_input_formats.py,921,The parsed result does a round trip to default format,
django/tests/forms_tests/tests/test_forms.py,44,A Form is a collection of Fields. It knows how to validate a set of data and it,
django/tests/forms_tests/tests/test_forms.py,45,"knows how to render itself in a couple of default ways (e.g., an HTML table).",
django/tests/forms_tests/tests/test_forms.py,46,"You can pass it data in __init__(), as a dictionary.",
django/tests/forms_tests/tests/test_forms.py,49,Pass a dictionary to a Form's __init__().,
django/tests/forms_tests/tests/test_forms.py,110,"Empty dictionaries are valid, too.",
django/tests/forms_tests/tests/test_forms.py,175,"If you don't pass any values to the Form's __init__(), or if you pass None,",
django/tests/forms_tests/tests/test_forms.py,176,the Form will be considered unbound and won't do any validation. Form.errors,
django/tests/forms_tests/tests/test_forms.py,177,will be an empty dictionary *but* Form.is_valid() will return False.,
django/tests/forms_tests/tests/test_forms.py,223,Unicode values are handled properly.,
django/tests/forms_tests/tests/test_forms.py,286,cleaned_data will always *only* contain a key for fields defined in the,
django/tests/forms_tests/tests/test_forms.py,287,"Form, even if you pass extra data when you define the Form. In this",
django/tests/forms_tests/tests/test_forms.py,288,"example, we pass a bunch of extra fields to the form constructor,",
django/tests/forms_tests/tests/test_forms.py,289,but cleaned_data contains only the form's fields.,
django/tests/forms_tests/tests/test_forms.py,304,"cleaned_data will include a key and value for *all* fields defined in the Form,",
django/tests/forms_tests/tests/test_forms.py,305,even if the Form's data didn't include a value for fields that are not,
django/tests/forms_tests/tests/test_forms.py,306,"required. In this example, the data dictionary doesn't include a value for the",
django/tests/forms_tests/tests/test_forms.py,307,"""nick_name"" field, but cleaned_data includes it. For CharFields, it's set to the",
django/tests/forms_tests/tests/test_forms.py,308,empty string.,
django/tests/forms_tests/tests/test_forms.py,321,"For DateFields, it's set to None.",
django/tests/forms_tests/tests/test_forms.py,335,"""auto_id"" tells the Form to add an ""id"" attribute to each form element.",
django/tests/forms_tests/tests/test_forms.py,336,"If it's a string that contains '%s', Django will use that as a format string",
django/tests/forms_tests/tests/test_forms.py,337,into which the field's name will be inserted. It will also put a <label> around,
django/tests/forms_tests/tests/test_forms.py,338,the human-readable labels for a field.,
django/tests/forms_tests/tests/test_forms.py,369,"If auto_id is any True value whose str() does not contain '%s', the ""id""",
django/tests/forms_tests/tests/test_forms.py,370,attribute will be the name of the field.,
django/tests/forms_tests/tests/test_forms.py,383,"If auto_id is any False value, an ""id"" attribute won't be output unless it",
django/tests/forms_tests/tests/test_forms.py,384,was manually entered.,
django/tests/forms_tests/tests/test_forms.py,394,"In this example, auto_id is False, but the ""id"" attribute for the ""first_name""",
django/tests/forms_tests/tests/test_forms.py,395,"field is given. Also note that field gets a <label>, while the others don't.",
django/tests/forms_tests/tests/test_forms.py,406,"If the ""id"" attribute is specified in the Form and auto_id is True, the ""id""",
django/tests/forms_tests/tests/test_forms.py,407,attribute in the Form gets precedence.,
django/tests/forms_tests/tests/test_forms.py,435,'True' or 'true' should be rendered without a value attribute,
django/tests/forms_tests/tests/test_forms.py,446,A value of 'False' or 'false' should be rendered unchecked,
django/tests/forms_tests/tests/test_forms.py,453,A value of '0' should be interpreted as a True value (#16820),
django/tests/forms_tests/tests/test_forms.py,459,Any Field can have a Widget class passed to its constructor:,
django/tests/forms_tests/tests/test_forms.py,468,"as_textarea(), as_text() and as_hidden() are shortcuts for changing the output",
django/tests/forms_tests/tests/test_forms.py,469,widget type:,
django/tests/forms_tests/tests/test_forms.py,477,The 'widget' parameter to a Field can also be an instance:,
django/tests/forms_tests/tests/test_forms.py,485,"Instance-level attrs are *not* carried over to as_textarea(), as_text() and",
django/tests/forms_tests/tests/test_forms.py,486,as_hidden():,
django/tests/forms_tests/tests/test_forms.py,500,"For a form with a <select>, use ChoiceField:",
django/tests/forms_tests/tests/test_forms.py,516,A subtlety: If one of the choices' value is the empty string and the form is,
django/tests/forms_tests/tests/test_forms.py,517,"unbound, then the <option> for the empty-string choice will get selected.",
django/tests/forms_tests/tests/test_forms.py,529,You can specify widget attributes in the Widget constructor.,
django/tests/forms_tests/tests/test_forms.py,545,"When passing a custom widget instance to ChoiceField, note that setting",
django/tests/forms_tests/tests/test_forms.py,546,'choices' on the widget is meaningless. The widget will use the choices,
django/tests/forms_tests/tests/test_forms.py,547,"defined on the Field, not the ones defined on the Widget.",
django/tests/forms_tests/tests/test_forms.py,566,You can set a ChoiceField's choices after the fact.,
django/tests/forms_tests/tests/test_forms.py,581,Add widget=RadioSelect to use that widget with a ChoiceField.,
django/tests/forms_tests/tests/test_forms.py,602,"Regarding auto_id and <label>, RadioSelect is a special case. Each radio button",
django/tests/forms_tests/tests/test_forms.py,603,"gets a distinct ID, formed by appending an underscore plus the button's",
django/tests/forms_tests/tests/test_forms.py,604,zero-based index.,
django/tests/forms_tests/tests/test_forms.py,616,"When RadioSelect is used with auto_id, and the whole form is printed using",
django/tests/forms_tests/tests/test_forms.py,617,"either as_table() or as_ul(), the label for the RadioSelect will point to the",
django/tests/forms_tests/tests/test_forms.py,618,ID of the *first* radio button.,
django/tests/forms_tests/tests/test_forms.py,650,Test iterating on individual radios in a template,
django/tests/forms_tests/tests/test_forms.py,728,"You can iterate over any BoundField, not just those with widget=RadioSelect.",
django/tests/forms_tests/tests/test_forms.py,766,"MultipleChoiceField is a special case, as its data is required to be a list:",
django/tests/forms_tests/tests/test_forms.py,800,Disabled fields are generally not transmitted by user agents.,
django/tests/forms_tests/tests/test_forms.py,801,The value from the form's initial data is used.,
django/tests/forms_tests/tests/test_forms.py,811,Values provided in the form's data are ignored.,
django/tests/forms_tests/tests/test_forms.py,822,Initial data remains present on invalid forms.,
django/tests/forms_tests/tests/test_forms.py,835,MultipleChoiceField rendered as_hidden() is a special case. Because it can,
django/tests/forms_tests/tests/test_forms.py,836,"have multiple values, its as_hidden() renders multiple <input type=""hidden"">",
django/tests/forms_tests/tests/test_forms.py,837,tags.,
django/tests/forms_tests/tests/test_forms.py,844,DateTimeField rendered as_hidden() is special too,
django/tests/forms_tests/tests/test_forms.py,862,MultipleChoiceField can also be used with the CheckboxSelectMultiple widget.,
django/tests/forms_tests/tests/test_forms.py,885,Test iterating on individual checkboxes in a template,
django/tests/forms_tests/tests/test_forms.py,893,"Regarding auto_id, CheckboxSelectMultiple is a special case. Each checkbox",
django/tests/forms_tests/tests/test_forms.py,894,"gets a distinct ID, formed by appending an underscore plus the checkbox's",
django/tests/forms_tests/tests/test_forms.py,895,zero-based index.,
django/tests/forms_tests/tests/test_forms.py,915,Data for a MultipleChoiceField should be a list. QueryDict and,
django/tests/forms_tests/tests/test_forms.py,916,MultiValueDict conveniently work with this.,
django/tests/forms_tests/tests/test_forms.py,936,SelectMultiple uses ducktyping so that MultiValueDictLike.getlist(),
django/tests/forms_tests/tests/test_forms.py,937,is called.,
django/tests/forms_tests/tests/test_forms.py,950,The MultipleHiddenInput widget renders multiple values as hidden fields.,
django/tests/forms_tests/tests/test_forms.py,966,"When using CheckboxSelectMultiple, the framework expects a list of input and",
django/tests/forms_tests/tests/test_forms.py,967,returns a list of input.,
django/tests/forms_tests/tests/test_forms.py,979,MultipleHiddenInput uses ducktyping so that,
django/tests/forms_tests/tests/test_forms.py,980,MultiValueDictLike.getlist() is called.,
django/tests/forms_tests/tests/test_forms.py,986,Validation errors are HTML-escaped when output as HTML.,
django/tests/forms_tests/tests/test_forms.py,1030,There are a couple of ways to do multiple-field validation. If you want the,
django/tests/forms_tests/tests/test_forms.py,1031,"validation message to be associated with a particular field, implement the",
django/tests/forms_tests/tests/test_forms.py,1032,"clean_XXX() method on the Form, where XXX is the field name. As in",
django/tests/forms_tests/tests/test_forms.py,1033,"Field.clean(), the clean_XXX() method should return the cleaned value. In the",
django/tests/forms_tests/tests/test_forms.py,1034,"clean_XXX() method, you have access to self.cleaned_data, which is a dictionary",
django/tests/forms_tests/tests/test_forms.py,1035,"of all the data that has been cleaned *so far*, in order by the fields,",
django/tests/forms_tests/tests/test_forms.py,1036,"including the current field (e.g., the field XXX if you're in clean_XXX()).",
django/tests/forms_tests/tests/test_forms.py,1063,Another way of doing multiple-field validation is by implementing the,
django/tests/forms_tests/tests/test_forms.py,1064,Form's clean() method. Usually ValidationError raised by that method,
django/tests/forms_tests/tests/test_forms.py,1065,will not be associated with a particular field and will have a,
django/tests/forms_tests/tests/test_forms.py,1066,special-case association with the field named '__all__'. It's,
django/tests/forms_tests/tests/test_forms.py,1067,possible to associate the errors to particular field with the,
django/tests/forms_tests/tests/test_forms.py,1068,Form.add_error() method or by passing a dictionary that maps each,
django/tests/forms_tests/tests/test_forms.py,1069,field to one or more errors.,
django/tests/forms_tests/tests/test_forms.py,1070,,
django/tests/forms_tests/tests/test_forms.py,1071,"Note that in Form.clean(), you have access to self.cleaned_data, a",
django/tests/forms_tests/tests/test_forms.py,1072,dictionary of all the fields/values that have *not* raised a,
django/tests/forms_tests/tests/test_forms.py,1073,ValidationError. Also note Form.clean() is required to return a,
django/tests/forms_tests/tests/test_forms.py,1074,dictionary of all clean data.,
django/tests/forms_tests/tests/test_forms.py,1081,Test raising a ValidationError as NON_FIELD_ERRORS.,
django/tests/forms_tests/tests/test_forms.py,1086,Test raising ValidationError that targets multiple fields.,
django/tests/forms_tests/tests/test_forms.py,1095,Test Form.add_error(),
django/tests/forms_tests/tests/test_forms.py,1198,The newly added list of errors is an instance of ErrorList.,
django/tests/forms_tests/tests/test_forms.py,1204,Trigger validation.,
django/tests/forms_tests/tests/test_forms.py,1207,update_error_dict didn't lose track of the ErrorDict type.,
django/tests/forms_tests/tests/test_forms.py,1265,It's possible to construct a Form dynamically by adding to the self.fields,
django/tests/forms_tests/tests/test_forms.py,1266,dictionary in __init__(). Don't forget to call Form.__init__() within the,
django/tests/forms_tests/tests/test_forms.py,1267,subclass' __init__().,
django/tests/forms_tests/tests/test_forms.py,1284,Instances of a dynamic Form do not persist fields from one Form instance to,
django/tests/forms_tests/tests/test_forms.py,1285,the next.,
django/tests/forms_tests/tests/test_forms.py,1337,"Similarly, changes to field attributes do not persist from one Form instance",
django/tests/forms_tests/tests/test_forms.py,1338,to the next.,
django/tests/forms_tests/tests/test_forms.py,1384,"Similarly, choices do not persist from one Form instance to the next.",
django/tests/forms_tests/tests/test_forms.py,1385,Refs #15127.,
django/tests/forms_tests/tests/test_forms.py,1419,"HiddenInput widgets are displayed differently in the as_table(), as_ul())",
django/tests/forms_tests/tests/test_forms.py,1420,"and as_p() output of a Form -- their verbose names are not displayed, and a",
django/tests/forms_tests/tests/test_forms.py,1421,separate row is not displayed. They're displayed in the last row of the,
django/tests/forms_tests/tests/test_forms.py,1422,"form, directly after that row's form element.",
django/tests/forms_tests/tests/test_forms.py,1449,"With auto_id set, a HiddenInput still gets an ID, but it doesn't get a label.",
django/tests/forms_tests/tests/test_forms.py,1482,"If a field with a HiddenInput has errors, the as_table() and as_ul() output",
django/tests/forms_tests/tests/test_forms.py,1483,"will include the error message(s) with the text ""(Hidden field [fieldname]) """,
django/tests/forms_tests/tests/test_forms.py,1484,"prepended. This message is displayed at the top of the output, regardless of",
django/tests/forms_tests/tests/test_forms.py,1485,its field's order in the form.,
django/tests/forms_tests/tests/test_forms.py,1513,A corner case: It's possible for a form to have only HiddenInputs.,
django/tests/forms_tests/tests/test_forms.py,1524,A Form's fields are displayed in the same order in which they were defined.,
django/tests/forms_tests/tests/test_forms.py,1601,Some Field classes have an effect on the HTML attributes of their associated,
django/tests/forms_tests/tests/test_forms.py,1602,Widget. If you set max_length in a CharField and its associated widget is,
django/tests/forms_tests/tests/test_forms.py,1603,"either a TextInput or PasswordInput, then the widget's rendered HTML will",
django/tests/forms_tests/tests/test_forms.py,1604,"include the ""maxlength"" attribute.",
django/tests/forms_tests/tests/test_forms.py,1606,uses TextInput by default,
django/tests/forms_tests/tests/test_forms.py,1608,"redundantly define widget, just to test",
django/tests/forms_tests/tests/test_forms.py,1609,no max_length defined here,
django/tests/forms_tests/tests/test_forms.py,1620,"If you specify a custom ""attrs"" that includes the ""maxlength"" attribute,",
django/tests/forms_tests/tests/test_forms.py,1621,"the Field's max_length attribute will override whatever ""maxlength"" you specify",
django/tests/forms_tests/tests/test_forms.py,1622,"in ""attrs"".",
django/tests/forms_tests/tests/test_forms.py,1635,You can specify the label for a field by using the 'label' argument to a Field,
django/tests/forms_tests/tests/test_forms.py,1636,"class. If you don't specify 'label', Django will use the field name with",
django/tests/forms_tests/tests/test_forms.py,1637,"underscores converted to spaces, and the initial letter capitalized.",
django/tests/forms_tests/tests/test_forms.py,1651,Labels for as_* methods will only end in a colon if they don't end in other,
django/tests/forms_tests/tests/test_forms.py,1652,punctuation already.,
django/tests/forms_tests/tests/test_forms.py,1677,"If a label is set to the empty string for a field, that field won't get a label.",
django/tests/forms_tests/tests/test_forms.py,1693,"If label is None, Django will auto-create the label from the field name. This",
django/tests/forms_tests/tests/test_forms.py,1694,is default behavior.,
django/tests/forms_tests/tests/test_forms.py,1715,You can specify the 'label_suffix' argument to a Form class to modify the,
django/tests/forms_tests/tests/test_forms.py,1716,"punctuation symbol used at the end of a label.  By default, the colon (:) is",
django/tests/forms_tests/tests/test_forms.py,1717,"used, and is only appended to the label if the label doesn't already end with a",
django/tests/forms_tests/tests/test_forms.py,1718,"punctuation symbol: ., !, ? or :.  If you specify a different suffix, it will",
django/tests/forms_tests/tests/test_forms.py,1719,be appended regardless of the last character of the label.,
django/tests/forms_tests/tests/test_forms.py,1749,You can specify initial data for a field by using the 'initial' argument to a,
django/tests/forms_tests/tests/test_forms.py,1750,Field class. This initial data is displayed when a Form is rendered with *no*,
django/tests/forms_tests/tests/test_forms.py,1751,data. It is not displayed when a Form is rendered with any data (including an,
django/tests/forms_tests/tests/test_forms.py,1752,"empty dictionary). Also, the initial value is *not* used if data for a",
django/tests/forms_tests/tests/test_forms.py,1753,particular required field isn't provided.,
django/tests/forms_tests/tests/test_forms.py,1758,"Here, we're not submitting any data, so the initial value will be displayed.)",
django/tests/forms_tests/tests/test_forms.py,1766,"Here, we're submitting data, so the initial value will *not* be displayed.",
django/tests/forms_tests/tests/test_forms.py,1791,An 'initial' value is *not* used as a fallback if data is not provided. In this,
django/tests/forms_tests/tests/test_forms.py,1792,"example, we don't provide a value for 'username', and the form raises a",
django/tests/forms_tests/tests/test_forms.py,1793,validation error rather than using the initial value for 'username'.,
django/tests/forms_tests/tests/test_forms.py,1799,"The previous technique dealt with ""hard-coded"" initial data, but it's also",
django/tests/forms_tests/tests/test_forms.py,1800,possible to specify initial data after you've already created the Form class,
django/tests/forms_tests/tests/test_forms.py,1801,"(i.e., at runtime). Use the 'initial' parameter to the Form constructor. This",
django/tests/forms_tests/tests/test_forms.py,1802,should be a dictionary containing initial values for one or more fields in the,
django/tests/forms_tests/tests/test_forms.py,1803,"form, keyed by field name.",
django/tests/forms_tests/tests/test_forms.py,1808,"Here, we're not submitting any data, so the initial value will be displayed.)",
django/tests/forms_tests/tests/test_forms.py,1822,The 'initial' parameter is meaningless if you pass data.,
django/tests/forms_tests/tests/test_forms.py,1846,A dynamic 'initial' value is *not* used as a fallback if data is not provided.,
django/tests/forms_tests/tests/test_forms.py,1847,"In this example, we don't provide a value for 'username', and the form raises a",
django/tests/forms_tests/tests/test_forms.py,1848,validation error rather than using the initial value for 'username'.,
django/tests/forms_tests/tests/test_forms.py,1853,"If a Form defines 'initial' *and* 'initial' is passed as a parameter to Form(),",
django/tests/forms_tests/tests/test_forms.py,1854,then the latter will get precedence.,
django/tests/forms_tests/tests/test_forms.py,1867,"The previous technique dealt with raw values as initial data, but it's also",
django/tests/forms_tests/tests/test_forms.py,1868,possible to specify callable data.,
django/tests/forms_tests/tests/test_forms.py,1874,We need to define functions that get called later.),
django/tests/forms_tests/tests/test_forms.py,1887,"Here, we're not submitting any data, so the initial value will be displayed.)",
django/tests/forms_tests/tests/test_forms.py,1900,The 'initial' parameter is meaningless if you pass data.,
django/tests/forms_tests/tests/test_forms.py,1944,A callable 'initial' value is *not* used as a fallback if data is not provided.,
django/tests/forms_tests/tests/test_forms.py,1945,"In this example, we don't provide a value for 'username', and the form raises a",
django/tests/forms_tests/tests/test_forms.py,1946,validation error rather than using the initial value for 'username'.,
django/tests/forms_tests/tests/test_forms.py,1951,"If a Form defines 'initial' *and* 'initial' is passed as a parameter to Form(),",
django/tests/forms_tests/tests/test_forms.py,1952,then the latter will get precedence.,
django/tests/forms_tests/tests/test_forms.py,1994,Form.initial overrides Field.initial.,
django/tests/forms_tests/tests/test_forms.py,1996,Callables are evaluated.,
django/tests/forms_tests/tests/test_forms.py,2011,A field raising ValidationError is always in changed_data,
django/tests/forms_tests/tests/test_forms.py,2027,It's possible to get to the value which would be used for rendering,
django/tests/forms_tests/tests/test_forms.py,2028,the widget for a field by using the BoundField's value method.,
django/tests/forms_tests/tests/test_forms.py,2052,BoundField is also cached,
django/tests/forms_tests/tests/test_forms.py,2059,Without form data.,
django/tests/forms_tests/tests/test_forms.py,2063,"With form data. As the field is disabled, the value should not be",
django/tests/forms_tests/tests/test_forms.py,2064,affected by the form data.,
django/tests/forms_tests/tests/test_forms.py,2081,Nix microseconds (since they should be ignored). #22502,
django/tests/forms_tests/tests/test_forms.py,2132,You can specify descriptive text for a field by using the 'help_text' argument),
django/tests/forms_tests/tests/test_forms.py,2160,The help text is displayed whether or not data is provided for the form.,
django/tests/forms_tests/tests/test_forms.py,2171,help_text is not displayed for hidden fields. It can be used for documentation,
django/tests/forms_tests/tests/test_forms.py,2172,"purposes, though.",
django/tests/forms_tests/tests/test_forms.py,2188,You can subclass a Form to add fields. The resulting form subclass will have,
django/tests/forms_tests/tests/test_forms.py,2189,"all of the fields of the parent Form, plus whichever fields you define in the",
django/tests/forms_tests/tests/test_forms.py,2190,subclass.,
django/tests/forms_tests/tests/test_forms.py,2215,"Yes, you can subclass multiple forms. The fields are added in the order in",
django/tests/forms_tests/tests/test_forms.py,2216,which the parent classes are listed.,
django/tests/forms_tests/tests/test_forms.py,2236,"Sometimes it's necessary to have multiple forms display on the same HTML page,",
django/tests/forms_tests/tests/test_forms.py,2237,or multiple copies of the same form. We can accomplish this with form prefixes.,
django/tests/forms_tests/tests/test_forms.py,2238,Pass the keyword argument 'prefix' to the Form constructor to use this feature.,
django/tests/forms_tests/tests/test_forms.py,2239,This value will be prepended to each HTML form field name. One way to think,
django/tests/forms_tests/tests/test_forms.py,2240,"about this is ""namespaces for HTML forms"". Notice that in the data argument,",
django/tests/forms_tests/tests/test_forms.py,2241,"each field's key has the prefix, in this case 'person1', prepended to the",
django/tests/forms_tests/tests/test_forms.py,2242,actual field name.,
django/tests/forms_tests/tests/test_forms.py,2281,Let's try submitting some bad data to make sure form.errors and field.errors,
django/tests/forms_tests/tests/test_forms.py,2282,work as expected.,
django/tests/forms_tests/tests/test_forms.py,2293,Accessing a nonexistent field.,
django/tests/forms_tests/tests/test_forms.py,2297,"In this example, the data doesn't have a prefix, but the form requires it, so",
django/tests/forms_tests/tests/test_forms.py,2298,"the form doesn't ""see"" the fields.",
django/tests/forms_tests/tests/test_forms.py,2309,"With prefixes, a single data dictionary can hold data for multiple instances",
django/tests/forms_tests/tests/test_forms.py,2310,of the same form.,
django/tests/forms_tests/tests/test_forms.py,2330,"By default, forms append a hyphen between the prefix and the field name, but a",
django/tests/forms_tests/tests/test_forms.py,2331,form can alter that behavior by implementing the add_prefix() method. This,
django/tests/forms_tests/tests/test_forms.py,2332,"method takes a field name and returns the prefixed field, according to",
django/tests/forms_tests/tests/test_forms.py,2333,self.prefix.,
django/tests/forms_tests/tests/test_forms.py,2364,Prefix can be also specified at the class level.,
django/tests/forms_tests/tests/test_forms.py,2376,NullBooleanField is a bit of a special case because its presentation (widget),
django/tests/forms_tests/tests/test_forms.py,2377,"is different than its data. This is handled transparently, though.",
django/tests/forms_tests/tests/test_forms.py,2438,"FileFields are a special case because they take their data from the request.FILES,",
django/tests/forms_tests/tests/test_forms.py,2439,not request.POST.,
django/tests/forms_tests/tests/test_forms.py,2488,A required file field with initial data should not contain the,
django/tests/forms_tests/tests/test_forms.py,2489,required HTML attribute. The file input is left blank by the user to,
django/tests/forms_tests/tests/test_forms.py,2490,"keep the existing, initial value.",
django/tests/forms_tests/tests/test_forms.py,2515,A required file field with initial data doesn't contain the required,
django/tests/forms_tests/tests/test_forms.py,2516,HTML attribute. The file input is left blank by the user to keep the,
django/tests/forms_tests/tests/test_forms.py,2517,"existing, initial value.",
django/tests/forms_tests/tests/test_forms.py,2552,"Case 1: GET (an empty form, with no errors).)",
django/tests/forms_tests/tests/test_forms.py,2561,"Case 2: POST with erroneous data (a redisplayed form, with errors).)",
django/tests/forms_tests/tests/test_forms.py,2576,Case 3: POST with valid data (the success message).),
django/tests/forms_tests/tests/test_forms.py,2595,You have full flexibility in displaying form fields in a template. Just pass a,
django/tests/forms_tests/tests/test_forms.py,2596,"Form instance to the template, and use ""dot"" access to refer to individual",
django/tests/forms_tests/tests/test_forms.py,2597,"fields. Note, however, that this flexibility comes with the responsibility of",
django/tests/forms_tests/tests/test_forms.py,2598,"displaying all the errors, including any that might not be associated with a",
django/tests/forms_tests/tests/test_forms.py,2599,particular field.,
django/tests/forms_tests/tests/test_forms.py,2624,Use form.[field].label to output a field's label. You can specify the label for,
django/tests/forms_tests/tests/test_forms.py,2625,a field by using the 'label' argument to a Field class. If you don't specify,
django/tests/forms_tests/tests/test_forms.py,2626,"'label', Django will use the field name with underscores converted to spaces,",
django/tests/forms_tests/tests/test_forms.py,2627,and the initial letter capitalized.,
django/tests/forms_tests/tests/test_forms.py,2641,User form.[field].label_tag to output a field's label with a <label> tag,
django/tests/forms_tests/tests/test_forms.py,2642,"wrapped around it, but *only* if the given field has an ""id"" attribute.",
django/tests/forms_tests/tests/test_forms.py,2643,"Recall from above that passing the ""auto_id"" argument to a Form gives each",
django/tests/forms_tests/tests/test_forms.py,2644,"field an ""id"" attribute.",
django/tests/forms_tests/tests/test_forms.py,2667,User form.[field].help_text to output a field's help text. If the given field,
django/tests/forms_tests/tests/test_forms.py,2668,"does not have help text, nothing will be output.",
django/tests/forms_tests/tests/test_forms.py,2690,"To display the errors that aren't associated with a particular field -- e.g.,",
django/tests/forms_tests/tests/test_forms.py,2691,the errors caused by Form.clean() -- use {{ form.non_field_errors }} in the,
django/tests/forms_tests/tests/test_forms.py,2692,"template. If used on its own, it is displayed as a <ul> (or an empty string, if",
django/tests/forms_tests/tests/test_forms.py,2693,the list of errors is empty). You can also use it in {% if %} statements.,
django/tests/forms_tests/tests/test_forms.py,2732,Sometimes (pretty much in formsets) we want to allow a form to pass validation,
django/tests/forms_tests/tests/test_forms.py,2733,if it is completely empty. We can accomplish this by using the empty_permitted,
django/tests/forms_tests/tests/test_forms.py,2734,argument to a form constructor.,
django/tests/forms_tests/tests/test_forms.py,2739,First let's show what happens id empty_permitted=False (the default):,
django/tests/forms_tests/tests/test_forms.py,2746,Now let's show what happens when empty_permitted=True and the form is empty.,
django/tests/forms_tests/tests/test_forms.py,2752,"But if we fill in data for one of the fields, the form is no longer empty and",
django/tests/forms_tests/tests/test_forms.py,2753,the whole thing must pass validation.,
django/tests/forms_tests/tests/test_forms.py,2760,If a field is not given in the data then None is returned for its data. Lets,
django/tests/forms_tests/tests/test_forms.py,2761,make sure that when checking for empty_permitted that None is treated,
django/tests/forms_tests/tests/test_forms.py,2762,accordingly.,
django/tests/forms_tests/tests/test_forms.py,2767,"However, we *really* need to be sure we are checking for None as any data in",
django/tests/forms_tests/tests/test_forms.py,2768,initial that returns False on a boolean call needs to be treated literally.,
django/tests/forms_tests/tests/test_forms.py,2983,An empty value for any field will raise a `required` error on a,
django/tests/forms_tests/tests/test_forms.py,2984,required `MultiValueField`.,
django/tests/forms_tests/tests/test_forms.py,3000,Empty values for fields will NOT raise a `required` error on an,
django/tests/forms_tests/tests/test_forms.py,3001,optional `MultiValueField`,
django/tests/forms_tests/tests/test_forms.py,3012,"For a required `MultiValueField` with `require_all_fields=False`, a",
django/tests/forms_tests/tests/test_forms.py,3013,`required` error will only be raised if all fields are empty. Fields,
django/tests/forms_tests/tests/test_forms.py,3014,can individually be required or optional. An empty value for any,
django/tests/forms_tests/tests/test_forms.py,3015,required field will raise an `incomplete` error.,
django/tests/forms_tests/tests/test_forms.py,3031,"For an optional `MultiValueField` with `require_all_fields=False`, we",
django/tests/forms_tests/tests/test_forms.py,3032,don't get any `required` error but we still get `incomplete` errors.,
django/tests/forms_tests/tests/test_forms.py,3054,Fake json.loads,
django/tests/forms_tests/tests/test_forms.py,3071,"(args, kwargs, expected)",
django/tests/forms_tests/tests/test_forms.py,3072,without anything: just print the <label>,
django/tests/forms_tests/tests/test_forms.py,3075,passing just one argument: overrides the field's label,
django/tests/forms_tests/tests/test_forms.py,3078,the overridden label is escaped,
django/tests/forms_tests/tests/test_forms.py,3082,Passing attrs to add extra attributes on the <label>,
django/tests/forms_tests/tests/test_forms.py,3567,don't return anything,
django/tests/forms_tests/tests/test_forms.py,3581,Return a different dict. We have not changed self.cleaned_data.,
django/tests/forms_tests/tests/test_forms.py,3709,A form with *only* hidden fields that has errors is going to be very unusual.,
django/tests/forms_tests/tests/test_renderers.py,21,Found because forms_tests is .,
django/tests/forms_tests/tests/test_media.py,13,Check construction of media objects,
django/tests/forms_tests/tests/test_media.py,48,A widget can exist without a media definition,
django/tests/forms_tests/tests/test_media.py,56,,
django/tests/forms_tests/tests/test_media.py,57,DSL Class-based media definitions,
django/tests/forms_tests/tests/test_media.py,58,,
django/tests/forms_tests/tests/test_media.py,60,A widget can define media if it needs to.,
django/tests/forms_tests/tests/test_media.py,61,Any absolute path will be preserved; relative paths are combined,
django/tests/forms_tests/tests/test_media.py,62,with the value of settings.MEDIA_URL,
django/tests/forms_tests/tests/test_media.py,80,Media objects can be interrogated by media type,
django/tests/forms_tests/tests/test_media.py,95,Media objects can be combined. Any given media resource will appear only,
django/tests/forms_tests/tests/test_media.py,96,once. Duplicated media definitions are ignored.,
django/tests/forms_tests/tests/test_media.py,132,media addition hasn't affected the original objects,
django/tests/forms_tests/tests/test_media.py,142,Regression check for #12879: specifying the same CSS or JS file,
django/tests/forms_tests/tests/test_media.py,143,multiple times in a single Media instance should result in that file,
django/tests/forms_tests/tests/test_media.py,144,only being included once.,
django/tests/forms_tests/tests/test_media.py,155,"A deduplication test applied directly to a Media object, to confirm",
django/tests/forms_tests/tests/test_media.py,156,that the deduplication doesn't only happen at the point of merging,
django/tests/forms_tests/tests/test_media.py,157,two or more media objects.,
django/tests/forms_tests/tests/test_media.py,166,,
django/tests/forms_tests/tests/test_media.py,167,Property-based media definitions,
django/tests/forms_tests/tests/test_media.py,168,,
django/tests/forms_tests/tests/test_media.py,170,Widget media can be defined as a property,
django/tests/forms_tests/tests/test_media.py,180,Media properties can reference the media of their parents,
django/tests/forms_tests/tests/test_media.py,193,"Media properties can reference the media of their parents,",
django/tests/forms_tests/tests/test_media.py,194,even if the parent media was defined using a class,
django/tests/forms_tests/tests/test_media.py,220,,
django/tests/forms_tests/tests/test_media.py,221,Inheritance of media,
django/tests/forms_tests/tests/test_media.py,222,,
django/tests/forms_tests/tests/test_media.py,224,"If a widget extends another but provides no media definition, it inherits the parent widget's media",
django/tests/forms_tests/tests/test_media.py,245,"If a widget extends another but defines media, it extends the parent widget's media by default",
django/tests/forms_tests/tests/test_media.py,266,"If a widget extends another but defines media, it extends the parents widget's media,",
django/tests/forms_tests/tests/test_media.py,267,even if the parent defined media using a property.,
django/tests/forms_tests/tests/test_media.py,296,A widget can disable media inheritance by specifying 'extend=False',
django/tests/forms_tests/tests/test_media.py,312,A widget can explicitly enable full media inheritance by specifying 'extend=True',
django/tests/forms_tests/tests/test_media.py,341,A widget can enable inheritance of one media type by specifying extend as a tuple,
django/tests/forms_tests/tests/test_media.py,368,,
django/tests/forms_tests/tests/test_media.py,369,Multi-media handling for CSS,
django/tests/forms_tests/tests/test_media.py,370,,
django/tests/forms_tests/tests/test_media.py,372,A widget can define CSS media for multiple output media types,
django/tests/forms_tests/tests/test_media.py,394,,
django/tests/forms_tests/tests/test_media.py,395,Multiwidget media handling,
django/tests/forms_tests/tests/test_media.py,396,,
django/tests/forms_tests/tests/test_media.py,419,MultiWidgets have a default media definition that gets all the,
django/tests/forms_tests/tests/test_media.py,420,media from the component widgets,
django/tests/forms_tests/tests/test_media.py,439,,
django/tests/forms_tests/tests/test_media.py,440,Media processing for forms,
django/tests/forms_tests/tests/test_media.py,441,,
django/tests/forms_tests/tests/test_media.py,464,You can ask a form for the media required by its widgets.,
django/tests/forms_tests/tests/test_media.py,480,Form media can be combined to produce a single media definition.,
django/tests/forms_tests/tests/test_media.py,495,"Forms can also define media, following the same rules as widgets.",
django/tests/forms_tests/tests/test_media.py,519,Media works in templates,
django/tests/forms_tests/tests/test_media.py,571,The merge prefers to place 'c' before 'b' and 'g' before 'h' to,
django/tests/forms_tests/tests/test_media.py,572,preserve the original order. The preference 'c'->'b' is overridden by,
django/tests/forms_tests/tests/test_media.py,573,"widget3's media, but 'g'->'h' survives in the final ordering.",
django/tests/forms_tests/tests/test_media.py,585,c.css comes before a.css because widget1 + widget2 establishes this,
django/tests/forms_tests/tests/test_media.py,586,order.,
django/tests/forms_tests/tests/test_media.py,589,widget3 contains an explicit ordering of c.css and a.css.,
django/tests/forms_tests/field_tests/test_datetimefield.py,35,ISO 8601 formats.,
django/tests/forms_tests/field_tests/test_datetimefield.py,48,Whitespace stripping.,
django/tests/forms_tests/field_tests/test_datetimefield.py,96,ISO-like formats are always accepted.,
django/tests/forms_tests/field_tests/test_urlfield.py,63,"hangs ""forever"" if catastrophic backtracking in ticket:#11198 not fixed",
django/tests/forms_tests/field_tests/test_urlfield.py,67,"a second test, to make sure the problem is really addressed, even on",
django/tests/forms_tests/field_tests/test_urlfield.py,68,domains that don't fail the domain label length check in the regex,
django/tests/forms_tests/field_tests/test_urlfield.py,131,Valid IDN,
django/tests/forms_tests/field_tests/test_typedchoicefield.py,17,"Different coercion, same validation.",
django/tests/forms_tests/field_tests/test_typedchoicefield.py,22,"This can also cause weirdness: be careful (bool(-1) == True, remember)",
django/tests/forms_tests/field_tests/test_typedchoicefield.py,27,Even more weirdness: if you have a valid choice but your coercion function,
django/tests/forms_tests/field_tests/test_typedchoicefield.py,28,"can't coerce, you'll still get a validation error. Don't do this!",
django/tests/forms_tests/field_tests/test_typedchoicefield.py,33,Required fields require values,
django/tests/forms_tests/field_tests/test_typedchoicefield.py,38,Non-required fields aren't required,
django/tests/forms_tests/field_tests/test_typedchoicefield.py,41,"If you want cleaning an empty value to return a different type, tell the field",
django/tests/forms_tests/field_tests/test_typedchoicefield.py,48,has_changed should not trigger required validation,
django/tests/forms_tests/field_tests/test_booleanfield.py,53,Initial value may have mutated to a string due to show_hidden_initial (#19537),
django/tests/forms_tests/field_tests/test_booleanfield.py,55,HiddenInput widget sends string values for boolean but doesn't clean them in value_from_datadict,
django/tests/forms_tests/field_tests/test_emailfield.py,26,Check for runaway regex security problem. This will take a long time,
django/tests/forms_tests/field_tests/test_emailfield.py,27,if the security fix isn't in place.,
django/tests/forms_tests/field_tests/test_typedmultiplechoicefield.py,17,"Different coercion, same validation.",
django/tests/forms_tests/field_tests/test_typedmultiplechoicefield.py,22,"This can also cause weirdness: be careful (bool(-1) == True, remember)",
django/tests/forms_tests/field_tests/test_typedmultiplechoicefield.py,34,Even more weirdness: if you have a valid choice but your coercion function,
django/tests/forms_tests/field_tests/test_typedmultiplechoicefield.py,35,"can't coerce, you'll still get a validation error. Don't do this!",
django/tests/forms_tests/field_tests/test_typedmultiplechoicefield.py,40,Required fields require values,
django/tests/forms_tests/field_tests/test_typedmultiplechoicefield.py,45,Non-required fields aren't required,
django/tests/forms_tests/field_tests/test_typedmultiplechoicefield.py,50,"If you want cleaning an empty value to return a different type, tell the field",
django/tests/forms_tests/field_tests/test_typedmultiplechoicefield.py,55,has_changed should not trigger required validation,
django/tests/forms_tests/field_tests/test_imagefield.py,89,Nothing added for non-FileInput widgets.,
django/tests/forms_tests/field_tests/test_decimalfield.py,103,"Leading whole zeros ""collapse"" to one digit.",
django/tests/forms_tests/field_tests/test_decimalfield.py,105,But a leading 0 before the . doesn't count towards max_digits,
django/tests/forms_tests/field_tests/test_decimalfield.py,107,"Only leading whole zeros ""collapse"" to one digit.",
django/tests/forms_tests/field_tests/test_decimalfield.py,157,"-> '0,1' in French",
django/tests/forms_tests/field_tests/test_filefield.py,64,No file was uploaded and no initial data.,
django/tests/forms_tests/field_tests/test_filefield.py,67,A file was uploaded and no initial data.,
django/tests/forms_tests/field_tests/test_filefield.py,70,"A file was not uploaded, but there is initial data",
django/tests/forms_tests/field_tests/test_filefield.py,73,A file was uploaded and there is initial data (file identity is not dealt,
django/tests/forms_tests/field_tests/test_filefield.py,74,with here),
django/tests/forms_tests/field_tests/test_floatfield.py,85,"-> '4,35' in French",
django/tests/forms_tests/field_tests/test_charfield.py,86,Return an empty dictionary if max_length and min_length are both None.,
django/tests/forms_tests/field_tests/test_charfield.py,91,Return a maxlength attribute equal to max_length.,
django/tests/forms_tests/field_tests/test_charfield.py,97,Return a minlength attribute equal to min_length.,
django/tests/forms_tests/field_tests/test_charfield.py,103,Return both maxlength and minlength when both max_length and,
django/tests/forms_tests/field_tests/test_charfield.py,104,min_length are set.,
django/tests/forms_tests/field_tests/test_timefield.py,33,Test whitespace stripping behavior (#5714),
django/tests/forms_tests/field_tests/test_nullbooleanfield.py,24,The internal value is preserved if using HiddenInput (#7753).,
django/tests/forms_tests/field_tests/test_nullbooleanfield.py,45,"Make sure we're compatible with MySQL, which uses 0 and 1 for its",
django/tests/forms_tests/field_tests/test_nullbooleanfield.py,46,boolean values (#9609).,
django/tests/forms_tests/field_tests/test_nullbooleanfield.py,68,HiddenInput widget sends string values for boolean but doesn't clean them in value_from_datadict,
django/tests/forms_tests/field_tests/test_genericipaddressfield.py,14,The edge cases of the IPv6 validation code are not deeply tested,
django/tests/forms_tests/field_tests/test_genericipaddressfield.py,15,"here, they are covered in the tests for django.utils.ipv6",
django/tests/forms_tests/field_tests/test_genericipaddressfield.py,119,Test the normalizing code,
django/tests/forms_tests/field_tests/test_datefield.py,21,"As with any widget that implements get_value_from_datadict(), we must",
django/tests/forms_tests/field_tests/test_datefield.py,22,"accept the input from the ""as_hidden"" rendering as well.",
django/tests/forms_tests/field_tests/test_datefield.py,32,Invalid dates shouldn't be allowed,
django/tests/forms_tests/field_tests/test_datefield.py,37,label tag is correctly associated with month dropdown,
django/tests/forms_tests/field_tests/test_datefield.py,48,With Field.show_hidden_initial=False,
django/tests/forms_tests/field_tests/test_datefield.py,63,With Field.show_hidden_initial=True,
django/tests/forms_tests/field_tests/test_datefield.py,102,Invalid dates shouldn't be allowed,
django/tests/forms_tests/field_tests/test_datefield.py,105,'Geef een geldige datum op.' = 'Enter a valid date.',
django/tests/forms_tests/field_tests/test_datefield.py,111,label tag is correctly associated with first rendered dropdown,
django/tests/forms_tests/field_tests/test_datefield.py,158,Test whitespace stripping behavior (#5714),
django/tests/forms_tests/field_tests/test_datefield.py,170,Test null bytes (#18982),
django/tests/forms_tests/field_tests/test_datefield.py,187,assertIsInstance or assertRaises cannot be used because UnicodeEncodeError,
django/tests/forms_tests/field_tests/test_datefield.py,188,is a subclass of ValueError,
django/tests/custom_lookups/tests.py,73,Use a name that avoids collision with the built-in year lookup.,
django/tests/custom_lookups/tests.py,90,"We will need to skip the extract part, and instead go",
django/tests/custom_lookups/tests.py,91,"directly with the originating field, that is self.lhs.lhs",
django/tests/custom_lookups/tests.py,94,Note that we must be careful so that we have params in the,
django/tests/custom_lookups/tests.py,95,same order as we have the parts in the SQL.,
django/tests/custom_lookups/tests.py,97,We use PostgreSQL specific SQL here. Note that we must do the,
django/tests/custom_lookups/tests.py,98,conversions in SQL instead of in Python to support F() references.,
django/tests/custom_lookups/tests.py,111,Skip the YearTransform above us (no possibility for efficient,
django/tests/custom_lookups/tests.py,112,lookup otherwise).,
django/tests/custom_lookups/tests.py,117,Build SQL where the integer year is concatenated with last month,
django/tests/custom_lookups/tests.py,118,"and day, then convert that to date. (We try to have SQL like:",
django/tests/custom_lookups/tests.py,119,WHERE somecol <= '2013-12-31'),
django/tests/custom_lookups/tests.py,120,but also make it work if the rhs_sql is field reference.,
django/tests/custom_lookups/tests.py,186,We will register this class temporarily in the test method.,
django/tests/custom_lookups/tests.py,198,We need to be careful so that we get the params in right,
django/tests/custom_lookups/tests.py,199,places.,
django/tests/custom_lookups/tests.py,290,ForeignObject should ignore regular Field lookups,
django/tests/custom_lookups/tests.py,297,clear and re-cache,
django/tests/custom_lookups/tests.py,301,registration should bust the cache,
django/tests/custom_lookups/tests.py,303,getting the lookups again should re-cache,
django/tests/custom_lookups/tests.py,364,mult3__div3 always leads to 0,
django/tests/custom_lookups/tests.py,385,Same as age >= average_rating,
django/tests/custom_lookups/tests.py,421,"The non-optimized version works, too.",
django/tests/custom_lookups/tests.py,437,This test will just check the generated SQL for __lte. This,
django/tests/custom_lookups/tests.py,438,doesn't require running on PostgreSQL and spots the most likely,
django/tests/custom_lookups/tests.py,439,error - not running YearLte SQL at all.,
django/tests/custom_lookups/tests.py,455,Two ways to add a customized implementation for different backends:,
django/tests/custom_lookups/tests.py,456,First is MonkeyPatch of the class.,
django/tests/custom_lookups/tests.py,471,The other way is to subclass the original lookup and register the subclassed,
django/tests/custom_lookups/tests.py,472,lookup instead of the original.,
django/tests/custom_lookups/tests.py,474,"This method should be named ""as_mysql"" for MySQL, ""as_postgresql"" for postgres",
django/tests/custom_lookups/tests.py,475,"and so on, but as we don't know which DB we are running on, we need to use",
django/tests/custom_lookups/tests.py,476,setattr.,
django/tests/custom_lookups/tests.py,495,Use a name that avoids collision with the built-in year lookup.,
django/tests/custom_lookups/tests.py,519,"junk lookup - tries lookup, then transform, then fails",
django/tests/custom_lookups/tests.py,526,"junk transform - tries transform only, then fails",
django/tests/custom_lookups/tests.py,532,Just getting the year (implied __exact) - lookup only,
django/tests/custom_lookups/tests.py,537,Just getting the year (explicit __exact) - lookup only,
django/tests/expressions_window/tests.py,139,Add a default ordering for consistent results across databases.,
django/tests/expressions_window/tests.py,326,Round result of cume_dist because Oracle uses greater precision.,
django/tests/expressions_window/tests.py,462,Round to account for precision differences among databases.,
django/tests/expressions_window/tests.py,866,The SQL standard disallows referencing window functions in the WHERE,
django/tests/expressions_window/tests.py,867,clause.,
django/tests/user_commands/tests.py,23,A minimal set of apps to avoid system checks running on all apps.,
django/tests/user_commands/tests.py,41,Passing options as arguments also works (thanks argparse),
django/tests/user_commands/tests.py,247,"""required"" option requires Python 3.7 and later.",
django/tests/user_commands/tests.py,293,(staticfiles.E001) The STATICFILES_DIRS setting is not a tuple or,
django/tests/user_commands/tests.py,294,list.,
django/tests/user_commands/management/commands/hal.py,22,raise an error if some --parameter is flowing from options to args,
django/tests/urlpatterns/path_same_name_urls.py,8,Different number of arguments.,
django/tests/urlpatterns/path_same_name_urls.py,11,Different names of the keyword arguments.,
django/tests/urlpatterns/path_same_name_urls.py,14,Different path converters.,
django/tests/urlpatterns/path_same_name_urls.py,20,Different regular expressions.,
django/tests/urlpatterns/path_same_name_urls.py,23,converter.to_url() raises ValueError (no match).,
django/tests/urlpatterns/test_resolvers.py,22,resolver for a default URLconf (passing no argument) and for the,
django/tests/urlpatterns/test_resolvers.py,23,settings.ROOT_URLCONF is the same cached object.,
django/tests/urlpatterns/tests.py,13,"('url', ('url_name', 'app_name', {kwargs})),",
django/tests/urlpatterns/tests.py,14,aGVsbG8= is 'hello' encoded in base64.,
django/tests/urlpatterns/tests.py,170,reverse() works with string parameters.,
django/tests/urlpatterns/tests.py,173,"reverse() also works with native types (int, UUID, etc.).",
django/tests/urlpatterns/tests.py,175,The converted value might be different for int (a,
django/tests/urlpatterns/tests.py,176,leading zero is lost in the conversion).,
django/tests/urlpatterns/tests.py,261,"\u0394 is ""GREEK CAPITAL LETTER DELTA"", a valid identifier.",
django/tests/base/models.py,3,The models definitions below used to crash. Generating models dynamically,
django/tests/base/models.py,4,at runtime is a bad idea because it pollutes the app registry. This doesn't,
django/tests/base/models.py,5,integrate well with the test suite but at least it prevents regressions.,
django/tests/extra_regress/tests.py,40,Queryset to match most recent revision:,
django/tests/extra_regress/tests.py,52,Queryset to search for string in title:,
django/tests/extra_regress/tests.py,63,Following queryset should return the most recent revision:,
django/tests/extra_regress/tests.py,72,Extra select parameters should stay tied to their corresponding,
django/tests/extra_regress/tests.py,73,select portions. Applies when portions are updated or otherwise,
django/tests/extra_regress/tests.py,74,moved around.,
django/tests/extra_regress/tests.py,192,Extra clauses after an empty values clause are still included,
django/tests/extra_regress/tests.py,205,Extra columns are ignored if not mentioned in the values() clause,
django/tests/extra_regress/tests.py,215,Extra columns after a non-empty values() clause are ignored,
django/tests/extra_regress/tests.py,225,Extra columns can be partially returned,
django/tests/extra_regress/tests.py,235,Also works if only extra columns are included,
django/tests/extra_regress/tests.py,245,Values list works the same way,
django/tests/extra_regress/tests.py,246,All columns are returned for an empty values_list(),
django/tests/extra_regress/tests.py,256,Extra columns after an empty values_list() are still included,
django/tests/extra_regress/tests.py,266,Extra columns ignored completely if not mentioned in values_list(),
django/tests/extra_regress/tests.py,276,Extra columns after a non-empty values_list() clause are ignored completely,
django/tests/extra_regress/tests.py,295,Only the extra columns specified in the values_list() are returned,
django/tests/extra_regress/tests.py,305,...also works if only extra columns are included,
django/tests/extra_regress/tests.py,324,... and values are returned in the order they are specified,
django/tests/extra_regress/tests.py,396,Test Case 1: should appear in queryset.,
django/tests/extra_regress/tests.py,399,Test Case 2: should appear in queryset.,
django/tests/extra_regress/tests.py,402,"Test Case 3: should not appear in queryset, bug case.",
django/tests/extra_regress/tests.py,405,Test Case 4: should not appear in queryset.,
django/tests/extra_regress/tests.py,408,Test Case 5: should not appear in queryset.,
django/tests/extra_regress/tests.py,411,"Test Case 6: should not appear in queryset, bug case.",
django/tests/extra_regress/tests.py,431,"Note: the extra ordering must appear in select clause, so we get two",
django/tests/extra_regress/tests.py,432,"non-distinct results here (this is on purpose, see #7070).",
django/tests/extra_regress/tests.py,433,Extra select doesn't appear in result values.,
django/tests/template_backends/test_dummy.py,46,There's no way to trigger a syntax error with the dummy backend.,
django/tests/template_backends/test_dummy.py,47,The test still lives here to factor it between other backends.,
django/tests/template_backends/test_utils.py,21,Incorrect: APP_DIRS and loaders are mutually incompatible.,
django/tests/template_backends/test_jinja2.py,44,"self will be overridden to be a TemplateReference, so the self",
django/tests/template_backends/test_jinja2.py,45,variable will not come through. Attempting to use one though should,
django/tests/template_backends/test_jinja2.py,46,not throw an error.,
django/tests/template_backends/test_,20,See ticket #23789.,
django/tests/template_backends/test_,33,Context processors run,
django/tests/template_backends/test_,37,Context overrides context processors,
django/tests/template_backends/test_,73,libraries are discovered from installed applications,
django/tests/template_backends/test_,82,libraries are discovered from django.templatetags,
django/tests/template_backends/test_,87,libraries passed in OPTIONS are registered,
django/tests/template_backends/test_,92,libraries passed in OPTIONS take precedence over discovered ones,
django/tests/template_backends/apps/importerror/templatetags/broken_tags.py,1,noqa,
django/tests/defer/tests.py,39,"Using 'pk' with only() should result in 3 deferred fields, namely all",
django/tests/defer/tests.py,40,of them except the model's primary key see #15494,
django/tests/defer/tests.py,42,You can use 'pk' with reverse foreign key lookups.,
django/tests/defer/tests.py,43,"The related_id is always set even if it's not fetched from the DB,",
django/tests/defer/tests.py,44,so pk and related_id are not deferred.,
django/tests/defer/tests.py,76,User values() won't defer anything (you get the full list of,
django/tests/defer/tests.py,77,"dictionaries back), but it still works.",
django/tests/defer/tests.py,94,Using defer() and only() with get() is also valid.,
django/tests/defer/tests.py,128,select_related() overrides defer().,
django/tests/defer/tests.py,135,"Saving models with deferred fields is possible (but inefficient,",
django/tests/defer/tests.py,136,since every field has to be retrieved first).,
django/tests/defer/tests.py,150,Regression for #10572 - A subclass with no extra fields can defer,
django/tests/defer/tests.py,151,fields from the base class,
django/tests/defer/tests.py,153,You can defer a field on a baseclass when the subclass has no fields,
django/tests/defer/tests.py,160,You can retrieve a single column on a base class with no fields,
django/tests/defer/tests.py,163,"on an inherited model, its PK is also fetched, hence '3' deferred fields.",
django/tests/defer/tests.py,176,You can defer a field on a baseclass,
django/tests/defer/tests.py,184,You can defer a field on a subclass,
django/tests/defer/tests.py,192,Deferring fields from both superclass and subclass works.,
django/tests/defer/tests.py,197,You can retrieve a single field on a baseclass,
django/tests/defer/tests.py,199,"when inherited model, its PK is also fetched, hence '4' deferred fields.",
django/tests/defer/tests.py,206,You can retrieve a single field on a subclass,
django/tests/defer/tests.py,269,Customized refresh_from_db() reloads all deferred fields on,
django/tests/defer/tests.py,270,access of any of them.,
django/tests/defer/models.py,40,Reloads all deferred fields if any of the fields is deferred.,
django/tests/fixtures/tests.py,88,"Load fixture 1. Single JSON file, with two objects.",
django/tests/fixtures/tests.py,95,Dump the current contents of the database as a JSON fixture,
django/tests/fixtures/tests.py,104,Try just dumping the contents of fixtures.Category,
django/tests/fixtures/tests.py,111,...and just fixtures.Article,
django/tests/fixtures/tests.py,119,...and both,
django/tests/fixtures/tests.py,128,Specify a specific model twice,
django/tests/fixtures/tests.py,138,Specify a dump that specifies Article both explicitly and implicitly,
django/tests/fixtures/tests.py,147,"Specify a dump that specifies Article both explicitly and implicitly,",
django/tests/fixtures/tests.py,148,but lists the app first (#22025).,
django/tests/fixtures/tests.py,157,"Same again, but specify in the reverse order",
django/tests/fixtures/tests.py,166,"Specify one model from one application, and an entire other application.",
django/tests/fixtures/tests.py,174,Load fixture 2. JSON file imported by default. Overwrites some existing objects,
django/tests/fixtures/tests.py,182,"Load fixture 3, XML format.",
django/tests/fixtures/tests.py,191,"Load fixture 6, JSON file with dynamic ContentType fields. Testing ManyToOne.",
django/tests/fixtures/tests.py,198,"Load fixture 7, XML file with dynamic ContentType fields. Testing ManyToOne.",
django/tests/fixtures/tests.py,207,"Load fixture 8, JSON file with dynamic Permission fields. Testing ManyToMany.",
django/tests/fixtures/tests.py,215,"Load fixture 9, XML file with dynamic Permission fields. Testing ManyToMany.",
django/tests/fixtures/tests.py,223,object list is unaffected,
django/tests/fixtures/tests.py,231,"By default, you get raw keys on dumpdata",
django/tests/fixtures/tests.py,237,But you can get natural keys if you ask for them and they are available,
django/tests/fixtures/tests.py,245,You can also omit the primary keys for models that we can get later with natural keys.,
django/tests/fixtures/tests.py,254,Dump the current contents of the database as a JSON fixture,
django/tests/fixtures/tests.py,282,Dump the current contents of the database as an XML fixture,
django/tests/fixtures/tests.py,334,"Load fixture1 which has a site, two articles, and a category",
django/tests/fixtures/tests.py,338,Excluding fixtures app should only leave sites,
django/tests/fixtures/tests.py,345,Excluding fixtures.Article/Book should leave fixtures.Category,
django/tests/fixtures/tests.py,354,Excluding fixtures and fixtures.Article/Book should be a no-op,
django/tests/fixtures/tests.py,363,Excluding sites and fixtures.Article/Book should only leave fixtures.Category,
django/tests/fixtures/tests.py,371,Excluding a bogus app should throw an error,
django/tests/fixtures/tests.py,375,Excluding a bogus model should throw an error,
django/tests/fixtures/tests.py,389,Use the default manager,
django/tests/fixtures/tests.py,394,"Dump using Django's base manager. Should return all objects,",
django/tests/fixtures/tests.py,395,even those normally filtered by the manager,
django/tests/fixtures/tests.py,489,Test no progress bar when verbosity = 0,
django/tests/fixtures/tests.py,523,"Load fixture 4 (compressed), using format specification",
django/tests/fixtures/tests.py,530,"Load fixture 5 (compressed), using format *and* compression specification",
django/tests/fixtures/tests.py,537,"Load fixture 5 (compressed), only compression specification",
django/tests/fixtures/tests.py,544,"The name ""fixture5"" is ambiguous, so loading raises an error.",
django/tests/fixtures/tests.py,550,Load db fixtures 1 and 2. These will load using the 'default' database identifier implicitly,
django/tests/fixtures/tests.py,563,MySQL needs a little prodding to reject invalid data.,
django/tests/fixtures/tests.py,564,This won't affect other tests because the database connection,
django/tests/fixtures/tests.py,565,is closed at the end of each test.,
django/tests/fixtures/tests.py,602,Load db fixtures 1 and 2. These will load using the 'default' database identifier explicitly,
django/tests/fixtures/tests.py,611,Try to load db fixture 3. This won't load because the database identifier doesn't match,
django/tests/fixtures/tests.py,619,"Load back in fixture 1, we need the articles from it",
django/tests/fixtures/tests.py,622,Try to load fixture 6 using format discovery,
django/tests/fixtures/tests.py,629,Dump the current contents of the database as a JSON fixture,
django/tests/fixtures/tests.py,644,Dump the current contents of the database as an XML fixture,
django/tests/fixtures/tests.py,754,"Load fixture 1 again, using format discovery",
django/tests/fixtures/tests.py,761,Try to load fixture 2 using format discovery; this will fail,
django/tests/fixtures/tests.py,762,because there are two fixture2's in the fixtures directory,
django/tests/fixtures/tests.py,767,object list is unaffected,
django/tests/fixtures/tests.py,773,Dump the current contents of the database as a JSON fixture,
django/tests/fixtures/tests.py,782,"Load fixture 4 (compressed), using format discovery",
django/tests/test_utils/test_testcase.py,13,noop,
django/tests/test_utils/test_transactiontestcase.py,18,self.available_apps must be None to test the serialized_rollback,
django/tests/test_utils/test_transactiontestcase.py,19,condition.,
django/tests/test_utils/test_transactiontestcase.py,27,"with a mocked call_command(), this doesn't have any effect.",
django/tests/test_utils/test_transactiontestcase.py,36,Enable query logging for test_queries_cleared,
django/tests/test_utils/tests.py,47,"Total hack, but it works, just want an attribute that's always true.",
django/tests/test_utils/tests.py,227,Avoid infinite recursion. Creating a cursor calls,
django/tests/test_utils/tests.py,228,ensure_connection() which is currently mocked by this method.,
django/tests/test_utils/tests.py,265,Using an unordered queryset with more than one ordered value,
django/tests/test_utils/tests.py,266,is an error.,
django/tests/test_utils/tests.py,273,No error for one value.,
django/tests/test_utils/tests.py,533,script content will be parsed to text,
django/tests/test_utils/tests.py,544,Deprecated tags,
django/tests/test_utils/tests.py,711,equal html contains each other,
django/tests/test_utils/tests.py,724,when a root element is used ...,
django/tests/test_utils/tests.py,736,equal html contains each other one time,
django/tests/test_utils/tests.py,769,html with a root element contains the same html with no root element,
django/tests/test_utils/tests.py,948,HACK: This depends on internals of our TestCase subclasses,
django/tests/test_utils/tests.py,950,"Detect fixture loading by counting SQL queries, should be zero",
django/tests/test_utils/tests.py,963,context manager form of assertRaisesMessage(),
django/tests/test_utils/tests.py,968,callable form,
django/tests/test_utils/tests.py,1048,Protocol must be the same.,
django/tests/test_utils/tests.py,1052,Parameters of the same name must be in the same order.,
django/tests/test_utils/tests.py,1106,#21518 -- If neither override_settings nor a setting_changed receiver,
django/tests/test_utils/tests.py,1107,"clears the URL cache between tests, then one of test_first or",
django/tests/test_utils/tests.py,1108,test_second will fail.,
django/tests/test_utils/tests.py,1260,override to avoid a second cls._rollback_atomics() which would fail.,
django/tests/test_utils/tests.py,1261,Normal setUpClass() methods won't have exception handling so this,
django/tests/test_utils/tests.py,1262,method wouldn't typically be run.,
django/tests/test_utils/tests.py,1267,Simulate a broken setUpTestData() method.,
django/tests/test_utils/tests.py,1271,setUpTestData() should call _rollback_atomics() so that the,
django/tests/test_utils/tests.py,1272,transaction doesn't leak.,
django/tests/test_utils/test_simpletestcase.py,29,Suite teardown needs to be manually called to isolate failures.,
django/tests/test_utils/test_simpletestcase.py,56,pre-setup is called but not post-teardown.,
django/tests/test_utils/test_simpletestcase.py,70,pre-setup and post-teardwn are called.,
django/tests/test_utils/test_simpletestcase.py,98,This is the same as test_suite.debug().,
django/tests/test_utils/test_simpletestcase.py,101,pre-setup is called but not post-teardown.,
django/tests/test_utils/test_simpletestcase.py,113,This is the same as test_suite.debug().,
django/tests/test_utils/test_simpletestcase.py,116,pre-setup is called but not post-teardown.,
django/tests/test_utils/test_simpletestcase.py,128,This is the same as test_suite.debug().,
django/tests/test_utils/test_simpletestcase.py,131,pre-setup and post-teardwn are called.,
django/tests/test_utils/test_simpletestcase.py,140,This is the same as test_suite.debug().,
django/tests/admin_custom_urls/tests.py,69,"Should get the change_view for model instance with PK 'add', not show",
django/tests/admin_custom_urls/tests.py,70,the add_view,
django/tests/admin_custom_urls/tests.py,75,Should correctly get the change_view for the model instance with the,
django/tests/admin_custom_urls/tests.py,76,funny-looking PK (the one with a 'path/to/html/document.html' value),
django/tests/admin_custom_urls/models.py,34,Add the URL of our custom 'add_view' view to the front of the URLs,
django/tests/admin_custom_urls/models.py,35,list.  Remove the existing one(s) first,
django/tests/utils_tests/test_safestring.py,10,implement specific and obviously wrong escaping,
django/tests/utils_tests/test_safestring.py,11,in order to be able to tell for sure when it runs,
django/tests/utils_tests/test_text.py,51,Test for #20231,
django/tests/utils_tests/test_text.py,71,Ensure the final length is calculated correctly when there are,
django/tests/utils_tests/test_text.py,72,"combining characters with no precomposed form, and that combining",
django/tests/utils_tests/test_text.py,73,characters are not split up.,
django/tests/utils_tests/test_text.py,79,Ensure the length of the end text is correctly calculated when it,
django/tests/utils_tests/test_text.py,80,contains combining characters with no precomposed form.,
django/tests/utils_tests/test_text.py,85,"Make a best effort to shorten to the desired length, but requesting",
django/tests/utils_tests/test_text.py,86,a length shorter than the ellipsis shouldn't break,
django/tests/utils_tests/test_text.py,88,lazy strings are handled correctly,
django/tests/utils_tests/test_text.py,107,lazy strings are handled correctly,
django/tests/utils_tests/test_text.py,132,Test with new line inside tag,
django/tests/utils_tests/test_text.py,141,Test self-closing tags,
django/tests/utils_tests/test_text.py,147,Test html entities,
django/tests/utils_tests/test_text.py,192,given - expected - unicode?,
django/tests/utils_tests/test_text.py,203,"interning the result may be useful, e.g. when fed to Path.",
django/tests/utils_tests/test_text.py,269,The format string can be lazy. (string comes from contrib.admin),
django/tests/utils_tests/test_datetime_safe.py,13,>= 1900 required on Windows.,
django/tests/utils_tests/test_datetime_safe.py,50,%y will error before this date,
django/tests/utils_tests/test_dateparse.py,13,Valid inputs,
django/tests/utils_tests/test_dateparse.py,16,Invalid inputs,
django/tests/utils_tests/test_dateparse.py,22,Valid inputs,
django/tests/utils_tests/test_dateparse.py,28,Invalid inputs,
django/tests/utils_tests/test_dateparse.py,48,Invalid inputs,
django/tests/utils_tests/test_dateparse.py,58,fractions of seconds,
django/tests/utils_tests/test_dateparse.py,59,"hours, minutes, seconds",
django/tests/utils_tests/test_dateparse.py,60,multiple days,
django/tests/utils_tests/test_dateparse.py,61,single day,
django/tests/utils_tests/test_dateparse.py,62,negative durations,
django/tests/utils_tests/test_dateparse.py,63,minute & seconds,
django/tests/utils_tests/test_dateparse.py,64,seconds,
django/tests/utils_tests/test_html.py,32,Substitution patterns for testing the above items.,
django/tests/utils_tests/test_html.py,40,Check repeated values.,
django/tests/utils_tests/test_html.py,42,Verify it doesn't double replace &.,
django/tests/utils_tests/test_html.py,88,caused infinite loop on Pythons not patched with,
django/tests/utils_tests/test_html.py,89,https://bugs.python.org/issue20288,
django/tests/utils_tests/test_html.py,102,Test with more lengthy content (also catching performance regressions),
django/tests/utils_tests/test_html.py,116,Strings that should come out untouched.,
django/tests/utils_tests/test_html.py,123,Strings that have spaces to strip.,
django/tests/utils_tests/test_html.py,156,"""<"", "">"" and ""&"" are quoted inside JSON strings",
django/tests/utils_tests/test_html.py,158,"""<"", "">"" and ""&"" are quoted inside JSON objects",
django/tests/utils_tests/test_html.py,164,Lazy strings are quoted,
django/tests/utils_tests/test_html.py,180,"Everything unsafe is quoted, !*'();:@&=+$,/?#[]~ is considered",
django/tests/utils_tests/test_html.py,181,safe as per RFC.,
django/tests/utils_tests/test_html.py,192,IDNs are properly quoted,
django/tests/utils_tests/test_html.py,217,defines __html__ on its own,
django/tests/utils_tests/test_html.py,226,overrides __str__ and is marked as html_safe,
django/tests/utils_tests/test_html.py,265,simple_email_re catastrophic test,
django/tests/utils_tests/test_html.py,266,trailing_punctuation catastrophic test,
django/tests/utils_tests/test_dateformat.py,31,dt is ambiguous in Europe/Copenhagen. pytz raises an exception for,
django/tests/utils_tests/test_dateformat.py,32,"the ambiguity, which results in an empty string.",
django/tests/utils_tests/test_dateformat.py,35,Try all formatters that involve self.timezone.,
django/tests/utils_tests/test_dateformat.py,55,astimezone() is safe here because the target timezone doesn't have DST,
django/tests/utils_tests/test_dateformat.py,75,Regression test for #18951,
django/tests/utils_tests/test_dateformat.py,128,3h30m to the west of UTC,
django/tests/utils_tests/test_dateformat.py,146,Ticket #16924 -- We don't need timezone support to test this,
django/tests/utils_tests/test_dateformat.py,161,"Changing the locale doesn't change the ""r"" format.",
django/tests/utils_tests/test_datastructures.py,17,Refs #23664,
django/tests/utils_tests/test_datastructures.py,124,AttributeError: ImmutableList object is immutable.,
django/tests/utils_tests/test_datastructures.py,135,AttributeError: Object is immutable!,
django/tests/utils_tests/test_timesince.py,25,NOTE: \xa0 avoids wrapping between value and unit,
django/tests/utils_tests/test_decorators.py,47,This should never receive unrendered content.,
django/tests/utils_tests/test_decorators.py,88,process_template_response must not be called for HttpResponse,
django/tests/utils_tests/test_decorators.py,107,response must not be rendered yet.,
django/tests/utils_tests/test_decorators.py,109,"process_response must not be called until after response is rendered,",
django/tests/utils_tests/test_decorators.py,110,otherwise some decorators like csrf_protect and gzip_page will not,
django/tests/utils_tests/test_decorators.py,111,work correctly. See #16004,
django/tests/utils_tests/test_decorators.py,115,process_response saw the rendered content,
django/tests/utils_tests/test_timezone.py,10,Africa/Nairobi,
django/tests/utils_tests/test_timezone.py,11,Asia/Bangkok,
django/tests/utils_tests/test_timezone.py,164,"2:30 happens twice, once before DST ends and once after",
django/tests/utils_tests/test_timezone.py,177,2:30 never happened due to DST,
django/tests/utils_tests/test_feedgenerator.py,104,Two regression tests for #14202,
django/tests/utils_tests/test_feedgenerator.py,123,Not providing any optional arguments to Atom1Feed.add_item(),
django/tests/utils_tests/test_simplelazyobject.py,14,Try the variant protocol levels.,
django/tests/utils_tests/test_lorem_ipsum.py,54,Use two phrases.,
django/tests/utils_tests/test_lorem_ipsum.py,76,Make creating 2 sentences use 2 phrases.,
django/tests/utils_tests/test_lorem_ipsum.py,95,Make creating 2 sentences use 2 phrases.,
django/tests/utils_tests/test_module_loading.py,22,An importable child,
django/tests/utils_tests/test_module_loading.py,27,"A child that exists, but will generate an import error if loaded",
django/tests/utils_tests/test_module_loading.py,32,A child that doesn't exist,
django/tests/utils_tests/test_module_loading.py,37,"A child that doesn't exist, but is the name of a package on the path",
django/tests/utils_tests/test_module_loading.py,42,Don't be confused by caching of import misses,
django/tests/utils_tests/test_module_loading.py,43,NOQA: causes attempted import of utils_tests.types,
django/tests/utils_tests/test_module_loading.py,46,A module which doesn't have a __path__ (so no submodules),
django/tests/utils_tests/test_module_loading.py,54,A grandchild that exists.,
django/tests/utils_tests/test_module_loading.py,56,A grandchild that doesn't exist.,
django/tests/utils_tests/test_module_loading.py,58,A grandchild whose parent doesn't exist.,
django/tests/utils_tests/test_module_loading.py,60,A grandchild whose parent is not a package.,
django/tests/utils_tests/test_module_loading.py,85,An importable child,
django/tests/utils_tests/test_module_loading.py,90,"A child that exists, but will generate an import error if loaded",
django/tests/utils_tests/test_module_loading.py,95,A child that doesn't exist,
django/tests/utils_tests/test_module_loading.py,106,An importable child,
django/tests/utils_tests/test_module_loading.py,111,"A child that exists, but will generate an import error if loaded",
django/tests/utils_tests/test_module_loading.py,116,A child that doesn't exist,
django/tests/utils_tests/test_module_loading.py,127,Test exceptions raised,
django/tests/utils_tests/test_http.py,27,Dictionaries are treated as unordered.,
django/tests/utils_tests/test_http.py,64,MultiValueDicts are similarly unordered.,
django/tests/utils_tests/test_http.py,194,Valid basic auth credentials are allowed.,
django/tests/utils_tests/test_http.py,201,A path without host is allowed.,
django/tests/utils_tests/test_http.py,203,Basic auth without host is not allowed.,
django/tests/utils_tests/test_http.py,302,Ignore RFC 2616 ETags that are invalid according to RFC 7232.,
django/tests/utils_tests/test_http.py,306,unquoted,
django/tests/utils_tests/test_http.py,307,quoted,
django/tests/utils_tests/test_http.py,308,"quoted, weak",
django/tests/utils_tests/test_archive.py,36,Restore the original umask.,
django/tests/utils_tests/test_archive.py,42,An executable file in the archive has executable permissions.,
django/tests/utils_tests/test_archive.py,45,A file is readable even if permission data is missing.,
django/tests/utils_tests/test_lazyobject.py,45,Same as test_setattr but in reversed order,
django/tests/utils_tests/test_lazyobject.py,88,Refs #21840,
django/tests/utils_tests/test_lazyobject.py,127,__contains__ doesn't work when the haystack is a string and the needle a LazyObject,
django/tests/utils_tests/test_lazyobject.py,177,Tests whether an object's custom `__iter__` method is being,
django/tests/utils_tests/test_lazyobject.py,178,used when iterating over it.,
django/tests/utils_tests/test_lazyobject.py,195,See ticket #16563,
django/tests/utils_tests/test_lazyobject.py,205,Test copying lazy objects wrapping both builtin types and user-defined,
django/tests/utils_tests/test_lazyobject.py,206,classes since a lot of the relevant code does __dict__ manipulation and,
django/tests/utils_tests/test_lazyobject.py,207,builtin types don't have __dict__.,
django/tests/utils_tests/test_lazyobject.py,210,Copying a list works and returns the correct objects.,
django/tests/utils_tests/test_lazyobject.py,214,forces evaluation,
django/tests/utils_tests/test_lazyobject.py,222,Copying a list doesn't force evaluation.,
django/tests/utils_tests/test_lazyobject.py,233,Copying a class works and returns the correct objects.,
django/tests/utils_tests/test_lazyobject.py,237,forces evaluation,
django/tests/utils_tests/test_lazyobject.py,245,Copying a class doesn't force evaluation.,
django/tests/utils_tests/test_lazyobject.py,256,Deep copying a list works and returns the correct objects.,
django/tests/utils_tests/test_lazyobject.py,260,forces evaluation,
django/tests/utils_tests/test_lazyobject.py,268,Deep copying doesn't force evaluation.,
django/tests/utils_tests/test_lazyobject.py,279,Deep copying a class works and returns the correct objects.,
django/tests/utils_tests/test_lazyobject.py,283,forces evaluation,
django/tests/utils_tests/test_lazyobject.py,291,Deep copying doesn't force evaluation.,
django/tests/utils_tests/test_lazyobject.py,303,By inheriting from LazyObjectTestCase and redefining the lazy_wrap(),
django/tests/utils_tests/test_lazyobject.py,304,"method which all testcases use, we get to make sure all behaviors",
django/tests/utils_tests/test_lazyobject.py,305,tested in the parent testcase also apply to SimpleLazyObject.,
django/tests/utils_tests/test_lazyobject.py,310,"First, for an unevaluated SimpleLazyObject",
django/tests/utils_tests/test_lazyobject.py,312,__repr__ contains __repr__ of setup function and does not evaluate,
django/tests/utils_tests/test_lazyobject.py,313,the SimpleLazyObject,
django/tests/utils_tests/test_lazyobject.py,315,make sure evaluation hasn't been triggered,
django/tests/utils_tests/test_lazyobject.py,317,evaluate the lazy object,
django/tests/utils_tests/test_lazyobject.py,322,See ticket #19456,
django/tests/utils_tests/test_lazyobject.py,348,See ticket #18447,
django/tests/utils_tests/test_lazyobject.py,416,Grandparent super,
django/tests/utils_tests/test_lazyobject.py,429,Test every pickle protocol available,
django/tests/utils_tests/test_lazyobject.py,448,Test every pickle protocol available,
django/tests/utils_tests/test_lazyobject.py,451,Test both if we accessed a field on the model and if we didn't.,
django/tests/utils_tests/test_lazyobject.py,457,Assert that there were no warnings.,
django/tests/utils_tests/test_encoding.py,27,str(s) raises a TypeError if the result is not a text type.,
django/tests/utils_tests/test_encoding.py,65,Type check is needed because memoryview(bytes) == bytes.,
django/tests/utils_tests/test_encoding.py,96,Prepare a string long enough to force a recursion error if the tested,
django/tests/utils_tests/test_encoding.py,97,function uses recursion.,
django/tests/utils_tests/test_encoding.py,115,Valid UTF-8 sequences are encoded.,
django/tests/utils_tests/test_encoding.py,120,Reserved chars remain unescaped.,
django/tests/utils_tests/test_encoding.py,130,Test idempotency.,
django/tests/utils_tests/test_encoding.py,136,Valid UTF-8 sequences are decoded.,
django/tests/utils_tests/test_encoding.py,140,Reserved and non-URL valid ASCII chars are not decoded.,
django/tests/utils_tests/test_encoding.py,142,Broken UTF-8 sequences remain escaped.,
django/tests/utils_tests/test_encoding.py,154,Test idempotency.,
django/tests/utils_tests/test_no_submodule.py,1,Used to test for modules which don't have submodules.,
django/tests/utils_tests/test_functional.py,62,Docstring is preserved.,
django/tests/utils_tests/test_functional.py,65,It's cached.,
django/tests/utils_tests/test_functional.py,68,The correct value is returned.,
django/tests/utils_tests/test_functional.py,71,State isn't shared between instances.,
django/tests/utils_tests/test_functional.py,76,It behaves like a property when there's no instance.,
django/tests/utils_tests/test_functional.py,79,'other_value' doesn't become a property.,
django/tests/utils_tests/test_functional.py,128,An explicit name is ignored.,
django/tests/utils_tests/test_functional.py,214,lazy() should prepare the proxy class only once i.e. the first time,
django/tests/utils_tests/test_functional.py,215,it's used.,
django/tests/utils_tests/test_jslex.py,2,originally from https://bitbucket.org/ned/jslex,
django/tests/utils_tests/test_jslex.py,10,ids,
django/tests/utils_tests/test_jslex.py,13,numbers,
django/tests/utils_tests/test_jslex.py,21,keywords,
django/tests/utils_tests/test_jslex.py,25,strings,
django/tests/utils_tests/test_jslex.py,32,comments,
django/tests/utils_tests/test_jslex.py,36,punctuation,
django/tests/utils_tests/test_jslex.py,38,regex,
django/tests/utils_tests/test_jslex.py,44,next two are from https://www-archive.mozilla.org/js/language/js20-2002-04/rationale/syntax.html#regular-expressions  # NOQA,
django/tests/utils_tests/test_jslex.py,57,"Various ""illegal"" regexes that are valid according to the std.",
django/tests/utils_tests/test_jslex.py,60,Stress cases from https://stackoverflow.com/questions/5533925/what-javascript-constructs-does-jslex-incorrectly-lex/5573409#5573409  # NOQA,
django/tests/utils_tests/test_jslex.py,76,NOQA,
django/tests/utils_tests/test_jslex.py,83,NOQA,
django/tests/utils_tests/test_jslex.py,96,NOQA,
django/tests/utils_tests/test_jslex.py,103,NOQA,
django/tests/utils_tests/test_ipv6.py,35,The ::1.2.3.4 format used to be valid but was deprecated,
django/tests/utils_tests/test_ipv6.py,36,in rfc4291 section 2.5.5.1,
django/tests/utils_tests/test_autoreload.py,36,Some temp directories are symlinks. Python resolves these fully while,
django/tests/utils_tests/test_autoreload.py,37,importing.,
django/tests/utils_tests/test_autoreload.py,40,Test uncached access,
django/tests/utils_tests/test_autoreload.py,42,Test cached access,
django/tests/utils_tests/test_autoreload.py,49,Test uncached access,
django/tests/utils_tests/test_autoreload.py,51,Test cached access,
django/tests/utils_tests/test_autoreload.py,129,No crash.,
django/tests/utils_tests/test_autoreload.py,208,"If WatchmanUnavailable isn't raised, Watchman will be chosen.",
django/tests/utils_tests/test_autoreload.py,219,No exception,
django/tests/utils_tests/test_autoreload.py,297,Should raise no exception if _exception is None,
django/tests/utils_tests/test_autoreload.py,304,Create an exception,
django/tests/utils_tests/test_autoreload.py,319,Create an exception.,
django/tests/utils_tests/test_autoreload.py,396,On Linux and Windows updating the mtime of a file using touch() will set a timestamp,
django/tests/utils_tests/test_autoreload.py,397,"value that is in the past, as the time value for the last kernel tick is used rather",
django/tests/utils_tests/test_autoreload.py,398,than getting the correct absolute time.,
django/tests/utils_tests/test_autoreload.py,399,To make testing simpler set the mtime to be the observed time when this function is,
django/tests/utils_tests/test_autoreload.py,400,called.,
django/tests/utils_tests/test_autoreload.py,533,Raises StopIteration,
django/tests/utils_tests/test_autoreload.py,543,thread.is_alive() is False if it's not started.,
django/tests/utils_tests/test_autoreload.py,569,Shorten the timeout to speed up tests.,
django/tests/utils_tests/test_autoreload.py,663,Shorten the sleep time to speed up tests.,
django/tests/utils_tests/test_crypto.py,15,"It's hard to test for constant time, just test the result.",
django/tests/utils_tests/test_crypto.py,63,http://tools.ietf.org/html/draft-josefsson-pbkdf2-test-vectors-06,
django/tests/utils_tests/test_crypto.py,95,# this takes way too long :(,
django/tests/utils_tests/test_crypto.py,96,{,
django/tests/utils_tests/test_crypto.py,97,"""args"": {",
django/tests/utils_tests/test_crypto.py,98,"""password"": ""password"",",
django/tests/utils_tests/test_crypto.py,99,"""salt"": ""salt"",",
django/tests/utils_tests/test_crypto.py,100,"""iterations"": 16777216,",
django/tests/utils_tests/test_crypto.py,101,"""dklen"": 20,",
django/tests/utils_tests/test_crypto.py,102,"""digest"": hashlib.sha1,",
django/tests/utils_tests/test_crypto.py,103,"},",
django/tests/utils_tests/test_crypto.py,104,"""result"": ""eefe3d61cd4da4e4e9945b3d6ba2158c2634e984"",",
django/tests/utils_tests/test_crypto.py,105,"},",
django/tests/utils_tests/test_crypto.py,162,Check leading zeros are not stripped (#17481),
django/tests/utils_tests/test_numberformat.py,17,The use_l10n parameter can force thousand grouping behavior.,
django/tests/utils_tests/test_numberformat.py,65,"A float without a fractional part (3.) results in a "".0"" when no",
django/tests/utils_tests/test_numberformat.py,66,decimal_pos is given. Contrast that with the Decimal('3.') case,
django/tests/utils_tests/test_numberformat.py,67,in test_decimal_numbers which doesn't return a fractional part.,
django/tests/utils_tests/test_numberformat.py,73,Thousand grouping behavior.,
django/tests/utils_tests/test_numberformat.py,103,Very large & small numbers.,
django/tests/utils_tests/test_tree.py,50,start with the same children of node1 then add an item,
django/tests/utils_tests/test_tree.py,53,add() returns the added data,
django/tests/utils_tests/test_tree.py,56,"we added exactly one item, len() should reflect that",
django/tests/utils_tests/test_tree.py,61,negated is False by default,
django/tests/utils_tests/test_module/bad_module.py,1,NOQA,
django/tests/context_processors/tests.py,30,We should have the request object in the template.,
django/tests/context_processors/tests.py,33,Test is_secure.,
django/tests/context_processors/tests.py,40,Test path.,
django/tests/context_processors/tests.py,71,We should have the debug flag in the template.,
django/tests/context_processors/tests.py,75,And now we should not,
django/tests/context_processors/tests.py,89,Check we have not actually memoized connection.queries,
django/tests/context_processors/tests.py,91,Check queries for DB connection 'other',
django/tests/admin_inlines/tests.py,65,The heading for the m2m inline block uses the right text,
django/tests/admin_inlines/tests.py,67,"The ""add another"" label is correct",
django/tests/admin_inlines/tests.py,69,The '+' is dropped from the autogenerated form prefix (Author_books+),
django/tests/admin_inlines/tests.py,75,"Imelda likes shoes, but can't carry her own bags.",
django/tests/admin_inlines/tests.py,96,Editable field.,
django/tests/admin_inlines/tests.py,99,Read-only field.,
django/tests/admin_inlines/tests.py,145,"Here colspan is ""4"": two fields (title1 and title2), one hidden field and the delete checkbox.",
django/tests/admin_inlines/tests.py,154,"Identically named callable isn't present in the parent ModelAdmin,",
django/tests/admin_inlines/tests.py,155,rendering of the add view shouldn't explode,
django/tests/admin_inlines/tests.py,158,View should have the child inlines section,
django/tests/admin_inlines/tests.py,168,Add parent object view should have the child inlines section,
django/tests/admin_inlines/tests.py,173,The right callable should be used for the inline readonly_fields,
django/tests/admin_inlines/tests.py,174,column cells,
django/tests/admin_inlines/tests.py,192,ReadOnly fields,
django/tests/admin_inlines/tests.py,304,The maximum number of forms should respect 'get_max_num' on the,
django/tests/admin_inlines/tests.py,305,ModelAdmin,
django/tests/admin_inlines/tests.py,310,The total number of forms will remain the same in either case,
django/tests/admin_inlines/tests.py,595,"User always has permissions to add and change Authors, and Holders,",
django/tests/admin_inlines/tests.py,596,the main (parent) models of the inlines. Permissions on the inlines,
django/tests/admin_inlines/tests.py,597,vary per test.,
django/tests/admin_inlines/tests.py,610,Get the ID of the automatically created intermediate model for the Author-Book m2m,
django/tests/admin_inlines/tests.py,623,"No change permission on books, so no inline",
django/tests/admin_inlines/tests.py,630,"No permissions on Inner2s, so no inline",
django/tests/admin_inlines/tests.py,637,"No change permission on books, so no inline",
django/tests/admin_inlines/tests.py,644,"No permissions on Inner2s, so no inline",
django/tests/admin_inlines/tests.py,653,"View-only inlines. (It could be nicer to hide the empty, non-editable",
django/tests/admin_inlines/tests.py,654,inlines on the add page.),
django/tests/admin_inlines/tests.py,672,"No change permission on Books, so no inline",
django/tests/admin_inlines/tests.py,681,"Add permission on inner2s, so we get the inline",
django/tests/admin_inlines/tests.py,691,"No change permission on books, so no inline",
django/tests/admin_inlines/tests.py,701,View-only inlines.,
django/tests/admin_inlines/tests.py,713,The field in the inline is read-only.,
django/tests/admin_inlines/tests.py,725,"We have change perm on books, so we can add/change/delete inlines",
django/tests/admin_inlines/tests.py,746,"Add permission on inner2s, so we can add but not modify existing",
django/tests/admin_inlines/tests.py,749,"3 extra forms only, not the existing instance form",
django/tests/admin_inlines/tests.py,766,"Change permission on inner2s, so we can change existing but not add new",
django/tests/admin_inlines/tests.py,768,Just the one form for existing instances,
django/tests/admin_inlines/tests.py,778,max-num 0 means we can't add new ones,
django/tests/admin_inlines/tests.py,784,TabularInline,
django/tests/admin_inlines/tests.py,799,"Add/change perm, so we can add new and change existing",
django/tests/admin_inlines/tests.py,801,One form for existing instance and three extra for new,
django/tests/admin_inlines/tests.py,818,"Change/delete perm on inner2s, so we can change/delete existing",
django/tests/admin_inlines/tests.py,820,"One form for existing instance only, no new",
django/tests/admin_inlines/tests.py,841,"All perms on inner2s, so we can add/change/delete",
django/tests/admin_inlines/tests.py,843,"One form for existing instance only, three for new",
django/tests/admin_inlines/tests.py,855,TabularInline,
django/tests/admin_inlines/tests.py,934,noqa,
django/tests/admin_inlines/tests.py,1022,Enter some data and click 'Save'.,
django/tests/admin_inlines/tests.py,1046,The objects have been created in the database.,
django/tests/admin_inlines/tests.py,1066,Enter some data and click 'Save'.,
django/tests/admin_inlines/tests.py,1078,Non-field errorlist is in its own <tr> just before,
django/tests/admin_inlines/tests.py,1079,tr#inner4tabular_set-3:,
django/tests/admin_inlines/tests.py,1093,The objects have been created in the database.,
django/tests/admin_inlines/tests.py,1103,There's only one inline to start with and it has the correct ID.,
django/tests/admin_inlines/tests.py,1114,Add an inline,
django/tests/admin_inlines/tests.py,1117,"The inline has been added, it has the right id, and it contains the",
django/tests/admin_inlines/tests.py,1118,correct fields.,
django/tests/admin_inlines/tests.py,1127,Let's add another one to be sure,
django/tests/admin_inlines/tests.py,1137,Enter some data and click 'Save',
django/tests/admin_inlines/tests.py,1148,The objects have been created in the database,
django/tests/admin_inlines/tests.py,1175,Add a few inlines,
django/tests/admin_inlines/tests.py,1193,Click on a few delete buttons,
django/tests/admin_inlines/tests.py,1198,The rows are gone and the IDs have been re-sequenced,
django/tests/admin_inlines/tests.py,1209,Collapsed inlines have SHOW/HIDE links.,
django/tests/admin_inlines/tests.py,1212,"One field is in a stacked inline, other in a tabular one.",
django/tests/admin_inlines/models.py,102,Models for ticket #8190,
django/tests/admin_inlines/models.py,128,Models for #12749,
django/tests/admin_inlines/models.py,148,Models for #13510,
django/tests/admin_inlines/models.py,160,Models for #15424,
django/tests/admin_inlines/models.py,194,Models for #16838,
django/tests/admin_inlines/models.py,216,Models for #18433,
django/tests/admin_inlines/models.py,241,Models for #19425,
django/tests/admin_inlines/models.py,246,Models for #19524,
django/tests/admin_inlines/models.py,262,Models for #18263,
django/tests/admin_inlines/models.py,273,Other models,
django/tests/admin_inlines/admin.py,57,For bug #13174 tests.,
django/tests/admin_inlines/admin.py,214,admin for #18433,
django/tests/admin_inlines/admin.py,223,admin for #19425 and #18388,
django/tests/admin_inlines/admin.py,240,admin for #19524,
django/tests/admin_inlines/admin.py,245,admin and form for #18263,
django/tests/admin_inlines/admin.py,281,Test bug #12561 and #12778,
django/tests/admin_inlines/admin.py,282,only ModelAdmin media,
django/tests/admin_inlines/admin.py,284,ModelAdmin and Inline media,
django/tests/admin_inlines/admin.py,286,only Inline media,
django/tests/shell/tests.py,33,[1],
django/tests/shell/tests.py,40,[1],
django/tests/shell/tests.py,47,[1] Patch select to prevent tests failing when when the test suite is run,
django/tests/shell/tests.py,48,in parallel mode. The tests are run in a subprocess and the subprocess's,
django/tests/shell/tests.py,49,stdin is closed and replaced by /dev/null. Reading from /dev/null always,
django/tests/shell/tests.py,50,returns EOF and so select always shows that sys.stdin is ready to read.,
django/tests/shell/tests.py,51,This causes problems because of the call to select.select() towards the,
django/tests/shell/tests.py,52,end of shell's handle() method.,
django/tests/decorators/tests.py,35,"compose(f, g)(*args, **kwargs) == f(g(*args, **kwargs))",
django/tests/decorators/tests.py,47,django.views.decorators.http,
django/tests/decorators/tests.py,54,django.views.decorators.vary,
django/tests/decorators/tests.py,58,django.views.decorators.cache,
django/tests/decorators/tests.py,63,django.contrib.auth.decorators,
django/tests/decorators/tests.py,64,Apply user_passes_test twice to check #9474,
django/tests/decorators/tests.py,69,django.contrib.admin.views.decorators,
django/tests/decorators/tests.py,72,django.utils.functional,
django/tests/decorators/tests.py,77,django.utils.safestring,
django/tests/decorators/tests.py,155,"For testing method_decorator, a decorator that assumes a single argument.",
django/tests/decorators/tests.py,156,We will get type arguments if there is a mismatch in the number of arguments.,
django/tests/decorators/tests.py,166,"For testing method_decorator, two decorators that add an attribute to the function",
django/tests/decorators/tests.py,211,Sanity check myattr_dec and myattr2_dec,
django/tests/decorators/tests.py,230,Decorate using method_decorator() on the method.,
django/tests/decorators/tests.py,238,Decorate using method_decorator() on both the class and the method.,
django/tests/decorators/tests.py,239,The decorators applied to the methods are applied before the ones,
django/tests/decorators/tests.py,240,applied to the class.,
django/tests/decorators/tests.py,248,Decorate using an iterable of function decorators.,
django/tests/decorators/tests.py,255,Decorate using an iterable of method decorators.,
django/tests/decorators/tests.py,299,Test for argumented decorator,
django/tests/decorators/tests.py,375,The order should be consistent with the usual order in which,
django/tests/decorators/tests.py,376,"decorators are applied, e.g.",
django/tests/decorators/tests.py,377,@add_exclamation_mark,
django/tests/decorators/tests.py,378,@add_question_mark,
django/tests/decorators/tests.py,379,def func():,
django/tests/decorators/tests.py,380,...,
django/tests/decorators/tests.py,467,Since the real purpose of the exempt decorator is to suppress,
django/tests/decorators/tests.py,468,"the middleware's functionality, let's make sure it actually works...",
django/tests/model_inheritance_regress/tests.py,23,"Regression for #7350, #7202",
django/tests/model_inheritance_regress/tests.py,24,When you create a Parent object with a specific reference to an,
django/tests/model_inheritance_regress/tests.py,25,"existent child instance, saving the Parent doesn't duplicate the",
django/tests/model_inheritance_regress/tests.py,26,child. This behavior is only activated during a raw save - it is,
django/tests/model_inheritance_regress/tests.py,27,"mostly relevant to deserialization, but any sort of CORBA style",
django/tests/model_inheritance_regress/tests.py,28,'narrow()' API would require a similar approach.,
django/tests/model_inheritance_regress/tests.py,30,Create a child-parent-grandparent chain,
django/tests/model_inheritance_regress/tests.py,42,Create a child-parent chain with an explicit parent link,
django/tests/model_inheritance_regress/tests.py,48,No extra parent objects have been created.,
django/tests/model_inheritance_regress/tests.py,72,You can also update objects when using a raw save.,
django/tests/model_inheritance_regress/tests.py,88,"No extra parent objects after an update, either.",
django/tests/model_inheritance_regress/tests.py,114,"If you try to raw_save a parent attribute onto a child object,",
django/tests/model_inheritance_regress/tests.py,115,the attribute will be ignored.,
django/tests/model_inheritance_regress/tests.py,120,Note that the name has not changed,
django/tests/model_inheritance_regress/tests.py,121,"- name is an attribute of Place, not ItalianRestaurant",
django/tests/model_inheritance_regress/tests.py,131,Regressions tests for #7105: dates() queries should be able to use,
django/tests/model_inheritance_regress/tests.py,132,fields from the parent model as easily as the child.,
django/tests/model_inheritance_regress/tests.py,140,Regression test for #7276: calling delete() on a model with,
django/tests/model_inheritance_regress/tests.py,141,multi-table inheritance should delete the associated rows from any,
django/tests/model_inheritance_regress/tests.py,142,"ancestor tables, as well as any descendent objects.",
django/tests/model_inheritance_regress/tests.py,163,"This should delete both Restaurants, plus the related places, plus",
django/tests/model_inheritance_regress/tests.py,164,the ItalianRestaurant.,
django/tests/model_inheritance_regress/tests.py,186,"Regression test for #7488. This looks a little crazy, but it's the",
django/tests/model_inheritance_regress/tests.py,187,equivalent of what the admin interface has to do for the edit-inline,
django/tests/model_inheritance_regress/tests.py,188,case.,
django/tests/model_inheritance_regress/tests.py,249,Ordering should not include any database column more than once (this,
django/tests/model_inheritance_regress/tests.py,250,"is most likely to occur naturally with model inheritance, so we",
django/tests/model_inheritance_regress/tests.py,251,check it here). Regression test for #9390. This necessarily pokes at,
django/tests/model_inheritance_regress/tests.py,252,"the SQL string for the query, since the duplicate problems are only",
django/tests/model_inheritance_regress/tests.py,253,apparent at that late stage.,
django/tests/model_inheritance_regress/tests.py,292,the child->parent link,
django/tests/model_inheritance_regress/tests.py,312,"All fields from an ABC, including those inherited non-abstractly",
django/tests/model_inheritance_regress/tests.py,313,should be available on child classes (#7588). Creating this instance,
django/tests/model_inheritance_regress/tests.py,314,should work without error.,
django/tests/model_inheritance_regress/tests.py,323,many-to-many relations defined on an abstract base class are,
django/tests/model_inheritance_regress/tests.py,324,correctly inherited (and created) on the child class.,
django/tests/model_inheritance_regress/tests.py,345,A subclass of a subclass of an abstract model doesn't get its own,
django/tests/model_inheritance_regress/tests.py,346,accessor.,
django/tests/model_inheritance_regress/tests.py,349,... but it does inherit the m2m from its parent,
django/tests/model_inheritance_regress/tests.py,362,Regression test for #11369: verbose_name_plural should be inherited,
django/tests/model_inheritance_regress/tests.py,363,from an ABC even when there are one or more intermediate,
django/tests/model_inheritance_regress/tests.py,364,"abstract models in the inheritance chain, for consistency with",
django/tests/model_inheritance_regress/tests.py,365,verbose_name.,
django/tests/model_inheritance_regress/tests.py,390,Regression test for #13987: Primary key is incorrectly determined,
django/tests/model_inheritance_regress/tests.py,391,when more than one model has a concrete->abstract->concrete,
django/tests/model_inheritance_regress/tests.py,392,inheritance hierarchy.,
django/tests/model_inheritance_regress/tests.py,420,Test for #17502 - check that filtering through two levels of,
django/tests/model_inheritance_regress/tests.py,421,inheritance chain doesn't generate extra joins.,
django/tests/model_inheritance_regress/tests.py,429,It would be nice (but not too important) to skip the middle join in,
django/tests/model_inheritance_regress/tests.py,430,this case. Skipping is possible as nothing from the middle model is,
django/tests/model_inheritance_regress/tests.py,431,used in the qs and top contains direct pointer to the bottom model.,
django/tests/model_inheritance_regress/tests.py,449,Regression test for #7246,
django/tests/model_inheritance_regress/tests.py,473,The mismatch between Restaurant and Place is intentional (#28175).,
django/tests/model_inheritance_regress/tests.py,503,No queries are made when accessing the parent objects.,
django/tests/model_inheritance_regress/tests.py,510,One query is made when accessing the parent objects when the instance,
django/tests/model_inheritance_regress/tests.py,511,is deferred.,
django/tests/model_inheritance_regress/tests.py,518,No queries are made when accessing the parent objects when the,
django/tests/model_inheritance_regress/tests.py,519,instance has deferred a field not present in the parent table.,
django/tests/model_inheritance_regress/tests.py,545,Changing the parent of a restaurant changes the restaurant's ID & PK.,
django/tests/model_inheritance_regress/tests.py,553,Changing the parent of an italian restaurant changes the restaurant's,
django/tests/model_inheritance_regress/tests.py,554,ID & PK.,
django/tests/model_inheritance_regress/tests.py,566,Create a new profile by setting pk = None.,
django/tests/model_inheritance_regress/tests.py,577,Create a new congressman by setting pk = None.,
django/tests/model_inheritance_regress/models.py,33,An explicit link to the parent (we can control the attribute name).,
django/tests/model_inheritance_regress/models.py,42,The parent_link connector need not be the pk on the model.,
django/tests/model_inheritance_regress/models.py,48,Test parent_link connector can be discovered in abstract classes.,
django/tests/model_inheritance_regress/models.py,159,Abstract classes don't get m2m tables autocreated.,
django/tests/model_inheritance_regress/models.py,194,Check concrete -> abstract -> concrete inheritance,
django/tests/model_inheritance_regress/models.py,223,Check concrete + concrete -> concrete -> concrete,
django/tests/datatypes/tests.py,41,Test for ticket #12059: TimeField wrongly handling datetime.datetime object.,
django/tests/datatypes/tests.py,88,MySQL backend does not support timezone-aware datetimes.,
django/tests/datatypes/tests.py,96,Verify we didn't break DateTimeField behavior,
django/tests/datatypes/tests.py,98,We need to test this way because datetime.datetime inherits,
django/tests/datatypes/tests.py,99,from datetime.date:,
django/tests/select_for_update/tests.py,26,This is executed in autocommit mode so that code in,
django/tests/select_for_update/tests.py,27,run_select_for_update can see this data.,
django/tests/select_for_update/tests.py,35,We need another database connection in transaction to test that one,
django/tests/select_for_update/tests.py,36,connection issuing a SELECT ... FOR UPDATE will block.,
django/tests/select_for_update/tests.py,48,"Start a blocking transaction. At some point,",
django/tests/select_for_update/tests.py,49,end_blocking_transaction() should be called.,
django/tests/select_for_update/tests.py,59,Roll back the blocking transaction.,
django/tests/select_for_update/tests.py,65,Examine the SQL that was executed to determine whether it,
django/tests/select_for_update/tests.py,66,contains the 'SELECT..FOR UPDATE' stanza.,
django/tests/select_for_update/tests.py,422,"We need to enter transaction management again, as this is done on",
django/tests/select_for_update/tests.py,423,per-thread basis,
django/tests/select_for_update/tests.py,431,This method is run in a separate thread. It uses its own,
django/tests/select_for_update/tests.py,432,database connection. Close it without waiting for the GC.,
django/tests/select_for_update/tests.py,442,"First, let's start the transaction in our thread.",
django/tests/select_for_update/tests.py,445,"Now, try it again using the ORM's select_for_update",
django/tests/select_for_update/tests.py,446,facility. Do this in a separate thread.,
django/tests/select_for_update/tests.py,452,"The thread should immediately block, but we'll sleep",
django/tests/select_for_update/tests.py,453,for a bit to make sure.,
django/tests/select_for_update/tests.py,462,Check the person hasn't been updated. Since this isn't,
django/tests/select_for_update/tests.py,463,"using FOR UPDATE, it won't block.",
django/tests/select_for_update/tests.py,467,"When we end our blocking transaction, our thread should",
django/tests/select_for_update/tests.py,468,be able to continue.,
django/tests/select_for_update/tests.py,472,"Check the thread has finished. Assuming it has, we should",
django/tests/select_for_update/tests.py,473,find that it has updated the person's name.,
django/tests/select_for_update/tests.py,476,"We must commit the transaction to ensure that MySQL gets a fresh read,",
django/tests/select_for_update/tests.py,477,since by default it runs in REPEATABLE READ mode,
django/tests/select_for_update/tests.py,504,This method is run in a separate thread. It uses its own,
django/tests/select_for_update/tests.py,505,database connection. Close it without waiting for the GC.,
django/tests/select_for_update/tests.py,506,Connection cannot be closed on Oracle because cursor is still,
django/tests/select_for_update/tests.py,507,open.,
django/tests/m2m_through/tests.py,80,invite_reason_callable() is called once.,
django/tests/m2m_through/tests.py,442,"Since this isn't a symmetrical relation, Tony's friend link still exists.",
django/tests/m2m_through/tests.py,494,Manually created symmetrical m2m relation doesn't add mirror entry,
django/tests/m2m_through/tests.py,495,automatically.,
django/tests/m2m_through/tests.py,534,Date is preserved.,
django/tests/m2m_through/tests.py,539,Recreate relationship.,
django/tests/m2m_through/tests.py,565,Forward retrieval,
django/tests/m2m_through/tests.py,567,Backward retrieval,
django/tests/m2m_through/models.py,6,M2M described on one of the models,
django/tests/m2m_through/models.py,93,Custom through link fields,
django/tests/m2m_through/models.py,108,"field order is deliberately inverted. the target field is ""invitee"".",
django/tests/m2m_through/models.py,130,field order is deliberately inverted.,
django/tests/urlpatterns_reverse/urls.py,61,Partials should be fine.,
django/tests/urlpatterns_reverse/urls.py,66,"This is non-reversible, but we shouldn't blow up when parsing it.",
django/tests/urlpatterns_reverse/urls.py,71,Tests for #13154. Mixed syntax to test both ways of defining URLs.,
django/tests/urlpatterns_reverse/urls.py,77,Security tests,
django/tests/urlpatterns_reverse/urls_without_handlers.py,1,A URLconf that doesn't define any handlerXXX.,
django/tests/urlpatterns_reverse/views.py,26,NOQA,
django/tests/urlpatterns_reverse/views.py,35,neither a callable nor a string,
django/tests/urlpatterns_reverse/named_urls_conflict.py,6,No kwargs,
django/tests/urlpatterns_reverse/named_urls_conflict.py,9,One kwarg,
django/tests/urlpatterns_reverse/named_urls_conflict.py,14,Two kwargs,
django/tests/urlpatterns_reverse/urls_error_handlers_callables.py,1,Used by the ErrorHandlerResolutionTests test case.,
django/tests/urlpatterns_reverse/views_broken.py,1,I just raise an AttributeError to confuse the view loading mechanism,
django/tests/urlpatterns_reverse/urls_error_handlers.py,1,Used by the ErrorHandlerResolutionTests test case.,
django/tests/urlpatterns_reverse/test_localeregexdescriptor.py,25,compiled only once per language,
django/tests/urlpatterns_reverse/test_localeregexdescriptor.py,40,"compiled only once, regardless of language",
django/tests/urlpatterns_reverse/tests.py,32,"These entries are in the format: (path, url_name, app_name, namespace, view_name, func, args, kwargs)",
django/tests/urlpatterns_reverse/tests.py,33,Simple case,
django/tests/urlpatterns_reverse/tests.py,50,Unnamed args are dropped if you have *any* kwargs in a pattern,
django/tests/urlpatterns_reverse/tests.py,63,Unnamed views should have None as the url_name. Regression data for #21157.,
django/tests/urlpatterns_reverse/tests.py,73,"If you have no kwargs, you get an args list.",
django/tests/urlpatterns_reverse/tests.py,86,Namespaces,
django/tests/urlpatterns_reverse/tests.py,119,Nested namespaces,
django/tests/urlpatterns_reverse/tests.py,144,Namespaces capturing variables,
django/tests/urlpatterns_reverse/tests.py,238,Tests for nested groups. Nested capturing groups will only work if you,
django/tests/urlpatterns_reverse/tests.py,239,*only* supply the correct outer group.,
django/tests/urlpatterns_reverse/tests.py,251,Tests for #13154,
django/tests/urlpatterns_reverse/tests.py,257,Security tests,
django/tests/urlpatterns_reverse/tests.py,294,"Reversing None should raise an error, not return the last un-named view.",
django/tests/urlpatterns_reverse/tests.py,311,Parentheses are allowed and should not cause errors or be escaped,
django/tests/urlpatterns_reverse/tests.py,332,"Regression for #20022, adjusted for #24013 because ~ is an unreserved",
django/tests/urlpatterns_reverse/tests.py,333,character. Tests whether % is escaped.,
django/tests/urlpatterns_reverse/tests.py,337,Regression for #17076,
django/tests/urlpatterns_reverse/tests.py,339,"this url exists, but requires an argument",
django/tests/urlpatterns_reverse/tests.py,379,Pick a resolver from a namespaced URLconf,
django/tests/urlpatterns_reverse/tests.py,397,"(name, args, kwargs, expected)",
django/tests/urlpatterns_reverse/tests.py,413,"(name, args, kwargs, expected)",
django/tests/urlpatterns_reverse/tests.py,414,"Without arguments, the last URL in urlpatterns has precedence.",
django/tests/urlpatterns_reverse/tests.py,416,"With an arg, the last URL in urlpatterns has precedence.",
django/tests/urlpatterns_reverse/tests.py,418,"With a kwarg, other URL patterns can be reversed.",
django/tests/urlpatterns_reverse/tests.py,422,The number and order of the arguments don't interfere with reversing.,
django/tests/urlpatterns_reverse/tests.py,449,this list matches the expected URL types and names returned when,
django/tests/urlpatterns_reverse/tests.py,450,you try to resolve a nonexistent URL in the first level of included,
django/tests/urlpatterns_reverse/tests.py,451,"URLs in named_urls.py (e.g., '/included/nonexistent-url')",
django/tests/urlpatterns_reverse/tests.py,464,make sure we at least matched the root ('/') url resolver:,
django/tests/urlpatterns_reverse/tests.py,495,Views which have a class name as part of their path.,
django/tests/urlpatterns_reverse/tests.py,564,We don't really need a model; just something with a get_absolute_url,
django/tests/urlpatterns_reverse/tests.py,592,Assert that we can redirect using UTF-8 strings,
django/tests/urlpatterns_reverse/tests.py,595,Assert that no imports are attempted when dealing with a relative path,
django/tests/urlpatterns_reverse/tests.py,596,"(previously, the below would resolve in a UnicodeEncodeError from __import__ )",
django/tests/urlpatterns_reverse/tests.py,603,modules that are not listed in urlpatterns should not be importable,
django/tests/urlpatterns_reverse/tests.py,608,Views added to urlpatterns using include() should be reversible.,
django/tests/urlpatterns_reverse/tests.py,1113,"Legacy support for extracting ""function, args, kwargs"".",
django/tests/urlpatterns_reverse/tests.py,1118,ResolverMatch capabilities.,
django/tests/urlpatterns_reverse/tests.py,1128,and for legacy purposes:,
django/tests/urlpatterns_reverse/tests.py,1155,View is not a callable (explicit import; arbitrary Python object),
django/tests/urlpatterns_reverse/tests.py,1160,Regex contains an error (refs #6170),
django/tests/syndication_tests/feeds.py,121,Defining a template overrides any item_title definition,
django/tests/syndication_tests/feeds.py,156,Provide a weird offset so that the test can know it's getting this,
django/tests/syndication_tests/feeds.py,157,specific offset and not accidentally getting on from,
django/tests/syndication_tests/feeds.py,158,settings.TIME_ZONE.,
django/tests/syndication_tests/tests.py,68,This cleanup is necessary because contrib.sites cache,
django/tests/syndication_tests/tests.py,69,"makes tests interfere with each other, see #11505",
django/tests/syndication_tests/tests.py,79,Making sure there's only 1 `rss` element and that the correct,
django/tests/syndication_tests/tests.py,80,RSS version was specified.,
django/tests/syndication_tests/tests.py,87,Making sure there's only one `channel` element w/in the,
django/tests/syndication_tests/tests.py,88,`rss` element.,
django/tests/syndication_tests/tests.py,93,Find the last build date,
django/tests/syndication_tests/tests.py,114,Ensure the content of the channel is correct,
django/tests/syndication_tests/tests.py,120,Check feed_url is passed,
django/tests/syndication_tests/tests.py,126,Find the pubdate of the first feed item,
django/tests/syndication_tests/tests.py,143,Assert that <guid> does not have any 'isPermaLink' attribute,
django/tests/syndication_tests/tests.py,203,Making sure there's only 1 `rss` element and that the correct,
django/tests/syndication_tests/tests.py,204,RSS version was specified.,
django/tests/syndication_tests/tests.py,210,Making sure there's only one `channel` element w/in the,
django/tests/syndication_tests/tests.py,211,`rss` element.,
django/tests/syndication_tests/tests.py,222,Ensure the content of the channel is correct,
django/tests/syndication_tests/tests.py,229,Check feed_url is passed,
django/tests/syndication_tests/tests.py,317,this feed has a `published` element with the latest date,
django/tests/syndication_tests/tests.py,327,this feed has an `updated` element with the latest date,
django/tests/syndication_tests/tests.py,388,"Naive date times passed in get converted to the local time zone, so",
django/tests/syndication_tests/tests.py,389,check the received zone offset against the local offset.,
django/tests/syndication_tests/tests.py,423,No last-modified when feed has no item_pubdate,
django/tests/model_fields/test_datetimefield.py,45,Other model with different datetime.,
django/tests/model_fields/test_datetimefield.py,54,The following is equivalent to UTC 2014-03-12 18:34:23.24000.,
django/tests/model_fields/test_datetimefield.py,56,The following is equivalent to UTC 2014-03-13 05:34:23.24000.,
django/tests/model_fields/test_datetimefield.py,61,"In Vancouver, we expect both results.",
django/tests/model_fields/test_datetimefield.py,68,"But in UTC, the __date only matches one of them.",
django/tests/model_fields/test_binaryfield.py,19,Resave (=update),
django/tests/model_fields/test_binaryfield.py,23,Test default value,
django/tests/model_fields/test_booleanfield.py,75,"When an extra clause exists, the boolean conversions are applied with",
django/tests/model_fields/test_booleanfield.py,76,an offset (#13293).,
django/tests/model_fields/test_booleanfield.py,91,select_related('fk_field_name'),
django/tests/model_fields/test_booleanfield.py,96,select_related(),
django/tests/model_fields/test_booleanfield.py,121,no error,
django/tests/model_fields/test_durationfield.py,83,Tests for forms.DurationField are in the forms_tests app.,
django/tests/model_fields/test_imagefield.py,23,"Pillow not available, create dummy classes (tests will be skipped anyway)",
django/tests/model_fields/test_imagefield.py,37,Person model to use for tests.,
django/tests/model_fields/test_imagefield.py,39,File class to use for file instances.,
django/tests/model_fields/test_imagefield.py,82,Check height/width attributes of field.,
django/tests/model_fields/test_imagefield.py,92,"Check height/width fields of model, if defined.",
django/tests/model_fields/test_imagefield.py,114,Create two Persons with different mugshots.,
django/tests/model_fields/test_imagefield.py,122,Test again with an instance fetched from the db.,
django/tests/model_fields/test_imagefield.py,127,Instance from db should match the local instance.,
django/tests/model_fields/test_imagefield.py,161,"Get a ""clean"" model instance",
django/tests/model_fields/test_imagefield.py,163,It won't have an opened file.,
django/tests/model_fields/test_imagefield.py,166,"After asking for the size, the file should still be closed.",
django/tests/model_fields/test_imagefield.py,224,TestImageField value will default to being an instance of its,
django/tests/model_fields/test_imagefield.py,225,"attr_class, a  TestImageFieldFile, with name == None, which will",
django/tests/model_fields/test_imagefield.py,226,cause it to evaluate as False.,
django/tests/model_fields/test_imagefield.py,230,Test setting a fresh created model instance.,
django/tests/model_fields/test_imagefield.py,259,"If image assigned to None, dimension fields should be cleared.",
django/tests/model_fields/test_imagefield.py,275,A new file should update dimensions.,
django/tests/model_fields/test_imagefield.py,279,Field and dimensions should be cleared after a delete.,
django/tests/model_fields/test_imagefield.py,290,Dimensions should get set if file is saved.,
django/tests/model_fields/test_imagefield.py,294,Test dimensions after fetching from database.,
django/tests/model_fields/test_imagefield.py,296,Bug 11084: Dimensions should not get recalculated if file is,
django/tests/model_fields/test_imagefield.py,297,coming from the database.  We test this by checking if the file,
django/tests/model_fields/test_imagefield.py,298,was opened.,
django/tests/model_fields/test_imagefield.py,301,"After checking dimensions on the image field, the file will have",
django/tests/model_fields/test_imagefield.py,302,opened.,
django/tests/model_fields/test_imagefield.py,304,"Dimensions should now be cached, and if we reset was_opened and",
django/tests/model_fields/test_imagefield.py,305,"check dimensions again, the file should not have opened.",
django/tests/model_fields/test_imagefield.py,310,"If we assign a new image to the instance, the dimensions should",
django/tests/model_fields/test_imagefield.py,311,update.,
django/tests/model_fields/test_imagefield.py,314,"Dimensions were recalculated, and hence file should have opened.",
django/tests/model_fields/test_imagefield.py,390,Clear the ImageFields one at a time.,
django/tests/model_fields/test_imagefield.py,407,We can use save=True when deleting the image field with null=True,
django/tests/model_fields/test_imagefield.py,408,dimension fields and the other field has an image.,
django/tests/model_fields/test_imagefield.py,422,Dimensions should get set for the saved file.,
django/tests/model_fields/test_imagefield.py,428,Test dimensions after fetching from database.,
django/tests/model_fields/test_imagefield.py,430,Bug 11084: Dimensions should not get recalculated if file is,
django/tests/model_fields/test_imagefield.py,431,coming from the database.  We test this by checking if the file,
django/tests/model_fields/test_imagefield.py,432,was opened.,
django/tests/model_fields/test_imagefield.py,437,"After checking dimensions on the image fields, the files will",
django/tests/model_fields/test_imagefield.py,438,have been opened.,
django/tests/model_fields/test_imagefield.py,441,"Dimensions should now be cached, and if we reset was_opened and",
django/tests/model_fields/test_imagefield.py,442,"check dimensions again, the file should not have opened.",
django/tests/model_fields/test_imagefield.py,450,"If we assign a new image to the instance, the dimensions should",
django/tests/model_fields/test_imagefield.py,451,update.,
django/tests/model_fields/test_imagefield.py,456,"Dimensions were recalculated, and hence file should have opened.",
django/tests/model_fields/test_uuid.py,74,Works for integers less than 128 bits.,
django/tests/model_fields/test_uuid.py,81,Fails for integers larger than 128 bits.,
django/tests/model_fields/test_uuid.py,254,no error,
django/tests/model_fields/test_uuid.py,273,The two objects were correctly created.,
django/tests/model_fields/test_uuid.py,287,regression for #24611,
django/tests/model_fields/test_uuid.py,305,exercises ForeignKey.get_db_prep_value(),
django/tests/model_fields/test_uuid.py,313,Need a TransactionTestCase to avoid deferring FK constraint checking.,
django/tests/model_fields/test_decimalfield.py,18,to_python() converts floats and honors max_digits.,
django/tests/model_fields/test_decimalfield.py,21,Uses default rounding of ROUND_HALF_EVEN.,
django/tests/model_fields/test_decimalfield.py,64,This should not crash.,
django/tests/model_fields/test_filefield.py,79,The file's source and destination must be on the same filesystem.,
django/tests/model_fields/test_filefield.py,96,"Replace the FileField's file with an in-memory ContentFile, so that",
django/tests/model_fields/test_filefield.py,97,open() doesn't write to disk.,
django/tests/model_fields/test_floatfield.py,11,Try setting float field to unsaved object,
django/tests/model_fields/test_floatfield.py,16,Set value to valid and save,
django/tests/model_fields/test_floatfield.py,20,Set field to object on saved instance,
django/tests/model_fields/test_floatfield.py,29,Try setting field to object on retrieved object,
django/tests/model_fields/tests.py,96,Must be picklable with this cached property populated (#28188).,
django/tests/model_fields/tests.py,131,Actual model instance not needed.,
django/tests/model_fields/tests.py,158,A nested value,
django/tests/model_fields/tests.py,159,A top level value,
django/tests/model_fields/tests.py,160,Invalid value,
django/tests/model_fields/tests.py,161,Blank value,
django/tests/model_fields/tests.py,162,Empty value,
django/tests/model_fields/tests.py,163,Delayed choices,
django/tests/model_fields/tests.py,198,A nested value,
django/tests/model_fields/tests.py,199,Invalid value,
django/tests/model_fields/tests.py,200,Blank value,
django/tests/model_fields/tests.py,201,Empty value,
django/tests/model_fields/tests.py,207,A nested value,
django/tests/model_fields/tests.py,208,Invalid value,
django/tests/model_fields/tests.py,209,Blank value,
django/tests/model_fields/tests.py,210,Empty value,
django/tests/model_fields/tests.py,239,raises ZeroDivisionError if evaluated.,
django/tests/model_fields/models.py,56,Contrived way of adding choices later.,
django/tests/model_fields/models.py,189,Don't want to depend on Pillow in this test,
django/tests/model_fields/models.py,190,"field_image = models.ImageField(""verbose field"")",
django/tests/model_fields/models.py,209,,
django/tests/model_fields/models.py,210,"These models aren't used in any test, just here to ensure they validate",
django/tests/model_fields/models.py,211,successfully.,
django/tests/model_fields/models.py,213,See ticket #16570.,
django/tests/model_fields/models.py,218,See ticket #18389.,
django/tests/model_fields/models.py,222,,
django/tests/model_fields/models.py,229,,
django/tests/model_fields/models.py,230,FileField,
django/tests/model_fields/models.py,237,,
django/tests/model_fields/models.py,238,ImageField,
django/tests/model_fields/models.py,240,"If Pillow available, do these tests.",
django/tests/model_fields/models.py,258,Set up a temp directory for file storage.,
django/tests/model_fields/models.py,384,,
django/tests/model_fields/test_field_flags.py,139,"If the field has a relation, there should be only one of the",
django/tests/model_fields/test_field_flags.py,140,4 cardinality flags available.,
django/tests/model_fields/test_field_flags.py,148,Test classes are what we expect,
django/tests/model_fields/test_field_flags.py,151,Ensure all m2m reverses are m2m,
django/tests/model_fields/test_field_flags.py,163,Test classes are what we expect,
django/tests/model_fields/test_field_flags.py,166,Ensure all o2m reverses are m2o,
django/tests/model_fields/test_field_flags.py,177,Test classes are what we expect,
django/tests/model_fields/test_field_flags.py,180,Ensure all m2o reverses are o2m,
django/tests/model_fields/test_field_flags.py,191,Test classes are what we expect,
django/tests/model_fields/test_field_flags.py,194,Ensure all o2o reverses are o2o,
django/tests/model_fields/test_field_flags.py,216,"null isn't well defined for a ManyToManyField, but changing it to",
django/tests/model_fields/test_field_flags.py,217,True causes backwards compatibility problems (#25320).,
django/tests/distinct_on_fields/tests.py,37,"(qset, expected) tuples",
django/tests/distinct_on_fields/tests.py,59,Does combining querysets work?,
django/tests/distinct_on_fields/tests.py,79,Fetch the alphabetically first coworker for each worker,
django/tests/distinct_on_fields/tests.py,90,Combining queries with different distinct_fields is not allowed.,
django/tests/distinct_on_fields/tests.py,95,Test join unreffing,
django/tests/distinct_on_fields/tests.py,112,distinct + annotate not allowed,
django/tests/distinct_on_fields/tests.py,119,"However this check is done only when the query executes, so you",
django/tests/distinct_on_fields/tests.py,120,can use distinct() to remove the fields before execution.,
django/tests/distinct_on_fields/tests.py,122,distinct + aggregate not allowed,
django/scripts/manage_translations.py,1,!/usr/bin/env python,
django/scripts/manage_translations.py,2,,
django/scripts/manage_translations.py,3,This Python file contains utility scripts to manage Django translations.,
django/scripts/manage_translations.py,4,It has to be run inside the django git root directory.,
django/scripts/manage_translations.py,5,,
django/scripts/manage_translations.py,6,The following commands are available:,
django/scripts/manage_translations.py,7,,
django/scripts/manage_translations.py,8,"* update_catalogs: check for new strings in core and contrib catalogs, and",
django/scripts/manage_translations.py,9,output how much strings are new/changed.,
django/scripts/manage_translations.py,10,,
django/scripts/manage_translations.py,11,* lang_stats: output statistics for each catalog/language combination,
django/scripts/manage_translations.py,12,,
django/scripts/manage_translations.py,13,* fetch: fetch translations from transifex.com,
django/scripts/manage_translations.py,14,,
django/scripts/manage_translations.py,15,Each command support the --languages and --resources options to limit their,
django/scripts/manage_translations.py,16,"operation to the specified language or resource. For example, to get stats",
django/scripts/manage_translations.py,17,"for Spanish in contrib.admin, run:",
django/scripts/manage_translations.py,18,,
django/scripts/manage_translations.py,19,$ python scripts/manage_translations.py lang_stats --language=es --resources=admin,
django/scripts/manage_translations.py,41,Collect all locale directories,
django/scripts/manage_translations.py,51,"Filter by resources, if any",
django/scripts/manage_translations.py,99,Output changed stats,
django/scripts/manage_translations.py,120,TODO: merge first with the latest en catalog,
django/scripts/manage_translations.py,131,msgfmt output stats on stderr,
django/scripts/manage_translations.py,148,Transifex pull,
django/scripts/manage_translations.py,157,msgcat to wrap lines and msgfmt for compilation of .mo file,
django/docs/conf.py,1,"Django documentation build configuration file, created by",
django/docs/conf.py,2,sphinx-quickstart on Thu Mar 27 09:06:53 2008.,
django/docs/conf.py,3,,
django/docs/conf.py,4,This file is execfile()d with the current directory set to its containing dir.,
django/docs/conf.py,5,,
django/docs/conf.py,6,"The contents of this file are pickled, so don't put values in the namespace",
django/docs/conf.py,7,"that aren't picklable (module imports are okay, they're removed automatically).",
django/docs/conf.py,8,,
django/docs/conf.py,9,All configuration values have a default; values that are commented out,
django/docs/conf.py,10,serve to show the default.,
django/docs/conf.py,15,Workaround for sphinx-build recursion limit overflow:,
django/docs/conf.py,16,"pickle.dump(doctree, f, pickle.HIGHEST_PROTOCOL)",
django/docs/conf.py,17,RuntimeError: maximum recursion depth exceeded while pickling an object,
django/docs/conf.py,18,,
django/docs/conf.py,19,Python's default allowed recursion depth is 1000 but this isn't enough for,
django/docs/conf.py,20,building docs/ref/settings.txt sometimes.,
django/docs/conf.py,21,https://groups.google.com/d/topic/sphinx-dev/MtRf64eGtv4/discussion,
django/docs/conf.py,24,Make sure we get the version of this copy of Django,
django/docs/conf.py,27,"If extensions (or modules to document with autodoc) are in another directory,",
django/docs/conf.py,28,add these directories to sys.path here. If the directory is relative to the,
django/docs/conf.py,29,"documentation root, use os.path.abspath to make it absolute, like shown here.",
django/docs/conf.py,32,-- General configuration -----------------------------------------------------,
django/docs/conf.py,34,"If your documentation needs a minimal Sphinx version, state it here.",
django/docs/conf.py,37,"Add any Sphinx extension module names here, as strings. They can be extensions",
django/docs/conf.py,38,coming with Sphinx (named 'sphinx.ext.*') or your custom ones.,
django/docs/conf.py,47,AutosectionLabel settings.,
django/docs/conf.py,48,Uses a <page>:<label> schema which doesn't work for duplicate sub-section,
django/docs/conf.py,49,"labels, so set max depth.",
django/docs/conf.py,53,Spelling check needs an additional module that is not installed by default.,
django/docs/conf.py,54,Add it only if spelling check is requested so docs can be generated without it.,
django/docs/conf.py,58,Spelling language.,
django/docs/conf.py,61,Location of word list.,
django/docs/conf.py,64,"Add any paths that contain templates here, relative to this directory.",
django/docs/conf.py,65,templates_path = [],
django/docs/conf.py,67,The suffix of source filenames.,
django/docs/conf.py,70,The encoding of source files.,
django/docs/conf.py,71,source_encoding = 'utf-8-sig',
django/docs/conf.py,73,The master toctree document.,
django/docs/conf.py,76,General substitutions.,
django/docs/conf.py,81,"The version info for the project you're documenting, acts as replacement for",
django/docs/conf.py,82,"|version| and |release|, also used in various other places throughout the",
django/docs/conf.py,83,built documents.,
django/docs/conf.py,84,,
django/docs/conf.py,85,The short X.Y version.,
django/docs/conf.py,87,"The full version, including alpha/beta/rc tags.",
django/docs/conf.py,101,"The ""development version"" of Django",
django/docs/conf.py,107,A file or directory. GitHub redirects from blob to tree if needed.,
django/docs/conf.py,112,The language for content autogenerated by Sphinx. Refer to documentation,
django/docs/conf.py,113,for a list of supported languages.,
django/docs/conf.py,114,language = None,
django/docs/conf.py,116,Location for .po/.mo translation files used when language is set,
django/docs/conf.py,119,"There are two options for replacing |today|: either, you set today to some",
django/docs/conf.py,120,"non-false value, then it is used:",
django/docs/conf.py,121,today = '',
django/docs/conf.py,122,"Else, today_fmt is used as the format for a strftime call.",
django/docs/conf.py,125,"List of patterns, relative to source directory, that match files and",
django/docs/conf.py,126,directories to ignore when looking for source files.,
django/docs/conf.py,129,The reST default role (used for this markup: `text`) to use for all documents.,
django/docs/conf.py,132,"If true, '()' will be appended to :func: etc. cross-reference text.",
django/docs/conf.py,135,"If true, the current module name will be prepended to all description",
django/docs/conf.py,136,unit titles (such as .. function::).,
django/docs/conf.py,139,"If true, sectionauthor and moduleauthor directives will be shown in the",
django/docs/conf.py,140,output. They are ignored by default.,
django/docs/conf.py,143,The name of the Pygments (syntax highlighting) style to use.,
django/docs/conf.py,146,Links to Python's docs should reference the most recent version of the 3.x,
django/docs/conf.py,147,"branch, which is located at this URL.",
django/docs/conf.py,154,Python's docs don't change every week.,
django/docs/conf.py,155,days,
django/docs/conf.py,157,The 'versionadded' and 'versionchanged' directives are overridden.,
django/docs/conf.py,160,-- Options for HTML output ---------------------------------------------------,
django/docs/conf.py,162,The theme to use for HTML and HTML Help pages.  See the documentation for,
django/docs/conf.py,163,a list of builtin themes.,
django/docs/conf.py,166,Theme options are theme-specific and customize the look and feel of a theme,
django/docs/conf.py,167,"further.  For a list of options available for each theme, see the",
django/docs/conf.py,168,documentation.,
django/docs/conf.py,169,html_theme_options = {},
django/docs/conf.py,171,"Add any paths that contain custom themes here, relative to this directory.",
django/docs/conf.py,174,"The name for this set of Sphinx documents.  If None, it defaults to",
django/docs/conf.py,175,"""<project> v<release> documentation"".",
django/docs/conf.py,176,html_title = None,
django/docs/conf.py,178,A shorter title for the navigation bar.  Default is the same as html_title.,
django/docs/conf.py,179,html_short_title = None,
django/docs/conf.py,181,The name of an image file (relative to this directory) to place at the top,
django/docs/conf.py,182,of the sidebar.,
django/docs/conf.py,183,html_logo = None,
django/docs/conf.py,185,The name of an image file (within the static path) to use as favicon of the,
django/docs/conf.py,186,docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32,
django/docs/conf.py,187,pixels large.,
django/docs/conf.py,188,html_favicon = None,
django/docs/conf.py,190,"Add any paths that contain custom static files (such as style sheets) here,",
django/docs/conf.py,191,"relative to this directory. They are copied after the builtin static files,",
django/docs/conf.py,192,"so a file named ""default.css"" will overwrite the builtin ""default.css"".",
django/docs/conf.py,193,"html_static_path = [""_static""]",
django/docs/conf.py,195,"If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
django/docs/conf.py,196,using the given strftime format.,
django/docs/conf.py,199,Content template for the index page.,
django/docs/conf.py,200,html_index = '',
django/docs/conf.py,202,"Custom sidebar templates, maps document names to template names.",
django/docs/conf.py,203,html_sidebars = {},
django/docs/conf.py,205,"Additional templates that should be rendered to pages, maps page names to",
django/docs/conf.py,206,template names.,
django/docs/conf.py,209,"If false, no module index is generated.",
django/docs/conf.py,210,html_domain_indices = True,
django/docs/conf.py,212,"If false, no index is generated.",
django/docs/conf.py,213,html_use_index = True,
django/docs/conf.py,215,"If true, the index is split into individual pages for each letter.",
django/docs/conf.py,216,html_split_index = False,
django/docs/conf.py,218,"If true, links to the reST sources are added to the pages.",
django/docs/conf.py,219,html_show_sourcelink = True,
django/docs/conf.py,221,"If true, ""Created using Sphinx"" is shown in the HTML footer. Default is True.",
django/docs/conf.py,222,html_show_sphinx = True,
django/docs/conf.py,224,"If true, ""(C) Copyright ..."" is shown in the HTML footer. Default is True.",
django/docs/conf.py,225,html_show_copyright = True,
django/docs/conf.py,227,"If true, an OpenSearch description file will be output, and all pages will",
django/docs/conf.py,228,contain a <link> tag referring to it.  The value of this option must be the,
django/docs/conf.py,229,base URL from which the finished HTML is served.,
django/docs/conf.py,230,html_use_opensearch = '',
django/docs/conf.py,232,"This is the file name suffix for HTML files (e.g. "".xhtml"").",
django/docs/conf.py,233,html_file_suffix = None,
django/docs/conf.py,235,Output file base name for HTML help builder.,
django/docs/conf.py,240,Appended to every page,
django/docs/conf.py,249,-- Options for LaTeX output --------------------------------------------------,
django/docs/conf.py,260,Grouping the document tree into LaTeX files. List of tuples,
django/docs/conf.py,261,"(source start file, target name, title, author, document class [howto/manual]).",
django/docs/conf.py,262,latex_documents = [],
django/docs/conf.py,268,The name of an image file (relative to this directory) to place at the top of,
django/docs/conf.py,269,the title page.,
django/docs/conf.py,270,latex_logo = None,
django/docs/conf.py,272,"For ""manual"" documents, if this is true, then toplevel headings are parts,",
django/docs/conf.py,273,not chapters.,
django/docs/conf.py,274,latex_use_parts = False,
django/docs/conf.py,276,"If true, show page references after internal links.",
django/docs/conf.py,277,latex_show_pagerefs = False,
django/docs/conf.py,279,"If true, show URL addresses after external links.",
django/docs/conf.py,280,latex_show_urls = False,
django/docs/conf.py,282,Documents to append as an appendix to all manuals.,
django/docs/conf.py,283,latex_appendices = [],
django/docs/conf.py,285,"If false, no module index is generated.",
django/docs/conf.py,286,latex_domain_indices = True,
django/docs/conf.py,289,-- Options for manual page output --------------------------------------------,
django/docs/conf.py,291,One entry per manual page. List of tuples,
django/docs/conf.py,292,"(source start file, name, description, authors, manual section).",
django/docs/conf.py,302,-- Options for Texinfo output ------------------------------------------------,
django/docs/conf.py,304,"List of tuples (startdocname, targetname, title, author, dir_entry,",
django/docs/conf.py,305,"description, category, toctree_only)",
django/docs/conf.py,312,-- Options for Epub output ---------------------------------------------------,
django/docs/conf.py,314,Bibliographic Dublin Core info.,
django/docs/conf.py,320,The basename for the epub file. It defaults to the project name.,
django/docs/conf.py,321,epub_basename = 'Django',
django/docs/conf.py,323,The HTML theme for the epub output. Since the default themes are not optimized,
django/docs/conf.py,324,"for small screen space, using the same theme for HTML and epub output is",
django/docs/conf.py,325,"usually not wise. This defaults to 'epub', a theme designed to save visual",
django/docs/conf.py,326,space.,
django/docs/conf.py,329,The language of the text. It defaults to the language option,
django/docs/conf.py,330,or en if the language is not set.,
django/docs/conf.py,331,epub_language = '',
django/docs/conf.py,333,The scheme of the identifier. Typical schemes are ISBN or URL.,
django/docs/conf.py,334,epub_scheme = '',
django/docs/conf.py,336,The unique identifier of the text. This can be an ISBN number,
django/docs/conf.py,337,or the project homepage.,
django/docs/conf.py,338,epub_identifier = '',
django/docs/conf.py,340,A unique identification for the text.,
django/docs/conf.py,341,epub_uid = '',
django/docs/conf.py,343,A tuple containing the cover image and cover page html template filenames.,
django/docs/conf.py,346,"A sequence of (type, uri, title) tuples for the guide element of content.opf.",
django/docs/conf.py,347,epub_guide = (),
django/docs/conf.py,349,HTML files that should be inserted before the pages created by sphinx.,
django/docs/conf.py,350,The format is a list of tuples containing the path and title.,
django/docs/conf.py,351,epub_pre_files = [],
django/docs/conf.py,353,HTML files shat should be inserted after the pages created by sphinx.,
django/docs/conf.py,354,The format is a list of tuples containing the path and title.,
django/docs/conf.py,355,epub_post_files = [],
django/docs/conf.py,357,A list of files that should not be packed into the epub file.,
django/docs/conf.py,358,epub_exclude_files = [],
django/docs/conf.py,360,The depth of the table of contents in toc.ncx.,
django/docs/conf.py,361,epub_tocdepth = 3,
django/docs/conf.py,363,Allow duplicate toc entries.,
django/docs/conf.py,364,epub_tocdup = True,
django/docs/conf.py,366,Choose between 'default' and 'includehidden'.,
django/docs/conf.py,367,epub_tocscope = 'default',
django/docs/conf.py,369,Fix unsupported image types using the PIL.,
django/docs/conf.py,370,epub_fix_images = False,
django/docs/conf.py,372,Scale large images.,
django/docs/conf.py,373,epub_max_image_width = 0,
django/docs/conf.py,375,"How to display URL addresses: 'footnote', 'no', or 'inline'.",
django/docs/conf.py,376,epub_show_urls = 'inline',
django/docs/conf.py,378,"If false, no index is generated.",
django/docs/conf.py,379,epub_use_index = True,
django/docs/_ext/,21,RE for option descriptions without a '--' prefix,
django/docs/_ext/,104,Sphinx < 1.8: Domain 'changeset' is not registered,
django/docs/_ext/,114,"Don't use border=1, which docutils does by default.",
django/docs/_ext/,118,Needed by Sphinx,
django/docs/_ext/,126,"by default sphinx puts <big> around the ""(""",
django/docs/_ext/,135,,
django/docs/_ext/,136,"Turn the ""new in version"" stuff (versionadded/versionchanged) into a",
django/docs/_ext/,137,"better callout -- the Sphinx default is just a little span,",
django/docs/_ext/,138,which is a bit less obvious that I'd like.,
django/docs/_ext/,139,,
django/docs/_ext/,140,FIXME: these messages are all hardcoded in English. We need to change,
django/docs/_ext/,141,"that to accommodate other language docs, but I can't work out how to make",
django/docs/_ext/,142,that work.,
django/docs/_ext/,143,,
django/docs/_ext/,164,Give each section a unique ID -- nice for custom CSS hooks,
django/docs/_ext/,238,Put a mark on the document object signaling the fact the directive,
django/docs/_ext/,239,has been used on it.,
django/docs/_ext/,281,The 'doscon' Pygments formatter needs a prompt like this. '>' alone,
django/docs/_ext/,282,won't do it because then it simply paints the whole command line as a,
django/docs/_ext/,283,grey comment with no highlighting at all.,
django/docs/_ext/,349,"Only do work when the djangohtml HTML Sphinx builder is being used,",
django/docs/_ext/,350,invoke the default behavior for the rest.,
django/docs/_ext/,355,Only add the tabbed UI if there is actually a Windows-specific,
django/docs/_ext/,356,version of the CLI example.,
django/docs/_ext/,364,Replace the literal_node object returned by Sphinx's CodeBlock with,
django/docs/_ext/,365,the ConsoleNode wrapper.,
django/docs/_ext/,370,Put a bool on the context used to render the template. It's used to,
django/docs/_ext/,371,control inclusion of console-tabs.css and activation of the JavaScript.,
django/docs/_ext/,372,This way it's include only from HTML files rendered from reST files where,
django/docs/_ext/,373,the ConsoleDirective is used.,
