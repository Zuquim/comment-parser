file path,line #,comment,satd
Python/networking_flow/minimum_cut.py,1,Minimum cut on Ford_Fulkerson algorithm.,
Python/networking_flow/minimum_cut.py,14,Return True if there is node that has not iterated.,
Python/networking_flow/minimum_cut.py,38,"Record original cut, copy.",
Python/networking_flow/minimum_cut.py,44,Find the minimum value in select path,
Python/networking_flow/ford_fulkerson.py,1,Ford-Fulkerson Algorithm for Maximum Flow Problem,
Python/networking_flow/ford_fulkerson.py,10,Return True if there is node that has not iterated.,
Python/networking_flow/ford_fulkerson.py,28,This array is filled by BFS and to store path,
Python/networking_flow/ford_fulkerson.py,36,Find the minimum value in select path,
Python/searches/simulated_annealing.py,1,https://en.wikipedia.org/wiki/Simulated_annealing,
Python/searches/simulated_annealing.py,51,till we do not find a neighbor that we can move to,
Python/searches/simulated_annealing.py,52,picking a random neighbor,
Python/searches/simulated_annealing.py,62,neighbor outside our bounds,
Python/searches/simulated_annealing.py,65,in case we are finding minimum,
Python/searches/simulated_annealing.py,66,improves the solution,
Python/searches/simulated_annealing.py,71,probability generation function,
Python/searches/simulated_annealing.py,72,random number within probability,
Python/searches/simulated_annealing.py,77,"temperature below threshold, or could not find a suitable neighbor",
Python/searches/simulated_annealing.py,97,"starting the problem with initial coordinates (12, 47)",
Python/searches/simulated_annealing.py,107,"starting the problem with initial coordinates (12, 47)",
Python/searches/hill_climbing.py,1,https://en.wikipedia.org/wiki/Hill_climbing,
Python/searches/hill_climbing.py,111,list to store the current score at each iteration,
Python/searches/hill_climbing.py,123,to hold the next best neighbor,
Python/searches/hill_climbing.py,126,do not want to visit the same state again,
Python/searches/hill_climbing.py,133,neighbor outside our bounds,
Python/searches/hill_climbing.py,135,finding max,
Python/searches/hill_climbing.py,136,going to direction with greatest ascent,
Python/searches/hill_climbing.py,140,finding min,
Python/searches/hill_climbing.py,141,to direction with greatest descent,
Python/searches/hill_climbing.py,146,we found at least one neighbor which improved the current state,
Python/searches/hill_climbing.py,149,since we have no neighbor that improves the solution we stop the search,
Python/searches/hill_climbing.py,171,"starting the problem with initial coordinates (3, 4)",
Python/searches/hill_climbing.py,179,"starting the problem with initial coordinates (12, 47)",
Python/searches/quick_select.py,40,index = len(items) // 2 when trying to find the median,
Python/searches/quick_select.py,41,(value of index when items is sorted),
Python/searches/quick_select.py,43,invalid input,
Python/searches/quick_select.py,54,index is the pivot,
Python/searches/quick_select.py,57,must be in smaller,
Python/searches/quick_select.py,60,must be in larger,
Python/searches/simple-binary-search.py,1,A binary search implementation to test if a number is in a list of elements,
Python/searches/ternary_search.py,11,This is the precision for this function which can be altered.,
Python/searches/ternary_search.py,12,It is recommended for users to keep this number greater than or equal to 10.,
Python/searches/ternary_search.py,15,This is the linear search that will occur after the search space has become smaller.,
Python/searches/ternary_search.py,22,This is the iterative method of the ternary search algorithm.,
Python/searches/ternary_search.py,52,This is the recursive method of the ternary search algorithm.,
Python/searches/ternary_search.py,78,This function is to check if the array is sorted.,
Python/searches/tabu_search.py,279,Pass the arguments to main method,
Python/searches/interpolation_search.py,18,avoid divided by 0 during interpolation,
Python/searches/interpolation_search.py,29,out of range check,
Python/searches/interpolation_search.py,62,avoid divided by 0 during interpolation,
Python/searches/interpolation_search.py,73,out of range check,
Python/searches/fibonacci_search.py,1,run using python fibonacci_search.py -v,
Python/data_structures/disjoint_set/disjoint_set.py,16,rank is the distance from x to its' parent,
Python/data_structures/disjoint_set/disjoint_set.py,17,root's rank is 0,
Python/data_structures/data_structures/heap/heap_generic.py,6,Stores actual heap items.,
Python/data_structures/data_structures/heap/heap_generic.py,8,Stores indexes of each item for supporting updates and deletion.,
Python/data_structures/data_structures/heap/heap_generic.py,10,Stores current size of heap.,
Python/data_structures/data_structures/heap/heap_generic.py,12,Stores function used to evaluate the score of an item on which basis ordering will be done.,
Python/data_structures/data_structures/heap/heap_generic.py,31,First update the indexes of the items in index map.,
Python/data_structures/data_structures/heap/heap_generic.py,36,Then swap the items in the list.,
Python/data_structures/data_structures/heap/heap_generic.py,76,Make sure heap is right in both up and down direction.,
Python/data_structures/data_structures/heap/heap_generic.py,77,Ideally only one of them will make any change.,
Python/data_structures/data_structures/heap/heap_generic.py,90,Make sure heap is right in both up and down direction.,
Python/data_structures/data_structures/heap/heap_generic.py,91,Ideally only one of them will make any change- so no performance loss in calling both.,
Python/data_structures/stacks/prefix_evaluation.py,37,iterate over the string in reverse order,
Python/data_structures/stacks/prefix_evaluation.py,40,push operand to stack,
Python/data_structures/stacks/prefix_evaluation.py,45,pop values from stack can calculate the result,
Python/data_structures/stacks/prefix_evaluation.py,46,push the result onto the stack again,
Python/data_structures/stacks/prefix_evaluation.py,54,Driver code,
Python/data_structures/stacks/infix_to_prefix_conversion.py,28,Priority of each operator,
Python/data_structures/stacks/infix_to_prefix_conversion.py,31,Print table header for output,
Python/data_structures/stacks/infix_to_prefix_conversion.py,42,"if x is Alphabet / Digit, add it to Postfix",
Python/data_structures/stacks/infix_to_prefix_conversion.py,44,"if x is ""("" push to Stack",
Python/data_structures/stacks/infix_to_prefix_conversion.py,45,"if x is "")"" pop stack until ""("" is encountered",
Python/data_structures/stacks/infix_to_prefix_conversion.py,47,Pop stack & add the content to Postfix,
Python/data_structures/stacks/infix_to_prefix_conversion.py,51,"If stack is empty, push x to stack",
Python/data_structures/stacks/infix_to_prefix_conversion.py,55,while priority of x is not greater than priority of element in the stack,
Python/data_structures/stacks/infix_to_prefix_conversion.py,56,pop stack & add to Postfix,
Python/data_structures/stacks/infix_to_prefix_conversion.py,57,push x to stack,
Python/data_structures/stacks/infix_to_prefix_conversion.py,64,Output in tabular format,
Python/data_structures/stacks/infix_to_prefix_conversion.py,66,while stack is not empty,
Python/data_structures/stacks/infix_to_prefix_conversion.py,67,pop stack & add to Postfix,
Python/data_structures/stacks/infix_to_prefix_conversion.py,73,Output in tabular format,
Python/data_structures/stacks/infix_to_prefix_conversion.py,75,return Postfix as str,
Python/data_structures/stacks/infix_to_prefix_conversion.py,79,reverse the infix equation,
Python/data_structures/stacks/infix_to_prefix_conversion.py,83,"change ""("" to "")""",
Python/data_structures/stacks/infix_to_prefix_conversion.py,85,"change "")"" to ""(""",
Python/data_structures/stacks/infix_to_prefix_conversion.py,89,"call infix_2_postfix on Infix, return reverse of Postfix",
Python/data_structures/stacks/infix_to_prefix_conversion.py,93,Input an Infix equation,
Python/data_structures/stacks/infix_to_prefix_conversion.py,94,Remove spaces from the input,
Python/data_structures/stacks/stack_using_dll.py,1,A complete working Python program to demonstrate all,
Python/data_structures/stacks/stack_using_dll.py,2,stack operations using a doubly linked list,
Python/data_structures/stacks/stack_using_dll.py,7,Assign data,
Python/data_structures/stacks/stack_using_dll.py,8,Initialize next as null,
Python/data_structures/stacks/stack_using_dll.py,9,Initialize prev as null,
Python/data_structures/stacks/stack_using_dll.py,85,Code execution starts here,
Python/data_structures/stacks/stack_using_dll.py,88,Start with the empty stack,
Python/data_structures/stacks/stack_using_dll.py,91,Insert 4 at the beginning. So stack becomes 4->None,
Python/data_structures/stacks/stack_using_dll.py,95,Insert 5 at the beginning. So stack becomes 4->5->None,
Python/data_structures/stacks/stack_using_dll.py,98,Insert 6 at the beginning. So stack becomes 4->5->6->None,
Python/data_structures/stacks/stack_using_dll.py,101,Insert 7 at the beginning. So stack becomes 4->5->6->7->None,
Python/data_structures/stacks/stack_using_dll.py,104,Print the stack,
Python/data_structures/stacks/stack_using_dll.py,107,Print the top element,
Python/data_structures/stacks/stack_using_dll.py,110,Print the stack size,
Python/data_structures/stacks/stack_using_dll.py,113,pop the top element,
Python/data_structures/stacks/stack_using_dll.py,116,pop the top element,
Python/data_structures/stacks/stack_using_dll.py,119,two elements have now been popped off,
Python/data_structures/stacks/stack_using_dll.py,122,Print True if the stack is empty else False,
Python/data_structures/stacks/linked_stack.py,54,"each node points to the item ""lower"" in the stack",
Python/data_structures/stacks/linked_stack.py,63,"""remove"" element by having top point to the next one",
Python/data_structures/stacks/stock_span_problem.py,14,Create a stack and push index of fist element to it,
Python/data_structures/stacks/stock_span_problem.py,18,Span value of first element is always 1,
Python/data_structures/stacks/stock_span_problem.py,21,Calculate span values for rest of the elements,
Python/data_structures/stacks/stock_span_problem.py,24,Pop elements from stack while stack is not,
Python/data_structures/stacks/stock_span_problem.py,25,empty and top of stack is smaller than price[i],
Python/data_structures/stacks/stock_span_problem.py,29,"If stack becomes empty, then price[i] is greater",
Python/data_structures/stacks/stock_span_problem.py,30,"than all elements on left of it, i.e. price[0],",
Python/data_structures/stacks/stock_span_problem.py,31,"price[1], ..price[i-1]. Else the price[i]  is",
Python/data_structures/stacks/stock_span_problem.py,32,greater than elements after top of stack,
Python/data_structures/stacks/stock_span_problem.py,35,Push this element to stack,
Python/data_structures/stacks/stock_span_problem.py,39,A utility function to print elements of array,
Python/data_structures/stacks/stock_span_problem.py,45,Driver program to test above function,
Python/data_structures/stacks/stock_span_problem.py,49,Fill the span values in array S[],
Python/data_structures/stacks/stock_span_problem.py,52,Print the calculated span values,
Python/data_structures/stacks/infix_to_postfix_conversion.py,44,"Pop '(' from stack. If there is no '(', there is a mismatched",
Python/data_structures/stacks/infix_to_postfix_conversion.py,45,parentheses.,
Python/data_structures/stacks/postfix_evaluation.py,25,integer division operation,
Python/data_structures/stacks/postfix_evaluation.py,32,operators & their respective operation,
Python/data_structures/stacks/postfix_evaluation.py,34,print table header,
Python/data_structures/stacks/postfix_evaluation.py,39,if x in digit,
Python/data_structures/stacks/postfix_evaluation.py,40,append x to stack,
Python/data_structures/stacks/postfix_evaluation.py,43,output in tabular format,
Python/data_structures/stacks/postfix_evaluation.py,45,pop stack,
Python/data_structures/stacks/postfix_evaluation.py,48,output in tabular format,
Python/data_structures/stacks/postfix_evaluation.py,50,pop stack,
Python/data_structures/stacks/postfix_evaluation.py,53,output in tabular format,
Python/data_structures/stacks/postfix_evaluation.py,57,evaluate the 2 values popped from stack & push result to stack,
Python/data_structures/stacks/postfix_evaluation.py,63,output in tabular format,
Python/data_structures/binary_tree/avl_tree.py,148,an unbalance detected,
Python/data_structures/binary_tree/avl_tree.py,151,new node is the left child of the left child,
Python/data_structures/binary_tree/avl_tree.py,154,new node is the right child of the left child,
Python/data_structures/binary_tree/avl_tree.py,222,"print(""yyy"")",
Python/data_structures/binary_tree/avl_tree.py,236,"a level traversale, gives a more intuitive look on the tree",
Python/data_structures/binary_tree/treap.py,41,None tree is split into 2 Nones,
Python/data_structures/binary_tree/treap.py,68,"If one node is None, return the other",
Python/data_structures/binary_tree/treap.py,115,None,
Python/data_structures/binary_tree/fenwick_tree.py,2,create fenwick tree with size SIZE,
Python/data_structures/binary_tree/fenwick_tree.py,6,update data (adding) in index i in O(lg N),
Python/data_structures/binary_tree/fenwick_tree.py,11,query cumulative data from index 0 to i in O(lg N),
Python/data_structures/binary_tree/binary_search_tree.py,9,Added in order to delete a node easier,
Python/data_structures/binary_tree/binary_search_tree.py,32,reset its kids,
Python/data_structures/binary_tree/binary_search_tree.py,34,reset its parent,
Python/data_structures/binary_tree/binary_search_tree.py,35,If it is the right children,
Python/data_structures/binary_tree/binary_search_tree.py,52,create a new Node,
Python/data_structures/binary_tree/binary_search_tree.py,53,if Tree is empty,
Python/data_structures/binary_tree/binary_search_tree.py,54,set its root,
Python/data_structures/binary_tree/binary_search_tree.py,55,Tree is not empty,
Python/data_structures/binary_tree/binary_search_tree.py,56,from root,
Python/data_structures/binary_tree/binary_search_tree.py,57,While we don't get to a leaf,
Python/data_structures/binary_tree/binary_search_tree.py,58,We go left,
Python/data_structures/binary_tree/binary_search_tree.py,60,We insert the new node in a leaf,
Python/data_structures/binary_tree/binary_search_tree.py,82,use lazy evaluation here to avoid NoneType Attribute error,
Python/data_structures/binary_tree/binary_search_tree.py,111,Look for the node with that label,
Python/data_structures/binary_tree/binary_search_tree.py,113,If it has no children,
Python/data_structures/binary_tree/binary_search_tree.py,115,Has only right children,
Python/data_structures/binary_tree/binary_search_tree.py,117,Has only left children,
Python/data_structures/binary_tree/binary_search_tree.py,122,Gets the max value of the left branch,
Python/data_structures/binary_tree/binary_search_tree.py,126,Assigns the value to the node to delete and keep tree structure,
Python/data_structures/binary_tree/binary_search_tree.py,130,Preorder Traversal,
Python/data_structures/binary_tree/binary_search_tree.py,181,Prints all the elements of the list in order traversal,
Python/data_structures/binary_tree/binary_search_tree.py,207,binary_search_tree(),
Python/data_structures/binary_tree/red_black_tree.py,35,Here are functions which are specific to red-black trees,
Python/data_structures/binary_tree/red_black_tree.py,84,Only possible with an empty tree,
Python/data_structures/binary_tree/red_black_tree.py,106,"This node is the root, so it just needs to be black",
Python/data_structures/binary_tree/red_black_tree.py,109,"If the parent is black, then it just needs to be red",
Python/data_structures/binary_tree/red_black_tree.py,138,"It's easier to balance a node with at most one child,",
Python/data_structures/binary_tree/red_black_tree.py,139,so we replace this node with the greatest one less than,
Python/data_structures/binary_tree/red_black_tree.py,140,it and remove that.,
Python/data_structures/binary_tree/red_black_tree.py,145,"This node has at most one non-None child, so we don't",
Python/data_structures/binary_tree/red_black_tree.py,146,need to replace,
Python/data_structures/binary_tree/red_black_tree.py,149,"This node is red, and its child is black",
Python/data_structures/binary_tree/red_black_tree.py,150,The only way this happens to a node with one child,
Python/data_structures/binary_tree/red_black_tree.py,151,is if both children are None leaves.,
Python/data_structures/binary_tree/red_black_tree.py,152,We can just remove this node and call it a day.,
Python/data_structures/binary_tree/red_black_tree.py,158,The node is black,
Python/data_structures/binary_tree/red_black_tree.py,160,This node and its child are black,
Python/data_structures/binary_tree/red_black_tree.py,162,The tree is now empty,
Python/data_structures/binary_tree/red_black_tree.py,172,This node is black and its child is red,
Python/data_structures/binary_tree/red_black_tree.py,173,Move the child node here and make it black,
Python/data_structures/binary_tree/red_black_tree.py,266,I assume property 1 to hold because there is nothing that can,
Python/data_structures/binary_tree/red_black_tree.py,267,make the color be anything other than 0 or 1.,
Python/data_structures/binary_tree/red_black_tree.py,269,Property 2,
Python/data_structures/binary_tree/red_black_tree.py,271,The root was red,
Python/data_structures/binary_tree/red_black_tree.py,275,"Property 3 does not need to be checked, because None is assumed",
Python/data_structures/binary_tree/red_black_tree.py,276,to be black and is all the leaves.,
Python/data_structures/binary_tree/red_black_tree.py,278,Property 4,
Python/data_structures/binary_tree/red_black_tree.py,283,Property 5,
Python/data_structures/binary_tree/red_black_tree.py,287,All properties were met,
Python/data_structures/binary_tree/red_black_tree.py,309,"If we're already at a leaf, there is no path",
Python/data_structures/binary_tree/red_black_tree.py,314,There are issues with coloring below children nodes,
Python/data_structures/binary_tree/red_black_tree.py,317,The two children have unequal depths,
Python/data_structures/binary_tree/red_black_tree.py,319,"Return the black depth of children, plus one if this node is",
Python/data_structures/binary_tree/red_black_tree.py,320,black,
Python/data_structures/binary_tree/red_black_tree.py,323,Here are functions which are general to all binary search trees,
Python/data_structures/binary_tree/red_black_tree.py,390,Go as far right as possible,
Python/data_structures/binary_tree/red_black_tree.py,400,Go as far left as possible,
Python/data_structures/binary_tree/red_black_tree.py,503,Make a tree to test on,
Python/data_structures/binary_tree/red_black_tree.py,511,Make the right rotation,
Python/data_structures/binary_tree/red_black_tree.py,524,Make the left rotation,
Python/data_structures/binary_tree/red_black_tree.py,578,Found something not in there,
Python/data_structures/binary_tree/red_black_tree.py,581,Didn't find something in there,
Python/data_structures/binary_tree/basic_binary_tree.py,1,"This is the Class Node with a constructor that contains data variable to type data and left, right pointers.",
Python/data_structures/binary_tree/basic_binary_tree.py,8,In Order traversal of the tree,
Python/data_structures/binary_tree/basic_binary_tree.py,26,This is the recursive function to find the depth of binary tree.,
Python/data_structures/binary_tree/basic_binary_tree.py,40,This function returns that is it full binary tree or not?,
Python/data_structures/binary_tree/basic_binary_tree.py,51,Main function for testing.,
Python/data_structures/binary_tree/segment_tree.py,9,approximate the overall size of segment tree with array N,
Python/data_structures/binary_tree/segment_tree.py,32,"update(1, 1, N, a, b, v) for update val v to [a,b]",
Python/data_structures/binary_tree/segment_tree.py,49,"query(1, 1, N, a, b) for query max of [a,b]",
Python/data_structures/binary_tree/lowest_common_ancestor.py,1,https://en.wikipedia.org/wiki/Lowest_common_ancestor,
Python/data_structures/binary_tree/lowest_common_ancestor.py,2,https://en.wikipedia.org/wiki/Breadth-first_search,
Python/data_structures/binary_tree/lowest_common_ancestor.py,14,creating sparse table which saves each nodes 2^i-th parent,
Python/data_structures/binary_tree/lowest_common_ancestor.py,24,"returns lca of node u,v",
Python/data_structures/binary_tree/lowest_common_ancestor.py,26,u must be deeper in the tree than v,
Python/data_structures/binary_tree/lowest_common_ancestor.py,29,making depth of u same as depth of v,
Python/data_structures/binary_tree/lowest_common_ancestor.py,33,at the same depth if u==v that mean lca is found,
Python/data_structures/binary_tree/lowest_common_ancestor.py,36,moving both nodes upwards till lca in found,
Python/data_structures/binary_tree/lowest_common_ancestor.py,40,"returning longest common ancestor of u,v",
Python/data_structures/binary_tree/lowest_common_ancestor.py,44,runs a breadth first search from root node of the tree,
Python/data_structures/binary_tree/lowest_common_ancestor.py,45,sets every nodes direct parent,
Python/data_structures/binary_tree/lowest_common_ancestor.py,46,parent of root node is set to 0,
Python/data_structures/binary_tree/lowest_common_ancestor.py,47,calculates depth of each node from root node,
Python/data_structures/binary_tree/lowest_common_ancestor.py,64,initializing with 0,
Python/data_structures/binary_tree/lowest_common_ancestor.py,66,initializing with -1 which means every node is unvisited,
Python/data_structures/binary_tree/lazy_segment_tree.py,9,approximate the overall size of segment tree with array N,
Python/data_structures/binary_tree/lazy_segment_tree.py,10,create array to store lazy update,
Python/data_structures/binary_tree/lazy_segment_tree.py,11,flag for lazy update,
Python/data_structures/binary_tree/lazy_segment_tree.py,28,update with O(lg N) (Normal segment tree without lazy update will take O(Nlg N) for each update),
Python/data_structures/binary_tree/lazy_segment_tree.py,31,"update(1, 1, N, a, b, v) for update val v to [a,b]",
Python/data_structures/binary_tree/lazy_segment_tree.py,57,query with O(lg N),
Python/data_structures/binary_tree/lazy_segment_tree.py,58,"query(1, 1, N, a, b) for query max of [a,b]",
Python/data_structures/binary_tree/binary_search_tree_recursive.py,571,Prints all the elements of the list in inorder traversal,
Python/data_structures/binary_tree/binary_search_tree_recursive.py,575,Prints all the elements of the list in preorder traversal,
Python/data_structures/binary_tree/binary_search_tree_recursive.py,582,Delete elements,
Python/data_structures/binary_tree/binary_search_tree_recursive.py,600,Prints all the elements of the list in inorder traversal after delete,
Python/data_structures/binary_tree/binary_search_tree_recursive.py,604,Prints all the elements of the list in preorder traversal after delete,
Python/data_structures/binary_tree/number_of_possible_binary_trees.py,31,To kept the Calculated Value,
Python/data_structures/binary_tree/number_of_possible_binary_trees.py,32,"Since C(n, k) = C(n, n-k)",
Python/data_structures/binary_tree/number_of_possible_binary_trees.py,35,"Calculate C(n,k)",
Python/data_structures/linked_list/is_palindrome.py,4,split the list to two parts,
Python/data_structures/linked_list/is_palindrome.py,10,Don't forget here! But forget still works!,
Python/data_structures/linked_list/is_palindrome.py,11,reverse the second part,
Python/data_structures/linked_list/is_palindrome.py,18,compare two parts,
Python/data_structures/linked_list/is_palindrome.py,19,second part has the same or one less node,
Python/data_structures/linked_list/is_palindrome.py,32,1. Get the midpoint (slow),
Python/data_structures/linked_list/is_palindrome.py,37,2. Push the second half into the stack,
Python/data_structures/linked_list/is_palindrome.py,43,3. Comparison,
Python/data_structures/linked_list/from_sequence.py,1,Recursive Prorgam to create a Linked List from a sequence and,
Python/data_structures/linked_list/from_sequence.py,2,print a string representation of it.,
Python/data_structures/linked_list/from_sequence.py,25,if elements_list is empty,
Python/data_structures/linked_list/from_sequence.py,29,Set first element as Head,
Python/data_structures/linked_list/from_sequence.py,32,Loop through elements from position 1,
Python/data_structures/linked_list/skip_list.py,132,Nodes with refer or should refer to output node,
Python/data_structures/linked_list/skip_list.py,138,i < node.level - When node level is lesser than `i` decrement `i`.,
Python/data_structures/linked_list/skip_list.py,139,node.forward[i].key < key - Jumping to node with key value higher,
Python/data_structures/linked_list/skip_list.py,140,or equal to searched key would result,
Python/data_structures/linked_list/skip_list.py,141,in skipping searched key.,
Python/data_structures/linked_list/skip_list.py,144,Each leftmost node (relative to searched node) will potentially have to be updated.,
Python/data_structures/linked_list/skip_list.py,147,Note that we were inserting values in reverse order.,
Python/data_structures/linked_list/skip_list.py,149,len(node.forward) != 0 - If current node doesn't contain any further,
Python/data_structures/linked_list/skip_list.py,150,references then searched key is not present.,
Python/data_structures/linked_list/skip_list.py,151,node.forward[0].key == key - Next node key should be equal to search key,
Python/data_structures/linked_list/skip_list.py,152,if key is present.,
Python/data_structures/linked_list/skip_list.py,177,Remove or replace all references to removed node.,
Python/data_structures/linked_list/skip_list.py,204,After level increase we have to add additional nodes to head.,
Python/data_structures/linked_list/skip_list.py,212,Change references to pass through new node.,
Python/data_structures/linked_list/skip_list.py,408,Repeat test 100 times due to the probabilistic nature of skip list,
Python/data_structures/linked_list/skip_list.py,409,random values == random bugs,
Python/data_structures/linked_list/swap_nodes.py,21,adding nodes,
Python/data_structures/linked_list/swap_nodes.py,27,swapping nodes,
Python/data_structures/linked_list/doubly_linked_list.py,9,making main class named linked list,
Python/data_structures/linked_list/doubly_linked_list.py,15,Create a new link with a value attached to it,
Python/data_structures/linked_list/doubly_linked_list.py,16,Set the first element added to be the tail,
Python/data_structures/linked_list/doubly_linked_list.py,19,newLink <-- currenthead(head),
Python/data_structures/linked_list/doubly_linked_list.py,20,newLink <--> currenthead(head),
Python/data_structures/linked_list/doubly_linked_list.py,21,newLink(head) <--> oldhead,
Python/data_structures/linked_list/doubly_linked_list.py,25,oldHead <--> 2ndElement(head),
Python/data_structures/linked_list/doubly_linked_list.py,26,oldHead --> 2ndElement(head) nothing pointing at it so the old head will be removed,
Python/data_structures/linked_list/doubly_linked_list.py,28,if empty linked list,
Python/data_structures/linked_list/doubly_linked_list.py,33,currentTail(tail)    newLink -->,
Python/data_structures/linked_list/doubly_linked_list.py,34,currentTail(tail) --> newLink -->,
Python/data_structures/linked_list/doubly_linked_list.py,35,currentTail(tail) <--> newLink -->,
Python/data_structures/linked_list/doubly_linked_list.py,36,oldTail <--> newLink(tail) -->,
Python/data_structures/linked_list/doubly_linked_list.py,40,2ndLast(tail) <--> oldTail --> None,
Python/data_structures/linked_list/doubly_linked_list.py,41,2ndlast(tail) --> None,
Python/data_structures/linked_list/doubly_linked_list.py,47,Find the position to delete,
Python/data_structures/linked_list/doubly_linked_list.py,56,Before: 1 <--> 2(current) <--> 3,
Python/data_structures/linked_list/doubly_linked_list.py,57,1 --> 3,
Python/data_structures/linked_list/doubly_linked_list.py,58,1 <--> 3,
Python/data_structures/linked_list/doubly_linked_list.py,60,Will return True if the list is empty,
Python/data_structures/linked_list/doubly_linked_list.py,63,Prints contents of the list,
Python/data_structures/linked_list/doubly_linked_list.py,72,This points to the link in front of the new link,
Python/data_structures/linked_list/doubly_linked_list.py,73,This points to the link behind the new link,
Python/data_structures/linked_list/print_reverse.py,1,Program to print the elements of a linked list in reverse,
Python/data_structures/linked_list/print_reverse.py,24,if elements_list is empty,
Python/data_structures/linked_list/print_reverse.py,28,Set first element as Head,
Python/data_structures/linked_list/print_reverse.py,31,Loop through elements from position 1,
Python/data_structures/linked_list/print_reverse.py,41,If reached end of the List,
Python/data_structures/linked_list/print_reverse.py,45,Recurse,
Python/data_structures/linked_list/deque_doubly.py,41,Create new_node by setting it's prev.link -> header,
Python/data_structures/linked_list/deque_doubly.py,42,setting it's next.link -> trailer,
Python/data_structures/linked_list/deque_doubly.py,87,"DEque Insert Operations (At the front, At the end)",
Python/data_structures/linked_list/deque_doubly.py,103,"DEqueu Remove Operations (At the front, At the end)",
Python/data_structures/linked_list/singly_linked_list.py,1,create a Node,
Python/data_structures/linked_list/singly_linked_list.py,3,given data,
Python/data_structures/linked_list/singly_linked_list.py,4,given next to None,
Python/data_structures/linked_list/singly_linked_list.py,6,string representation of a Node,
Python/data_structures/linked_list/singly_linked_list.py,12,initialize head to None,
Python/data_structures/linked_list/singly_linked_list.py,16,"if this is first node, call insert_head",
Python/data_structures/linked_list/singly_linked_list.py,19,traverse to last node,
Python/data_structures/linked_list/singly_linked_list.py,21,create node & link to tail,
Python/data_structures/linked_list/singly_linked_list.py,24,create a new node,
Python/data_structures/linked_list/singly_linked_list.py,26,link new_node to head,
Python/data_structures/linked_list/singly_linked_list.py,27,make NewNode as head,
Python/data_structures/linked_list/singly_linked_list.py,29,print every node data,
Python/data_structures/linked_list/singly_linked_list.py,35,delete from head,
Python/data_structures/linked_list/singly_linked_list.py,42,delete from tail,
Python/data_structures/linked_list/singly_linked_list.py,45,if head is the only Node in the Linked List,
Python/data_structures/linked_list/singly_linked_list.py,48,find the 2nd last element,
Python/data_structures/linked_list/singly_linked_list.py,50,(2nd last element).next = None and temp = last element,
Python/data_structures/linked_list/singly_linked_list.py,55,return True if head is none,
Python/data_structures/linked_list/singly_linked_list.py,62,Store the current node's next node.,
Python/data_structures/linked_list/singly_linked_list.py,64,Make the current node's next point backwards,
Python/data_structures/linked_list/singly_linked_list.py,66,Make the previous node be the current node,
Python/data_structures/linked_list/singly_linked_list.py,68,Make the current node the next node (to progress iteration),
Python/data_structures/linked_list/singly_linked_list.py,70,Return prev in order to put the head at the end,
Python/data_structures/linked_list/singly_linked_list.py,73,String representation/visualization of a Linked Lists,
Python/data_structures/linked_list/singly_linked_list.py,79,END represents end of the LinkedList,
Python/data_structures/linked_list/singly_linked_list.py,82,Indexing Support. Used to get a node at particular position,
Python/data_structures/linked_list/singly_linked_list.py,86,If LinkedList is empty,
Python/data_structures/linked_list/singly_linked_list.py,90,Move Forward 'index' times,
Python/data_structures/linked_list/singly_linked_list.py,92,If the LinkedList ends before reaching specified node,
Python/data_structures/linked_list/singly_linked_list.py,98,Used to change the data of a particular node,
Python/data_structures/linked_list/singly_linked_list.py,101,If list is empty,
Python/data_structures/hashing/hash_table.py,1,!/usr/bin/env python3,
Python/data_structures/hashing/hash_table.py,64,hell's pointers D: don't DRY ;/,
Python/data_structures/hashing/double_hash.py,1,!/usr/bin/env python3,
Python/data_structures/hashing/double_hash.py,21,gt = bigger than,
Python/data_structures/hashing/quadratic_probing.py,1,!/usr/bin/env python3,
Python/data_structures/hashing/number_theory/prime_numbers.py,1,!/usr/bin/env python3,
Python/data_structures/trie/trie.py,11,Mapping from char to TrieNode,
Python/data_structures/trie/trie.py,58,If word does not exist,
Python/data_structures/trie/trie.py,65,If char not in current trie node,
Python/data_structures/trie/trie.py,68,Flag to check if node can be deleted,
Python/data_structures/trie/trie.py,96,"print_words(root, """")",
Python/data_structures/heap/min_heap.py,1,Min head data structure,
Python/data_structures/heap/min_heap.py,2,with decrease key functionality - in O(log(n)) time,
Python/data_structures/heap/min_heap.py,66,this is min-heapify method,
Python/data_structures/heap/min_heap.py,135,USAGE,
Python/data_structures/heap/min_heap.py,143,Use one of these two ways to generate Min-Heap,
Python/data_structures/heap/min_heap.py,145,Generating Min-Heap from array,
Python/data_structures/heap/min_heap.py,148,Generating Min-Heap by Insert method,
Python/data_structures/heap/min_heap.py,149,myMinHeap.insert(a),
Python/data_structures/heap/min_heap.py,150,myMinHeap.insert(b),
Python/data_structures/heap/min_heap.py,151,myMinHeap.insert(x),
Python/data_structures/heap/min_heap.py,152,myMinHeap.insert(r),
Python/data_structures/heap/min_heap.py,153,myMinHeap.insert(e),
Python/data_structures/heap/min_heap.py,155,Before,
Python/data_structures/heap/min_heap.py,163,After,
Python/data_structures/heap/heap.py,1,!/usr/bin/python3,
Python/data_structures/heap/binomial_heap.py,17,Number of nodes in left subtree,
Python/data_structures/heap/binomial_heap.py,135,Empty heaps corner cases,
Python/data_structures/heap/binomial_heap.py,143,Update size,
Python/data_structures/heap/binomial_heap.py,146,Update min.node,
Python/data_structures/heap/binomial_heap.py,149,Merge,
Python/data_structures/heap/binomial_heap.py,151,Order roots by left_subtree_size,
Python/data_structures/heap/binomial_heap.py,161,Insert links between them,
Python/data_structures/heap/binomial_heap.py,166,Consecutively merge roots with same left_tree_size,
Python/data_structures/heap/binomial_heap.py,176,Neighbouring Nodes,
Python/data_structures/heap/binomial_heap.py,180,Merging trees,
Python/data_structures/heap/binomial_heap.py,183,Updating links,
Python/data_structures/heap/binomial_heap.py,192,Updating self.bottom_root,
Python/data_structures/heap/binomial_heap.py,197,Update other,
Python/data_structures/heap/binomial_heap.py,202,Return the merged heap,
Python/data_structures/heap/binomial_heap.py,214,Create new node,
Python/data_structures/heap/binomial_heap.py,217,Update size,
Python/data_structures/heap/binomial_heap.py,220,update min_node,
Python/data_structures/heap/binomial_heap.py,223,Put new_node as a bottom_root in heap,
Python/data_structures/heap/binomial_heap.py,228,Consecutively merge roots with same left_tree_size,
Python/data_structures/heap/binomial_heap.py,235,Next node,
Python/data_structures/heap/binomial_heap.py,238,Merge,
Python/data_structures/heap/binomial_heap.py,241,Update Links,
Python/data_structures/heap/binomial_heap.py,260,"assert not self.isEmpty(), ""Empty Heap""",
Python/data_structures/heap/binomial_heap.py,262,Save minimal value,
Python/data_structures/heap/binomial_heap.py,265,Last element in heap corner case,
Python/data_structures/heap/binomial_heap.py,267,Update size,
Python/data_structures/heap/binomial_heap.py,270,Update bottom root,
Python/data_structures/heap/binomial_heap.py,273,Update min_node,
Python/data_structures/heap/binomial_heap.py,277,No right subtree corner case,
Python/data_structures/heap/binomial_heap.py,278,The structure of the tree implies that this should be the bottom root,
Python/data_structures/heap/binomial_heap.py,279,and there is at least one other root,
Python/data_structures/heap/binomial_heap.py,281,Update size,
Python/data_structures/heap/binomial_heap.py,284,Update bottom root,
Python/data_structures/heap/binomial_heap.py,288,Update min_node,
Python/data_structures/heap/binomial_heap.py,296,General case,
Python/data_structures/heap/binomial_heap.py,297,Find the BinomialHeap of the right subtree of min_node,
Python/data_structures/heap/binomial_heap.py,303,"Size, min_node and bottom_root",
Python/data_structures/heap/binomial_heap.py,309,Corner case of single root on top left path,
Python/data_structures/heap/binomial_heap.py,314,"print(""Single root, multiple nodes case"")",
Python/data_structures/heap/binomial_heap.py,316,Remaining cases,
Python/data_structures/heap/binomial_heap.py,317,Construct heap of right subtree,
Python/data_structures/heap/binomial_heap.py,322,Update size,
Python/data_structures/heap/binomial_heap.py,325,Neighbour nodes,
Python/data_structures/heap/binomial_heap.py,329,Initialize new bottom_root and min_node,
Python/data_structures/heap/binomial_heap.py,333,Update links of previous_node and search below for new min_node and,
Python/data_structures/heap/binomial_heap.py,334,bottom_root,
Python/data_structures/heap/binomial_heap.py,338,Update bottom_root and search for min_node below,
Python/data_structures/heap/binomial_heap.py,348,Search for new min_node above min_node,
Python/data_structures/heap/binomial_heap.py,354,Merge heaps,
Python/data_structures/heap/binomial_heap.py,365,Find top root,
Python/data_structures/heap/binomial_heap.py,369,preorder,
Python/data_structures/heap/binomial_heap.py,397,Unit Tests,
Python/data_structures/queue/linked_queue.py,53,the queue contains just the single element,
Python/data_structures/queue/linked_queue.py,57,"not empty, so we add it to the rear of the queue",
Python/data_structures/queue/linked_queue.py,67,"""remove"" element by having front point to the next one",
Python/data_structures/queue/double_ended_queue.py,1,Python code to demonstrate working of,
Python/data_structures/queue/double_ended_queue.py,2,"extend(), extendleft(), rotate(), reverse()",
Python/data_structures/queue/double_ended_queue.py,4,"importing ""collections"" for deque operations",
Python/data_structures/queue/double_ended_queue.py,7,initializing deque,
Python/data_structures/queue/double_ended_queue.py,10,using extend() to add numbers to right end,
Python/data_structures/queue/double_ended_queue.py,11,"adds 4,5,6 to right end",
Python/data_structures/queue/double_ended_queue.py,14,printing modified deque,
Python/data_structures/queue/double_ended_queue.py,18,using extendleft() to add numbers to left end,
Python/data_structures/queue/double_ended_queue.py,19,"adds 7,8,9 to right end",
Python/data_structures/queue/double_ended_queue.py,22,printing modified deque,
Python/data_structures/queue/double_ended_queue.py,26,using rotate() to rotate the deque,
Python/data_structures/queue/double_ended_queue.py,27,rotates by 3 to left,
Python/data_structures/queue/double_ended_queue.py,30,printing modified deque,
Python/data_structures/queue/double_ended_queue.py,34,using reverse() to reverse the deque,
Python/data_structures/queue/double_ended_queue.py,37,printing modified deque,
Python/data_structures/queue/double_ended_queue.py,41,get right-end value and eliminate,
Python/data_structures/queue/double_ended_queue.py,47,get left-end value and eliminate,
Python/data_structures/queue/double_ended_queue.py,53,eliminate element searched by value,
Python/data_structures/queue/circular_queue.py,1,Implementation of Circular Queue (using Python lists),
Python/data_structures/queue/circular_queue.py,10,index of the first element,
Python/data_structures/queue/queue_on_list.py,30,self.front-=1,
Python/data_structures/queue/queue_on_list.py,31,self.entries = self.entries[self.front:],
Python/hashes/chaos_machine.py,3,"Chaos Machine (K, t, m)",
Python/hashes/chaos_machine.py,8,Buffer Space (with Parameters Space),
Python/hashes/chaos_machine.py,11,Machine Time,
Python/hashes/chaos_machine.py,18,Choosing Dynamical Systems (All),
Python/hashes/chaos_machine.py,20,Evolution Parameter,
Python/hashes/chaos_machine.py,23,Control Theory: Orbit Change,
Python/hashes/chaos_machine.py,26,Control Theory: Trajectory Change,
Python/hashes/chaos_machine.py,29,Modification (Transition Function) - Jumps,
Python/hashes/chaos_machine.py,31,Saving to Parameters Space,
Python/hashes/chaos_machine.py,33,Logistic Map,
Python/hashes/chaos_machine.py,37,Machine Time,
Python/hashes/chaos_machine.py,44,PRNG (Xorshift by George Marsaglia),
Python/hashes/chaos_machine.py,51,Choosing Dynamical Systems (Increment),
Python/hashes/chaos_machine.py,54,Evolution (Time Length),
Python/hashes/chaos_machine.py,56,Variables (Position + Parameters),
Python/hashes/chaos_machine.py,60,Modification (Transition Function) - Flow,
Python/hashes/chaos_machine.py,64,Choosing Chaotic Data,
Python/hashes/chaos_machine.py,68,Machine Time,
Python/hashes/chaos_machine.py,82,,
Python/hashes/chaos_machine.py,84,Initialization,
Python/hashes/chaos_machine.py,87,Pushing Data (Input),
Python/hashes/chaos_machine.py,94,for controlling,
Python/hashes/chaos_machine.py,97,Pulling Data (Output),
Python/hashes/sha1.py,28,hashlib is only used inside the Test class,
Python/hashes/sha1.py,74,@staticmethod,
Python/hashes/sha1.py,145,unittest.main(),
Python/hashes/sha1.py,156,In any case hash input should be a bytestring,
Python/hashes/hamming_code.py,1,Author: João Gustavo A. Amorim & Gabriel Kunz,
Python/hashes/hamming_code.py,2,Author email: joaogustavoamorim@gmail.com and gabriel-kunz@uergs.edu.br,
Python/hashes/hamming_code.py,3,Coding date:  apr 2019,
Python/hashes/hamming_code.py,4,Black: True,
Python/hashes/hamming_code.py,47,Imports,
Python/hashes/hamming_code.py,50,Functions of binary conversion--------------------------------------,
Python/hashes/hamming_code.py,69,Functions of hamming code-------------------------------------------,
Python/hashes/hamming_code.py,88,sorted information data for the size of the output data,
Python/hashes/hamming_code.py,90,data position template + parity,
Python/hashes/hamming_code.py,92,parity bit counter,
Python/hashes/hamming_code.py,94,counter position of data bits,
Python/hashes/hamming_code.py,98,"Performs a template of bit positions - who should be given,",
Python/hashes/hamming_code.py,99,and who should be parity,
Python/hashes/hamming_code.py,109,Sorts the data to the new output size,
Python/hashes/hamming_code.py,116,Calculates parity,
Python/hashes/hamming_code.py,117,parity bit counter,
Python/hashes/hamming_code.py,119,Bit counter one for a given parity,
Python/hashes/hamming_code.py,121,counter to control the loop reading,
Python/hashes/hamming_code.py,140,Mount the message,
Python/hashes/hamming_code.py,141,parity bit counter,
Python/hashes/hamming_code.py,157,data position template + parity,
Python/hashes/hamming_code.py,159,Parity bit counter,
Python/hashes/hamming_code.py,161,Counter p data bit reading,
Python/hashes/hamming_code.py,163,list of parity received,
Python/hashes/hamming_code.py,168,"Performs a template of bit positions - who should be given,",
Python/hashes/hamming_code.py,169,and who should be parity,
Python/hashes/hamming_code.py,179,Sorts the data to the new output size,
Python/hashes/hamming_code.py,186,-----------calculates the parity with the data,
Python/hashes/hamming_code.py,191,sorted information data for the size of the output data,
Python/hashes/hamming_code.py,193,Data position feedback + parity,
Python/hashes/hamming_code.py,195,Parity bit counter,
Python/hashes/hamming_code.py,197,Counter p data bit reading,
Python/hashes/hamming_code.py,201,"Performs a template position of bits - who should be given,",
Python/hashes/hamming_code.py,202,and who should be parity,
Python/hashes/hamming_code.py,212,Sorts the data to the new output size,
Python/hashes/hamming_code.py,219,Calculates parity,
Python/hashes/hamming_code.py,220,parity bit counter,
Python/hashes/hamming_code.py,222,Bit counter one for a certain parity,
Python/hashes/hamming_code.py,224,Counter to control loop reading,
Python/hashes/hamming_code.py,243,Mount the message,
Python/hashes/hamming_code.py,244,Parity bit counter,
Python/hashes/hamming_code.py,260,---------------------------------------------------------------------,
Python/hashes/md5.py,201,f = (B & C) | (not32(B) & D),
Python/hashes/md5.py,205,f = (D & B) | (not32(D) & C),
Python/strings/check_pangram.py,1,Created by sarathkaul on 12/11/19,
Python/strings/check_pangram.py,19,Replacing all the Whitespaces in our sentence,
Python/strings/remove_duplicate.py,1,Created by sarathkaul on 14/11/19,
Python/strings/boyer_moore_search.py,60,searches pattern in text and returns index positions,
Python/strings/boyer_moore_search.py,70,shifting index lgtm [py/multiple-definition],
Python/strings/aho-corasick.py,70,returns a dict with keywords and list of its occurrences,
Python/strings/reverse_words.py,1,Created by sarathkaul on 18/11/19,
Python/strings/reverse_words.py,2,Edited by farnswj1 on 4/4/20,
Python/strings/upper.py,16,converting to ascii value int value and checking to see if char is a lower letter,
Python/strings/upper.py,17,if it is a capital letter it is getting shift by 32 which makes it a capital case letter,
Python/strings/word_occurrence.py,1,Created by sarathkaul on 17/11/19,
Python/strings/word_occurrence.py,15,Creating a dictionary containing count of each word,
Python/strings/rabin_karp.py,1,Numbers of alphabet which we call base,
Python/strings/rabin_karp.py,3,Modulus to hash a string,
Python/strings/rabin_karp.py,30,Calculating the hash of pattern and substring of text,
Python/strings/rabin_karp.py,43,Calculate the https://en.wikipedia.org/wiki/Rolling_hash,
Python/strings/rabin_karp.py,56,Test 1),
Python/strings/rabin_karp.py,62,Test 2),
Python/strings/rabin_karp.py,67,Test 3),
Python/strings/rabin_karp.py,72,Test 4),
Python/strings/rabin_karp.py,77,Test 5),
Python/strings/knuth_morris_pratt.py,16,1) Construct the failure array,
Python/strings/knuth_morris_pratt.py,19,2) Step through text searching for pattern,
Python/strings/knuth_morris_pratt.py,20,"index into text, pattern",
Python/strings/knuth_morris_pratt.py,27,if this is a prefix in our pattern,
Python/strings/knuth_morris_pratt.py,28,just go back far enough to continue,
Python/strings/knuth_morris_pratt.py,57,Test 1),
Python/strings/knuth_morris_pratt.py,63,Test 2),
Python/strings/knuth_morris_pratt.py,68,Test 3),
Python/strings/knuth_morris_pratt.py,73,Test 4),
Python/strings/knuth_morris_pratt.py,78,Test 5),
Python/strings/lower.py,19,converting to ascii value int value and checking to see if char is a capital letter,
Python/strings/lower.py,20,if it is a capital letter it is getting shift by 32 which makes it a lower case letter,
Python/strings/levenshtein_distance.py,37,The longer word should come first,
Python/strings/levenshtein_distance.py,52,"Calculate insertions, deletions and substitutions",
Python/strings/levenshtein_distance.py,57,Get the minimum to append to the current row,
Python/strings/levenshtein_distance.py,60,Store the previous row,
Python/strings/levenshtein_distance.py,63,Returns the last element (distance),
Python/strings/manacher.py,19,"if input_string is ""aba"" than new_input_string become ""a|b|a""",
Python/strings/manacher.py,23,"append each character + ""|"" in new_string for range(0, length-1)",
Python/strings/manacher.py,26,append last character,
Python/strings/manacher.py,29,we will store the starting and ending of previous furthest ending palindromic substring,
Python/strings/manacher.py,32,length[i] shows the length of palindromic substring with center i,
Python/strings/manacher.py,35,for each character in new_string find corresponding palindromic string,
Python/strings/manacher.py,47,does this string is ending after the previously explored end (that is r) ?,
Python/strings/manacher.py,48,if yes the update the new r to the last index of this,
Python/strings/manacher.py,53,update max_length and start position,
Python/strings/manacher.py,58,create that string,
Python/project_euler/problem_56/sol1.py,18,RETURN the MAXIMUM from the list of SUMs of the list of INT converted from STR of BASE raised to the POWER,
Python/project_euler/problem_56/sol1.py,28,Tests,
Python/project_euler/problem_03/sol3.py,60,print(solution(int(input().strip()))),
Python/project_euler/problem_04/sol2.py,23,3 digit numbers range from 999 down to 100,
Python/project_euler/problem_04/sol1.py,22,fetches the next number,
Python/project_euler/problem_04/sol1.py,25,converts number into string.,
Python/project_euler/problem_04/sol1.py,28,checks whether 'strNumber' is a palindrome.,
Python/project_euler/problem_04/sol1.py,33,if 'number' is a product of two 3-digit numbers,
Python/project_euler/problem_04/sol1.py,34,then number is the answer otherwise fetch next number.,
Python/project_euler/problem_17/sol1.py,27,"number of letters in zero, one, two, ..., nineteen (0 for zero since it's",
Python/project_euler/problem_17/sol1.py,28,never said aloud),
Python/project_euler/problem_17/sol1.py,30,"number of letters in twenty, thirty, ..., ninety (0 for numbers less than",
Python/project_euler/problem_17/sol1.py,31,20 due to inconsistency in teens),
Python/project_euler/problem_17/sol1.py,39,"add number of letters for ""n hundred""",
Python/project_euler/problem_17/sol1.py,43,"add number of letters for ""and"" if number is not multiple",
Python/project_euler/problem_17/sol1.py,44,of 100,
Python/project_euler/problem_17/sol1.py,48,"add number of letters for one, two, three, ..., nineteen",
Python/project_euler/problem_17/sol1.py,49,(could be combined with below if not for inconsistency in,
Python/project_euler/problem_17/sol1.py,50,teens),
Python/project_euler/problem_17/sol1.py,53,"add number of letters for twenty, twenty one, ..., ninety",
Python/project_euler/problem_17/sol1.py,54,nine,
Python/project_euler/problem_10/sol3.py,56,import doctest,
Python/project_euler/problem_10/sol3.py,57,doctest.testmod(),
Python/project_euler/problem_551/sol1.py,42,ds_b - digitsum(b),
Python/project_euler/problem_551/sol1.py,59,find and make the largest jump without going over,
Python/project_euler/problem_551/sol1.py,68,"since the difference between jumps is cached, add c",
Python/project_euler/problem_551/sol1.py,86,keep doing smaller jumps,
Python/project_euler/problem_551/sol1.py,94,"would be too small a jump, just compute sequential terms instead",
Python/project_euler/problem_551/sol1.py,101,keep jumps sorted by # of terms skipped,
Python/project_euler/problem_551/sol1.py,108,cache the jump for this value digitsum(b) and c,
Python/project_euler/problem_551/sol1.py,122,note: a_i -> b * 10^k + c,
Python/project_euler/problem_551/sol1.py,123,ds_b -> digitsum(b),
Python/project_euler/problem_551/sol1.py,124,ds_c -> digitsum(c),
Python/project_euler/problem_11/sol2.py,43,right,
Python/project_euler/problem_11/sol2.py,50,down,
Python/project_euler/problem_11/sol2.py,57,diagonal 1,
Python/project_euler/problem_11/sol2.py,64,diagonal 2,
Python/project_euler/problem_11/sol1.py,38,"Check vertically, horizontally, diagonally at the same time (only works",
Python/project_euler/problem_11/sol1.py,39,for nxn grid),
Python/project_euler/problem_11/sol1.py,45,Left-to-right diagonal (\) product,
Python/project_euler/problem_11/sol1.py,54,Right-to-left diagonal(/) product,
Python/project_euler/problem_29/solution.py,40,maximum limit,
Python/project_euler/problem_29/solution.py,44,calculates the current power,
Python/project_euler/problem_29/solution.py,45,adds the result to the set,
Python/project_euler/problem_20/sol1.py,24,Removing the last_digit from the given number,
Python/project_euler/problem_27/problem_27_sol1.py,53,"length, a, b",
Python/project_euler/problem_42/solution42.py,19,Precomputes a list of the 100 first triangular numbers,
Python/project_euler/problem_01/sol2.py,24,sum of an A.P.,
Python/project_euler/problem_30/soln.py,34,--> 443839,
Python/project_euler/problem_15/sol1.py,38,"middle entry of odd rows starting at row 3 is the solution for n = 1,",
Python/project_euler/problem_15/sol1.py,39,"2, 3,...",
Python/project_euler/problem_12/sol1.py,32,check if n is perfect square,
Python/scheduling/first_come_first_served.py,1,Implementation of First Come First Served scheduling algorithm,
Python/scheduling/first_come_first_served.py,2,In this Algorithm we just care about the order that the processes arrived,
Python/scheduling/first_come_first_served.py,3,without carring about their duration time,
Python/scheduling/first_come_first_served.py,4,"https://en.wikipedia.org/wiki/Scheduling_(computing)#First_come,_first_served",
Python/scheduling/first_come_first_served.py,76,process id's,
Python/scheduling/first_come_first_served.py,79,ensure that we actually have processes,
Python/scheduling/first_come_first_served.py,84,duration time of all processes,
Python/scheduling/first_come_first_served.py,87,ensure we can match each id to a duration time,
Python/scheduling/first_come_first_served.py,92,get the waiting times and the turnaround times,
Python/scheduling/first_come_first_served.py,96,get the average times,
Python/scheduling/first_come_first_served.py,100,print all the results,
Python/traversals/binary_tree_traversals.py,170,iteration version,
Python/traversals/binary_tree_traversals.py,191,"start from root node, find its left child",
Python/traversals/binary_tree_traversals.py,195,end of while means current node doesn't have left child,
Python/traversals/binary_tree_traversals.py,197,start to traverse its right child,
Python/traversals/binary_tree_traversals.py,249,"to find the reversed order of post order, store it in stack2",
Python/traversals/binary_tree_traversals.py,256,pop up from stack2 will be the post order,
Python/conversions/decimal_to_octal.py,5,Modified from:,
Python/conversions/decimal_to_octal.py,6,https://github.com/TheAlgorithms/Javascript/blob/master/Conversions/DecimalToOctal.js,
Python/conversions/decimal_to_octal.py,21,basically /= 8 without remainder if any,
Python/conversions/decimal_to_octal.py,22,This formatting removes trailing '.0' from `octal`.,
Python/conversions/decimal_to_octal.py,29,= 2,
Python/conversions/decimal_to_octal.py,31,= 10,
Python/conversions/decimal_to_octal.py,33,= 101,
Python/conversions/decimal_to_octal.py,35,= 330,
Python/conversions/decimal_to_octal.py,37,= 1000,
Python/conversions/decimal_to_hexadecimal.py,3,set decimal value for each hexadecimal digit,
Python/file_transfer/receive_file.py,2,Import socket module,
Python/file_transfer/receive_file.py,4,Create a socket object,
Python/file_transfer/receive_file.py,5,Get local machine name,
Python/file_transfer/receive_file.py,19,Write data to a file,
Python/file_transfer/send_file.py,2,Import socket module,
Python/file_transfer/send_file.py,5,Set this to False if you wish to continuously accept connections,
Python/file_transfer/send_file.py,9,Reserve a port for your service.,
Python/file_transfer/send_file.py,10,Create a socket object,
Python/file_transfer/send_file.py,11,Get local machine name,
Python/file_transfer/send_file.py,12,Bind to the port,
Python/file_transfer/send_file.py,13,Now wait for client connection.,
Python/file_transfer/send_file.py,18,Establish connection with client.,
Python/file_transfer/send_file.py,34,This is to make sure that the program doesn't hang while testing,
Python/divide_and_conquer/inversions.py,119,"if P[1] > Q[j], then P[k] > Q[k] for all  i < k <= len(P)",
Python/divide_and_conquer/inversions.py,120,These are all inversions. The claim emerges from the,
Python/divide_and_conquer/inversions.py,121,property that P is sorted.,
Python/divide_and_conquer/inversions.py,140,this arr has 8 inversions:,
Python/divide_and_conquer/inversions.py,141,"(10, 2), (10, 1), (10, 5), (10, 5), (10, 2), (2, 1), (5, 2), (5, 2)",
Python/divide_and_conquer/inversions.py,150,testing an array with zero inversion (a sorted arr_1),
Python/divide_and_conquer/inversions.py,159,an empty list should also have zero inversions,
Python/divide_and_conquer/convex_hull.py,281,"point[i], point[j], point[k] all lie on a straight line",
Python/divide_and_conquer/convex_hull.py,282,if point[k] is to the left of point[i] or it's to the,
Python/divide_and_conquer/convex_hull.py,283,"right of point[j], then point[i], point[j] cannot be",
Python/divide_and_conquer/convex_hull.py,284,part of the convex hull of A,
Python/divide_and_conquer/convex_hull.py,332,divide all the points into an upper hull and a lower hull,
Python/divide_and_conquer/convex_hull.py,333,the left most point and the right most point are definitely,
Python/divide_and_conquer/convex_hull.py,334,members of the convex hull by definition.,
Python/divide_and_conquer/convex_hull.py,335,"use these two anchors to divide all the points into two hulls,",
Python/divide_and_conquer/convex_hull.py,336,an upper hull and a lower hull.,
Python/divide_and_conquer/convex_hull.py,338,all points to the left (above) the line joining the extreme points belong to the upper hull,
Python/divide_and_conquer/convex_hull.py,339,all points to the right (below) the line joining the extreme points below to the lower hull,
Python/divide_and_conquer/convex_hull.py,340,ignore all points on the line joining the extreme points since they cannot be part of the,
Python/divide_and_conquer/convex_hull.py,341,convex hull,
Python/divide_and_conquer/convex_hull.py,417,the convex set of points is,
Python/divide_and_conquer/convex_hull.py,418,"[(0, 0), (0, 3), (1, -3), (2, -4), (3, 0), (3, 3)]",
Python/divide_and_conquer/max_subarray_sum.py,60,base case: array has only one element,
Python/divide_and_conquer/max_subarray_sum.py,64,Recursion,
Python/divide_and_conquer/closest_pair_of_points.py,97,base case,
Python/divide_and_conquer/closest_pair_of_points.py,101,recursion,
Python/divide_and_conquer/strassen_matrix_multiplication.py,91,construct the new matrix from our 4 quadrants,
Python/divide_and_conquer/strassen_matrix_multiplication.py,122,Adding zeros to the matrices so that the arrays dimensions are the same and also power of 2,
Python/divide_and_conquer/strassen_matrix_multiplication.py,137,Removing the additional zeros,
Python/divide_and_conquer/mergesort.py,8,change sign for Descending order,
Python/divide_and_conquer/mergesort.py,36,"print(""ms1"",a,b,m)",
Python/divide_and_conquer/mergesort.py,38,"print(""ms2"",a,m+1,e)",
Python/divide_and_conquer/mergesort.py,40,"print(""m"",a,b,m,e)",
Python/machine_learning/scoring_functions.py,17,Mean Absolute Error,
Python/machine_learning/scoring_functions.py,38,Mean Squared Error,
Python/machine_learning/scoring_functions.py,60,Root Mean Squared Error,
Python/machine_learning/scoring_functions.py,82,Root Mean Square Logarithmic Error,
Python/machine_learning/scoring_functions.py,109,Mean Bias Deviation,
Python/machine_learning/scoring_functions.py,133,"print(numerator, denumerator)",
Python/machine_learning/linear_discriminant_analysis.py,51,Make a training dataset drawn from a gaussian distribution,
Python/machine_learning/linear_discriminant_analysis.py,72,Make corresponding Y flags to detecting classes,
Python/machine_learning/linear_discriminant_analysis.py,92,Calculate the class means,
Python/machine_learning/linear_discriminant_analysis.py,104,the sum of all items divided by number of instances,
Python/machine_learning/linear_discriminant_analysis.py,108,Calculate the class probabilities,
Python/machine_learning/linear_discriminant_analysis.py,121,number of instances in specific class divided by number of all instances,
Python/machine_learning/linear_discriminant_analysis.py,125,Calculate the variance,
Python/machine_learning/linear_discriminant_analysis.py,140,An empty list to store all squared differences,
Python/machine_learning/linear_discriminant_analysis.py,141,iterate over number of elements in items,
Python/machine_learning/linear_discriminant_analysis.py,143,for loop iterates over number of elements in inner layer of items,
Python/machine_learning/linear_discriminant_analysis.py,145,appending squared differences to 'squared_diff' list,
Python/machine_learning/linear_discriminant_analysis.py,148,one divided by (the number of all instances - number of classes) multiplied by,
Python/machine_learning/linear_discriminant_analysis.py,149,sum of all squared differences,
Python/machine_learning/linear_discriminant_analysis.py,150,Number of classes in dataset,
Python/machine_learning/linear_discriminant_analysis.py,154,Making predictions,
Python/machine_learning/linear_discriminant_analysis.py,195,An empty list to store generated discriminant values of all items in dataset for,
Python/machine_learning/linear_discriminant_analysis.py,196,each class,
Python/machine_learning/linear_discriminant_analysis.py,198,for loop iterates over number of elements in list,
Python/machine_learning/linear_discriminant_analysis.py,200,for loop iterates over number of inner items of each element,
Python/machine_learning/linear_discriminant_analysis.py,202,to store all discriminant values of each item as a list,
Python/machine_learning/linear_discriminant_analysis.py,203,for loop iterates over number of classes we have in our dataset,
Python/machine_learning/linear_discriminant_analysis.py,205,appending values of discriminants for each class to 'temp' list,
Python/machine_learning/linear_discriminant_analysis.py,211,appending discriminant values of each item to 'results' list,
Python/machine_learning/linear_discriminant_analysis.py,217,Calculating Accuracy,
Python/machine_learning/linear_discriminant_analysis.py,241,iterate over one element of each list at a time (zip mode),
Python/machine_learning/linear_discriminant_analysis.py,242,prediction is correct if actual Y value equals to predicted Y value,
Python/machine_learning/linear_discriminant_analysis.py,244,percentage of accuracy equals to number of correct predictions divided by number,
Python/machine_learning/linear_discriminant_analysis.py,245,of all data and multiplied by 100,
Python/machine_learning/linear_discriminant_analysis.py,249,Main Function,
Python/machine_learning/linear_discriminant_analysis.py,257,Trying to get number of classes,
Python/machine_learning/linear_discriminant_analysis.py,278,Default value for standard deviation of dataset,
Python/machine_learning/linear_discriminant_analysis.py,279,Trying to get the value of standard deviation,
Python/machine_learning/linear_discriminant_analysis.py,303,Trying to get number of instances in classes and theirs means to generate,
Python/machine_learning/linear_discriminant_analysis.py,304,dataset,
Python/machine_learning/linear_discriminant_analysis.py,305,An empty list to store instance counts of classes in dataset,
Python/machine_learning/linear_discriminant_analysis.py,325,An empty list to store values of user-entered means of classes,
Python/machine_learning/linear_discriminant_analysis.py,342,print out the number of instances in classes in separated line,
Python/machine_learning/linear_discriminant_analysis.py,347,print out mean values of classes separated line,
Python/machine_learning/linear_discriminant_analysis.py,352,Generating training dataset drawn from gaussian distribution,
Python/machine_learning/linear_discriminant_analysis.py,360,Generating Ys to detecting corresponding classes,
Python/machine_learning/linear_discriminant_analysis.py,365,Calculating the value of actual mean for each class,
Python/machine_learning/linear_discriminant_analysis.py,367,for loop iterates over number of elements in 'actual_means' list and print,
Python/machine_learning/linear_discriminant_analysis.py,368,out them in separated line,
Python/machine_learning/linear_discriminant_analysis.py,373,Calculating the value of probabilities for each class,
Python/machine_learning/linear_discriminant_analysis.py,378,for loop iterates over number of elements in 'probabilities' list and print,
Python/machine_learning/linear_discriminant_analysis.py,379,out them in separated line,
Python/machine_learning/linear_discriminant_analysis.py,384,Calculating the values of variance for each class,
Python/machine_learning/linear_discriminant_analysis.py,389,Predicting Y values,
Python/machine_learning/linear_discriminant_analysis.py,390,storing predicted Y values in 'pre_indexes' variable,
Python/machine_learning/linear_discriminant_analysis.py,394,Calculating Accuracy of the model,
Python/machine_learning/gradient_descent.py,6,"List of input, output pairs",
Python/machine_learning/gradient_descent.py,101,Tune these values to set a tolerance value for predicted output,
Python/machine_learning/random_forest_regressor.py,1,Random Forest Regressor Example,
Python/machine_learning/random_forest_regressor.py,17,Load Boston house price dataset,
Python/machine_learning/random_forest_regressor.py,21,Split dataset into train and test data,
Python/machine_learning/random_forest_regressor.py,22,features,
Python/machine_learning/random_forest_regressor.py,28,Random Forest Regressor,
Python/machine_learning/random_forest_regressor.py,32,Predict target for test data,
Python/machine_learning/random_forest_regressor.py,36,Error printing,
Python/machine_learning/k_nearest_neighbours.py,43,List of distances of all points from the point to be classified,
Python/machine_learning/k_nearest_neighbours.py,48,Choosing 'k' points with the least distances.,
Python/machine_learning/k_nearest_neighbours.py,50,Most commonly occurring class among them,
Python/machine_learning/k_nearest_neighbours.py,51,is the class into which the point is classified,
Python/machine_learning/knn_sklearn.py,5,Load iris file,
Python/machine_learning/knn_sklearn.py,13,Train set e Test set,
Python/machine_learning/knn_sklearn.py,18,KNN,
Python/machine_learning/knn_sklearn.py,23,new array to test,
Python/machine_learning/k_means_clust.py,57,useful for obtaining consistent results,
Python/machine_learning/k_means_clust.py,59,number of data points,
Python/machine_learning/k_means_clust.py,61,"Pick K indices from range [0, N).",
Python/machine_learning/k_means_clust.py,64,"Keep centroids as dense format, as many entries will be nonzero due to averaging.",
Python/machine_learning/k_means_clust.py,65,"As long as at least one document in a cluster contains a word,",
Python/machine_learning/k_means_clust.py,66,it will carry a nonzero weight in the TF-IDF vector of the centroid.,
Python/machine_learning/k_means_clust.py,78,Compute distances between each data point and the set of centroids:,
Python/machine_learning/k_means_clust.py,79,Fill in the blank (RHS only),
Python/machine_learning/k_means_clust.py,82,Compute cluster assignments for each data point:,
Python/machine_learning/k_means_clust.py,83,Fill in the blank (RHS only),
Python/machine_learning/k_means_clust.py,92,Select all data points that belong to cluster i. Fill in the blank (RHS only),
Python/machine_learning/k_means_clust.py,94,Compute the mean of the data points. Fill in the blank (RHS only),
Python/machine_learning/k_means_clust.py,107,Select all data points that belong to cluster i. Fill in the blank (RHS only),
Python/machine_learning/k_means_clust.py,110,check if i-th cluster is non-empty,
Python/machine_learning/k_means_clust.py,111,Compute distances from centroid to data points (RHS only),
Python/machine_learning/k_means_clust.py,149,1. Make cluster assignments using nearest centroids,
Python/machine_learning/k_means_clust.py,152,"2. Compute a new centroid for each of the k clusters, averaging all data points assigned to that cluster.",
Python/machine_learning/k_means_clust.py,155,"Check for convergence: if none of the assignments changed, stop",
Python/machine_learning/k_means_clust.py,162,Print number of new assignments,
Python/machine_learning/k_means_clust.py,172,Record heterogeneity convergence metric,
Python/machine_learning/k_means_clust.py,174,YOUR CODE HERE,
Python/machine_learning/k_means_clust.py,183,Mock test below,
Python/machine_learning/k_means_clust.py,184,change to true to run this test case.,
Python/machine_learning/logistic_regression.py,1,!/usr/bin/python,
Python/machine_learning/logistic_regression.py,3,Logistic Regression from scratch,
Python/machine_learning/logistic_regression.py,5,In[62]:,
Python/machine_learning/logistic_regression.py,7,In[63]:,
Python/machine_learning/logistic_regression.py,9,importing all the required libraries,
Python/machine_learning/logistic_regression.py,17,"get_ipython().run_line_magic('matplotlib', 'inline')",
Python/machine_learning/logistic_regression.py,22,In[67]:,
Python/machine_learning/logistic_regression.py,24,sigmoid function or logistic function is used as a hypothesis function in classification problems,
Python/machine_learning/logistic_regression.py,40,"here alpha is the learning rate, X is the feature matrix,y is the target matrix",
Python/machine_learning/logistic_regression.py,48,updating the weights,
Python/machine_learning/logistic_regression.py,53,printing the loss after every 100 iterations,
Python/machine_learning/logistic_regression.py,57,In[68]:,
Python/machine_learning/logistic_regression.py,66,printing the theta i.e our weights vector,
Python/machine_learning/logistic_regression.py,71,predicting the value of probability from the logistic regression algorithm,
Python/machine_learning/support_vector_machines.py,6,different functions implementing different types of SVM's,
Python/machine_learning/support_vector_machines.py,20,"svm.SVC(C=1.0, kernel='rbf', degree=3, gamma=0.0, coef0=0.0, shrinking=True, probability=False,tol=0.001, cache_size=200, class_weight=None, verbose=False, max_iter=-1, random_state=None)",
Python/machine_learning/support_vector_machines.py,21,"various parameters like ""kernel"",""gamma"",""C"" can effectively tuned for a given machine learning model.",
Python/machine_learning/support_vector_machines.py,41,splitting the dataset to test and train,
Python/machine_learning/support_vector_machines.py,45,any of the 3 types of SVM can be used,
Python/machine_learning/support_vector_machines.py,46,"current_model=SVC(train_x, train_y)",
Python/machine_learning/support_vector_machines.py,47,"current_model=NuSVC(train_x, train_y)",
Python/machine_learning/sequential_minimum_optimization.py,78,Calculate alphas using SMO algorithm,
Python/machine_learning/sequential_minimum_optimization.py,84,"1: Find alpha1, alpha2",
Python/machine_learning/sequential_minimum_optimization.py,92,2: calculate new alpha2 and new alpha1,
Python/machine_learning/sequential_minimum_optimization.py,103,3: update threshold(b),
Python/machine_learning/sequential_minimum_optimization.py,127,"4:  update error value,here we only calculate those non-bound samples' error",
Python/machine_learning/sequential_minimum_optimization.py,138,"if i1 or i2 is non-bound,update there error value to zero",
Python/machine_learning/sequential_minimum_optimization.py,144,Predict test samles,
Python/machine_learning/sequential_minimum_optimization.py,164,Check if alpha violate KKT condition,
Python/machine_learning/sequential_minimum_optimization.py,173,Get value calculated from kernel function,
Python/machine_learning/sequential_minimum_optimization.py,175,"for test samples,use Kernel function",
Python/machine_learning/sequential_minimum_optimization.py,178,"for train samples,Kernel values have been saved in matrix",
Python/machine_learning/sequential_minimum_optimization.py,182,Get sample's error,
Python/machine_learning/sequential_minimum_optimization.py,190,get from error data,
Python/machine_learning/sequential_minimum_optimization.py,193,get by g(xi) - yi,
Python/machine_learning/sequential_minimum_optimization.py,199,"Calculate Kernel matrix of all possible i1,i2 ,saving time",
Python/machine_learning/sequential_minimum_optimization.py,209,Predict test sample's tag,
Python/machine_learning/sequential_minimum_optimization.py,223,Choose alpha1 and alpha2,
Python/machine_learning/sequential_minimum_optimization.py,239,all sample,
Python/machine_learning/sequential_minimum_optimization.py,245,non-bound sample,
Python/machine_learning/sequential_minimum_optimization.py,300,Get the new alpha2 and new alpha1,
Python/machine_learning/sequential_minimum_optimization.py,306,calculate L and H  which bound the new alpha2,
Python/machine_learning/sequential_minimum_optimization.py,315,calculate eta,
Python/machine_learning/sequential_minimum_optimization.py,321,select the new alpha2 which could get the minimal objectives,
Python/machine_learning/sequential_minimum_optimization.py,324,a2_new has a boundary,
Python/machine_learning/sequential_minimum_optimization.py,336,way 1,
Python/machine_learning/sequential_minimum_optimization.py,365,a1_new has a boundary too,
Python/machine_learning/sequential_minimum_optimization.py,376,Normalise data using min_max way,
Python/machine_learning/sequential_minimum_optimization.py,460,0: download dataset and load into pandas' dataframe,
Python/machine_learning/sequential_minimum_optimization.py,473,1: pre-processing data,
Python/machine_learning/sequential_minimum_optimization.py,479,2: dividing data into train_data data and test_data data,
Python/machine_learning/sequential_minimum_optimization.py,483,"3: choose kernel function,and set initial alphas to zero(optional)",
Python/machine_learning/sequential_minimum_optimization.py,487,4: calculating best alphas using SMO algorithm and predict test_data samples,
Python/machine_learning/sequential_minimum_optimization.py,499,5: check accuracy,
Python/machine_learning/sequential_minimum_optimization.py,510,change stdout,
Python/machine_learning/sequential_minimum_optimization.py,593,Plot contour map which represents the partition boundary,
Python/machine_learning/sequential_minimum_optimization.py,603,Plot all train samples,
Python/machine_learning/sequential_minimum_optimization.py,613,Plot support vectors,
Python/machine_learning/linear_regression.py,29,This is for removing the labels from the list,
Python/machine_learning/random_forest_classifier.py,1,Random Forest Classifier Example,
Python/machine_learning/random_forest_classifier.py,17,Load Iris dataset,
Python/machine_learning/random_forest_classifier.py,20,Split dataset into train and test data,
Python/machine_learning/random_forest_classifier.py,21,features,
Python/machine_learning/random_forest_classifier.py,27,Random Forest Classifier,
Python/machine_learning/random_forest_classifier.py,31,Display Confusion Matrix of Classifier,
Python/machine_learning/polymonial_regression.py,4,Importing the dataset,
Python/machine_learning/polymonial_regression.py,12,Splitting the dataset into the Training set and Test set,
Python/machine_learning/polymonial_regression.py,18,Fitting Polynomial Regression to the dataset,
Python/machine_learning/polymonial_regression.py,28,Visualizing the Polymonial Regression results,
Python/machine_learning/polymonial_regression.py,42,Predicting a new result with Polymonial Regression,
Python/machine_learning/polymonial_regression.py,44,output should be 132148.43750003,
Python/backtracking/n_queens.py,84,"n=int(input(""The no. of queens""))",
Python/backtracking/sudoku.py,12,assigning initial values to the grid,
Python/backtracking/sudoku.py,25,a grid with no solution,
Python/backtracking/sudoku.py,139,make a copy of grid so that you can compare with the unmodified grid,
Python/other/password_generator.py,23,ALTERNATIVE METHODS,
Python/other/password_generator.py,24,ctbi= characters that must be in password,
Python/other/password_generator.py,25,i= how many letters or characters the password length will be,
Python/other/password_generator.py,27,"Password generator = full boot with random_number, random_letters, and",
Python/other/password_generator.py,28,random_character FUNCTIONS,
Python/other/password_generator.py,29,Put your code here...,
Python/other/password_generator.py,33,"chars = ctbi + random_letters(ascii_letters, i / 3 + remainder) + random_number(digits, i / 3) + random_characters(punctuation, i / 3)",
Python/other/password_generator.py,44,"random is a generalised function for letters, characters and numbers",
Python/other/password_generator.py,52,Put your code here...,
Python/other/password_generator.py,56,Put your code here...,
Python/other/password_generator.py,60,Put your code here...,
Python/other/fischer_yates_shuffle.py,1,!/usr/bin/python,
Python/other/palindrome.py,1,Algorithms to determine if a string is palindrome,
Python/other/palindrome.py,11,"""a man a plan a canal panama""",
Python/other/palindrome.py,13,Ensure our test data is valid,
Python/other/frequency_finder.py,1,Frequency Finder,
Python/other/frequency_finder.py,3,frequency taken from http://en.wikipedia.org/wiki/Letter_frequency,
Python/other/primelib.py,50,precondition,
Python/other/primelib.py,57,0 and 1 are none primes.,
Python/other/primelib.py,63,if 'number' divisible by 'divisor' then sets 'status',
Python/other/primelib.py,64,of false and break up the loop.,
Python/other/primelib.py,69,precondition,
Python/other/primelib.py,75,------------------------------------------,
Python/other/primelib.py,88,precondition,
Python/other/primelib.py,91,beginList: contains all natural numbers from 2 up to N,
Python/other/primelib.py,94,this list will be returns.,
Python/other/primelib.py,96,actual sieve of erathostenes,
Python/other/primelib.py,104,filters actual prime numbers.,
Python/other/primelib.py,107,precondition,
Python/other/primelib.py,113,--------------------------------,
Python/other/primelib.py,123,precondition,
Python/other/primelib.py,128,iterates over all numbers between 2 up to N+1,
Python/other/primelib.py,129,if a number is prime then appends to list 'ans',
Python/other/primelib.py,136,precondition,
Python/other/primelib.py,142,-----------------------------------------,
Python/other/primelib.py,151,precondition,
Python/other/primelib.py,154,this list will be returns of the function.,
Python/other/primelib.py,156,potential prime number factors.,
Python/other/primelib.py,166,if 'number' not prime then builds the prime factorization of 'number',
Python/other/primelib.py,180,precondition,
Python/other/primelib.py,186,-----------------------------------------,
Python/other/primelib.py,195,precondition,
Python/other/primelib.py,202,prime factorization of 'number',
Python/other/primelib.py,207,precondition,
Python/other/primelib.py,213,----------------------------------------------,
Python/other/primelib.py,222,precondition,
Python/other/primelib.py,229,prime factorization of 'number',
Python/other/primelib.py,234,precondition,
Python/other/primelib.py,240,----------------------,
Python/other/primelib.py,249,precondition,
Python/other/primelib.py,256,------------------------,
Python/other/primelib.py,265,precondition,
Python/other/primelib.py,272,------------------------,
Python/other/primelib.py,282,precondition,
Python/other/primelib.py,287,this list will returned,
Python/other/primelib.py,289,creates a list of prime numbers between 2 up to 'number',
Python/other/primelib.py,293,run variable for while-loops.,
Python/other/primelib.py,297,exit variable. for break up the loops,
Python/other/primelib.py,315,precondition,
Python/other/primelib.py,327,----------------------------------------------,
Python/other/primelib.py,337,precondition,
Python/other/primelib.py,353,precondition,
Python/other/primelib.py,361,----------------------------------------------------,
Python/other/primelib.py,371,precondition,
Python/other/primelib.py,379,actual answer that will be return.,
Python/other/primelib.py,381,"for kgV (x,1)",
Python/other/primelib.py,384,builds the prime factorization of 'number1' and 'number2',
Python/other/primelib.py,397,captured numbers int both 'primeFac1' and 'primeFac2',
Python/other/primelib.py,399,iterates through primeFac1,
Python/other/primelib.py,421,iterates through primeFac2,
Python/other/primelib.py,433,precondition,
Python/other/primelib.py,441,----------------------------------,
Python/other/primelib.py,451,precondition,
Python/other/primelib.py,455,this variable holds the answer,
Python/other/primelib.py,461,counts to the next number,
Python/other/primelib.py,463,if ans not prime then,
Python/other/primelib.py,464,runs to the next prime number.,
Python/other/primelib.py,468,precondition,
Python/other/primelib.py,476,---------------------------------------------------,
Python/other/primelib.py,487,precondition,
Python/other/primelib.py,492,jump to the next number,
Python/other/primelib.py,494,this list will be returns.,
Python/other/primelib.py,496,if number is not prime then,
Python/other/primelib.py,497,fetch the next prime number.,
Python/other/primelib.py,507,fetch the next prime number.,
Python/other/primelib.py,511,precondition,
Python/other/primelib.py,516,'ans' contains not 'pNumber1' and 'pNumber2' !,
Python/other/primelib.py,520,----------------------------------------------------,
Python/other/primelib.py,529,precondition,
Python/other/primelib.py,532,will be returned.,
Python/other/primelib.py,539,precondition,
Python/other/primelib.py,545,----------------------------------------------------,
Python/other/primelib.py,554,precondition,
Python/other/primelib.py,561,precondition,
Python/other/primelib.py,568,"summed all divisors up to 'number' (exclusive), hence [:-1]",
Python/other/primelib.py,572,------------------------------------------------------------,
Python/other/primelib.py,582,precondition,
Python/other/primelib.py,589,build the greatest common divisor of numerator and denominator.,
Python/other/primelib.py,592,precondition,
Python/other/primelib.py,602,-----------------------------------------------------------------,
Python/other/primelib.py,611,precondition,
Python/other/primelib.py,614,this will be return.,
Python/other/primelib.py,622,-------------------------------------------------------------------,
Python/other/primelib.py,631,precondition,
Python/other/primelib.py,636,this will be return,
Python/other/word_patterns.py,44,"Done!  9,581 word patterns found in 0.58 seconds.",
Python/other/dijkstra_bankers_algorithm.py,1,A Python implementation of the Banker's Algorithm in Operating Systems using,
Python/other/dijkstra_bankers_algorithm.py,2,Processes and Resources,
Python/other/dijkstra_bankers_algorithm.py,3,{,
Python/other/dijkstra_bankers_algorithm.py,4,"""Author: ""Biney Kingsley (bluedistro@github.io), bineykingsley36@gmail.com"",",
Python/other/dijkstra_bankers_algorithm.py,5,"""Date"": 28-10-2018",
Python/other/dijkstra_bankers_algorithm.py,6,},
Python/other/dijkstra_bankers_algorithm.py,168,get the original index of the process from ind_ctrl db,
Python/other/dijkstra_bankers_algorithm.py,173,remove the process run from stack,
Python/other/dijkstra_bankers_algorithm.py,175,update available/freed resources stack,
Python/other/euclidean_gcd.py,1,https://en.wikipedia.org/wiki/Euclidean_algorithm,
Python/other/sierpinski_triangle.py,1,!/usr/bin/python,
Python/other/sierpinski_triangle.py,31,size of triangle,
Python/other/sierpinski_triangle.py,35,find midpoint,
Python/other/magicdiamondpattern.py,1,Python program for generating diamond pattern in Python 3.7+,
Python/other/magicdiamondpattern.py,3,Function to print upper half of diamond (pyramid),
Python/other/magicdiamondpattern.py,10,printing spaces,
Python/other/magicdiamondpattern.py,12,printing stars,
Python/other/magicdiamondpattern.py,17,Function to print lower half of diamond (pyramid),
Python/other/magicdiamondpattern.py,24,printing stars,
Python/other/magicdiamondpattern.py,27,printing spaces,
Python/other/magicdiamondpattern.py,31,"Function to print complete diamond pattern of ""*""",
Python/other/magicdiamondpattern.py,40,upper half,
Python/other/magicdiamondpattern.py,41,lower half,
Python/other/least_recently_used.py,9,Cache store of keys,
Python/other/least_recently_used.py,10,References of the keys in cache,
Python/other/least_recently_used.py,11,Maximum capacity of cache,
Python/other/game_of_life.py,66,"print(r-1,r+2,c-1,c+2)",
Python/other/game_of_life.py,72,cleaning memory as we move on.,
Python/other/game_of_life.py,79,finding dead or alive neighbours count.,
Python/other/game_of_life.py,87,handling duplicate entry for focus pt.,
Python/other/game_of_life.py,93,running the rules of game here.,
Python/other/game_of_life.py,114,main working structure of this module.,
Python/other/game_of_life.py,127,do nothing.,
Python/other/linear_congruential_generator.py,33,Show the LCG in action.,
Python/other/sdes.py,70,key generation,
Python/other/sdes.py,83,encryption,
Python/other/sdes.py,91,decryption,
Python/other/activity_selection.py,6,n --> Total number of activities,
Python/other/activity_selection.py,7,start[]--> An array that contains start time of all activities,
Python/other/activity_selection.py,8,finish[] --> An array that contains finish time of all activities,
Python/other/activity_selection.py,22,The first activity is always selected,
Python/other/activity_selection.py,26,Consider rest of the activities,
Python/other/activity_selection.py,29,If this activity has start time greater than,
Python/other/activity_selection.py,30,or equal to the finish time of previously,
Python/other/activity_selection.py,31,"selected activity, then select it",
Python/other/activity_selection.py,37,Driver program to test above function,
Python/other/integeration_by_simpson_approx.py,15,constants,
Python/other/integeration_by_simpson_approx.py,16,the more the number of steps the more accurate,
Python/other/integeration_by_simpson_approx.py,106,just applying the formula of simpson for approximate integraion written in,
Python/other/integeration_by_simpson_approx.py,107,mentioned article in first comment of this file and above this function,
Python/dynamic_programming/subset_generation.py,1,Python program to print all subset combinations of n element in given set of r element.,
Python/dynamic_programming/subset_generation.py,2,arr[]  ---> Input Array,
Python/dynamic_programming/subset_generation.py,3,data[] ---> Temporary array to store current combination,
Python/dynamic_programming/subset_generation.py,4,start & end ---> Staring and Ending indexes in arr[],
Python/dynamic_programming/subset_generation.py,5,index  ---> Current index in data[],
Python/dynamic_programming/subset_generation.py,6,r ---> Size of a combination to be printed,
Python/dynamic_programming/subset_generation.py,8,"Current combination is ready to be printed,",
Python/dynamic_programming/subset_generation.py,9,print it,
Python/dynamic_programming/subset_generation.py,15,When no more elements are there to put in data[],
Python/dynamic_programming/subset_generation.py,18,"current is included, put next at next location",
Python/dynamic_programming/subset_generation.py,21,"current is excluded, replace it with",
Python/dynamic_programming/subset_generation.py,22,"next (Note that i+1 is passed, but",
Python/dynamic_programming/subset_generation.py,23,index is not changed),
Python/dynamic_programming/subset_generation.py,25,The main function that prints all combinations,
Python/dynamic_programming/subset_generation.py,26,of size r in arr[] of size n. This function,
Python/dynamic_programming/subset_generation.py,27,mainly uses combinationUtil(),
Python/dynamic_programming/subset_generation.py,31,A temporary array to store all combination one by one,
Python/dynamic_programming/subset_generation.py,33,Print all combination using temporary array 'data[]',
Python/dynamic_programming/subset_generation.py,37,Driver function to check for above function,
Python/dynamic_programming/subset_generation.py,40,This code is contributed by Ambuj sahu,
Python/dynamic_programming/rod_cutting.py,147,"length(max_rev) = n + 1, to accommodate for the revenue obtainable from a rod of length 0.",
Python/dynamic_programming/rod_cutting.py,186,"the best revenue comes from cutting the rod into 6 pieces, each",
Python/dynamic_programming/rod_cutting.py,187,of length 1 resulting in a revenue of 6 * 6 = 36.,
Python/dynamic_programming/fast_fibonacci.py,1,!/usr/bin/python,
Python/dynamic_programming/fast_fibonacci.py,10,returns F(n),
Python/dynamic_programming/fast_fibonacci.py,11,noqa: E999 This syntax is Python 3 only,
Python/dynamic_programming/fast_fibonacci.py,17,"returns (F(n), F(n-1))",
Python/dynamic_programming/fast_fibonacci.py,18,noqa: E999 This syntax is Python 3 only,
Python/dynamic_programming/fast_fibonacci.py,20,"(F(0), F(1))",
Python/dynamic_programming/fast_fibonacci.py,23,F(2n) = F(n)[2F(n+1) − F(n)],
Python/dynamic_programming/fast_fibonacci.py,24,F(2n+1) = F(n+1)^2+F(n)^2,
Python/dynamic_programming/abbreviation.py,37,"print(abbr(""daBcd"", ""ABC""))  # expect True",
Python/dynamic_programming/longest_common_subsequence.py,31,find the length of strings,
Python/dynamic_programming/longest_common_subsequence.py,39,declaring the array for storing the dp values,
Python/dynamic_programming/longest_common_subsequence.py,79,"print(""len ="", ln, "", sub-sequence ="", subseq)",
Python/dynamic_programming/knapsack.py,16,a global dp table for knapsack,
Python/dynamic_programming/knapsack.py,120,"for the current item i at a maximum weight j to be part of an optimal subset,",
Python/dynamic_programming/knapsack.py,121,"the optimal value at (i, j) must be greater than the optimal value at (i-1, j).",
Python/dynamic_programming/knapsack.py,122,where i - 1 means considering only the previous items at the given maximum weight,
Python/dynamic_programming/knapsack.py,142,switched the n and w,
Python/dynamic_programming/knapsack.py,144,testing the dynamic programming problem with example,
Python/dynamic_programming/knapsack.py,145,the optimal subset for the above example are items 3 and 4,
Python/dynamic_programming/matrix_chain_order.py,31,Print order of matrix with Ai as Matrix,
Python/dynamic_programming/matrix_chain_order.py,45,Size of matrix created from above array will be,
Python/dynamic_programming/matrix_chain_order.py,46,30*35 35*15 15*5 5*10 10*20 20*25,
Python/dynamic_programming/optimal_binary_search_tree.py,1,!/usr/bin/env python3,
Python/dynamic_programming/optimal_binary_search_tree.py,3,This Python program implements an optimal binary search tree (abbreviated BST),
Python/dynamic_programming/optimal_binary_search_tree.py,4,building dynamic programming algorithm that delivers O(n^2) performance.,
Python/dynamic_programming/optimal_binary_search_tree.py,5,,
Python/dynamic_programming/optimal_binary_search_tree.py,6,The goal of the optimal BST problem is to build a low-cost BST for a,
Python/dynamic_programming/optimal_binary_search_tree.py,7,"given set of nodes, each with its own key and frequency. The frequency",
Python/dynamic_programming/optimal_binary_search_tree.py,8,of the node is defined as how many time the node is being searched.,
Python/dynamic_programming/optimal_binary_search_tree.py,9,The search cost of binary search tree is given by this formula:,
Python/dynamic_programming/optimal_binary_search_tree.py,10,,
Python/dynamic_programming/optimal_binary_search_tree.py,11,"cost(1, n) = sum{i = 1 to n}((depth(node_i) + 1) * node_i_freq)",
Python/dynamic_programming/optimal_binary_search_tree.py,12,,
Python/dynamic_programming/optimal_binary_search_tree.py,13,where n is number of nodes in the BST. The characteristic of low-cost,
Python/dynamic_programming/optimal_binary_search_tree.py,14,BSTs is having a faster overall search time than other implementations.,
Python/dynamic_programming/optimal_binary_search_tree.py,15,The reason for their fast search time is that the nodes with high,
Python/dynamic_programming/optimal_binary_search_tree.py,16,frequencies will be placed near the root of the tree while the nodes,
Python/dynamic_programming/optimal_binary_search_tree.py,17,with low frequencies will be placed near the leaves of the tree thus,
Python/dynamic_programming/optimal_binary_search_tree.py,18,reducing search time in the most frequent instances.,
Python/dynamic_programming/optimal_binary_search_tree.py,59,root does not have a parent,
Python/dynamic_programming/optimal_binary_search_tree.py,95,"Tree nodes must be sorted first, the code below sorts the keys in",
Python/dynamic_programming/optimal_binary_search_tree.py,96,increasing order and rearrange its frequencies accordingly.,
Python/dynamic_programming/optimal_binary_search_tree.py,104,This 2D array stores the overall tree cost (which's as minimized as possible);,
Python/dynamic_programming/optimal_binary_search_tree.py,105,"for a single key, cost is equal to frequency of the key.",
Python/dynamic_programming/optimal_binary_search_tree.py,107,sum[i][j] stores the sum of key frequencies between i and j inclusive in nodes array,
Python/dynamic_programming/optimal_binary_search_tree.py,109,stores tree roots that will be used later for constructing binary search tree,
Python/dynamic_programming/optimal_binary_search_tree.py,112,l is an interval length,
Python/dynamic_programming/optimal_binary_search_tree.py,116,"set the value to ""infinity""",
Python/dynamic_programming/optimal_binary_search_tree.py,119,Apply Knuth's optimization,
Python/dynamic_programming/optimal_binary_search_tree.py,120,"Loop without optimization: for r in range(i, j + 1):",
Python/dynamic_programming/optimal_binary_search_tree.py,121,r is a temporal root,
Python/dynamic_programming/optimal_binary_search_tree.py,122,optimal cost for left subtree,
Python/dynamic_programming/optimal_binary_search_tree.py,123,optimal cost for right subtree,
Python/dynamic_programming/optimal_binary_search_tree.py,139,A sample binary search tree,
Python/dynamic_programming/coin_change.py,24,table[i] represents the number of ways to get to amount i,
Python/dynamic_programming/coin_change.py,27,There is exactly 1 way to get to zero(You pick no coins).,
Python/dynamic_programming/coin_change.py,30,Pick all coins one by one and update table[] values,
Python/dynamic_programming/coin_change.py,31,after the index greater than or equal to the value of the,
Python/dynamic_programming/coin_change.py,32,picked coin,
Python/dynamic_programming/longest_sub_array.py,13,"we need a list not a string, so do something to change the type",
Python/dynamic_programming/longest_increasing_subsequence.py,13,This function is recursive,
Python/dynamic_programming/longest_increasing_subsequence.py,28,"If the array contains only one element, we return it (it's the stop condition of recursion)",
Python/dynamic_programming/longest_increasing_subsequence.py,30,Else,
Python/dynamic_programming/bitmask.py,18,total no of tasks (N),
Python/dynamic_programming/bitmask.py,20,DP table will have a dimension of (2^M)*N,
Python/dynamic_programming/bitmask.py,21,initially all values are set to -1,
Python/dynamic_programming/bitmask.py,26,stores the list of persons for each task,
Python/dynamic_programming/bitmask.py,28,final_mask is used to check if all persons are included by setting all bits to 1,
Python/dynamic_programming/bitmask.py,33,"if mask == self.finalmask all persons are distributed tasks, return 1",
Python/dynamic_programming/bitmask.py,37,"if not everyone gets the task and no more tasks are available, return 0",
Python/dynamic_programming/bitmask.py,41,if case already considered,
Python/dynamic_programming/bitmask.py,45,Number of ways when we don't this task in the arrangement,
Python/dynamic_programming/bitmask.py,48,now assign the tasks one by one to all possible persons and recursively assign for the remaining tasks.,
Python/dynamic_programming/bitmask.py,52,if p is already given a task,
Python/dynamic_programming/bitmask.py,56,assign this task to p and change the mask value. And recursively assign tasks with the new mask value.,
Python/dynamic_programming/bitmask.py,59,save the value.,
Python/dynamic_programming/bitmask.py,66,Store the list of persons for each task,
Python/dynamic_programming/bitmask.py,71,"call the function to fill the DP table, final answer is stored in dp[0][1]",
Python/dynamic_programming/bitmask.py,77,total no of tasks (the value of N),
Python/dynamic_programming/bitmask.py,79,the list of tasks that can be done by M persons.,
Python/dynamic_programming/factorial.py,1,Factorial of a number using memoization,
Python/dynamic_programming/factorial.py,22,uncomment the following to see how recalculations are avoided,
Python/dynamic_programming/factorial.py,23,print(result),
Python/dynamic_programming/factorial.py,27,factorial of num,
Python/dynamic_programming/factorial.py,28,uncomment the following to see how recalculations are avoided,
Python/dynamic_programming/factorial.py,29,result=[-1]*10,
Python/dynamic_programming/factorial.py,30,result[0]=result[1]=1,
Python/dynamic_programming/factorial.py,31,print(factorial(5)),
Python/dynamic_programming/factorial.py,32,print(factorial(3)),
Python/dynamic_programming/factorial.py,33,print(factorial(7)),
Python/dynamic_programming/sum_of_subset.py,8,a subset value says 1 if that subset sum can be formed else 0,
Python/dynamic_programming/sum_of_subset.py,9,initially no subsets can be formed hence False/0,
Python/dynamic_programming/sum_of_subset.py,12,"for each arr value, a sum of zero(0) can be formed by not taking any element hence True/1",
Python/dynamic_programming/sum_of_subset.py,16,sum is not zero and set is empty then false,
Python/dynamic_programming/sum_of_subset.py,27,uncomment to print the subset,
Python/dynamic_programming/sum_of_subset.py,28,for i in range(arrLen+1):,
Python/dynamic_programming/sum_of_subset.py,29,print(subset[i]),
Python/dynamic_programming/edit_distance.py,74,first string is empty,
Python/dynamic_programming/edit_distance.py,76,second string is empty,
Python/dynamic_programming/edit_distance.py,80,last character of both substing is equal,
Python/dynamic_programming/floyd_warshall.py,5,"a graph with Node 0,1,...,N-1",
Python/dynamic_programming/floyd_warshall.py,9,adjacency matrix for weight,
Python/dynamic_programming/floyd_warshall.py,12,dp[i][j] stores minimum distance from i to j,
Python/dynamic_programming/fractional_knapsack_2.py,1,https://en.wikipedia.org/wiki/Continuous_knapsack_problem,
Python/dynamic_programming/fractional_knapsack_2.py,2,https://www.guru99.com/fractional-knapsack-problem-greedy.html,
Python/dynamic_programming/fractional_knapsack_2.py,3,https://medium.com/walkinthecode/greedy-algorithm-fractional-knapsack-problem-9aba1daecc93,
Python/dynamic_programming/climbing_stairs.py,1,!/usr/bin/env python3,
Python/dynamic_programming/longest_increasing_subsequence_o(nlogn).py,1,,
Python/dynamic_programming/longest_increasing_subsequence_o(nlogn).py,2,Author: Aravind Kashyap,
Python/dynamic_programming/longest_increasing_subsequence_o(nlogn).py,3,File: lis.py,
Python/dynamic_programming/longest_increasing_subsequence_o(nlogn).py,4,comments: This programme outputs the Longest Strictly Increasing Subsequence in O(NLogN),
Python/dynamic_programming/longest_increasing_subsequence_o(nlogn).py,5,Where N is the Number of elements in the list,
Python/dynamic_programming/longest_increasing_subsequence_o(nlogn).py,6,,
Python/neural_network/perceptron.py,48,number of columns in dataset,
Python/neural_network/perceptron.py,88,"print('Epoch: \n',epoch_count)",
Python/neural_network/perceptron.py,90,if you want control the epoch or just by error,
Python/neural_network/perceptron.py,94,if epoch_count > self.epoch_number or not error:,
Python/neural_network/back_propagation_neural_network.py,1,!/usr/bin/python,
Python/neural_network/back_propagation_neural_network.py,60,activation function may be sigmoid or linear,
Python/neural_network/back_propagation_neural_network.py,71,input layer,
Python/neural_network/back_propagation_neural_network.py,81,i * i 维,
Python/neural_network/back_propagation_neural_network.py,91,upgrade: the Negative gradient direction,
Python/neural_network/back_propagation_neural_network.py,94,updates the weights and bias according to learning rate (0.3 if undefined),
Python/neural_network/back_propagation_neural_network.py,138,forward propagation,
Python/neural_network/back_propagation_neural_network.py,145,back propagation: the input_layer does not upgrade,
Python/neural_network/back_propagation_neural_network.py,161,vector (shape is the same as _ydata.shape),
Python/neural_network/convolution_neural_network.py,53,save model dict with pickle,
Python/neural_network/convolution_neural_network.py,77,read saved model,
Python/neural_network/convolution_neural_network.py,89,create model instance,
Python/neural_network/convolution_neural_network.py,91,modify model parameter,
Python/neural_network/convolution_neural_network.py,107,convolution process,
Python/neural_network/convolution_neural_network.py,111,"get the data slice of original image data, data_focus",
Python/neural_network/convolution_neural_network.py,119,"calculate the feature map of every single kernel, and saved as list of matrix",
Python/neural_network/convolution_neural_network.py,135,expanding the data slice to One dimenssion,
Python/neural_network/convolution_neural_network.py,143,pooling process,
Python/neural_network/convolution_neural_network.py,157,average pooling,
Python/neural_network/convolution_neural_network.py,160,max pooling,
Python/neural_network/convolution_neural_network.py,167,expanding three dimension data to one dimension list,
Python/neural_network/convolution_neural_network.py,178,expanding matrix to one dimension list,
Python/neural_network/convolution_neural_network.py,212,model traning,
Python/neural_network/convolution_neural_network.py,223,print('------------Learning Image: %d--------------'%p),
Python/neural_network/convolution_neural_network.py,248,--------------Model Leaning ------------------------,
Python/neural_network/convolution_neural_network.py,249,calculate error and gradient---------------,
Python/neural_network/convolution_neural_network.py,267,weight and threshold learning process---------,
Python/neural_network/convolution_neural_network.py,268,convolution layer,
Python/neural_network/convolution_neural_network.py,281,all connected layer,
Python/neural_network/convolution_neural_network.py,286,calculate the sum error of all single image,
Python/neural_network/convolution_neural_network.py,289,"print('   ----Teach      ',data_teach)",
Python/neural_network/convolution_neural_network.py,290,"print('   ----BP_output  ',bp_out3)",
Python/neural_network/convolution_neural_network.py,311,model predict,
Python/neural_network/convolution_neural_network.py,337,return the data of image after convoluting process so we can check it out,
Python/digital_image_processing/change_contrast.py,31,Load image,
Python/digital_image_processing/change_contrast.py,33,Change contrast to 170,
Python/digital_image_processing/index_calculation.py,1,Author: João Gustavo A. Amorim,
Python/digital_image_processing/index_calculation.py,2,Author email: joaogustavoamorim@gmail.com,
Python/digital_image_processing/index_calculation.py,3,Coding date:  jan 2019,
Python/digital_image_processing/index_calculation.py,4,python/black: True,
Python/digital_image_processing/index_calculation.py,6,Imports,
Python/digital_image_processing/index_calculation.py,9,Class implemented to calculus the index,
Python/digital_image_processing/index_calculation.py,104,"print(""Numpy version: "" + np.__version__)",
Python/digital_image_processing/test_digital_image_processing.py,19,Test: convert_to_negative(),
Python/digital_image_processing/test_digital_image_processing.py,22,assert negative_img array for at least one True,
Python/digital_image_processing/test_digital_image_processing.py,26,Test: change_contrast(),
Python/digital_image_processing/test_digital_image_processing.py,29,Work around assertion for response,
Python/digital_image_processing/test_digital_image_processing.py,35,canny.gen_gaussian_kernel(),
Python/digital_image_processing/test_digital_image_processing.py,38,Assert ambiguous array,
Python/digital_image_processing/test_digital_image_processing.py,42,canny.py,
Python/digital_image_processing/test_digital_image_processing.py,45,assert ambiguous array for all == True,
Python/digital_image_processing/test_digital_image_processing.py,48,assert canny array for at least one True,
Python/digital_image_processing/test_digital_image_processing.py,52,filters/gaussian_filter.py,
Python/digital_image_processing/test_digital_image_processing.py,58,laplace diagonals,
Python/digital_image_processing/convert_to_negative.py,9,getting number of pixels in the image,
Python/digital_image_processing/convert_to_negative.py,12,converting each pixel's color to its negative,
Python/digital_image_processing/convert_to_negative.py,21,read original image,
Python/digital_image_processing/convert_to_negative.py,24,convert to its negative,
Python/digital_image_processing/convert_to_negative.py,27,show result image,
Python/digital_image_processing/filters/convolve.py,1,@Author  : lightXu,
Python/digital_image_processing/filters/convolve.py,2,@File    : convolve.py,
Python/digital_image_processing/filters/convolve.py,3,@Time    : 2019/7/8 0008 下午 16:13,
Python/digital_image_processing/filters/convolve.py,27,Pads image with the edge values of array.,
Python/digital_image_processing/filters/convolve.py,30,"im2col, turn the k_size*k_size pixels into a row and np.vstack all rows",
Python/digital_image_processing/filters/convolve.py,33,"turn the kernel into shape(k*k, 1)",
Python/digital_image_processing/filters/convolve.py,35,reshape and get the dst image,
Python/digital_image_processing/filters/convolve.py,41,read original image,
Python/digital_image_processing/filters/convolve.py,43,turn image in gray scale value,
Python/digital_image_processing/filters/convolve.py,45,Laplace operator,
Python/digital_image_processing/filters/sobel_filter.py,1,@Author  : lightXu,
Python/digital_image_processing/filters/sobel_filter.py,2,@File    : sobel_filter.py,
Python/digital_image_processing/filters/sobel_filter.py,3,@Time    : 2019/7/8 0008 下午 16:26,
Python/digital_image_processing/filters/sobel_filter.py,15,"modify the pix within [0, 255]",
Python/digital_image_processing/filters/sobel_filter.py,28,read original image,
Python/digital_image_processing/filters/sobel_filter.py,30,turn image in gray scale value,
Python/digital_image_processing/filters/sobel_filter.py,35,show result images,
Python/digital_image_processing/filters/bilateral_filter.py,20,For applying gaussian function for each element in matrix.,
Python/digital_image_processing/filters/bilateral_filter.py,32,Creates a gaussian kernel of given dimension.,
Python/digital_image_processing/filters/median_filter.py,15,set image borders,
Python/digital_image_processing/filters/median_filter.py,17,copy image size,
Python/digital_image_processing/filters/median_filter.py,21,get mask according with mask,
Python/digital_image_processing/filters/median_filter.py,23,calculate mask median,
Python/digital_image_processing/filters/median_filter.py,30,read original image,
Python/digital_image_processing/filters/median_filter.py,32,turn image in gray scale value,
Python/digital_image_processing/filters/median_filter.py,35,get values with two different mask size,
Python/digital_image_processing/filters/median_filter.py,39,show result images,
Python/digital_image_processing/filters/gaussian_filter.py,18,dst image height and width,
Python/digital_image_processing/filters/gaussian_filter.py,22,"im2col, turn the k_size*k_size pixels into a row and np.vstack all rows",
Python/digital_image_processing/filters/gaussian_filter.py,30,"turn the kernel into shape(k*k, 1)",
Python/digital_image_processing/filters/gaussian_filter.py,34,reshape and get the dst image,
Python/digital_image_processing/filters/gaussian_filter.py,41,read original image,
Python/digital_image_processing/filters/gaussian_filter.py,43,turn image in gray scale value,
Python/digital_image_processing/filters/gaussian_filter.py,46,get values with two different mask size,
Python/digital_image_processing/filters/gaussian_filter.py,50,show result images,
Python/digital_image_processing/edge_detection/canny.py,22,gaussian_filter,
Python/digital_image_processing/edge_detection/canny.py,24,get the gradient and degree by sobel_filter,
Python/digital_image_processing/edge_detection/canny.py,112,read original image in gray mode,
Python/digital_image_processing/edge_detection/canny.py,114,canny edge detection,
Python/digital_image_processing/rotation/rotation.py,23,read original image,
Python/digital_image_processing/rotation/rotation.py,25,turn image in gray scale value,
Python/digital_image_processing/rotation/rotation.py,27,get image shape,
Python/digital_image_processing/rotation/rotation.py,30,set different points to rotate image,
Python/digital_image_processing/rotation/rotation.py,36,add all rotated images in a list,
Python/digital_image_processing/rotation/rotation.py,44,plot different image rotations,
Python/blockchain/diophantine_equation.py,1,"Diophantine Equation : Given integers a,b,c ( at least one of a and b != 0), the diophantine equation",
Python/blockchain/diophantine_equation.py,2,"a*x + b*y = c has a solution (where x and y are integers) iff gcd(a,b) divides c.",
Python/blockchain/diophantine_equation.py,4,GCD ( Greatest Common Divisor ) or HCF ( Highest Common Factor ),
Python/blockchain/diophantine_equation.py,22,"greatest_common_divisor(a,b) function implemented below",
Python/blockchain/diophantine_equation.py,23,"extended_gcd(a,b) function implemented below",
Python/blockchain/diophantine_equation.py,28,"Lemma : if n|ab and gcd(a,n) = 1, then n|b.",
Python/blockchain/diophantine_equation.py,30,Finding All solutions of Diophantine Equations:,
Python/blockchain/diophantine_equation.py,32,"Theorem : Let gcd(a,b) = d, a = d*p, b = d*q. If (x0,y0) is a solution of Diophantine Equation a*x + b*y = c.",
Python/blockchain/diophantine_equation.py,33,"a*x0 + b*y0 = c, then all the solutions have the form a(x0 + t*q) + b(y0 - t*p) = c, where t is an arbitrary integer.",
Python/blockchain/diophantine_equation.py,35,"n is the number of solution you want, n = 2 by default",
Python/blockchain/diophantine_equation.py,57,Initial value,
Python/blockchain/diophantine_equation.py,68,"Euclid's Lemma :  d divides a and b, if and only if d divides a-b and b",
Python/blockchain/diophantine_equation.py,70,Euclid's Algorithm,
Python/blockchain/diophantine_equation.py,94,"Extended Euclid's Algorithm : If d divides a and b and d = a*x + b*y for integers x and y, then d = gcd(a,b)",
Python/blockchain/diophantine_equation.py,121,import testmod for testing our function,
Python/blockchain/modular_division.py,1,Modular Division :,
Python/blockchain/modular_division.py,2,An efficient algorithm for dividing b by a modulo n.,
Python/blockchain/modular_division.py,4,GCD ( Greatest Common Divisor ) or HCF ( Highest Common Factor ),
Python/blockchain/modular_division.py,6,"Given three integers a, b, and n, such that gcd(a,n)=1 and n>1, the algorithm should return an integer x such that",
Python/blockchain/modular_division.py,7,"0≤x≤n−1, and  b/a=x(modn) (that is, b=ax(modn)).",
Python/blockchain/modular_division.py,9,Theorem:,
Python/blockchain/modular_division.py,10,"a has a multiplicative inverse modulo n iff gcd(a,n) = 1",
Python/blockchain/modular_division.py,13,This find x = b*a^(-1) mod n,
Python/blockchain/modular_division.py,14,Uses ExtendedEuclid to find the inverse of a,
Python/blockchain/modular_division.py,30,Implemented below,
Python/blockchain/modular_division.py,35,"This function find the inverses of a i.e., a^(-1)",
Python/blockchain/modular_division.py,45,Implemented below,
Python/blockchain/modular_division.py,51,------------------ Finding Modular division using invert_modulo -------------------,
Python/blockchain/modular_division.py,53,This function used the above inversion of a to find x = (b*a^(-1))mod n,
Python/blockchain/modular_division.py,71,"Extended Euclid's Algorithm : If d divides a and b and d = a*x + b*y for integers x and y, then d = gcd(a,b)",
Python/blockchain/modular_division.py,100,Extended Euclid,
Python/blockchain/modular_division.py,117,"Euclid's Lemma :  d divides a and b, if and only if d divides a-b and b",
Python/blockchain/modular_division.py,118,Euclid's Algorithm,
Python/blockchain/modular_division.py,142,Import testmod for testing our function,
Python/blockchain/chinese_remainder_theorem.py,1,Chinese Remainder Theorem:,
Python/blockchain/chinese_remainder_theorem.py,2,GCD ( Greatest Common Divisor ) or HCF ( Highest Common Factor ),
Python/blockchain/chinese_remainder_theorem.py,4,"If GCD(a,b) = 1, then for any remainder ra modulo a and any remainder rb modulo b there exists integer n,",
Python/blockchain/chinese_remainder_theorem.py,5,"such that n = ra (mod a) and n = ra(mod b).  If n1 and n2 are two such integers, then n1=n2(mod ab)",
Python/blockchain/chinese_remainder_theorem.py,7,Algorithm :,
Python/blockchain/chinese_remainder_theorem.py,9,"1. Use extended euclid algorithm to find x,y such that a*x + b*y = 1",
Python/blockchain/chinese_remainder_theorem.py,10,2. Take n = ra*by + rb*ax,
Python/blockchain/chinese_remainder_theorem.py,13,Extended Euclid,
Python/blockchain/chinese_remainder_theorem.py,30,Uses ExtendedEuclid to find inverses,
Python/blockchain/chinese_remainder_theorem.py,50,----------SAME SOLUTION USING InvertModulo instead ExtendedEuclid----------------,
Python/blockchain/chinese_remainder_theorem.py,52,"This function find the inverses of a i.e., a^(-1)",
Python/blockchain/chinese_remainder_theorem.py,68,Same a above using InvertingModulo,
Python/blockchain/chinese_remainder_theorem.py,84,import testmod for testing our function,
Python/ciphers/playfair_cipher.py,42,I and J are used interchangeably to allow,
Python/ciphers/playfair_cipher.py,43,us to use a 5x5 table (25 letters),
Python/ciphers/playfair_cipher.py,45,we're using a list instead of a '2d' array because it makes the math,
Python/ciphers/playfair_cipher.py,46,for setting up the table and doing the actual encoding/decoding simpler,
Python/ciphers/playfair_cipher.py,49,copy key chars into the table if they are in `alphabet` ignoring duplicates,
Python/ciphers/playfair_cipher.py,54,fill the rest of the table in with the remaining alphabet chars,
Python/ciphers/playfair_cipher.py,67,https://en.wikipedia.org/wiki/Playfair_cipher#Description,
Python/ciphers/playfair_cipher.py,78,rectangle,
Python/ciphers/playfair_cipher.py,89,https://en.wikipedia.org/wiki/Playfair_cipher#Description,
Python/ciphers/playfair_cipher.py,100,rectangle,
Python/ciphers/elgamal_key_generator.py,15,I have written my code naively same as definition of primitive root,
Python/ciphers/elgamal_key_generator.py,16,"however every time I run this program, memory exceeded...",
Python/ciphers/elgamal_key_generator.py,17,"so I used 4.80 Algorithm in Handbook of Applied Cryptography(CRC Press, ISBN : 0-8493-8523-7, October 1996)",
Python/ciphers/elgamal_key_generator.py,18,and it seems to run nicely!,
Python/ciphers/elgamal_key_generator.py,32,select large prime number.,
Python/ciphers/elgamal_key_generator.py,33,one primitive root on modulo p.,
Python/ciphers/elgamal_key_generator.py,34,private_key -> have to be greater than 2 for safety.,
Python/ciphers/rsa_factorization.py,47,find the correct factors,
Python/ciphers/rsa_factorization.py,49,"t is not divisible by 2, break and choose another g",
Python/ciphers/simple_keyword_cypher.py,24,Create alphabet list,
Python/ciphers/simple_keyword_cypher.py,26,Remove duplicate characters from key,
Python/ciphers/simple_keyword_cypher.py,29,First fill cipher with key characters,
Python/ciphers/simple_keyword_cypher.py,31,Then map remaining characters in alphabet to,
Python/ciphers/simple_keyword_cypher.py,32,the alphabet from the beginning,
Python/ciphers/simple_keyword_cypher.py,35,Ensure we are not mapping letters to letters previously mapped,
Python/ciphers/simple_keyword_cypher.py,65,Reverse our cipher mappings,
Python/ciphers/xor_cipher.py,28,private field,
Python/ciphers/xor_cipher.py,39,precondition,
Python/ciphers/xor_cipher.py,44,make sure key can be any size,
Python/ciphers/xor_cipher.py,48,This will be returned,
Python/ciphers/xor_cipher.py,64,precondition,
Python/ciphers/xor_cipher.py,69,make sure key can be any size,
Python/ciphers/xor_cipher.py,73,This will be returned,
Python/ciphers/xor_cipher.py,89,precondition,
Python/ciphers/xor_cipher.py,94,make sure key can be any size,
Python/ciphers/xor_cipher.py,98,This will be returned,
Python/ciphers/xor_cipher.py,114,precondition,
Python/ciphers/xor_cipher.py,119,make sure key can be any size,
Python/ciphers/xor_cipher.py,123,This will be returned,
Python/ciphers/xor_cipher.py,140,precondition,
Python/ciphers/xor_cipher.py,147,actual encrypt-process,
Python/ciphers/xor_cipher.py,165,precondition,
Python/ciphers/xor_cipher.py,172,actual encrypt-process,
Python/ciphers/xor_cipher.py,182,Tests,
Python/ciphers/xor_cipher.py,183,crypt = XORCipher(),
Python/ciphers/xor_cipher.py,184,key = 67,
Python/ciphers/xor_cipher.py,186,# test enrcypt,
Python/ciphers/xor_cipher.py,187,"print(crypt.encrypt(""hallo welt"",key))",
Python/ciphers/xor_cipher.py,188,# test decrypt,
Python/ciphers/xor_cipher.py,189,"print(crypt.decrypt(crypt.encrypt(""hallo welt"",key), key))",
Python/ciphers/xor_cipher.py,191,# test encrypt_string,
Python/ciphers/xor_cipher.py,192,"print(crypt.encrypt_string(""hallo welt"",key))",
Python/ciphers/xor_cipher.py,194,# test decrypt_string,
Python/ciphers/xor_cipher.py,195,"print(crypt.decrypt_string(crypt.encrypt_string(""hallo welt"",key),key))",
Python/ciphers/xor_cipher.py,197,"if (crypt.encrypt_file(""test.txt"",key)):",
Python/ciphers/xor_cipher.py,198,"print(""encrypt successful"")",
Python/ciphers/xor_cipher.py,199,else:,
Python/ciphers/xor_cipher.py,200,"print(""encrypt unsuccessful"")",
Python/ciphers/xor_cipher.py,202,"if (crypt.decrypt_file(""encrypt.out"",key)):",
Python/ciphers/xor_cipher.py,203,"print(""decrypt successful"")",
Python/ciphers/xor_cipher.py,204,else:,
Python/ciphers/xor_cipher.py,205,"print(""decrypt unsuccessful"")",
Python/ciphers/hill_cipher.py,52,This cipher takes alphanumerics into account,
Python/ciphers/hill_cipher.py,53,i.e. a total of 36 characters,
Python/ciphers/hill_cipher.py,58,take x and return x % len(key_string),
Python/ciphers/hill_cipher.py,67,mod36 calc's on the encrypt key,
Python/ciphers/hill_cipher.py,68,validate the determinant of the encryption key,
Python/ciphers/transposition_cipher.py,21,Append pipe symbol (vertical bar) to identify spaces at the end.,
Python/ciphers/rabin_miller.py,1,Primality Testing with the Rabin-Miller Algorithm,
Python/ciphers/trafid_cipher.py,1,https://en.wikipedia.org/wiki/Trifid_cipher,
Python/ciphers/trafid_cipher.py,36,"Validate message and alphabet, set to upper and remove spaces",
Python/ciphers/trafid_cipher.py,40,Check length and characters,
Python/ciphers/trafid_cipher.py,47,Generate dictionares,
Python/ciphers/porta_cipher.py,98,Fist ensure that all our tests are passing...,
Python/ciphers/deterministic_miller_rabin.py,35,can quickly check last digit,
Python/ciphers/deterministic_miller_rabin.py,43,array bounds provided by analysis,
Python/ciphers/deterministic_miller_rabin.py,63,then we have our last prime to check,
Python/ciphers/deterministic_miller_rabin.py,67,break up n -1 into a power of 2 (s) and,
Python/ciphers/deterministic_miller_rabin.py,68,remaining odd component,
Python/ciphers/deterministic_miller_rabin.py,69,"essentially, solve for d * 2 ** s == n - 1",
Python/ciphers/deterministic_miller_rabin.py,77,see article for analysis explanation for m,
Python/ciphers/deterministic_miller_rabin.py,80,this loop will not determine compositeness,
Python/ciphers/deterministic_miller_rabin.py,84,"if pr is False, then the above loop never evaluated to true,",
Python/ciphers/deterministic_miller_rabin.py,85,and the n MUST be composite,
Python/ciphers/deterministic_miller_rabin.py,96,2047,
Python/ciphers/deterministic_miller_rabin.py,100,1_373_653,
Python/ciphers/deterministic_miller_rabin.py,104,25_326_001,
Python/ciphers/deterministic_miller_rabin.py,108,3_215_031_751,
Python/ciphers/deterministic_miller_rabin.py,112,2_152_302_898_747,
Python/ciphers/deterministic_miller_rabin.py,116,3_474_749_660_383,
Python/ciphers/deterministic_miller_rabin.py,120,341_550_071_728_321,
Python/ciphers/deterministic_miller_rabin.py,124,3_825_123_056_546_413_051,
Python/ciphers/deterministic_miller_rabin.py,128,318_665_857_834_031_151_167_461,
Python/ciphers/deterministic_miller_rabin.py,132,3_317_044_064_679_887_385_961_981,
Python/ciphers/deterministic_miller_rabin.py,133,upper limit for probabilistic test,
Python/ciphers/mixed_keyword_cypher.py,29,print(temp),
Python/ciphers/mixed_keyword_cypher.py,37,print(temp),
Python/ciphers/mixed_keyword_cypher.py,39,print(r),
Python/ciphers/mixed_keyword_cypher.py,49,print(modalpha),
Python/ciphers/base64_cipher.py,12,put text in bytes for unicode support,
Python/ciphers/base64_cipher.py,13,the result,
Python/ciphers/base64_cipher.py,14,the length of padding,
Python/ciphers/base64_cipher.py,15,the padding,
Python/ciphers/base64_cipher.py,16,the text to encode,
Python/ciphers/base64_cipher.py,21,"for unix newline, put ""\n""",
Python/ciphers/morse_code_implementation.py,1,Python program to implement Morse Code Translator,
Python/ciphers/morse_code_implementation.py,4,Dictionary representing the morse code chart,
Python/ciphers/shuffled_shift_cipher.py,91,key_list_options contain nearly all printable except few elements from string.whitespace,
Python/ciphers/shuffled_shift_cipher.py,98,creates points known as breakpoints to break the key_list_options at those points and pivot each substring,
Python/ciphers/shuffled_shift_cipher.py,102,"algorithm for creating a new shuffled list, keys_l, out of key_list_options",
Python/ciphers/shuffled_shift_cipher.py,106,checking breakpoints at which to pivot temporary sublist and add it into keys_l,
Python/ciphers/shuffled_shift_cipher.py,111,returning a shuffled keys_l to prevent brute force guessing of shift key,
Python/ciphers/shuffled_shift_cipher.py,134,decoding shift like Caesar cipher algorithm implementing negative shift or reverse shift or left shift,
Python/ciphers/shuffled_shift_cipher.py,155,encoding shift like Caesar cipher algorithm implementing positive shift or forward shift or right shift,
Python/ciphers/base32.py,6,encoded the input (we need a bytes like object),
Python/ciphers/base32.py,7,b32encoded the encoded string,
Python/ciphers/base32.py,9,decoded it,
Python/ciphers/base16.py,6,encoded the input (we need a bytes like object),
Python/ciphers/base16.py,7,b16encoded the encoded string,
Python/ciphers/base16.py,9,decoded it,
Python/ciphers/base85.py,6,encoded the input (we need a bytes like object),
Python/ciphers/base85.py,7,a85encoded the encoded string,
Python/ciphers/base85.py,9,decoded it,
Python/scripts/validate_filenames.py,1,!/usr/bin/env python3,
Python/scripts/build_directory_md.py,1,!/usr/bin/env python3,
Python/compression/peak_signal_to_noise_ratio.py,24,Loading images (original image and compressed image),
Python/compression/peak_signal_to_noise_ratio.py,33,Value expected: 29.73dB,
Python/compression/peak_signal_to_noise_ratio.py,37,# Value expected: 31.53dB (Wikipedia Example),
Python/compression/burrows_wheeler.py,76,sort the list of rotations in alphabetically order,
Python/compression/burrows_wheeler.py,77,make a string composed of the last char of each rotation,
Python/compression/huffman.py,86,pass the file path to the huffman function,
Python/maths/find_max.py,1,NguyenU,
Python/maths/find_max.py,21,94,
Python/maths/sum_of_arithmetic_series.py,1,DarkCoder,
Python/maths/sum_of_arithmetic_series.py,12,formula for sum of series,
Python/maths/greatest_common_divisor.py,41,--> when y=0 then loop will terminate and return x as final GCD.,
Python/maths/miller_rabin.py,6,"This is a probabilistic check to test primality, useful for big numbers!",
Python/maths/miller_rabin.py,7,"if it's a prime, it will return true",
Python/maths/miller_rabin.py,8,"if it's not a prime, the chance of it returning true is at most 1/4**prec",
Python/maths/miller_rabin.py,21,this means n is odd,
Python/maths/miller_rabin.py,28,n - 1=d*(2**exp),
Python/maths/extended_euclidean_algorithm.py,8,@Author: S. Sharma <silentcat>,
Python/maths/extended_euclidean_algorithm.py,9,@Date:   2019-02-25T12:08:53-06:00,
Python/maths/extended_euclidean_algorithm.py,10,@Email:  silentcat@protonmail.com,
Python/maths/extended_euclidean_algorithm.py,11,@Last modified by:   PatOnTheBack,
Python/maths/extended_euclidean_algorithm.py,12,@Last modified time: 2019-07-05,
Python/maths/zellers_congruence.py,69,Days of the week for response,
Python/maths/zellers_congruence.py,82,Validate,
Python/maths/zellers_congruence.py,86,Get month,
Python/maths/zellers_congruence.py,88,Validate,
Python/maths/zellers_congruence.py,93,Validate,
Python/maths/zellers_congruence.py,97,Get day,
Python/maths/zellers_congruence.py,99,Validate,
Python/maths/zellers_congruence.py,103,Get second separator,
Python/maths/zellers_congruence.py,105,Validate,
Python/maths/zellers_congruence.py,109,Get year,
Python/maths/zellers_congruence.py,111,Arbitrary year range,
Python/maths/zellers_congruence.py,117,Get datetime obj for validation,
Python/maths/zellers_congruence.py,120,Start math,
Python/maths/zellers_congruence.py,124,maths var,
Python/maths/zellers_congruence.py,134,End math,
Python/maths/zellers_congruence.py,136,Validate math,
Python/maths/zellers_congruence.py,140,Response,
Python/maths/lucas_lehmer_primality_test.py,14,Primality test 2^p - 1,
Python/maths/lucas_lehmer_primality_test.py,15,Return true if 2^p - 1 is prime,
Python/maths/binary_exp_mod.py,8,mod b,
Python/maths/fermat_little_theorem.py,1,Python program to show the usage of Fermat's little theorem in a division,
Python/maths/fermat_little_theorem.py,2,"According to Fermat's little theorem, (a / b) mod p always equals a * (b ^ (p - 2)) mod p",
Python/maths/fermat_little_theorem.py,3,"Here we assume that p is a prime number, b divides a, and p doesn't divide b",
Python/maths/fermat_little_theorem.py,4,Wikipedia reference: https://en.wikipedia.org/wiki/Fermat%27s_little_theorem,
Python/maths/fermat_little_theorem.py,20,a prime number,
Python/maths/fermat_little_theorem.py,26,"using binary exponentiation function, O(log(p)):",
Python/maths/fermat_little_theorem.py,29,using Python operators:,
Python/maths/factorial_iterative.py,1,factorial of a positive integer -- https://en.wikipedia.org/wiki/Factorial,
Python/maths/matrix_exponentiation.py,15,Initializes a matrix identical to the one provided.,
Python/maths/matrix_exponentiation.py,18,Initializes a square matrix of the given size and set the values to zero.,
Python/maths/matrix_exponentiation.py,42,Trivial Cases,
Python/maths/matrix_exponentiation.py,53,Trivial Cases,
Python/maths/monte_carlo_dice.py,40,remove probability of sums that never appear,
Python/maths/qr_decomposition.py,46,select a column of modified matrix A':,
Python/maths/qr_decomposition.py,48,construct first basis vector,
Python/maths/qr_decomposition.py,51,determine scaling factor,
Python/maths/qr_decomposition.py,53,construct vector v for Householder reflection,
Python/maths/qr_decomposition.py,57,construct the Householder matrix,
Python/maths/qr_decomposition.py,59,pad with ones and zeros as necessary,
Python/maths/abs.py,28,--> 34,
Python/maths/lucas_series.py,1,Lucas Sequence Using Recursion,
Python/maths/monte_carlo.py,21,A local function to see if a dot lands in the circle.,
Python/maths/monte_carlo.py,24,"Our circle has a radius of 1, so a distance",
Python/maths/monte_carlo.py,25,greater than 1 would land outside the circle.,
Python/maths/monte_carlo.py,28,The proportion of guesses that landed in the circle,
Python/maths/monte_carlo.py,33,The ratio of the area for circle to square is pi/4.,
Python/maths/radix2_fft.py,5,for roots of unity,
Python/maths/radix2_fft.py,53,Input as list,
Python/maths/radix2_fft.py,57,Remove leading zero coefficients,
Python/maths/radix2_fft.py,66,Add 0 to make lengths equal a power of 2,
Python/maths/radix2_fft.py,75,A complex root used for the fourier transform,
Python/maths/radix2_fft.py,78,The product,
Python/maths/radix2_fft.py,81,Discrete fourier transform of A and B,
Python/maths/radix2_fft.py,87,Corner case,
Python/maths/radix2_fft.py,90,,
Python/maths/radix2_fft.py,96,First half of next step,
Python/maths/radix2_fft.py,102,Second half of next step,
Python/maths/radix2_fft.py,108,Update,
Python/maths/radix2_fft.py,113,multiply the DFTs of  A and B and find A*B,
Python/maths/radix2_fft.py,121,Corner Case,
Python/maths/radix2_fft.py,124,Inverse DFT,
Python/maths/radix2_fft.py,130,First half of next step,
Python/maths/radix2_fft.py,133,Even positions,
Python/maths/radix2_fft.py,141,Odd positions,
Python/maths/radix2_fft.py,150,Update,
Python/maths/radix2_fft.py,153,Unpack,
Python/maths/radix2_fft.py,156,Remove leading 0's,
Python/maths/radix2_fft.py,161,"Overwrite __str__ for print(); Shows A, B and A*B",
Python/maths/radix2_fft.py,176,Unit tests,
Python/maths/volume.py,121,= 8,
Python/maths/volume.py,122,= 8,
Python/maths/volume.py,123,~= 1.33,
Python/maths/volume.py,124,~= 8.38,
Python/maths/volume.py,125,= 4,
Python/maths/volume.py,126,~= 1.33,
Python/maths/volume.py,127,~= 33.5,
Python/maths/volume.py,128,~= 25.1,
Python/maths/find_max_recursion.py,1,Divide and Conquer algorithm,
Python/maths/find_max_recursion.py,16,the middle,
Python/maths/find_max_recursion.py,17,"find max in range[left, mid]",
Python/maths/find_max_recursion.py,18,"find max in range[mid + 1, right]",
Python/maths/simpson_rule.py,13,"""Simpson Rule""",
Python/maths/simpson_rule.py,14,int(f) = delta_x/2 * (b-a)/3*(f1 + 4f2 + 2f_3 + ... + fn),
Python/maths/simpson_rule.py,36,enter your function here,
Python/maths/simpson_rule.py,42,Lower bound of integration,
Python/maths/simpson_rule.py,43,Upper bound of integration,
Python/maths/simpson_rule.py,44,define number of steps or resolution,
Python/maths/simpson_rule.py,45,define boundary of integration,
Python/maths/find_min_recursion.py,1,Divide and Conquer algorithm,
Python/maths/find_min_recursion.py,16,the middle,
Python/maths/find_min_recursion.py,17,"find min in range[left, mid]",
Python/maths/find_min_recursion.py,18,"find min in range[mid + 1, right]",
Python/maths/newton_raphson.py,24,set the initial guess,
Python/maths/newton_raphson.py,27,Derivative of f(x),
Python/maths/newton_raphson.py,31,Calculate the next estimate,
Python/maths/newton_raphson.py,39,"If logstep is true, then log intermediate steps",
Python/maths/trapezoidal_rule.py,13,"""extended trapezoidal rule""",
Python/maths/trapezoidal_rule.py,14,int(f) = dx/2 * (f1 + 2f2 + ... + fn),
Python/maths/trapezoidal_rule.py,22,print(i),
Python/maths/trapezoidal_rule.py,35,enter your function here,
Python/maths/trapezoidal_rule.py,41,Lower bound of integration,
Python/maths/trapezoidal_rule.py,42,Upper bound of integration,
Python/maths/trapezoidal_rule.py,43,define number of steps or resolution,
Python/maths/trapezoidal_rule.py,44,define boundary of integration,
Python/maths/binary_exponentiation.py,3,Author : Junth Basnet,
Python/maths/binary_exponentiation.py,4,Time Complexity : O(logn),
Python/maths/armstrong_numbers.py,28,Initialization of sum and number of digits.,
Python/maths/armstrong_numbers.py,32,Calculation of digits of the number,
Python/maths/armstrong_numbers.py,36,Dividing number into separate digits and find Armstrong number,
Python/maths/relu.py,34,compare two arrays and then return element-wise maxima.,
Python/maths/relu.py,39,"--> [0, 0, 5]",
Python/maths/segmented_sieve.py,10,Size of every segment,
Python/maths/pi_monte_carlo_estimation.py,56,import doctest,
Python/maths/pi_monte_carlo_estimation.py,58,doctest.testmod(),
Python/maths/eulers_totient.py,1,Eulers Totient function finds the number of relative primes of a number n from 1 to n,
Python/maths/fibonacci_sequence_recursion.py,1,Fibonacci Sequence Using Recursion,
Python/maths/kth_lexicographic_permutation.py,17,Factorails from 1! to (n-1)!,
Python/maths/kth_lexicographic_permutation.py,26,Find permutation,
Python/maths/line_length.py,43,Approximates curve as a sequence of linear lines and sums their length,
Python/maths/line_length.py,48,Increment step,
Python/maths/binomial_coefficient.py,9,nc0 = 1,
Python/maths/binomial_coefficient.py,12,to compute current row from previous row.,
Python/maths/prime_check.py,14,"Negatives, 0 and 1 are not primes",
Python/maths/prime_check.py,17,2 and 3 are primes,
Python/maths/prime_check.py,20,Even values are not primes,
Python/maths/prime_check.py,23,"Except 2, all primes are odd. If any odd value divide",
Python/maths/prime_check.py,24,"the number, then that number is not prime.",
Python/maths/hardy_ramanujanalgo.py,1,This theorem states that the number of prime factors of n,
Python/maths/hardy_ramanujanalgo.py,2,will be approximately log(log(n)) for most natural numbers n,
Python/maths/hardy_ramanujanalgo.py,17,the n input value must be odd so that,
Python/maths/hardy_ramanujanalgo.py,18,we can skip one element (ie i += 2),
Python/maths/hardy_ramanujanalgo.py,29,this condition checks the prime,
Python/maths/hardy_ramanujanalgo.py,30,number n is greater than 2,
Python/maths/area_under_curve.py,38,Approximates small segments of curve as linear and solve,
Python/maths/area_under_curve.py,39,for trapezoidal area,
Python/maths/area_under_curve.py,43,Increment step,
Python/maths/numerical_integration.py,43,Approximates small segments of curve as linear and solve,
Python/maths/numerical_integration.py,44,for trapezoidal area,
Python/maths/numerical_integration.py,49,Increment step,
Python/maths/softmax.py,42,Calculate e^x for each x in your vector where e is Euler's,
Python/maths/softmax.py,43,number (approximately 2.718),
Python/maths/softmax.py,46,Add up the all the exponentials,
Python/maths/softmax.py,49,Divide every exponent by the sum of all exponents,
Python/maths/fibonacci.py,1,fibonacci.py,
Python/maths/fibonacci.py,32,define Python user-defined exceptions,
Python/maths/fibonacci.py,123,print(f'{fib_recursive(num)}\n'),
Python/maths/fibonacci.py,124,print(f'{fib_iterative(num)}\n'),
Python/maths/fibonacci.py,125,print(f'{fib_formula(num)}\n'),
Python/maths/sieve_of_eratosthenes.py,40,If start is a prime,
Python/maths/sieve_of_eratosthenes.py,44,Set multiples of start be False,
Python/maths/abs_min.py,20,= -1,
Python/maths/average_mode.py,4,"Defining function ""mode.""",
Python/maths/average_mode.py,17,Copying input_list to check with the index number later.,
Python/maths/average_mode.py,19,Empty list to store the counts of elements in input_list,
Python/maths/average_mode.py,23,Gets the maximum value in the result list.,
Python/maths/average_mode.py,24,Returns the value with the maximum number of repetitions.,
Python/maths/largest_of_very_large_numbers.py,1,Author: Abhijeeth S,
Python/maths/largest_of_very_large_numbers.py,8,"We use the relation x^y = y*log10(x), where 10 is the base.",
Python/maths/largest_of_very_large_numbers.py,11,0 raised to any number is 0,
Python/maths/largest_of_very_large_numbers.py,14,any number raised to 0 is 1,
Python/maths/largest_of_very_large_numbers.py,17,Main function,
Python/maths/largest_of_very_large_numbers.py,18,Read two numbers from input and typecast them to int using map function.,
Python/maths/largest_of_very_large_numbers.py,19,Here x is the base and y is the power.,
Python/maths/largest_of_very_large_numbers.py,24,"We find the log of each number, using the function res(), which takes two",
Python/maths/largest_of_very_large_numbers.py,25,arguments.,
Python/maths/largest_of_very_large_numbers.py,29,We check for the largest number,
Python/maths/bisection.py,38,Bolzano theory in order to find if there is a root between a and b,
Python/maths/bisection.py,44,Find middle point,
Python/maths/bisection.py,46,Check if middle point is root,
Python/maths/bisection.py,49,Decide the side to repeat the steps,
Python/arithmetic_analysis/secant_method.py,1,Implementing Secant method in Python,
Python/arithmetic_analysis/secant_method.py,2,Author: dimgrichr,
Python/arithmetic_analysis/in_static_equilibrium.py,9,type: ignore,
Python/arithmetic_analysis/in_static_equilibrium.py,48,summation of moments is zero,
Python/arithmetic_analysis/in_static_equilibrium.py,55,Test to check if it works,
Python/arithmetic_analysis/in_static_equilibrium.py,64,Problem 1 in image_data/2D_problems.jpg,
Python/arithmetic_analysis/in_static_equilibrium.py,77,Problem in image_data/2D_problems_1.jpg,
Python/arithmetic_analysis/newton_forward_interpolation.py,1,https://www.geeksforgeeks.org/newton-forward-backward-interpolation/,
Python/arithmetic_analysis/newton_forward_interpolation.py,5,for calculating u value,
Python/arithmetic_analysis/newton_forward_interpolation.py,41,for calculating forward difference table,
Python/arithmetic_analysis/newton_raphson.py,1,Implementing Newton Raphson method in Python,
Python/arithmetic_analysis/newton_raphson.py,2,Author: Syed Haseeb Shah (github.com/QuantumNovice),
Python/arithmetic_analysis/newton_raphson.py,3,The Newton-Raphson method (also known as Newton's method) is a way to,
Python/arithmetic_analysis/newton_raphson.py,4,quickly find a good approximation for the root of a real-valued function,
Python/arithmetic_analysis/newton_raphson.py,7,"noqa: F401, F403",
Python/arithmetic_analysis/newton_raphson.py,25,This number dictates the accuracy of the answer,
Python/arithmetic_analysis/newton_raphson.py,30,Let's Execute,
Python/arithmetic_analysis/newton_raphson.py,32,Find root of trigonometric function,
Python/arithmetic_analysis/newton_raphson.py,33,Find value of pi,
Python/arithmetic_analysis/newton_raphson.py,35,Find root of polynomial,
Python/arithmetic_analysis/newton_raphson.py,37,Find Square Root of 5,
Python/arithmetic_analysis/newton_raphson.py,39,Exponential Roots,
Python/arithmetic_analysis/gaussian_elimination.py,57,coefficients must to be a square matrix so we need to check first,
Python/arithmetic_analysis/gaussian_elimination.py,62,augmented matrix,
Python/arithmetic_analysis/gaussian_elimination.py,66,scale the matrix leaving it triangular,
Python/arithmetic_analysis/newton_method.py,3,Newton's Method - https://en.wikipedia.org/wiki/Newton%27s_method,
Python/arithmetic_analysis/newton_method.py,6,function is the f(x) and function1 is the f'(x),
Python/arithmetic_analysis/intersection.py,6,function is the f we want to find its root and x0 and x1 are two random starting points,
Python/arithmetic_analysis/lu_decomposition.py,3,lower–upper (LU) decomposition - https://en.wikipedia.org/wiki/LU_decomposition,
Python/arithmetic_analysis/lu_decomposition.py,8,Table that contains our data,
Python/arithmetic_analysis/lu_decomposition.py,9,Table has to be a square array so we need to check first,
Python/arithmetic_analysis/bisection.py,6,"finds where the function becomes 0 in [a,b] using bolzano",
Python/arithmetic_analysis/bisection.py,10,one of the a or b is a root for the function,
Python/arithmetic_analysis/bisection.py,16,"if none of these are root and they are both positive or negative,",
Python/arithmetic_analysis/bisection.py,17,then his algorithm can't find the root,
Python/arithmetic_analysis/bisection.py,22,until we achieve precise equals to 10^-7,
Python/geodesy/lamberts_ellipsoidal_distance.py,44,CONSTANTS per WGS84 https://en.wikipedia.org/wiki/World_Geodetic_System,
Python/geodesy/lamberts_ellipsoidal_distance.py,45,Distance in metres(m),
Python/geodesy/lamberts_ellipsoidal_distance.py,50,Equation Parameters,
Python/geodesy/lamberts_ellipsoidal_distance.py,51,https://en.wikipedia.org/wiki/Geographical_distance#Lambert's_formula_for_long_lines,
Python/geodesy/lamberts_ellipsoidal_distance.py,53,Parametric latitudes https://en.wikipedia.org/wiki/Latitude#Parametric_(or_reduced)_latitude,
Python/geodesy/lamberts_ellipsoidal_distance.py,57,Compute central angle between two points,
Python/geodesy/lamberts_ellipsoidal_distance.py,58,using haversine theta. sigma =  haversine_distance / equatorial radius,
Python/geodesy/lamberts_ellipsoidal_distance.py,61,Intermediate P and Q values,
Python/geodesy/lamberts_ellipsoidal_distance.py,65,Intermediate X value,
Python/geodesy/lamberts_ellipsoidal_distance.py,66,X = (sigma - sin(sigma)) * sin^2Pcos^2Q / cos^2(sigma/2),
Python/geodesy/lamberts_ellipsoidal_distance.py,71,Intermediate Y value,
Python/geodesy/lamberts_ellipsoidal_distance.py,72,Y = (sigma + sin(sigma)) * cos^2Psin^2Q / sin^2(sigma/2),
Python/geodesy/haversine_distance.py,31,CONSTANTS per WGS84 https://en.wikipedia.org/wiki/World_Geodetic_System,
Python/geodesy/haversine_distance.py,32,Distance in metres(m),
Python/geodesy/haversine_distance.py,36,Equation parameters,
Python/geodesy/haversine_distance.py,37,Equation https://en.wikipedia.org/wiki/Haversine_formula#Formulation,
Python/geodesy/haversine_distance.py,43,Equation,
Python/geodesy/haversine_distance.py,46,Square both values,
Python/fuzzy_logic/fuzzy_operations.py,14,Create universe of discourse in Python using linspace (),
Python/fuzzy_logic/fuzzy_operations.py,17,"Create two fuzzy sets by defining any membership function (trapmf(), gbellmf(),gaussmf(), etc).",
Python/fuzzy_logic/fuzzy_operations.py,23,Compute the different operations using inbuilt functions.,
Python/fuzzy_logic/fuzzy_operations.py,26,"1. Union = max(µA(x), µB(x))",
Python/fuzzy_logic/fuzzy_operations.py,28,"2. Intersection = min(µA(x), µB(x))",
Python/fuzzy_logic/fuzzy_operations.py,30,3. Complement (A) = (1- min(µA(x)),
Python/fuzzy_logic/fuzzy_operations.py,32,"4. Difference (A/B) = min(µA(x),(1- µB(x)))",
Python/fuzzy_logic/fuzzy_operations.py,34,5. Algebraic Sum = [µA(x) + µB(x) – (µA(x) * µB(x))],
Python/fuzzy_logic/fuzzy_operations.py,36,6. Algebraic Product = (µA(x) * µB(x)),
Python/fuzzy_logic/fuzzy_operations.py,38,"7. Bounded Sum = min[1,(µA(x), µB(x))]",
Python/fuzzy_logic/fuzzy_operations.py,40,"8. Bounded difference = min[0,(µA(x), µB(x))]",
Python/fuzzy_logic/fuzzy_operations.py,43,max-min composition,
Python/fuzzy_logic/fuzzy_operations.py,44,max-product composition,
Python/fuzzy_logic/fuzzy_operations.py,46,"Plot each set A, set B and each operation result using plot() and subplot().",
Python/graphs/minimum_spanning_tree_prims.py,37,Update function if value of any node in min-heap decreases,
Python/graphs/minimum_spanning_tree_prims.py,74,Neighboring Tree Vertex of selected vertex,
Python/graphs/minimum_spanning_tree_prims.py,75,Minimum Distance of explored vertex with neighboring vertex of partial tree formed in graph,
Python/graphs/minimum_spanning_tree_prims.py,76,Heap of Distance of vertices from their neighboring vertex,
Python/graphs/minimum_spanning_tree_prims.py,107,< --------- Prims Algorithm --------- >,
Python/graphs/dijkstra.py,48,"cost from start node,end node",
Python/graphs/dijkstra.py,108,E -- 3 --> F -- 3 --> C == 6,
Python/graphs/dijkstra.py,111,E -- 3 --> F == 3,
Python/graphs/dijkstra.py,114,E -- 2 --> G -- 1 --> F == 3,
Python/graphs/check_bipartite_graph_dfs.py,1,Check whether Graph is Bipartite or Not using DFS,
Python/graphs/check_bipartite_graph_dfs.py,3,"A Bipartite Graph is a graph whose vertices can be divided into two independent sets,",
Python/graphs/check_bipartite_graph_dfs.py,4,"U and V such that every edge (u, v) either connects a vertex from U to V or a vertex",
Python/graphs/check_bipartite_graph_dfs.py,5,"from V to U. In other words, for every edge (u, v), either u belongs to U and v to V,",
Python/graphs/check_bipartite_graph_dfs.py,6,or u belongs to V and v to U. We can also say that there is no edge that connects,
Python/graphs/check_bipartite_graph_dfs.py,7,vertices of same set.,
Python/graphs/check_bipartite_graph_dfs.py,31,Adjacency list of graph,
Python/graphs/articulation_points.py,1,Finding Articulation Points in Undirected Graph,
Python/graphs/articulation_points.py,22,AP found via bridge,
Python/graphs/articulation_points.py,25,AP found via cycle,
Python/graphs/articulation_points.py,43,Adjacency list of graph,
Python/graphs/bfs_shortest_path.py,36,keep track of explored nodes,
Python/graphs/bfs_shortest_path.py,38,keep track of all the paths to be checked,
Python/graphs/bfs_shortest_path.py,41,return path if start is goal,
Python/graphs/bfs_shortest_path.py,45,keeps looping until all possible paths have been checked,
Python/graphs/bfs_shortest_path.py,47,pop the first path from the queue,
Python/graphs/bfs_shortest_path.py,49,get the last node from the path,
Python/graphs/bfs_shortest_path.py,53,"go through all neighbour nodes, construct a new path and",
Python/graphs/bfs_shortest_path.py,54,push it into the queue,
Python/graphs/bfs_shortest_path.py,59,return path if neighbour is goal,
Python/graphs/bfs_shortest_path.py,63,mark node as explored,
Python/graphs/bfs_shortest_path.py,66,in case there's no path between the 2 nodes,
Python/graphs/bfs_shortest_path.py,96,Keep tab on distances from `start` node.,
Python/graphs/bfs_shortest_path.py,113,"returns ['G', 'C', 'A', 'B', 'D']",
Python/graphs/bfs_shortest_path.py,114,returns 4,
Python/graphs/prim.py,28,{vertex:distance},
Python/graphs/prim.py,48,add the neighbors:,
Python/graphs/prim.py,51,add the edges:,
Python/graphs/finding_bridges.py,1,Finding Bridges in Undirected Graph,
Python/graphs/finding_bridges.py,4,No of vertices in graph,
Python/graphs/finding_bridges.py,21,This edge is a back edge and cannot be a bridge,
Python/graphs/depth_first_search.py,1,!/usr/bin/python,
Python/graphs/depth_first_search.py,10,for printing the Graph vertices,
Python/graphs/depth_first_search.py,16,for adding the edge between two vertices,
Python/graphs/depth_first_search.py,18,"check if vertex is already present,",
Python/graphs/depth_first_search.py,22,else make a new vertex,
Python/graphs/depth_first_search.py,26,visited array for storing already visited nodes,
Python/graphs/depth_first_search.py,29,call the recursive helper function,
Python/graphs/depth_first_search.py,35,mark start vertex as visited,
Python/graphs/depth_first_search.py,40,Recur for all the vertices that are adjacent to this node,
Python/graphs/depth_first_search.py,59,OUTPUT:,
Python/graphs/depth_first_search.py,60,0  ->  1 -> 2,
Python/graphs/depth_first_search.py,61,1  ->  2,
Python/graphs/depth_first_search.py,62,2  ->  0 -> 3,
Python/graphs/depth_first_search.py,63,3  ->  3,
Python/graphs/depth_first_search.py,64,DFS:,
Python/graphs/depth_first_search.py,65,0 1 2 3,
Python/graphs/directed_and_undirected_(weighted)_graph.py,6,the default weight is 1 if not assigned but all the implementation is weighted,
Python/graphs/directed_and_undirected_(weighted)_graph.py,13,adding vertices and edges,
Python/graphs/directed_and_undirected_(weighted)_graph.py,14,adding the weight is optional,
Python/graphs/directed_and_undirected_(weighted)_graph.py,15,handles repetition,
Python/graphs/directed_and_undirected_(weighted)_graph.py,28,handles if the input does not exist,
Python/graphs/directed_and_undirected_(weighted)_graph.py,35,if no destination is meant the default value is -1,
Python/graphs/directed_and_undirected_(weighted)_graph.py,48,check if there is any non isolated nodes,
Python/graphs/directed_and_undirected_(weighted)_graph.py,62,check if all the children are visited,
Python/graphs/directed_and_undirected_(weighted)_graph.py,70,check if se have reached the starting point,
Python/graphs/directed_and_undirected_(weighted)_graph.py,74,c is the count of nodes you want and if you leave it or pass -1 to the function the count,
Python/graphs/directed_and_undirected_(weighted)_graph.py,75,will be random from 10 to 10000,
Python/graphs/directed_and_undirected_(weighted)_graph.py,80,every vertex has max 100 edges,
Python/graphs/directed_and_undirected_(weighted)_graph.py,126,check if there is any non isolated nodes,
Python/graphs/directed_and_undirected_(weighted)_graph.py,136,check if all the children are visited,
Python/graphs/directed_and_undirected_(weighted)_graph.py,144,check if se have reached the starting point,
Python/graphs/directed_and_undirected_(weighted)_graph.py,161,check if there is any non isolated nodes,
Python/graphs/directed_and_undirected_(weighted)_graph.py,185,check if all the children are visited,
Python/graphs/directed_and_undirected_(weighted)_graph.py,197,check if se have reached the starting point,
Python/graphs/directed_and_undirected_(weighted)_graph.py,214,check if there is any non isolated nodes,
Python/graphs/directed_and_undirected_(weighted)_graph.py,239,check if all the children are visited,
Python/graphs/directed_and_undirected_(weighted)_graph.py,251,check if se have reached the starting point,
Python/graphs/directed_and_undirected_(weighted)_graph.py,272,adding vertices and edges,
Python/graphs/directed_and_undirected_(weighted)_graph.py,273,adding the weight is optional,
Python/graphs/directed_and_undirected_(weighted)_graph.py,274,handles repetition,
Python/graphs/directed_and_undirected_(weighted)_graph.py,276,check if the u exists,
Python/graphs/directed_and_undirected_(weighted)_graph.py,278,if there already is a edge,
Python/graphs/directed_and_undirected_(weighted)_graph.py,282,if u does not exist,
Python/graphs/directed_and_undirected_(weighted)_graph.py,284,add the other way,
Python/graphs/directed_and_undirected_(weighted)_graph.py,286,if there already is a edge,
Python/graphs/directed_and_undirected_(weighted)_graph.py,290,if u does not exist,
Python/graphs/directed_and_undirected_(weighted)_graph.py,293,handles if the input does not exist,
Python/graphs/directed_and_undirected_(weighted)_graph.py,299,the other way round,
Python/graphs/directed_and_undirected_(weighted)_graph.py,305,if no destination is meant the default value is -1,
Python/graphs/directed_and_undirected_(weighted)_graph.py,318,check if there is any non isolated nodes,
Python/graphs/directed_and_undirected_(weighted)_graph.py,332,check if all the children are visited,
Python/graphs/directed_and_undirected_(weighted)_graph.py,340,check if se have reached the starting point,
Python/graphs/directed_and_undirected_(weighted)_graph.py,344,c is the count of nodes you want and if you leave it or pass -1 to the function the count,
Python/graphs/directed_and_undirected_(weighted)_graph.py,345,will be random from 10 to 10000,
Python/graphs/directed_and_undirected_(weighted)_graph.py,350,every vertex has max 100 edges,
Python/graphs/directed_and_undirected_(weighted)_graph.py,390,check if there is any non isolated nodes,
Python/graphs/directed_and_undirected_(weighted)_graph.py,414,check if all the children are visited,
Python/graphs/directed_and_undirected_(weighted)_graph.py,426,check if se have reached the starting point,
Python/graphs/directed_and_undirected_(weighted)_graph.py,443,check if there is any non isolated nodes,
Python/graphs/directed_and_undirected_(weighted)_graph.py,468,check if all the children are visited,
Python/graphs/directed_and_undirected_(weighted)_graph.py,480,check if se have reached the starting point,
Python/graphs/a_star.py,3,0 are free path whereas 1's are obstacles,
Python/graphs/a_star.py,17,"all coordinates are given in format [y,x]",
Python/graphs/a_star.py,20,the cost map which pushes the path closer to the goal,
Python/graphs/a_star.py,26,added extra penalty in the heuristic map,
Python/graphs/a_star.py,29,the actions we can take,
Python/graphs/a_star.py,30,go up  # go left  # go down  # go right,
Python/graphs/a_star.py,33,function to search the path,
Python/graphs/a_star.py,38,the reference grid,
Python/graphs/a_star.py,42,the action grid,
Python/graphs/a_star.py,50,flag that is set when search is complete,
Python/graphs/a_star.py,51,flag set if we can't find expand,
Python/graphs/a_star.py,57,to choose the least costliest action so as to move closer to the goal,
Python/graphs/a_star.py,67,to try out different valid actions,
Python/graphs/a_star.py,80,we get the reverse path from here,
Python/graphs/basic_graphs.py,2,Accept No. of Nodes and edges,
Python/graphs/basic_graphs.py,5,Initialising Dictionary of edges,
Python/graphs/basic_graphs.py,135,SInce oth Index is ignored,
Python/graphs/basic_graphs.py,255,Sort edges on the basis of distance,
Python/graphs/basic_graphs.py,276,find the isolated node in the graph,
Python/graphs/tarjans_scc.py,30,the number when this node is seen,
Python/graphs/tarjans_scc.py,31,lowest rank node reachable from here,
Python/graphs/tarjans_scc.py,75,Test,
Python/graphs/check_bipartite_graph_bfs.py,1,Check whether Graph is Bipartite or Not using BFS,
Python/graphs/check_bipartite_graph_bfs.py,3,"A Bipartite Graph is a graph whose vertices can be divided into two independent sets,",
Python/graphs/check_bipartite_graph_bfs.py,4,"U and V such that every edge (u, v) either connects a vertex from U to V or a vertex",
Python/graphs/check_bipartite_graph_bfs.py,5,"from V to U. In other words, for every edge (u, v), either u belongs to U and v to V,",
Python/graphs/check_bipartite_graph_bfs.py,6,or u belongs to V and v to U. We can also say that there is no edge that connects,
Python/graphs/check_bipartite_graph_bfs.py,7,vertices of same set.,
Python/graphs/check_bipartite_graph_bfs.py,42,Adjacency List of graph,
Python/graphs/even_tree.py,15,pylint: disable=invalid-name,
Python/graphs/even_tree.py,21,pylint: disable=redefined-outer-name,
Python/graphs/dinic.py,21,This is a sample depth first search to be used at max_flow,
Python/graphs/dinic.py,37,Here we calculate the flow that reaches the sink,
Python/graphs/dinic.py,40,l = 30 maybe faster for random data,
Python/graphs/dinic.py,64,Example to use,
Python/graphs/dinic.py,70,Here we make a graphs with 10 vertex(source and sink includes),
Python/graphs/dinic.py,93,Now we can know that is the maximum flow(source -> sink),
Python/graphs/eulerian_path_and_circuit_for_undirected_graph.py,1,Eulerian Path is a path in graph that visits every edge exactly once.,
Python/graphs/eulerian_path_and_circuit_for_undirected_graph.py,2,Eulerian Circuit is an Eulerian Path which starts and ends on the same,
Python/graphs/eulerian_path_and_circuit_for_undirected_graph.py,3,vertex.,
Python/graphs/eulerian_path_and_circuit_for_undirected_graph.py,4,time complexity is O(V+E),
Python/graphs/eulerian_path_and_circuit_for_undirected_graph.py,5,space complexity is O(VE),
Python/graphs/eulerian_path_and_circuit_for_undirected_graph.py,8,using dfs for finding eulerian path traversal,
Python/graphs/eulerian_path_and_circuit_for_undirected_graph.py,18,for checking in graph has euler path or circuit,
Python/graphs/eulerian_path_and_circuit_for_undirected_graph.py,60,all degree is zero,
Python/graphs/g_topological_sort.py,1,Author: Phyllipe Bezerra (https://github.com/pmba),
Python/graphs/scc_kosaraju.py,36,"n - no of nodes, m - no of edges",
Python/graphs/scc_kosaraju.py,39,graph,
Python/graphs/scc_kosaraju.py,40,reversed graph,
Python/graphs/scc_kosaraju.py,41,input graph data (edges),
Python/graphs/multi_heuristic_astar.py,24,update,
Python/graphs/multi_heuristic_astar.py,25,"print(""update"", item)",
Python/graphs/multi_heuristic_astar.py,56,euclidean distance,
Python/graphs/multi_heuristic_astar.py,63,integer division by time variable,
Python/graphs/multi_heuristic_astar.py,68,manhattan distance,
Python/graphs/multi_heuristic_astar.py,92,print(x),
Python/graphs/multi_heuristic_astar.py,139,"print(""s"", s)",
Python/graphs/multi_heuristic_astar.py,140,"print(""j"", j)",
Python/graphs/multi_heuristic_astar.py,150,"print(""neighbour"", neighbours)",
Python/graphs/multi_heuristic_astar.py,183,L block,
Python/graphs/multi_heuristic_astar.py,222,hyper parameters,
Python/graphs/multi_heuristic_astar.py,226,one consistent and two other inconsistent,
Python/graphs/multi_heuristic_astar.py,228,start and end destination,
Python/graphs/multi_heuristic_astar.py,249,"print(open_list[0].minkey(), open_list[i].minkey())",
Python/graphs/bfs.py,34,collections.deque([start]),
Python/graphs/bfs.py,37,queue.popleft(),
Python/graphs/breadth_first_search.py,1,!/usr/bin/python,
Python/graphs/breadth_first_search.py,10,for printing the Graph vertices,
Python/graphs/breadth_first_search.py,15,for adding the edge between two vertices,
Python/graphs/breadth_first_search.py,17,"check if vertex is already present,",
Python/graphs/breadth_first_search.py,21,else make a new vertex,
Python/graphs/breadth_first_search.py,25,Take a list for stoting already visited vertices,
Python/graphs/breadth_first_search.py,28,create a list to store all the vertices for BFS,
Python/graphs/breadth_first_search.py,31,mark the source node as visited and enqueue it,
Python/graphs/breadth_first_search.py,39,mark all adjacent nodes as visited and print them,
Python/graphs/breadth_first_search.py,59,OUTPUT:,
Python/graphs/breadth_first_search.py,60,0  ->  1 -> 2,
Python/graphs/breadth_first_search.py,61,1  ->  2,
Python/graphs/breadth_first_search.py,62,2  ->  0 -> 3,
Python/graphs/breadth_first_search.py,63,3  ->  3,
Python/graphs/breadth_first_search.py,64,BFS:,
Python/graphs/breadth_first_search.py,65,2 0 3 1,
Python/graphs/edmonds_karp_multiple_source_and_sink.py,11,make only one source and one sink,
Python/graphs/edmonds_karp_multiple_source_and_sink.py,24,make fake vertex if there are more,
Python/graphs/edmonds_karp_multiple_source_and_sink.py,25,than one source or sink,
Python/graphs/edmonds_karp_multiple_source_and_sink.py,66,"it's just a reference, so you shouldn't change",
Python/graphs/edmonds_karp_multiple_source_and_sink.py,67,"it in your algorithms, use deep copy before doing that",
Python/graphs/edmonds_karp_multiple_source_and_sink.py,76,You should override it,
Python/graphs/edmonds_karp_multiple_source_and_sink.py,84,use this to save your result,
Python/graphs/edmonds_karp_multiple_source_and_sink.py,106,push some substance to graph,
Python/graphs/edmonds_karp_multiple_source_and_sink.py,112,Relabel-to-front selection rule,
Python/graphs/edmonds_karp_multiple_source_and_sink.py,119,move through list,
Python/graphs/edmonds_karp_multiple_source_and_sink.py,126,"if it was relabeled, swap elements",
Python/graphs/edmonds_karp_multiple_source_and_sink.py,127,and start from 0 index,
Python/graphs/edmonds_karp_multiple_source_and_sink.py,138,if it's neighbour and current vertex is higher,
Python/graphs/edmonds_karp_multiple_source_and_sink.py,176,graph = [,
Python/graphs/edmonds_karp_multiple_source_and_sink.py,177,"[0, 0, 4, 6, 0, 0],",
Python/graphs/edmonds_karp_multiple_source_and_sink.py,178,"[0, 0, 5, 2, 0, 0],",
Python/graphs/edmonds_karp_multiple_source_and_sink.py,179,"[0, 0, 0, 0, 4, 4],",
Python/graphs/edmonds_karp_multiple_source_and_sink.py,180,"[0, 0, 0, 0, 6, 6],",
Python/graphs/edmonds_karp_multiple_source_and_sink.py,181,"[0, 0, 0, 0, 0, 0],",
Python/graphs/edmonds_karp_multiple_source_and_sink.py,182,"[0, 0, 0, 0, 0, 0],",
Python/graphs/edmonds_karp_multiple_source_and_sink.py,183,],
Python/graphs/edmonds_karp_multiple_source_and_sink.py,186,prepare our network,
Python/graphs/edmonds_karp_multiple_source_and_sink.py,188,set algorithm,
Python/graphs/edmonds_karp_multiple_source_and_sink.py,190,and calculate,
Python/graphs/dijkstra_algorithm.py,1,Title: Dijkstra's Algorithm for finding single source shortest path from scratch,
Python/graphs/dijkstra_algorithm.py,2,Author: Shubham Malik,
Python/graphs/dijkstra_algorithm.py,3,References: https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm,
Python/graphs/dijkstra_algorithm.py,8,For storing the vertex set to retrieve node with the lowest distance,
Python/graphs/dijkstra_algorithm.py,12,Based on Min Heap,
Python/graphs/dijkstra_algorithm.py,16,To store the pos of node in array,
Python/graphs/dijkstra_algorithm.py,35,Inserts a node into the Priority Queue,
Python/graphs/dijkstra_algorithm.py,42,Removes and returns the min element at top of priority queue,
Python/graphs/dijkstra_algorithm.py,51,returns the index of left child,
Python/graphs/dijkstra_algorithm.py,55,returns the index of right child,
Python/graphs/dijkstra_algorithm.py,59,returns the index of parent,
Python/graphs/dijkstra_algorithm.py,63,swaps array elements at indices i and j,
Python/graphs/dijkstra_algorithm.py,64,update the pos{},
Python/graphs/dijkstra_algorithm.py,73,assuming the new_d is atmost old_d,
Python/graphs/dijkstra_algorithm.py,82,"To store graph: u -> (v,w)",
Python/graphs/dijkstra_algorithm.py,83,Number of nodes in graph,
Python/graphs/dijkstra_algorithm.py,84,To store the distance from source vertex,
Python/graphs/dijkstra_algorithm.py,86,To store the path,
Python/graphs/dijkstra_algorithm.py,89,Edge going from node u to v and v to u with weight w,
Python/graphs/dijkstra_algorithm.py,90,"u (w)-> v, v (w) -> u",
Python/graphs/dijkstra_algorithm.py,91,Check if u already in graph,
Python/graphs/dijkstra_algorithm.py,97,Assuming undirected graph,
Python/graphs/dijkstra_algorithm.py,104,u -> v(w),
Python/graphs/dijkstra_algorithm.py,109,Flush old junk values in par[],
Python/graphs/dijkstra_algorithm.py,111,src is the source node,
Python/graphs/dijkstra_algorithm.py,114,"(dist from src, node)",
Python/graphs/dijkstra_algorithm.py,117,Infinity,
Python/graphs/dijkstra_algorithm.py,121,Returns node with the min dist from source,
Python/graphs/dijkstra_algorithm.py,122,Update the distance of all the neighbours of u and,
Python/graphs/dijkstra_algorithm.py,123,if their prev dist was INFINITY then push them in Q,
Python/graphs/dijkstra_algorithm.py,134,Show the shortest distances from src,
Python/graphs/dijkstra_algorithm.py,143,To show the shortest path from src to dest,
Python/graphs/dijkstra_algorithm.py,144,WARNING: Use it *after* calling dijkstra,
Python/graphs/dijkstra_algorithm.py,148,Backtracking from dest to src,
Python/graphs/dijkstra_algorithm.py,189,OUTPUT,
Python/graphs/dijkstra_algorithm.py,190,0 -> 1(4) -> 7(8),
Python/graphs/dijkstra_algorithm.py,191,1 -> 0(4) -> 2(8) -> 7(11),
Python/graphs/dijkstra_algorithm.py,192,7 -> 0(8) -> 1(11) -> 6(1) -> 8(7),
Python/graphs/dijkstra_algorithm.py,193,2 -> 1(8) -> 3(7) -> 8(2) -> 5(4),
Python/graphs/dijkstra_algorithm.py,194,3 -> 2(7) -> 4(9) -> 5(14),
Python/graphs/dijkstra_algorithm.py,195,8 -> 2(2) -> 6(6) -> 7(7),
Python/graphs/dijkstra_algorithm.py,196,5 -> 2(4) -> 3(14) -> 4(10) -> 6(2),
Python/graphs/dijkstra_algorithm.py,197,4 -> 3(9) -> 5(10),
Python/graphs/dijkstra_algorithm.py,198,6 -> 5(2) -> 7(1) -> 8(6),
Python/graphs/dijkstra_algorithm.py,199,Distance from node: 0,
Python/graphs/dijkstra_algorithm.py,200,Node 0 has distance: 0,
Python/graphs/dijkstra_algorithm.py,201,Node 1 has distance: 4,
Python/graphs/dijkstra_algorithm.py,202,Node 2 has distance: 12,
Python/graphs/dijkstra_algorithm.py,203,Node 3 has distance: 19,
Python/graphs/dijkstra_algorithm.py,204,Node 4 has distance: 21,
Python/graphs/dijkstra_algorithm.py,205,Node 5 has distance: 11,
Python/graphs/dijkstra_algorithm.py,206,Node 6 has distance: 9,
Python/graphs/dijkstra_algorithm.py,207,Node 7 has distance: 8,
Python/graphs/dijkstra_algorithm.py,208,Node 8 has distance: 14,
Python/graphs/dijkstra_algorithm.py,209,----Path to reach 4 from 0----,
Python/graphs/dijkstra_algorithm.py,210,0 -> 7 -> 6 -> 5 -> 4,
Python/graphs/dijkstra_algorithm.py,211,Total cost of path:  21,
Python/graphs/kahns_algorithm_topo.py,1,Kahn's Algorithm is used to find Topological ordering of Directed Acyclic Graph using BFS,
Python/graphs/kahns_algorithm_topo.py,31,Adjacency List of Graph,
Python/graphs/graph_list.py,1,!/usr/bin/python,
Python/graphs/graph_list.py,3,Author: OMKAR PATHAK,
Python/graphs/graph_list.py,5,We can use Python's dictionary for constructing the graph.,
Python/graphs/graph_list.py,13,check if vertex is already present,
Python/graphs/graph_list.py,39,OUTPUT:,
Python/graphs/graph_list.py,40,0 -> 1 -> 4,
Python/graphs/graph_list.py,41,1 -> 0 -> 4 -> 3 -> 2,
Python/graphs/graph_list.py,42,2 -> 3,
Python/graphs/graph_list.py,43,3 -> 4,
Python/graphs/graph_list.py,44,4 -> 1 -> 3,
Python/graphs/kahns_algorithm_long.py,1,Finding longest distance in Directed Acyclic Graph using KahnsAlgorithm,
Python/graphs/kahns_algorithm_long.py,29,Adjacency list of Graph,
Python/graphs/graphs_floyd_warshall.py,1,floyd_warshall.py,
Python/graphs/graphs_floyd_warshall.py,41,"check vertex k against all other vertices (i, j)",
Python/graphs/graphs_floyd_warshall.py,43,looping through rows of graph array,
Python/graphs/graphs_floyd_warshall.py,45,looping through columns of graph array,
Python/graphs/graphs_floyd_warshall.py,67,src and dst are indices that must be within the array size graph[e][v],
Python/graphs/graphs_floyd_warshall.py,68,failure to follow this will result in an error,
Python/graphs/graphs_floyd_warshall.py,78,Example Input,
Python/graphs/graphs_floyd_warshall.py,79,Enter number of vertices: 3,
Python/graphs/graphs_floyd_warshall.py,80,Enter number of edges: 2,
Python/graphs/graphs_floyd_warshall.py,82,# generated graph from vertex and edge inputs,
Python/graphs/graphs_floyd_warshall.py,83,"[[inf, inf, inf], [inf, inf, inf], [inf, inf, inf]]",
Python/graphs/graphs_floyd_warshall.py,84,"[[0.0, inf, inf], [inf, 0.0, inf], [inf, inf, 0.0]]",
Python/graphs/graphs_floyd_warshall.py,86,"specify source, destination and weight for edge #1",
Python/graphs/graphs_floyd_warshall.py,87,Edge  1,
Python/graphs/graphs_floyd_warshall.py,88,Enter source:1,
Python/graphs/graphs_floyd_warshall.py,89,Enter destination:2,
Python/graphs/graphs_floyd_warshall.py,90,Enter weight:2,
Python/graphs/graphs_floyd_warshall.py,92,"specify source, destination and weight for edge #2",
Python/graphs/graphs_floyd_warshall.py,93,Edge  2,
Python/graphs/graphs_floyd_warshall.py,94,Enter source:2,
Python/graphs/graphs_floyd_warshall.py,95,Enter destination:1,
Python/graphs/graphs_floyd_warshall.py,96,Enter weight:1,
Python/graphs/graphs_floyd_warshall.py,98,"# Expected Output from the vertice, edge and src, dst, weight inputs!!",
Python/graphs/graphs_floyd_warshall.py,99,0		INF	INF,
Python/graphs/graphs_floyd_warshall.py,100,INF	0	2,
Python/graphs/graphs_floyd_warshall.py,101,INF	1	0,
Python/graphs/dfs.py,22,one difference from BFS is to pop last element here instead of first one,
Python/linear_algebra/src/polynom-for-points.py,56,put the x and x to the power values in a matrix,
Python/linear_algebra/src/polynom-for-points.py,68,put the y values into a vector,
Python/linear_algebra/src/polynom-for-points.py,85,manipulating all the values in the matrix,
Python/linear_algebra/src/polynom-for-points.py,87,manipulating the values in the vector,
Python/linear_algebra/src/polynom-for-points.py,93,make solutions,
Python/linear_algebra/src/lib.py,122,error case,
Python/linear_algebra/src/lib.py,139,error case,
Python/linear_algebra/src/lib.py,154,precondition,
Python/linear_algebra/src/lib.py,163,precondition,
Python/linear_algebra/src/lib.py,173,precondition,
Python/linear_algebra/src/lib.py,186,precondition,
Python/linear_algebra/src/lib.py,311,vector-matrix,
Python/linear_algebra/src/lib.py,326,matrix-scalar,
Python/linear_algebra/src/test_linear_algebra.py,70,for test of dot-product,
Python/graphics/bezier_curve.py,1,https://en.wikipedia.org/wiki/B%C3%A9zier_curve,
Python/graphics/bezier_curve.py,2,https://www.tutorialspoint.com/computer_graphics/computer_graphics_curves.htm,
Python/graphics/bezier_curve.py,21,Degree determines the flexibility of the curve.,
Python/graphics/bezier_curve.py,22,Degree = 1 will produce a straight line.,
Python/graphics/bezier_curve.py,41,basis function for each i,
Python/graphics/bezier_curve.py,45,the basis must sum up to 1 for it to produce a valid Bezier curve.,
Python/graphics/bezier_curve.py,70,"For all points, sum up the product of i-th basis function and i-th point.",
Python/graphics/bezier_curve.py,83,x coordinates of points to plot,
Python/graphics/bezier_curve.py,84,y coordinates of points to plot,
Python/graphics/bezier_curve.py,112,degree 1,
Python/graphics/bezier_curve.py,113,degree 2,
Python/graphics/bezier_curve.py,114,degree 3,
Python/web_programming/get_imdbtop.py,12,movie's name,
Python/web_programming/get_imdbtop.py,13,genre,
Python/web_programming/get_imdbtop.py,14,movie's rating,
Python/web_programming/get_imdbtop.py,15,movie's page link,
Python/web_programming/emails_from_url.py,26,Only parse the 'anchor' tag.,
Python/web_programming/emails_from_url.py,28,Check the list of defined attributes.,
Python/web_programming/emails_from_url.py,30,"If href is defined, and not empty nor # print it.",
Python/web_programming/emails_from_url.py,32,If not already in data.,
Python/web_programming/emails_from_url.py,38,Get main domain name (example.com),
Python/web_programming/emails_from_url.py,51,Get sub domain name (sub.example.com),
Python/web_programming/emails_from_url.py,66,Get the base domain from the url,
Python/web_programming/emails_from_url.py,69,Initialize the parser,
Python/web_programming/emails_from_url.py,73,Open URL,
Python/web_programming/emails_from_url.py,76,pass the raw HTML to the parser to get links,
Python/web_programming/emails_from_url.py,79,Get links and loop through,
Python/web_programming/emails_from_url.py,82,open URL.,
Python/web_programming/emails_from_url.py,83,read = requests.get(link),
Python/web_programming/emails_from_url.py,86,Get the valid email.,
Python/web_programming/emails_from_url.py,88,If not in list then append it.,
Python/web_programming/emails_from_url.py,96,Finally return a sorted list of email addresses with no duplicates.,
Python/web_programming/fetch_bbc_news.py,1,Created by sarathkaul on 12/11/19,
Python/web_programming/fetch_bbc_news.py,9,fetching a list of articles in json format,
Python/web_programming/fetch_bbc_news.py,11,each article in the list is a dict,
Python/web_programming/slack_message.py,1,Created by sarathkaul on 12/11/19,
Python/web_programming/slack_message.py,17,Set the slack url to the one provided by Slack when you create the webhook at https://my.slack.com/services/new/incoming-webhook/,
Python/web_programming/fetch_github_info.py,1,Created by sarathkaul on 14/11/19,
Python/web_programming/fetch_github_info.py,9,fetching github info using requests,
Python/web_programming/crawl_google_results.py,13,res.raise_for_status(),
Python/web_programming/crawl_google_results.py,14,only for knowing the class,
Python/matrix/matrix_operation.py,72,mt = [],
Python/matrix/matrix_operation.py,73,for i in range(len(matrix[0])):,
Python/matrix/matrix_operation.py,74,mt.append([row[i] for row in matrix]),
Python/matrix/matrix_operation.py,75,return mt,
Python/matrix/sherman_morrison.py,29,Prefix,
Python/matrix/sherman_morrison.py,32,Make string identifier,
Python/matrix/sherman_morrison.py,39,Make string and return,
Python/matrix/sherman_morrison.py,115,Validation,
Python/matrix/sherman_morrison.py,119,Add,
Python/matrix/sherman_morrison.py,163,Scalar multiplication,
Python/matrix/sherman_morrison.py,169,Matrix multiplication,
Python/matrix/sherman_morrison.py,230,Size validation,
Python/matrix/sherman_morrison.py,232,"u, v should be column vector",
Python/matrix/sherman_morrison.py,233,"u, v should be column vector",
Python/matrix/sherman_morrison.py,235,Calculate,
Python/matrix/sherman_morrison.py,239,It's not invertable,
Python/matrix/sherman_morrison.py,243,Testing,
Python/matrix/sherman_morrison.py,247,a^(-1),
Python/matrix/sherman_morrison.py,252,"u, v",
Python/matrix/sherman_morrison.py,260,Sherman Morrison,
Python/matrix/rotate_matrix.py,34,OR.. transpose(reverse_column(matrix)),
Python/matrix/rotate_matrix.py,46,OR.. reverse_column(reverse_row(matrix)),
Python/matrix/rotate_matrix.py,58,OR.. transpose(reverse_row(matrix)),
Python/matrix/spiral_print.py,12,must be,
Python/matrix/spiral_print.py,43,horizotal printing increasing,
Python/matrix/spiral_print.py,46,vertical printing down,
Python/matrix/spiral_print.py,49,horizotal printing decreasing,
Python/matrix/spiral_print.py,53,vertical printing up,
Python/matrix/spiral_print.py,66,driver code,
Python/matrix/matrix_class.py,1,An OOP approach to representing and manipulating matrices,
Python/matrix/matrix_class.py,122,MATRIX INFORMATION,
Python/matrix/matrix_class.py,239,MATRIX MANIPULATION,
Python/matrix/matrix_class.py,277,MATRIX OPERATIONS,
Python/matrix/nth_fibonacci_using_matrix_exponentiation.py,75,1000th --> 1000,
Python/matrix/nth_fibonacci_using_matrix_exponentiation.py,77,from timeit import timeit,
Python/matrix/nth_fibonacci_using_matrix_exponentiation.py,78,"print(timeit(""nth_fibonacci_matrix(1000000)"",",
Python/matrix/nth_fibonacci_using_matrix_exponentiation.py,79,"""from main import nth_fibonacci_matrix"", number=5))",
Python/matrix/nth_fibonacci_using_matrix_exponentiation.py,80,"print(timeit(""nth_fibonacci_bruteforce(1000000)"",",
Python/matrix/nth_fibonacci_using_matrix_exponentiation.py,81,"""from main import nth_fibonacci_bruteforce"", number=5))",
Python/matrix/nth_fibonacci_using_matrix_exponentiation.py,82,2.3342058970001744,
Python/matrix/nth_fibonacci_using_matrix_exponentiation.py,83,57.256506615000035,
Python/matrix/tests/test_matrix_operation.py,8,standard libraries,
Python/matrix/tests/test_matrix_operation.py,14,Custom/local libraries,
Python/sorts/topological_sort.py,3,a,
Python/sorts/topological_sort.py,4,/ \,
Python/sorts/topological_sort.py,5,b  c,
Python/sorts/topological_sort.py,6,/ \,
Python/sorts/topological_sort.py,7,d  e,
Python/sorts/topological_sort.py,15,add current to visited,
Python/sorts/topological_sort.py,19,"if neighbor not in visited, visit",
Python/sorts/topological_sort.py,22,if all neighbors visited add current to sort,
Python/sorts/topological_sort.py,24,if all vertices haven't been visited select a new one to visit,
Python/sorts/topological_sort.py,29,return sort,
Python/sorts/shell_sort.py,29,Marcin Ciura's gap sequence,
Python/sorts/bucket_sort.py,1,!/usr/bin/env python,
Python/sorts/bucket_sort.py,5,Author: OMKAR PATHAK,
Python/sorts/bucket_sort.py,6,This program will illustrate how to implement bucket sort algorithm,
Python/sorts/bucket_sort.py,8,"Wikipedia says: Bucket sort, or bin sort, is a sorting algorithm that works",
Python/sorts/bucket_sort.py,9,by distributing the elements of an array into a number of buckets.,
Python/sorts/bucket_sort.py,10,"Each bucket is then sorted individually, either using a different sorting",
Python/sorts/bucket_sort.py,11,"algorithm, or by recursively applying the bucket sorting algorithm. It is a",
Python/sorts/bucket_sort.py,12,"distribution sort, and is a cousin of radix sort in the most to least",
Python/sorts/bucket_sort.py,13,significant digit flavour.,
Python/sorts/bucket_sort.py,14,Bucket sort is a generalization of pigeonhole sort. Bucket sort can be,
Python/sorts/bucket_sort.py,15,implemented with comparisons and therefore can also be considered a,
Python/sorts/bucket_sort.py,16,comparison sort algorithm. The computational complexity estimates involve the,
Python/sorts/bucket_sort.py,17,number of buckets.,
Python/sorts/bucket_sort.py,19,Time Complexity of Solution:,
Python/sorts/bucket_sort.py,20,Worst case scenario occurs when all the elements are placed in a single bucket. The overall performance,
Python/sorts/bucket_sort.py,21,"would then be dominated by the algorithm used to sort each bucket. In this case, O(n log n), because of TimSort",
Python/sorts/bucket_sort.py,22,,
Python/sorts/bucket_sort.py,23,"Average Case O(n + (n^2)/k + k), where k is the number of buckets",
Python/sorts/bucket_sort.py,24,,
Python/sorts/bucket_sort.py,25,"If k = O(n), time complexity is O(n)",
Python/sorts/odd_even_transposition_parallel.py,15,lock used to ensure that two processes do not access a pipe at the same time,
Python/sorts/odd_even_transposition_parallel.py,33,we perform n swaps since after n swaps we know we are sorted,
Python/sorts/odd_even_transposition_parallel.py,34,"we *could* stop early if we are sorted already, but it takes as long to",
Python/sorts/odd_even_transposition_parallel.py,35,find out we are sorted as it does to sort the list with this algorithm,
Python/sorts/odd_even_transposition_parallel.py,39,send your value to your right neighbor,
Python/sorts/odd_even_transposition_parallel.py,44,receive your right neighbor's value,
Python/sorts/odd_even_transposition_parallel.py,49,take the lower value since you are on the left,
Python/sorts/odd_even_transposition_parallel.py,52,send your value to your left neighbor,
Python/sorts/odd_even_transposition_parallel.py,57,receive your left neighbor's value,
Python/sorts/odd_even_transposition_parallel.py,62,take the higher value since you are on the right,
Python/sorts/odd_even_transposition_parallel.py,64,"after all swaps are performed, send the values back to main",
Python/sorts/odd_even_transposition_parallel.py,78,initialize the list of pipes where the values will be retrieved,
Python/sorts/odd_even_transposition_parallel.py,81,creates the processes,
Python/sorts/odd_even_transposition_parallel.py,82,the first and last process only have one neighbor so they are made outside,
Python/sorts/odd_even_transposition_parallel.py,83,of the loop,
Python/sorts/odd_even_transposition_parallel.py,122,start the processes,
Python/sorts/odd_even_transposition_parallel.py,126,wait for the processes to end and write their values to the list,
Python/sorts/odd_even_transposition_parallel.py,133,creates a reverse sorted list and sorts it,
Python/sorts/quick_sort.py,35,Use the last element as the first pivot,
Python/sorts/quick_sort.py,37,Put elements greater than pivot in greater list,
Python/sorts/quick_sort.py,38,Put elements lesser than pivot in lesser list,
Python/sorts/cycle_sort.py,1,Code contributed by Honey Sharma,
Python/sorts/cycle_sort.py,5,Pass through the array to find cycles to rotate.,
Python/sorts/cycle_sort.py,9,finding the position for putting the item.,
Python/sorts/cycle_sort.py,15,If the item is already present-not a cycle.,
Python/sorts/cycle_sort.py,19,"Otherwise, put the item there or right after any duplicates.",
Python/sorts/cycle_sort.py,25,Rotate the rest of the cycle.,
Python/sorts/cycle_sort.py,28,Find where to put the item.,
Python/sorts/cycle_sort.py,34,Put the item there or right after any duplicates.,
Python/sorts/cycle_sort.py,43,Main Code starts here,
Python/sorts/pigeonhole_sort.py,1,Python program to implement Pigeonhole Sorting in python,
Python/sorts/pigeonhole_sort.py,3,Algorithm for the pigeonhole sorting,
Python/sorts/pigeonhole_sort.py,14,"size of range of values in the list (ie, number of pigeonholes we need)",
Python/sorts/pigeonhole_sort.py,16,min() finds the minimum value,
Python/sorts/pigeonhole_sort.py,17,max() finds the maximum value,
Python/sorts/pigeonhole_sort.py,19,size is difference of max and min values plus one,
Python/sorts/pigeonhole_sort.py,21,list of pigeonholes of size equal to the variable size,
Python/sorts/pigeonhole_sort.py,24,Populate the pigeonholes.,
Python/sorts/pigeonhole_sort.py,29,Putting the elements back into the array in an order.,
Python/sorts/recursive_insertion_sort.py,31,Checks if the entire collection has been sorted,
Python/sorts/recursive_insertion_sort.py,58,Checks order between adjacent elements,
Python/sorts/recursive_insertion_sort.py,62,Swaps adjacent elements since they are not in ascending order,
Python/sorts/odd_even_transposition_single_threaded.py,19,creates a list and sorts it,
Python/sorts/pancake_sort.py,26,Find the maximum number in arr,
Python/sorts/pancake_sort.py,28,Reverse from 0 to mi,
Python/sorts/pancake_sort.py,30,Reverse whole list,
Python/sorts/bubble_sort.py,32,Stop iteration if the collection is sorted.,
Python/sorts/stooge_sort.py,19,If first element is smaller than the last then swap them,
Python/sorts/stooge_sort.py,23,If there are more than 2 elements in the array,
Python/sorts/stooge_sort.py,27,Recursively sort first 2/3 elements,
Python/sorts/stooge_sort.py,30,Recursively sort last 2/3 elements,
Python/sorts/stooge_sort.py,33,Recursively sort first 2/3 elements,
Python/sorts/random_normal_distribution_quicksort.py,31,check if current val is less than pivot value,
Python/sorts/random_normal_distribution_quicksort.py,44,1000 elements are to be sorted,
Python/sorts/random_normal_distribution_quicksort.py,47,mean and standard deviation,
Python/sorts/random_normal_distribution_quicksort.py,54,using the same array,
Python/sorts/radix_sort.py,5,get the maximum number,
Python/sorts/radix_sort.py,9,declare and initialize buckets,
Python/sorts/radix_sort.py,12,split lst between lists,
Python/sorts/radix_sort.py,17,empty lists into lst array,
Python/sorts/radix_sort.py,25,move to next,
Python/sorts/counting_sort.py,25,"if the collection is empty, returns empty",
Python/sorts/counting_sort.py,29,get some information about the collection,
Python/sorts/counting_sort.py,34,create the counting array,
Python/sorts/counting_sort.py,38,count how much a number appears in the collection,
Python/sorts/counting_sort.py,42,"sum each position with it's predecessors. now, counting_arr[i] tells",
Python/sorts/counting_sort.py,43,us how many elements <= i has in the collection,
Python/sorts/counting_sort.py,47,create the output collection,
Python/sorts/counting_sort.py,50,"place the elements in the output, respecting the original order (stable",
Python/sorts/counting_sort.py,51,"sort) from end to begin, updating counting_arr",
Python/sorts/counting_sort.py,68,Test string sort,
Python/sorts/tree_sort.py,9,BST data structure,
Python/sorts/tree_sort.py,32,Recursive travesal,
Python/sorts/tree_sort.py,40,Build BST,
Python/sorts/tree_sort.py,46,Traverse BST in order.,
Python/sorts/external_sort.py,1,!/usr/bin/env python,
Python/sorts/external_sort.py,3,,
Python/sorts/external_sort.py,4,Sort large text files in a minimum amount of memory,
Python/sorts/external_sort.py,5,,
Python/sorts/random_pivot_quick_sort.py,24,switches the pivot with the left most bound,
Python/sorts/random_pivot_quick_sort.py,28,recursive quicksort to the left of the pivot point,
Python/sorts/random_pivot_quick_sort.py,31,recursive quicksort to the right of the pivot point,
Python/sorts/comb_sort.py,39,Update the gap value for a next comb,
Python/sorts/comb_sort.py,47,Swap values,
Python/sorts/pigeon_sort.py,29,Manually finds the minimum and maximum of the array.,
Python/sorts/pigeon_sort.py,39,Compute the variables,
Python/sorts/pigeon_sort.py,44,Make the sorting.,
Python/sorts/pigeon_sort.py,53,Makes the array back by replacing the numbers.,
Python/sorts/pigeon_sort.py,61,Returns the sorted array.,
Python/sorts/bitonic_sort.py,1,Python program for Bitonic Sort. Note that this program,
Python/sorts/bitonic_sort.py,2,works only when size of input is a power of 2.,
Python/sorts/bitonic_sort.py,4,"The parameter dir indicates the sorting direction, ASCENDING",
Python/sorts/bitonic_sort.py,5,"or DESCENDING; if (a[i] > a[j]) agrees with the direction,",
Python/sorts/bitonic_sort.py,6,then a[i] and a[j] are interchanged.*/,
Python/sorts/bitonic_sort.py,11,"It recursively sorts a bitonic sequence in ascending order,",
Python/sorts/bitonic_sort.py,14,"if dir = 1, and in descending order otherwise (means dir=0).",
Python/sorts/bitonic_sort.py,15,"The sequence to be sorted starts at index position low,",
Python/sorts/bitonic_sort.py,16,the parameter cnt is the number of elements to be sorted.,
Python/sorts/bitonic_sort.py,25,This function first produces a bitonic sequence by recursively,
Python/sorts/bitonic_sort.py,28,"sorting its two halves in opposite sorting orders, and then",
Python/sorts/bitonic_sort.py,29,calls bitonic_merge to make them in the same order,
Python/sorts/bitonic_sort.py,37,Caller of bitonic_sort for sorting the entire array of length N,
Python/sorts/bitonic_sort.py,40,in ASCENDING order,
Python/sorts/double_sort.py,20,we don't need to traverse to end of list as,
Python/sorts/double_sort.py,24,applying bubble sort algorithm from left to right (or forwards),
Python/sorts/double_sort.py,30,applying bubble sort algorithm from right to left (or backwards),
Python/sorts/double_sort.py,39,inputing elements of the list in one line,
